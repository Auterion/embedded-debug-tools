// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fdescriptor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fdescriptor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fdescriptor_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
namespace perfetto {
namespace protos {
class DescriptorProto;
struct DescriptorProtoDefaultTypeInternal;
extern DescriptorProtoDefaultTypeInternal _DescriptorProto_default_instance_;
class DescriptorProto_ReservedRange;
struct DescriptorProto_ReservedRangeDefaultTypeInternal;
extern DescriptorProto_ReservedRangeDefaultTypeInternal _DescriptorProto_ReservedRange_default_instance_;
class EnumDescriptorProto;
struct EnumDescriptorProtoDefaultTypeInternal;
extern EnumDescriptorProtoDefaultTypeInternal _EnumDescriptorProto_default_instance_;
class EnumValueDescriptorProto;
struct EnumValueDescriptorProtoDefaultTypeInternal;
extern EnumValueDescriptorProtoDefaultTypeInternal _EnumValueDescriptorProto_default_instance_;
class FieldDescriptorProto;
struct FieldDescriptorProtoDefaultTypeInternal;
extern FieldDescriptorProtoDefaultTypeInternal _FieldDescriptorProto_default_instance_;
class FieldOptions;
struct FieldOptionsDefaultTypeInternal;
extern FieldOptionsDefaultTypeInternal _FieldOptions_default_instance_;
class FileDescriptorProto;
struct FileDescriptorProtoDefaultTypeInternal;
extern FileDescriptorProtoDefaultTypeInternal _FileDescriptorProto_default_instance_;
class FileDescriptorSet;
struct FileDescriptorSetDefaultTypeInternal;
extern FileDescriptorSetDefaultTypeInternal _FileDescriptorSet_default_instance_;
class OneofDescriptorProto;
struct OneofDescriptorProtoDefaultTypeInternal;
extern OneofDescriptorProtoDefaultTypeInternal _OneofDescriptorProto_default_instance_;
class OneofOptions;
struct OneofOptionsDefaultTypeInternal;
extern OneofOptionsDefaultTypeInternal _OneofOptions_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::DescriptorProto* Arena::CreateMaybeMessage<::perfetto::protos::DescriptorProto>(Arena*);
template <>
::perfetto::protos::DescriptorProto_ReservedRange* Arena::CreateMaybeMessage<::perfetto::protos::DescriptorProto_ReservedRange>(Arena*);
template <>
::perfetto::protos::EnumDescriptorProto* Arena::CreateMaybeMessage<::perfetto::protos::EnumDescriptorProto>(Arena*);
template <>
::perfetto::protos::EnumValueDescriptorProto* Arena::CreateMaybeMessage<::perfetto::protos::EnumValueDescriptorProto>(Arena*);
template <>
::perfetto::protos::FieldDescriptorProto* Arena::CreateMaybeMessage<::perfetto::protos::FieldDescriptorProto>(Arena*);
template <>
::perfetto::protos::FieldOptions* Arena::CreateMaybeMessage<::perfetto::protos::FieldOptions>(Arena*);
template <>
::perfetto::protos::FileDescriptorProto* Arena::CreateMaybeMessage<::perfetto::protos::FileDescriptorProto>(Arena*);
template <>
::perfetto::protos::FileDescriptorSet* Arena::CreateMaybeMessage<::perfetto::protos::FileDescriptorSet>(Arena*);
template <>
::perfetto::protos::OneofDescriptorProto* Arena::CreateMaybeMessage<::perfetto::protos::OneofDescriptorProto>(Arena*);
template <>
::perfetto::protos::OneofOptions* Arena::CreateMaybeMessage<::perfetto::protos::OneofOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum FieldDescriptorProto_Type : int {
  FieldDescriptorProto_Type_TYPE_DOUBLE = 1,
  FieldDescriptorProto_Type_TYPE_FLOAT = 2,
  FieldDescriptorProto_Type_TYPE_INT64 = 3,
  FieldDescriptorProto_Type_TYPE_UINT64 = 4,
  FieldDescriptorProto_Type_TYPE_INT32 = 5,
  FieldDescriptorProto_Type_TYPE_FIXED64 = 6,
  FieldDescriptorProto_Type_TYPE_FIXED32 = 7,
  FieldDescriptorProto_Type_TYPE_BOOL = 8,
  FieldDescriptorProto_Type_TYPE_STRING = 9,
  FieldDescriptorProto_Type_TYPE_GROUP = 10,
  FieldDescriptorProto_Type_TYPE_MESSAGE = 11,
  FieldDescriptorProto_Type_TYPE_BYTES = 12,
  FieldDescriptorProto_Type_TYPE_UINT32 = 13,
  FieldDescriptorProto_Type_TYPE_ENUM = 14,
  FieldDescriptorProto_Type_TYPE_SFIXED32 = 15,
  FieldDescriptorProto_Type_TYPE_SFIXED64 = 16,
  FieldDescriptorProto_Type_TYPE_SINT32 = 17,
  FieldDescriptorProto_Type_TYPE_SINT64 = 18,
};

bool FieldDescriptorProto_Type_IsValid(int value);
constexpr FieldDescriptorProto_Type FieldDescriptorProto_Type_Type_MIN = static_cast<FieldDescriptorProto_Type>(1);
constexpr FieldDescriptorProto_Type FieldDescriptorProto_Type_Type_MAX = static_cast<FieldDescriptorProto_Type>(18);
constexpr int FieldDescriptorProto_Type_Type_ARRAYSIZE = 18 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FieldDescriptorProto_Type_descriptor();
template <typename T>
const std::string& FieldDescriptorProto_Type_Name(T value) {
  static_assert(std::is_same<T, FieldDescriptorProto_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return FieldDescriptorProto_Type_Name(static_cast<FieldDescriptorProto_Type>(value));
}
template <>
inline const std::string& FieldDescriptorProto_Type_Name(FieldDescriptorProto_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FieldDescriptorProto_Type_descriptor,
                                                 1, 18>(
      static_cast<int>(value));
}
inline bool FieldDescriptorProto_Type_Parse(absl::string_view name, FieldDescriptorProto_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldDescriptorProto_Type>(
      FieldDescriptorProto_Type_descriptor(), name, value);
}
enum FieldDescriptorProto_Label : int {
  FieldDescriptorProto_Label_LABEL_OPTIONAL = 1,
  FieldDescriptorProto_Label_LABEL_REQUIRED = 2,
  FieldDescriptorProto_Label_LABEL_REPEATED = 3,
};

bool FieldDescriptorProto_Label_IsValid(int value);
constexpr FieldDescriptorProto_Label FieldDescriptorProto_Label_Label_MIN = static_cast<FieldDescriptorProto_Label>(1);
constexpr FieldDescriptorProto_Label FieldDescriptorProto_Label_Label_MAX = static_cast<FieldDescriptorProto_Label>(3);
constexpr int FieldDescriptorProto_Label_Label_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FieldDescriptorProto_Label_descriptor();
template <typename T>
const std::string& FieldDescriptorProto_Label_Name(T value) {
  static_assert(std::is_same<T, FieldDescriptorProto_Label>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Label_Name().");
  return FieldDescriptorProto_Label_Name(static_cast<FieldDescriptorProto_Label>(value));
}
template <>
inline const std::string& FieldDescriptorProto_Label_Name(FieldDescriptorProto_Label value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FieldDescriptorProto_Label_descriptor,
                                                 1, 3>(
      static_cast<int>(value));
}
inline bool FieldDescriptorProto_Label_Parse(absl::string_view name, FieldDescriptorProto_Label* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldDescriptorProto_Label>(
      FieldDescriptorProto_Label_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FileDescriptorSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FileDescriptorSet) */ {
 public:
  inline FileDescriptorSet() : FileDescriptorSet(nullptr) {}
  ~FileDescriptorSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDescriptorSet(const FileDescriptorSet& from);
  FileDescriptorSet(FileDescriptorSet&& from) noexcept
    : FileDescriptorSet() {
    *this = ::std::move(from);
  }

  inline FileDescriptorSet& operator=(const FileDescriptorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorSet& operator=(FileDescriptorSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorSet* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorSet*>(
               &_FileDescriptorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileDescriptorSet& a, FileDescriptorSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDescriptorSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDescriptorSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDescriptorSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDescriptorSet& from) {
    FileDescriptorSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDescriptorSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FileDescriptorSet";
  }
  protected:
  explicit FileDescriptorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // repeated .perfetto.protos.FileDescriptorProto file = 1;
  int file_size() const;
  private:
  int _internal_file_size() const;

  public:
  void clear_file() ;
  ::perfetto::protos::FileDescriptorProto* mutable_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FileDescriptorProto >*
      mutable_file();
  private:
  const ::perfetto::protos::FileDescriptorProto& _internal_file(int index) const;
  ::perfetto::protos::FileDescriptorProto* _internal_add_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FileDescriptorProto>& _internal_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FileDescriptorProto>* _internal_mutable_file();
  public:
  const ::perfetto::protos::FileDescriptorProto& file(int index) const;
  ::perfetto::protos::FileDescriptorProto* add_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FileDescriptorProto >&
      file() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FileDescriptorSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FileDescriptorProto > file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class FileDescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FileDescriptorProto) */ {
 public:
  inline FileDescriptorProto() : FileDescriptorProto(nullptr) {}
  ~FileDescriptorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDescriptorProto(const FileDescriptorProto& from);
  FileDescriptorProto(FileDescriptorProto&& from) noexcept
    : FileDescriptorProto() {
    *this = ::std::move(from);
  }

  inline FileDescriptorProto& operator=(const FileDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorProto& operator=(FileDescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorProto*>(
               &_FileDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileDescriptorProto& a, FileDescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDescriptorProto& from) {
    FileDescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FileDescriptorProto";
  }
  protected:
  explicit FileDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyFieldNumber = 3,
    kMessageTypeFieldNumber = 4,
    kEnumTypeFieldNumber = 5,
    kExtensionFieldNumber = 7,
    kPublicDependencyFieldNumber = 10,
    kWeakDependencyFieldNumber = 11,
    kNameFieldNumber = 1,
    kPackageFieldNumber = 2,
  };
  // repeated string dependency = 3;
  int dependency_size() const;
  private:
  int _internal_dependency_size() const;

  public:
  void clear_dependency() ;
  const std::string& dependency(int index) const;
  std::string* mutable_dependency(int index);
  void set_dependency(int index, const std::string& value);
  void set_dependency(int index, std::string&& value);
  void set_dependency(int index, const char* value);
  void set_dependency(int index, const char* value, std::size_t size);
  void set_dependency(int index, absl::string_view value);
  std::string* add_dependency();
  void add_dependency(const std::string& value);
  void add_dependency(std::string&& value);
  void add_dependency(const char* value);
  void add_dependency(const char* value, std::size_t size);
  void add_dependency(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependency();

  private:
  const std::string& _internal_dependency(int index) const;
  std::string* _internal_add_dependency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_dependency();

  public:
  // repeated .perfetto.protos.DescriptorProto message_type = 4;
  int message_type_size() const;
  private:
  int _internal_message_type_size() const;

  public:
  void clear_message_type() ;
  ::perfetto::protos::DescriptorProto* mutable_message_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >*
      mutable_message_type();
  private:
  const ::perfetto::protos::DescriptorProto& _internal_message_type(int index) const;
  ::perfetto::protos::DescriptorProto* _internal_add_message_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>& _internal_message_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>* _internal_mutable_message_type();
  public:
  const ::perfetto::protos::DescriptorProto& message_type(int index) const;
  ::perfetto::protos::DescriptorProto* add_message_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >&
      message_type() const;
  // repeated .perfetto.protos.EnumDescriptorProto enum_type = 5;
  int enum_type_size() const;
  private:
  int _internal_enum_type_size() const;

  public:
  void clear_enum_type() ;
  ::perfetto::protos::EnumDescriptorProto* mutable_enum_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >*
      mutable_enum_type();
  private:
  const ::perfetto::protos::EnumDescriptorProto& _internal_enum_type(int index) const;
  ::perfetto::protos::EnumDescriptorProto* _internal_add_enum_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>& _internal_enum_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>* _internal_mutable_enum_type();
  public:
  const ::perfetto::protos::EnumDescriptorProto& enum_type(int index) const;
  ::perfetto::protos::EnumDescriptorProto* add_enum_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >&
      enum_type() const;
  // repeated .perfetto.protos.FieldDescriptorProto extension = 7;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::perfetto::protos::FieldDescriptorProto* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >*
      mutable_extension();
  private:
  const ::perfetto::protos::FieldDescriptorProto& _internal_extension(int index) const;
  ::perfetto::protos::FieldDescriptorProto* _internal_add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>& _internal_extension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>* _internal_mutable_extension();
  public:
  const ::perfetto::protos::FieldDescriptorProto& extension(int index) const;
  ::perfetto::protos::FieldDescriptorProto* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >&
      extension() const;
  // repeated int32 public_dependency = 10;
  int public_dependency_size() const;
  private:
  int _internal_public_dependency_size() const;

  public:
  void clear_public_dependency() ;
  ::int32_t public_dependency(int index) const;
  void set_public_dependency(int index, ::int32_t value);
  void add_public_dependency(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& public_dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_public_dependency();

  private:
  ::int32_t _internal_public_dependency(int index) const;
  void _internal_add_public_dependency(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_public_dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_public_dependency();

  public:
  // repeated int32 weak_dependency = 11;
  int weak_dependency_size() const;
  private:
  int _internal_weak_dependency_size() const;

  public:
  void clear_weak_dependency() ;
  ::int32_t weak_dependency(int index) const;
  void set_weak_dependency(int index, ::int32_t value);
  void add_weak_dependency(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& weak_dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_weak_dependency();

  private:
  ::int32_t _internal_weak_dependency(int index) const;
  void _internal_add_weak_dependency(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_weak_dependency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_weak_dependency();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string package = 2;
  bool has_package() const;
  void clear_package() ;
  const std::string& package() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_package(Arg_&& arg, Args_... args);
  std::string* mutable_package();
  PROTOBUF_NODISCARD std::string* release_package();
  void set_allocated_package(std::string* ptr);

  private:
  const std::string& _internal_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_package(
      const std::string& value);
  std::string* _internal_mutable_package();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FileDescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto > message_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto > enum_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto > extension_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> public_dependency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> weak_dependency_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class DescriptorProto_ReservedRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DescriptorProto.ReservedRange) */ {
 public:
  inline DescriptorProto_ReservedRange() : DescriptorProto_ReservedRange(nullptr) {}
  ~DescriptorProto_ReservedRange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DescriptorProto_ReservedRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescriptorProto_ReservedRange(const DescriptorProto_ReservedRange& from);
  DescriptorProto_ReservedRange(DescriptorProto_ReservedRange&& from) noexcept
    : DescriptorProto_ReservedRange() {
    *this = ::std::move(from);
  }

  inline DescriptorProto_ReservedRange& operator=(const DescriptorProto_ReservedRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescriptorProto_ReservedRange& operator=(DescriptorProto_ReservedRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescriptorProto_ReservedRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescriptorProto_ReservedRange* internal_default_instance() {
    return reinterpret_cast<const DescriptorProto_ReservedRange*>(
               &_DescriptorProto_ReservedRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DescriptorProto_ReservedRange& a, DescriptorProto_ReservedRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DescriptorProto_ReservedRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescriptorProto_ReservedRange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescriptorProto_ReservedRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescriptorProto_ReservedRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescriptorProto_ReservedRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescriptorProto_ReservedRange& from) {
    DescriptorProto_ReservedRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptorProto_ReservedRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DescriptorProto.ReservedRange";
  }
  protected:
  explicit DescriptorProto_ReservedRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional int32 start = 1;
  bool has_start() const;
  void clear_start() ;
  ::int32_t start() const;
  void set_start(::int32_t value);

  private:
  ::int32_t _internal_start() const;
  void _internal_set_start(::int32_t value);

  public:
  // optional int32 end = 2;
  bool has_end() const;
  void clear_end() ;
  ::int32_t end() const;
  void set_end(::int32_t value);

  private:
  ::int32_t _internal_end() const;
  void _internal_set_end(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DescriptorProto.ReservedRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t start_;
    ::int32_t end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class DescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DescriptorProto) */ {
 public:
  inline DescriptorProto() : DescriptorProto(nullptr) {}
  ~DescriptorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DescriptorProto(const DescriptorProto& from);
  DescriptorProto(DescriptorProto&& from) noexcept
    : DescriptorProto() {
    *this = ::std::move(from);
  }

  inline DescriptorProto& operator=(const DescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescriptorProto& operator=(DescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DescriptorProto* internal_default_instance() {
    return reinterpret_cast<const DescriptorProto*>(
               &_DescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DescriptorProto& a, DescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescriptorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DescriptorProto& from) {
    DescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DescriptorProto";
  }
  protected:
  explicit DescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DescriptorProto_ReservedRange ReservedRange;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 2,
    kNestedTypeFieldNumber = 3,
    kEnumTypeFieldNumber = 4,
    kExtensionFieldNumber = 6,
    kOneofDeclFieldNumber = 8,
    kReservedRangeFieldNumber = 9,
    kReservedNameFieldNumber = 10,
    kNameFieldNumber = 1,
  };
  // repeated .perfetto.protos.FieldDescriptorProto field = 2;
  int field_size() const;
  private:
  int _internal_field_size() const;

  public:
  void clear_field() ;
  ::perfetto::protos::FieldDescriptorProto* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >*
      mutable_field();
  private:
  const ::perfetto::protos::FieldDescriptorProto& _internal_field(int index) const;
  ::perfetto::protos::FieldDescriptorProto* _internal_add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>& _internal_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>* _internal_mutable_field();
  public:
  const ::perfetto::protos::FieldDescriptorProto& field(int index) const;
  ::perfetto::protos::FieldDescriptorProto* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >&
      field() const;
  // repeated .perfetto.protos.DescriptorProto nested_type = 3;
  int nested_type_size() const;
  private:
  int _internal_nested_type_size() const;

  public:
  void clear_nested_type() ;
  ::perfetto::protos::DescriptorProto* mutable_nested_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >*
      mutable_nested_type();
  private:
  const ::perfetto::protos::DescriptorProto& _internal_nested_type(int index) const;
  ::perfetto::protos::DescriptorProto* _internal_add_nested_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>& _internal_nested_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>* _internal_mutable_nested_type();
  public:
  const ::perfetto::protos::DescriptorProto& nested_type(int index) const;
  ::perfetto::protos::DescriptorProto* add_nested_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >&
      nested_type() const;
  // repeated .perfetto.protos.EnumDescriptorProto enum_type = 4;
  int enum_type_size() const;
  private:
  int _internal_enum_type_size() const;

  public:
  void clear_enum_type() ;
  ::perfetto::protos::EnumDescriptorProto* mutable_enum_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >*
      mutable_enum_type();
  private:
  const ::perfetto::protos::EnumDescriptorProto& _internal_enum_type(int index) const;
  ::perfetto::protos::EnumDescriptorProto* _internal_add_enum_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>& _internal_enum_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>* _internal_mutable_enum_type();
  public:
  const ::perfetto::protos::EnumDescriptorProto& enum_type(int index) const;
  ::perfetto::protos::EnumDescriptorProto* add_enum_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >&
      enum_type() const;
  // repeated .perfetto.protos.FieldDescriptorProto extension = 6;
  int extension_size() const;
  private:
  int _internal_extension_size() const;

  public:
  void clear_extension() ;
  ::perfetto::protos::FieldDescriptorProto* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >*
      mutable_extension();
  private:
  const ::perfetto::protos::FieldDescriptorProto& _internal_extension(int index) const;
  ::perfetto::protos::FieldDescriptorProto* _internal_add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>& _internal_extension() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>* _internal_mutable_extension();
  public:
  const ::perfetto::protos::FieldDescriptorProto& extension(int index) const;
  ::perfetto::protos::FieldDescriptorProto* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >&
      extension() const;
  // repeated .perfetto.protos.OneofDescriptorProto oneof_decl = 8;
  int oneof_decl_size() const;
  private:
  int _internal_oneof_decl_size() const;

  public:
  void clear_oneof_decl() ;
  ::perfetto::protos::OneofDescriptorProto* mutable_oneof_decl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::OneofDescriptorProto >*
      mutable_oneof_decl();
  private:
  const ::perfetto::protos::OneofDescriptorProto& _internal_oneof_decl(int index) const;
  ::perfetto::protos::OneofDescriptorProto* _internal_add_oneof_decl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::OneofDescriptorProto>& _internal_oneof_decl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::OneofDescriptorProto>* _internal_mutable_oneof_decl();
  public:
  const ::perfetto::protos::OneofDescriptorProto& oneof_decl(int index) const;
  ::perfetto::protos::OneofDescriptorProto* add_oneof_decl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::OneofDescriptorProto >&
      oneof_decl() const;
  // repeated .perfetto.protos.DescriptorProto.ReservedRange reserved_range = 9;
  int reserved_range_size() const;
  private:
  int _internal_reserved_range_size() const;

  public:
  void clear_reserved_range() ;
  ::perfetto::protos::DescriptorProto_ReservedRange* mutable_reserved_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto_ReservedRange >*
      mutable_reserved_range();
  private:
  const ::perfetto::protos::DescriptorProto_ReservedRange& _internal_reserved_range(int index) const;
  ::perfetto::protos::DescriptorProto_ReservedRange* _internal_add_reserved_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto_ReservedRange>& _internal_reserved_range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto_ReservedRange>* _internal_mutable_reserved_range();
  public:
  const ::perfetto::protos::DescriptorProto_ReservedRange& reserved_range(int index) const;
  ::perfetto::protos::DescriptorProto_ReservedRange* add_reserved_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto_ReservedRange >&
      reserved_range() const;
  // repeated string reserved_name = 10;
  int reserved_name_size() const;
  private:
  int _internal_reserved_name_size() const;

  public:
  void clear_reserved_name() ;
  const std::string& reserved_name(int index) const;
  std::string* mutable_reserved_name(int index);
  void set_reserved_name(int index, const std::string& value);
  void set_reserved_name(int index, std::string&& value);
  void set_reserved_name(int index, const char* value);
  void set_reserved_name(int index, const char* value, std::size_t size);
  void set_reserved_name(int index, absl::string_view value);
  std::string* add_reserved_name();
  void add_reserved_name(const std::string& value);
  void add_reserved_name(std::string&& value);
  void add_reserved_name(const char* value);
  void add_reserved_name(const char* value, std::size_t size);
  void add_reserved_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reserved_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reserved_name();

  private:
  const std::string& _internal_reserved_name(int index) const;
  std::string* _internal_add_reserved_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_reserved_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_reserved_name();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto > field_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto > nested_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto > enum_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto > extension_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::OneofDescriptorProto > oneof_decl_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto_ReservedRange > reserved_range_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reserved_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class FieldOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FieldOptions) */ {
 public:
  inline FieldOptions() : FieldOptions(nullptr) {}
  ~FieldOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FieldOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldOptions(const FieldOptions& from);
  FieldOptions(FieldOptions&& from) noexcept
    : FieldOptions() {
    *this = ::std::move(from);
  }

  inline FieldOptions& operator=(const FieldOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldOptions& operator=(FieldOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldOptions* internal_default_instance() {
    return reinterpret_cast<const FieldOptions*>(
               &_FieldOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldOptions& a, FieldOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldOptions& from) {
    FieldOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FieldOptions";
  }
  protected:
  explicit FieldOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedFieldNumber = 2,
  };
  // optional bool packed = 2;
  bool has_packed() const;
  void clear_packed() ;
  bool packed() const;
  void set_packed(bool value);

  private:
  bool _internal_packed() const;
  void _internal_set_packed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FieldOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool packed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class FieldDescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FieldDescriptorProto) */ {
 public:
  inline FieldDescriptorProto() : FieldDescriptorProto(nullptr) {}
  ~FieldDescriptorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FieldDescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldDescriptorProto(const FieldDescriptorProto& from);
  FieldDescriptorProto(FieldDescriptorProto&& from) noexcept
    : FieldDescriptorProto() {
    *this = ::std::move(from);
  }

  inline FieldDescriptorProto& operator=(const FieldDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldDescriptorProto& operator=(FieldDescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldDescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const FieldDescriptorProto*>(
               &_FieldDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FieldDescriptorProto& a, FieldDescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldDescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldDescriptorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldDescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldDescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldDescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldDescriptorProto& from) {
    FieldDescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldDescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FieldDescriptorProto";
  }
  protected:
  explicit FieldDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = FieldDescriptorProto_Type;
  static constexpr Type TYPE_DOUBLE = FieldDescriptorProto_Type_TYPE_DOUBLE;
  static constexpr Type TYPE_FLOAT = FieldDescriptorProto_Type_TYPE_FLOAT;
  static constexpr Type TYPE_INT64 = FieldDescriptorProto_Type_TYPE_INT64;
  static constexpr Type TYPE_UINT64 = FieldDescriptorProto_Type_TYPE_UINT64;
  static constexpr Type TYPE_INT32 = FieldDescriptorProto_Type_TYPE_INT32;
  static constexpr Type TYPE_FIXED64 = FieldDescriptorProto_Type_TYPE_FIXED64;
  static constexpr Type TYPE_FIXED32 = FieldDescriptorProto_Type_TYPE_FIXED32;
  static constexpr Type TYPE_BOOL = FieldDescriptorProto_Type_TYPE_BOOL;
  static constexpr Type TYPE_STRING = FieldDescriptorProto_Type_TYPE_STRING;
  static constexpr Type TYPE_GROUP = FieldDescriptorProto_Type_TYPE_GROUP;
  static constexpr Type TYPE_MESSAGE = FieldDescriptorProto_Type_TYPE_MESSAGE;
  static constexpr Type TYPE_BYTES = FieldDescriptorProto_Type_TYPE_BYTES;
  static constexpr Type TYPE_UINT32 = FieldDescriptorProto_Type_TYPE_UINT32;
  static constexpr Type TYPE_ENUM = FieldDescriptorProto_Type_TYPE_ENUM;
  static constexpr Type TYPE_SFIXED32 = FieldDescriptorProto_Type_TYPE_SFIXED32;
  static constexpr Type TYPE_SFIXED64 = FieldDescriptorProto_Type_TYPE_SFIXED64;
  static constexpr Type TYPE_SINT32 = FieldDescriptorProto_Type_TYPE_SINT32;
  static constexpr Type TYPE_SINT64 = FieldDescriptorProto_Type_TYPE_SINT64;
  static inline bool Type_IsValid(int value) {
    return FieldDescriptorProto_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = FieldDescriptorProto_Type_Type_MIN;
  static constexpr Type Type_MAX = FieldDescriptorProto_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = FieldDescriptorProto_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return FieldDescriptorProto_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return FieldDescriptorProto_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return FieldDescriptorProto_Type_Parse(name, value);
  }

  using Label = FieldDescriptorProto_Label;
  static constexpr Label LABEL_OPTIONAL = FieldDescriptorProto_Label_LABEL_OPTIONAL;
  static constexpr Label LABEL_REQUIRED = FieldDescriptorProto_Label_LABEL_REQUIRED;
  static constexpr Label LABEL_REPEATED = FieldDescriptorProto_Label_LABEL_REPEATED;
  static inline bool Label_IsValid(int value) {
    return FieldDescriptorProto_Label_IsValid(value);
  }
  static constexpr Label Label_MIN = FieldDescriptorProto_Label_Label_MIN;
  static constexpr Label Label_MAX = FieldDescriptorProto_Label_Label_MAX;
  static constexpr int Label_ARRAYSIZE = FieldDescriptorProto_Label_Label_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_descriptor() {
    return FieldDescriptorProto_Label_descriptor();
  }
  template <typename T>
  static inline const std::string& Label_Name(T value) {
    return FieldDescriptorProto_Label_Name(value);
  }
  static inline bool Label_Parse(absl::string_view name, Label* value) {
    return FieldDescriptorProto_Label_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtendeeFieldNumber = 2,
    kTypeNameFieldNumber = 6,
    kDefaultValueFieldNumber = 7,
    kOptionsFieldNumber = 8,
    kNumberFieldNumber = 3,
    kOneofIndexFieldNumber = 9,
    kLabelFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string extendee = 2;
  bool has_extendee() const;
  void clear_extendee() ;
  const std::string& extendee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extendee(Arg_&& arg, Args_... args);
  std::string* mutable_extendee();
  PROTOBUF_NODISCARD std::string* release_extendee();
  void set_allocated_extendee(std::string* ptr);

  private:
  const std::string& _internal_extendee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extendee(
      const std::string& value);
  std::string* _internal_mutable_extendee();

  public:
  // optional string type_name = 6;
  bool has_type_name() const;
  void clear_type_name() ;
  const std::string& type_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_type_name();
  PROTOBUF_NODISCARD std::string* release_type_name();
  void set_allocated_type_name(std::string* ptr);

  private:
  const std::string& _internal_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_name(
      const std::string& value);
  std::string* _internal_mutable_type_name();

  public:
  // optional string default_value = 7;
  bool has_default_value() const;
  void clear_default_value() ;
  const std::string& default_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_value(Arg_&& arg, Args_... args);
  std::string* mutable_default_value();
  PROTOBUF_NODISCARD std::string* release_default_value();
  void set_allocated_default_value(std::string* ptr);

  private:
  const std::string& _internal_default_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_value(
      const std::string& value);
  std::string* _internal_mutable_default_value();

  public:
  // optional .perfetto.protos.FieldOptions options = 8;
  bool has_options() const;
  void clear_options() ;
  const ::perfetto::protos::FieldOptions& options() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FieldOptions* release_options();
  ::perfetto::protos::FieldOptions* mutable_options();
  void set_allocated_options(::perfetto::protos::FieldOptions* options);
  private:
  const ::perfetto::protos::FieldOptions& _internal_options() const;
  ::perfetto::protos::FieldOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::perfetto::protos::FieldOptions* options);
  ::perfetto::protos::FieldOptions* unsafe_arena_release_options();
  // optional int32 number = 3;
  bool has_number() const;
  void clear_number() ;
  ::int32_t number() const;
  void set_number(::int32_t value);

  private:
  ::int32_t _internal_number() const;
  void _internal_set_number(::int32_t value);

  public:
  // optional int32 oneof_index = 9;
  bool has_oneof_index() const;
  void clear_oneof_index() ;
  ::int32_t oneof_index() const;
  void set_oneof_index(::int32_t value);

  private:
  ::int32_t _internal_oneof_index() const;
  void _internal_set_oneof_index(::int32_t value);

  public:
  // optional .perfetto.protos.FieldDescriptorProto.Label label = 4;
  bool has_label() const;
  void clear_label() ;
  ::perfetto::protos::FieldDescriptorProto_Label label() const;
  void set_label(::perfetto::protos::FieldDescriptorProto_Label value);

  private:
  ::perfetto::protos::FieldDescriptorProto_Label _internal_label() const;
  void _internal_set_label(::perfetto::protos::FieldDescriptorProto_Label value);

  public:
  // optional .perfetto.protos.FieldDescriptorProto.Type type = 5;
  bool has_type() const;
  void clear_type() ;
  ::perfetto::protos::FieldDescriptorProto_Type type() const;
  void set_type(::perfetto::protos::FieldDescriptorProto_Type value);

  private:
  ::perfetto::protos::FieldDescriptorProto_Type _internal_type() const;
  void _internal_set_type(::perfetto::protos::FieldDescriptorProto_Type value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FieldDescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extendee_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_value_;
    ::perfetto::protos::FieldOptions* options_;
    ::int32_t number_;
    ::int32_t oneof_index_;
    int label_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class OneofDescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.OneofDescriptorProto) */ {
 public:
  inline OneofDescriptorProto() : OneofDescriptorProto(nullptr) {}
  ~OneofDescriptorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OneofDescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneofDescriptorProto(const OneofDescriptorProto& from);
  OneofDescriptorProto(OneofDescriptorProto&& from) noexcept
    : OneofDescriptorProto() {
    *this = ::std::move(from);
  }

  inline OneofDescriptorProto& operator=(const OneofDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneofDescriptorProto& operator=(OneofDescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneofDescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneofDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const OneofDescriptorProto*>(
               &_OneofDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OneofDescriptorProto& a, OneofDescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OneofDescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneofDescriptorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneofDescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneofDescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneofDescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneofDescriptorProto& from) {
    OneofDescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneofDescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.OneofDescriptorProto";
  }
  protected:
  explicit OneofDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .perfetto.protos.OneofOptions options = 2;
  bool has_options() const;
  void clear_options() ;
  const ::perfetto::protos::OneofOptions& options() const;
  PROTOBUF_NODISCARD ::perfetto::protos::OneofOptions* release_options();
  ::perfetto::protos::OneofOptions* mutable_options();
  void set_allocated_options(::perfetto::protos::OneofOptions* options);
  private:
  const ::perfetto::protos::OneofOptions& _internal_options() const;
  ::perfetto::protos::OneofOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::perfetto::protos::OneofOptions* options);
  ::perfetto::protos::OneofOptions* unsafe_arena_release_options();
  // @@protoc_insertion_point(class_scope:perfetto.protos.OneofDescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::perfetto::protos::OneofOptions* options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class EnumDescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.EnumDescriptorProto) */ {
 public:
  inline EnumDescriptorProto() : EnumDescriptorProto(nullptr) {}
  ~EnumDescriptorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnumDescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumDescriptorProto(const EnumDescriptorProto& from);
  EnumDescriptorProto(EnumDescriptorProto&& from) noexcept
    : EnumDescriptorProto() {
    *this = ::std::move(from);
  }

  inline EnumDescriptorProto& operator=(const EnumDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumDescriptorProto& operator=(EnumDescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumDescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const EnumDescriptorProto*>(
               &_EnumDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnumDescriptorProto& a, EnumDescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumDescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumDescriptorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumDescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumDescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumDescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnumDescriptorProto& from) {
    EnumDescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumDescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.EnumDescriptorProto";
  }
  protected:
  explicit EnumDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kReservedNameFieldNumber = 5,
    kNameFieldNumber = 1,
  };
  // repeated .perfetto.protos.EnumValueDescriptorProto value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::perfetto::protos::EnumValueDescriptorProto* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumValueDescriptorProto >*
      mutable_value();
  private:
  const ::perfetto::protos::EnumValueDescriptorProto& _internal_value(int index) const;
  ::perfetto::protos::EnumValueDescriptorProto* _internal_add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumValueDescriptorProto>& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumValueDescriptorProto>* _internal_mutable_value();
  public:
  const ::perfetto::protos::EnumValueDescriptorProto& value(int index) const;
  ::perfetto::protos::EnumValueDescriptorProto* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumValueDescriptorProto >&
      value() const;
  // repeated string reserved_name = 5;
  int reserved_name_size() const;
  private:
  int _internal_reserved_name_size() const;

  public:
  void clear_reserved_name() ;
  const std::string& reserved_name(int index) const;
  std::string* mutable_reserved_name(int index);
  void set_reserved_name(int index, const std::string& value);
  void set_reserved_name(int index, std::string&& value);
  void set_reserved_name(int index, const char* value);
  void set_reserved_name(int index, const char* value, std::size_t size);
  void set_reserved_name(int index, absl::string_view value);
  std::string* add_reserved_name();
  void add_reserved_name(const std::string& value);
  void add_reserved_name(std::string&& value);
  void add_reserved_name(const char* value);
  void add_reserved_name(const char* value, std::size_t size);
  void add_reserved_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reserved_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reserved_name();

  private:
  const std::string& _internal_reserved_name(int index) const;
  std::string* _internal_add_reserved_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_reserved_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_reserved_name();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.EnumDescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumValueDescriptorProto > value_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reserved_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class EnumValueDescriptorProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.EnumValueDescriptorProto) */ {
 public:
  inline EnumValueDescriptorProto() : EnumValueDescriptorProto(nullptr) {}
  ~EnumValueDescriptorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EnumValueDescriptorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumValueDescriptorProto(const EnumValueDescriptorProto& from);
  EnumValueDescriptorProto(EnumValueDescriptorProto&& from) noexcept
    : EnumValueDescriptorProto() {
    *this = ::std::move(from);
  }

  inline EnumValueDescriptorProto& operator=(const EnumValueDescriptorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumValueDescriptorProto& operator=(EnumValueDescriptorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumValueDescriptorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumValueDescriptorProto* internal_default_instance() {
    return reinterpret_cast<const EnumValueDescriptorProto*>(
               &_EnumValueDescriptorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EnumValueDescriptorProto& a, EnumValueDescriptorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumValueDescriptorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumValueDescriptorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumValueDescriptorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumValueDescriptorProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumValueDescriptorProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnumValueDescriptorProto& from) {
    EnumValueDescriptorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumValueDescriptorProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.EnumValueDescriptorProto";
  }
  protected:
  explicit EnumValueDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 number = 2;
  bool has_number() const;
  void clear_number() ;
  ::int32_t number() const;
  void set_number(::int32_t value);

  private:
  ::int32_t _internal_number() const;
  void _internal_set_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.EnumValueDescriptorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};// -------------------------------------------------------------------

class OneofOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.OneofOptions) */ {
 public:
  inline OneofOptions() : OneofOptions(nullptr) {}
  ~OneofOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OneofOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneofOptions(const OneofOptions& from);
  OneofOptions(OneofOptions&& from) noexcept
    : OneofOptions() {
    *this = ::std::move(from);
  }

  inline OneofOptions& operator=(const OneofOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneofOptions& operator=(OneofOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneofOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneofOptions* internal_default_instance() {
    return reinterpret_cast<const OneofOptions*>(
               &_OneofOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OneofOptions& a, OneofOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(OneofOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneofOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneofOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneofOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneofOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneofOptions& from) {
    OneofOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneofOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.OneofOptions";
  }
  protected:
  explicit OneofOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<OneofOptions, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:perfetto.protos.OneofOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fdescriptor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileDescriptorSet

// repeated .perfetto.protos.FileDescriptorProto file = 1;
inline int FileDescriptorSet::_internal_file_size() const {
  return _impl_.file_.size();
}
inline int FileDescriptorSet::file_size() const {
  return _internal_file_size();
}
inline void FileDescriptorSet::clear_file() {
  _internal_mutable_file()->Clear();
}
inline ::perfetto::protos::FileDescriptorProto* FileDescriptorSet::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorSet.file)
  return _internal_mutable_file()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FileDescriptorProto >*
FileDescriptorSet::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorSet.file)
  return _internal_mutable_file();
}
inline const ::perfetto::protos::FileDescriptorProto& FileDescriptorSet::_internal_file(int index) const {
  return _internal_file().Get(index);
}
inline const ::perfetto::protos::FileDescriptorProto& FileDescriptorSet::file(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorSet.file)
  return _internal_file(index);
}
inline ::perfetto::protos::FileDescriptorProto* FileDescriptorSet::_internal_add_file() {
  return _internal_mutable_file()->Add();
}
inline ::perfetto::protos::FileDescriptorProto* FileDescriptorSet::add_file() {
  ::perfetto::protos::FileDescriptorProto* _add = _internal_add_file();
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorSet.file)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FileDescriptorProto >&
FileDescriptorSet::file() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorSet.file)
  return _internal_file();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FileDescriptorProto>&
FileDescriptorSet::_internal_file() const {
  return _impl_.file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FileDescriptorProto>*
FileDescriptorSet::_internal_mutable_file() {
  return &_impl_.file_;
}

// -------------------------------------------------------------------

// FileDescriptorProto

// optional string name = 1;
inline bool FileDescriptorProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FileDescriptorProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileDescriptorProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FileDescriptorProto.name)
}
inline std::string* FileDescriptorProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorProto.name)
  return _s;
}
inline const std::string& FileDescriptorProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FileDescriptorProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDescriptorProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* FileDescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FileDescriptorProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FileDescriptorProto::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FileDescriptorProto.name)
}

// optional string package = 2;
inline bool FileDescriptorProto::has_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FileDescriptorProto::clear_package() {
  _impl_.package_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileDescriptorProto::package() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.package)
  return _internal_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileDescriptorProto::set_package(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.package_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FileDescriptorProto.package)
}
inline std::string* FileDescriptorProto::mutable_package() {
  std::string* _s = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorProto.package)
  return _s;
}
inline const std::string& FileDescriptorProto::_internal_package() const {
  return _impl_.package_.Get();
}
inline void FileDescriptorProto::_internal_set_package(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.package_.Set(value, GetArenaForAllocation());
}
inline std::string* FileDescriptorProto::_internal_mutable_package() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.package_.Mutable( GetArenaForAllocation());
}
inline std::string* FileDescriptorProto::release_package() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FileDescriptorProto.package)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.package_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FileDescriptorProto::set_allocated_package(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.package_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.package_.IsDefault()) {
          _impl_.package_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FileDescriptorProto.package)
}

// repeated string dependency = 3;
inline int FileDescriptorProto::_internal_dependency_size() const {
  return _impl_.dependency_.size();
}
inline int FileDescriptorProto::dependency_size() const {
  return _internal_dependency_size();
}
inline void FileDescriptorProto::clear_dependency() {
  _internal_mutable_dependency()->Clear();
}
inline std::string* FileDescriptorProto::add_dependency() {
  std::string* _s = _internal_add_dependency();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FileDescriptorProto.dependency)
  return _s;
}
inline const std::string& FileDescriptorProto::dependency(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.dependency)
  return _internal_dependency(index);
}
inline std::string* FileDescriptorProto::mutable_dependency(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorProto.dependency)
  return _internal_mutable_dependency()->Mutable(index);
}
inline void FileDescriptorProto::set_dependency(int index, const std::string& value) {
  _internal_mutable_dependency()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::set_dependency(int index, std::string&& value) {
  _internal_mutable_dependency()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::set_dependency(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dependency()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::set_dependency(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_dependency()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::set_dependency(int index, absl::string_view value) {
  _internal_mutable_dependency()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::add_dependency(const std::string& value) {
  _internal_mutable_dependency()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::add_dependency(std::string&& value) {
  _internal_mutable_dependency()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::add_dependency(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dependency()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::add_dependency(const char* value, std::size_t size) {
  _internal_mutable_dependency()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FileDescriptorProto.dependency)
}
inline void FileDescriptorProto::add_dependency(absl::string_view value) {
  _internal_mutable_dependency()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FileDescriptorProto.dependency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileDescriptorProto::dependency() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorProto.dependency)
  return _internal_dependency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FileDescriptorProto::mutable_dependency() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorProto.dependency)
  return _internal_mutable_dependency();
}
inline const std::string& FileDescriptorProto::_internal_dependency(int index) const {
  return _internal_dependency().Get(index);
}
inline std::string* FileDescriptorProto::_internal_add_dependency() {
  return _internal_mutable_dependency()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileDescriptorProto::_internal_dependency() const {
  return _impl_.dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileDescriptorProto::_internal_mutable_dependency() {
  return &_impl_.dependency_;
}

// repeated int32 public_dependency = 10;
inline int FileDescriptorProto::_internal_public_dependency_size() const {
  return _impl_.public_dependency_.size();
}
inline int FileDescriptorProto::public_dependency_size() const {
  return _internal_public_dependency_size();
}
inline void FileDescriptorProto::clear_public_dependency() {
  _internal_mutable_public_dependency()->Clear();
}
inline ::int32_t FileDescriptorProto::public_dependency(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.public_dependency)
  return _internal_public_dependency(index);
}
inline void FileDescriptorProto::set_public_dependency(int index, ::int32_t value) {
  _internal_mutable_public_dependency()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FileDescriptorProto.public_dependency)
}
inline void FileDescriptorProto::add_public_dependency(::int32_t value) {
  _internal_add_public_dependency(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.public_dependency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FileDescriptorProto::public_dependency() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorProto.public_dependency)
  return _internal_public_dependency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FileDescriptorProto::mutable_public_dependency() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorProto.public_dependency)
  return _internal_mutable_public_dependency();
}

inline ::int32_t FileDescriptorProto::_internal_public_dependency(int index) const {
  return _internal_public_dependency().Get(index);
}
inline void FileDescriptorProto::_internal_add_public_dependency(::int32_t value) {
  _internal_mutable_public_dependency()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FileDescriptorProto::_internal_public_dependency() const {
  return _impl_.public_dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FileDescriptorProto::_internal_mutable_public_dependency() {
  return &_impl_.public_dependency_;
}

// repeated int32 weak_dependency = 11;
inline int FileDescriptorProto::_internal_weak_dependency_size() const {
  return _impl_.weak_dependency_.size();
}
inline int FileDescriptorProto::weak_dependency_size() const {
  return _internal_weak_dependency_size();
}
inline void FileDescriptorProto::clear_weak_dependency() {
  _internal_mutable_weak_dependency()->Clear();
}
inline ::int32_t FileDescriptorProto::weak_dependency(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.weak_dependency)
  return _internal_weak_dependency(index);
}
inline void FileDescriptorProto::set_weak_dependency(int index, ::int32_t value) {
  _internal_mutable_weak_dependency()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FileDescriptorProto.weak_dependency)
}
inline void FileDescriptorProto::add_weak_dependency(::int32_t value) {
  _internal_add_weak_dependency(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.weak_dependency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FileDescriptorProto::weak_dependency() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorProto.weak_dependency)
  return _internal_weak_dependency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FileDescriptorProto::mutable_weak_dependency() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorProto.weak_dependency)
  return _internal_mutable_weak_dependency();
}

inline ::int32_t FileDescriptorProto::_internal_weak_dependency(int index) const {
  return _internal_weak_dependency().Get(index);
}
inline void FileDescriptorProto::_internal_add_weak_dependency(::int32_t value) {
  _internal_mutable_weak_dependency()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FileDescriptorProto::_internal_weak_dependency() const {
  return _impl_.weak_dependency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FileDescriptorProto::_internal_mutable_weak_dependency() {
  return &_impl_.weak_dependency_;
}

// repeated .perfetto.protos.DescriptorProto message_type = 4;
inline int FileDescriptorProto::_internal_message_type_size() const {
  return _impl_.message_type_.size();
}
inline int FileDescriptorProto::message_type_size() const {
  return _internal_message_type_size();
}
inline void FileDescriptorProto::clear_message_type() {
  _internal_mutable_message_type()->Clear();
}
inline ::perfetto::protos::DescriptorProto* FileDescriptorProto::mutable_message_type(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorProto.message_type)
  return _internal_mutable_message_type()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >*
FileDescriptorProto::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorProto.message_type)
  return _internal_mutable_message_type();
}
inline const ::perfetto::protos::DescriptorProto& FileDescriptorProto::_internal_message_type(int index) const {
  return _internal_message_type().Get(index);
}
inline const ::perfetto::protos::DescriptorProto& FileDescriptorProto::message_type(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.message_type)
  return _internal_message_type(index);
}
inline ::perfetto::protos::DescriptorProto* FileDescriptorProto::_internal_add_message_type() {
  return _internal_mutable_message_type()->Add();
}
inline ::perfetto::protos::DescriptorProto* FileDescriptorProto::add_message_type() {
  ::perfetto::protos::DescriptorProto* _add = _internal_add_message_type();
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.message_type)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >&
FileDescriptorProto::message_type() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorProto.message_type)
  return _internal_message_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>&
FileDescriptorProto::_internal_message_type() const {
  return _impl_.message_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>*
FileDescriptorProto::_internal_mutable_message_type() {
  return &_impl_.message_type_;
}

// repeated .perfetto.protos.EnumDescriptorProto enum_type = 5;
inline int FileDescriptorProto::_internal_enum_type_size() const {
  return _impl_.enum_type_.size();
}
inline int FileDescriptorProto::enum_type_size() const {
  return _internal_enum_type_size();
}
inline void FileDescriptorProto::clear_enum_type() {
  _internal_mutable_enum_type()->Clear();
}
inline ::perfetto::protos::EnumDescriptorProto* FileDescriptorProto::mutable_enum_type(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorProto.enum_type)
  return _internal_mutable_enum_type()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >*
FileDescriptorProto::mutable_enum_type() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorProto.enum_type)
  return _internal_mutable_enum_type();
}
inline const ::perfetto::protos::EnumDescriptorProto& FileDescriptorProto::_internal_enum_type(int index) const {
  return _internal_enum_type().Get(index);
}
inline const ::perfetto::protos::EnumDescriptorProto& FileDescriptorProto::enum_type(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.enum_type)
  return _internal_enum_type(index);
}
inline ::perfetto::protos::EnumDescriptorProto* FileDescriptorProto::_internal_add_enum_type() {
  return _internal_mutable_enum_type()->Add();
}
inline ::perfetto::protos::EnumDescriptorProto* FileDescriptorProto::add_enum_type() {
  ::perfetto::protos::EnumDescriptorProto* _add = _internal_add_enum_type();
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.enum_type)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >&
FileDescriptorProto::enum_type() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorProto.enum_type)
  return _internal_enum_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>&
FileDescriptorProto::_internal_enum_type() const {
  return _impl_.enum_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>*
FileDescriptorProto::_internal_mutable_enum_type() {
  return &_impl_.enum_type_;
}

// repeated .perfetto.protos.FieldDescriptorProto extension = 7;
inline int FileDescriptorProto::_internal_extension_size() const {
  return _impl_.extension_.size();
}
inline int FileDescriptorProto::extension_size() const {
  return _internal_extension_size();
}
inline void FileDescriptorProto::clear_extension() {
  _internal_mutable_extension()->Clear();
}
inline ::perfetto::protos::FieldDescriptorProto* FileDescriptorProto::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FileDescriptorProto.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >*
FileDescriptorProto::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FileDescriptorProto.extension)
  return _internal_mutable_extension();
}
inline const ::perfetto::protos::FieldDescriptorProto& FileDescriptorProto::_internal_extension(int index) const {
  return _internal_extension().Get(index);
}
inline const ::perfetto::protos::FieldDescriptorProto& FileDescriptorProto::extension(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FileDescriptorProto.extension)
  return _internal_extension(index);
}
inline ::perfetto::protos::FieldDescriptorProto* FileDescriptorProto::_internal_add_extension() {
  return _internal_mutable_extension()->Add();
}
inline ::perfetto::protos::FieldDescriptorProto* FileDescriptorProto::add_extension() {
  ::perfetto::protos::FieldDescriptorProto* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:perfetto.protos.FileDescriptorProto.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >&
FileDescriptorProto::extension() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FileDescriptorProto.extension)
  return _internal_extension();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>&
FileDescriptorProto::_internal_extension() const {
  return _impl_.extension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>*
FileDescriptorProto::_internal_mutable_extension() {
  return &_impl_.extension_;
}

// -------------------------------------------------------------------

// DescriptorProto_ReservedRange

// optional int32 start = 1;
inline bool DescriptorProto_ReservedRange::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DescriptorProto_ReservedRange::clear_start() {
  _impl_.start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t DescriptorProto_ReservedRange::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.ReservedRange.start)
  return _internal_start();
}
inline void DescriptorProto_ReservedRange::set_start(::int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DescriptorProto.ReservedRange.start)
}
inline ::int32_t DescriptorProto_ReservedRange::_internal_start() const {
  return _impl_.start_;
}
inline void DescriptorProto_ReservedRange::_internal_set_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_ = value;
}

// optional int32 end = 2;
inline bool DescriptorProto_ReservedRange::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DescriptorProto_ReservedRange::clear_end() {
  _impl_.end_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t DescriptorProto_ReservedRange::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.ReservedRange.end)
  return _internal_end();
}
inline void DescriptorProto_ReservedRange::set_end(::int32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DescriptorProto.ReservedRange.end)
}
inline ::int32_t DescriptorProto_ReservedRange::_internal_end() const {
  return _impl_.end_;
}
inline void DescriptorProto_ReservedRange::_internal_set_end(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// DescriptorProto

// optional string name = 1;
inline bool DescriptorProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DescriptorProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DescriptorProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DescriptorProto.name)
}
inline std::string* DescriptorProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.name)
  return _s;
}
inline const std::string& DescriptorProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DescriptorProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DescriptorProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DescriptorProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DescriptorProto::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DescriptorProto.name)
}

// repeated .perfetto.protos.FieldDescriptorProto field = 2;
inline int DescriptorProto::_internal_field_size() const {
  return _impl_.field_.size();
}
inline int DescriptorProto::field_size() const {
  return _internal_field_size();
}
inline void DescriptorProto::clear_field() {
  _internal_mutable_field()->Clear();
}
inline ::perfetto::protos::FieldDescriptorProto* DescriptorProto::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.field)
  return _internal_mutable_field()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >*
DescriptorProto::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.field)
  return _internal_mutable_field();
}
inline const ::perfetto::protos::FieldDescriptorProto& DescriptorProto::_internal_field(int index) const {
  return _internal_field().Get(index);
}
inline const ::perfetto::protos::FieldDescriptorProto& DescriptorProto::field(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.field)
  return _internal_field(index);
}
inline ::perfetto::protos::FieldDescriptorProto* DescriptorProto::_internal_add_field() {
  return _internal_mutable_field()->Add();
}
inline ::perfetto::protos::FieldDescriptorProto* DescriptorProto::add_field() {
  ::perfetto::protos::FieldDescriptorProto* _add = _internal_add_field();
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.field)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >&
DescriptorProto::field() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.field)
  return _internal_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>&
DescriptorProto::_internal_field() const {
  return _impl_.field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>*
DescriptorProto::_internal_mutable_field() {
  return &_impl_.field_;
}

// repeated .perfetto.protos.FieldDescriptorProto extension = 6;
inline int DescriptorProto::_internal_extension_size() const {
  return _impl_.extension_.size();
}
inline int DescriptorProto::extension_size() const {
  return _internal_extension_size();
}
inline void DescriptorProto::clear_extension() {
  _internal_mutable_extension()->Clear();
}
inline ::perfetto::protos::FieldDescriptorProto* DescriptorProto::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.extension)
  return _internal_mutable_extension()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >*
DescriptorProto::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.extension)
  return _internal_mutable_extension();
}
inline const ::perfetto::protos::FieldDescriptorProto& DescriptorProto::_internal_extension(int index) const {
  return _internal_extension().Get(index);
}
inline const ::perfetto::protos::FieldDescriptorProto& DescriptorProto::extension(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.extension)
  return _internal_extension(index);
}
inline ::perfetto::protos::FieldDescriptorProto* DescriptorProto::_internal_add_extension() {
  return _internal_mutable_extension()->Add();
}
inline ::perfetto::protos::FieldDescriptorProto* DescriptorProto::add_extension() {
  ::perfetto::protos::FieldDescriptorProto* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FieldDescriptorProto >&
DescriptorProto::extension() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.extension)
  return _internal_extension();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>&
DescriptorProto::_internal_extension() const {
  return _impl_.extension_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FieldDescriptorProto>*
DescriptorProto::_internal_mutable_extension() {
  return &_impl_.extension_;
}

// repeated .perfetto.protos.DescriptorProto nested_type = 3;
inline int DescriptorProto::_internal_nested_type_size() const {
  return _impl_.nested_type_.size();
}
inline int DescriptorProto::nested_type_size() const {
  return _internal_nested_type_size();
}
inline void DescriptorProto::clear_nested_type() {
  _internal_mutable_nested_type()->Clear();
}
inline ::perfetto::protos::DescriptorProto* DescriptorProto::mutable_nested_type(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.nested_type)
  return _internal_mutable_nested_type()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >*
DescriptorProto::mutable_nested_type() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.nested_type)
  return _internal_mutable_nested_type();
}
inline const ::perfetto::protos::DescriptorProto& DescriptorProto::_internal_nested_type(int index) const {
  return _internal_nested_type().Get(index);
}
inline const ::perfetto::protos::DescriptorProto& DescriptorProto::nested_type(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.nested_type)
  return _internal_nested_type(index);
}
inline ::perfetto::protos::DescriptorProto* DescriptorProto::_internal_add_nested_type() {
  return _internal_mutable_nested_type()->Add();
}
inline ::perfetto::protos::DescriptorProto* DescriptorProto::add_nested_type() {
  ::perfetto::protos::DescriptorProto* _add = _internal_add_nested_type();
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.nested_type)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto >&
DescriptorProto::nested_type() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.nested_type)
  return _internal_nested_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>&
DescriptorProto::_internal_nested_type() const {
  return _impl_.nested_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto>*
DescriptorProto::_internal_mutable_nested_type() {
  return &_impl_.nested_type_;
}

// repeated .perfetto.protos.EnumDescriptorProto enum_type = 4;
inline int DescriptorProto::_internal_enum_type_size() const {
  return _impl_.enum_type_.size();
}
inline int DescriptorProto::enum_type_size() const {
  return _internal_enum_type_size();
}
inline void DescriptorProto::clear_enum_type() {
  _internal_mutable_enum_type()->Clear();
}
inline ::perfetto::protos::EnumDescriptorProto* DescriptorProto::mutable_enum_type(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.enum_type)
  return _internal_mutable_enum_type()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >*
DescriptorProto::mutable_enum_type() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.enum_type)
  return _internal_mutable_enum_type();
}
inline const ::perfetto::protos::EnumDescriptorProto& DescriptorProto::_internal_enum_type(int index) const {
  return _internal_enum_type().Get(index);
}
inline const ::perfetto::protos::EnumDescriptorProto& DescriptorProto::enum_type(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.enum_type)
  return _internal_enum_type(index);
}
inline ::perfetto::protos::EnumDescriptorProto* DescriptorProto::_internal_add_enum_type() {
  return _internal_mutable_enum_type()->Add();
}
inline ::perfetto::protos::EnumDescriptorProto* DescriptorProto::add_enum_type() {
  ::perfetto::protos::EnumDescriptorProto* _add = _internal_add_enum_type();
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.enum_type)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumDescriptorProto >&
DescriptorProto::enum_type() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.enum_type)
  return _internal_enum_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>&
DescriptorProto::_internal_enum_type() const {
  return _impl_.enum_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumDescriptorProto>*
DescriptorProto::_internal_mutable_enum_type() {
  return &_impl_.enum_type_;
}

// repeated .perfetto.protos.OneofDescriptorProto oneof_decl = 8;
inline int DescriptorProto::_internal_oneof_decl_size() const {
  return _impl_.oneof_decl_.size();
}
inline int DescriptorProto::oneof_decl_size() const {
  return _internal_oneof_decl_size();
}
inline void DescriptorProto::clear_oneof_decl() {
  _internal_mutable_oneof_decl()->Clear();
}
inline ::perfetto::protos::OneofDescriptorProto* DescriptorProto::mutable_oneof_decl(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.oneof_decl)
  return _internal_mutable_oneof_decl()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::OneofDescriptorProto >*
DescriptorProto::mutable_oneof_decl() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.oneof_decl)
  return _internal_mutable_oneof_decl();
}
inline const ::perfetto::protos::OneofDescriptorProto& DescriptorProto::_internal_oneof_decl(int index) const {
  return _internal_oneof_decl().Get(index);
}
inline const ::perfetto::protos::OneofDescriptorProto& DescriptorProto::oneof_decl(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.oneof_decl)
  return _internal_oneof_decl(index);
}
inline ::perfetto::protos::OneofDescriptorProto* DescriptorProto::_internal_add_oneof_decl() {
  return _internal_mutable_oneof_decl()->Add();
}
inline ::perfetto::protos::OneofDescriptorProto* DescriptorProto::add_oneof_decl() {
  ::perfetto::protos::OneofDescriptorProto* _add = _internal_add_oneof_decl();
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.oneof_decl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::OneofDescriptorProto >&
DescriptorProto::oneof_decl() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.oneof_decl)
  return _internal_oneof_decl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::OneofDescriptorProto>&
DescriptorProto::_internal_oneof_decl() const {
  return _impl_.oneof_decl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::OneofDescriptorProto>*
DescriptorProto::_internal_mutable_oneof_decl() {
  return &_impl_.oneof_decl_;
}

// repeated .perfetto.protos.DescriptorProto.ReservedRange reserved_range = 9;
inline int DescriptorProto::_internal_reserved_range_size() const {
  return _impl_.reserved_range_.size();
}
inline int DescriptorProto::reserved_range_size() const {
  return _internal_reserved_range_size();
}
inline void DescriptorProto::clear_reserved_range() {
  _internal_mutable_reserved_range()->Clear();
}
inline ::perfetto::protos::DescriptorProto_ReservedRange* DescriptorProto::mutable_reserved_range(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.reserved_range)
  return _internal_mutable_reserved_range()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto_ReservedRange >*
DescriptorProto::mutable_reserved_range() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.reserved_range)
  return _internal_mutable_reserved_range();
}
inline const ::perfetto::protos::DescriptorProto_ReservedRange& DescriptorProto::_internal_reserved_range(int index) const {
  return _internal_reserved_range().Get(index);
}
inline const ::perfetto::protos::DescriptorProto_ReservedRange& DescriptorProto::reserved_range(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.reserved_range)
  return _internal_reserved_range(index);
}
inline ::perfetto::protos::DescriptorProto_ReservedRange* DescriptorProto::_internal_add_reserved_range() {
  return _internal_mutable_reserved_range()->Add();
}
inline ::perfetto::protos::DescriptorProto_ReservedRange* DescriptorProto::add_reserved_range() {
  ::perfetto::protos::DescriptorProto_ReservedRange* _add = _internal_add_reserved_range();
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.reserved_range)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DescriptorProto_ReservedRange >&
DescriptorProto::reserved_range() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.reserved_range)
  return _internal_reserved_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto_ReservedRange>&
DescriptorProto::_internal_reserved_range() const {
  return _impl_.reserved_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DescriptorProto_ReservedRange>*
DescriptorProto::_internal_mutable_reserved_range() {
  return &_impl_.reserved_range_;
}

// repeated string reserved_name = 10;
inline int DescriptorProto::_internal_reserved_name_size() const {
  return _impl_.reserved_name_.size();
}
inline int DescriptorProto::reserved_name_size() const {
  return _internal_reserved_name_size();
}
inline void DescriptorProto::clear_reserved_name() {
  _internal_mutable_reserved_name()->Clear();
}
inline std::string* DescriptorProto::add_reserved_name() {
  std::string* _s = _internal_add_reserved_name();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.DescriptorProto.reserved_name)
  return _s;
}
inline const std::string& DescriptorProto::reserved_name(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DescriptorProto.reserved_name)
  return _internal_reserved_name(index);
}
inline std::string* DescriptorProto::mutable_reserved_name(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DescriptorProto.reserved_name)
  return _internal_mutable_reserved_name()->Mutable(index);
}
inline void DescriptorProto::set_reserved_name(int index, const std::string& value) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::set_reserved_name(int index, std::string&& value) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::set_reserved_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_reserved_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::set_reserved_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::set_reserved_name(int index, absl::string_view value) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::add_reserved_name(const std::string& value) {
  _internal_mutable_reserved_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::add_reserved_name(std::string&& value) {
  _internal_mutable_reserved_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::add_reserved_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_reserved_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::add_reserved_name(const char* value, std::size_t size) {
  _internal_mutable_reserved_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.DescriptorProto.reserved_name)
}
inline void DescriptorProto::add_reserved_name(absl::string_view value) {
  _internal_mutable_reserved_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.DescriptorProto.reserved_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescriptorProto::reserved_name() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DescriptorProto.reserved_name)
  return _internal_reserved_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* DescriptorProto::mutable_reserved_name() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DescriptorProto.reserved_name)
  return _internal_mutable_reserved_name();
}
inline const std::string& DescriptorProto::_internal_reserved_name(int index) const {
  return _internal_reserved_name().Get(index);
}
inline std::string* DescriptorProto::_internal_add_reserved_name() {
  return _internal_mutable_reserved_name()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DescriptorProto::_internal_reserved_name() const {
  return _impl_.reserved_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DescriptorProto::_internal_mutable_reserved_name() {
  return &_impl_.reserved_name_;
}

// -------------------------------------------------------------------

// FieldOptions

// optional bool packed = 2;
inline bool FieldOptions::has_packed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FieldOptions::clear_packed() {
  _impl_.packed_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FieldOptions::packed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldOptions.packed)
  return _internal_packed();
}
inline void FieldOptions::set_packed(bool value) {
  _internal_set_packed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldOptions.packed)
}
inline bool FieldOptions::_internal_packed() const {
  return _impl_.packed_;
}
inline void FieldOptions::_internal_set_packed(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.packed_ = value;
}

// -------------------------------------------------------------------

// FieldDescriptorProto

// optional string name = 1;
inline bool FieldDescriptorProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FieldDescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldDescriptorProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.name)
}
inline std::string* FieldDescriptorProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FieldDescriptorProto.name)
  return _s;
}
inline const std::string& FieldDescriptorProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FieldDescriptorProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FieldDescriptorProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FieldDescriptorProto::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FieldDescriptorProto.name)
}

// optional int32 number = 3;
inline bool FieldDescriptorProto::has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_number() {
  _impl_.number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t FieldDescriptorProto::number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.number)
  return _internal_number();
}
inline void FieldDescriptorProto::set_number(::int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.number)
}
inline ::int32_t FieldDescriptorProto::_internal_number() const {
  return _impl_.number_;
}
inline void FieldDescriptorProto::_internal_set_number(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.number_ = value;
}

// optional .perfetto.protos.FieldDescriptorProto.Label label = 4;
inline bool FieldDescriptorProto::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_label() {
  _impl_.label_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::perfetto::protos::FieldDescriptorProto_Label FieldDescriptorProto::label() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.label)
  return _internal_label();
}
inline void FieldDescriptorProto::set_label(::perfetto::protos::FieldDescriptorProto_Label value) {
   _internal_set_label(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.label)
}
inline ::perfetto::protos::FieldDescriptorProto_Label FieldDescriptorProto::_internal_label() const {
  return static_cast<::perfetto::protos::FieldDescriptorProto_Label>(_impl_.label_);
}
inline void FieldDescriptorProto::_internal_set_label(::perfetto::protos::FieldDescriptorProto_Label value) {
  assert(::perfetto::protos::FieldDescriptorProto_Label_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.label_ = value;
}

// optional .perfetto.protos.FieldDescriptorProto.Type type = 5;
inline bool FieldDescriptorProto::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::perfetto::protos::FieldDescriptorProto_Type FieldDescriptorProto::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.type)
  return _internal_type();
}
inline void FieldDescriptorProto::set_type(::perfetto::protos::FieldDescriptorProto_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.type)
}
inline ::perfetto::protos::FieldDescriptorProto_Type FieldDescriptorProto::_internal_type() const {
  return static_cast<::perfetto::protos::FieldDescriptorProto_Type>(_impl_.type_);
}
inline void FieldDescriptorProto::_internal_set_type(::perfetto::protos::FieldDescriptorProto_Type value) {
  assert(::perfetto::protos::FieldDescriptorProto_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.type_ = value;
}

// optional string type_name = 6;
inline bool FieldDescriptorProto::has_type_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_type_name() {
  _impl_.type_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FieldDescriptorProto::type_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.type_name)
  return _internal_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldDescriptorProto::set_type_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.type_name)
}
inline std::string* FieldDescriptorProto::mutable_type_name() {
  std::string* _s = _internal_mutable_type_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FieldDescriptorProto.type_name)
  return _s;
}
inline const std::string& FieldDescriptorProto::_internal_type_name() const {
  return _impl_.type_name_.Get();
}
inline void FieldDescriptorProto::_internal_set_type_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::_internal_mutable_type_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.type_name_.Mutable( GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::release_type_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FieldDescriptorProto.type_name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.type_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FieldDescriptorProto::set_allocated_type_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.type_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_name_.IsDefault()) {
          _impl_.type_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FieldDescriptorProto.type_name)
}

// optional string extendee = 2;
inline bool FieldDescriptorProto::has_extendee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_extendee() {
  _impl_.extendee_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FieldDescriptorProto::extendee() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.extendee)
  return _internal_extendee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldDescriptorProto::set_extendee(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.extendee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.extendee)
}
inline std::string* FieldDescriptorProto::mutable_extendee() {
  std::string* _s = _internal_mutable_extendee();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FieldDescriptorProto.extendee)
  return _s;
}
inline const std::string& FieldDescriptorProto::_internal_extendee() const {
  return _impl_.extendee_.Get();
}
inline void FieldDescriptorProto::_internal_set_extendee(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.extendee_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::_internal_mutable_extendee() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.extendee_.Mutable( GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::release_extendee() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FieldDescriptorProto.extendee)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.extendee_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extendee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FieldDescriptorProto::set_allocated_extendee(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.extendee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.extendee_.IsDefault()) {
          _impl_.extendee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FieldDescriptorProto.extendee)
}

// optional string default_value = 7;
inline bool FieldDescriptorProto::has_default_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_default_value() {
  _impl_.default_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FieldDescriptorProto::default_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.default_value)
  return _internal_default_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldDescriptorProto::set_default_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.default_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.default_value)
}
inline std::string* FieldDescriptorProto::mutable_default_value() {
  std::string* _s = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FieldDescriptorProto.default_value)
  return _s;
}
inline const std::string& FieldDescriptorProto::_internal_default_value() const {
  return _impl_.default_value_.Get();
}
inline void FieldDescriptorProto::_internal_set_default_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.default_value_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::_internal_mutable_default_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.default_value_.Mutable( GetArenaForAllocation());
}
inline std::string* FieldDescriptorProto::release_default_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FieldDescriptorProto.default_value)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.default_value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FieldDescriptorProto::set_allocated_default_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.default_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default_value_.IsDefault()) {
          _impl_.default_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FieldDescriptorProto.default_value)
}

// optional .perfetto.protos.FieldOptions options = 8;
inline bool FieldDescriptorProto::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline void FieldDescriptorProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::perfetto::protos::FieldOptions& FieldDescriptorProto::_internal_options() const {
  const ::perfetto::protos::FieldOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FieldOptions&>(
      ::perfetto::protos::_FieldOptions_default_instance_);
}
inline const ::perfetto::protos::FieldOptions& FieldDescriptorProto::options() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.options)
  return _internal_options();
}
inline void FieldDescriptorProto::unsafe_arena_set_allocated_options(
    ::perfetto::protos::FieldOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FieldDescriptorProto.options)
}
inline ::perfetto::protos::FieldOptions* FieldDescriptorProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::FieldOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FieldOptions* FieldDescriptorProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FieldDescriptorProto.options)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::FieldOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FieldOptions* FieldDescriptorProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FieldOptions>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::perfetto::protos::FieldOptions* FieldDescriptorProto::mutable_options() {
  ::perfetto::protos::FieldOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FieldDescriptorProto.options)
  return _msg;
}
inline void FieldDescriptorProto::set_allocated_options(::perfetto::protos::FieldOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FieldDescriptorProto.options)
}

// optional int32 oneof_index = 9;
inline bool FieldDescriptorProto::has_oneof_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FieldDescriptorProto::clear_oneof_index() {
  _impl_.oneof_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t FieldDescriptorProto::oneof_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FieldDescriptorProto.oneof_index)
  return _internal_oneof_index();
}
inline void FieldDescriptorProto::set_oneof_index(::int32_t value) {
  _internal_set_oneof_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FieldDescriptorProto.oneof_index)
}
inline ::int32_t FieldDescriptorProto::_internal_oneof_index() const {
  return _impl_.oneof_index_;
}
inline void FieldDescriptorProto::_internal_set_oneof_index(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.oneof_index_ = value;
}

// -------------------------------------------------------------------

// OneofDescriptorProto

// optional string name = 1;
inline bool OneofDescriptorProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OneofDescriptorProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OneofDescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.OneofDescriptorProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OneofDescriptorProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.OneofDescriptorProto.name)
}
inline std::string* OneofDescriptorProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.OneofDescriptorProto.name)
  return _s;
}
inline const std::string& OneofDescriptorProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void OneofDescriptorProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* OneofDescriptorProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* OneofDescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.OneofDescriptorProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OneofDescriptorProto::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.OneofDescriptorProto.name)
}

// optional .perfetto.protos.OneofOptions options = 2;
inline bool OneofDescriptorProto::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline void OneofDescriptorProto::clear_options() {
  if (_impl_.options_ != nullptr) _impl_.options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::OneofOptions& OneofDescriptorProto::_internal_options() const {
  const ::perfetto::protos::OneofOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::OneofOptions&>(
      ::perfetto::protos::_OneofOptions_default_instance_);
}
inline const ::perfetto::protos::OneofOptions& OneofDescriptorProto::options() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.OneofDescriptorProto.options)
  return _internal_options();
}
inline void OneofDescriptorProto::unsafe_arena_set_allocated_options(
    ::perfetto::protos::OneofOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.OneofDescriptorProto.options)
}
inline ::perfetto::protos::OneofOptions* OneofDescriptorProto::release_options() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::OneofOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::OneofOptions* OneofDescriptorProto::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:perfetto.protos.OneofDescriptorProto.options)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::OneofOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::perfetto::protos::OneofOptions* OneofDescriptorProto::_internal_mutable_options() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::OneofOptions>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::perfetto::protos::OneofOptions* OneofDescriptorProto::mutable_options() {
  ::perfetto::protos::OneofOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.OneofDescriptorProto.options)
  return _msg;
}
inline void OneofDescriptorProto::set_allocated_options(::perfetto::protos::OneofOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.OneofDescriptorProto.options)
}

// -------------------------------------------------------------------

// EnumDescriptorProto

// optional string name = 1;
inline bool EnumDescriptorProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnumDescriptorProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnumDescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EnumDescriptorProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnumDescriptorProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.EnumDescriptorProto.name)
}
inline std::string* EnumDescriptorProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EnumDescriptorProto.name)
  return _s;
}
inline const std::string& EnumDescriptorProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnumDescriptorProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnumDescriptorProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EnumDescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EnumDescriptorProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EnumDescriptorProto::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.EnumDescriptorProto.name)
}

// repeated .perfetto.protos.EnumValueDescriptorProto value = 2;
inline int EnumDescriptorProto::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int EnumDescriptorProto::value_size() const {
  return _internal_value_size();
}
inline void EnumDescriptorProto::clear_value() {
  _internal_mutable_value()->Clear();
}
inline ::perfetto::protos::EnumValueDescriptorProto* EnumDescriptorProto::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EnumDescriptorProto.value)
  return _internal_mutable_value()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumValueDescriptorProto >*
EnumDescriptorProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.EnumDescriptorProto.value)
  return _internal_mutable_value();
}
inline const ::perfetto::protos::EnumValueDescriptorProto& EnumDescriptorProto::_internal_value(int index) const {
  return _internal_value().Get(index);
}
inline const ::perfetto::protos::EnumValueDescriptorProto& EnumDescriptorProto::value(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EnumDescriptorProto.value)
  return _internal_value(index);
}
inline ::perfetto::protos::EnumValueDescriptorProto* EnumDescriptorProto::_internal_add_value() {
  return _internal_mutable_value()->Add();
}
inline ::perfetto::protos::EnumValueDescriptorProto* EnumDescriptorProto::add_value() {
  ::perfetto::protos::EnumValueDescriptorProto* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:perfetto.protos.EnumDescriptorProto.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::EnumValueDescriptorProto >&
EnumDescriptorProto::value() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.EnumDescriptorProto.value)
  return _internal_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumValueDescriptorProto>&
EnumDescriptorProto::_internal_value() const {
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::EnumValueDescriptorProto>*
EnumDescriptorProto::_internal_mutable_value() {
  return &_impl_.value_;
}

// repeated string reserved_name = 5;
inline int EnumDescriptorProto::_internal_reserved_name_size() const {
  return _impl_.reserved_name_.size();
}
inline int EnumDescriptorProto::reserved_name_size() const {
  return _internal_reserved_name_size();
}
inline void EnumDescriptorProto::clear_reserved_name() {
  _internal_mutable_reserved_name()->Clear();
}
inline std::string* EnumDescriptorProto::add_reserved_name() {
  std::string* _s = _internal_add_reserved_name();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.EnumDescriptorProto.reserved_name)
  return _s;
}
inline const std::string& EnumDescriptorProto::reserved_name(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EnumDescriptorProto.reserved_name)
  return _internal_reserved_name(index);
}
inline std::string* EnumDescriptorProto::mutable_reserved_name(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EnumDescriptorProto.reserved_name)
  return _internal_mutable_reserved_name()->Mutable(index);
}
inline void EnumDescriptorProto::set_reserved_name(int index, const std::string& value) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::set_reserved_name(int index, std::string&& value) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::set_reserved_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_reserved_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::set_reserved_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::set_reserved_name(int index, absl::string_view value) {
  _internal_mutable_reserved_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::add_reserved_name(const std::string& value) {
  _internal_mutable_reserved_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::add_reserved_name(std::string&& value) {
  _internal_mutable_reserved_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::add_reserved_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_reserved_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::add_reserved_name(const char* value, std::size_t size) {
  _internal_mutable_reserved_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline void EnumDescriptorProto::add_reserved_name(absl::string_view value) {
  _internal_mutable_reserved_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.EnumDescriptorProto.reserved_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnumDescriptorProto::reserved_name() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.EnumDescriptorProto.reserved_name)
  return _internal_reserved_name();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* EnumDescriptorProto::mutable_reserved_name() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.EnumDescriptorProto.reserved_name)
  return _internal_mutable_reserved_name();
}
inline const std::string& EnumDescriptorProto::_internal_reserved_name(int index) const {
  return _internal_reserved_name().Get(index);
}
inline std::string* EnumDescriptorProto::_internal_add_reserved_name() {
  return _internal_mutable_reserved_name()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnumDescriptorProto::_internal_reserved_name() const {
  return _impl_.reserved_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EnumDescriptorProto::_internal_mutable_reserved_name() {
  return &_impl_.reserved_name_;
}

// -------------------------------------------------------------------

// EnumValueDescriptorProto

// optional string name = 1;
inline bool EnumValueDescriptorProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnumValueDescriptorProto::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnumValueDescriptorProto::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EnumValueDescriptorProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnumValueDescriptorProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.EnumValueDescriptorProto.name)
}
inline std::string* EnumValueDescriptorProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.EnumValueDescriptorProto.name)
  return _s;
}
inline const std::string& EnumValueDescriptorProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EnumValueDescriptorProto::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EnumValueDescriptorProto::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EnumValueDescriptorProto::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.EnumValueDescriptorProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EnumValueDescriptorProto::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.EnumValueDescriptorProto.name)
}

// optional int32 number = 2;
inline bool EnumValueDescriptorProto::has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EnumValueDescriptorProto::clear_number() {
  _impl_.number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t EnumValueDescriptorProto::number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.EnumValueDescriptorProto.number)
  return _internal_number();
}
inline void EnumValueDescriptorProto::set_number(::int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.EnumValueDescriptorProto.number)
}
inline ::int32_t EnumValueDescriptorProto::_internal_number() const {
  return _impl_.number_;
}
inline void EnumValueDescriptorProto::_internal_set_number(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.number_ = value;
}

// -------------------------------------------------------------------

// OneofOptions

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::FieldDescriptorProto_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FieldDescriptorProto_Type>() {
  return ::perfetto::protos::FieldDescriptorProto_Type_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::FieldDescriptorProto_Label> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FieldDescriptorProto_Label>() {
  return ::perfetto::protos::FieldDescriptorProto_Label_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fdescriptor_2eproto_2epb_2eh
