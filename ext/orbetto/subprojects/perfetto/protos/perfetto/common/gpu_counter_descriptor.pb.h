// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/gpu_counter_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
namespace perfetto {
namespace protos {
class GpuCounterDescriptor;
struct GpuCounterDescriptorDefaultTypeInternal;
extern GpuCounterDescriptorDefaultTypeInternal _GpuCounterDescriptor_default_instance_;
class GpuCounterDescriptor_GpuCounterBlock;
struct GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal;
extern GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
class GpuCounterDescriptor_GpuCounterSpec;
struct GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal;
extern GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::GpuCounterDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor>(Arena*);
template <>
::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>(Arena*);
template <>
::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum GpuCounterDescriptor_GpuCounterGroup : int {
  GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED = 0,
  GpuCounterDescriptor_GpuCounterGroup_SYSTEM = 1,
  GpuCounterDescriptor_GpuCounterGroup_VERTICES = 2,
  GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS = 3,
  GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES = 4,
  GpuCounterDescriptor_GpuCounterGroup_MEMORY = 5,
  GpuCounterDescriptor_GpuCounterGroup_COMPUTE = 6,
};

bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value);
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MIN = static_cast<GpuCounterDescriptor_GpuCounterGroup>(0);
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX = static_cast<GpuCounterDescriptor_GpuCounterGroup>(6);
constexpr int GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_ARRAYSIZE = 6 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GpuCounterDescriptor_GpuCounterGroup_descriptor();
template <typename T>
const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(T value) {
  static_assert(std::is_same<T, GpuCounterDescriptor_GpuCounterGroup>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GpuCounterGroup_Name().");
  return GpuCounterDescriptor_GpuCounterGroup_Name(static_cast<GpuCounterDescriptor_GpuCounterGroup>(value));
}
template <>
inline const std::string& GpuCounterDescriptor_GpuCounterGroup_Name(GpuCounterDescriptor_GpuCounterGroup value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GpuCounterDescriptor_GpuCounterGroup_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool GpuCounterDescriptor_GpuCounterGroup_Parse(absl::string_view name, GpuCounterDescriptor_GpuCounterGroup* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpuCounterDescriptor_GpuCounterGroup>(
      GpuCounterDescriptor_GpuCounterGroup_descriptor(), name, value);
}
enum GpuCounterDescriptor_MeasureUnit : int {
  GpuCounterDescriptor_MeasureUnit_NONE = 0,
  GpuCounterDescriptor_MeasureUnit_BIT = 1,
  GpuCounterDescriptor_MeasureUnit_KILOBIT = 2,
  GpuCounterDescriptor_MeasureUnit_MEGABIT = 3,
  GpuCounterDescriptor_MeasureUnit_GIGABIT = 4,
  GpuCounterDescriptor_MeasureUnit_TERABIT = 5,
  GpuCounterDescriptor_MeasureUnit_PETABIT = 6,
  GpuCounterDescriptor_MeasureUnit_BYTE = 7,
  GpuCounterDescriptor_MeasureUnit_KILOBYTE = 8,
  GpuCounterDescriptor_MeasureUnit_MEGABYTE = 9,
  GpuCounterDescriptor_MeasureUnit_GIGABYTE = 10,
  GpuCounterDescriptor_MeasureUnit_TERABYTE = 11,
  GpuCounterDescriptor_MeasureUnit_PETABYTE = 12,
  GpuCounterDescriptor_MeasureUnit_HERTZ = 13,
  GpuCounterDescriptor_MeasureUnit_KILOHERTZ = 14,
  GpuCounterDescriptor_MeasureUnit_MEGAHERTZ = 15,
  GpuCounterDescriptor_MeasureUnit_GIGAHERTZ = 16,
  GpuCounterDescriptor_MeasureUnit_TERAHERTZ = 17,
  GpuCounterDescriptor_MeasureUnit_PETAHERTZ = 18,
  GpuCounterDescriptor_MeasureUnit_NANOSECOND = 19,
  GpuCounterDescriptor_MeasureUnit_MICROSECOND = 20,
  GpuCounterDescriptor_MeasureUnit_MILLISECOND = 21,
  GpuCounterDescriptor_MeasureUnit_SECOND = 22,
  GpuCounterDescriptor_MeasureUnit_MINUTE = 23,
  GpuCounterDescriptor_MeasureUnit_HOUR = 24,
  GpuCounterDescriptor_MeasureUnit_VERTEX = 25,
  GpuCounterDescriptor_MeasureUnit_PIXEL = 26,
  GpuCounterDescriptor_MeasureUnit_TRIANGLE = 27,
  GpuCounterDescriptor_MeasureUnit_PRIMITIVE = 38,
  GpuCounterDescriptor_MeasureUnit_FRAGMENT = 39,
  GpuCounterDescriptor_MeasureUnit_MILLIWATT = 28,
  GpuCounterDescriptor_MeasureUnit_WATT = 29,
  GpuCounterDescriptor_MeasureUnit_KILOWATT = 30,
  GpuCounterDescriptor_MeasureUnit_JOULE = 31,
  GpuCounterDescriptor_MeasureUnit_VOLT = 32,
  GpuCounterDescriptor_MeasureUnit_AMPERE = 33,
  GpuCounterDescriptor_MeasureUnit_CELSIUS = 34,
  GpuCounterDescriptor_MeasureUnit_FAHRENHEIT = 35,
  GpuCounterDescriptor_MeasureUnit_KELVIN = 36,
  GpuCounterDescriptor_MeasureUnit_PERCENT = 37,
  GpuCounterDescriptor_MeasureUnit_INSTRUCTION = 40,
};

bool GpuCounterDescriptor_MeasureUnit_IsValid(int value);
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_MeasureUnit_MeasureUnit_MIN = static_cast<GpuCounterDescriptor_MeasureUnit>(0);
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX = static_cast<GpuCounterDescriptor_MeasureUnit>(40);
constexpr int GpuCounterDescriptor_MeasureUnit_MeasureUnit_ARRAYSIZE = 40 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
GpuCounterDescriptor_MeasureUnit_descriptor();
template <typename T>
const std::string& GpuCounterDescriptor_MeasureUnit_Name(T value) {
  static_assert(std::is_same<T, GpuCounterDescriptor_MeasureUnit>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MeasureUnit_Name().");
  return GpuCounterDescriptor_MeasureUnit_Name(static_cast<GpuCounterDescriptor_MeasureUnit>(value));
}
template <>
inline const std::string& GpuCounterDescriptor_MeasureUnit_Name(GpuCounterDescriptor_MeasureUnit value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GpuCounterDescriptor_MeasureUnit_descriptor,
                                                 0, 40>(
      static_cast<int>(value));
}
inline bool GpuCounterDescriptor_MeasureUnit_Parse(absl::string_view name, GpuCounterDescriptor_MeasureUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpuCounterDescriptor_MeasureUnit>(
      GpuCounterDescriptor_MeasureUnit_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GpuCounterDescriptor_GpuCounterSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec) */ {
 public:
  inline GpuCounterDescriptor_GpuCounterSpec() : GpuCounterDescriptor_GpuCounterSpec(nullptr) {}
  ~GpuCounterDescriptor_GpuCounterSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from);
  GpuCounterDescriptor_GpuCounterSpec(GpuCounterDescriptor_GpuCounterSpec&& from) noexcept
    : GpuCounterDescriptor_GpuCounterSpec() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor_GpuCounterSpec& operator=(const GpuCounterDescriptor_GpuCounterSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor_GpuCounterSpec& operator=(GpuCounterDescriptor_GpuCounterSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuCounterDescriptor_GpuCounterSpec& default_instance() {
    return *internal_default_instance();
  }
  enum PeakValueCase {
    kIntPeakValue = 5,
    kDoublePeakValue = 6,
    PEAK_VALUE_NOT_SET = 0,
  };

  static inline const GpuCounterDescriptor_GpuCounterSpec* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor_GpuCounterSpec*>(
               &_GpuCounterDescriptor_GpuCounterSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpuCounterDescriptor_GpuCounterSpec& a, GpuCounterDescriptor_GpuCounterSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor_GpuCounterSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuCounterDescriptor_GpuCounterSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuCounterDescriptor_GpuCounterSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpuCounterDescriptor_GpuCounterSpec& from) {
    GpuCounterDescriptor_GpuCounterSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
  }
  protected:
  explicit GpuCounterDescriptor_GpuCounterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumeratorUnitsFieldNumber = 7,
    kDenominatorUnitsFieldNumber = 8,
    kGroupsFieldNumber = 10,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCounterIdFieldNumber = 1,
    kSelectByDefaultFieldNumber = 9,
    kIntPeakValueFieldNumber = 5,
    kDoublePeakValueFieldNumber = 6,
  };
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  int numerator_units_size() const;
  private:
  int _internal_numerator_units_size() const;

  public:
  void clear_numerator_units() ;
  public:
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit numerator_units(int index) const;
  void set_numerator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  void add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& numerator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_numerator_units();

  private:
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit _internal_numerator_units(int index) const;
  void _internal_add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_numerator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_numerator_units();

  public:
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  int denominator_units_size() const;
  private:
  int _internal_denominator_units_size() const;

  public:
  void clear_denominator_units() ;
  public:
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit denominator_units(int index) const;
  void set_denominator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  void add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& denominator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_denominator_units();

  private:
  ::perfetto::protos::GpuCounterDescriptor_MeasureUnit _internal_denominator_units(int index) const;
  void _internal_add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_denominator_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_denominator_units();

  public:
  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  public:
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup groups(int index) const;
  void set_groups(int index, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  void add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_groups();

  private:
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup _internal_groups(int index) const;
  void _internal_add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_groups();

  public:
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string description = 3;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional uint32 counter_id = 1;
  bool has_counter_id() const;
  void clear_counter_id() ;
  ::uint32_t counter_id() const;
  void set_counter_id(::uint32_t value);

  private:
  ::uint32_t _internal_counter_id() const;
  void _internal_set_counter_id(::uint32_t value);

  public:
  // optional bool select_by_default = 9;
  bool has_select_by_default() const;
  void clear_select_by_default() ;
  bool select_by_default() const;
  void set_select_by_default(bool value);

  private:
  bool _internal_select_by_default() const;
  void _internal_set_select_by_default(bool value);

  public:
  // int64 int_peak_value = 5;
  bool has_int_peak_value() const;
  void clear_int_peak_value() ;
  ::int64_t int_peak_value() const;
  void set_int_peak_value(::int64_t value);

  private:
  ::int64_t _internal_int_peak_value() const;
  void _internal_set_int_peak_value(::int64_t value);

  public:
  // double double_peak_value = 6;
  bool has_double_peak_value() const;
  void clear_double_peak_value() ;
  double double_peak_value() const;
  void set_double_peak_value(double value);

  private:
  double _internal_double_peak_value() const;
  void _internal_set_double_peak_value(double value);

  public:
  void clear_peak_value();
  PeakValueCase peak_value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
 private:
  class _Internal;
  void set_has_int_peak_value();
  void set_has_double_peak_value();

  inline bool has_peak_value() const;
  inline void clear_has_peak_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> numerator_units_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> denominator_units_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::uint32_t counter_id_;
    bool select_by_default_;
    union PeakValueUnion {
      constexpr PeakValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::int64_t int_peak_value_;
      double double_peak_value_;
    } peak_value_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
};// -------------------------------------------------------------------

class GpuCounterDescriptor_GpuCounterBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock) */ {
 public:
  inline GpuCounterDescriptor_GpuCounterBlock() : GpuCounterDescriptor_GpuCounterBlock(nullptr) {}
  ~GpuCounterDescriptor_GpuCounterBlock() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from);
  GpuCounterDescriptor_GpuCounterBlock(GpuCounterDescriptor_GpuCounterBlock&& from) noexcept
    : GpuCounterDescriptor_GpuCounterBlock() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor_GpuCounterBlock& operator=(const GpuCounterDescriptor_GpuCounterBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor_GpuCounterBlock& operator=(GpuCounterDescriptor_GpuCounterBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuCounterDescriptor_GpuCounterBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuCounterDescriptor_GpuCounterBlock* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor_GpuCounterBlock*>(
               &_GpuCounterDescriptor_GpuCounterBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpuCounterDescriptor_GpuCounterBlock& a, GpuCounterDescriptor_GpuCounterBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor_GpuCounterBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuCounterDescriptor_GpuCounterBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuCounterDescriptor_GpuCounterBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpuCounterDescriptor_GpuCounterBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpuCounterDescriptor_GpuCounterBlock& from) {
    GpuCounterDescriptor_GpuCounterBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
  }
  protected:
  explicit GpuCounterDescriptor_GpuCounterBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterIdsFieldNumber = 5,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kBlockIdFieldNumber = 1,
    kBlockCapacityFieldNumber = 2,
  };
  // repeated uint32 counter_ids = 5;
  int counter_ids_size() const;
  private:
  int _internal_counter_ids_size() const;

  public:
  void clear_counter_ids() ;
  ::uint32_t counter_ids(int index) const;
  void set_counter_ids(int index, ::uint32_t value);
  void add_counter_ids(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& counter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_counter_ids();

  private:
  ::uint32_t _internal_counter_ids(int index) const;
  void _internal_add_counter_ids(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_counter_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_counter_ids();

  public:
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string description = 4;
  bool has_description() const;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // optional uint32 block_id = 1;
  bool has_block_id() const;
  void clear_block_id() ;
  ::uint32_t block_id() const;
  void set_block_id(::uint32_t value);

  private:
  ::uint32_t _internal_block_id() const;
  void _internal_set_block_id(::uint32_t value);

  public:
  // optional uint32 block_capacity = 2;
  bool has_block_capacity() const;
  void clear_block_capacity() ;
  ::uint32_t block_capacity() const;
  void set_block_capacity(::uint32_t value);

  private:
  ::uint32_t _internal_block_capacity() const;
  void _internal_set_block_capacity(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> counter_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::uint32_t block_id_;
    ::uint32_t block_capacity_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
};// -------------------------------------------------------------------

class GpuCounterDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterDescriptor) */ {
 public:
  inline GpuCounterDescriptor() : GpuCounterDescriptor(nullptr) {}
  ~GpuCounterDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GpuCounterDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpuCounterDescriptor(const GpuCounterDescriptor& from);
  GpuCounterDescriptor(GpuCounterDescriptor&& from) noexcept
    : GpuCounterDescriptor() {
    *this = ::std::move(from);
  }

  inline GpuCounterDescriptor& operator=(const GpuCounterDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterDescriptor& operator=(GpuCounterDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuCounterDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuCounterDescriptor* internal_default_instance() {
    return reinterpret_cast<const GpuCounterDescriptor*>(
               &_GpuCounterDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GpuCounterDescriptor& a, GpuCounterDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuCounterDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuCounterDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuCounterDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpuCounterDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpuCounterDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpuCounterDescriptor& from) {
    GpuCounterDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuCounterDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.GpuCounterDescriptor";
  }
  protected:
  explicit GpuCounterDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GpuCounterDescriptor_GpuCounterSpec GpuCounterSpec;
  typedef GpuCounterDescriptor_GpuCounterBlock GpuCounterBlock;

  using GpuCounterGroup = GpuCounterDescriptor_GpuCounterGroup;
  static constexpr GpuCounterGroup UNCLASSIFIED = GpuCounterDescriptor_GpuCounterGroup_UNCLASSIFIED;
  static constexpr GpuCounterGroup SYSTEM = GpuCounterDescriptor_GpuCounterGroup_SYSTEM;
  static constexpr GpuCounterGroup VERTICES = GpuCounterDescriptor_GpuCounterGroup_VERTICES;
  static constexpr GpuCounterGroup FRAGMENTS = GpuCounterDescriptor_GpuCounterGroup_FRAGMENTS;
  static constexpr GpuCounterGroup PRIMITIVES = GpuCounterDescriptor_GpuCounterGroup_PRIMITIVES;
  static constexpr GpuCounterGroup MEMORY = GpuCounterDescriptor_GpuCounterGroup_MEMORY;
  static constexpr GpuCounterGroup COMPUTE = GpuCounterDescriptor_GpuCounterGroup_COMPUTE;
  static inline bool GpuCounterGroup_IsValid(int value) {
    return GpuCounterDescriptor_GpuCounterGroup_IsValid(value);
  }
  static constexpr GpuCounterGroup GpuCounterGroup_MIN = GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MIN;
  static constexpr GpuCounterGroup GpuCounterGroup_MAX = GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_MAX;
  static constexpr int GpuCounterGroup_ARRAYSIZE = GpuCounterDescriptor_GpuCounterGroup_GpuCounterGroup_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpuCounterGroup_descriptor() {
    return GpuCounterDescriptor_GpuCounterGroup_descriptor();
  }
  template <typename T>
  static inline const std::string& GpuCounterGroup_Name(T value) {
    return GpuCounterDescriptor_GpuCounterGroup_Name(value);
  }
  static inline bool GpuCounterGroup_Parse(absl::string_view name, GpuCounterGroup* value) {
    return GpuCounterDescriptor_GpuCounterGroup_Parse(name, value);
  }

  using MeasureUnit = GpuCounterDescriptor_MeasureUnit;
  static constexpr MeasureUnit NONE = GpuCounterDescriptor_MeasureUnit_NONE;
  static constexpr MeasureUnit BIT = GpuCounterDescriptor_MeasureUnit_BIT;
  static constexpr MeasureUnit KILOBIT = GpuCounterDescriptor_MeasureUnit_KILOBIT;
  static constexpr MeasureUnit MEGABIT = GpuCounterDescriptor_MeasureUnit_MEGABIT;
  static constexpr MeasureUnit GIGABIT = GpuCounterDescriptor_MeasureUnit_GIGABIT;
  static constexpr MeasureUnit TERABIT = GpuCounterDescriptor_MeasureUnit_TERABIT;
  static constexpr MeasureUnit PETABIT = GpuCounterDescriptor_MeasureUnit_PETABIT;
  static constexpr MeasureUnit BYTE = GpuCounterDescriptor_MeasureUnit_BYTE;
  static constexpr MeasureUnit KILOBYTE = GpuCounterDescriptor_MeasureUnit_KILOBYTE;
  static constexpr MeasureUnit MEGABYTE = GpuCounterDescriptor_MeasureUnit_MEGABYTE;
  static constexpr MeasureUnit GIGABYTE = GpuCounterDescriptor_MeasureUnit_GIGABYTE;
  static constexpr MeasureUnit TERABYTE = GpuCounterDescriptor_MeasureUnit_TERABYTE;
  static constexpr MeasureUnit PETABYTE = GpuCounterDescriptor_MeasureUnit_PETABYTE;
  static constexpr MeasureUnit HERTZ = GpuCounterDescriptor_MeasureUnit_HERTZ;
  static constexpr MeasureUnit KILOHERTZ = GpuCounterDescriptor_MeasureUnit_KILOHERTZ;
  static constexpr MeasureUnit MEGAHERTZ = GpuCounterDescriptor_MeasureUnit_MEGAHERTZ;
  static constexpr MeasureUnit GIGAHERTZ = GpuCounterDescriptor_MeasureUnit_GIGAHERTZ;
  static constexpr MeasureUnit TERAHERTZ = GpuCounterDescriptor_MeasureUnit_TERAHERTZ;
  static constexpr MeasureUnit PETAHERTZ = GpuCounterDescriptor_MeasureUnit_PETAHERTZ;
  static constexpr MeasureUnit NANOSECOND = GpuCounterDescriptor_MeasureUnit_NANOSECOND;
  static constexpr MeasureUnit MICROSECOND = GpuCounterDescriptor_MeasureUnit_MICROSECOND;
  static constexpr MeasureUnit MILLISECOND = GpuCounterDescriptor_MeasureUnit_MILLISECOND;
  static constexpr MeasureUnit SECOND = GpuCounterDescriptor_MeasureUnit_SECOND;
  static constexpr MeasureUnit MINUTE = GpuCounterDescriptor_MeasureUnit_MINUTE;
  static constexpr MeasureUnit HOUR = GpuCounterDescriptor_MeasureUnit_HOUR;
  static constexpr MeasureUnit VERTEX = GpuCounterDescriptor_MeasureUnit_VERTEX;
  static constexpr MeasureUnit PIXEL = GpuCounterDescriptor_MeasureUnit_PIXEL;
  static constexpr MeasureUnit TRIANGLE = GpuCounterDescriptor_MeasureUnit_TRIANGLE;
  static constexpr MeasureUnit PRIMITIVE = GpuCounterDescriptor_MeasureUnit_PRIMITIVE;
  static constexpr MeasureUnit FRAGMENT = GpuCounterDescriptor_MeasureUnit_FRAGMENT;
  static constexpr MeasureUnit MILLIWATT = GpuCounterDescriptor_MeasureUnit_MILLIWATT;
  static constexpr MeasureUnit WATT = GpuCounterDescriptor_MeasureUnit_WATT;
  static constexpr MeasureUnit KILOWATT = GpuCounterDescriptor_MeasureUnit_KILOWATT;
  static constexpr MeasureUnit JOULE = GpuCounterDescriptor_MeasureUnit_JOULE;
  static constexpr MeasureUnit VOLT = GpuCounterDescriptor_MeasureUnit_VOLT;
  static constexpr MeasureUnit AMPERE = GpuCounterDescriptor_MeasureUnit_AMPERE;
  static constexpr MeasureUnit CELSIUS = GpuCounterDescriptor_MeasureUnit_CELSIUS;
  static constexpr MeasureUnit FAHRENHEIT = GpuCounterDescriptor_MeasureUnit_FAHRENHEIT;
  static constexpr MeasureUnit KELVIN = GpuCounterDescriptor_MeasureUnit_KELVIN;
  static constexpr MeasureUnit PERCENT = GpuCounterDescriptor_MeasureUnit_PERCENT;
  static constexpr MeasureUnit INSTRUCTION = GpuCounterDescriptor_MeasureUnit_INSTRUCTION;
  static inline bool MeasureUnit_IsValid(int value) {
    return GpuCounterDescriptor_MeasureUnit_IsValid(value);
  }
  static constexpr MeasureUnit MeasureUnit_MIN = GpuCounterDescriptor_MeasureUnit_MeasureUnit_MIN;
  static constexpr MeasureUnit MeasureUnit_MAX = GpuCounterDescriptor_MeasureUnit_MeasureUnit_MAX;
  static constexpr int MeasureUnit_ARRAYSIZE = GpuCounterDescriptor_MeasureUnit_MeasureUnit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasureUnit_descriptor() {
    return GpuCounterDescriptor_MeasureUnit_descriptor();
  }
  template <typename T>
  static inline const std::string& MeasureUnit_Name(T value) {
    return GpuCounterDescriptor_MeasureUnit_Name(value);
  }
  static inline bool MeasureUnit_Parse(absl::string_view name, MeasureUnit* value) {
    return GpuCounterDescriptor_MeasureUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpecsFieldNumber = 1,
    kBlocksFieldNumber = 2,
    kMinSamplingPeriodNsFieldNumber = 3,
    kMaxSamplingPeriodNsFieldNumber = 4,
    kSupportsInstrumentedSamplingFieldNumber = 5,
  };
  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  int specs_size() const;
  private:
  int _internal_specs_size() const;

  public:
  void clear_specs() ;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* mutable_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >*
      mutable_specs();
  private:
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& _internal_specs(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* _internal_add_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>& _internal_specs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>* _internal_mutable_specs();
  public:
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& specs(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* add_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >&
      specs() const;
  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;

  public:
  void clear_blocks() ;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >*
      mutable_blocks();
  private:
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& _internal_blocks(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* _internal_add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>& _internal_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>* _internal_mutable_blocks();
  public:
  const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& blocks(int index) const;
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >&
      blocks() const;
  // optional uint64 min_sampling_period_ns = 3;
  bool has_min_sampling_period_ns() const;
  void clear_min_sampling_period_ns() ;
  ::uint64_t min_sampling_period_ns() const;
  void set_min_sampling_period_ns(::uint64_t value);

  private:
  ::uint64_t _internal_min_sampling_period_ns() const;
  void _internal_set_min_sampling_period_ns(::uint64_t value);

  public:
  // optional uint64 max_sampling_period_ns = 4;
  bool has_max_sampling_period_ns() const;
  void clear_max_sampling_period_ns() ;
  ::uint64_t max_sampling_period_ns() const;
  void set_max_sampling_period_ns(::uint64_t value);

  private:
  ::uint64_t _internal_max_sampling_period_ns() const;
  void _internal_set_max_sampling_period_ns(::uint64_t value);

  public:
  // optional bool supports_instrumented_sampling = 5;
  bool has_supports_instrumented_sampling() const;
  void clear_supports_instrumented_sampling() ;
  bool supports_instrumented_sampling() const;
  void set_supports_instrumented_sampling(bool value);

  private:
  bool _internal_supports_instrumented_sampling() const;
  void _internal_set_supports_instrumented_sampling(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec > specs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock > blocks_;
    ::uint64_t min_sampling_period_ns_;
    ::uint64_t max_sampling_period_ns_;
    bool supports_instrumented_sampling_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GpuCounterDescriptor_GpuCounterSpec

// optional uint32 counter_id = 1;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_counter_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_counter_id() {
  _impl_.counter_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterSpec::counter_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.counter_id)
  return _internal_counter_id();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_counter_id(::uint32_t value) {
  _internal_set_counter_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.counter_id)
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterSpec::_internal_counter_id() const {
  return _impl_.counter_id_;
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_set_counter_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.counter_id_ = value;
}

// optional string name = 2;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GpuCounterDescriptor_GpuCounterSpec::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  return _s;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name)
}

// optional string description = 3;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GpuCounterDescriptor_GpuCounterSpec::set_description(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  return _s;
}
inline const std::string& GpuCounterDescriptor_GpuCounterSpec::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterSpec::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_allocated_description(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description)
}

// int64 int_peak_value = 5;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_int_peak_value() const {
  return peak_value_case() == kIntPeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_has_int_peak_value() {
  _impl_._oneof_case_[0] = kIntPeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_int_peak_value() {
  if (peak_value_case() == kIntPeakValue) {
    _impl_.peak_value_.int_peak_value_ = ::int64_t{0};
    clear_has_peak_value();
  }
}
inline ::int64_t GpuCounterDescriptor_GpuCounterSpec::int_peak_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.int_peak_value)
  return _internal_int_peak_value();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_int_peak_value(::int64_t value) {
  _internal_set_int_peak_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.int_peak_value)
}
inline ::int64_t GpuCounterDescriptor_GpuCounterSpec::_internal_int_peak_value() const {
  if (peak_value_case() == kIntPeakValue) {
    return _impl_.peak_value_.int_peak_value_;
  }
  return ::int64_t{0};
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_set_int_peak_value(::int64_t value) {
  if (peak_value_case() != kIntPeakValue) {
    clear_peak_value();
    set_has_int_peak_value();
  }
  _impl_.peak_value_.int_peak_value_ = value;
}

// double double_peak_value = 6;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_double_peak_value() const {
  return peak_value_case() == kDoublePeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_has_double_peak_value() {
  _impl_._oneof_case_[0] = kDoublePeakValue;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_double_peak_value() {
  if (peak_value_case() == kDoublePeakValue) {
    _impl_.peak_value_.double_peak_value_ = 0;
    clear_has_peak_value();
  }
}
inline double GpuCounterDescriptor_GpuCounterSpec::double_peak_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.double_peak_value)
  return _internal_double_peak_value();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_double_peak_value(double value) {
  _internal_set_double_peak_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.double_peak_value)
}
inline double GpuCounterDescriptor_GpuCounterSpec::_internal_double_peak_value() const {
  if (peak_value_case() == kDoublePeakValue) {
    return _impl_.peak_value_.double_peak_value_;
  }
  return 0;
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_set_double_peak_value(double value) {
  if (peak_value_case() != kDoublePeakValue) {
    clear_peak_value();
    set_has_double_peak_value();
  }
  _impl_.peak_value_.double_peak_value_ = value;
}

// repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
inline int GpuCounterDescriptor_GpuCounterSpec::_internal_numerator_units_size() const {
  return _impl_.numerator_units_.size();
}
inline int GpuCounterDescriptor_GpuCounterSpec::numerator_units_size() const {
  return _internal_numerator_units_size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_numerator_units() {
  _internal_mutable_numerator_units()->Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::numerator_units(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return _internal_numerator_units(index);
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_numerator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  _internal_mutable_numerator_units()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  _internal_add_numerator_units(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GpuCounterDescriptor_GpuCounterSpec::numerator_units() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return _internal_numerator_units();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GpuCounterDescriptor_GpuCounterSpec::mutable_numerator_units() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units)
  return _internal_mutable_numerator_units();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::_internal_numerator_units(int index) const {
  return static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(_internal_numerator_units().Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_add_numerator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  _internal_mutable_numerator_units()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GpuCounterDescriptor_GpuCounterSpec::_internal_numerator_units() const {
  return _impl_.numerator_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GpuCounterDescriptor_GpuCounterSpec::_internal_mutable_numerator_units() {
  return &_impl_.numerator_units_;
}

// repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
inline int GpuCounterDescriptor_GpuCounterSpec::_internal_denominator_units_size() const {
  return _impl_.denominator_units_.size();
}
inline int GpuCounterDescriptor_GpuCounterSpec::denominator_units_size() const {
  return _internal_denominator_units_size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_denominator_units() {
  _internal_mutable_denominator_units()->Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::denominator_units(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return _internal_denominator_units(index);
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_denominator_units(int index, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  _internal_mutable_denominator_units()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  _internal_add_denominator_units(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GpuCounterDescriptor_GpuCounterSpec::denominator_units() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return _internal_denominator_units();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GpuCounterDescriptor_GpuCounterSpec::mutable_denominator_units() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units)
  return _internal_mutable_denominator_units();
}
inline ::perfetto::protos::GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor_GpuCounterSpec::_internal_denominator_units(int index) const {
  return static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(_internal_denominator_units().Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_add_denominator_units(::perfetto::protos::GpuCounterDescriptor_MeasureUnit value) {
  assert(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(value));
  _internal_mutable_denominator_units()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GpuCounterDescriptor_GpuCounterSpec::_internal_denominator_units() const {
  return _impl_.denominator_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GpuCounterDescriptor_GpuCounterSpec::_internal_mutable_denominator_units() {
  return &_impl_.denominator_units_;
}

// optional bool select_by_default = 9;
inline bool GpuCounterDescriptor_GpuCounterSpec::has_select_by_default() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_select_by_default() {
  _impl_.select_by_default_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GpuCounterDescriptor_GpuCounterSpec::select_by_default() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.select_by_default)
  return _internal_select_by_default();
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_select_by_default(bool value) {
  _internal_set_select_by_default(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.select_by_default)
}
inline bool GpuCounterDescriptor_GpuCounterSpec::_internal_select_by_default() const {
  return _impl_.select_by_default_;
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_set_select_by_default(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.select_by_default_ = value;
}

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
inline int GpuCounterDescriptor_GpuCounterSpec::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GpuCounterDescriptor_GpuCounterSpec::groups_size() const {
  return _internal_groups_size();
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_groups() {
  _internal_mutable_groups()->Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterSpec::groups(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return _internal_groups(index);
}
inline void GpuCounterDescriptor_GpuCounterSpec::set_groups(int index, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  assert(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value));
  _internal_mutable_groups()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
}
inline void GpuCounterDescriptor_GpuCounterSpec::add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  _internal_add_groups(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GpuCounterDescriptor_GpuCounterSpec::groups() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return _internal_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GpuCounterDescriptor_GpuCounterSpec::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups)
  return _internal_mutable_groups();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor_GpuCounterSpec::_internal_groups(int index) const {
  return static_cast<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup>(_internal_groups().Get(index));
}
inline void GpuCounterDescriptor_GpuCounterSpec::_internal_add_groups(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup value) {
  assert(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(value));
  _internal_mutable_groups()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GpuCounterDescriptor_GpuCounterSpec::_internal_groups() const {
  return _impl_.groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GpuCounterDescriptor_GpuCounterSpec::_internal_mutable_groups() {
  return &_impl_.groups_;
}

inline bool GpuCounterDescriptor_GpuCounterSpec::has_peak_value() const {
  return peak_value_case() != PEAK_VALUE_NOT_SET;
}
inline void GpuCounterDescriptor_GpuCounterSpec::clear_has_peak_value() {
  _impl_._oneof_case_[0] = PEAK_VALUE_NOT_SET;
}
inline GpuCounterDescriptor_GpuCounterSpec::PeakValueCase GpuCounterDescriptor_GpuCounterSpec::peak_value_case() const {
  return GpuCounterDescriptor_GpuCounterSpec::PeakValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GpuCounterDescriptor_GpuCounterBlock

// optional uint32 block_id = 1;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_block_id() {
  _impl_.block_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterBlock::block_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_id)
  return _internal_block_id();
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_block_id(::uint32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_id)
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterBlock::_internal_block_id() const {
  return _impl_.block_id_;
}
inline void GpuCounterDescriptor_GpuCounterBlock::_internal_set_block_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.block_id_ = value;
}

// optional uint32 block_capacity = 2;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_block_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_block_capacity() {
  _impl_.block_capacity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterBlock::block_capacity() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_capacity)
  return _internal_block_capacity();
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_block_capacity(::uint32_t value) {
  _internal_set_block_capacity(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.block_capacity)
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterBlock::_internal_block_capacity() const {
  return _impl_.block_capacity_;
}
inline void GpuCounterDescriptor_GpuCounterBlock::_internal_set_block_capacity(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.block_capacity_ = value;
}

// optional string name = 3;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GpuCounterDescriptor_GpuCounterBlock::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  return _s;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GpuCounterDescriptor_GpuCounterBlock::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name)
}

// optional string description = 4;
inline bool GpuCounterDescriptor_GpuCounterBlock::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::description() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GpuCounterDescriptor_GpuCounterBlock::set_description(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  return _s;
}
inline const std::string& GpuCounterDescriptor_GpuCounterBlock::_internal_description() const {
  return _impl_.description_.Get();
}
inline void GpuCounterDescriptor_GpuCounterBlock::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* GpuCounterDescriptor_GpuCounterBlock::release_description() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.description_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_allocated_description(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description)
}

// repeated uint32 counter_ids = 5;
inline int GpuCounterDescriptor_GpuCounterBlock::_internal_counter_ids_size() const {
  return _impl_.counter_ids_.size();
}
inline int GpuCounterDescriptor_GpuCounterBlock::counter_ids_size() const {
  return _internal_counter_ids_size();
}
inline void GpuCounterDescriptor_GpuCounterBlock::clear_counter_ids() {
  _internal_mutable_counter_ids()->Clear();
}
inline ::uint32_t GpuCounterDescriptor_GpuCounterBlock::counter_ids(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return _internal_counter_ids(index);
}
inline void GpuCounterDescriptor_GpuCounterBlock::set_counter_ids(int index, ::uint32_t value) {
  _internal_mutable_counter_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
}
inline void GpuCounterDescriptor_GpuCounterBlock::add_counter_ids(::uint32_t value) {
  _internal_add_counter_ids(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& GpuCounterDescriptor_GpuCounterBlock::counter_ids() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return _internal_counter_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* GpuCounterDescriptor_GpuCounterBlock::mutable_counter_ids() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counter_ids)
  return _internal_mutable_counter_ids();
}

inline ::uint32_t GpuCounterDescriptor_GpuCounterBlock::_internal_counter_ids(int index) const {
  return _internal_counter_ids().Get(index);
}
inline void GpuCounterDescriptor_GpuCounterBlock::_internal_add_counter_ids(::uint32_t value) {
  _internal_mutable_counter_ids()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& GpuCounterDescriptor_GpuCounterBlock::_internal_counter_ids() const {
  return _impl_.counter_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* GpuCounterDescriptor_GpuCounterBlock::_internal_mutable_counter_ids() {
  return &_impl_.counter_ids_;
}

// -------------------------------------------------------------------

// GpuCounterDescriptor

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
inline int GpuCounterDescriptor::_internal_specs_size() const {
  return _impl_.specs_.size();
}
inline int GpuCounterDescriptor::specs_size() const {
  return _internal_specs_size();
}
inline void GpuCounterDescriptor::clear_specs() {
  _internal_mutable_specs()->Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::mutable_specs(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.specs)
  return _internal_mutable_specs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >*
GpuCounterDescriptor::mutable_specs() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.specs)
  return _internal_mutable_specs();
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& GpuCounterDescriptor::_internal_specs(int index) const {
  return _internal_specs().Get(index);
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec& GpuCounterDescriptor::specs(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.specs)
  return _internal_specs(index);
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::_internal_add_specs() {
  return _internal_mutable_specs()->Add();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* GpuCounterDescriptor::add_specs() {
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec* _add = _internal_add_specs();
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.specs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >&
GpuCounterDescriptor::specs() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.specs)
  return _internal_specs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>&
GpuCounterDescriptor::_internal_specs() const {
  return _impl_.specs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec>*
GpuCounterDescriptor::_internal_mutable_specs() {
  return &_impl_.specs_;
}

// repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
inline int GpuCounterDescriptor::_internal_blocks_size() const {
  return _impl_.blocks_.size();
}
inline int GpuCounterDescriptor::blocks_size() const {
  return _internal_blocks_size();
}
inline void GpuCounterDescriptor::clear_blocks() {
  _internal_mutable_blocks()->Clear();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterDescriptor.blocks)
  return _internal_mutable_blocks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >*
GpuCounterDescriptor::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterDescriptor.blocks)
  return _internal_mutable_blocks();
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& GpuCounterDescriptor::_internal_blocks(int index) const {
  return _internal_blocks().Get(index);
}
inline const ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock& GpuCounterDescriptor::blocks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.blocks)
  return _internal_blocks(index);
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::_internal_add_blocks() {
  return _internal_mutable_blocks()->Add();
}
inline ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* GpuCounterDescriptor::add_blocks() {
  ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterDescriptor.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >&
GpuCounterDescriptor::blocks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterDescriptor.blocks)
  return _internal_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>&
GpuCounterDescriptor::_internal_blocks() const {
  return _impl_.blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock>*
GpuCounterDescriptor::_internal_mutable_blocks() {
  return &_impl_.blocks_;
}

// optional uint64 min_sampling_period_ns = 3;
inline bool GpuCounterDescriptor::has_min_sampling_period_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GpuCounterDescriptor::clear_min_sampling_period_ns() {
  _impl_.min_sampling_period_ns_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t GpuCounterDescriptor::min_sampling_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.min_sampling_period_ns)
  return _internal_min_sampling_period_ns();
}
inline void GpuCounterDescriptor::set_min_sampling_period_ns(::uint64_t value) {
  _internal_set_min_sampling_period_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.min_sampling_period_ns)
}
inline ::uint64_t GpuCounterDescriptor::_internal_min_sampling_period_ns() const {
  return _impl_.min_sampling_period_ns_;
}
inline void GpuCounterDescriptor::_internal_set_min_sampling_period_ns(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_sampling_period_ns_ = value;
}

// optional uint64 max_sampling_period_ns = 4;
inline bool GpuCounterDescriptor::has_max_sampling_period_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GpuCounterDescriptor::clear_max_sampling_period_ns() {
  _impl_.max_sampling_period_ns_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t GpuCounterDescriptor::max_sampling_period_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.max_sampling_period_ns)
  return _internal_max_sampling_period_ns();
}
inline void GpuCounterDescriptor::set_max_sampling_period_ns(::uint64_t value) {
  _internal_set_max_sampling_period_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.max_sampling_period_ns)
}
inline ::uint64_t GpuCounterDescriptor::_internal_max_sampling_period_ns() const {
  return _impl_.max_sampling_period_ns_;
}
inline void GpuCounterDescriptor::_internal_set_max_sampling_period_ns(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_sampling_period_ns_ = value;
}

// optional bool supports_instrumented_sampling = 5;
inline bool GpuCounterDescriptor::has_supports_instrumented_sampling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GpuCounterDescriptor::clear_supports_instrumented_sampling() {
  _impl_.supports_instrumented_sampling_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool GpuCounterDescriptor::supports_instrumented_sampling() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterDescriptor.supports_instrumented_sampling)
  return _internal_supports_instrumented_sampling();
}
inline void GpuCounterDescriptor::set_supports_instrumented_sampling(bool value) {
  _internal_set_supports_instrumented_sampling(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterDescriptor.supports_instrumented_sampling)
}
inline bool GpuCounterDescriptor::_internal_supports_instrumented_sampling() const {
  return _impl_.supports_instrumented_sampling_;
}
inline void GpuCounterDescriptor::_internal_set_supports_instrumented_sampling(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.supports_instrumented_sampling_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup>() {
  return ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::GpuCounterDescriptor_MeasureUnit> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>() {
  return ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_2epb_2eh
