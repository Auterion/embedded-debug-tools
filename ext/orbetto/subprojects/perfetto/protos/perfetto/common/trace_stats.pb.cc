// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/trace_stats.proto

#include "protos/perfetto/common/trace_stats.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TraceStats_BufferStats::TraceStats_BufferStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytes_written_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chunks_written_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chunks_overwritten_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.write_wrap_count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.patches_succeeded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.patches_failed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.readaheads_succeeded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.readaheads_failed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.abi_violations_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chunks_rewritten_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chunks_committed_out_of_order_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.buffer_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bytes_overwritten_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bytes_read_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.padding_bytes_written_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.padding_bytes_cleared_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chunks_read_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chunks_discarded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.trace_writer_packet_loss_)*/ ::uint64_t{0u}
} {}
struct TraceStats_BufferStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceStats_BufferStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceStats_BufferStatsDefaultTypeInternal() {}
  union {
    TraceStats_BufferStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceStats_BufferStatsDefaultTypeInternal _TraceStats_BufferStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceStats_WriterStats::TraceStats_WriterStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chunk_payload_histogram_counts_)*/ {}
  ,/* _impl_._chunk_payload_histogram_counts_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.chunk_payload_histogram_sum_)*/ {}
  ,/* _impl_._chunk_payload_histogram_sum_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.sequence_id_)*/ ::uint64_t{0u}
} {}
struct TraceStats_WriterStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceStats_WriterStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceStats_WriterStatsDefaultTypeInternal() {}
  union {
    TraceStats_WriterStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceStats_WriterStatsDefaultTypeInternal _TraceStats_WriterStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceStats_FilterStats::TraceStats_FilterStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_packets_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.input_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.output_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.errors_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.time_taken_ns_)*/ ::uint64_t{0u}
} {}
struct TraceStats_FilterStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceStats_FilterStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceStats_FilterStatsDefaultTypeInternal() {}
  union {
    TraceStats_FilterStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceStats_FilterStatsDefaultTypeInternal _TraceStats_FilterStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TraceStats::TraceStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buffer_stats_)*/{}
  , /*decltype(_impl_.chunk_payload_histogram_def_)*/ {}

  , /*decltype(_impl_.writer_stats_)*/{}
  , /*decltype(_impl_.filter_stats_)*/nullptr
  , /*decltype(_impl_.producers_seen_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.producers_connected_)*/ 0u

  , /*decltype(_impl_.data_sources_registered_)*/ 0u

  , /*decltype(_impl_.data_sources_seen_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tracing_sessions_)*/ 0u

  , /*decltype(_impl_.total_buffers_)*/ 0u

  , /*decltype(_impl_.chunks_discarded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.patches_discarded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.invalid_packets_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flushes_requested_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flushes_succeeded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flushes_failed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.final_flush_outcome_)*/ 0
} {}
struct TraceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceStatsDefaultTypeInternal() {}
  union {
    TraceStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceStatsDefaultTypeInternal _TraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.buffer_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.bytes_written_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.bytes_overwritten_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.bytes_read_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.padding_bytes_written_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.padding_bytes_cleared_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.chunks_written_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.chunks_rewritten_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.chunks_overwritten_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.chunks_discarded_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.chunks_read_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.chunks_committed_out_of_order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.write_wrap_count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.patches_succeeded_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.patches_failed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.readaheads_succeeded_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.readaheads_failed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.abi_violations_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_BufferStats, _impl_.trace_writer_packet_loss_),
    11,
    0,
    12,
    13,
    14,
    15,
    1,
    9,
    2,
    17,
    16,
    10,
    3,
    4,
    5,
    6,
    7,
    8,
    18,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_WriterStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_WriterStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_WriterStats, _impl_.sequence_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_WriterStats, _impl_.chunk_payload_histogram_counts_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_WriterStats, _impl_.chunk_payload_histogram_sum_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _impl_.input_packets_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _impl_.input_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _impl_.output_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _impl_.errors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats_FilterStats, _impl_.time_taken_ns_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.buffer_stats_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.chunk_payload_histogram_def_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.writer_stats_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.producers_connected_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.producers_seen_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.data_sources_registered_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.data_sources_seen_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.tracing_sessions_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.total_buffers_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.chunks_discarded_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.patches_discarded_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.invalid_packets_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.filter_stats_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.flushes_requested_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.flushes_succeeded_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.flushes_failed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TraceStats, _impl_.final_flush_outcome_),
    ~0u,
    ~0u,
    ~0u,
    2,
    1,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    0,
    10,
    11,
    12,
    13,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 27, -1, sizeof(::perfetto::protos::TraceStats_BufferStats)},
        { 46, 57, -1, sizeof(::perfetto::protos::TraceStats_WriterStats)},
        { 60, 73, -1, sizeof(::perfetto::protos::TraceStats_FilterStats)},
        { 78, 103, -1, sizeof(::perfetto::protos::TraceStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TraceStats_BufferStats_default_instance_._instance,
    &::perfetto::protos::_TraceStats_WriterStats_default_instance_._instance,
    &::perfetto::protos::_TraceStats_FilterStats_default_instance_._instance,
    &::perfetto::protos::_TraceStats_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(protos/perfetto/common/trace_stats.pro"
    "to\022\017perfetto.protos\"\333\013\n\nTraceStats\022=\n\014bu"
    "ffer_stats\030\001 \003(\0132\'.perfetto.protos.Trace"
    "Stats.BufferStats\022#\n\033chunk_payload_histo"
    "gram_def\030\021 \003(\003\022=\n\014writer_stats\030\022 \003(\0132\'.p"
    "erfetto.protos.TraceStats.WriterStats\022\033\n"
    "\023producers_connected\030\002 \001(\r\022\026\n\016producers_"
    "seen\030\003 \001(\004\022\037\n\027data_sources_registered\030\004 "
    "\001(\r\022\031\n\021data_sources_seen\030\005 \001(\004\022\030\n\020tracin"
    "g_sessions\030\006 \001(\r\022\025\n\rtotal_buffers\030\007 \001(\r\022"
    "\030\n\020chunks_discarded\030\010 \001(\004\022\031\n\021patches_dis"
    "carded\030\t \001(\004\022\027\n\017invalid_packets\030\n \001(\004\022=\n"
    "\014filter_stats\030\013 \001(\0132\'.perfetto.protos.Tr"
    "aceStats.FilterStats\022\031\n\021flushes_requeste"
    "d\030\014 \001(\004\022\031\n\021flushes_succeeded\030\r \001(\004\022\026\n\016fl"
    "ushes_failed\030\016 \001(\004\022J\n\023final_flush_outcom"
    "e\030\017 \001(\0162-.perfetto.protos.TraceStats.Fin"
    "alFlushOutcome\032\212\004\n\013BufferStats\022\023\n\013buffer"
    "_size\030\014 \001(\004\022\025\n\rbytes_written\030\001 \001(\004\022\031\n\021by"
    "tes_overwritten\030\r \001(\004\022\022\n\nbytes_read\030\016 \001("
    "\004\022\035\n\025padding_bytes_written\030\017 \001(\004\022\035\n\025padd"
    "ing_bytes_cleared\030\020 \001(\004\022\026\n\016chunks_writte"
    "n\030\002 \001(\004\022\030\n\020chunks_rewritten\030\n \001(\004\022\032\n\022chu"
    "nks_overwritten\030\003 \001(\004\022\030\n\020chunks_discarde"
    "d\030\022 \001(\004\022\023\n\013chunks_read\030\021 \001(\004\022%\n\035chunks_c"
    "ommitted_out_of_order\030\013 \001(\004\022\030\n\020write_wra"
    "p_count\030\004 \001(\004\022\031\n\021patches_succeeded\030\005 \001(\004"
    "\022\026\n\016patches_failed\030\006 \001(\004\022\034\n\024readaheads_s"
    "ucceeded\030\007 \001(\004\022\031\n\021readaheads_failed\030\010 \001("
    "\004\022\026\n\016abi_violations\030\t \001(\004\022 \n\030trace_write"
    "r_packet_loss\030\023 \001(\004\032w\n\013WriterStats\022\023\n\013se"
    "quence_id\030\001 \001(\004\022*\n\036chunk_payload_histogr"
    "am_counts\030\002 \003(\004B\002\020\001\022\'\n\033chunk_payload_his"
    "togram_sum\030\003 \003(\003B\002\020\001\032v\n\013FilterStats\022\025\n\ri"
    "nput_packets\030\001 \001(\004\022\023\n\013input_bytes\030\002 \001(\004\022"
    "\024\n\014output_bytes\030\003 \001(\004\022\016\n\006errors\030\004 \001(\004\022\025\n"
    "\rtime_taken_ns\030\005 \001(\004\"c\n\021FinalFlushOutcom"
    "e\022\033\n\027FINAL_FLUSH_UNSPECIFIED\020\000\022\031\n\025FINAL_"
    "FLUSH_SUCCEEDED\020\001\022\026\n\022FINAL_FLUSH_FAILED\020"
    "\002"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto = {
    false,
    false,
    1561,
    descriptor_table_protodef_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto,
    "protos/perfetto/common/trace_stats.proto",
    &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto(&descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceStats_FinalFlushOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[0];
}
bool TraceStats_FinalFlushOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TraceStats_FinalFlushOutcome TraceStats::FINAL_FLUSH_UNSPECIFIED;
constexpr TraceStats_FinalFlushOutcome TraceStats::FINAL_FLUSH_SUCCEEDED;
constexpr TraceStats_FinalFlushOutcome TraceStats::FINAL_FLUSH_FAILED;
constexpr TraceStats_FinalFlushOutcome TraceStats::FinalFlushOutcome_MIN;
constexpr TraceStats_FinalFlushOutcome TraceStats::FinalFlushOutcome_MAX;
constexpr int TraceStats::FinalFlushOutcome_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TraceStats_BufferStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceStats_BufferStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceStats_BufferStats, _impl_._has_bits_);
  static void set_has_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_overwritten(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_padding_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_padding_bytes_cleared(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_chunks_written(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunks_rewritten(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_chunks_overwritten(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chunks_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_chunks_read(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_chunks_committed_out_of_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_write_wrap_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_patches_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_patches_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_readaheads_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_readaheads_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_abi_violations(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_trace_writer_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

TraceStats_BufferStats::TraceStats_BufferStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceStats.BufferStats)
}
TraceStats_BufferStats::TraceStats_BufferStats(const TraceStats_BufferStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats.BufferStats)
}

inline void TraceStats_BufferStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytes_written_) { ::uint64_t{0u} }

    , decltype(_impl_.chunks_written_) { ::uint64_t{0u} }

    , decltype(_impl_.chunks_overwritten_) { ::uint64_t{0u} }

    , decltype(_impl_.write_wrap_count_) { ::uint64_t{0u} }

    , decltype(_impl_.patches_succeeded_) { ::uint64_t{0u} }

    , decltype(_impl_.patches_failed_) { ::uint64_t{0u} }

    , decltype(_impl_.readaheads_succeeded_) { ::uint64_t{0u} }

    , decltype(_impl_.readaheads_failed_) { ::uint64_t{0u} }

    , decltype(_impl_.abi_violations_) { ::uint64_t{0u} }

    , decltype(_impl_.chunks_rewritten_) { ::uint64_t{0u} }

    , decltype(_impl_.chunks_committed_out_of_order_) { ::uint64_t{0u} }

    , decltype(_impl_.buffer_size_) { ::uint64_t{0u} }

    , decltype(_impl_.bytes_overwritten_) { ::uint64_t{0u} }

    , decltype(_impl_.bytes_read_) { ::uint64_t{0u} }

    , decltype(_impl_.padding_bytes_written_) { ::uint64_t{0u} }

    , decltype(_impl_.padding_bytes_cleared_) { ::uint64_t{0u} }

    , decltype(_impl_.chunks_read_) { ::uint64_t{0u} }

    , decltype(_impl_.chunks_discarded_) { ::uint64_t{0u} }

    , decltype(_impl_.trace_writer_packet_loss_) { ::uint64_t{0u} }

  };
}

TraceStats_BufferStats::~TraceStats_BufferStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats.BufferStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceStats_BufferStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceStats_BufferStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceStats_BufferStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats.BufferStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.bytes_written_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.readaheads_failed_) -
        reinterpret_cast<char*>(&_impl_.bytes_written_)) + sizeof(_impl_.readaheads_failed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.abi_violations_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.padding_bytes_cleared_) -
        reinterpret_cast<char*>(&_impl_.abi_violations_)) + sizeof(_impl_.padding_bytes_cleared_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.chunks_read_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.trace_writer_packet_loss_) -
        reinterpret_cast<char*>(&_impl_.chunks_read_)) + sizeof(_impl_.trace_writer_packet_loss_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceStats_BufferStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 bytes_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bytes_written(&has_bits);
          _impl_.bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_written = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_chunks_written(&has_bits);
          _impl_.chunks_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_overwritten = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_chunks_overwritten(&has_bits);
          _impl_.chunks_overwritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 write_wrap_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_write_wrap_count(&has_bits);
          _impl_.write_wrap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 patches_succeeded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_patches_succeeded(&has_bits);
          _impl_.patches_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 patches_failed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_patches_failed(&has_bits);
          _impl_.patches_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 readaheads_succeeded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_readaheads_succeeded(&has_bits);
          _impl_.readaheads_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 readaheads_failed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_readaheads_failed(&has_bits);
          _impl_.readaheads_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 abi_violations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_abi_violations(&has_bits);
          _impl_.abi_violations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_rewritten = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_chunks_rewritten(&has_bits);
          _impl_.chunks_rewritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_committed_out_of_order = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_chunks_committed_out_of_order(&has_bits);
          _impl_.chunks_committed_out_of_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 buffer_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_buffer_size(&has_bits);
          _impl_.buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bytes_overwritten = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_bytes_overwritten(&has_bits);
          _impl_.bytes_overwritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bytes_read = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_bytes_read(&has_bits);
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 padding_bytes_written = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_padding_bytes_written(&has_bits);
          _impl_.padding_bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 padding_bytes_cleared = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_padding_bytes_cleared(&has_bits);
          _impl_.padding_bytes_cleared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_read = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_chunks_read(&has_bits);
          _impl_.chunks_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_discarded = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_chunks_discarded(&has_bits);
          _impl_.chunks_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 trace_writer_packet_loss = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_trace_writer_packet_loss(&has_bits);
          _impl_.trace_writer_packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceStats_BufferStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceStats.BufferStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 bytes_written = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_bytes_written(), target);
  }

  // optional uint64 chunks_written = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_chunks_written(), target);
  }

  // optional uint64 chunks_overwritten = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_chunks_overwritten(), target);
  }

  // optional uint64 write_wrap_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_write_wrap_count(), target);
  }

  // optional uint64 patches_succeeded = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_patches_succeeded(), target);
  }

  // optional uint64 patches_failed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_patches_failed(), target);
  }

  // optional uint64 readaheads_succeeded = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_readaheads_succeeded(), target);
  }

  // optional uint64 readaheads_failed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_readaheads_failed(), target);
  }

  // optional uint64 abi_violations = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_abi_violations(), target);
  }

  // optional uint64 chunks_rewritten = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_chunks_rewritten(), target);
  }

  // optional uint64 chunks_committed_out_of_order = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_chunks_committed_out_of_order(), target);
  }

  // optional uint64 buffer_size = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        12, this->_internal_buffer_size(), target);
  }

  // optional uint64 bytes_overwritten = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_bytes_overwritten(), target);
  }

  // optional uint64 bytes_read = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        14, this->_internal_bytes_read(), target);
  }

  // optional uint64 padding_bytes_written = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        15, this->_internal_padding_bytes_written(), target);
  }

  // optional uint64 padding_bytes_cleared = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        16, this->_internal_padding_bytes_cleared(), target);
  }

  // optional uint64 chunks_read = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_chunks_read(), target);
  }

  // optional uint64 chunks_discarded = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        18, this->_internal_chunks_discarded(), target);
  }

  // optional uint64 trace_writer_packet_loss = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        19, this->_internal_trace_writer_packet_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceStats.BufferStats)
  return target;
}

::size_t TraceStats_BufferStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats.BufferStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 bytes_written = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bytes_written());
    }

    // optional uint64 chunks_written = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_chunks_written());
    }

    // optional uint64 chunks_overwritten = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_chunks_overwritten());
    }

    // optional uint64 write_wrap_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_write_wrap_count());
    }

    // optional uint64 patches_succeeded = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_patches_succeeded());
    }

    // optional uint64 patches_failed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_patches_failed());
    }

    // optional uint64 readaheads_succeeded = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_readaheads_succeeded());
    }

    // optional uint64 readaheads_failed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_readaheads_failed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 abi_violations = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_abi_violations());
    }

    // optional uint64 chunks_rewritten = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_chunks_rewritten());
    }

    // optional uint64 chunks_committed_out_of_order = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_chunks_committed_out_of_order());
    }

    // optional uint64 buffer_size = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_buffer_size());
    }

    // optional uint64 bytes_overwritten = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bytes_overwritten());
    }

    // optional uint64 bytes_read = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bytes_read());
    }

    // optional uint64 padding_bytes_written = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_padding_bytes_written());
    }

    // optional uint64 padding_bytes_cleared = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_padding_bytes_cleared());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint64 chunks_read = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_chunks_read());
    }

    // optional uint64 chunks_discarded = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_chunks_discarded());
    }

    // optional uint64 trace_writer_packet_loss = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_trace_writer_packet_loss());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceStats_BufferStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceStats_BufferStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceStats_BufferStats::GetClassData() const { return &_class_data_; }


void TraceStats_BufferStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceStats_BufferStats*>(&to_msg);
  auto& from = static_cast<const TraceStats_BufferStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats.BufferStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bytes_written_ = from._impl_.bytes_written_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chunks_written_ = from._impl_.chunks_written_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chunks_overwritten_ = from._impl_.chunks_overwritten_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.write_wrap_count_ = from._impl_.write_wrap_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.patches_succeeded_ = from._impl_.patches_succeeded_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.patches_failed_ = from._impl_.patches_failed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.readaheads_succeeded_ = from._impl_.readaheads_succeeded_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.readaheads_failed_ = from._impl_.readaheads_failed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.abi_violations_ = from._impl_.abi_violations_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.chunks_rewritten_ = from._impl_.chunks_rewritten_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.chunks_committed_out_of_order_ = from._impl_.chunks_committed_out_of_order_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.buffer_size_ = from._impl_.buffer_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.bytes_overwritten_ = from._impl_.bytes_overwritten_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bytes_read_ = from._impl_.bytes_read_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.padding_bytes_written_ = from._impl_.padding_bytes_written_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.padding_bytes_cleared_ = from._impl_.padding_bytes_cleared_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.chunks_read_ = from._impl_.chunks_read_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.chunks_discarded_ = from._impl_.chunks_discarded_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.trace_writer_packet_loss_ = from._impl_.trace_writer_packet_loss_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceStats_BufferStats::CopyFrom(const TraceStats_BufferStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats.BufferStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats_BufferStats::IsInitialized() const {
  return true;
}

void TraceStats_BufferStats::InternalSwap(TraceStats_BufferStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceStats_BufferStats, _impl_.trace_writer_packet_loss_)
      + sizeof(TraceStats_BufferStats::_impl_.trace_writer_packet_loss_)
      - PROTOBUF_FIELD_OFFSET(TraceStats_BufferStats, _impl_.bytes_written_)>(
          reinterpret_cast<char*>(&_impl_.bytes_written_),
          reinterpret_cast<char*>(&other->_impl_.bytes_written_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceStats_BufferStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[0]);
}
// ===================================================================

class TraceStats_WriterStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceStats_WriterStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceStats_WriterStats, _impl_._has_bits_);
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TraceStats_WriterStats::TraceStats_WriterStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceStats.WriterStats)
}
TraceStats_WriterStats::TraceStats_WriterStats(const TraceStats_WriterStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceStats_WriterStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunk_payload_histogram_counts_) { from._impl_.chunk_payload_histogram_counts_ }
    ,/* _impl_._chunk_payload_histogram_counts_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.chunk_payload_histogram_sum_) { from._impl_.chunk_payload_histogram_sum_ }
    ,/* _impl_._chunk_payload_histogram_sum_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.sequence_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats.WriterStats)
}

inline void TraceStats_WriterStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chunk_payload_histogram_counts_) { arena }
    ,/* _impl_._chunk_payload_histogram_counts_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.chunk_payload_histogram_sum_) { arena }
    ,/* _impl_._chunk_payload_histogram_sum_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.sequence_id_) { ::uint64_t{0u} }

  };
}

TraceStats_WriterStats::~TraceStats_WriterStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats.WriterStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceStats_WriterStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_payload_histogram_counts_.~RepeatedField();
  _impl_.chunk_payload_histogram_sum_.~RepeatedField();
}

void TraceStats_WriterStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceStats_WriterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats.WriterStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_chunk_payload_histogram_counts()->Clear();
  _internal_mutable_chunk_payload_histogram_sum()->Clear();
  _impl_.sequence_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceStats_WriterStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_sequence_id(&has_bits);
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 chunk_payload_histogram_counts = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_chunk_payload_histogram_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_chunk_payload_histogram_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 chunk_payload_histogram_sum = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunk_payload_histogram_sum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_chunk_payload_histogram_sum(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceStats_WriterStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceStats.WriterStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 sequence_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence_id(), target);
  }

  // repeated uint64 chunk_payload_histogram_counts = 2 [packed = true];
  {
    int byte_size = _impl_._chunk_payload_histogram_counts_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(2, _internal_chunk_payload_histogram_counts(),
                                                 byte_size, target);
    }
  }

  // repeated int64 chunk_payload_histogram_sum = 3 [packed = true];
  {
    int byte_size = _impl_._chunk_payload_histogram_sum_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(3, _internal_chunk_payload_histogram_sum(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceStats.WriterStats)
  return target;
}

::size_t TraceStats_WriterStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats.WriterStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 chunk_payload_histogram_counts = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_chunk_payload_histogram_counts())
    ;
    _impl_._chunk_payload_histogram_counts_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int64 chunk_payload_histogram_sum = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_chunk_payload_histogram_sum())
    ;
    _impl_._chunk_payload_histogram_sum_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional uint64 sequence_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceStats_WriterStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceStats_WriterStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceStats_WriterStats::GetClassData() const { return &_class_data_; }


void TraceStats_WriterStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceStats_WriterStats*>(&to_msg);
  auto& from = static_cast<const TraceStats_WriterStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats.WriterStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunk_payload_histogram_counts_.MergeFrom(from._impl_.chunk_payload_histogram_counts_);
  _this->_impl_.chunk_payload_histogram_sum_.MergeFrom(from._impl_.chunk_payload_histogram_sum_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceStats_WriterStats::CopyFrom(const TraceStats_WriterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats.WriterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats_WriterStats::IsInitialized() const {
  return true;
}

void TraceStats_WriterStats::InternalSwap(TraceStats_WriterStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.chunk_payload_histogram_counts_.InternalSwap(&other->_impl_.chunk_payload_histogram_counts_);
  _impl_.chunk_payload_histogram_sum_.InternalSwap(&other->_impl_.chunk_payload_histogram_sum_);

  swap(_impl_.sequence_id_, other->_impl_.sequence_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceStats_WriterStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[1]);
}
// ===================================================================

class TraceStats_FilterStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceStats_FilterStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceStats_FilterStats, _impl_._has_bits_);
  static void set_has_input_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_taken_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TraceStats_FilterStats::TraceStats_FilterStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceStats.FilterStats)
}
TraceStats_FilterStats::TraceStats_FilterStats(const TraceStats_FilterStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats.FilterStats)
}

inline void TraceStats_FilterStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_packets_) { ::uint64_t{0u} }

    , decltype(_impl_.input_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.output_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.errors_) { ::uint64_t{0u} }

    , decltype(_impl_.time_taken_ns_) { ::uint64_t{0u} }

  };
}

TraceStats_FilterStats::~TraceStats_FilterStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats.FilterStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceStats_FilterStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceStats_FilterStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceStats_FilterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats.FilterStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.input_packets_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.time_taken_ns_) -
        reinterpret_cast<char*>(&_impl_.input_packets_)) + sizeof(_impl_.time_taken_ns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceStats_FilterStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 input_packets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_input_packets(&has_bits);
          _impl_.input_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 input_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_input_bytes(&has_bits);
          _impl_.input_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 output_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_output_bytes(&has_bits);
          _impl_.output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_errors(&has_bits);
          _impl_.errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 time_taken_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_time_taken_ns(&has_bits);
          _impl_.time_taken_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceStats_FilterStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceStats.FilterStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 input_packets = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_input_packets(), target);
  }

  // optional uint64 input_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_input_bytes(), target);
  }

  // optional uint64 output_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_output_bytes(), target);
  }

  // optional uint64 errors = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_errors(), target);
  }

  // optional uint64 time_taken_ns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_time_taken_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceStats.FilterStats)
  return target;
}

::size_t TraceStats_FilterStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats.FilterStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 input_packets = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_input_packets());
    }

    // optional uint64 input_bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_input_bytes());
    }

    // optional uint64 output_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_output_bytes());
    }

    // optional uint64 errors = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_errors());
    }

    // optional uint64 time_taken_ns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_time_taken_ns());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceStats_FilterStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceStats_FilterStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceStats_FilterStats::GetClassData() const { return &_class_data_; }


void TraceStats_FilterStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceStats_FilterStats*>(&to_msg);
  auto& from = static_cast<const TraceStats_FilterStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats.FilterStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.input_packets_ = from._impl_.input_packets_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.input_bytes_ = from._impl_.input_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.output_bytes_ = from._impl_.output_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.errors_ = from._impl_.errors_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.time_taken_ns_ = from._impl_.time_taken_ns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceStats_FilterStats::CopyFrom(const TraceStats_FilterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats.FilterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats_FilterStats::IsInitialized() const {
  return true;
}

void TraceStats_FilterStats::InternalSwap(TraceStats_FilterStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceStats_FilterStats, _impl_.time_taken_ns_)
      + sizeof(TraceStats_FilterStats::_impl_.time_taken_ns_)
      - PROTOBUF_FIELD_OFFSET(TraceStats_FilterStats, _impl_.input_packets_)>(
          reinterpret_cast<char*>(&_impl_.input_packets_),
          reinterpret_cast<char*>(&other->_impl_.input_packets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceStats_FilterStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[2]);
}
// ===================================================================

class TraceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TraceStats, _impl_._has_bits_);
  static void set_has_producers_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_producers_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_sources_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_sources_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tracing_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_buffers(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chunks_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_patches_discarded(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_invalid_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::TraceStats_FilterStats& filter_stats(const TraceStats* msg);
  static void set_has_filter_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flushes_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_flushes_succeeded(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_flushes_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_final_flush_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::perfetto::protos::TraceStats_FilterStats&
TraceStats::_Internal::filter_stats(const TraceStats* msg) {
  return *msg->_impl_.filter_stats_;
}
TraceStats::TraceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TraceStats)
}
TraceStats::TraceStats(const TraceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffer_stats_){from._impl_.buffer_stats_}
    , decltype(_impl_.chunk_payload_histogram_def_) { from._impl_.chunk_payload_histogram_def_ }

    , decltype(_impl_.writer_stats_){from._impl_.writer_stats_}
    , decltype(_impl_.filter_stats_){nullptr}
    , decltype(_impl_.producers_seen_) {}

    , decltype(_impl_.producers_connected_) {}

    , decltype(_impl_.data_sources_registered_) {}

    , decltype(_impl_.data_sources_seen_) {}

    , decltype(_impl_.tracing_sessions_) {}

    , decltype(_impl_.total_buffers_) {}

    , decltype(_impl_.chunks_discarded_) {}

    , decltype(_impl_.patches_discarded_) {}

    , decltype(_impl_.invalid_packets_) {}

    , decltype(_impl_.flushes_requested_) {}

    , decltype(_impl_.flushes_succeeded_) {}

    , decltype(_impl_.flushes_failed_) {}

    , decltype(_impl_.final_flush_outcome_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.filter_stats_ = new ::perfetto::protos::TraceStats_FilterStats(*from._impl_.filter_stats_);
  }
  ::memcpy(&_impl_.producers_seen_, &from._impl_.producers_seen_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.final_flush_outcome_) -
    reinterpret_cast<char*>(&_impl_.producers_seen_)) + sizeof(_impl_.final_flush_outcome_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TraceStats)
}

inline void TraceStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffer_stats_){arena}
    , decltype(_impl_.chunk_payload_histogram_def_) { arena }

    , decltype(_impl_.writer_stats_){arena}
    , decltype(_impl_.filter_stats_){nullptr}
    , decltype(_impl_.producers_seen_) { ::uint64_t{0u} }

    , decltype(_impl_.producers_connected_) { 0u }

    , decltype(_impl_.data_sources_registered_) { 0u }

    , decltype(_impl_.data_sources_seen_) { ::uint64_t{0u} }

    , decltype(_impl_.tracing_sessions_) { 0u }

    , decltype(_impl_.total_buffers_) { 0u }

    , decltype(_impl_.chunks_discarded_) { ::uint64_t{0u} }

    , decltype(_impl_.patches_discarded_) { ::uint64_t{0u} }

    , decltype(_impl_.invalid_packets_) { ::uint64_t{0u} }

    , decltype(_impl_.flushes_requested_) { ::uint64_t{0u} }

    , decltype(_impl_.flushes_succeeded_) { ::uint64_t{0u} }

    , decltype(_impl_.flushes_failed_) { ::uint64_t{0u} }

    , decltype(_impl_.final_flush_outcome_) { 0 }

  };
}

TraceStats::~TraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TraceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buffer_stats()->~RepeatedPtrField();
  _impl_.chunk_payload_histogram_def_.~RepeatedField();
  _internal_mutable_writer_stats()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.filter_stats_;
}

void TraceStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TraceStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buffer_stats()->Clear();
  _internal_mutable_chunk_payload_histogram_def()->Clear();
  _internal_mutable_writer_stats()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.filter_stats_ != nullptr);
    _impl_.filter_stats_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.producers_seen_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.chunks_discarded_) -
        reinterpret_cast<char*>(&_impl_.producers_seen_)) + sizeof(_impl_.chunks_discarded_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.patches_discarded_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.final_flush_outcome_) -
        reinterpret_cast<char*>(&_impl_.patches_discarded_)) + sizeof(_impl_.final_flush_outcome_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffer_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 producers_connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_producers_connected(&has_bits);
          _impl_.producers_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 producers_seen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_producers_seen(&has_bits);
          _impl_.producers_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 data_sources_registered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_data_sources_registered(&has_bits);
          _impl_.data_sources_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 data_sources_seen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_data_sources_seen(&has_bits);
          _impl_.data_sources_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tracing_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_tracing_sessions(&has_bits);
          _impl_.tracing_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 total_buffers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_total_buffers(&has_bits);
          _impl_.total_buffers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 chunks_discarded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_chunks_discarded(&has_bits);
          _impl_.chunks_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 patches_discarded = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_patches_discarded(&has_bits);
          _impl_.patches_discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 invalid_packets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_invalid_packets(&has_bits);
          _impl_.invalid_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceStats.FilterStats filter_stats = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 flushes_requested = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_flushes_requested(&has_bits);
          _impl_.flushes_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 flushes_succeeded = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_flushes_succeeded(&has_bits);
          _impl_.flushes_succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 flushes_failed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_flushes_failed(&has_bits);
          _impl_.flushes_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TraceStats.FinalFlushOutcome final_flush_outcome = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TraceStats_FinalFlushOutcome_IsValid(static_cast<int>(val)))) {
            _internal_set_final_flush_outcome(static_cast<::perfetto::protos::TraceStats_FinalFlushOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 chunk_payload_histogram_def = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_chunk_payload_histogram_def(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunk_payload_histogram_def(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.TraceStats.WriterStats writer_stats = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_writer_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TraceStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TraceStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffer_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffer_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 producers_connected = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_producers_connected(), target);
  }

  // optional uint64 producers_seen = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_producers_seen(), target);
  }

  // optional uint32 data_sources_registered = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_data_sources_registered(), target);
  }

  // optional uint64 data_sources_seen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_data_sources_seen(), target);
  }

  // optional uint32 tracing_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_tracing_sessions(), target);
  }

  // optional uint32 total_buffers = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_total_buffers(), target);
  }

  // optional uint64 chunks_discarded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_chunks_discarded(), target);
  }

  // optional uint64 patches_discarded = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_patches_discarded(), target);
  }

  // optional uint64 invalid_packets = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_invalid_packets(), target);
  }

  // optional .perfetto.protos.TraceStats.FilterStats filter_stats = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::filter_stats(this),
        _Internal::filter_stats(this).GetCachedSize(), target, stream);
  }

  // optional uint64 flushes_requested = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        12, this->_internal_flushes_requested(), target);
  }

  // optional uint64 flushes_succeeded = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_flushes_succeeded(), target);
  }

  // optional uint64 flushes_failed = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        14, this->_internal_flushes_failed(), target);
  }

  // optional .perfetto.protos.TraceStats.FinalFlushOutcome final_flush_outcome = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this->_internal_final_flush_outcome(), target);
  }

  // repeated int64 chunk_payload_histogram_def = 17;
  for (int i = 0, n = this->_internal_chunk_payload_histogram_def_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        17, this->_internal_chunk_payload_histogram_def(i), target);
  }

  // repeated .perfetto.protos.TraceStats.WriterStats writer_stats = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_writer_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_writer_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TraceStats)
  return target;
}

::size_t TraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TraceStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TraceStats.BufferStats buffer_stats = 1;
  total_size += 1UL * this->_internal_buffer_stats_size();
  for (const auto& msg : this->_internal_buffer_stats()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 chunk_payload_histogram_def = 17;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_chunk_payload_histogram_def())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_chunk_payload_histogram_def_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .perfetto.protos.TraceStats.WriterStats writer_stats = 18;
  total_size += 2UL * this->_internal_writer_stats_size();
  for (const auto& msg : this->_internal_writer_stats()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.TraceStats.FilterStats filter_stats = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_stats_);
    }

    // optional uint64 producers_seen = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_producers_seen());
    }

    // optional uint32 producers_connected = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_producers_connected());
    }

    // optional uint32 data_sources_registered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_sources_registered());
    }

    // optional uint64 data_sources_seen = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_data_sources_seen());
    }

    // optional uint32 tracing_sessions = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tracing_sessions());
    }

    // optional uint32 total_buffers = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_total_buffers());
    }

    // optional uint64 chunks_discarded = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_chunks_discarded());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 patches_discarded = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_patches_discarded());
    }

    // optional uint64 invalid_packets = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_invalid_packets());
    }

    // optional uint64 flushes_requested = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_flushes_requested());
    }

    // optional uint64 flushes_succeeded = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_flushes_succeeded());
    }

    // optional uint64 flushes_failed = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_flushes_failed());
    }

    // optional .perfetto.protos.TraceStats.FinalFlushOutcome final_flush_outcome = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_final_flush_outcome());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceStats::GetClassData() const { return &_class_data_; }


void TraceStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceStats*>(&to_msg);
  auto& from = static_cast<const TraceStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TraceStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buffer_stats()->MergeFrom(from._internal_buffer_stats());
  _this->_impl_.chunk_payload_histogram_def_.MergeFrom(from._impl_.chunk_payload_histogram_def_);
  _this->_internal_mutable_writer_stats()->MergeFrom(from._internal_writer_stats());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_filter_stats()->::perfetto::protos::TraceStats_FilterStats::MergeFrom(
          from._internal_filter_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.producers_seen_ = from._impl_.producers_seen_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.producers_connected_ = from._impl_.producers_connected_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_sources_registered_ = from._impl_.data_sources_registered_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.data_sources_seen_ = from._impl_.data_sources_seen_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tracing_sessions_ = from._impl_.tracing_sessions_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.total_buffers_ = from._impl_.total_buffers_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.chunks_discarded_ = from._impl_.chunks_discarded_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.patches_discarded_ = from._impl_.patches_discarded_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.invalid_packets_ = from._impl_.invalid_packets_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.flushes_requested_ = from._impl_.flushes_requested_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.flushes_succeeded_ = from._impl_.flushes_succeeded_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.flushes_failed_ = from._impl_.flushes_failed_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.final_flush_outcome_ = from._impl_.final_flush_outcome_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceStats::CopyFrom(const TraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceStats::IsInitialized() const {
  return true;
}

void TraceStats::InternalSwap(TraceStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_buffer_stats()->InternalSwap(other->_internal_mutable_buffer_stats());
  _impl_.chunk_payload_histogram_def_.InternalSwap(&other->_impl_.chunk_payload_histogram_def_);
  _internal_mutable_writer_stats()->InternalSwap(other->_internal_mutable_writer_stats());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceStats, _impl_.final_flush_outcome_)
      + sizeof(TraceStats::_impl_.final_flush_outcome_)
      - PROTOBUF_FIELD_OFFSET(TraceStats, _impl_.filter_stats_)>(
          reinterpret_cast<char*>(&_impl_.filter_stats_),
          reinterpret_cast<char*>(&other->_impl_.filter_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2ftrace_5fstats_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceStats_BufferStats*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats_BufferStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceStats_BufferStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceStats_WriterStats*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats_WriterStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceStats_WriterStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceStats_FilterStats*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats_FilterStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceStats_FilterStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TraceStats*
Arena::CreateMaybeMessage< ::perfetto::protos::TraceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TraceStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
