// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/perf_events.proto

#include "protos/perfetto/common/perf_events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR PerfEvents_Timebase::PerfEvents_Timebase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_clock_)*/ 0

  , /*decltype(_impl_.interval_)*/{}
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfEvents_TimebaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEvents_TimebaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEvents_TimebaseDefaultTypeInternal() {}
  union {
    PerfEvents_Timebase _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEvents_TimebaseDefaultTypeInternal _PerfEvents_Timebase_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfEvents_Tracepoint::PerfEvents_Tracepoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.filter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct PerfEvents_TracepointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEvents_TracepointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEvents_TracepointDefaultTypeInternal() {}
  union {
    PerfEvents_Tracepoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEvents_TracepointDefaultTypeInternal _PerfEvents_Tracepoint_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfEvents_RawEvent::PerfEvents_RawEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.config_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.config1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.config2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.type_)*/ 0u
} {}
struct PerfEvents_RawEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEvents_RawEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEvents_RawEventDefaultTypeInternal() {}
  union {
    PerfEvents_RawEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEvents_RawEventDefaultTypeInternal _PerfEvents_RawEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfEvents::PerfEvents(
    ::_pbi::ConstantInitialized) {}
struct PerfEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfEventsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfEventsDefaultTypeInternal() {}
  union {
    PerfEvents _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfEventsDefaultTypeInternal _PerfEvents_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_.timestamp_clock_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_.interval_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_.event_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Tracepoint, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Tracepoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Tracepoint, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Tracepoint, _impl_.filter_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_RawEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_RawEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_RawEvent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_RawEvent, _impl_.config_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_RawEvent, _impl_.config1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_RawEvent, _impl_.config2_),
    3,
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::perfetto::protos::PerfEvents_Timebase)},
        { 24, 34, -1, sizeof(::perfetto::protos::PerfEvents_Tracepoint)},
        { 36, 48, -1, sizeof(::perfetto::protos::PerfEvents_RawEvent)},
        { 52, -1, -1, sizeof(::perfetto::protos::PerfEvents)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_PerfEvents_Timebase_default_instance_._instance,
    &::perfetto::protos::_PerfEvents_Tracepoint_default_instance_._instance,
    &::perfetto::protos::_PerfEvents_RawEvent_default_instance_._instance,
    &::perfetto::protos::_PerfEvents_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(protos/perfetto/common/perf_events.pro"
    "to\022\017perfetto.protos\"\307\010\n\nPerfEvents\032\305\002\n\010T"
    "imebase\022\023\n\tfrequency\030\002 \001(\004H\000\022\020\n\006period\030\001"
    " \001(\004H\000\0226\n\007counter\030\004 \001(\0162#.perfetto.proto"
    "s.PerfEvents.CounterH\001\022<\n\ntracepoint\030\003 \001"
    "(\0132&.perfetto.protos.PerfEvents.Tracepoi"
    "ntH\001\0229\n\traw_event\030\005 \001(\0132$.perfetto.proto"
    "s.PerfEvents.RawEventH\001\022>\n\017timestamp_clo"
    "ck\030\013 \001(\0162%.perfetto.protos.PerfEvents.Pe"
    "rfClock\022\014\n\004name\030\n \001(\tB\n\n\010intervalB\007\n\005eve"
    "nt\032*\n\nTracepoint\022\014\n\004name\030\001 \001(\t\022\016\n\006filter"
    "\030\002 \001(\t\032J\n\010RawEvent\022\014\n\004type\030\001 \001(\r\022\016\n\006conf"
    "ig\030\002 \001(\004\022\017\n\007config1\030\003 \001(\004\022\017\n\007config2\030\004 \001"
    "(\004\"\350\003\n\007Counter\022\023\n\017UNKNOWN_COUNTER\020\000\022\020\n\014S"
    "W_CPU_CLOCK\020\001\022\022\n\016SW_PAGE_FAULTS\020\002\022\021\n\rSW_"
    "TASK_CLOCK\020\003\022\027\n\023SW_CONTEXT_SWITCHES\020\004\022\025\n"
    "\021SW_CPU_MIGRATIONS\020\005\022\026\n\022SW_PAGE_FAULTS_M"
    "IN\020\006\022\026\n\022SW_PAGE_FAULTS_MAJ\020\007\022\027\n\023SW_ALIGN"
    "MENT_FAULTS\020\010\022\027\n\023SW_EMULATION_FAULTS\020\t\022\014"
    "\n\010SW_DUMMY\020\024\022\021\n\rHW_CPU_CYCLES\020\n\022\023\n\017HW_IN"
    "STRUCTIONS\020\013\022\027\n\023HW_CACHE_REFERENCES\020\014\022\023\n"
    "\017HW_CACHE_MISSES\020\r\022\032\n\026HW_BRANCH_INSTRUCT"
    "IONS\020\016\022\024\n\020HW_BRANCH_MISSES\020\017\022\021\n\rHW_BUS_C"
    "YCLES\020\020\022\036\n\032HW_STALLED_CYCLES_FRONTEND\020\021\022"
    "\035\n\031HW_STALLED_CYCLES_BACKEND\020\022\022\025\n\021HW_REF"
    "_CPU_CYCLES\020\023\"\215\001\n\tPerfClock\022\026\n\022UNKNOWN_P"
    "ERF_CLOCK\020\000\022\027\n\023PERF_CLOCK_REALTIME\020\001\022\030\n\024"
    "PERF_CLOCK_MONOTONIC\020\002\022\034\n\030PERF_CLOCK_MON"
    "OTONIC_RAW\020\003\022\027\n\023PERF_CLOCK_BOOTTIME\020\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto = {
    false,
    false,
    1157,
    descriptor_table_protodef_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto,
    "protos/perfetto/common/perf_events.proto",
    &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto(&descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerfEvents_Counter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[0];
}
bool PerfEvents_Counter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PerfEvents_Counter PerfEvents::UNKNOWN_COUNTER;
constexpr PerfEvents_Counter PerfEvents::SW_CPU_CLOCK;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS;
constexpr PerfEvents_Counter PerfEvents::SW_TASK_CLOCK;
constexpr PerfEvents_Counter PerfEvents::SW_CONTEXT_SWITCHES;
constexpr PerfEvents_Counter PerfEvents::SW_CPU_MIGRATIONS;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS_MIN;
constexpr PerfEvents_Counter PerfEvents::SW_PAGE_FAULTS_MAJ;
constexpr PerfEvents_Counter PerfEvents::SW_ALIGNMENT_FAULTS;
constexpr PerfEvents_Counter PerfEvents::SW_EMULATION_FAULTS;
constexpr PerfEvents_Counter PerfEvents::SW_DUMMY;
constexpr PerfEvents_Counter PerfEvents::HW_CPU_CYCLES;
constexpr PerfEvents_Counter PerfEvents::HW_INSTRUCTIONS;
constexpr PerfEvents_Counter PerfEvents::HW_CACHE_REFERENCES;
constexpr PerfEvents_Counter PerfEvents::HW_CACHE_MISSES;
constexpr PerfEvents_Counter PerfEvents::HW_BRANCH_INSTRUCTIONS;
constexpr PerfEvents_Counter PerfEvents::HW_BRANCH_MISSES;
constexpr PerfEvents_Counter PerfEvents::HW_BUS_CYCLES;
constexpr PerfEvents_Counter PerfEvents::HW_STALLED_CYCLES_FRONTEND;
constexpr PerfEvents_Counter PerfEvents::HW_STALLED_CYCLES_BACKEND;
constexpr PerfEvents_Counter PerfEvents::HW_REF_CPU_CYCLES;
constexpr PerfEvents_Counter PerfEvents::Counter_MIN;
constexpr PerfEvents_Counter PerfEvents::Counter_MAX;
constexpr int PerfEvents::Counter_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerfEvents_PerfClock_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[1];
}
bool PerfEvents_PerfClock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PerfEvents_PerfClock PerfEvents::UNKNOWN_PERF_CLOCK;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_REALTIME;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_MONOTONIC;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_MONOTONIC_RAW;
constexpr PerfEvents_PerfClock PerfEvents::PERF_CLOCK_BOOTTIME;
constexpr PerfEvents_PerfClock PerfEvents::PerfClock_MIN;
constexpr PerfEvents_PerfClock PerfEvents::PerfClock_MAX;
constexpr int PerfEvents::PerfClock_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PerfEvents_Timebase::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_Timebase>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfEvents_Timebase, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfEvents_Timebase, _impl_._oneof_case_);
  static const ::perfetto::protos::PerfEvents_Tracepoint& tracepoint(const PerfEvents_Timebase* msg);
  static const ::perfetto::protos::PerfEvents_RawEvent& raw_event(const PerfEvents_Timebase* msg);
  static void set_has_timestamp_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfEvents_Tracepoint&
PerfEvents_Timebase::_Internal::tracepoint(const PerfEvents_Timebase* msg) {
  return *msg->_impl_.event_.tracepoint_;
}
const ::perfetto::protos::PerfEvents_RawEvent&
PerfEvents_Timebase::_Internal::raw_event(const PerfEvents_Timebase* msg) {
  return *msg->_impl_.event_.raw_event_;
}
void PerfEvents_Timebase::set_allocated_tracepoint(::perfetto::protos::PerfEvents_Tracepoint* tracepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (tracepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tracepoint);
    if (message_arena != submessage_arena) {
      tracepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracepoint, submessage_arena);
    }
    set_has_tracepoint();
    _impl_.event_.tracepoint_ = tracepoint;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Timebase.tracepoint)
}
void PerfEvents_Timebase::set_allocated_raw_event(::perfetto::protos::PerfEvents_RawEvent* raw_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (raw_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raw_event);
    if (message_arena != submessage_arena) {
      raw_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    set_has_raw_event();
    _impl_.event_.raw_event_ = raw_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfEvents.Timebase.raw_event)
}
PerfEvents_Timebase::PerfEvents_Timebase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents.Timebase)
}
PerfEvents_Timebase::PerfEvents_Timebase(const PerfEvents_Timebase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfEvents_Timebase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.timestamp_clock_) {}

    , decltype(_impl_.interval_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_clock_ = from._impl_.timestamp_clock_;
  clear_has_interval();
  switch (from.interval_case()) {
    case kFrequency: {
      _this->_internal_set_frequency(from._internal_frequency());
      break;
    }
    case kPeriod: {
      _this->_internal_set_period(from._internal_period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  clear_has_event();
  switch (from.event_case()) {
    case kCounter: {
      _this->_internal_set_counter(from._internal_counter());
      break;
    }
    case kTracepoint: {
      _this->_internal_mutable_tracepoint()->::perfetto::protos::PerfEvents_Tracepoint::MergeFrom(
          from._internal_tracepoint());
      break;
    }
    case kRawEvent: {
      _this->_internal_mutable_raw_event()->::perfetto::protos::PerfEvents_RawEvent::MergeFrom(
          from._internal_raw_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.Timebase)
}

inline void PerfEvents_Timebase::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.timestamp_clock_) { 0 }

    , decltype(_impl_.interval_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_interval();
  clear_has_event();
}

PerfEvents_Timebase::~PerfEvents_Timebase() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.Timebase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents_Timebase::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_interval()) {
    clear_interval();
  }
  if (has_event()) {
    clear_event();
  }
}

void PerfEvents_Timebase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents_Timebase::clear_interval() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEvents.Timebase)
  switch (interval_case()) {
    case kFrequency: {
      // No need to clear
      break;
    }
    case kPeriod: {
      // No need to clear
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = INTERVAL_NOT_SET;
}

void PerfEvents_Timebase::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfEvents.Timebase)
  switch (event_case()) {
    case kCounter: {
      // No need to clear
      break;
    }
    case kTracepoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.tracepoint_;
      }
      break;
    }
    case kRawEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.raw_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = EVENT_NOT_SET;
}


void PerfEvents_Timebase::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.Timebase)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.timestamp_clock_ = 0;
  clear_interval();
  clear_event();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfEvents_Timebase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_period(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracepoint(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PerfEvents.Counter counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEvents_Counter_IsValid(static_cast<int>(val)))) {
            _internal_set_counter(static_cast<::perfetto::protos::PerfEvents_Counter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PerfEvents.RawEvent raw_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfEvents.Timebase.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEvents_PerfClock_IsValid(static_cast<int>(val)))) {
            _internal_set_timestamp_clock(static_cast<::perfetto::protos::PerfEvents_PerfClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfEvents_Timebase::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents.Timebase)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (interval_case()) {
    case kPeriod: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          1, this->_internal_period(), target);
      break;
    }
    case kFrequency: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this->_internal_frequency(), target);
      break;
    }
    default: ;
  }
  switch (event_case()) {
    case kTracepoint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::tracepoint(this),
          _Internal::tracepoint(this).GetCachedSize(), target, stream);
      break;
    }
    case kCounter: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this->_internal_counter(), target);
      break;
    }
    case kRawEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::raw_event(this),
          _Internal::raw_event(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PerfEvents.Timebase.name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_timestamp_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents.Timebase)
  return target;
}

::size_t PerfEvents_Timebase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.Timebase)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .perfetto.protos.PerfEvents.PerfClock timestamp_clock = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_timestamp_clock());
    }

  }
  switch (interval_case()) {
    // uint64 frequency = 2;
    case kFrequency: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_frequency());
      break;
    }
    // uint64 period = 1;
    case kPeriod: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (event_case()) {
    // .perfetto.protos.PerfEvents.Counter counter = 4;
    case kCounter: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_counter());
      break;
    }
    // .perfetto.protos.PerfEvents.Tracepoint tracepoint = 3;
    case kTracepoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.tracepoint_);
      break;
    }
    // .perfetto.protos.PerfEvents.RawEvent raw_event = 5;
    case kRawEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.raw_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfEvents_Timebase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfEvents_Timebase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfEvents_Timebase::GetClassData() const { return &_class_data_; }


void PerfEvents_Timebase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfEvents_Timebase*>(&to_msg);
  auto& from = static_cast<const PerfEvents_Timebase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.Timebase)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_clock_ = from._impl_.timestamp_clock_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.interval_case()) {
    case kFrequency: {
      _this->_internal_set_frequency(from._internal_frequency());
      break;
    }
    case kPeriod: {
      _this->_internal_set_period(from._internal_period());
      break;
    }
    case INTERVAL_NOT_SET: {
      break;
    }
  }
  switch (from.event_case()) {
    case kCounter: {
      _this->_internal_set_counter(from._internal_counter());
      break;
    }
    case kTracepoint: {
      _this->_internal_mutable_tracepoint()->::perfetto::protos::PerfEvents_Tracepoint::MergeFrom(
          from._internal_tracepoint());
      break;
    }
    case kRawEvent: {
      _this->_internal_mutable_raw_event()->::perfetto::protos::PerfEvents_RawEvent::MergeFrom(
          from._internal_raw_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfEvents_Timebase::CopyFrom(const PerfEvents_Timebase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.Timebase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_Timebase::IsInitialized() const {
  return true;
}

void PerfEvents_Timebase::InternalSwap(PerfEvents_Timebase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.timestamp_clock_, other->_impl_.timestamp_clock_);
  swap(_impl_.interval_, other->_impl_.interval_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfEvents_Timebase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[0]);
}
// ===================================================================

class PerfEvents_Tracepoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_Tracepoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfEvents_Tracepoint, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PerfEvents_Tracepoint::PerfEvents_Tracepoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents.Tracepoint)
}
PerfEvents_Tracepoint::PerfEvents_Tracepoint(const PerfEvents_Tracepoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfEvents_Tracepoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.filter_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.filter_.Set(from._internal_filter(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.Tracepoint)
}

inline void PerfEvents_Tracepoint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.filter_) {}

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerfEvents_Tracepoint::~PerfEvents_Tracepoint() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.Tracepoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents_Tracepoint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.filter_.Destroy();
}

void PerfEvents_Tracepoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents_Tracepoint::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.Tracepoint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.filter_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfEvents_Tracepoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfEvents.Tracepoint.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfEvents.Tracepoint.filter");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfEvents_Tracepoint::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents.Tracepoint)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PerfEvents.Tracepoint.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string filter = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_filter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PerfEvents.Tracepoint.filter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents.Tracepoint)
  return target;
}

::size_t PerfEvents_Tracepoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.Tracepoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string filter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_filter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfEvents_Tracepoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfEvents_Tracepoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfEvents_Tracepoint::GetClassData() const { return &_class_data_; }


void PerfEvents_Tracepoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfEvents_Tracepoint*>(&to_msg);
  auto& from = static_cast<const PerfEvents_Tracepoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.Tracepoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_filter(from._internal_filter());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfEvents_Tracepoint::CopyFrom(const PerfEvents_Tracepoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.Tracepoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_Tracepoint::IsInitialized() const {
  return true;
}

void PerfEvents_Tracepoint::InternalSwap(PerfEvents_Tracepoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filter_, lhs_arena,
                                       &other->_impl_.filter_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfEvents_Tracepoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[1]);
}
// ===================================================================

class PerfEvents_RawEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEvents_RawEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfEvents_RawEvent, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_config2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PerfEvents_RawEvent::PerfEvents_RawEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents.RawEvent)
}
PerfEvents_RawEvent::PerfEvents_RawEvent(const PerfEvents_RawEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents.RawEvent)
}

inline void PerfEvents_RawEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_) { ::uint64_t{0u} }

    , decltype(_impl_.config1_) { ::uint64_t{0u} }

    , decltype(_impl_.config2_) { ::uint64_t{0u} }

    , decltype(_impl_.type_) { 0u }

  };
}

PerfEvents_RawEvent::~PerfEvents_RawEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEvents.RawEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfEvents_RawEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerfEvents_RawEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfEvents_RawEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEvents.RawEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.config_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.config_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfEvents_RawEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_config(&has_bits);
          _impl_.config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 config1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_config1(&has_bits);
          _impl_.config1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 config2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_config2(&has_bits);
          _impl_.config2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfEvents_RawEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEvents.RawEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type(), target);
  }

  // optional uint64 config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_config(), target);
  }

  // optional uint64 config1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_config1(), target);
  }

  // optional uint64 config2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_config2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEvents.RawEvent)
  return target;
}

::size_t PerfEvents_RawEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEvents.RawEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_config());
    }

    // optional uint64 config1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_config1());
    }

    // optional uint64 config2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_config2());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfEvents_RawEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfEvents_RawEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfEvents_RawEvent::GetClassData() const { return &_class_data_; }


void PerfEvents_RawEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfEvents_RawEvent*>(&to_msg);
  auto& from = static_cast<const PerfEvents_RawEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEvents.RawEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.config_ = from._impl_.config_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.config1_ = from._impl_.config1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.config2_ = from._impl_.config2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfEvents_RawEvent::CopyFrom(const PerfEvents_RawEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEvents.RawEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEvents_RawEvent::IsInitialized() const {
  return true;
}

void PerfEvents_RawEvent::InternalSwap(PerfEvents_RawEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEvents_RawEvent, _impl_.type_)
      + sizeof(PerfEvents_RawEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PerfEvents_RawEvent, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfEvents_RawEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[2]);
}
// ===================================================================

class PerfEvents::_Internal {
 public:
};

PerfEvents::PerfEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEvents)
}
PerfEvents::PerfEvents(const PerfEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PerfEvents* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEvents)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfEvents::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PerfEvents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_Timebase*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_Timebase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents_Timebase >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_Tracepoint*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_Tracepoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents_Tracepoint >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents_RawEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents_RawEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents_RawEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEvents*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEvents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
