// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/sys_stats_counters.proto

#include "protos/perfetto/common/sys_stats_counters.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
}  // namespace protos
}  // namespace perfetto
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;
const char descriptor_table_protodef_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/protos/perfetto/common/sys_stats_count"
    "ers.proto\022\017perfetto.protos*\277\006\n\017MeminfoCo"
    "unters\022\027\n\023MEMINFO_UNSPECIFIED\020\000\022\025\n\021MEMIN"
    "FO_MEM_TOTAL\020\001\022\024\n\020MEMINFO_MEM_FREE\020\002\022\031\n\025"
    "MEMINFO_MEM_AVAILABLE\020\003\022\023\n\017MEMINFO_BUFFE"
    "RS\020\004\022\022\n\016MEMINFO_CACHED\020\005\022\027\n\023MEMINFO_SWAP"
    "_CACHED\020\006\022\022\n\016MEMINFO_ACTIVE\020\007\022\024\n\020MEMINFO"
    "_INACTIVE\020\010\022\027\n\023MEMINFO_ACTIVE_ANON\020\t\022\031\n\025"
    "MEMINFO_INACTIVE_ANON\020\n\022\027\n\023MEMINFO_ACTIV"
    "E_FILE\020\013\022\031\n\025MEMINFO_INACTIVE_FILE\020\014\022\027\n\023M"
    "EMINFO_UNEVICTABLE\020\r\022\023\n\017MEMINFO_MLOCKED\020"
    "\016\022\026\n\022MEMINFO_SWAP_TOTAL\020\017\022\025\n\021MEMINFO_SWA"
    "P_FREE\020\020\022\021\n\rMEMINFO_DIRTY\020\021\022\025\n\021MEMINFO_W"
    "RITEBACK\020\022\022\026\n\022MEMINFO_ANON_PAGES\020\023\022\022\n\016ME"
    "MINFO_MAPPED\020\024\022\021\n\rMEMINFO_SHMEM\020\025\022\020\n\014MEM"
    "INFO_SLAB\020\026\022\034\n\030MEMINFO_SLAB_RECLAIMABLE\020"
    "\027\022\036\n\032MEMINFO_SLAB_UNRECLAIMABLE\020\030\022\030\n\024MEM"
    "INFO_KERNEL_STACK\020\031\022\027\n\023MEMINFO_PAGE_TABL"
    "ES\020\032\022\030\n\024MEMINFO_COMMIT_LIMIT\020\033\022\027\n\023MEMINF"
    "O_COMMITED_AS\020\034\022\031\n\025MEMINFO_VMALLOC_TOTAL"
    "\020\035\022\030\n\024MEMINFO_VMALLOC_USED\020\036\022\031\n\025MEMINFO_"
    "VMALLOC_CHUNK\020\037\022\025\n\021MEMINFO_CMA_TOTAL\020 \022\024"
    "\n\020MEMINFO_CMA_FREE\020!*\233\035\n\016VmstatCounters\022"
    "\026\n\022VMSTAT_UNSPECIFIED\020\000\022\030\n\024VMSTAT_NR_FRE"
    "E_PAGES\020\001\022\031\n\025VMSTAT_NR_ALLOC_BATCH\020\002\022\033\n\027"
    "VMSTAT_NR_INACTIVE_ANON\020\003\022\031\n\025VMSTAT_NR_A"
    "CTIVE_ANON\020\004\022\033\n\027VMSTAT_NR_INACTIVE_FILE\020"
    "\005\022\031\n\025VMSTAT_NR_ACTIVE_FILE\020\006\022\031\n\025VMSTAT_N"
    "R_UNEVICTABLE\020\007\022\023\n\017VMSTAT_NR_MLOCK\020\010\022\030\n\024"
    "VMSTAT_NR_ANON_PAGES\020\t\022\024\n\020VMSTAT_NR_MAPP"
    "ED\020\n\022\030\n\024VMSTAT_NR_FILE_PAGES\020\013\022\023\n\017VMSTAT"
    "_NR_DIRTY\020\014\022\027\n\023VMSTAT_NR_WRITEBACK\020\r\022\036\n\032"
    "VMSTAT_NR_SLAB_RECLAIMABLE\020\016\022 \n\034VMSTAT_N"
    "R_SLAB_UNRECLAIMABLE\020\017\022\036\n\032VMSTAT_NR_PAGE"
    "_TABLE_PAGES\020\020\022\032\n\026VMSTAT_NR_KERNEL_STACK"
    "\020\021\022\026\n\022VMSTAT_NR_OVERHEAD\020\022\022\026\n\022VMSTAT_NR_"
    "UNSTABLE\020\023\022\024\n\020VMSTAT_NR_BOUNCE\020\024\022\032\n\026VMST"
    "AT_NR_VMSCAN_WRITE\020\025\022&\n\"VMSTAT_NR_VMSCAN"
    "_IMMEDIATE_RECLAIM\020\026\022\034\n\030VMSTAT_NR_WRITEB"
    "ACK_TEMP\020\027\022\033\n\027VMSTAT_NR_ISOLATED_ANON\020\030\022"
    "\033\n\027VMSTAT_NR_ISOLATED_FILE\020\031\022\023\n\017VMSTAT_N"
    "R_SHMEM\020\032\022\025\n\021VMSTAT_NR_DIRTIED\020\033\022\025\n\021VMST"
    "AT_NR_WRITTEN\020\034\022\033\n\027VMSTAT_NR_PAGES_SCANN"
    "ED\020\035\022\035\n\031VMSTAT_WORKINGSET_REFAULT\020\036\022\036\n\032V"
    "MSTAT_WORKINGSET_ACTIVATE\020\037\022!\n\035VMSTAT_WO"
    "RKINGSET_NODERECLAIM\020 \022(\n$VMSTAT_NR_ANON"
    "_TRANSPARENT_HUGEPAGES\020!\022\026\n\022VMSTAT_NR_FR"
    "EE_CMA\020\"\022\027\n\023VMSTAT_NR_SWAPCACHE\020#\022\035\n\031VMS"
    "TAT_NR_DIRTY_THRESHOLD\020$\022(\n$VMSTAT_NR_DI"
    "RTY_BACKGROUND_THRESHOLD\020%\022\021\n\rVMSTAT_PGP"
    "GIN\020&\022\022\n\016VMSTAT_PGPGOUT\020\'\022\027\n\023VMSTAT_PGPG"
    "OUTCLEAN\020(\022\021\n\rVMSTAT_PSWPIN\020)\022\022\n\016VMSTAT_"
    "PSWPOUT\020*\022\026\n\022VMSTAT_PGALLOC_DMA\020+\022\031\n\025VMS"
    "TAT_PGALLOC_NORMAL\020,\022\032\n\026VMSTAT_PGALLOC_M"
    "OVABLE\020-\022\021\n\rVMSTAT_PGFREE\020.\022\025\n\021VMSTAT_PG"
    "ACTIVATE\020/\022\027\n\023VMSTAT_PGDEACTIVATE\0200\022\022\n\016V"
    "MSTAT_PGFAULT\0201\022\025\n\021VMSTAT_PGMAJFAULT\0202\022\027"
    "\n\023VMSTAT_PGREFILL_DMA\0203\022\032\n\026VMSTAT_PGREFI"
    "LL_NORMAL\0204\022\033\n\027VMSTAT_PGREFILL_MOVABLE\0205"
    "\022\035\n\031VMSTAT_PGSTEAL_KSWAPD_DMA\0206\022 \n\034VMSTA"
    "T_PGSTEAL_KSWAPD_NORMAL\0207\022!\n\035VMSTAT_PGST"
    "EAL_KSWAPD_MOVABLE\0208\022\035\n\031VMSTAT_PGSTEAL_D"
    "IRECT_DMA\0209\022 \n\034VMSTAT_PGSTEAL_DIRECT_NOR"
    "MAL\020:\022!\n\035VMSTAT_PGSTEAL_DIRECT_MOVABLE\020;"
    "\022\034\n\030VMSTAT_PGSCAN_KSWAPD_DMA\020<\022\037\n\033VMSTAT"
    "_PGSCAN_KSWAPD_NORMAL\020=\022 \n\034VMSTAT_PGSCAN"
    "_KSWAPD_MOVABLE\020>\022\034\n\030VMSTAT_PGSCAN_DIREC"
    "T_DMA\020\?\022\037\n\033VMSTAT_PGSCAN_DIRECT_NORMAL\020@"
    "\022 \n\034VMSTAT_PGSCAN_DIRECT_MOVABLE\020A\022!\n\035VM"
    "STAT_PGSCAN_DIRECT_THROTTLE\020B\022\027\n\023VMSTAT_"
    "PGINODESTEAL\020C\022\030\n\024VMSTAT_SLABS_SCANNED\020D"
    "\022\034\n\030VMSTAT_KSWAPD_INODESTEAL\020E\022\'\n#VMSTAT"
    "_KSWAPD_LOW_WMARK_HIT_QUICKLY\020F\022(\n$VMSTA"
    "T_KSWAPD_HIGH_WMARK_HIT_QUICKLY\020G\022\025\n\021VMS"
    "TAT_PAGEOUTRUN\020H\022\025\n\021VMSTAT_ALLOCSTALL\020I\022"
    "\024\n\020VMSTAT_PGROTATED\020J\022\031\n\025VMSTAT_DROP_PAG"
    "ECACHE\020K\022\024\n\020VMSTAT_DROP_SLAB\020L\022\034\n\030VMSTAT"
    "_PGMIGRATE_SUCCESS\020M\022\031\n\025VMSTAT_PGMIGRATE"
    "_FAIL\020N\022\"\n\036VMSTAT_COMPACT_MIGRATE_SCANNE"
    "D\020O\022\037\n\033VMSTAT_COMPACT_FREE_SCANNED\020P\022\033\n\027"
    "VMSTAT_COMPACT_ISOLATED\020Q\022\030\n\024VMSTAT_COMP"
    "ACT_STALL\020R\022\027\n\023VMSTAT_COMPACT_FAIL\020S\022\032\n\026"
    "VMSTAT_COMPACT_SUCCESS\020T\022\036\n\032VMSTAT_COMPA"
    "CT_DAEMON_WAKE\020U\022!\n\035VMSTAT_UNEVICTABLE_P"
    "GS_CULLED\020V\022\"\n\036VMSTAT_UNEVICTABLE_PGS_SC"
    "ANNED\020W\022\"\n\036VMSTAT_UNEVICTABLE_PGS_RESCUE"
    "D\020X\022\"\n\036VMSTAT_UNEVICTABLE_PGS_MLOCKED\020Y\022"
    "$\n VMSTAT_UNEVICTABLE_PGS_MUNLOCKED\020Z\022\"\n"
    "\036VMSTAT_UNEVICTABLE_PGS_CLEARED\020[\022#\n\037VMS"
    "TAT_UNEVICTABLE_PGS_STRANDED\020\\\022\025\n\021VMSTAT"
    "_NR_ZSPAGES\020]\022\026\n\022VMSTAT_NR_ION_HEAP\020^\022\026\n"
    "\022VMSTAT_NR_GPU_HEAP\020_\022\031\n\025VMSTAT_ALLOCSTA"
    "LL_DMA\020`\022\035\n\031VMSTAT_ALLOCSTALL_MOVABLE\020a\022"
    "\034\n\030VMSTAT_ALLOCSTALL_NORMAL\020b\022&\n\"VMSTAT_"
    "COMPACT_DAEMON_FREE_SCANNED\020c\022)\n%VMSTAT_"
    "COMPACT_DAEMON_MIGRATE_SCANNED\020d\022\025\n\021VMST"
    "AT_NR_FASTRPC\020e\022$\n VMSTAT_NR_INDIRECTLY_"
    "RECLAIMABLE\020f\022\033\n\027VMSTAT_NR_ION_HEAP_POOL"
    "\020g\022%\n!VMSTAT_NR_KERNEL_MISC_RECLAIMABLE\020"
    "h\022%\n!VMSTAT_NR_SHADOW_CALL_STACK_BYTES\020i"
    "\022\035\n\031VMSTAT_NR_SHMEM_HUGEPAGES\020j\022\035\n\031VMSTA"
    "T_NR_SHMEM_PMDMAPPED\020k\022!\n\035VMSTAT_NR_UNRE"
    "CLAIMABLE_PAGES\020l\022\036\n\032VMSTAT_NR_ZONE_ACTI"
    "VE_ANON\020m\022\036\n\032VMSTAT_NR_ZONE_ACTIVE_FILE\020"
    "n\022 \n\034VMSTAT_NR_ZONE_INACTIVE_ANON\020o\022 \n\034V"
    "MSTAT_NR_ZONE_INACTIVE_FILE\020p\022\036\n\032VMSTAT_"
    "NR_ZONE_UNEVICTABLE\020q\022 \n\034VMSTAT_NR_ZONE_"
    "WRITE_PENDING\020r\022\023\n\017VMSTAT_OOM_KILL\020s\022\025\n\021"
    "VMSTAT_PGLAZYFREE\020t\022\026\n\022VMSTAT_PGLAZYFREE"
    "D\020u\022\023\n\017VMSTAT_PGREFILL\020v\022\030\n\024VMSTAT_PGSCA"
    "N_DIRECT\020w\022\030\n\024VMSTAT_PGSCAN_KSWAPD\020x\022\025\n\021"
    "VMSTAT_PGSKIP_DMA\020y\022\031\n\025VMSTAT_PGSKIP_MOV"
    "ABLE\020z\022\030\n\024VMSTAT_PGSKIP_NORMAL\020{\022\031\n\025VMST"
    "AT_PGSTEAL_DIRECT\020|\022\031\n\025VMSTAT_PGSTEAL_KS"
    "WAPD\020}\022\022\n\016VMSTAT_SWAP_RA\020~\022\026\n\022VMSTAT_SWA"
    "P_RA_HIT\020\177\022\036\n\031VMSTAT_WORKINGSET_RESTORE\020"
    "\200\001"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto = {
    false,
    false,
    4642,
    descriptor_table_protodef_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto,
    "protos/perfetto/common/sys_stats_counters.proto",
    &descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto_once,
    nullptr,
    0,
    0,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto::offsets,
    nullptr,
    file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto(&descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeminfoCounters_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto[0];
}
bool MeminfoCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VmstatCounters_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto[1];
}
bool VmstatCounters_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
      return true;
    default:
      return false;
  }
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
