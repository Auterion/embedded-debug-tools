// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/gpu_counter_descriptor.proto

#include "protos/perfetto/common/gpu_counter_descriptor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.numerator_units_)*/ {}

  , /*decltype(_impl_.denominator_units_)*/ {}

  , /*decltype(_impl_.groups_)*/ {}

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counter_id_)*/ 0u

  , /*decltype(_impl_.select_by_default_)*/ false

  , /*decltype(_impl_.peak_value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal() {}
  union {
    GpuCounterDescriptor_GpuCounterSpec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterDescriptor_GpuCounterSpecDefaultTypeInternal _GpuCounterDescriptor_GpuCounterSpec_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.counter_ids_)*/ {}

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_id_)*/ 0u

  , /*decltype(_impl_.block_capacity_)*/ 0u
} {}
struct GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal() {}
  union {
    GpuCounterDescriptor_GpuCounterBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterDescriptor_GpuCounterBlockDefaultTypeInternal _GpuCounterDescriptor_GpuCounterBlock_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GpuCounterDescriptor::GpuCounterDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.specs_)*/{}
  , /*decltype(_impl_.blocks_)*/{}
  , /*decltype(_impl_.min_sampling_period_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_sampling_period_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.supports_instrumented_sampling_)*/ false
} {}
struct GpuCounterDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpuCounterDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpuCounterDescriptorDefaultTypeInternal() {}
  union {
    GpuCounterDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpuCounterDescriptorDefaultTypeInternal _GpuCounterDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.counter_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.description_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.numerator_units_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.denominator_units_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.select_by_default_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.groups_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_.peak_value_),
    2,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _impl_.block_capacity_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock, _impl_.counter_ids_),
    2,
    3,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _impl_.specs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _impl_.blocks_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _impl_.min_sampling_period_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _impl_.max_sampling_period_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor, _impl_.supports_instrumented_sampling_),
    ~0u,
    ~0u,
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 18, -1, sizeof(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec)},
        { 27, 40, -1, sizeof(::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock)},
        { 45, 58, -1, sizeof(::perfetto::protos::GpuCounterDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_GpuCounterDescriptor_GpuCounterSpec_default_instance_._instance,
    &::perfetto::protos::_GpuCounterDescriptor_GpuCounterBlock_default_instance_._instance,
    &::perfetto::protos::_GpuCounterDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n3protos/perfetto/common/gpu_counter_des"
    "criptor.proto\022\017perfetto.protos\"\266\013\n\024GpuCo"
    "unterDescriptor\022C\n\005specs\030\001 \003(\01324.perfett"
    "o.protos.GpuCounterDescriptor.GpuCounter"
    "Spec\022E\n\006blocks\030\002 \003(\01325.perfetto.protos.G"
    "puCounterDescriptor.GpuCounterBlock\022\036\n\026m"
    "in_sampling_period_ns\030\003 \001(\004\022\036\n\026max_sampl"
    "ing_period_ns\030\004 \001(\004\022&\n\036supports_instrume"
    "nted_sampling\030\005 \001(\010\032\216\003\n\016GpuCounterSpec\022\022"
    "\n\ncounter_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\023\n\013desc"
    "ription\030\003 \001(\t\022\030\n\016int_peak_value\030\005 \001(\003H\000\022"
    "\033\n\021double_peak_value\030\006 \001(\001H\000\022J\n\017numerato"
    "r_units\030\007 \003(\01621.perfetto.protos.GpuCount"
    "erDescriptor.MeasureUnit\022L\n\021denominator_"
    "units\030\010 \003(\01621.perfetto.protos.GpuCounter"
    "Descriptor.MeasureUnit\022\031\n\021select_by_defa"
    "ult\030\t \001(\010\022E\n\006groups\030\n \003(\01625.perfetto.pro"
    "tos.GpuCounterDescriptor.GpuCounterGroup"
    "B\014\n\npeak_valueJ\004\010\004\020\005\032s\n\017GpuCounterBlock\022"
    "\020\n\010block_id\030\001 \001(\r\022\026\n\016block_capacity\030\002 \001("
    "\r\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\023\n\013"
    "counter_ids\030\005 \003(\r\"u\n\017GpuCounterGroup\022\020\n\014"
    "UNCLASSIFIED\020\000\022\n\n\006SYSTEM\020\001\022\014\n\010VERTICES\020\002"
    "\022\r\n\tFRAGMENTS\020\003\022\016\n\nPRIMITIVES\020\004\022\n\n\006MEMOR"
    "Y\020\005\022\013\n\007COMPUTE\020\006\"\254\004\n\013MeasureUnit\022\010\n\004NONE"
    "\020\000\022\007\n\003BIT\020\001\022\013\n\007KILOBIT\020\002\022\013\n\007MEGABIT\020\003\022\013\n"
    "\007GIGABIT\020\004\022\013\n\007TERABIT\020\005\022\013\n\007PETABIT\020\006\022\010\n\004"
    "BYTE\020\007\022\014\n\010KILOBYTE\020\010\022\014\n\010MEGABYTE\020\t\022\014\n\010GI"
    "GABYTE\020\n\022\014\n\010TERABYTE\020\013\022\014\n\010PETABYTE\020\014\022\t\n\005"
    "HERTZ\020\r\022\r\n\tKILOHERTZ\020\016\022\r\n\tMEGAHERTZ\020\017\022\r\n"
    "\tGIGAHERTZ\020\020\022\r\n\tTERAHERTZ\020\021\022\r\n\tPETAHERTZ"
    "\020\022\022\016\n\nNANOSECOND\020\023\022\017\n\013MICROSECOND\020\024\022\017\n\013M"
    "ILLISECOND\020\025\022\n\n\006SECOND\020\026\022\n\n\006MINUTE\020\027\022\010\n\004"
    "HOUR\020\030\022\n\n\006VERTEX\020\031\022\t\n\005PIXEL\020\032\022\014\n\010TRIANGL"
    "E\020\033\022\r\n\tPRIMITIVE\020&\022\014\n\010FRAGMENT\020\'\022\r\n\tMILL"
    "IWATT\020\034\022\010\n\004WATT\020\035\022\014\n\010KILOWATT\020\036\022\t\n\005JOULE"
    "\020\037\022\010\n\004VOLT\020 \022\n\n\006AMPERE\020!\022\013\n\007CELSIUS\020\"\022\016\n"
    "\nFAHRENHEIT\020#\022\n\n\006KELVIN\020$\022\013\n\007PERCENT\020%\022\017"
    "\n\013INSTRUCTION\020("
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto = {
    false,
    false,
    1535,
    descriptor_table_protodef_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto,
    "protos/perfetto/common/gpu_counter_descriptor.proto",
    &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto(&descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpuCounterDescriptor_GpuCounterGroup_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[0];
}
bool GpuCounterDescriptor_GpuCounterGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::UNCLASSIFIED;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::SYSTEM;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::VERTICES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::FRAGMENTS;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::PRIMITIVES;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::MEMORY;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::COMPUTE;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MIN;
constexpr GpuCounterDescriptor_GpuCounterGroup GpuCounterDescriptor::GpuCounterGroup_MAX;
constexpr int GpuCounterDescriptor::GpuCounterGroup_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpuCounterDescriptor_MeasureUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[1];
}
bool GpuCounterDescriptor_MeasureUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NONE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::BYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOBYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETABYTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MEGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::GIGAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TERAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PETAHERTZ;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::NANOSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MICROSECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLISECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::SECOND;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MINUTE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::HOUR;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VERTEX;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PIXEL;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::TRIANGLE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PRIMITIVE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FRAGMENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MILLIWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::WATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KILOWATT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::JOULE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::VOLT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::AMPERE;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::CELSIUS;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::FAHRENHEIT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::KELVIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::PERCENT;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::INSTRUCTION;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MIN;
constexpr GpuCounterDescriptor_MeasureUnit GpuCounterDescriptor::MeasureUnit_MAX;
constexpr int GpuCounterDescriptor::MeasureUnit_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class GpuCounterDescriptor_GpuCounterSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterSpec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterSpec, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec, _impl_._oneof_case_);
  static void set_has_counter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_select_by_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}
GpuCounterDescriptor_GpuCounterSpec::GpuCounterDescriptor_GpuCounterSpec(const GpuCounterDescriptor_GpuCounterSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpuCounterDescriptor_GpuCounterSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numerator_units_) { from._internal_numerator_units() }

    , decltype(_impl_.denominator_units_) { from._internal_denominator_units() }

    , decltype(_impl_.groups_) { from._internal_groups() }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.counter_id_) {}

    , decltype(_impl_.select_by_default_) {}

    , decltype(_impl_.peak_value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.counter_id_, &from._impl_.counter_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.select_by_default_) -
    reinterpret_cast<char*>(&_impl_.counter_id_)) + sizeof(_impl_.select_by_default_));
  clear_has_peak_value();
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      _this->_internal_set_int_peak_value(from._internal_int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      _this->_internal_set_double_peak_value(from._internal_double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
}

inline void GpuCounterDescriptor_GpuCounterSpec::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.numerator_units_) { arena }

    , decltype(_impl_.denominator_units_) { arena }

    , decltype(_impl_.groups_) { arena }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.counter_id_) { 0u }

    , decltype(_impl_.select_by_default_) { false }

    , decltype(_impl_.peak_value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_peak_value();
}

GpuCounterDescriptor_GpuCounterSpec::~GpuCounterDescriptor_GpuCounterSpec() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterDescriptor_GpuCounterSpec::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_numerator_units()->~RepeatedField();
  _internal_mutable_denominator_units()->~RepeatedField();
  _internal_mutable_groups()->~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (has_peak_value()) {
    clear_peak_value();
  }
}

void GpuCounterDescriptor_GpuCounterSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterDescriptor_GpuCounterSpec::clear_peak_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  switch (peak_value_case()) {
    case kIntPeakValue: {
      // No need to clear
      break;
    }
    case kDoublePeakValue: {
      // No need to clear
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PEAK_VALUE_NOT_SET;
}


void GpuCounterDescriptor_GpuCounterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_numerator_units()->Clear();
  _internal_mutable_denominator_units()->Clear();
  _internal_mutable_groups()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.counter_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.select_by_default_) -
        reinterpret_cast<char*>(&_impl_.counter_id_)) + sizeof(_impl_.select_by_default_));
  }
  clear_peak_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuCounterDescriptor_GpuCounterSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 counter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_counter_id(&has_bits);
          _impl_.counter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int_peak_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _internal_set_int_peak_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double_peak_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _internal_set_double_peak_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(static_cast<int>(val)))) {
              _internal_add_numerator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_numerator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid(static_cast<int>(val)))) {
              _internal_add_denominator_units(static_cast<::perfetto::protos::GpuCounterDescriptor_MeasureUnit>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_denominator_units(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_MeasureUnit_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool select_by_default = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_select_by_default(&has_bits);
          _impl_.select_by_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid(static_cast<int>(val)))) {
              _internal_add_groups(static_cast<::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_groups(), ptr, ctx, ::perfetto::protos::GpuCounterDescriptor_GpuCounterGroup_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GpuCounterDescriptor_GpuCounterSpec::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 counter_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_counter_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.description");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  switch (peak_value_case()) {
    case kIntPeakValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          5, this->_internal_int_peak_value(), target);
      break;
    }
    case kDoublePeakValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this->_internal_double_peak_value(), target);
      break;
    }
    default: ;
  }
  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  for (int i = 0, n = this->_internal_numerator_units_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_numerator_units(i), target);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  for (int i = 0, n = this->_internal_denominator_units_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_denominator_units(i), target);
  }

  // optional bool select_by_default = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_select_by_default(), target);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  for (int i = 0, n = this->_internal_groups_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_groups(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  return target;
}

::size_t GpuCounterDescriptor_GpuCounterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit numerator_units = 7;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_numerator_units_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_numerator_units(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.MeasureUnit denominator_units = 8;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_denominator_units_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_denominator_units(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterGroup groups = 10;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_groups_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_groups(static_cast<int>(i)));
    }
    total_size += data_size;
    total_size += std::size_t{1} * count;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_description());
    }

    // optional uint32 counter_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_counter_id());
    }

    // optional bool select_by_default = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  switch (peak_value_case()) {
    // int64 int_peak_value = 5;
    case kIntPeakValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_peak_value());
      break;
    }
    // double double_peak_value = 6;
    case kDoublePeakValue: {
      total_size += 9;
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpuCounterDescriptor_GpuCounterSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpuCounterDescriptor_GpuCounterSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpuCounterDescriptor_GpuCounterSpec::GetClassData() const { return &_class_data_; }


void GpuCounterDescriptor_GpuCounterSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpuCounterDescriptor_GpuCounterSpec*>(&to_msg);
  auto& from = static_cast<const GpuCounterDescriptor_GpuCounterSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_numerator_units()->MergeFrom(from._internal_numerator_units());
  _this->_internal_mutable_denominator_units()->MergeFrom(from._internal_denominator_units());
  _this->_internal_mutable_groups()->MergeFrom(from._internal_groups());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.counter_id_ = from._impl_.counter_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.select_by_default_ = from._impl_.select_by_default_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.peak_value_case()) {
    case kIntPeakValue: {
      _this->_internal_set_int_peak_value(from._internal_int_peak_value());
      break;
    }
    case kDoublePeakValue: {
      _this->_internal_set_double_peak_value(from._internal_double_peak_value());
      break;
    }
    case PEAK_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpuCounterDescriptor_GpuCounterSpec::CopyFrom(const GpuCounterDescriptor_GpuCounterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterSpec::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterSpec::InternalSwap(GpuCounterDescriptor_GpuCounterSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_numerator_units()->InternalSwap(
      other->_internal_mutable_numerator_units());
  _internal_mutable_denominator_units()->InternalSwap(
      other->_internal_mutable_denominator_units());
  _internal_mutable_groups()->InternalSwap(
      other->_internal_mutable_groups());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterSpec, _impl_.select_by_default_)
      + sizeof(GpuCounterDescriptor_GpuCounterSpec::_impl_.select_by_default_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterSpec, _impl_.counter_id_)>(
          reinterpret_cast<char*>(&_impl_.counter_id_),
          reinterpret_cast<char*>(&other->_impl_.counter_id_));
  swap(_impl_.peak_value_, other->_impl_.peak_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuCounterDescriptor_GpuCounterSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[0]);
}
// ===================================================================

class GpuCounterDescriptor_GpuCounterBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor_GpuCounterBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterBlock, _impl_._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_block_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}
GpuCounterDescriptor_GpuCounterBlock::GpuCounterDescriptor_GpuCounterBlock(const GpuCounterDescriptor_GpuCounterBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpuCounterDescriptor_GpuCounterBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counter_ids_) { from._impl_.counter_ids_ }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.block_id_) {}

    , decltype(_impl_.block_capacity_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_id_, &from._impl_.block_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.block_capacity_) -
    reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.block_capacity_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
}

inline void GpuCounterDescriptor_GpuCounterBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counter_ids_) { arena }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.block_id_) { 0u }

    , decltype(_impl_.block_capacity_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GpuCounterDescriptor_GpuCounterBlock::~GpuCounterDescriptor_GpuCounterBlock() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterDescriptor_GpuCounterBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counter_ids_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void GpuCounterDescriptor_GpuCounterBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterDescriptor_GpuCounterBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_counter_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.block_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.block_capacity_) -
        reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.block_capacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuCounterDescriptor_GpuCounterBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_block_id(&has_bits);
          _impl_.block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 block_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_block_capacity(&has_bits);
          _impl_.block_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 counter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_counter_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_counter_ids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GpuCounterDescriptor_GpuCounterBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 block_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_block_id(), target);
  }

  // optional uint32 block_capacity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_block_capacity(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.description");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated uint32 counter_ids = 5;
  for (int i = 0, n = this->_internal_counter_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_counter_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  return target;
}

::size_t GpuCounterDescriptor_GpuCounterBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 counter_ids = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_counter_ids())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_counter_ids_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_description());
    }

    // optional uint32 block_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_block_id());
    }

    // optional uint32 block_capacity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_block_capacity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpuCounterDescriptor_GpuCounterBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpuCounterDescriptor_GpuCounterBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpuCounterDescriptor_GpuCounterBlock::GetClassData() const { return &_class_data_; }


void GpuCounterDescriptor_GpuCounterBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpuCounterDescriptor_GpuCounterBlock*>(&to_msg);
  auto& from = static_cast<const GpuCounterDescriptor_GpuCounterBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counter_ids_.MergeFrom(from._impl_.counter_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.block_id_ = from._impl_.block_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.block_capacity_ = from._impl_.block_capacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpuCounterDescriptor_GpuCounterBlock::CopyFrom(const GpuCounterDescriptor_GpuCounterBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor_GpuCounterBlock::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor_GpuCounterBlock::InternalSwap(GpuCounterDescriptor_GpuCounterBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.counter_ids_.InternalSwap(&other->_impl_.counter_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterBlock, _impl_.block_capacity_)
      + sizeof(GpuCounterDescriptor_GpuCounterBlock::_impl_.block_capacity_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor_GpuCounterBlock, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuCounterDescriptor_GpuCounterBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[1]);
}
// ===================================================================

class GpuCounterDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuCounterDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor, _impl_._has_bits_);
  static void set_has_min_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_sampling_period_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_supports_instrumented_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GpuCounterDescriptor::GpuCounterDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuCounterDescriptor)
}
GpuCounterDescriptor::GpuCounterDescriptor(const GpuCounterDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpuCounterDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.specs_){from._impl_.specs_}
    , decltype(_impl_.blocks_){from._impl_.blocks_}
    , decltype(_impl_.min_sampling_period_ns_) {}

    , decltype(_impl_.max_sampling_period_ns_) {}

    , decltype(_impl_.supports_instrumented_sampling_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_sampling_period_ns_, &from._impl_.min_sampling_period_ns_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.supports_instrumented_sampling_) -
    reinterpret_cast<char*>(&_impl_.min_sampling_period_ns_)) + sizeof(_impl_.supports_instrumented_sampling_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuCounterDescriptor)
}

inline void GpuCounterDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.specs_){arena}
    , decltype(_impl_.blocks_){arena}
    , decltype(_impl_.min_sampling_period_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.max_sampling_period_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.supports_instrumented_sampling_) { false }

  };
}

GpuCounterDescriptor::~GpuCounterDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuCounterDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpuCounterDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_specs()->~RepeatedPtrField();
  _internal_mutable_blocks()->~RepeatedPtrField();
}

void GpuCounterDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpuCounterDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuCounterDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_specs()->Clear();
  _internal_mutable_blocks()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.min_sampling_period_ns_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.supports_instrumented_sampling_) -
        reinterpret_cast<char*>(&_impl_.min_sampling_period_ns_)) + sizeof(_impl_.supports_instrumented_sampling_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuCounterDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 min_sampling_period_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_min_sampling_period_ns(&has_bits);
          _impl_.min_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 max_sampling_period_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_max_sampling_period_ns(&has_bits);
          _impl_.max_sampling_period_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool supports_instrumented_sampling = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_supports_instrumented_sampling(&has_bits);
          _impl_.supports_instrumented_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GpuCounterDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuCounterDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_specs_size()); i < n; i++) {
    const auto& repfield = this->_internal_specs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 min_sampling_period_ns = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_min_sampling_period_ns(), target);
  }

  // optional uint64 max_sampling_period_ns = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_max_sampling_period_ns(), target);
  }

  // optional bool supports_instrumented_sampling = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_supports_instrumented_sampling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuCounterDescriptor)
  return target;
}

::size_t GpuCounterDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuCounterDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterSpec specs = 1;
  total_size += 1UL * this->_internal_specs_size();
  for (const auto& msg : this->_internal_specs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.GpuCounterDescriptor.GpuCounterBlock blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->_internal_blocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 min_sampling_period_ns = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_min_sampling_period_ns());
    }

    // optional uint64 max_sampling_period_ns = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_max_sampling_period_ns());
    }

    // optional bool supports_instrumented_sampling = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpuCounterDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpuCounterDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpuCounterDescriptor::GetClassData() const { return &_class_data_; }


void GpuCounterDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpuCounterDescriptor*>(&to_msg);
  auto& from = static_cast<const GpuCounterDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuCounterDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_specs()->MergeFrom(from._internal_specs());
  _this->_internal_mutable_blocks()->MergeFrom(from._internal_blocks());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_sampling_period_ns_ = from._impl_.min_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_sampling_period_ns_ = from._impl_.max_sampling_period_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.supports_instrumented_sampling_ = from._impl_.supports_instrumented_sampling_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpuCounterDescriptor::CopyFrom(const GpuCounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuCounterDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuCounterDescriptor::IsInitialized() const {
  return true;
}

void GpuCounterDescriptor::InternalSwap(GpuCounterDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_specs()->InternalSwap(other->_internal_mutable_specs());
  _internal_mutable_blocks()->InternalSwap(other->_internal_mutable_blocks());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor, _impl_.supports_instrumented_sampling_)
      + sizeof(GpuCounterDescriptor::_impl_.supports_instrumented_sampling_)
      - PROTOBUF_FIELD_OFFSET(GpuCounterDescriptor, _impl_.min_sampling_period_ns_)>(
          reinterpret_cast<char*>(&_impl_.min_sampling_period_ns_),
          reinterpret_cast<char*>(&other->_impl_.min_sampling_period_ns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuCounterDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2fcommon_2fgpu_5fcounter_5fdescriptor_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterDescriptor_GpuCounterBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuCounterDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::GpuCounterDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuCounterDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
