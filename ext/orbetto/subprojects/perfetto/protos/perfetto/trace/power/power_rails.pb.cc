// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/power/power_rails.proto

#include "protos/perfetto/trace/power/power_rails.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR PowerRails_RailDescriptor::PowerRails_RailDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rail_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subsys_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.sampling_rate_)*/ 0u
} {}
struct PowerRails_RailDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerRails_RailDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerRails_RailDescriptorDefaultTypeInternal() {}
  union {
    PowerRails_RailDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerRails_RailDescriptorDefaultTypeInternal _PowerRails_RailDescriptor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PowerRails_EnergyData::PowerRails_EnergyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_ms_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.energy_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.index_)*/ 0u
} {}
struct PowerRails_EnergyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerRails_EnergyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerRails_EnergyDataDefaultTypeInternal() {}
  union {
    PowerRails_EnergyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerRails_EnergyDataDefaultTypeInternal _PowerRails_EnergyData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PowerRails::PowerRails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rail_descriptor_)*/{}
  , /*decltype(_impl_.energy_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PowerRailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerRailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerRailsDefaultTypeInternal() {}
  union {
    PowerRails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerRailsDefaultTypeInternal _PowerRails_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_RailDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_RailDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_RailDescriptor, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_RailDescriptor, _impl_.rail_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_RailDescriptor, _impl_.subsys_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_RailDescriptor, _impl_.sampling_rate_),
    2,
    0,
    1,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_EnergyData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_EnergyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_EnergyData, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_EnergyData, _impl_.timestamp_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails_EnergyData, _impl_.energy_),
    2,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails, _impl_.rail_descriptor_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PowerRails, _impl_.energy_data_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::perfetto::protos::PowerRails_RailDescriptor)},
        { 16, 27, -1, sizeof(::perfetto::protos::PowerRails_EnergyData)},
        { 30, -1, -1, sizeof(::perfetto::protos::PowerRails)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_PowerRails_RailDescriptor_default_instance_._instance,
    &::perfetto::protos::_PowerRails_EnergyData_default_instance_._instance,
    &::perfetto::protos::_PowerRails_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n-protos/perfetto/trace/power/power_rail"
    "s.proto\022\017perfetto.protos\"\261\002\n\nPowerRails\022"
    "C\n\017rail_descriptor\030\001 \003(\0132*.perfetto.prot"
    "os.PowerRails.RailDescriptor\022;\n\013energy_d"
    "ata\030\002 \003(\0132&.perfetto.protos.PowerRails.E"
    "nergyData\032^\n\016RailDescriptor\022\r\n\005index\030\001 \001"
    "(\r\022\021\n\trail_name\030\002 \001(\t\022\023\n\013subsys_name\030\003 \001"
    "(\t\022\025\n\rsampling_rate\030\004 \001(\r\032A\n\nEnergyData\022"
    "\r\n\005index\030\001 \001(\r\022\024\n\014timestamp_ms\030\002 \001(\004\022\016\n\006"
    "energy\030\003 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto = {
    false,
    false,
    372,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto,
    "protos/perfetto/trace/power/power_rails.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class PowerRails_RailDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerRails_RailDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PowerRails_RailDescriptor, _impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rail_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subsys_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sampling_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PowerRails_RailDescriptor::PowerRails_RailDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PowerRails.RailDescriptor)
}
PowerRails_RailDescriptor::PowerRails_RailDescriptor(const PowerRails_RailDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PowerRails_RailDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rail_name_) {}

    , decltype(_impl_.subsys_name_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.sampling_rate_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rail_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rail_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rail_name_.Set(from._internal_rail_name(), _this->GetArenaForAllocation());
  }
  _impl_.subsys_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subsys_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.subsys_name_.Set(from._internal_subsys_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sampling_rate_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sampling_rate_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PowerRails.RailDescriptor)
}

inline void PowerRails_RailDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rail_name_) {}

    , decltype(_impl_.subsys_name_) {}

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.sampling_rate_) { 0u }

  };
  _impl_.rail_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rail_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subsys_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subsys_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PowerRails_RailDescriptor::~PowerRails_RailDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PowerRails.RailDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerRails_RailDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rail_name_.Destroy();
  _impl_.subsys_name_.Destroy();
}

void PowerRails_RailDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PowerRails_RailDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PowerRails.RailDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rail_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.subsys_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sampling_rate_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sampling_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerRails_RailDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string rail_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rail_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PowerRails.RailDescriptor.rail_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string subsys_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subsys_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PowerRails.RailDescriptor.subsys_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sampling_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_sampling_rate(&has_bits);
          _impl_.sampling_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PowerRails_RailDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PowerRails.RailDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // optional string rail_name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_rail_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PowerRails.RailDescriptor.rail_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string subsys_name = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_subsys_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PowerRails.RailDescriptor.subsys_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional uint32 sampling_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_sampling_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PowerRails.RailDescriptor)
  return target;
}

::size_t PowerRails_RailDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PowerRails.RailDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string rail_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_rail_name());
    }

    // optional string subsys_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_subsys_name());
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
    }

    // optional uint32 sampling_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sampling_rate());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PowerRails_RailDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PowerRails_RailDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PowerRails_RailDescriptor::GetClassData() const { return &_class_data_; }


void PowerRails_RailDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PowerRails_RailDescriptor*>(&to_msg);
  auto& from = static_cast<const PowerRails_RailDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PowerRails.RailDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rail_name(from._internal_rail_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_subsys_name(from._internal_subsys_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sampling_rate_ = from._impl_.sampling_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PowerRails_RailDescriptor::CopyFrom(const PowerRails_RailDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PowerRails.RailDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerRails_RailDescriptor::IsInitialized() const {
  return true;
}

void PowerRails_RailDescriptor::InternalSwap(PowerRails_RailDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rail_name_, lhs_arena,
                                       &other->_impl_.rail_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subsys_name_, lhs_arena,
                                       &other->_impl_.subsys_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerRails_RailDescriptor, _impl_.sampling_rate_)
      + sizeof(PowerRails_RailDescriptor::_impl_.sampling_rate_)
      - PROTOBUF_FIELD_OFFSET(PowerRails_RailDescriptor, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerRails_RailDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto[0]);
}
// ===================================================================

class PowerRails_EnergyData::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerRails_EnergyData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PowerRails_EnergyData, _impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_energy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PowerRails_EnergyData::PowerRails_EnergyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PowerRails.EnergyData)
}
PowerRails_EnergyData::PowerRails_EnergyData(const PowerRails_EnergyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PowerRails.EnergyData)
}

inline void PowerRails_EnergyData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_ms_) { ::uint64_t{0u} }

    , decltype(_impl_.energy_) { ::uint64_t{0u} }

    , decltype(_impl_.index_) { 0u }

  };
}

PowerRails_EnergyData::~PowerRails_EnergyData() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PowerRails.EnergyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerRails_EnergyData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PowerRails_EnergyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PowerRails_EnergyData::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PowerRails.EnergyData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerRails_EnergyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp_ms(&has_bits);
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_energy(&has_bits);
          _impl_.energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PowerRails_EnergyData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PowerRails.EnergyData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // optional uint64 timestamp_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp_ms(), target);
  }

  // optional uint64 energy = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_energy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PowerRails.EnergyData)
  return target;
}

::size_t PowerRails_EnergyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PowerRails.EnergyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 timestamp_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp_ms());
    }

    // optional uint64 energy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_energy());
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PowerRails_EnergyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PowerRails_EnergyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PowerRails_EnergyData::GetClassData() const { return &_class_data_; }


void PowerRails_EnergyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PowerRails_EnergyData*>(&to_msg);
  auto& from = static_cast<const PowerRails_EnergyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PowerRails.EnergyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.energy_ = from._impl_.energy_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PowerRails_EnergyData::CopyFrom(const PowerRails_EnergyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PowerRails.EnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerRails_EnergyData::IsInitialized() const {
  return true;
}

void PowerRails_EnergyData::InternalSwap(PowerRails_EnergyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerRails_EnergyData, _impl_.index_)
      + sizeof(PowerRails_EnergyData::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(PowerRails_EnergyData, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerRails_EnergyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto[1]);
}
// ===================================================================

class PowerRails::_Internal {
 public:
};

PowerRails::PowerRails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PowerRails)
}
PowerRails::PowerRails(const PowerRails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PowerRails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rail_descriptor_){from._impl_.rail_descriptor_}
    , decltype(_impl_.energy_data_){from._impl_.energy_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PowerRails)
}

inline void PowerRails::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rail_descriptor_){arena}
    , decltype(_impl_.energy_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PowerRails::~PowerRails() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PowerRails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerRails::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rail_descriptor()->~RepeatedPtrField();
  _internal_mutable_energy_data()->~RepeatedPtrField();
}

void PowerRails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PowerRails::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PowerRails)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rail_descriptor()->Clear();
  _internal_mutable_energy_data()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerRails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.PowerRails.RailDescriptor rail_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rail_descriptor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.PowerRails.EnergyData energy_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_energy_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PowerRails::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PowerRails)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.PowerRails.RailDescriptor rail_descriptor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rail_descriptor_size()); i < n; i++) {
    const auto& repfield = this->_internal_rail_descriptor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.PowerRails.EnergyData energy_data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_energy_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_energy_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PowerRails)
  return target;
}

::size_t PowerRails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PowerRails)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.PowerRails.RailDescriptor rail_descriptor = 1;
  total_size += 1UL * this->_internal_rail_descriptor_size();
  for (const auto& msg : this->_internal_rail_descriptor()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.PowerRails.EnergyData energy_data = 2;
  total_size += 1UL * this->_internal_energy_data_size();
  for (const auto& msg : this->_internal_energy_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PowerRails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PowerRails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PowerRails::GetClassData() const { return &_class_data_; }


void PowerRails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PowerRails*>(&to_msg);
  auto& from = static_cast<const PowerRails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PowerRails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rail_descriptor()->MergeFrom(from._internal_rail_descriptor());
  _this->_internal_mutable_energy_data()->MergeFrom(from._internal_energy_data());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PowerRails::CopyFrom(const PowerRails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PowerRails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerRails::IsInitialized() const {
  return true;
}

void PowerRails::InternalSwap(PowerRails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rail_descriptor()->InternalSwap(other->_internal_mutable_rail_descriptor());
  _internal_mutable_energy_data()->InternalSwap(other->_internal_mutable_energy_data());
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerRails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fpower_2fpower_5frails_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PowerRails_RailDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::PowerRails_RailDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PowerRails_RailDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PowerRails_EnergyData*
Arena::CreateMaybeMessage< ::perfetto::protos::PowerRails_EnergyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PowerRails_EnergyData >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PowerRails*
Arena::CreateMaybeMessage< ::perfetto::protos::PowerRails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PowerRails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
