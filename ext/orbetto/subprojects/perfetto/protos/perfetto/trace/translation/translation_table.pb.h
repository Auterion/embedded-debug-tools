// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/translation/translation_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
namespace perfetto {
namespace protos {
class ChromeHistorgramTranslationTable;
struct ChromeHistorgramTranslationTableDefaultTypeInternal;
extern ChromeHistorgramTranslationTableDefaultTypeInternal _ChromeHistorgramTranslationTable_default_instance_;
class ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse;
struct ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal;
extern ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal _ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse_default_instance_;
class ChromePerformanceMarkTranslationTable;
struct ChromePerformanceMarkTranslationTableDefaultTypeInternal;
extern ChromePerformanceMarkTranslationTableDefaultTypeInternal _ChromePerformanceMarkTranslationTable_default_instance_;
class ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse;
struct ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal;
extern ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal _ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse_default_instance_;
class ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse;
struct ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal;
extern ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal _ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse_default_instance_;
class ChromeUserEventTranslationTable;
struct ChromeUserEventTranslationTableDefaultTypeInternal;
extern ChromeUserEventTranslationTableDefaultTypeInternal _ChromeUserEventTranslationTable_default_instance_;
class ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse;
struct ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal;
extern ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal _ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse_default_instance_;
class SliceNameTranslationTable;
struct SliceNameTranslationTableDefaultTypeInternal;
extern SliceNameTranslationTableDefaultTypeInternal _SliceNameTranslationTable_default_instance_;
class SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse;
struct SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal;
extern SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal _SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse_default_instance_;
class TranslationTable;
struct TranslationTableDefaultTypeInternal;
extern TranslationTableDefaultTypeInternal _TranslationTable_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ChromeHistorgramTranslationTable* Arena::CreateMaybeMessage<::perfetto::protos::ChromeHistorgramTranslationTable>(Arena*);
template <>
::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse* Arena::CreateMaybeMessage<::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse>(Arena*);
template <>
::perfetto::protos::ChromePerformanceMarkTranslationTable* Arena::CreateMaybeMessage<::perfetto::protos::ChromePerformanceMarkTranslationTable>(Arena*);
template <>
::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse* Arena::CreateMaybeMessage<::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse>(Arena*);
template <>
::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse* Arena::CreateMaybeMessage<::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse>(Arena*);
template <>
::perfetto::protos::ChromeUserEventTranslationTable* Arena::CreateMaybeMessage<::perfetto::protos::ChromeUserEventTranslationTable>(Arena*);
template <>
::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse* Arena::CreateMaybeMessage<::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse>(Arena*);
template <>
::perfetto::protos::SliceNameTranslationTable* Arena::CreateMaybeMessage<::perfetto::protos::SliceNameTranslationTable>(Arena*);
template <>
::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse* Arena::CreateMaybeMessage<::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse>(Arena*);
template <>
::perfetto::protos::TranslationTable* Arena::CreateMaybeMessage<::perfetto::protos::TranslationTable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class TranslationTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TranslationTable) */ {
 public:
  inline TranslationTable() : TranslationTable(nullptr) {}
  ~TranslationTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TranslationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TranslationTable(const TranslationTable& from);
  TranslationTable(TranslationTable&& from) noexcept
    : TranslationTable() {
    *this = ::std::move(from);
  }

  inline TranslationTable& operator=(const TranslationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslationTable& operator=(TranslationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslationTable& default_instance() {
    return *internal_default_instance();
  }
  enum TableCase {
    kChromeHistogram = 1,
    kChromeUserEvent = 2,
    kChromePerformanceMark = 3,
    kSliceName = 4,
    TABLE_NOT_SET = 0,
  };

  static inline const TranslationTable* internal_default_instance() {
    return reinterpret_cast<const TranslationTable*>(
               &_TranslationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TranslationTable& a, TranslationTable& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslationTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslationTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TranslationTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TranslationTable& from) {
    TranslationTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TranslationTable";
  }
  protected:
  explicit TranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChromeHistogramFieldNumber = 1,
    kChromeUserEventFieldNumber = 2,
    kChromePerformanceMarkFieldNumber = 3,
    kSliceNameFieldNumber = 4,
  };
  // .perfetto.protos.ChromeHistorgramTranslationTable chrome_histogram = 1;
  bool has_chrome_histogram() const;
  private:
  bool _internal_has_chrome_histogram() const;

  public:
  void clear_chrome_histogram() ;
  const ::perfetto::protos::ChromeHistorgramTranslationTable& chrome_histogram() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeHistorgramTranslationTable* release_chrome_histogram();
  ::perfetto::protos::ChromeHistorgramTranslationTable* mutable_chrome_histogram();
  void set_allocated_chrome_histogram(::perfetto::protos::ChromeHistorgramTranslationTable* chrome_histogram);
  private:
  const ::perfetto::protos::ChromeHistorgramTranslationTable& _internal_chrome_histogram() const;
  ::perfetto::protos::ChromeHistorgramTranslationTable* _internal_mutable_chrome_histogram();
  public:
  void unsafe_arena_set_allocated_chrome_histogram(
      ::perfetto::protos::ChromeHistorgramTranslationTable* chrome_histogram);
  ::perfetto::protos::ChromeHistorgramTranslationTable* unsafe_arena_release_chrome_histogram();
  // .perfetto.protos.ChromeUserEventTranslationTable chrome_user_event = 2;
  bool has_chrome_user_event() const;
  private:
  bool _internal_has_chrome_user_event() const;

  public:
  void clear_chrome_user_event() ;
  const ::perfetto::protos::ChromeUserEventTranslationTable& chrome_user_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeUserEventTranslationTable* release_chrome_user_event();
  ::perfetto::protos::ChromeUserEventTranslationTable* mutable_chrome_user_event();
  void set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEventTranslationTable* chrome_user_event);
  private:
  const ::perfetto::protos::ChromeUserEventTranslationTable& _internal_chrome_user_event() const;
  ::perfetto::protos::ChromeUserEventTranslationTable* _internal_mutable_chrome_user_event();
  public:
  void unsafe_arena_set_allocated_chrome_user_event(
      ::perfetto::protos::ChromeUserEventTranslationTable* chrome_user_event);
  ::perfetto::protos::ChromeUserEventTranslationTable* unsafe_arena_release_chrome_user_event();
  // .perfetto.protos.ChromePerformanceMarkTranslationTable chrome_performance_mark = 3;
  bool has_chrome_performance_mark() const;
  private:
  bool _internal_has_chrome_performance_mark() const;

  public:
  void clear_chrome_performance_mark() ;
  const ::perfetto::protos::ChromePerformanceMarkTranslationTable& chrome_performance_mark() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromePerformanceMarkTranslationTable* release_chrome_performance_mark();
  ::perfetto::protos::ChromePerformanceMarkTranslationTable* mutable_chrome_performance_mark();
  void set_allocated_chrome_performance_mark(::perfetto::protos::ChromePerformanceMarkTranslationTable* chrome_performance_mark);
  private:
  const ::perfetto::protos::ChromePerformanceMarkTranslationTable& _internal_chrome_performance_mark() const;
  ::perfetto::protos::ChromePerformanceMarkTranslationTable* _internal_mutable_chrome_performance_mark();
  public:
  void unsafe_arena_set_allocated_chrome_performance_mark(
      ::perfetto::protos::ChromePerformanceMarkTranslationTable* chrome_performance_mark);
  ::perfetto::protos::ChromePerformanceMarkTranslationTable* unsafe_arena_release_chrome_performance_mark();
  // .perfetto.protos.SliceNameTranslationTable slice_name = 4;
  bool has_slice_name() const;
  private:
  bool _internal_has_slice_name() const;

  public:
  void clear_slice_name() ;
  const ::perfetto::protos::SliceNameTranslationTable& slice_name() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SliceNameTranslationTable* release_slice_name();
  ::perfetto::protos::SliceNameTranslationTable* mutable_slice_name();
  void set_allocated_slice_name(::perfetto::protos::SliceNameTranslationTable* slice_name);
  private:
  const ::perfetto::protos::SliceNameTranslationTable& _internal_slice_name() const;
  ::perfetto::protos::SliceNameTranslationTable* _internal_mutable_slice_name();
  public:
  void unsafe_arena_set_allocated_slice_name(
      ::perfetto::protos::SliceNameTranslationTable* slice_name);
  ::perfetto::protos::SliceNameTranslationTable* unsafe_arena_release_slice_name();
  void clear_table();
  TableCase table_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TranslationTable)
 private:
  class _Internal;
  void set_has_chrome_histogram();
  void set_has_chrome_user_event();
  void set_has_chrome_performance_mark();
  void set_has_slice_name();

  inline bool has_table() const;
  inline void clear_has_table();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TableUnion {
      constexpr TableUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::ChromeHistorgramTranslationTable* chrome_histogram_;
      ::perfetto::protos::ChromeUserEventTranslationTable* chrome_user_event_;
      ::perfetto::protos::ChromePerformanceMarkTranslationTable* chrome_performance_mark_;
      ::perfetto::protos::SliceNameTranslationTable* slice_name_;
    } table_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};// -------------------------------------------------------------------

class ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse, 
    ::uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse, 
    ::uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse& other);
  static const ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse*>(&_ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perfetto.protos.ChromeHistorgramTranslationTable.HashToNameEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};
// -------------------------------------------------------------------

class ChromeHistorgramTranslationTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeHistorgramTranslationTable) */ {
 public:
  inline ChromeHistorgramTranslationTable() : ChromeHistorgramTranslationTable(nullptr) {}
  ~ChromeHistorgramTranslationTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeHistorgramTranslationTable(const ChromeHistorgramTranslationTable& from);
  ChromeHistorgramTranslationTable(ChromeHistorgramTranslationTable&& from) noexcept
    : ChromeHistorgramTranslationTable() {
    *this = ::std::move(from);
  }

  inline ChromeHistorgramTranslationTable& operator=(const ChromeHistorgramTranslationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeHistorgramTranslationTable& operator=(ChromeHistorgramTranslationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeHistorgramTranslationTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeHistorgramTranslationTable* internal_default_instance() {
    return reinterpret_cast<const ChromeHistorgramTranslationTable*>(
               &_ChromeHistorgramTranslationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChromeHistorgramTranslationTable& a, ChromeHistorgramTranslationTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeHistorgramTranslationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeHistorgramTranslationTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeHistorgramTranslationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeHistorgramTranslationTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeHistorgramTranslationTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeHistorgramTranslationTable& from) {
    ChromeHistorgramTranslationTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeHistorgramTranslationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeHistorgramTranslationTable";
  }
  protected:
  explicit ChromeHistorgramTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHashToNameFieldNumber = 1,
  };
  // map<uint64, string> hash_to_name = 1;
  int hash_to_name_size() const;
  private:
  int _internal_hash_to_name_size() const;

  public:
  void clear_hash_to_name() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
      _internal_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
      _internal_mutable_hash_to_name();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
      hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
      mutable_hash_to_name();
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeHistorgramTranslationTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse,
        ::uint64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> hash_to_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};// -------------------------------------------------------------------

class ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse, 
    ::uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse, 
    ::uint64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse& other);
  static const ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse*>(&_ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perfetto.protos.ChromeUserEventTranslationTable.ActionHashToNameEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};
// -------------------------------------------------------------------

class ChromeUserEventTranslationTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeUserEventTranslationTable) */ {
 public:
  inline ChromeUserEventTranslationTable() : ChromeUserEventTranslationTable(nullptr) {}
  ~ChromeUserEventTranslationTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeUserEventTranslationTable(const ChromeUserEventTranslationTable& from);
  ChromeUserEventTranslationTable(ChromeUserEventTranslationTable&& from) noexcept
    : ChromeUserEventTranslationTable() {
    *this = ::std::move(from);
  }

  inline ChromeUserEventTranslationTable& operator=(const ChromeUserEventTranslationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeUserEventTranslationTable& operator=(ChromeUserEventTranslationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeUserEventTranslationTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeUserEventTranslationTable* internal_default_instance() {
    return reinterpret_cast<const ChromeUserEventTranslationTable*>(
               &_ChromeUserEventTranslationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChromeUserEventTranslationTable& a, ChromeUserEventTranslationTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeUserEventTranslationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeUserEventTranslationTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeUserEventTranslationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeUserEventTranslationTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeUserEventTranslationTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeUserEventTranslationTable& from) {
    ChromeUserEventTranslationTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeUserEventTranslationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeUserEventTranslationTable";
  }
  protected:
  explicit ChromeUserEventTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActionHashToNameFieldNumber = 1,
  };
  // map<uint64, string> action_hash_to_name = 1;
  int action_hash_to_name_size() const;
  private:
  int _internal_action_hash_to_name_size() const;

  public:
  void clear_action_hash_to_name() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
      _internal_action_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
      _internal_mutable_action_hash_to_name();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
      action_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
      mutable_action_hash_to_name();
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeUserEventTranslationTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse,
        ::uint64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> action_hash_to_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};// -------------------------------------------------------------------

class ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse, 
    ::uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse, 
    ::uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse& other);
  static const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse*>(&_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perfetto.protos.ChromePerformanceMarkTranslationTable.SiteHashToNameEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};
// -------------------------------------------------------------------

class ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse, 
    ::uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse, 
    ::uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse& other);
  static const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse*>(&_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perfetto.protos.ChromePerformanceMarkTranslationTable.MarkHashToNameEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};
// -------------------------------------------------------------------

class ChromePerformanceMarkTranslationTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromePerformanceMarkTranslationTable) */ {
 public:
  inline ChromePerformanceMarkTranslationTable() : ChromePerformanceMarkTranslationTable(nullptr) {}
  ~ChromePerformanceMarkTranslationTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromePerformanceMarkTranslationTable(const ChromePerformanceMarkTranslationTable& from);
  ChromePerformanceMarkTranslationTable(ChromePerformanceMarkTranslationTable&& from) noexcept
    : ChromePerformanceMarkTranslationTable() {
    *this = ::std::move(from);
  }

  inline ChromePerformanceMarkTranslationTable& operator=(const ChromePerformanceMarkTranslationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromePerformanceMarkTranslationTable& operator=(ChromePerformanceMarkTranslationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromePerformanceMarkTranslationTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromePerformanceMarkTranslationTable* internal_default_instance() {
    return reinterpret_cast<const ChromePerformanceMarkTranslationTable*>(
               &_ChromePerformanceMarkTranslationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChromePerformanceMarkTranslationTable& a, ChromePerformanceMarkTranslationTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromePerformanceMarkTranslationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromePerformanceMarkTranslationTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromePerformanceMarkTranslationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromePerformanceMarkTranslationTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromePerformanceMarkTranslationTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromePerformanceMarkTranslationTable& from) {
    ChromePerformanceMarkTranslationTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromePerformanceMarkTranslationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromePerformanceMarkTranslationTable";
  }
  protected:
  explicit ChromePerformanceMarkTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSiteHashToNameFieldNumber = 1,
    kMarkHashToNameFieldNumber = 2,
  };
  // map<uint32, string> site_hash_to_name = 1;
  int site_hash_to_name_size() const;
  private:
  int _internal_site_hash_to_name_size() const;

  public:
  void clear_site_hash_to_name() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
      _internal_site_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
      _internal_mutable_site_hash_to_name();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
      site_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
      mutable_site_hash_to_name();
  // map<uint32, string> mark_hash_to_name = 2;
  int mark_hash_to_name_size() const;
  private:
  int _internal_mark_hash_to_name_size() const;

  public:
  void clear_mark_hash_to_name() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
      _internal_mark_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
      _internal_mutable_mark_hash_to_name();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
      mark_hash_to_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
      mutable_mark_hash_to_name();
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromePerformanceMarkTranslationTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse,
        ::uint32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> site_hash_to_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse,
        ::uint32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> mark_hash_to_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};// -------------------------------------------------------------------

class SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse& other);
  static const SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse*>(&_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perfetto.protos.SliceNameTranslationTable.RawToDeobfuscatedNameEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perfetto.protos.SliceNameTranslationTable.RawToDeobfuscatedNameEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};
// -------------------------------------------------------------------

class SliceNameTranslationTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SliceNameTranslationTable) */ {
 public:
  inline SliceNameTranslationTable() : SliceNameTranslationTable(nullptr) {}
  ~SliceNameTranslationTable() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SliceNameTranslationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SliceNameTranslationTable(const SliceNameTranslationTable& from);
  SliceNameTranslationTable(SliceNameTranslationTable&& from) noexcept
    : SliceNameTranslationTable() {
    *this = ::std::move(from);
  }

  inline SliceNameTranslationTable& operator=(const SliceNameTranslationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceNameTranslationTable& operator=(SliceNameTranslationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SliceNameTranslationTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const SliceNameTranslationTable* internal_default_instance() {
    return reinterpret_cast<const SliceNameTranslationTable*>(
               &_SliceNameTranslationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SliceNameTranslationTable& a, SliceNameTranslationTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceNameTranslationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceNameTranslationTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SliceNameTranslationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SliceNameTranslationTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SliceNameTranslationTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SliceNameTranslationTable& from) {
    SliceNameTranslationTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceNameTranslationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SliceNameTranslationTable";
  }
  protected:
  explicit SliceNameTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRawToDeobfuscatedNameFieldNumber = 1,
  };
  // map<string, string> raw_to_deobfuscated_name = 1;
  int raw_to_deobfuscated_name_size() const;
  private:
  int _internal_raw_to_deobfuscated_name_size() const;

  public:
  void clear_raw_to_deobfuscated_name() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_raw_to_deobfuscated_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_raw_to_deobfuscated_name();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      raw_to_deobfuscated_name() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_raw_to_deobfuscated_name();
  // @@protoc_insertion_point(class_scope:perfetto.protos.SliceNameTranslationTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> raw_to_deobfuscated_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TranslationTable

// .perfetto.protos.ChromeHistorgramTranslationTable chrome_histogram = 1;
inline bool TranslationTable::has_chrome_histogram() const {
  return table_case() == kChromeHistogram;
}
inline bool TranslationTable::_internal_has_chrome_histogram() const {
  return table_case() == kChromeHistogram;
}
inline void TranslationTable::set_has_chrome_histogram() {
  _impl_._oneof_case_[0] = kChromeHistogram;
}
inline void TranslationTable::clear_chrome_histogram() {
  if (table_case() == kChromeHistogram) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.table_.chrome_histogram_;
    }
    clear_has_table();
  }
}
inline ::perfetto::protos::ChromeHistorgramTranslationTable* TranslationTable::release_chrome_histogram() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TranslationTable.chrome_histogram)
  if (table_case() == kChromeHistogram) {
    clear_has_table();
    ::perfetto::protos::ChromeHistorgramTranslationTable* temp = _impl_.table_.chrome_histogram_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.table_.chrome_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeHistorgramTranslationTable& TranslationTable::_internal_chrome_histogram() const {
  return table_case() == kChromeHistogram
      ? *_impl_.table_.chrome_histogram_
      : reinterpret_cast<::perfetto::protos::ChromeHistorgramTranslationTable&>(::perfetto::protos::_ChromeHistorgramTranslationTable_default_instance_);
}
inline const ::perfetto::protos::ChromeHistorgramTranslationTable& TranslationTable::chrome_histogram() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TranslationTable.chrome_histogram)
  return _internal_chrome_histogram();
}
inline ::perfetto::protos::ChromeHistorgramTranslationTable* TranslationTable::unsafe_arena_release_chrome_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TranslationTable.chrome_histogram)
  if (table_case() == kChromeHistogram) {
    clear_has_table();
    ::perfetto::protos::ChromeHistorgramTranslationTable* temp = _impl_.table_.chrome_histogram_;
    _impl_.table_.chrome_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationTable::unsafe_arena_set_allocated_chrome_histogram(::perfetto::protos::ChromeHistorgramTranslationTable* chrome_histogram) {
  clear_table();
  if (chrome_histogram) {
    set_has_chrome_histogram();
    _impl_.table_.chrome_histogram_ = chrome_histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TranslationTable.chrome_histogram)
}
inline ::perfetto::protos::ChromeHistorgramTranslationTable* TranslationTable::_internal_mutable_chrome_histogram() {
  if (table_case() != kChromeHistogram) {
    clear_table();
    set_has_chrome_histogram();
    _impl_.table_.chrome_histogram_ = CreateMaybeMessage< ::perfetto::protos::ChromeHistorgramTranslationTable >(GetArenaForAllocation());
  }
  return _impl_.table_.chrome_histogram_;
}
inline ::perfetto::protos::ChromeHistorgramTranslationTable* TranslationTable::mutable_chrome_histogram() {
  ::perfetto::protos::ChromeHistorgramTranslationTable* _msg = _internal_mutable_chrome_histogram();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TranslationTable.chrome_histogram)
  return _msg;
}

// .perfetto.protos.ChromeUserEventTranslationTable chrome_user_event = 2;
inline bool TranslationTable::has_chrome_user_event() const {
  return table_case() == kChromeUserEvent;
}
inline bool TranslationTable::_internal_has_chrome_user_event() const {
  return table_case() == kChromeUserEvent;
}
inline void TranslationTable::set_has_chrome_user_event() {
  _impl_._oneof_case_[0] = kChromeUserEvent;
}
inline void TranslationTable::clear_chrome_user_event() {
  if (table_case() == kChromeUserEvent) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.table_.chrome_user_event_;
    }
    clear_has_table();
  }
}
inline ::perfetto::protos::ChromeUserEventTranslationTable* TranslationTable::release_chrome_user_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TranslationTable.chrome_user_event)
  if (table_case() == kChromeUserEvent) {
    clear_has_table();
    ::perfetto::protos::ChromeUserEventTranslationTable* temp = _impl_.table_.chrome_user_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.table_.chrome_user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeUserEventTranslationTable& TranslationTable::_internal_chrome_user_event() const {
  return table_case() == kChromeUserEvent
      ? *_impl_.table_.chrome_user_event_
      : reinterpret_cast<::perfetto::protos::ChromeUserEventTranslationTable&>(::perfetto::protos::_ChromeUserEventTranslationTable_default_instance_);
}
inline const ::perfetto::protos::ChromeUserEventTranslationTable& TranslationTable::chrome_user_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TranslationTable.chrome_user_event)
  return _internal_chrome_user_event();
}
inline ::perfetto::protos::ChromeUserEventTranslationTable* TranslationTable::unsafe_arena_release_chrome_user_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TranslationTable.chrome_user_event)
  if (table_case() == kChromeUserEvent) {
    clear_has_table();
    ::perfetto::protos::ChromeUserEventTranslationTable* temp = _impl_.table_.chrome_user_event_;
    _impl_.table_.chrome_user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationTable::unsafe_arena_set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEventTranslationTable* chrome_user_event) {
  clear_table();
  if (chrome_user_event) {
    set_has_chrome_user_event();
    _impl_.table_.chrome_user_event_ = chrome_user_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TranslationTable.chrome_user_event)
}
inline ::perfetto::protos::ChromeUserEventTranslationTable* TranslationTable::_internal_mutable_chrome_user_event() {
  if (table_case() != kChromeUserEvent) {
    clear_table();
    set_has_chrome_user_event();
    _impl_.table_.chrome_user_event_ = CreateMaybeMessage< ::perfetto::protos::ChromeUserEventTranslationTable >(GetArenaForAllocation());
  }
  return _impl_.table_.chrome_user_event_;
}
inline ::perfetto::protos::ChromeUserEventTranslationTable* TranslationTable::mutable_chrome_user_event() {
  ::perfetto::protos::ChromeUserEventTranslationTable* _msg = _internal_mutable_chrome_user_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TranslationTable.chrome_user_event)
  return _msg;
}

// .perfetto.protos.ChromePerformanceMarkTranslationTable chrome_performance_mark = 3;
inline bool TranslationTable::has_chrome_performance_mark() const {
  return table_case() == kChromePerformanceMark;
}
inline bool TranslationTable::_internal_has_chrome_performance_mark() const {
  return table_case() == kChromePerformanceMark;
}
inline void TranslationTable::set_has_chrome_performance_mark() {
  _impl_._oneof_case_[0] = kChromePerformanceMark;
}
inline void TranslationTable::clear_chrome_performance_mark() {
  if (table_case() == kChromePerformanceMark) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.table_.chrome_performance_mark_;
    }
    clear_has_table();
  }
}
inline ::perfetto::protos::ChromePerformanceMarkTranslationTable* TranslationTable::release_chrome_performance_mark() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TranslationTable.chrome_performance_mark)
  if (table_case() == kChromePerformanceMark) {
    clear_has_table();
    ::perfetto::protos::ChromePerformanceMarkTranslationTable* temp = _impl_.table_.chrome_performance_mark_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.table_.chrome_performance_mark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromePerformanceMarkTranslationTable& TranslationTable::_internal_chrome_performance_mark() const {
  return table_case() == kChromePerformanceMark
      ? *_impl_.table_.chrome_performance_mark_
      : reinterpret_cast<::perfetto::protos::ChromePerformanceMarkTranslationTable&>(::perfetto::protos::_ChromePerformanceMarkTranslationTable_default_instance_);
}
inline const ::perfetto::protos::ChromePerformanceMarkTranslationTable& TranslationTable::chrome_performance_mark() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TranslationTable.chrome_performance_mark)
  return _internal_chrome_performance_mark();
}
inline ::perfetto::protos::ChromePerformanceMarkTranslationTable* TranslationTable::unsafe_arena_release_chrome_performance_mark() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TranslationTable.chrome_performance_mark)
  if (table_case() == kChromePerformanceMark) {
    clear_has_table();
    ::perfetto::protos::ChromePerformanceMarkTranslationTable* temp = _impl_.table_.chrome_performance_mark_;
    _impl_.table_.chrome_performance_mark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationTable::unsafe_arena_set_allocated_chrome_performance_mark(::perfetto::protos::ChromePerformanceMarkTranslationTable* chrome_performance_mark) {
  clear_table();
  if (chrome_performance_mark) {
    set_has_chrome_performance_mark();
    _impl_.table_.chrome_performance_mark_ = chrome_performance_mark;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TranslationTable.chrome_performance_mark)
}
inline ::perfetto::protos::ChromePerformanceMarkTranslationTable* TranslationTable::_internal_mutable_chrome_performance_mark() {
  if (table_case() != kChromePerformanceMark) {
    clear_table();
    set_has_chrome_performance_mark();
    _impl_.table_.chrome_performance_mark_ = CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable >(GetArenaForAllocation());
  }
  return _impl_.table_.chrome_performance_mark_;
}
inline ::perfetto::protos::ChromePerformanceMarkTranslationTable* TranslationTable::mutable_chrome_performance_mark() {
  ::perfetto::protos::ChromePerformanceMarkTranslationTable* _msg = _internal_mutable_chrome_performance_mark();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TranslationTable.chrome_performance_mark)
  return _msg;
}

// .perfetto.protos.SliceNameTranslationTable slice_name = 4;
inline bool TranslationTable::has_slice_name() const {
  return table_case() == kSliceName;
}
inline bool TranslationTable::_internal_has_slice_name() const {
  return table_case() == kSliceName;
}
inline void TranslationTable::set_has_slice_name() {
  _impl_._oneof_case_[0] = kSliceName;
}
inline void TranslationTable::clear_slice_name() {
  if (table_case() == kSliceName) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.table_.slice_name_;
    }
    clear_has_table();
  }
}
inline ::perfetto::protos::SliceNameTranslationTable* TranslationTable::release_slice_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TranslationTable.slice_name)
  if (table_case() == kSliceName) {
    clear_has_table();
    ::perfetto::protos::SliceNameTranslationTable* temp = _impl_.table_.slice_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.table_.slice_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SliceNameTranslationTable& TranslationTable::_internal_slice_name() const {
  return table_case() == kSliceName
      ? *_impl_.table_.slice_name_
      : reinterpret_cast<::perfetto::protos::SliceNameTranslationTable&>(::perfetto::protos::_SliceNameTranslationTable_default_instance_);
}
inline const ::perfetto::protos::SliceNameTranslationTable& TranslationTable::slice_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TranslationTable.slice_name)
  return _internal_slice_name();
}
inline ::perfetto::protos::SliceNameTranslationTable* TranslationTable::unsafe_arena_release_slice_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TranslationTable.slice_name)
  if (table_case() == kSliceName) {
    clear_has_table();
    ::perfetto::protos::SliceNameTranslationTable* temp = _impl_.table_.slice_name_;
    _impl_.table_.slice_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TranslationTable::unsafe_arena_set_allocated_slice_name(::perfetto::protos::SliceNameTranslationTable* slice_name) {
  clear_table();
  if (slice_name) {
    set_has_slice_name();
    _impl_.table_.slice_name_ = slice_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TranslationTable.slice_name)
}
inline ::perfetto::protos::SliceNameTranslationTable* TranslationTable::_internal_mutable_slice_name() {
  if (table_case() != kSliceName) {
    clear_table();
    set_has_slice_name();
    _impl_.table_.slice_name_ = CreateMaybeMessage< ::perfetto::protos::SliceNameTranslationTable >(GetArenaForAllocation());
  }
  return _impl_.table_.slice_name_;
}
inline ::perfetto::protos::SliceNameTranslationTable* TranslationTable::mutable_slice_name() {
  ::perfetto::protos::SliceNameTranslationTable* _msg = _internal_mutable_slice_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TranslationTable.slice_name)
  return _msg;
}

inline bool TranslationTable::has_table() const {
  return table_case() != TABLE_NOT_SET;
}
inline void TranslationTable::clear_has_table() {
  _impl_._oneof_case_[0] = TABLE_NOT_SET;
}
inline TranslationTable::TableCase TranslationTable::table_case() const {
  return TranslationTable::TableCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChromeHistorgramTranslationTable

// map<uint64, string> hash_to_name = 1;
inline int ChromeHistorgramTranslationTable::_internal_hash_to_name_size() const {
  return _impl_.hash_to_name_.size();
}
inline int ChromeHistorgramTranslationTable::hash_to_name_size() const {
  return _internal_hash_to_name_size();
}
inline void ChromeHistorgramTranslationTable::clear_hash_to_name() {
  _impl_.hash_to_name_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
ChromeHistorgramTranslationTable::_internal_hash_to_name() const {
  return _impl_.hash_to_name_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
ChromeHistorgramTranslationTable::hash_to_name() const {
  // @@protoc_insertion_point(field_map:perfetto.protos.ChromeHistorgramTranslationTable.hash_to_name)
  return _internal_hash_to_name();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
ChromeHistorgramTranslationTable::_internal_mutable_hash_to_name() {
  return _impl_.hash_to_name_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
ChromeHistorgramTranslationTable::mutable_hash_to_name() {
  // @@protoc_insertion_point(field_mutable_map:perfetto.protos.ChromeHistorgramTranslationTable.hash_to_name)
  return _internal_mutable_hash_to_name();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChromeUserEventTranslationTable

// map<uint64, string> action_hash_to_name = 1;
inline int ChromeUserEventTranslationTable::_internal_action_hash_to_name_size() const {
  return _impl_.action_hash_to_name_.size();
}
inline int ChromeUserEventTranslationTable::action_hash_to_name_size() const {
  return _internal_action_hash_to_name_size();
}
inline void ChromeUserEventTranslationTable::clear_action_hash_to_name() {
  _impl_.action_hash_to_name_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
ChromeUserEventTranslationTable::_internal_action_hash_to_name() const {
  return _impl_.action_hash_to_name_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >&
ChromeUserEventTranslationTable::action_hash_to_name() const {
  // @@protoc_insertion_point(field_map:perfetto.protos.ChromeUserEventTranslationTable.action_hash_to_name)
  return _internal_action_hash_to_name();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
ChromeUserEventTranslationTable::_internal_mutable_action_hash_to_name() {
  return _impl_.action_hash_to_name_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >*
ChromeUserEventTranslationTable::mutable_action_hash_to_name() {
  // @@protoc_insertion_point(field_mutable_map:perfetto.protos.ChromeUserEventTranslationTable.action_hash_to_name)
  return _internal_mutable_action_hash_to_name();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChromePerformanceMarkTranslationTable

// map<uint32, string> site_hash_to_name = 1;
inline int ChromePerformanceMarkTranslationTable::_internal_site_hash_to_name_size() const {
  return _impl_.site_hash_to_name_.size();
}
inline int ChromePerformanceMarkTranslationTable::site_hash_to_name_size() const {
  return _internal_site_hash_to_name_size();
}
inline void ChromePerformanceMarkTranslationTable::clear_site_hash_to_name() {
  _impl_.site_hash_to_name_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
ChromePerformanceMarkTranslationTable::_internal_site_hash_to_name() const {
  return _impl_.site_hash_to_name_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
ChromePerformanceMarkTranslationTable::site_hash_to_name() const {
  // @@protoc_insertion_point(field_map:perfetto.protos.ChromePerformanceMarkTranslationTable.site_hash_to_name)
  return _internal_site_hash_to_name();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
ChromePerformanceMarkTranslationTable::_internal_mutable_site_hash_to_name() {
  return _impl_.site_hash_to_name_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
ChromePerformanceMarkTranslationTable::mutable_site_hash_to_name() {
  // @@protoc_insertion_point(field_mutable_map:perfetto.protos.ChromePerformanceMarkTranslationTable.site_hash_to_name)
  return _internal_mutable_site_hash_to_name();
}

// map<uint32, string> mark_hash_to_name = 2;
inline int ChromePerformanceMarkTranslationTable::_internal_mark_hash_to_name_size() const {
  return _impl_.mark_hash_to_name_.size();
}
inline int ChromePerformanceMarkTranslationTable::mark_hash_to_name_size() const {
  return _internal_mark_hash_to_name_size();
}
inline void ChromePerformanceMarkTranslationTable::clear_mark_hash_to_name() {
  _impl_.mark_hash_to_name_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
ChromePerformanceMarkTranslationTable::_internal_mark_hash_to_name() const {
  return _impl_.mark_hash_to_name_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >&
ChromePerformanceMarkTranslationTable::mark_hash_to_name() const {
  // @@protoc_insertion_point(field_map:perfetto.protos.ChromePerformanceMarkTranslationTable.mark_hash_to_name)
  return _internal_mark_hash_to_name();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
ChromePerformanceMarkTranslationTable::_internal_mutable_mark_hash_to_name() {
  return _impl_.mark_hash_to_name_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >*
ChromePerformanceMarkTranslationTable::mutable_mark_hash_to_name() {
  // @@protoc_insertion_point(field_mutable_map:perfetto.protos.ChromePerformanceMarkTranslationTable.mark_hash_to_name)
  return _internal_mutable_mark_hash_to_name();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SliceNameTranslationTable

// map<string, string> raw_to_deobfuscated_name = 1;
inline int SliceNameTranslationTable::_internal_raw_to_deobfuscated_name_size() const {
  return _impl_.raw_to_deobfuscated_name_.size();
}
inline int SliceNameTranslationTable::raw_to_deobfuscated_name_size() const {
  return _internal_raw_to_deobfuscated_name_size();
}
inline void SliceNameTranslationTable::clear_raw_to_deobfuscated_name() {
  _impl_.raw_to_deobfuscated_name_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SliceNameTranslationTable::_internal_raw_to_deobfuscated_name() const {
  return _impl_.raw_to_deobfuscated_name_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SliceNameTranslationTable::raw_to_deobfuscated_name() const {
  // @@protoc_insertion_point(field_map:perfetto.protos.SliceNameTranslationTable.raw_to_deobfuscated_name)
  return _internal_raw_to_deobfuscated_name();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SliceNameTranslationTable::_internal_mutable_raw_to_deobfuscated_name() {
  return _impl_.raw_to_deobfuscated_name_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SliceNameTranslationTable::mutable_raw_to_deobfuscated_name() {
  // @@protoc_insertion_point(field_mutable_map:perfetto.protos.SliceNameTranslationTable.raw_to_deobfuscated_name)
  return _internal_mutable_raw_to_deobfuscated_name();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_2epb_2eh
