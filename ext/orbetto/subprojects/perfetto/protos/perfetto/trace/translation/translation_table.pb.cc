// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/translation/translation_table.proto

#include "protos/perfetto/trace/translation/translation_table.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TranslationTable::TranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslationTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslationTableDefaultTypeInternal() {}
  union {
    TranslationTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslationTableDefaultTypeInternal _TranslationTable_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUseDefaultTypeInternal _ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTable::ChromeHistorgramTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_to_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromeHistorgramTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeHistorgramTranslationTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeHistorgramTranslationTableDefaultTypeInternal() {}
  union {
    ChromeHistorgramTranslationTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeHistorgramTranslationTableDefaultTypeInternal _ChromeHistorgramTranslationTable_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUseDefaultTypeInternal _ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeUserEventTranslationTable::ChromeUserEventTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_hash_to_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromeUserEventTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeUserEventTranslationTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeUserEventTranslationTableDefaultTypeInternal() {}
  union {
    ChromeUserEventTranslationTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeUserEventTranslationTableDefaultTypeInternal _ChromeUserEventTranslationTable_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUseDefaultTypeInternal _ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUseDefaultTypeInternal _ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTable::ChromePerformanceMarkTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.site_hash_to_name_)*/{}
  , /*decltype(_impl_.mark_hash_to_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChromePerformanceMarkTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromePerformanceMarkTranslationTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromePerformanceMarkTranslationTableDefaultTypeInternal() {}
  union {
    ChromePerformanceMarkTranslationTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromePerformanceMarkTranslationTableDefaultTypeInternal _ChromePerformanceMarkTranslationTable_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUseDefaultTypeInternal _SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SliceNameTranslationTable::SliceNameTranslationTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.raw_to_deobfuscated_name_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SliceNameTranslationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SliceNameTranslationTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SliceNameTranslationTableDefaultTypeInternal() {}
  union {
    SliceNameTranslationTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SliceNameTranslationTableDefaultTypeInternal _SliceNameTranslationTable_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TranslationTable, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TranslationTable, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TranslationTable, _impl_.table_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeHistorgramTranslationTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeHistorgramTranslationTable, _impl_.hash_to_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeUserEventTranslationTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeUserEventTranslationTable, _impl_.action_hash_to_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable, _impl_.site_hash_to_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromePerformanceMarkTranslationTable, _impl_.mark_hash_to_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SliceNameTranslationTable, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SliceNameTranslationTable, _impl_.raw_to_deobfuscated_name_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::perfetto::protos::TranslationTable)},
        { 13, 23, -1, sizeof(::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse)},
        { 25, -1, -1, sizeof(::perfetto::protos::ChromeHistorgramTranslationTable)},
        { 34, 44, -1, sizeof(::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse)},
        { 46, -1, -1, sizeof(::perfetto::protos::ChromeUserEventTranslationTable)},
        { 55, 65, -1, sizeof(::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse)},
        { 67, 77, -1, sizeof(::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse)},
        { 79, -1, -1, sizeof(::perfetto::protos::ChromePerformanceMarkTranslationTable)},
        { 89, 99, -1, sizeof(::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse)},
        { 101, -1, -1, sizeof(::perfetto::protos::SliceNameTranslationTable)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TranslationTable_default_instance_._instance,
    &::perfetto::protos::_ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse_default_instance_._instance,
    &::perfetto::protos::_ChromeHistorgramTranslationTable_default_instance_._instance,
    &::perfetto::protos::_ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse_default_instance_._instance,
    &::perfetto::protos::_ChromeUserEventTranslationTable_default_instance_._instance,
    &::perfetto::protos::_ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse_default_instance_._instance,
    &::perfetto::protos::_ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse_default_instance_._instance,
    &::perfetto::protos::_ChromePerformanceMarkTranslationTable_default_instance_._instance,
    &::perfetto::protos::_SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse_default_instance_._instance,
    &::perfetto::protos::_SliceNameTranslationTable_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n9protos/perfetto/trace/translation/tran"
    "slation_table.proto\022\017perfetto.protos\"\326\002\n"
    "\020TranslationTable\022M\n\020chrome_histogram\030\001 "
    "\001(\01321.perfetto.protos.ChromeHistorgramTr"
    "anslationTableH\000\022M\n\021chrome_user_event\030\002 "
    "\001(\01320.perfetto.protos.ChromeUserEventTra"
    "nslationTableH\000\022Y\n\027chrome_performance_ma"
    "rk\030\003 \001(\01326.perfetto.protos.ChromePerform"
    "anceMarkTranslationTableH\000\022@\n\nslice_name"
    "\030\004 \001(\0132*.perfetto.protos.SliceNameTransl"
    "ationTableH\000B\007\n\005table\"\256\001\n ChromeHistorgr"
    "amTranslationTable\022W\n\014hash_to_name\030\001 \003(\013"
    "2A.perfetto.protos.ChromeHistorgramTrans"
    "lationTable.HashToNameEntry\0321\n\017HashToNam"
    "eEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\"\277"
    "\001\n\037ChromeUserEventTranslationTable\022c\n\023ac"
    "tion_hash_to_name\030\001 \003(\0132F.perfetto.proto"
    "s.ChromeUserEventTranslationTable.Action"
    "HashToNameEntry\0327\n\025ActionHashToNameEntry"
    "\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\"\343\002\n%Chr"
    "omePerformanceMarkTranslationTable\022e\n\021si"
    "te_hash_to_name\030\001 \003(\0132J.perfetto.protos."
    "ChromePerformanceMarkTranslationTable.Si"
    "teHashToNameEntry\022e\n\021mark_hash_to_name\030\002"
    " \003(\0132J.perfetto.protos.ChromePerformance"
    "MarkTranslationTable.MarkHashToNameEntry"
    "\0325\n\023SiteHashToNameEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005"
    "value\030\002 \001(\t:\0028\001\0325\n\023MarkHashToNameEntry\022\013"
    "\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\t:\0028\001\"\302\001\n\031Slice"
    "NameTranslationTable\022g\n\030raw_to_deobfusca"
    "ted_name\030\001 \003(\0132E.perfetto.protos.SliceNa"
    "meTranslationTable.RawToDeobfuscatedName"
    "Entry\032<\n\032RawToDeobfuscatedNameEntry\022\013\n\003k"
    "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto = {
    false,
    false,
    1347,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto,
    "protos/perfetto/trace/translation/translation_table.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
    nullptr,
    0,
    10,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class TranslationTable::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TranslationTable, _impl_._oneof_case_);
  static const ::perfetto::protos::ChromeHistorgramTranslationTable& chrome_histogram(const TranslationTable* msg);
  static const ::perfetto::protos::ChromeUserEventTranslationTable& chrome_user_event(const TranslationTable* msg);
  static const ::perfetto::protos::ChromePerformanceMarkTranslationTable& chrome_performance_mark(const TranslationTable* msg);
  static const ::perfetto::protos::SliceNameTranslationTable& slice_name(const TranslationTable* msg);
};

const ::perfetto::protos::ChromeHistorgramTranslationTable&
TranslationTable::_Internal::chrome_histogram(const TranslationTable* msg) {
  return *msg->_impl_.table_.chrome_histogram_;
}
const ::perfetto::protos::ChromeUserEventTranslationTable&
TranslationTable::_Internal::chrome_user_event(const TranslationTable* msg) {
  return *msg->_impl_.table_.chrome_user_event_;
}
const ::perfetto::protos::ChromePerformanceMarkTranslationTable&
TranslationTable::_Internal::chrome_performance_mark(const TranslationTable* msg) {
  return *msg->_impl_.table_.chrome_performance_mark_;
}
const ::perfetto::protos::SliceNameTranslationTable&
TranslationTable::_Internal::slice_name(const TranslationTable* msg) {
  return *msg->_impl_.table_.slice_name_;
}
void TranslationTable::set_allocated_chrome_histogram(::perfetto::protos::ChromeHistorgramTranslationTable* chrome_histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (chrome_histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_histogram);
    if (message_arena != submessage_arena) {
      chrome_histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_histogram, submessage_arena);
    }
    set_has_chrome_histogram();
    _impl_.table_.chrome_histogram_ = chrome_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.chrome_histogram)
}
void TranslationTable::set_allocated_chrome_user_event(::perfetto::protos::ChromeUserEventTranslationTable* chrome_user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (chrome_user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_user_event);
    if (message_arena != submessage_arena) {
      chrome_user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_user_event, submessage_arena);
    }
    set_has_chrome_user_event();
    _impl_.table_.chrome_user_event_ = chrome_user_event;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.chrome_user_event)
}
void TranslationTable::set_allocated_chrome_performance_mark(::perfetto::protos::ChromePerformanceMarkTranslationTable* chrome_performance_mark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (chrome_performance_mark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_performance_mark);
    if (message_arena != submessage_arena) {
      chrome_performance_mark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_performance_mark, submessage_arena);
    }
    set_has_chrome_performance_mark();
    _impl_.table_.chrome_performance_mark_ = chrome_performance_mark;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.chrome_performance_mark)
}
void TranslationTable::set_allocated_slice_name(::perfetto::protos::SliceNameTranslationTable* slice_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_table();
  if (slice_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(slice_name);
    if (message_arena != submessage_arena) {
      slice_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_name, submessage_arena);
    }
    set_has_slice_name();
    _impl_.table_.slice_name_ = slice_name;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TranslationTable.slice_name)
}
TranslationTable::TranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TranslationTable)
}
TranslationTable::TranslationTable(const TranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_table();
  switch (from.table_case()) {
    case kChromeHistogram: {
      _this->_internal_mutable_chrome_histogram()->::perfetto::protos::ChromeHistorgramTranslationTable::MergeFrom(
          from._internal_chrome_histogram());
      break;
    }
    case kChromeUserEvent: {
      _this->_internal_mutable_chrome_user_event()->::perfetto::protos::ChromeUserEventTranslationTable::MergeFrom(
          from._internal_chrome_user_event());
      break;
    }
    case kChromePerformanceMark: {
      _this->_internal_mutable_chrome_performance_mark()->::perfetto::protos::ChromePerformanceMarkTranslationTable::MergeFrom(
          from._internal_chrome_performance_mark());
      break;
    }
    case kSliceName: {
      _this->_internal_mutable_slice_name()->::perfetto::protos::SliceNameTranslationTable::MergeFrom(
          from._internal_slice_name());
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TranslationTable)
}

inline void TranslationTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_table();
}

TranslationTable::~TranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranslationTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_table()) {
    clear_table();
  }
}

void TranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranslationTable::clear_table() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TranslationTable)
  switch (table_case()) {
    case kChromeHistogram: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.chrome_histogram_;
      }
      break;
    }
    case kChromeUserEvent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.chrome_user_event_;
      }
      break;
    }
    case kChromePerformanceMark: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.chrome_performance_mark_;
      }
      break;
    }
    case kSliceName: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.table_.slice_name_;
      }
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TABLE_NOT_SET;
}


void TranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TranslationTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_table();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.ChromeHistorgramTranslationTable chrome_histogram = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_histogram(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ChromeUserEventTranslationTable chrome_user_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_user_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.ChromePerformanceMarkTranslationTable chrome_performance_mark = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_performance_mark(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SliceNameTranslationTable slice_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_name(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TranslationTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TranslationTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (table_case()) {
    case kChromeHistogram: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::chrome_histogram(this),
          _Internal::chrome_histogram(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromeUserEvent: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::chrome_user_event(this),
          _Internal::chrome_user_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kChromePerformanceMark: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::chrome_performance_mark(this),
          _Internal::chrome_performance_mark(this).GetCachedSize(), target, stream);
      break;
    }
    case kSliceName: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::slice_name(this),
          _Internal::slice_name(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TranslationTable)
  return target;
}

::size_t TranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TranslationTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (table_case()) {
    // .perfetto.protos.ChromeHistorgramTranslationTable chrome_histogram = 1;
    case kChromeHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.chrome_histogram_);
      break;
    }
    // .perfetto.protos.ChromeUserEventTranslationTable chrome_user_event = 2;
    case kChromeUserEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.chrome_user_event_);
      break;
    }
    // .perfetto.protos.ChromePerformanceMarkTranslationTable chrome_performance_mark = 3;
    case kChromePerformanceMark: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.chrome_performance_mark_);
      break;
    }
    // .perfetto.protos.SliceNameTranslationTable slice_name = 4;
    case kSliceName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_.slice_name_);
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslationTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TranslationTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslationTable::GetClassData() const { return &_class_data_; }


void TranslationTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TranslationTable*>(&to_msg);
  auto& from = static_cast<const TranslationTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TranslationTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.table_case()) {
    case kChromeHistogram: {
      _this->_internal_mutable_chrome_histogram()->::perfetto::protos::ChromeHistorgramTranslationTable::MergeFrom(
          from._internal_chrome_histogram());
      break;
    }
    case kChromeUserEvent: {
      _this->_internal_mutable_chrome_user_event()->::perfetto::protos::ChromeUserEventTranslationTable::MergeFrom(
          from._internal_chrome_user_event());
      break;
    }
    case kChromePerformanceMark: {
      _this->_internal_mutable_chrome_performance_mark()->::perfetto::protos::ChromePerformanceMarkTranslationTable::MergeFrom(
          from._internal_chrome_performance_mark());
      break;
    }
    case kSliceName: {
      _this->_internal_mutable_slice_name()->::perfetto::protos::SliceNameTranslationTable::MergeFrom(
          from._internal_slice_name());
      break;
    }
    case TABLE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslationTable::CopyFrom(const TranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslationTable::IsInitialized() const {
  return true;
}

void TranslationTable::InternalSwap(TranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.table_, other->_impl_.table_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslationTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[0]);
}
// ===================================================================

ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse() {}
ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::MergeFrom(const ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[1]);
}
// ===================================================================

class ChromeHistorgramTranslationTable::_Internal {
 public:
};

ChromeHistorgramTranslationTable::ChromeHistorgramTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeHistorgramTranslationTable)
}
ChromeHistorgramTranslationTable::ChromeHistorgramTranslationTable(const ChromeHistorgramTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeHistorgramTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.hash_to_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hash_to_name_.MergeFrom(from._impl_.hash_to_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeHistorgramTranslationTable)
}

inline void ChromeHistorgramTranslationTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromeHistorgramTranslationTable::~ChromeHistorgramTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeHistorgramTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeHistorgramTranslationTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_to_name_.~MapField();
}

void ChromeHistorgramTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeHistorgramTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeHistorgramTranslationTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_to_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeHistorgramTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, string> hash_to_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeHistorgramTranslationTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeHistorgramTranslationTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> hash_to_name = 1;
  if (!this->_internal_hash_to_name().empty()) {
    using MapType = ::_pb::Map<::uint64_t, std::string>;
    using WireHelper = ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromeHistorgramTranslationTable.hash_to_name");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeHistorgramTranslationTable)
  return target;
}

::size_t ChromeHistorgramTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeHistorgramTranslationTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> hash_to_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >::const_iterator
      it = this->_internal_hash_to_name().begin();
      it != this->_internal_hash_to_name().end(); ++it) {
    total_size += ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeHistorgramTranslationTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeHistorgramTranslationTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeHistorgramTranslationTable::GetClassData() const { return &_class_data_; }


void ChromeHistorgramTranslationTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeHistorgramTranslationTable*>(&to_msg);
  auto& from = static_cast<const ChromeHistorgramTranslationTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeHistorgramTranslationTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hash_to_name_.MergeFrom(from._impl_.hash_to_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeHistorgramTranslationTable::CopyFrom(const ChromeHistorgramTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeHistorgramTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeHistorgramTranslationTable::IsInitialized() const {
  return true;
}

void ChromeHistorgramTranslationTable::InternalSwap(ChromeHistorgramTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hash_to_name_.InternalSwap(&other->_impl_.hash_to_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeHistorgramTranslationTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[2]);
}
// ===================================================================

ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse() {}
ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::MergeFrom(const ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[3]);
}
// ===================================================================

class ChromeUserEventTranslationTable::_Internal {
 public:
};

ChromeUserEventTranslationTable::ChromeUserEventTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeUserEventTranslationTable)
}
ChromeUserEventTranslationTable::ChromeUserEventTranslationTable(const ChromeUserEventTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeUserEventTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.action_hash_to_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.action_hash_to_name_.MergeFrom(from._impl_.action_hash_to_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeUserEventTranslationTable)
}

inline void ChromeUserEventTranslationTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.action_hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromeUserEventTranslationTable::~ChromeUserEventTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeUserEventTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeUserEventTranslationTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_hash_to_name_.~MapField();
}

void ChromeUserEventTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeUserEventTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeUserEventTranslationTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_hash_to_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeUserEventTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, string> action_hash_to_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.action_hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeUserEventTranslationTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeUserEventTranslationTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> action_hash_to_name = 1;
  if (!this->_internal_action_hash_to_name().empty()) {
    using MapType = ::_pb::Map<::uint64_t, std::string>;
    using WireHelper = ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_action_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromeUserEventTranslationTable.action_hash_to_name");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeUserEventTranslationTable)
  return target;
}

::size_t ChromeUserEventTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeUserEventTranslationTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> action_hash_to_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_action_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint64_t, std::string >::const_iterator
      it = this->_internal_action_hash_to_name().begin();
      it != this->_internal_action_hash_to_name().end(); ++it) {
    total_size += ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeUserEventTranslationTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeUserEventTranslationTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeUserEventTranslationTable::GetClassData() const { return &_class_data_; }


void ChromeUserEventTranslationTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeUserEventTranslationTable*>(&to_msg);
  auto& from = static_cast<const ChromeUserEventTranslationTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeUserEventTranslationTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.action_hash_to_name_.MergeFrom(from._impl_.action_hash_to_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeUserEventTranslationTable::CopyFrom(const ChromeUserEventTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeUserEventTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeUserEventTranslationTable::IsInitialized() const {
  return true;
}

void ChromeUserEventTranslationTable::InternalSwap(ChromeUserEventTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.action_hash_to_name_.InternalSwap(&other->_impl_.action_hash_to_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeUserEventTranslationTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[4]);
}
// ===================================================================

ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse() {}
ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::MergeFrom(const ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[5]);
}
// ===================================================================

ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse() {}
ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::MergeFrom(const ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[6]);
}
// ===================================================================

class ChromePerformanceMarkTranslationTable::_Internal {
 public:
};

ChromePerformanceMarkTranslationTable::ChromePerformanceMarkTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromePerformanceMarkTranslationTable)
}
ChromePerformanceMarkTranslationTable::ChromePerformanceMarkTranslationTable(const ChromePerformanceMarkTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromePerformanceMarkTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.site_hash_to_name_)*/{}
    , /*decltype(_impl_.mark_hash_to_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.site_hash_to_name_.MergeFrom(from._impl_.site_hash_to_name_);
  _this->_impl_.mark_hash_to_name_.MergeFrom(from._impl_.mark_hash_to_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromePerformanceMarkTranslationTable)
}

inline void ChromePerformanceMarkTranslationTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.site_hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.mark_hash_to_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChromePerformanceMarkTranslationTable::~ChromePerformanceMarkTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromePerformanceMarkTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromePerformanceMarkTranslationTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.site_hash_to_name_.~MapField();
  _impl_.mark_hash_to_name_.~MapField();
}

void ChromePerformanceMarkTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromePerformanceMarkTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.site_hash_to_name_.Clear();
  _impl_.mark_hash_to_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromePerformanceMarkTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, string> site_hash_to_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.site_hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint32, string> mark_hash_to_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mark_hash_to_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromePerformanceMarkTranslationTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, string> site_hash_to_name = 1;
  if (!this->_internal_site_hash_to_name().empty()) {
    using MapType = ::_pb::Map<::uint32_t, std::string>;
    using WireHelper = ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_site_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromePerformanceMarkTranslationTable.site_hash_to_name");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<uint32, string> mark_hash_to_name = 2;
  if (!this->_internal_mark_hash_to_name().empty()) {
    using MapType = ::_pb::Map<::uint32_t, std::string>;
    using WireHelper = ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mark_hash_to_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.ChromePerformanceMarkTranslationTable.mark_hash_to_name");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromePerformanceMarkTranslationTable)
  return target;
}

::size_t ChromePerformanceMarkTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> site_hash_to_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_site_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >::const_iterator
      it = this->_internal_site_hash_to_name().begin();
      it != this->_internal_site_hash_to_name().end(); ++it) {
    total_size += ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, string> mark_hash_to_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mark_hash_to_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, std::string >::const_iterator
      it = this->_internal_mark_hash_to_name().begin();
      it != this->_internal_mark_hash_to_name().end(); ++it) {
    total_size += ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromePerformanceMarkTranslationTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromePerformanceMarkTranslationTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromePerformanceMarkTranslationTable::GetClassData() const { return &_class_data_; }


void ChromePerformanceMarkTranslationTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromePerformanceMarkTranslationTable*>(&to_msg);
  auto& from = static_cast<const ChromePerformanceMarkTranslationTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.site_hash_to_name_.MergeFrom(from._impl_.site_hash_to_name_);
  _this->_impl_.mark_hash_to_name_.MergeFrom(from._impl_.mark_hash_to_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromePerformanceMarkTranslationTable::CopyFrom(const ChromePerformanceMarkTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromePerformanceMarkTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromePerformanceMarkTranslationTable::IsInitialized() const {
  return true;
}

void ChromePerformanceMarkTranslationTable::InternalSwap(ChromePerformanceMarkTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.site_hash_to_name_.InternalSwap(&other->_impl_.site_hash_to_name_);
  _impl_.mark_hash_to_name_.InternalSwap(&other->_impl_.mark_hash_to_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromePerformanceMarkTranslationTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[7]);
}
// ===================================================================

SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse() {}
SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::MergeFrom(const SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[8]);
}
// ===================================================================

class SliceNameTranslationTable::_Internal {
 public:
};

SliceNameTranslationTable::SliceNameTranslationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SliceNameTranslationTable)
}
SliceNameTranslationTable::SliceNameTranslationTable(const SliceNameTranslationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SliceNameTranslationTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_to_deobfuscated_name_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.raw_to_deobfuscated_name_.MergeFrom(from._impl_.raw_to_deobfuscated_name_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SliceNameTranslationTable)
}

inline void SliceNameTranslationTable::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.raw_to_deobfuscated_name_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SliceNameTranslationTable::~SliceNameTranslationTable() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SliceNameTranslationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SliceNameTranslationTable::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.raw_to_deobfuscated_name_.~MapField();
}

void SliceNameTranslationTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SliceNameTranslationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SliceNameTranslationTable)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.raw_to_deobfuscated_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceNameTranslationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> raw_to_deobfuscated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.raw_to_deobfuscated_name_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SliceNameTranslationTable::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SliceNameTranslationTable)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> raw_to_deobfuscated_name = 1;
  if (!this->_internal_raw_to_deobfuscated_name().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_raw_to_deobfuscated_name();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.SliceNameTranslationTable.raw_to_deobfuscated_name");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.SliceNameTranslationTable.raw_to_deobfuscated_name");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SliceNameTranslationTable)
  return target;
}

::size_t SliceNameTranslationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SliceNameTranslationTable)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> raw_to_deobfuscated_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_raw_to_deobfuscated_name_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_raw_to_deobfuscated_name().begin();
      it != this->_internal_raw_to_deobfuscated_name().end(); ++it) {
    total_size += SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SliceNameTranslationTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SliceNameTranslationTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SliceNameTranslationTable::GetClassData() const { return &_class_data_; }


void SliceNameTranslationTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SliceNameTranslationTable*>(&to_msg);
  auto& from = static_cast<const SliceNameTranslationTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SliceNameTranslationTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.raw_to_deobfuscated_name_.MergeFrom(from._impl_.raw_to_deobfuscated_name_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SliceNameTranslationTable::CopyFrom(const SliceNameTranslationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SliceNameTranslationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceNameTranslationTable::IsInitialized() const {
  return true;
}

void SliceNameTranslationTable::InternalSwap(SliceNameTranslationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.raw_to_deobfuscated_name_.InternalSwap(&other->_impl_.raw_to_deobfuscated_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceNameTranslationTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftranslation_2ftranslation_5ftable_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::TranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeHistorgramTranslationTable_HashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeHistorgramTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeHistorgramTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeHistorgramTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeUserEventTranslationTable_ActionHashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeUserEventTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeUserEventTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeUserEventTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromePerformanceMarkTranslationTable_SiteHashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromePerformanceMarkTranslationTable_MarkHashToNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromePerformanceMarkTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromePerformanceMarkTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromePerformanceMarkTranslationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse*
Arena::CreateMaybeMessage< ::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SliceNameTranslationTable_RawToDeobfuscatedNameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SliceNameTranslationTable*
Arena::CreateMaybeMessage< ::perfetto::protos::SliceNameTranslationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SliceNameTranslationTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
