// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/sys_stats/sys_stats.proto

#include "protos/perfetto/trace/sys_stats/sys_stats.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR SysStats_MeminfoValue::SysStats_MeminfoValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.key_)*/ 0
} {}
struct SysStats_MeminfoValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_MeminfoValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_MeminfoValueDefaultTypeInternal() {}
  union {
    SysStats_MeminfoValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_MeminfoValueDefaultTypeInternal _SysStats_MeminfoValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats_VmstatValue::SysStats_VmstatValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.key_)*/ 0
} {}
struct SysStats_VmstatValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_VmstatValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_VmstatValueDefaultTypeInternal() {}
  union {
    SysStats_VmstatValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_VmstatValueDefaultTypeInternal _SysStats_VmstatValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats_CpuTimes::SysStats_CpuTimes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.user_ice_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.system_mode_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.idle_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.io_wait_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.irq_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.softirq_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.cpu_id_)*/ 0u
} {}
struct SysStats_CpuTimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_CpuTimesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_CpuTimesDefaultTypeInternal() {}
  union {
    SysStats_CpuTimes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_CpuTimesDefaultTypeInternal _SysStats_CpuTimes_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats_InterruptCount::SysStats_InterruptCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.irq_)*/ 0
} {}
struct SysStats_InterruptCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_InterruptCountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_InterruptCountDefaultTypeInternal() {}
  union {
    SysStats_InterruptCount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_InterruptCountDefaultTypeInternal _SysStats_InterruptCount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats_DevfreqValue::SysStats_DevfreqValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ ::uint64_t{0u}
} {}
struct SysStats_DevfreqValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_DevfreqValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_DevfreqValueDefaultTypeInternal() {}
  union {
    SysStats_DevfreqValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_DevfreqValueDefaultTypeInternal _SysStats_DevfreqValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats_BuddyInfo::SysStats_BuddyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_pages_)*/ {}

  , /*decltype(_impl_.node_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zone_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SysStats_BuddyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_BuddyInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_BuddyInfoDefaultTypeInternal() {}
  union {
    SysStats_BuddyInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_BuddyInfoDefaultTypeInternal _SysStats_BuddyInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats_DiskStat::SysStats_DiskStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.device_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.read_sectors_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.read_time_ms_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.write_sectors_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.write_time_ms_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.discard_sectors_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.discard_time_ms_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flush_count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flush_time_ms_)*/ ::uint64_t{0u}
} {}
struct SysStats_DiskStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStats_DiskStatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStats_DiskStatDefaultTypeInternal() {}
  union {
    SysStats_DiskStat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStats_DiskStatDefaultTypeInternal _SysStats_DiskStat_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SysStats::SysStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.meminfo_)*/{}
  , /*decltype(_impl_.vmstat_)*/{}
  , /*decltype(_impl_.cpu_stat_)*/{}
  , /*decltype(_impl_.num_irq_)*/{}
  , /*decltype(_impl_.num_softirq_)*/{}
  , /*decltype(_impl_.devfreq_)*/{}
  , /*decltype(_impl_.cpufreq_khz_)*/ {}

  , /*decltype(_impl_.buddy_info_)*/{}
  , /*decltype(_impl_.disk_stat_)*/{}
  , /*decltype(_impl_.num_forks_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.num_irq_total_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.num_softirq_total_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.collection_end_timestamp_)*/ ::uint64_t{0u}
} {}
struct SysStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysStatsDefaultTypeInternal() {}
  union {
    SysStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysStatsDefaultTypeInternal _SysStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_MeminfoValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_MeminfoValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_MeminfoValue, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_MeminfoValue, _impl_.value_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_VmstatValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_VmstatValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_VmstatValue, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_VmstatValue, _impl_.value_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.cpu_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.user_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.user_ice_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.system_mode_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.idle_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.io_wait_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.irq_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_CpuTimes, _impl_.softirq_ns_),
    7,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_InterruptCount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_InterruptCount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_InterruptCount, _impl_.irq_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_InterruptCount, _impl_.count_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DevfreqValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DevfreqValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DevfreqValue, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DevfreqValue, _impl_.value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_BuddyInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_BuddyInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_BuddyInfo, _impl_.node_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_BuddyInfo, _impl_.zone_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_BuddyInfo, _impl_.order_pages_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.device_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.read_sectors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.read_time_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.write_sectors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.write_time_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.discard_sectors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.discard_time_ms_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.flush_count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats_DiskStat, _impl_.flush_time_ms_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.meminfo_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.vmstat_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.cpu_stat_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.num_forks_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.num_irq_total_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.num_irq_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.num_softirq_total_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.num_softirq_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.collection_end_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.devfreq_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.cpufreq_khz_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.buddy_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SysStats, _impl_.disk_stat_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    2,
    ~0u,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::SysStats_MeminfoValue)},
        { 12, 22, -1, sizeof(::perfetto::protos::SysStats_VmstatValue)},
        { 24, 40, -1, sizeof(::perfetto::protos::SysStats_CpuTimes)},
        { 48, 58, -1, sizeof(::perfetto::protos::SysStats_InterruptCount)},
        { 60, 70, -1, sizeof(::perfetto::protos::SysStats_DevfreqValue)},
        { 72, 83, -1, sizeof(::perfetto::protos::SysStats_BuddyInfo)},
        { 86, 103, -1, sizeof(::perfetto::protos::SysStats_DiskStat)},
        { 112, 133, -1, sizeof(::perfetto::protos::SysStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_SysStats_MeminfoValue_default_instance_._instance,
    &::perfetto::protos::_SysStats_VmstatValue_default_instance_._instance,
    &::perfetto::protos::_SysStats_CpuTimes_default_instance_._instance,
    &::perfetto::protos::_SysStats_InterruptCount_default_instance_._instance,
    &::perfetto::protos::_SysStats_DevfreqValue_default_instance_._instance,
    &::perfetto::protos::_SysStats_BuddyInfo_default_instance_._instance,
    &::perfetto::protos::_SysStats_DiskStat_default_instance_._instance,
    &::perfetto::protos::_SysStats_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/protos/perfetto/trace/sys_stats/sys_st"
    "ats.proto\022\017perfetto.protos\032/protos/perfe"
    "tto/common/sys_stats_counters.proto\"\377\t\n\010"
    "SysStats\0227\n\007meminfo\030\001 \003(\0132&.perfetto.pro"
    "tos.SysStats.MeminfoValue\0225\n\006vmstat\030\002 \003("
    "\0132%.perfetto.protos.SysStats.VmstatValue"
    "\0224\n\010cpu_stat\030\003 \003(\0132\".perfetto.protos.Sys"
    "Stats.CpuTimes\022\021\n\tnum_forks\030\004 \001(\004\022\025\n\rnum"
    "_irq_total\030\005 \001(\004\0229\n\007num_irq\030\006 \003(\0132(.perf"
    "etto.protos.SysStats.InterruptCount\022\031\n\021n"
    "um_softirq_total\030\007 \001(\004\022=\n\013num_softirq\030\010 "
    "\003(\0132(.perfetto.protos.SysStats.Interrupt"
    "Count\022 \n\030collection_end_timestamp\030\t \001(\004\022"
    "7\n\007devfreq\030\n \003(\0132&.perfetto.protos.SysSt"
    "ats.DevfreqValue\022\023\n\013cpufreq_khz\030\013 \003(\r\0227\n"
    "\nbuddy_info\030\014 \003(\0132#.perfetto.protos.SysS"
    "tats.BuddyInfo\0225\n\tdisk_stat\030\r \003(\0132\".perf"
    "etto.protos.SysStats.DiskStat\032L\n\014Meminfo"
    "Value\022-\n\003key\030\001 \001(\0162 .perfetto.protos.Mem"
    "infoCounters\022\r\n\005value\030\002 \001(\004\032J\n\013VmstatVal"
    "ue\022,\n\003key\030\001 \001(\0162\037.perfetto.protos.Vmstat"
    "Counters\022\r\n\005value\030\002 \001(\004\032\241\001\n\010CpuTimes\022\016\n\006"
    "cpu_id\030\001 \001(\r\022\017\n\007user_ns\030\002 \001(\004\022\023\n\013user_ic"
    "e_ns\030\003 \001(\004\022\026\n\016system_mode_ns\030\004 \001(\004\022\017\n\007id"
    "le_ns\030\005 \001(\004\022\022\n\nio_wait_ns\030\006 \001(\004\022\016\n\006irq_n"
    "s\030\007 \001(\004\022\022\n\nsoftirq_ns\030\010 \001(\004\032,\n\016Interrupt"
    "Count\022\013\n\003irq\030\001 \001(\005\022\r\n\005count\030\002 \001(\004\032*\n\014Dev"
    "freqValue\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\004\032<\n"
    "\tBuddyInfo\022\014\n\004node\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\023"
    "\n\013order_pages\030\003 \003(\r\032\327\001\n\010DiskStat\022\023\n\013devi"
    "ce_name\030\001 \001(\t\022\024\n\014read_sectors\030\002 \001(\004\022\024\n\014r"
    "ead_time_ms\030\003 \001(\004\022\025\n\rwrite_sectors\030\004 \001(\004"
    "\022\025\n\rwrite_time_ms\030\005 \001(\004\022\027\n\017discard_secto"
    "rs\030\006 \001(\004\022\027\n\017discard_time_ms\030\007 \001(\004\022\023\n\013flu"
    "sh_count\030\010 \001(\004\022\025\n\rflush_time_ms\030\t \001(\004"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2fsys_5fstats_5fcounters_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto = {
    false,
    false,
    1397,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto,
    "protos/perfetto/trace/sys_stats/sys_stats.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_deps,
    1,
    8,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class SysStats_MeminfoValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_MeminfoValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_MeminfoValue, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_MeminfoValue::SysStats_MeminfoValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.MeminfoValue)
}
SysStats_MeminfoValue::SysStats_MeminfoValue(const SysStats_MeminfoValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.MeminfoValue)
}

inline void SysStats_MeminfoValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) { ::uint64_t{0u} }

    , decltype(_impl_.key_) { 0 }

  };
}

SysStats_MeminfoValue::~SysStats_MeminfoValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.MeminfoValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_MeminfoValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_MeminfoValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_MeminfoValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.MeminfoValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.key_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_MeminfoValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.MeminfoCounters key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::MeminfoCounters_IsValid(static_cast<int>(val)))) {
            _internal_set_key(static_cast<::perfetto::protos::MeminfoCounters>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_MeminfoValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.MeminfoValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.MeminfoCounters key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_key(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.MeminfoValue)
  return target;
}

::size_t SysStats_MeminfoValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.MeminfoValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_value());
    }

    // optional .perfetto.protos.MeminfoCounters key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_MeminfoValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_MeminfoValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_MeminfoValue::GetClassData() const { return &_class_data_; }


void SysStats_MeminfoValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_MeminfoValue*>(&to_msg);
  auto& from = static_cast<const SysStats_MeminfoValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.MeminfoValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_MeminfoValue::CopyFrom(const SysStats_MeminfoValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.MeminfoValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_MeminfoValue::IsInitialized() const {
  return true;
}

void SysStats_MeminfoValue::InternalSwap(SysStats_MeminfoValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_MeminfoValue, _impl_.key_)
      + sizeof(SysStats_MeminfoValue::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(SysStats_MeminfoValue, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_MeminfoValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[0]);
}
// ===================================================================

class SysStats_VmstatValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_VmstatValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_VmstatValue, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_VmstatValue::SysStats_VmstatValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.VmstatValue)
}
SysStats_VmstatValue::SysStats_VmstatValue(const SysStats_VmstatValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.VmstatValue)
}

inline void SysStats_VmstatValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) { ::uint64_t{0u} }

    , decltype(_impl_.key_) { 0 }

  };
}

SysStats_VmstatValue::~SysStats_VmstatValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.VmstatValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_VmstatValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_VmstatValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_VmstatValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.VmstatValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.key_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.key_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_VmstatValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.VmstatCounters key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VmstatCounters_IsValid(static_cast<int>(val)))) {
            _internal_set_key(static_cast<::perfetto::protos::VmstatCounters>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_VmstatValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.VmstatValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.VmstatCounters key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_key(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.VmstatValue)
  return target;
}

::size_t SysStats_VmstatValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.VmstatValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_value());
    }

    // optional .perfetto.protos.VmstatCounters key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_VmstatValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_VmstatValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_VmstatValue::GetClassData() const { return &_class_data_; }


void SysStats_VmstatValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_VmstatValue*>(&to_msg);
  auto& from = static_cast<const SysStats_VmstatValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.VmstatValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_VmstatValue::CopyFrom(const SysStats_VmstatValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.VmstatValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_VmstatValue::IsInitialized() const {
  return true;
}

void SysStats_VmstatValue::InternalSwap(SysStats_VmstatValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_VmstatValue, _impl_.key_)
      + sizeof(SysStats_VmstatValue::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(SysStats_VmstatValue, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_VmstatValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[1]);
}
// ===================================================================

class SysStats_CpuTimes::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_CpuTimes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_CpuTimes, _impl_._has_bits_);
  static void set_has_cpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_ice_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_mode_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idle_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_io_wait_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_irq_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_softirq_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SysStats_CpuTimes::SysStats_CpuTimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.CpuTimes)
}
SysStats_CpuTimes::SysStats_CpuTimes(const SysStats_CpuTimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.CpuTimes)
}

inline void SysStats_CpuTimes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.user_ice_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.system_mode_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.idle_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.io_wait_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.irq_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.softirq_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.cpu_id_) { 0u }

  };
}

SysStats_CpuTimes::~SysStats_CpuTimes() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.CpuTimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_CpuTimes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_CpuTimes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_CpuTimes::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.CpuTimes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.user_ns_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cpu_id_) -
        reinterpret_cast<char*>(&_impl_.user_ns_)) + sizeof(_impl_.cpu_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_CpuTimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu_id(&has_bits);
          _impl_.cpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 user_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_user_ns(&has_bits);
          _impl_.user_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 user_ice_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_user_ice_ns(&has_bits);
          _impl_.user_ice_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 system_mode_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_system_mode_ns(&has_bits);
          _impl_.system_mode_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 idle_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_idle_ns(&has_bits);
          _impl_.idle_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 io_wait_ns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_io_wait_ns(&has_bits);
          _impl_.io_wait_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 irq_ns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_irq_ns(&has_bits);
          _impl_.irq_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 softirq_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_softirq_ns(&has_bits);
          _impl_.softirq_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_CpuTimes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.CpuTimes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu_id(), target);
  }

  // optional uint64 user_ns = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_user_ns(), target);
  }

  // optional uint64 user_ice_ns = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_user_ice_ns(), target);
  }

  // optional uint64 system_mode_ns = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_system_mode_ns(), target);
  }

  // optional uint64 idle_ns = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_idle_ns(), target);
  }

  // optional uint64 io_wait_ns = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_io_wait_ns(), target);
  }

  // optional uint64 irq_ns = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_irq_ns(), target);
  }

  // optional uint64 softirq_ns = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_softirq_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.CpuTimes)
  return target;
}

::size_t SysStats_CpuTimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.CpuTimes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 user_ns = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_user_ns());
    }

    // optional uint64 user_ice_ns = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_user_ice_ns());
    }

    // optional uint64 system_mode_ns = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_system_mode_ns());
    }

    // optional uint64 idle_ns = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_idle_ns());
    }

    // optional uint64 io_wait_ns = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_io_wait_ns());
    }

    // optional uint64 irq_ns = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_irq_ns());
    }

    // optional uint64 softirq_ns = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_softirq_ns());
    }

    // optional uint32 cpu_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_CpuTimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_CpuTimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_CpuTimes::GetClassData() const { return &_class_data_; }


void SysStats_CpuTimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_CpuTimes*>(&to_msg);
  auto& from = static_cast<const SysStats_CpuTimes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.CpuTimes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.user_ns_ = from._impl_.user_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.user_ice_ns_ = from._impl_.user_ice_ns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.system_mode_ns_ = from._impl_.system_mode_ns_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.idle_ns_ = from._impl_.idle_ns_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.io_wait_ns_ = from._impl_.io_wait_ns_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.irq_ns_ = from._impl_.irq_ns_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.softirq_ns_ = from._impl_.softirq_ns_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cpu_id_ = from._impl_.cpu_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_CpuTimes::CopyFrom(const SysStats_CpuTimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.CpuTimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_CpuTimes::IsInitialized() const {
  return true;
}

void SysStats_CpuTimes::InternalSwap(SysStats_CpuTimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_CpuTimes, _impl_.cpu_id_)
      + sizeof(SysStats_CpuTimes::_impl_.cpu_id_)
      - PROTOBUF_FIELD_OFFSET(SysStats_CpuTimes, _impl_.user_ns_)>(
          reinterpret_cast<char*>(&_impl_.user_ns_),
          reinterpret_cast<char*>(&other->_impl_.user_ns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_CpuTimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[2]);
}
// ===================================================================

class SysStats_InterruptCount::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_InterruptCount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_InterruptCount, _impl_._has_bits_);
  static void set_has_irq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SysStats_InterruptCount::SysStats_InterruptCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.InterruptCount)
}
SysStats_InterruptCount::SysStats_InterruptCount(const SysStats_InterruptCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.InterruptCount)
}

inline void SysStats_InterruptCount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_) { ::uint64_t{0u} }

    , decltype(_impl_.irq_) { 0 }

  };
}

SysStats_InterruptCount::~SysStats_InterruptCount() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.InterruptCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_InterruptCount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SysStats_InterruptCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_InterruptCount::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.InterruptCount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.irq_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.irq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_InterruptCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 irq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_irq(&has_bits);
          _impl_.irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_InterruptCount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.InterruptCount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 irq = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_irq(), target);
  }

  // optional uint64 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.InterruptCount)
  return target;
}

::size_t SysStats_InterruptCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.InterruptCount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_count());
    }

    // optional int32 irq = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_irq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_InterruptCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_InterruptCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_InterruptCount::GetClassData() const { return &_class_data_; }


void SysStats_InterruptCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_InterruptCount*>(&to_msg);
  auto& from = static_cast<const SysStats_InterruptCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.InterruptCount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.irq_ = from._impl_.irq_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_InterruptCount::CopyFrom(const SysStats_InterruptCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.InterruptCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_InterruptCount::IsInitialized() const {
  return true;
}

void SysStats_InterruptCount::InternalSwap(SysStats_InterruptCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_InterruptCount, _impl_.irq_)
      + sizeof(SysStats_InterruptCount::_impl_.irq_)
      - PROTOBUF_FIELD_OFFSET(SysStats_InterruptCount, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_InterruptCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[3]);
}
// ===================================================================

class SysStats_DevfreqValue::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_DevfreqValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_DevfreqValue, _impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SysStats_DevfreqValue::SysStats_DevfreqValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.DevfreqValue)
}
SysStats_DevfreqValue::SysStats_DevfreqValue(const SysStats_DevfreqValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStats_DevfreqValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.DevfreqValue)
}

inline void SysStats_DevfreqValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) { ::uint64_t{0u} }

  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysStats_DevfreqValue::~SysStats_DevfreqValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.DevfreqValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_DevfreqValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void SysStats_DevfreqValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_DevfreqValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.DevfreqValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.key_.ClearNonDefaultToEmpty();
  }
  _impl_.value_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_DevfreqValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SysStats.DevfreqValue.key");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_DevfreqValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.DevfreqValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SysStats.DevfreqValue.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.DevfreqValue)
  return target;
}

::size_t SysStats_DevfreqValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.DevfreqValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_key());
    }

    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_DevfreqValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_DevfreqValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_DevfreqValue::GetClassData() const { return &_class_data_; }


void SysStats_DevfreqValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_DevfreqValue*>(&to_msg);
  auto& from = static_cast<const SysStats_DevfreqValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.DevfreqValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_DevfreqValue::CopyFrom(const SysStats_DevfreqValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.DevfreqValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_DevfreqValue::IsInitialized() const {
  return true;
}

void SysStats_DevfreqValue::InternalSwap(SysStats_DevfreqValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);

  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_DevfreqValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[4]);
}
// ===================================================================

class SysStats_BuddyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_BuddyInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_BuddyInfo, _impl_._has_bits_);
  static void set_has_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SysStats_BuddyInfo::SysStats_BuddyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.BuddyInfo)
}
SysStats_BuddyInfo::SysStats_BuddyInfo(const SysStats_BuddyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStats_BuddyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_pages_) { from._impl_.order_pages_ }

    , decltype(_impl_.node_) {}

    , decltype(_impl_.zone_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.node_.Set(from._internal_node(), _this->GetArenaForAllocation());
  }
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.zone_.Set(from._internal_zone(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.BuddyInfo)
}

inline void SysStats_BuddyInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_pages_) { arena }

    , decltype(_impl_.node_) {}

    , decltype(_impl_.zone_) {}

  };
  _impl_.node_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.node_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zone_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysStats_BuddyInfo::~SysStats_BuddyInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.BuddyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_BuddyInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_pages_.~RepeatedField();
  _impl_.node_.Destroy();
  _impl_.zone_.Destroy();
}

void SysStats_BuddyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_BuddyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.BuddyInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_pages()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.node_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.zone_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_BuddyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SysStats.BuddyInfo.node");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SysStats.BuddyInfo.zone");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 order_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_order_pages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_order_pages(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_BuddyInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.BuddyInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string node = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_node();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SysStats.BuddyInfo.node");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string zone = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_zone();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SysStats.BuddyInfo.zone");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint32 order_pages = 3;
  for (int i = 0, n = this->_internal_order_pages_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_order_pages(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.BuddyInfo)
  return target;
}

::size_t SysStats_BuddyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.BuddyInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 order_pages = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_order_pages())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_order_pages_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string node = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_node());
    }

    // optional string zone = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zone());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_BuddyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_BuddyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_BuddyInfo::GetClassData() const { return &_class_data_; }


void SysStats_BuddyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_BuddyInfo*>(&to_msg);
  auto& from = static_cast<const SysStats_BuddyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.BuddyInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_pages_.MergeFrom(from._impl_.order_pages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_node(from._internal_node());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_zone(from._internal_zone());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_BuddyInfo::CopyFrom(const SysStats_BuddyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.BuddyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_BuddyInfo::IsInitialized() const {
  return true;
}

void SysStats_BuddyInfo::InternalSwap(SysStats_BuddyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.order_pages_.InternalSwap(&other->_impl_.order_pages_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_, lhs_arena,
                                       &other->_impl_.node_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zone_, lhs_arena,
                                       &other->_impl_.zone_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_BuddyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[5]);
}
// ===================================================================

class SysStats_DiskStat::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats_DiskStat>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats_DiskStat, _impl_._has_bits_);
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_sectors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_read_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_write_sectors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_write_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_discard_sectors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_discard_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flush_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flush_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SysStats_DiskStat::SysStats_DiskStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats.DiskStat)
}
SysStats_DiskStat::SysStats_DiskStat(const SysStats_DiskStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStats_DiskStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_name_) {}

    , decltype(_impl_.read_sectors_) {}

    , decltype(_impl_.read_time_ms_) {}

    , decltype(_impl_.write_sectors_) {}

    , decltype(_impl_.write_time_ms_) {}

    , decltype(_impl_.discard_sectors_) {}

    , decltype(_impl_.discard_time_ms_) {}

    , decltype(_impl_.flush_count_) {}

    , decltype(_impl_.flush_time_ms_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.read_sectors_, &from._impl_.read_sectors_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.flush_time_ms_) -
    reinterpret_cast<char*>(&_impl_.read_sectors_)) + sizeof(_impl_.flush_time_ms_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats.DiskStat)
}

inline void SysStats_DiskStat::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_name_) {}

    , decltype(_impl_.read_sectors_) { ::uint64_t{0u} }

    , decltype(_impl_.read_time_ms_) { ::uint64_t{0u} }

    , decltype(_impl_.write_sectors_) { ::uint64_t{0u} }

    , decltype(_impl_.write_time_ms_) { ::uint64_t{0u} }

    , decltype(_impl_.discard_sectors_) { ::uint64_t{0u} }

    , decltype(_impl_.discard_time_ms_) { ::uint64_t{0u} }

    , decltype(_impl_.flush_count_) { ::uint64_t{0u} }

    , decltype(_impl_.flush_time_ms_) { ::uint64_t{0u} }

  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysStats_DiskStat::~SysStats_DiskStat() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats.DiskStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats_DiskStat::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
}

void SysStats_DiskStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats_DiskStat::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats.DiskStat)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.device_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.read_sectors_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flush_count_) -
        reinterpret_cast<char*>(&_impl_.read_sectors_)) + sizeof(_impl_.flush_count_));
  }
  _impl_.flush_time_ms_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats_DiskStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SysStats.DiskStat.device_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 read_sectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_read_sectors(&has_bits);
          _impl_.read_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 read_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_read_time_ms(&has_bits);
          _impl_.read_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 write_sectors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_write_sectors(&has_bits);
          _impl_.write_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 write_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_write_time_ms(&has_bits);
          _impl_.write_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 discard_sectors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_discard_sectors(&has_bits);
          _impl_.discard_sectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 discard_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_discard_time_ms(&has_bits);
          _impl_.discard_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 flush_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_flush_count(&has_bits);
          _impl_.flush_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 flush_time_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_flush_time_ms(&has_bits);
          _impl_.flush_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats_DiskStat::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats.DiskStat)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string device_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_device_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SysStats.DiskStat.device_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint64 read_sectors = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_read_sectors(), target);
  }

  // optional uint64 read_time_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_read_time_ms(), target);
  }

  // optional uint64 write_sectors = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_write_sectors(), target);
  }

  // optional uint64 write_time_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_write_time_ms(), target);
  }

  // optional uint64 discard_sectors = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_discard_sectors(), target);
  }

  // optional uint64 discard_time_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_discard_time_ms(), target);
  }

  // optional uint64 flush_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_flush_count(), target);
  }

  // optional uint64 flush_time_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_flush_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats.DiskStat)
  return target;
}

::size_t SysStats_DiskStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats.DiskStat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_device_name());
    }

    // optional uint64 read_sectors = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_read_sectors());
    }

    // optional uint64 read_time_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_read_time_ms());
    }

    // optional uint64 write_sectors = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_write_sectors());
    }

    // optional uint64 write_time_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_write_time_ms());
    }

    // optional uint64 discard_sectors = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_discard_sectors());
    }

    // optional uint64 discard_time_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_discard_time_ms());
    }

    // optional uint64 flush_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_flush_count());
    }

  }
  // optional uint64 flush_time_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_flush_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats_DiskStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats_DiskStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats_DiskStat::GetClassData() const { return &_class_data_; }


void SysStats_DiskStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats_DiskStat*>(&to_msg);
  auto& from = static_cast<const SysStats_DiskStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats.DiskStat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.read_sectors_ = from._impl_.read_sectors_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.read_time_ms_ = from._impl_.read_time_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.write_sectors_ = from._impl_.write_sectors_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.write_time_ms_ = from._impl_.write_time_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.discard_sectors_ = from._impl_.discard_sectors_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.discard_time_ms_ = from._impl_.discard_time_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.flush_count_ = from._impl_.flush_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_flush_time_ms(from._internal_flush_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats_DiskStat::CopyFrom(const SysStats_DiskStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats.DiskStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats_DiskStat::IsInitialized() const {
  return true;
}

void SysStats_DiskStat::InternalSwap(SysStats_DiskStat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_name_, lhs_arena,
                                       &other->_impl_.device_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats_DiskStat, _impl_.flush_time_ms_)
      + sizeof(SysStats_DiskStat::_impl_.flush_time_ms_)
      - PROTOBUF_FIELD_OFFSET(SysStats_DiskStat, _impl_.read_sectors_)>(
          reinterpret_cast<char*>(&_impl_.read_sectors_),
          reinterpret_cast<char*>(&other->_impl_.read_sectors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats_DiskStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[6]);
}
// ===================================================================

class SysStats::_Internal {
 public:
  using HasBits = decltype(std::declval<SysStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SysStats, _impl_._has_bits_);
  static void set_has_num_forks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_irq_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_softirq_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collection_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SysStats::SysStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SysStats)
}
SysStats::SysStats(const SysStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meminfo_){from._impl_.meminfo_}
    , decltype(_impl_.vmstat_){from._impl_.vmstat_}
    , decltype(_impl_.cpu_stat_){from._impl_.cpu_stat_}
    , decltype(_impl_.num_irq_){from._impl_.num_irq_}
    , decltype(_impl_.num_softirq_){from._impl_.num_softirq_}
    , decltype(_impl_.devfreq_){from._impl_.devfreq_}
    , decltype(_impl_.cpufreq_khz_) { from._impl_.cpufreq_khz_ }

    , decltype(_impl_.buddy_info_){from._impl_.buddy_info_}
    , decltype(_impl_.disk_stat_){from._impl_.disk_stat_}
    , decltype(_impl_.num_forks_) {}

    , decltype(_impl_.num_irq_total_) {}

    , decltype(_impl_.num_softirq_total_) {}

    , decltype(_impl_.collection_end_timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_forks_, &from._impl_.num_forks_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.collection_end_timestamp_) -
    reinterpret_cast<char*>(&_impl_.num_forks_)) + sizeof(_impl_.collection_end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SysStats)
}

inline void SysStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.meminfo_){arena}
    , decltype(_impl_.vmstat_){arena}
    , decltype(_impl_.cpu_stat_){arena}
    , decltype(_impl_.num_irq_){arena}
    , decltype(_impl_.num_softirq_){arena}
    , decltype(_impl_.devfreq_){arena}
    , decltype(_impl_.cpufreq_khz_) { arena }

    , decltype(_impl_.buddy_info_){arena}
    , decltype(_impl_.disk_stat_){arena}
    , decltype(_impl_.num_forks_) { ::uint64_t{0u} }

    , decltype(_impl_.num_irq_total_) { ::uint64_t{0u} }

    , decltype(_impl_.num_softirq_total_) { ::uint64_t{0u} }

    , decltype(_impl_.collection_end_timestamp_) { ::uint64_t{0u} }

  };
}

SysStats::~SysStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SysStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SysStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_meminfo()->~RepeatedPtrField();
  _internal_mutable_vmstat()->~RepeatedPtrField();
  _internal_mutable_cpu_stat()->~RepeatedPtrField();
  _internal_mutable_num_irq()->~RepeatedPtrField();
  _internal_mutable_num_softirq()->~RepeatedPtrField();
  _internal_mutable_devfreq()->~RepeatedPtrField();
  _impl_.cpufreq_khz_.~RepeatedField();
  _internal_mutable_buddy_info()->~RepeatedPtrField();
  _internal_mutable_disk_stat()->~RepeatedPtrField();
}

void SysStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SysStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_meminfo()->Clear();
  _internal_mutable_vmstat()->Clear();
  _internal_mutable_cpu_stat()->Clear();
  _internal_mutable_num_irq()->Clear();
  _internal_mutable_num_softirq()->Clear();
  _internal_mutable_devfreq()->Clear();
  _internal_mutable_cpufreq_khz()->Clear();
  _internal_mutable_buddy_info()->Clear();
  _internal_mutable_disk_stat()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.num_forks_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.collection_end_timestamp_) -
        reinterpret_cast<char*>(&_impl_.num_forks_)) + sizeof(_impl_.collection_end_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_meminfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vmstat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 num_forks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_num_forks(&has_bits);
          _impl_.num_forks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 num_irq_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_num_irq_total(&has_bits);
          _impl_.num_irq_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_num_irq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 num_softirq_total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_num_softirq_total(&has_bits);
          _impl_.num_softirq_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_num_softirq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 collection_end_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_collection_end_timestamp(&has_bits);
          _impl_.collection_end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devfreq(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 cpufreq_khz = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cpufreq_khz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cpufreq_khz(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buddy_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disk_stat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SysStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SysStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meminfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_meminfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vmstat_size()); i < n; i++) {
    const auto& repfield = this->_internal_vmstat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpu_stat_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpu_stat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 num_forks = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_num_forks(), target);
  }

  // optional uint64 num_irq_total = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_num_irq_total(), target);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_num_irq_size()); i < n; i++) {
    const auto& repfield = this->_internal_num_irq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 num_softirq_total = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_num_softirq_total(), target);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_num_softirq_size()); i < n; i++) {
    const auto& repfield = this->_internal_num_softirq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 collection_end_timestamp = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_collection_end_timestamp(), target);
  }

  // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devfreq_size()); i < n; i++) {
    const auto& repfield = this->_internal_devfreq(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 cpufreq_khz = 11;
  for (int i = 0, n = this->_internal_cpufreq_khz_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_cpufreq_khz(i), target);
  }

  // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buddy_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_buddy_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disk_stat_size()); i < n; i++) {
    const auto& repfield = this->_internal_disk_stat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SysStats)
  return target;
}

::size_t SysStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SysStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.SysStats.MeminfoValue meminfo = 1;
  total_size += 1UL * this->_internal_meminfo_size();
  for (const auto& msg : this->_internal_meminfo()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.VmstatValue vmstat = 2;
  total_size += 1UL * this->_internal_vmstat_size();
  for (const auto& msg : this->_internal_vmstat()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.CpuTimes cpu_stat = 3;
  total_size += 1UL * this->_internal_cpu_stat_size();
  for (const auto& msg : this->_internal_cpu_stat()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_irq = 6;
  total_size += 1UL * this->_internal_num_irq_size();
  for (const auto& msg : this->_internal_num_irq()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.InterruptCount num_softirq = 8;
  total_size += 1UL * this->_internal_num_softirq_size();
  for (const auto& msg : this->_internal_num_softirq()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.DevfreqValue devfreq = 10;
  total_size += 1UL * this->_internal_devfreq_size();
  for (const auto& msg : this->_internal_devfreq()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 cpufreq_khz = 11;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cpufreq_khz())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_cpufreq_khz_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .perfetto.protos.SysStats.BuddyInfo buddy_info = 12;
  total_size += 1UL * this->_internal_buddy_info_size();
  for (const auto& msg : this->_internal_buddy_info()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.SysStats.DiskStat disk_stat = 13;
  total_size += 1UL * this->_internal_disk_stat_size();
  for (const auto& msg : this->_internal_disk_stat()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 num_forks = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_num_forks());
    }

    // optional uint64 num_irq_total = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_num_irq_total());
    }

    // optional uint64 num_softirq_total = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_num_softirq_total());
    }

    // optional uint64 collection_end_timestamp = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_collection_end_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysStats::GetClassData() const { return &_class_data_; }


void SysStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysStats*>(&to_msg);
  auto& from = static_cast<const SysStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SysStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_meminfo()->MergeFrom(from._internal_meminfo());
  _this->_internal_mutable_vmstat()->MergeFrom(from._internal_vmstat());
  _this->_internal_mutable_cpu_stat()->MergeFrom(from._internal_cpu_stat());
  _this->_internal_mutable_num_irq()->MergeFrom(from._internal_num_irq());
  _this->_internal_mutable_num_softirq()->MergeFrom(from._internal_num_softirq());
  _this->_internal_mutable_devfreq()->MergeFrom(from._internal_devfreq());
  _this->_impl_.cpufreq_khz_.MergeFrom(from._impl_.cpufreq_khz_);
  _this->_internal_mutable_buddy_info()->MergeFrom(from._internal_buddy_info());
  _this->_internal_mutable_disk_stat()->MergeFrom(from._internal_disk_stat());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_forks_ = from._impl_.num_forks_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_irq_total_ = from._impl_.num_irq_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_softirq_total_ = from._impl_.num_softirq_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.collection_end_timestamp_ = from._impl_.collection_end_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysStats::CopyFrom(const SysStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SysStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysStats::IsInitialized() const {
  return true;
}

void SysStats::InternalSwap(SysStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_meminfo()->InternalSwap(other->_internal_mutable_meminfo());
  _internal_mutable_vmstat()->InternalSwap(other->_internal_mutable_vmstat());
  _internal_mutable_cpu_stat()->InternalSwap(other->_internal_mutable_cpu_stat());
  _internal_mutable_num_irq()->InternalSwap(other->_internal_mutable_num_irq());
  _internal_mutable_num_softirq()->InternalSwap(other->_internal_mutable_num_softirq());
  _internal_mutable_devfreq()->InternalSwap(other->_internal_mutable_devfreq());
  _impl_.cpufreq_khz_.InternalSwap(&other->_impl_.cpufreq_khz_);
  _internal_mutable_buddy_info()->InternalSwap(other->_internal_mutable_buddy_info());
  _internal_mutable_disk_stat()->InternalSwap(other->_internal_mutable_disk_stat());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SysStats, _impl_.collection_end_timestamp_)
      + sizeof(SysStats::_impl_.collection_end_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SysStats, _impl_.num_forks_)>(
          reinterpret_cast<char*>(&_impl_.num_forks_),
          reinterpret_cast<char*>(&other->_impl_.num_forks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SysStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fsys_5fstats_2fsys_5fstats_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_MeminfoValue*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_MeminfoValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_MeminfoValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_VmstatValue*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_VmstatValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_VmstatValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_CpuTimes*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_CpuTimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_CpuTimes >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_InterruptCount*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_InterruptCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_InterruptCount >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_DevfreqValue*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_DevfreqValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_DevfreqValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_BuddyInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_BuddyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_BuddyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats_DiskStat*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats_DiskStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats_DiskStat >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SysStats*
Arena::CreateMaybeMessage< ::perfetto::protos::SysStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SysStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
