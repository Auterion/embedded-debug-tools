// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/smaps.proto

#include "protos/perfetto/trace/profiling/smaps.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR SmapsEntry::SmapsEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.file_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.module_debugid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.module_debug_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.size_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.private_dirty_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.swap_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_address_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.module_timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.private_clean_resident_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.shared_dirty_resident_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.shared_clean_resident_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.locked_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.proportional_resident_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.protection_flags_)*/ 0u
} {}
struct SmapsEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmapsEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmapsEntryDefaultTypeInternal() {}
  union {
    SmapsEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmapsEntryDefaultTypeInternal _SmapsEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SmapsPacket::SmapsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.pid_)*/ 0u
} {}
struct SmapsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmapsPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmapsPacketDefaultTypeInternal() {}
  union {
    SmapsPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmapsPacketDefaultTypeInternal _SmapsPacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.size_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.private_dirty_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.swap_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.file_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.start_address_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.module_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.module_debugid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.module_debug_path_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.protection_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.private_clean_resident_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.shared_dirty_resident_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.shared_clean_resident_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.locked_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsEntry, _impl_.proportional_resident_kb_),
    0,
    4,
    5,
    6,
    1,
    7,
    8,
    2,
    3,
    14,
    9,
    10,
    11,
    12,
    13,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsPacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsPacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsPacket, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::SmapsPacket, _impl_.entries_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 23, -1, sizeof(::perfetto::protos::SmapsEntry)},
        { 38, 48, -1, sizeof(::perfetto::protos::SmapsPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_SmapsEntry_default_instance_._instance,
    &::perfetto::protos::_SmapsPacket_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+protos/perfetto/trace/profiling/smaps."
    "proto\022\017perfetto.protos\"\203\003\n\nSmapsEntry\022\014\n"
    "\004path\030\001 \001(\t\022\017\n\007size_kb\030\002 \001(\004\022\030\n\020private_"
    "dirty_kb\030\003 \001(\004\022\017\n\007swap_kb\030\004 \001(\004\022\021\n\tfile_"
    "name\030\005 \001(\t\022\025\n\rstart_address\030\006 \001(\004\022\030\n\020mod"
    "ule_timestamp\030\007 \001(\004\022\026\n\016module_debugid\030\010 "
    "\001(\t\022\031\n\021module_debug_path\030\t \001(\t\022\030\n\020protec"
    "tion_flags\030\n \001(\r\022!\n\031private_clean_reside"
    "nt_kb\030\013 \001(\004\022 \n\030shared_dirty_resident_kb\030"
    "\014 \001(\004\022 \n\030shared_clean_resident_kb\030\r \001(\004\022"
    "\021\n\tlocked_kb\030\016 \001(\004\022 \n\030proportional_resid"
    "ent_kb\030\017 \001(\004\"H\n\013SmapsPacket\022\013\n\003pid\030\001 \001(\r"
    "\022,\n\007entries\030\002 \003(\0132\033.perfetto.protos.Smap"
    "sEntry"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto = {
    false,
    false,
    526,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto,
    "protos/perfetto/trace/profiling/smaps.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class SmapsEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SmapsEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SmapsEntry, _impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_private_dirty_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_swap_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_address(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_module_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_module_debugid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_module_debug_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_private_clean_resident_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_shared_dirty_resident_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_shared_clean_resident_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_locked_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_proportional_resident_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

SmapsEntry::SmapsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SmapsEntry)
}
SmapsEntry::SmapsEntry(const SmapsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmapsEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.file_name_) {}

    , decltype(_impl_.module_debugid_) {}

    , decltype(_impl_.module_debug_path_) {}

    , decltype(_impl_.size_kb_) {}

    , decltype(_impl_.private_dirty_kb_) {}

    , decltype(_impl_.swap_kb_) {}

    , decltype(_impl_.start_address_) {}

    , decltype(_impl_.module_timestamp_) {}

    , decltype(_impl_.private_clean_resident_kb_) {}

    , decltype(_impl_.shared_dirty_resident_kb_) {}

    , decltype(_impl_.shared_clean_resident_kb_) {}

    , decltype(_impl_.locked_kb_) {}

    , decltype(_impl_.proportional_resident_kb_) {}

    , decltype(_impl_.protection_flags_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), _this->GetArenaForAllocation());
  }
  _impl_.module_debugid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_debugid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.module_debugid_.Set(from._internal_module_debugid(), _this->GetArenaForAllocation());
  }
  _impl_.module_debug_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_debug_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.module_debug_path_.Set(from._internal_module_debug_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_kb_, &from._impl_.size_kb_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.protection_flags_) -
    reinterpret_cast<char*>(&_impl_.size_kb_)) + sizeof(_impl_.protection_flags_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SmapsEntry)
}

inline void SmapsEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.file_name_) {}

    , decltype(_impl_.module_debugid_) {}

    , decltype(_impl_.module_debug_path_) {}

    , decltype(_impl_.size_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.private_dirty_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.swap_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.start_address_) { ::uint64_t{0u} }

    , decltype(_impl_.module_timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.private_clean_resident_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.shared_dirty_resident_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.shared_clean_resident_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.locked_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.proportional_resident_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.protection_flags_) { 0u }

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_debugid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_debugid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_debug_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_debug_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmapsEntry::~SmapsEntry() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SmapsEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmapsEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.module_debugid_.Destroy();
  _impl_.module_debug_path_.Destroy();
}

void SmapsEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmapsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SmapsEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.module_debugid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.module_debug_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.size_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.start_address_) -
        reinterpret_cast<char*>(&_impl_.size_kb_)) + sizeof(_impl_.start_address_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.module_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protection_flags_) -
        reinterpret_cast<char*>(&_impl_.module_timestamp_)) + sizeof(_impl_.protection_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmapsEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SmapsEntry.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_size_kb(&has_bits);
          _impl_.size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 private_dirty_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_private_dirty_kb(&has_bits);
          _impl_.private_dirty_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 swap_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_swap_kb(&has_bits);
          _impl_.swap_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string file_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SmapsEntry.file_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 start_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_start_address(&has_bits);
          _impl_.start_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 module_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_module_timestamp(&has_bits);
          _impl_.module_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string module_debugid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_module_debugid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SmapsEntry.module_debugid");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string module_debug_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_module_debug_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.SmapsEntry.module_debug_path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protection_flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_protection_flags(&has_bits);
          _impl_.protection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 private_clean_resident_kb = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_private_clean_resident_kb(&has_bits);
          _impl_.private_clean_resident_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shared_dirty_resident_kb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_shared_dirty_resident_kb(&has_bits);
          _impl_.shared_dirty_resident_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shared_clean_resident_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_shared_clean_resident_kb(&has_bits);
          _impl_.shared_clean_resident_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 locked_kb = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_locked_kb(&has_bits);
          _impl_.locked_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 proportional_resident_kb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_proportional_resident_kb(&has_bits);
          _impl_.proportional_resident_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmapsEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SmapsEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SmapsEntry.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint64 size_kb = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_size_kb(), target);
  }

  // optional uint64 private_dirty_kb = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_private_dirty_kb(), target);
  }

  // optional uint64 swap_kb = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_swap_kb(), target);
  }

  // optional string file_name = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_file_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SmapsEntry.file_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint64 start_address = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_start_address(), target);
  }

  // optional uint64 module_timestamp = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_module_timestamp(), target);
  }

  // optional string module_debugid = 8;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_module_debugid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SmapsEntry.module_debugid");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional string module_debug_path = 9;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_module_debug_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.SmapsEntry.module_debug_path");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional uint32 protection_flags = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_protection_flags(), target);
  }

  // optional uint64 private_clean_resident_kb = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_private_clean_resident_kb(), target);
  }

  // optional uint64 shared_dirty_resident_kb = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        12, this->_internal_shared_dirty_resident_kb(), target);
  }

  // optional uint64 shared_clean_resident_kb = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_shared_clean_resident_kb(), target);
  }

  // optional uint64 locked_kb = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        14, this->_internal_locked_kb(), target);
  }

  // optional uint64 proportional_resident_kb = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        15, this->_internal_proportional_resident_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SmapsEntry)
  return target;
}

::size_t SmapsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SmapsEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional string file_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_file_name());
    }

    // optional string module_debugid = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_module_debugid());
    }

    // optional string module_debug_path = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_module_debug_path());
    }

    // optional uint64 size_kb = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_size_kb());
    }

    // optional uint64 private_dirty_kb = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_private_dirty_kb());
    }

    // optional uint64 swap_kb = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_swap_kb());
    }

    // optional uint64 start_address = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_start_address());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint64 module_timestamp = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_module_timestamp());
    }

    // optional uint64 private_clean_resident_kb = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_private_clean_resident_kb());
    }

    // optional uint64 shared_dirty_resident_kb = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shared_dirty_resident_kb());
    }

    // optional uint64 shared_clean_resident_kb = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shared_clean_resident_kb());
    }

    // optional uint64 locked_kb = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_locked_kb());
    }

    // optional uint64 proportional_resident_kb = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_proportional_resident_kb());
    }

    // optional uint32 protection_flags = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protection_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmapsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmapsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmapsEntry::GetClassData() const { return &_class_data_; }


void SmapsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmapsEntry*>(&to_msg);
  auto& from = static_cast<const SmapsEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SmapsEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_module_debugid(from._internal_module_debugid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_module_debug_path(from._internal_module_debug_path());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.size_kb_ = from._impl_.size_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.private_dirty_kb_ = from._impl_.private_dirty_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.swap_kb_ = from._impl_.swap_kb_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.start_address_ = from._impl_.start_address_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.module_timestamp_ = from._impl_.module_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.private_clean_resident_kb_ = from._impl_.private_clean_resident_kb_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.shared_dirty_resident_kb_ = from._impl_.shared_dirty_resident_kb_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.shared_clean_resident_kb_ = from._impl_.shared_clean_resident_kb_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.locked_kb_ = from._impl_.locked_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.proportional_resident_kb_ = from._impl_.proportional_resident_kb_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.protection_flags_ = from._impl_.protection_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmapsEntry::CopyFrom(const SmapsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SmapsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmapsEntry::IsInitialized() const {
  return true;
}

void SmapsEntry::InternalSwap(SmapsEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, lhs_arena,
                                       &other->_impl_.file_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_debugid_, lhs_arena,
                                       &other->_impl_.module_debugid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_debug_path_, lhs_arena,
                                       &other->_impl_.module_debug_path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmapsEntry, _impl_.protection_flags_)
      + sizeof(SmapsEntry::_impl_.protection_flags_)
      - PROTOBUF_FIELD_OFFSET(SmapsEntry, _impl_.size_kb_)>(
          reinterpret_cast<char*>(&_impl_.size_kb_),
          reinterpret_cast<char*>(&other->_impl_.size_kb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmapsEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto[0]);
}
// ===================================================================

class SmapsPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<SmapsPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SmapsPacket, _impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SmapsPacket::SmapsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.SmapsPacket)
}
SmapsPacket::SmapsPacket(const SmapsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmapsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.pid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pid_ = from._impl_.pid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.SmapsPacket)
}

inline void SmapsPacket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.pid_) { 0u }

  };
}

SmapsPacket::~SmapsPacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.SmapsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmapsPacket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entries()->~RepeatedPtrField();
}

void SmapsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmapsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.SmapsPacket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entries()->Clear();
  _impl_.pid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmapsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.SmapsEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmapsPacket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.SmapsPacket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.SmapsEntry entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.SmapsPacket)
  return target;
}

::size_t SmapsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.SmapsPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.SmapsEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 pid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmapsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmapsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmapsPacket::GetClassData() const { return &_class_data_; }


void SmapsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmapsPacket*>(&to_msg);
  auto& from = static_cast<const SmapsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.SmapsPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmapsPacket::CopyFrom(const SmapsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.SmapsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmapsPacket::IsInitialized() const {
  return true;
}

void SmapsPacket::InternalSwap(SmapsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());

  swap(_impl_.pid_, other->_impl_.pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmapsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::SmapsEntry*
Arena::CreateMaybeMessage< ::perfetto::protos::SmapsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SmapsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::SmapsPacket*
Arena::CreateMaybeMessage< ::perfetto::protos::SmapsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::SmapsPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
