// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_common.proto

#include "protos/perfetto/trace/profiling/profile_common.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR InternedString::InternedString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.str_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct InternedStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternedStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternedStringDefaultTypeInternal() {}
  union {
    InternedString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternedStringDefaultTypeInternal _InternedString_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProfiledFrameSymbols::ProfiledFrameSymbols(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_name_id_)*/ {}

  , /*decltype(_impl_.file_name_id_)*/ {}

  , /*decltype(_impl_.line_number_)*/ {}

  , /*decltype(_impl_.frame_iid_)*/ ::uint64_t{0u}
} {}
struct ProfiledFrameSymbolsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfiledFrameSymbolsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfiledFrameSymbolsDefaultTypeInternal() {}
  union {
    ProfiledFrameSymbols _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfiledFrameSymbolsDefaultTypeInternal _ProfiledFrameSymbols_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Line::Line(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.function_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_file_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.line_number_)*/ 0u
} {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AddressSymbols::AddressSymbols(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.address_)*/ ::uint64_t{0u}
} {}
struct AddressSymbolsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressSymbolsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressSymbolsDefaultTypeInternal() {}
  union {
    AddressSymbols _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressSymbolsDefaultTypeInternal _AddressSymbols_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModuleSymbols::ModuleSymbols(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_symbols_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.build_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct ModuleSymbolsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleSymbolsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleSymbolsDefaultTypeInternal() {}
  union {
    ModuleSymbols _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleSymbolsDefaultTypeInternal _ModuleSymbols_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Mapping::Mapping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_string_ids_)*/ {}

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.build_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_offset_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.load_bias_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.exact_offset_)*/ ::uint64_t{0u}
} {}
struct MappingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MappingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MappingDefaultTypeInternal() {}
  union {
    Mapping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MappingDefaultTypeInternal _Mapping_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Frame::Frame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.function_name_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.mapping_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.rel_pc_)*/ ::uint64_t{0u}
} {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Callstack::Callstack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_ids_)*/ {}

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct CallstackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallstackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallstackDefaultTypeInternal() {}
  union {
    Callstack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallstackDefaultTypeInternal _Callstack_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InternedString, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InternedString, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InternedString, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::InternedString, _impl_.str_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfiledFrameSymbols, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfiledFrameSymbols, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfiledFrameSymbols, _impl_.frame_iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfiledFrameSymbols, _impl_.function_name_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfiledFrameSymbols, _impl_.file_name_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfiledFrameSymbols, _impl_.line_number_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Line, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Line, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Line, _impl_.function_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Line, _impl_.source_file_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Line, _impl_.line_number_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AddressSymbols, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AddressSymbols, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AddressSymbols, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::AddressSymbols, _impl_.lines_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ModuleSymbols, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ModuleSymbols, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ModuleSymbols, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ModuleSymbols, _impl_.build_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ModuleSymbols, _impl_.address_symbols_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.build_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.exact_offset_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.start_offset_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.end_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.load_bias_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Mapping, _impl_.path_string_ids_),
    0,
    1,
    6,
    2,
    3,
    4,
    5,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Frame, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Frame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Frame, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Frame, _impl_.function_name_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Frame, _impl_.mapping_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Frame, _impl_.rel_pc_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Callstack, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Callstack, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Callstack, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Callstack, _impl_.frame_ids_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::InternedString)},
        { 12, 24, -1, sizeof(::perfetto::protos::ProfiledFrameSymbols)},
        { 28, 39, -1, sizeof(::perfetto::protos::Line)},
        { 42, 52, -1, sizeof(::perfetto::protos::AddressSymbols)},
        { 54, 65, -1, sizeof(::perfetto::protos::ModuleSymbols)},
        { 68, 84, -1, sizeof(::perfetto::protos::Mapping)},
        { 92, 104, -1, sizeof(::perfetto::protos::Frame)},
        { 108, 118, -1, sizeof(::perfetto::protos::Callstack)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_InternedString_default_instance_._instance,
    &::perfetto::protos::_ProfiledFrameSymbols_default_instance_._instance,
    &::perfetto::protos::_Line_default_instance_._instance,
    &::perfetto::protos::_AddressSymbols_default_instance_._instance,
    &::perfetto::protos::_ModuleSymbols_default_instance_._instance,
    &::perfetto::protos::_Mapping_default_instance_._instance,
    &::perfetto::protos::_Frame_default_instance_._instance,
    &::perfetto::protos::_Callstack_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n4protos/perfetto/trace/profiling/profil"
    "e_common.proto\022\017perfetto.protos\"*\n\016Inter"
    "nedString\022\013\n\003iid\030\001 \001(\004\022\013\n\003str\030\002 \001(\014\"n\n\024P"
    "rofiledFrameSymbols\022\021\n\tframe_iid\030\001 \001(\004\022\030"
    "\n\020function_name_id\030\002 \003(\004\022\024\n\014file_name_id"
    "\030\003 \003(\004\022\023\n\013line_number\030\004 \003(\r\"L\n\004Line\022\025\n\rf"
    "unction_name\030\001 \001(\t\022\030\n\020source_file_name\030\002"
    " \001(\t\022\023\n\013line_number\030\003 \001(\r\"G\n\016AddressSymb"
    "ols\022\017\n\007address\030\001 \001(\004\022$\n\005lines\030\002 \003(\0132\025.pe"
    "rfetto.protos.Line\"i\n\rModuleSymbols\022\014\n\004p"
    "ath\030\001 \001(\t\022\020\n\010build_id\030\002 \001(\t\0228\n\017address_s"
    "ymbols\030\003 \003(\0132\037.perfetto.protos.AddressSy"
    "mbols\"\234\001\n\007Mapping\022\013\n\003iid\030\001 \001(\004\022\020\n\010build_"
    "id\030\002 \001(\004\022\024\n\014exact_offset\030\010 \001(\004\022\024\n\014start_"
    "offset\030\003 \001(\004\022\r\n\005start\030\004 \001(\004\022\013\n\003end\030\005 \001(\004"
    "\022\021\n\tload_bias\030\006 \001(\004\022\027\n\017path_string_ids\030\007"
    " \003(\004\"R\n\005Frame\022\013\n\003iid\030\001 \001(\004\022\030\n\020function_n"
    "ame_id\030\002 \001(\004\022\022\n\nmapping_id\030\003 \001(\004\022\016\n\006rel_"
    "pc\030\004 \001(\004\"+\n\tCallstack\022\013\n\003iid\030\001 \001(\004\022\021\n\tfr"
    "ame_ids\030\002 \003(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto = {
    false,
    false,
    773,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
    "protos/perfetto/trace/profiling/profile_common.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class InternedString::_Internal {
 public:
  using HasBits = decltype(std::declval<InternedString>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InternedString, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InternedString::InternedString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.InternedString)
}
InternedString::InternedString(const InternedString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternedString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_) {}

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.str_.Set(from._internal_str(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.InternedString)
}

inline void InternedString::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_) {}

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternedString::~InternedString() {
  // @@protoc_insertion_point(destructor:perfetto.protos.InternedString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternedString::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}

void InternedString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternedString::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.InternedString)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.str_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternedString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InternedString::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.InternedString)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional bytes str = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_str();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.InternedString)
  return target;
}

::size_t InternedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.InternedString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes str = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_str());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternedString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternedString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternedString::GetClassData() const { return &_class_data_; }


void InternedString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternedString*>(&to_msg);
  auto& from = static_cast<const InternedString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.InternedString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_str(from._internal_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternedString::CopyFrom(const InternedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.InternedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternedString::IsInitialized() const {
  return true;
}

void InternedString::InternalSwap(InternedString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.str_, lhs_arena,
                                       &other->_impl_.str_, rhs_arena);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternedString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[0]);
}
// ===================================================================

class ProfiledFrameSymbols::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfiledFrameSymbols>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProfiledFrameSymbols, _impl_._has_bits_);
  static void set_has_frame_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfiledFrameSymbols::ProfiledFrameSymbols(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfiledFrameSymbols)
}
ProfiledFrameSymbols::ProfiledFrameSymbols(const ProfiledFrameSymbols& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfiledFrameSymbols* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_name_id_) { from._impl_.function_name_id_ }

    , decltype(_impl_.file_name_id_) { from._impl_.file_name_id_ }

    , decltype(_impl_.line_number_) { from._impl_.line_number_ }

    , decltype(_impl_.frame_iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.frame_iid_ = from._impl_.frame_iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfiledFrameSymbols)
}

inline void ProfiledFrameSymbols::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_name_id_) { arena }

    , decltype(_impl_.file_name_id_) { arena }

    , decltype(_impl_.line_number_) { arena }

    , decltype(_impl_.frame_iid_) { ::uint64_t{0u} }

  };
}

ProfiledFrameSymbols::~ProfiledFrameSymbols() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfiledFrameSymbols)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfiledFrameSymbols::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_name_id_.~RepeatedField();
  _impl_.file_name_id_.~RepeatedField();
  _impl_.line_number_.~RepeatedField();
}

void ProfiledFrameSymbols::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfiledFrameSymbols::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfiledFrameSymbols)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_function_name_id()->Clear();
  _internal_mutable_file_name_id()->Clear();
  _internal_mutable_line_number()->Clear();
  _impl_.frame_iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfiledFrameSymbols::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 frame_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_iid(&has_bits);
          _impl_.frame_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 function_name_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_function_name_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_function_name_id(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 file_name_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_file_name_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_file_name_id(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 line_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_line_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_line_number(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfiledFrameSymbols::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfiledFrameSymbols)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 frame_iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_frame_iid(), target);
  }

  // repeated uint64 function_name_id = 2;
  for (int i = 0, n = this->_internal_function_name_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_function_name_id(i), target);
  }

  // repeated uint64 file_name_id = 3;
  for (int i = 0, n = this->_internal_file_name_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_file_name_id(i), target);
  }

  // repeated uint32 line_number = 4;
  for (int i = 0, n = this->_internal_line_number_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_line_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfiledFrameSymbols)
  return target;
}

::size_t ProfiledFrameSymbols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfiledFrameSymbols)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 function_name_id = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_function_name_id())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_function_name_id_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 file_name_id = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_file_name_id())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_file_name_id_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 line_number = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_line_number())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_line_number_size());
    ;
    total_size += tag_size + data_size;
  }

  // optional uint64 frame_iid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_frame_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfiledFrameSymbols::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfiledFrameSymbols::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfiledFrameSymbols::GetClassData() const { return &_class_data_; }


void ProfiledFrameSymbols::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfiledFrameSymbols*>(&to_msg);
  auto& from = static_cast<const ProfiledFrameSymbols&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfiledFrameSymbols)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.function_name_id_.MergeFrom(from._impl_.function_name_id_);
  _this->_impl_.file_name_id_.MergeFrom(from._impl_.file_name_id_);
  _this->_impl_.line_number_.MergeFrom(from._impl_.line_number_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_frame_iid(from._internal_frame_iid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfiledFrameSymbols::CopyFrom(const ProfiledFrameSymbols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfiledFrameSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfiledFrameSymbols::IsInitialized() const {
  return true;
}

void ProfiledFrameSymbols::InternalSwap(ProfiledFrameSymbols* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.function_name_id_.InternalSwap(&other->_impl_.function_name_id_);
  _impl_.file_name_id_.InternalSwap(&other->_impl_.file_name_id_);
  _impl_.line_number_.InternalSwap(&other->_impl_.line_number_);

  swap(_impl_.frame_iid_, other->_impl_.frame_iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfiledFrameSymbols::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[1]);
}
// ===================================================================

class Line::_Internal {
 public:
  using HasBits = decltype(std::declval<Line>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Line, _impl_._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_line_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Line* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_name_) {}

    , decltype(_impl_.source_file_name_) {}

    , decltype(_impl_.line_number_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.function_name_.Set(from._internal_function_name(), _this->GetArenaForAllocation());
  }
  _impl_.source_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.source_file_name_.Set(from._internal_source_file_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.line_number_ = from._impl_.line_number_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Line)
}

inline void Line::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.function_name_) {}

    , decltype(_impl_.source_file_name_) {}

    , decltype(_impl_.line_number_) { 0u }

  };
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Line)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Line::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_name_.Destroy();
  _impl_.source_file_name_.Destroy();
}

void Line::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Line)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.source_file_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.line_number_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.Line.function_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string source_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.Line.source_file_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 line_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_line_number(&has_bits);
          _impl_.line_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Line::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Line)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_function_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.Line.function_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string source_file_name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_source_file_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.Line.source_file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 line_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_line_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Line)
  return target;
}

::size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Line)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string function_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_function_name());
    }

    // optional string source_file_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_source_file_name());
    }

    // optional uint32 line_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_line_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Line::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Line::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Line::GetClassData() const { return &_class_data_; }


void Line::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Line)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_source_file_name(from._internal_source_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.line_number_ = from._impl_.line_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.function_name_, lhs_arena,
                                       &other->_impl_.function_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_file_name_, lhs_arena,
                                       &other->_impl_.source_file_name_, rhs_arena);

  swap(_impl_.line_number_, other->_impl_.line_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[2]);
}
// ===================================================================

class AddressSymbols::_Internal {
 public:
  using HasBits = decltype(std::declval<AddressSymbols>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddressSymbols, _impl_._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddressSymbols::AddressSymbols(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.AddressSymbols)
}
AddressSymbols::AddressSymbols(const AddressSymbols& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddressSymbols* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.address_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.address_ = from._impl_.address_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.AddressSymbols)
}

inline void AddressSymbols::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.address_) { ::uint64_t{0u} }

  };
}

AddressSymbols::~AddressSymbols() {
  // @@protoc_insertion_point(destructor:perfetto.protos.AddressSymbols)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddressSymbols::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_lines()->~RepeatedPtrField();
}

void AddressSymbols::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddressSymbols::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.AddressSymbols)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_lines()->Clear();
  _impl_.address_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressSymbols::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_address(&has_bits);
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.Line lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddressSymbols::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.AddressSymbols)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_address(), target);
  }

  // repeated .perfetto.protos.Line lines = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.AddressSymbols)
  return target;
}

::size_t AddressSymbols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.AddressSymbols)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.Line lines = 2;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_internal_lines()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 address = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressSymbols::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddressSymbols::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressSymbols::GetClassData() const { return &_class_data_; }


void AddressSymbols::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddressSymbols*>(&to_msg);
  auto& from = static_cast<const AddressSymbols&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.AddressSymbols)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lines()->MergeFrom(from._internal_lines());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressSymbols::CopyFrom(const AddressSymbols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.AddressSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressSymbols::IsInitialized() const {
  return true;
}

void AddressSymbols::InternalSwap(AddressSymbols* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_lines()->InternalSwap(other->_internal_mutable_lines());

  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressSymbols::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[3]);
}
// ===================================================================

class ModuleSymbols::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleSymbols>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModuleSymbols, _impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ModuleSymbols::ModuleSymbols(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ModuleSymbols)
}
ModuleSymbols::ModuleSymbols(const ModuleSymbols& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleSymbols* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_symbols_){from._impl_.address_symbols_}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.build_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.build_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.build_id_.Set(from._internal_build_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ModuleSymbols)
}

inline void ModuleSymbols::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_symbols_){arena}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.build_id_) {}

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.build_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleSymbols::~ModuleSymbols() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ModuleSymbols)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleSymbols::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_address_symbols()->~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.build_id_.Destroy();
}

void ModuleSymbols::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleSymbols::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ModuleSymbols)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_address_symbols()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.build_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleSymbols::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ModuleSymbols.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_build_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ModuleSymbols.build_id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.AddressSymbols address_symbols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address_symbols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleSymbols::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ModuleSymbols)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ModuleSymbols.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string build_id = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_build_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ModuleSymbols.build_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .perfetto.protos.AddressSymbols address_symbols = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_address_symbols_size()); i < n; i++) {
    const auto& repfield = this->_internal_address_symbols(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ModuleSymbols)
  return target;
}

::size_t ModuleSymbols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ModuleSymbols)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.AddressSymbols address_symbols = 3;
  total_size += 1UL * this->_internal_address_symbols_size();
  for (const auto& msg : this->_internal_address_symbols()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional string build_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_build_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleSymbols::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleSymbols::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleSymbols::GetClassData() const { return &_class_data_; }


void ModuleSymbols::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleSymbols*>(&to_msg);
  auto& from = static_cast<const ModuleSymbols&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ModuleSymbols)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_address_symbols()->MergeFrom(from._internal_address_symbols());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_build_id(from._internal_build_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleSymbols::CopyFrom(const ModuleSymbols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ModuleSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleSymbols::IsInitialized() const {
  return true;
}

void ModuleSymbols::InternalSwap(ModuleSymbols* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_address_symbols()->InternalSwap(other->_internal_mutable_address_symbols());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_id_, lhs_arena,
                                       &other->_impl_.build_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleSymbols::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[4]);
}
// ===================================================================

class Mapping::_Internal {
 public:
  using HasBits = decltype(std::declval<Mapping>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Mapping, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exact_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_start_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_load_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Mapping::Mapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mapping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_string_ids_) { from._impl_.path_string_ids_ }

    , decltype(_impl_.iid_) {}

    , decltype(_impl_.build_id_) {}

    , decltype(_impl_.start_offset_) {}

    , decltype(_impl_.start_) {}

    , decltype(_impl_.end_) {}

    , decltype(_impl_.load_bias_) {}

    , decltype(_impl_.exact_offset_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.iid_, &from._impl_.iid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.exact_offset_) -
    reinterpret_cast<char*>(&_impl_.iid_)) + sizeof(_impl_.exact_offset_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Mapping)
}

inline void Mapping::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_string_ids_) { arena }

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

    , decltype(_impl_.build_id_) { ::uint64_t{0u} }

    , decltype(_impl_.start_offset_) { ::uint64_t{0u} }

    , decltype(_impl_.start_) { ::uint64_t{0u} }

    , decltype(_impl_.end_) { ::uint64_t{0u} }

    , decltype(_impl_.load_bias_) { ::uint64_t{0u} }

    , decltype(_impl_.exact_offset_) { ::uint64_t{0u} }

  };
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Mapping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mapping::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_string_ids_.~RepeatedField();
}

void Mapping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Mapping)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_path_string_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.iid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.exact_offset_) -
        reinterpret_cast<char*>(&_impl_.iid_)) + sizeof(_impl_.exact_offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mapping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 build_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_build_id(&has_bits);
          _impl_.build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 start_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_start_offset(&has_bits);
          _impl_.start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_start(&has_bits);
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 load_bias = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_load_bias(&has_bits);
          _impl_.load_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 path_string_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_path_string_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_path_string_ids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 exact_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_exact_offset(&has_bits);
          _impl_.exact_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Mapping::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Mapping)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional uint64 build_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_build_id(), target);
  }

  // optional uint64 start_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_start_offset(), target);
  }

  // optional uint64 start = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_start(), target);
  }

  // optional uint64 end = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_end(), target);
  }

  // optional uint64 load_bias = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_load_bias(), target);
  }

  // repeated uint64 path_string_ids = 7;
  for (int i = 0, n = this->_internal_path_string_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_path_string_ids(i), target);
  }

  // optional uint64 exact_offset = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_exact_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Mapping)
  return target;
}

::size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Mapping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 path_string_ids = 7;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_path_string_ids())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_path_string_ids_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

    // optional uint64 build_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_build_id());
    }

    // optional uint64 start_offset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_start_offset());
    }

    // optional uint64 start = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_start());
    }

    // optional uint64 end = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_end());
    }

    // optional uint64 load_bias = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_load_bias());
    }

    // optional uint64 exact_offset = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_exact_offset());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mapping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mapping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mapping::GetClassData() const { return &_class_data_; }


void Mapping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mapping*>(&to_msg);
  auto& from = static_cast<const Mapping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Mapping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.path_string_ids_.MergeFrom(from._impl_.path_string_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.build_id_ = from._impl_.build_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_offset_ = from._impl_.start_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_ = from._impl_.start_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.load_bias_ = from._impl_.load_bias_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.exact_offset_ = from._impl_.exact_offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.path_string_ids_.InternalSwap(&other->_impl_.path_string_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mapping, _impl_.exact_offset_)
      + sizeof(Mapping::_impl_.exact_offset_)
      - PROTOBUF_FIELD_OFFSET(Mapping, _impl_.iid_)>(
          reinterpret_cast<char*>(&_impl_.iid_),
          reinterpret_cast<char*>(&other->_impl_.iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mapping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[5]);
}
// ===================================================================

class Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<Frame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Frame, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_function_name_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mapping_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rel_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Frame)
}

inline void Frame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iid_) { ::uint64_t{0u} }

    , decltype(_impl_.function_name_id_) { ::uint64_t{0u} }

    , decltype(_impl_.mapping_id_) { ::uint64_t{0u} }

    , decltype(_impl_.rel_pc_) { ::uint64_t{0u} }

  };
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Frame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Frame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.iid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rel_pc_) -
        reinterpret_cast<char*>(&_impl_.iid_)) + sizeof(_impl_.rel_pc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 function_name_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_function_name_id(&has_bits);
          _impl_.function_name_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 mapping_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_mapping_id(&has_bits);
          _impl_.mapping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 rel_pc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_rel_pc(&has_bits);
          _impl_.rel_pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Frame::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Frame)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional uint64 function_name_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_function_name_id(), target);
  }

  // optional uint64 mapping_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_mapping_id(), target);
  }

  // optional uint64 rel_pc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_rel_pc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Frame)
  return target;
}

::size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Frame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

    // optional uint64 function_name_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_function_name_id());
    }

    // optional uint64 mapping_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_mapping_id());
    }

    // optional uint64 rel_pc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_rel_pc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Frame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.function_name_id_ = from._impl_.function_name_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mapping_id_ = from._impl_.mapping_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rel_pc_ = from._impl_.rel_pc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, _impl_.rel_pc_)
      + sizeof(Frame::_impl_.rel_pc_)
      - PROTOBUF_FIELD_OFFSET(Frame, _impl_.iid_)>(
          reinterpret_cast<char*>(&_impl_.iid_),
          reinterpret_cast<char*>(&other->_impl_.iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[6]);
}
// ===================================================================

class Callstack::_Internal {
 public:
  using HasBits = decltype(std::declval<Callstack>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Callstack, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Callstack::Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Callstack)
}
Callstack::Callstack(const Callstack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Callstack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_ids_) { from._impl_.frame_ids_ }

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Callstack)
}

inline void Callstack::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_ids_) { arena }

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
}

Callstack::~Callstack() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Callstack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Callstack::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame_ids_.~RepeatedField();
}

void Callstack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Callstack::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Callstack)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_frame_ids()->Clear();
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Callstack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 frame_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_frame_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_frame_ids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Callstack::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Callstack)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // repeated uint64 frame_ids = 2;
  for (int i = 0, n = this->_internal_frame_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_frame_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Callstack)
  return target;
}

::size_t Callstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Callstack)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 frame_ids = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_frame_ids())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_frame_ids_size());
    ;
    total_size += tag_size + data_size;
  }

  // optional uint64 iid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Callstack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Callstack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Callstack::GetClassData() const { return &_class_data_; }


void Callstack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Callstack*>(&to_msg);
  auto& from = static_cast<const Callstack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Callstack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.frame_ids_.MergeFrom(from._impl_.frame_ids_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_iid(from._internal_iid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Callstack::CopyFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callstack::IsInitialized() const {
  return true;
}

void Callstack::InternalSwap(Callstack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.frame_ids_.InternalSwap(&other->_impl_.frame_ids_);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Callstack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::InternedString*
Arena::CreateMaybeMessage< ::perfetto::protos::InternedString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::InternedString >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfiledFrameSymbols*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfiledFrameSymbols >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfiledFrameSymbols >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Line*
Arena::CreateMaybeMessage< ::perfetto::protos::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::AddressSymbols*
Arena::CreateMaybeMessage< ::perfetto::protos::AddressSymbols >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::AddressSymbols >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ModuleSymbols*
Arena::CreateMaybeMessage< ::perfetto::protos::ModuleSymbols >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ModuleSymbols >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Mapping*
Arena::CreateMaybeMessage< ::perfetto::protos::Mapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Mapping >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Frame*
Arena::CreateMaybeMessage< ::perfetto::protos::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Callstack*
Arena::CreateMaybeMessage< ::perfetto::protos::Callstack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Callstack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
