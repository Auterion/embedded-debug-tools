// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_packet.proto

#include "protos/perfetto/trace/profiling/profile_packet.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ProfilePacket_HeapSample::ProfilePacket_HeapSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.callstack_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.self_allocated_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.self_freed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.alloc_count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.free_count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.self_max_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.self_max_count_)*/ ::uint64_t{0u}
} {}
struct ProfilePacket_HeapSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_HeapSampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_HeapSampleDefaultTypeInternal() {}
  union {
    ProfilePacket_HeapSample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_HeapSampleDefaultTypeInternal _ProfilePacket_HeapSample_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upper_limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_bucket_)*/ false
} {}
struct ProfilePacket_Histogram_BucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_Histogram_BucketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_Histogram_BucketDefaultTypeInternal() {}
  union {
    ProfilePacket_Histogram_Bucket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_Histogram_BucketDefaultTypeInternal _ProfilePacket_Histogram_Bucket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProfilePacket_Histogram::ProfilePacket_Histogram(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buckets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfilePacket_HistogramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_HistogramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_HistogramDefaultTypeInternal() {}
  union {
    ProfilePacket_Histogram _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_HistogramDefaultTypeInternal _ProfilePacket_Histogram_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unwinding_time_us_)*/nullptr
  , /*decltype(_impl_.unwinding_errors_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.heap_samples_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.map_reparses_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.total_unwinding_time_us_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.client_spinlock_blocked_us_)*/ ::uint64_t{0u}
} {}
struct ProfilePacket_ProcessStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_ProcessStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_ProcessStatsDefaultTypeInternal() {}
  union {
    ProfilePacket_ProcessStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_ProcessStatsDefaultTypeInternal _ProfilePacket_ProcessStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.heap_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_.pid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.from_startup_)*/ false

  , /*decltype(_impl_.rejected_concurrent_)*/ false

  , /*decltype(_impl_.disconnected_)*/ false

  , /*decltype(_impl_.buffer_overran_)*/ false

  , /*decltype(_impl_.buffer_corrupted_)*/ false

  , /*decltype(_impl_.hit_guardrail_)*/ false

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sampling_interval_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.orig_sampling_interval_bytes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.client_error_)*/ 0
} {}
struct ProfilePacket_ProcessHeapSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacket_ProcessHeapSamplesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacket_ProcessHeapSamplesDefaultTypeInternal() {}
  union {
    ProfilePacket_ProcessHeapSamples _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacket_ProcessHeapSamplesDefaultTypeInternal _ProfilePacket_ProcessHeapSamples_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProfilePacket::ProfilePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_.frames_)*/{}
  , /*decltype(_impl_.callstacks_)*/{}
  , /*decltype(_impl_.mappings_)*/{}
  , /*decltype(_impl_.process_dumps_)*/{}
  , /*decltype(_impl_.index_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.continued_)*/ false
} {}
struct ProfilePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilePacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilePacketDefaultTypeInternal() {}
  union {
    ProfilePacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilePacketDefaultTypeInternal _ProfilePacket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamingAllocation::StreamingAllocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {}

  , /*decltype(_impl_.size_)*/ {}

  , /*decltype(_impl_.sample_size_)*/ {}

  , /*decltype(_impl_.clock_monotonic_coarse_timestamp_)*/ {}

  , /*decltype(_impl_.heap_id_)*/ {}

  , /*decltype(_impl_.sequence_number_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamingAllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingAllocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingAllocationDefaultTypeInternal() {}
  union {
    StreamingAllocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingAllocationDefaultTypeInternal _StreamingAllocation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamingFree::StreamingFree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {}

  , /*decltype(_impl_.heap_id_)*/ {}

  , /*decltype(_impl_.sequence_number_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamingFreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingFreeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingFreeDefaultTypeInternal() {}
  union {
    StreamingFree _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingFreeDefaultTypeInternal _StreamingFree_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamingProfilePacket::StreamingProfilePacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.callstack_iid_)*/ {}

  , /*decltype(_impl_.timestamp_delta_us_)*/ {}

  , /*decltype(_impl_.process_priority_)*/ 0
} {}
struct StreamingProfilePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingProfilePacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingProfilePacketDefaultTypeInternal() {}
  union {
    StreamingProfilePacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingProfilePacketDefaultTypeInternal _StreamingProfilePacket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Profiling::Profiling(
    ::_pbi::ConstantInitialized) {}
struct ProfilingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfilingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfilingDefaultTypeInternal() {}
  union {
    Profiling _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfilingDefaultTypeInternal _Profiling_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfSample_ProducerEvent::PerfSample_ProducerEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optional_source_stop_reason_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfSample_ProducerEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfSample_ProducerEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfSample_ProducerEventDefaultTypeInternal() {}
  union {
    PerfSample_ProducerEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfSample_ProducerEventDefaultTypeInternal _PerfSample_ProducerEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfSample::PerfSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.producer_event_)*/nullptr
  , /*decltype(_impl_.cpu_)*/ 0u

  , /*decltype(_impl_.pid_)*/ 0u

  , /*decltype(_impl_.callstack_iid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tid_)*/ 0u

  , /*decltype(_impl_.cpu_mode_)*/ 0

  , /*decltype(_impl_.timebase_count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kernel_records_lost_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.optional_unwind_error_)*/{}
  , /*decltype(_impl_.optional_sample_skipped_reason_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfSampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfSampleDefaultTypeInternal() {}
  union {
    PerfSample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfSampleDefaultTypeInternal _PerfSample_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfSampleDefaults::PerfSampleDefaults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timebase_)*/nullptr
  , /*decltype(_impl_.process_shard_count_)*/ 0u

  , /*decltype(_impl_.chosen_process_shard_)*/ 0u
} {}
struct PerfSampleDefaultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfSampleDefaultsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfSampleDefaultsDefaultTypeInternal() {}
  union {
    PerfSampleDefaults _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfSampleDefaultsDefaultTypeInternal _PerfSampleDefaults_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.callstack_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.self_allocated_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.self_freed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.self_max_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.self_max_count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.alloc_count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_HeapSample, _impl_.free_count_),
    0,
    1,
    2,
    6,
    7,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram_Bucket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram_Bucket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram_Bucket, _impl_.upper_limit_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram_Bucket, _impl_.max_bucket_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram_Bucket, _impl_.count_),
    0,
    2,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_Histogram, _impl_.buckets_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_.unwinding_errors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_.heap_samples_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_.map_reparses_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_.unwinding_time_us_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_.total_unwinding_time_us_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessStats, _impl_.client_spinlock_blocked_us_),
    1,
    2,
    3,
    0,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.from_startup_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.rejected_concurrent_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.disconnected_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.buffer_overran_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.client_error_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.buffer_corrupted_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.hit_guardrail_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.heap_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.sampling_interval_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.orig_sampling_interval_bytes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.stats_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket_ProcessHeapSamples, _impl_.samples_),
    2,
    3,
    4,
    5,
    6,
    12,
    7,
    8,
    0,
    10,
    11,
    9,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.strings_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.mappings_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.frames_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.callstacks_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.process_dumps_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.continued_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProfilePacket, _impl_.index_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _impl_.sample_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _impl_.clock_monotonic_coarse_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _impl_.heap_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingAllocation, _impl_.sequence_number_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingFree, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingFree, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingFree, _impl_.heap_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingFree, _impl_.sequence_number_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingProfilePacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingProfilePacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingProfilePacket, _impl_.callstack_iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingProfilePacket, _impl_.timestamp_delta_us_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::StreamingProfilePacket, _impl_.process_priority_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::Profiling, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample_ProducerEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample_ProducerEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample_ProducerEvent, _impl_.optional_source_stop_reason_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.tid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.cpu_mode_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.timebase_count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.callstack_iid_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.kernel_records_lost_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.producer_event_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.optional_unwind_error_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_.optional_sample_skipped_reason_),
    1,
    2,
    4,
    5,
    6,
    3,
    ~0u,
    7,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSampleDefaults, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSampleDefaults, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSampleDefaults, _impl_.timebase_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSampleDefaults, _impl_.process_shard_count_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSampleDefaults, _impl_.chosen_process_shard_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::perfetto::protos::ProfilePacket_HeapSample)},
        { 24, 35, -1, sizeof(::perfetto::protos::ProfilePacket_Histogram_Bucket)},
        { 38, -1, -1, sizeof(::perfetto::protos::ProfilePacket_Histogram)},
        { 47, 61, -1, sizeof(::perfetto::protos::ProfilePacket_ProcessStats)},
        { 67, 89, -1, sizeof(::perfetto::protos::ProfilePacket_ProcessHeapSamples)},
        { 103, 118, -1, sizeof(::perfetto::protos::ProfilePacket)},
        { 125, -1, -1, sizeof(::perfetto::protos::StreamingAllocation)},
        { 139, -1, -1, sizeof(::perfetto::protos::StreamingFree)},
        { 150, 161, -1, sizeof(::perfetto::protos::StreamingProfilePacket)},
        { 164, -1, -1, sizeof(::perfetto::protos::Profiling)},
        { 172, -1, -1, sizeof(::perfetto::protos::PerfSample_ProducerEvent)},
        { 182, 202, -1, sizeof(::perfetto::protos::PerfSample)},
        { 212, 223, -1, sizeof(::perfetto::protos::PerfSampleDefaults)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ProfilePacket_HeapSample_default_instance_._instance,
    &::perfetto::protos::_ProfilePacket_Histogram_Bucket_default_instance_._instance,
    &::perfetto::protos::_ProfilePacket_Histogram_default_instance_._instance,
    &::perfetto::protos::_ProfilePacket_ProcessStats_default_instance_._instance,
    &::perfetto::protos::_ProfilePacket_ProcessHeapSamples_default_instance_._instance,
    &::perfetto::protos::_ProfilePacket_default_instance_._instance,
    &::perfetto::protos::_StreamingAllocation_default_instance_._instance,
    &::perfetto::protos::_StreamingFree_default_instance_._instance,
    &::perfetto::protos::_StreamingProfilePacket_default_instance_._instance,
    &::perfetto::protos::_Profiling_default_instance_._instance,
    &::perfetto::protos::_PerfSample_ProducerEvent_default_instance_._instance,
    &::perfetto::protos::_PerfSample_default_instance_._instance,
    &::perfetto::protos::_PerfSampleDefaults_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n4protos/perfetto/trace/profiling/profil"
    "e_packet.proto\022\017perfetto.protos\032(protos/"
    "perfetto/common/perf_events.proto\0324proto"
    "s/perfetto/trace/profiling/profile_commo"
    "n.proto\"\274\013\n\rProfilePacket\0220\n\007strings\030\001 \003"
    "(\0132\037.perfetto.protos.InternedString\022*\n\010m"
    "appings\030\004 \003(\0132\030.perfetto.protos.Mapping\022"
    "&\n\006frames\030\002 \003(\0132\026.perfetto.protos.Frame\022"
    ".\n\ncallstacks\030\003 \003(\0132\032.perfetto.protos.Ca"
    "llstack\022H\n\rprocess_dumps\030\005 \003(\01321.perfett"
    "o.protos.ProfilePacket.ProcessHeapSample"
    "s\022\021\n\tcontinued\030\006 \001(\010\022\r\n\005index\030\007 \001(\004\032\272\001\n\n"
    "HeapSample\022\024\n\014callstack_id\030\001 \001(\004\022\026\n\016self"
    "_allocated\030\002 \001(\004\022\022\n\nself_freed\030\003 \001(\004\022\020\n\010"
    "self_max\030\010 \001(\004\022\026\n\016self_max_count\030\t \001(\004\022\021"
    "\n\ttimestamp\030\004 \001(\004\022\023\n\013alloc_count\030\005 \001(\004\022\022"
    "\n\nfree_count\030\006 \001(\004J\004\010\007\020\010\032\217\001\n\tHistogram\022@"
    "\n\007buckets\030\001 \003(\0132/.perfetto.protos.Profil"
    "ePacket.Histogram.Bucket\032@\n\006Bucket\022\023\n\013up"
    "per_limit\030\001 \001(\004\022\022\n\nmax_bucket\030\002 \001(\010\022\r\n\005c"
    "ount\030\003 \001(\004\032\336\001\n\014ProcessStats\022\030\n\020unwinding"
    "_errors\030\001 \001(\004\022\024\n\014heap_samples\030\002 \001(\004\022\024\n\014m"
    "ap_reparses\030\003 \001(\004\022C\n\021unwinding_time_us\030\004"
    " \001(\0132(.perfetto.protos.ProfilePacket.His"
    "togram\022\037\n\027total_unwinding_time_us\030\005 \001(\004\022"
    "\"\n\032client_spinlock_blocked_us\030\006 \001(\004\032\330\004\n\022"
    "ProcessHeapSamples\022\013\n\003pid\030\001 \001(\004\022\024\n\014from_"
    "startup\030\003 \001(\010\022\033\n\023rejected_concurrent\030\004 \001"
    "(\010\022\024\n\014disconnected\030\006 \001(\010\022\026\n\016buffer_overr"
    "an\030\007 \001(\010\022S\n\014client_error\030\016 \001(\0162=.perfett"
    "o.protos.ProfilePacket.ProcessHeapSample"
    "s.ClientError\022\030\n\020buffer_corrupted\030\010 \001(\010\022"
    "\025\n\rhit_guardrail\030\n \001(\010\022\021\n\theap_name\030\013 \001("
    "\t\022\037\n\027sampling_interval_bytes\030\014 \001(\004\022$\n\034or"
    "ig_sampling_interval_bytes\030\r \001(\004\022\021\n\ttime"
    "stamp\030\t \001(\004\022:\n\005stats\030\005 \001(\0132+.perfetto.pr"
    "otos.ProfilePacket.ProcessStats\022:\n\007sampl"
    "es\030\002 \003(\0132).perfetto.protos.ProfilePacket"
    ".HeapSample\"i\n\013ClientError\022\025\n\021CLIENT_ERR"
    "OR_NONE\020\000\022\034\n\030CLIENT_ERROR_HIT_TIMEOUT\020\001\022"
    "%\n!CLIENT_ERROR_INVALID_STACK_BOUNDS\020\002\"\235"
    "\001\n\023StreamingAllocation\022\017\n\007address\030\001 \003(\004\022"
    "\014\n\004size\030\002 \003(\004\022\023\n\013sample_size\030\003 \003(\004\022(\n cl"
    "ock_monotonic_coarse_timestamp\030\004 \003(\004\022\017\n\007"
    "heap_id\030\005 \003(\r\022\027\n\017sequence_number\030\006 \003(\004\"J"
    "\n\rStreamingFree\022\017\n\007address\030\001 \003(\004\022\017\n\007heap"
    "_id\030\002 \003(\r\022\027\n\017sequence_number\030\003 \003(\004\"e\n\026St"
    "reamingProfilePacket\022\025\n\rcallstack_iid\030\001 "
    "\003(\004\022\032\n\022timestamp_delta_us\030\002 \003(\003\022\030\n\020proce"
    "ss_priority\030\003 \001(\005\"\220\005\n\tProfiling\"|\n\007CpuMo"
    "de\022\020\n\014MODE_UNKNOWN\020\000\022\017\n\013MODE_KERNEL\020\001\022\r\n"
    "\tMODE_USER\020\002\022\023\n\017MODE_HYPERVISOR\020\003\022\025\n\021MOD"
    "E_GUEST_KERNEL\020\004\022\023\n\017MODE_GUEST_USER\020\005\"\204\004"
    "\n\020StackUnwindError\022\030\n\024UNWIND_ERROR_UNKNO"
    "WN\020\000\022\025\n\021UNWIND_ERROR_NONE\020\001\022\037\n\033UNWIND_ER"
    "ROR_MEMORY_INVALID\020\002\022\034\n\030UNWIND_ERROR_UNW"
    "IND_INFO\020\003\022\034\n\030UNWIND_ERROR_UNSUPPORTED\020\004"
    "\022\034\n\030UNWIND_ERROR_INVALID_MAP\020\005\022$\n UNWIND"
    "_ERROR_MAX_FRAMES_EXCEEDED\020\006\022\037\n\033UNWIND_E"
    "RROR_REPEATED_FRAME\020\007\022\034\n\030UNWIND_ERROR_IN"
    "VALID_ELF\020\010\022\034\n\030UNWIND_ERROR_SYSTEM_CALL\020"
    "\t\022\037\n\033UNWIND_ERROR_THREAD_TIMEOUT\020\n\022&\n\"UN"
    "WIND_ERROR_THREAD_DOES_NOT_EXIST\020\013\022\031\n\025UN"
    "WIND_ERROR_BAD_ARCH\020\014\022\033\n\027UNWIND_ERROR_MA"
    "PS_PARSE\020\r\022\"\n\036UNWIND_ERROR_INVALID_PARAM"
    "ETER\020\016\022\034\n\030UNWIND_ERROR_PTRACE_CALL\020\017\"\266\006\n"
    "\nPerfSample\022\013\n\003cpu\030\001 \001(\r\022\013\n\003pid\030\002 \001(\r\022\013\n"
    "\003tid\030\003 \001(\r\0224\n\010cpu_mode\030\005 \001(\0162\".perfetto."
    "protos.Profiling.CpuMode\022\026\n\016timebase_cou"
    "nt\030\006 \001(\004\022\025\n\rcallstack_iid\030\004 \001(\004\022C\n\014unwin"
    "d_error\030\020 \001(\0162+.perfetto.protos.Profilin"
    "g.StackUnwindErrorH\000\022\033\n\023kernel_records_l"
    "ost\030\021 \001(\004\022M\n\025sample_skipped_reason\030\022 \001(\016"
    "2,.perfetto.protos.PerfSample.SampleSkip"
    "ReasonH\001\022A\n\016producer_event\030\023 \001(\0132).perfe"
    "tto.protos.PerfSample.ProducerEvent\032\334\001\n\r"
    "ProducerEvent\022\\\n\022source_stop_reason\030\001 \001("
    "\0162>.perfetto.protos.PerfSample.ProducerE"
    "vent.DataSourceStopReasonH\000\"N\n\024DataSourc"
    "eStopReason\022\031\n\025PROFILER_STOP_UNKNOWN\020\000\022\033"
    "\n\027PROFILER_STOP_GUARDRAIL\020\001B\035\n\033optional_"
    "source_stop_reason\"\215\001\n\020SampleSkipReason\022"
    "\031\n\025PROFILER_SKIP_UNKNOWN\020\000\022\034\n\030PROFILER_S"
    "KIP_READ_STAGE\020\001\022\036\n\032PROFILER_SKIP_UNWIND"
    "_STAGE\020\002\022 \n\034PROFILER_SKIP_UNWIND_ENQUEUE"
    "\020\003B\027\n\025optional_unwind_errorB \n\036optional_"
    "sample_skipped_reason\"\207\001\n\022PerfSampleDefa"
    "ults\0226\n\010timebase\030\001 \001(\0132$.perfetto.protos"
    ".PerfEvents.Timebase\022\033\n\023process_shard_co"
    "unt\030\002 \001(\r\022\034\n\024chosen_process_shard\030\003 \001(\r"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_deps[2] =
    {
        &::descriptor_table_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto = {
    false,
    false,
    3599,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto,
    "protos/perfetto/trace/profiling/profile_packet.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_deps,
    2,
    13,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfilePacket_ProcessHeapSamples_ClientError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[0];
}
bool ProfilePacket_ProcessHeapSamples_ClientError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_NONE;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_HIT_TIMEOUT;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_INVALID_STACK_BOUNDS;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::ClientError_MIN;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::ClientError_MAX;
constexpr int ProfilePacket_ProcessHeapSamples::ClientError_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Profiling_CpuMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[1];
}
bool Profiling_CpuMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Profiling_CpuMode Profiling::MODE_UNKNOWN;
constexpr Profiling_CpuMode Profiling::MODE_KERNEL;
constexpr Profiling_CpuMode Profiling::MODE_USER;
constexpr Profiling_CpuMode Profiling::MODE_HYPERVISOR;
constexpr Profiling_CpuMode Profiling::MODE_GUEST_KERNEL;
constexpr Profiling_CpuMode Profiling::MODE_GUEST_USER;
constexpr Profiling_CpuMode Profiling::CpuMode_MIN;
constexpr Profiling_CpuMode Profiling::CpuMode_MAX;
constexpr int Profiling::CpuMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Profiling_StackUnwindError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[2];
}
bool Profiling_StackUnwindError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNKNOWN;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_NONE;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MEMORY_INVALID;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNWIND_INFO;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNSUPPORTED;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_MAP;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MAX_FRAMES_EXCEEDED;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_REPEATED_FRAME;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_ELF;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_SYSTEM_CALL;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_THREAD_TIMEOUT;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_THREAD_DOES_NOT_EXIST;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_BAD_ARCH;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MAPS_PARSE;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_PARAMETER;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_PTRACE_CALL;
constexpr Profiling_StackUnwindError Profiling::StackUnwindError_MIN;
constexpr Profiling_StackUnwindError Profiling::StackUnwindError_MAX;
constexpr int Profiling::StackUnwindError_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerfSample_ProducerEvent_DataSourceStopReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[3];
}
bool PerfSample_ProducerEvent_DataSourceStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::PROFILER_STOP_UNKNOWN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::PROFILER_STOP_GUARDRAIL;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::DataSourceStopReason_MIN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::DataSourceStopReason_MAX;
constexpr int PerfSample_ProducerEvent::DataSourceStopReason_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerfSample_SampleSkipReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[4];
}
bool PerfSample_SampleSkipReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNKNOWN;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_READ_STAGE;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNWIND_STAGE;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNWIND_ENQUEUE;
constexpr PerfSample_SampleSkipReason PerfSample::SampleSkipReason_MIN;
constexpr PerfSample_SampleSkipReason PerfSample::SampleSkipReason_MAX;
constexpr int PerfSample::SampleSkipReason_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ProfilePacket_HeapSample::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_HeapSample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, _impl_._has_bits_);
  static void set_has_callstack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_self_allocated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_self_freed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_self_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_self_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alloc_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProfilePacket_HeapSample::ProfilePacket_HeapSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.HeapSample)
}
ProfilePacket_HeapSample::ProfilePacket_HeapSample(const ProfilePacket_HeapSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.HeapSample)
}

inline void ProfilePacket_HeapSample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_id_) { ::uint64_t{0u} }

    , decltype(_impl_.self_allocated_) { ::uint64_t{0u} }

    , decltype(_impl_.self_freed_) { ::uint64_t{0u} }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.alloc_count_) { ::uint64_t{0u} }

    , decltype(_impl_.free_count_) { ::uint64_t{0u} }

    , decltype(_impl_.self_max_) { ::uint64_t{0u} }

    , decltype(_impl_.self_max_count_) { ::uint64_t{0u} }

  };
}

ProfilePacket_HeapSample::~ProfilePacket_HeapSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.HeapSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_HeapSample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProfilePacket_HeapSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_HeapSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.HeapSample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.callstack_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.self_max_count_) -
        reinterpret_cast<char*>(&_impl_.callstack_id_)) + sizeof(_impl_.self_max_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePacket_HeapSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 callstack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_callstack_id(&has_bits);
          _impl_.callstack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 self_allocated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_self_allocated(&has_bits);
          _impl_.self_allocated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 self_freed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_self_freed(&has_bits);
          _impl_.self_freed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 alloc_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_alloc_count(&has_bits);
          _impl_.alloc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 free_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_free_count(&has_bits);
          _impl_.free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 self_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_self_max(&has_bits);
          _impl_.self_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 self_max_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_self_max_count(&has_bits);
          _impl_.self_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfilePacket_HeapSample::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.HeapSample)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 callstack_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_callstack_id(), target);
  }

  // optional uint64 self_allocated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_self_allocated(), target);
  }

  // optional uint64 self_freed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_self_freed(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_timestamp(), target);
  }

  // optional uint64 alloc_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_alloc_count(), target);
  }

  // optional uint64 free_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_free_count(), target);
  }

  // optional uint64 self_max = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_self_max(), target);
  }

  // optional uint64 self_max_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_self_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.HeapSample)
  return target;
}

::size_t ProfilePacket_HeapSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.HeapSample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 callstack_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_callstack_id());
    }

    // optional uint64 self_allocated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_self_allocated());
    }

    // optional uint64 self_freed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_self_freed());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional uint64 alloc_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_alloc_count());
    }

    // optional uint64 free_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_free_count());
    }

    // optional uint64 self_max = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_self_max());
    }

    // optional uint64 self_max_count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_self_max_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePacket_HeapSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilePacket_HeapSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePacket_HeapSample::GetClassData() const { return &_class_data_; }


void ProfilePacket_HeapSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilePacket_HeapSample*>(&to_msg);
  auto& from = static_cast<const ProfilePacket_HeapSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.HeapSample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.callstack_id_ = from._impl_.callstack_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.self_allocated_ = from._impl_.self_allocated_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.self_freed_ = from._impl_.self_freed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.alloc_count_ = from._impl_.alloc_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.free_count_ = from._impl_.free_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.self_max_ = from._impl_.self_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.self_max_count_ = from._impl_.self_max_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePacket_HeapSample::CopyFrom(const ProfilePacket_HeapSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.HeapSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_HeapSample::IsInitialized() const {
  return true;
}

void ProfilePacket_HeapSample::InternalSwap(ProfilePacket_HeapSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, _impl_.self_max_count_)
      + sizeof(ProfilePacket_HeapSample::_impl_.self_max_count_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, _impl_.callstack_id_)>(
          reinterpret_cast<char*>(&_impl_.callstack_id_),
          reinterpret_cast<char*>(&other->_impl_.callstack_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePacket_HeapSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[0]);
}
// ===================================================================

class ProfilePacket_Histogram_Bucket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_Histogram_Bucket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, _impl_._has_bits_);
  static void set_has_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
}
ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(const ProfilePacket_Histogram_Bucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
}

inline void ProfilePacket_Histogram_Bucket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upper_limit_) { ::uint64_t{0u} }

    , decltype(_impl_.count_) { ::uint64_t{0u} }

    , decltype(_impl_.max_bucket_) { false }

  };
}

ProfilePacket_Histogram_Bucket::~ProfilePacket_Histogram_Bucket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_Histogram_Bucket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProfilePacket_Histogram_Bucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_Histogram_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.upper_limit_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_bucket_) -
        reinterpret_cast<char*>(&_impl_.upper_limit_)) + sizeof(_impl_.max_bucket_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePacket_Histogram_Bucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upper_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_upper_limit(&has_bits);
          _impl_.upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool max_bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_max_bucket(&has_bits);
          _impl_.max_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfilePacket_Histogram_Bucket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 upper_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_upper_limit(), target);
  }

  // optional bool max_bucket = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_max_bucket(), target);
  }

  // optional uint64 count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.Histogram.Bucket)
  return target;
}

::size_t ProfilePacket_Histogram_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 upper_limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_upper_limit());
    }

    // optional uint64 count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_count());
    }

    // optional bool max_bucket = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePacket_Histogram_Bucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilePacket_Histogram_Bucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePacket_Histogram_Bucket::GetClassData() const { return &_class_data_; }


void ProfilePacket_Histogram_Bucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilePacket_Histogram_Bucket*>(&to_msg);
  auto& from = static_cast<const ProfilePacket_Histogram_Bucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.upper_limit_ = from._impl_.upper_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_bucket_ = from._impl_.max_bucket_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePacket_Histogram_Bucket::CopyFrom(const ProfilePacket_Histogram_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_Histogram_Bucket::IsInitialized() const {
  return true;
}

void ProfilePacket_Histogram_Bucket::InternalSwap(ProfilePacket_Histogram_Bucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, _impl_.max_bucket_)
      + sizeof(ProfilePacket_Histogram_Bucket::_impl_.max_bucket_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, _impl_.upper_limit_)>(
          reinterpret_cast<char*>(&_impl_.upper_limit_),
          reinterpret_cast<char*>(&other->_impl_.upper_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePacket_Histogram_Bucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[1]);
}
// ===================================================================

class ProfilePacket_Histogram::_Internal {
 public:
};

ProfilePacket_Histogram::ProfilePacket_Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.Histogram)
}
ProfilePacket_Histogram::ProfilePacket_Histogram(const ProfilePacket_Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfilePacket_Histogram* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buckets_){from._impl_.buckets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.Histogram)
}

inline void ProfilePacket_Histogram::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buckets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProfilePacket_Histogram::~ProfilePacket_Histogram() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.Histogram)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_Histogram::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buckets()->~RepeatedPtrField();
}

void ProfilePacket_Histogram::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.Histogram)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buckets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePacket_Histogram::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfilePacket_Histogram::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.Histogram)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buckets_size()); i < n; i++) {
    const auto& repfield = this->_internal_buckets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.Histogram)
  return target;
}

::size_t ProfilePacket_Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.Histogram)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->_internal_buckets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePacket_Histogram::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilePacket_Histogram::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePacket_Histogram::GetClassData() const { return &_class_data_; }


void ProfilePacket_Histogram::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilePacket_Histogram*>(&to_msg);
  auto& from = static_cast<const ProfilePacket_Histogram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.Histogram)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buckets()->MergeFrom(from._internal_buckets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePacket_Histogram::CopyFrom(const ProfilePacket_Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_Histogram::IsInitialized() const {
  return true;
}

void ProfilePacket_Histogram::InternalSwap(ProfilePacket_Histogram* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buckets()->InternalSwap(other->_internal_mutable_buckets());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePacket_Histogram::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[2]);
}
// ===================================================================

class ProfilePacket_ProcessStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_ProcessStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, _impl_._has_bits_);
  static void set_has_unwinding_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heap_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_reparses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ProfilePacket_Histogram& unwinding_time_us(const ProfilePacket_ProcessStats* msg);
  static void set_has_unwinding_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_unwinding_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_spinlock_blocked_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::perfetto::protos::ProfilePacket_Histogram&
ProfilePacket_ProcessStats::_Internal::unwinding_time_us(const ProfilePacket_ProcessStats* msg) {
  return *msg->_impl_.unwinding_time_us_;
}
ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.ProcessStats)
}
ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(const ProfilePacket_ProcessStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfilePacket_ProcessStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unwinding_time_us_){nullptr}
    , decltype(_impl_.unwinding_errors_) {}

    , decltype(_impl_.heap_samples_) {}

    , decltype(_impl_.map_reparses_) {}

    , decltype(_impl_.total_unwinding_time_us_) {}

    , decltype(_impl_.client_spinlock_blocked_us_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.unwinding_time_us_ = new ::perfetto::protos::ProfilePacket_Histogram(*from._impl_.unwinding_time_us_);
  }
  ::memcpy(&_impl_.unwinding_errors_, &from._impl_.unwinding_errors_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.client_spinlock_blocked_us_) -
    reinterpret_cast<char*>(&_impl_.unwinding_errors_)) + sizeof(_impl_.client_spinlock_blocked_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.ProcessStats)
}

inline void ProfilePacket_ProcessStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unwinding_time_us_){nullptr}
    , decltype(_impl_.unwinding_errors_) { ::uint64_t{0u} }

    , decltype(_impl_.heap_samples_) { ::uint64_t{0u} }

    , decltype(_impl_.map_reparses_) { ::uint64_t{0u} }

    , decltype(_impl_.total_unwinding_time_us_) { ::uint64_t{0u} }

    , decltype(_impl_.client_spinlock_blocked_us_) { ::uint64_t{0u} }

  };
}

ProfilePacket_ProcessStats::~ProfilePacket_ProcessStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.ProcessStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_ProcessStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.unwinding_time_us_;
}

void ProfilePacket_ProcessStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_ProcessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.ProcessStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.unwinding_time_us_ != nullptr);
    _impl_.unwinding_time_us_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.unwinding_errors_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_spinlock_blocked_us_) -
        reinterpret_cast<char*>(&_impl_.unwinding_errors_)) + sizeof(_impl_.client_spinlock_blocked_us_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePacket_ProcessStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 unwinding_errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_unwinding_errors(&has_bits);
          _impl_.unwinding_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 heap_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_heap_samples(&has_bits);
          _impl_.heap_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 map_reparses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_map_reparses(&has_bits);
          _impl_.map_reparses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unwinding_time_us(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 total_unwinding_time_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_total_unwinding_time_us(&has_bits);
          _impl_.total_unwinding_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 client_spinlock_blocked_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_client_spinlock_blocked_us(&has_bits);
          _impl_.client_spinlock_blocked_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfilePacket_ProcessStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.ProcessStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 unwinding_errors = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_unwinding_errors(), target);
  }

  // optional uint64 heap_samples = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_heap_samples(), target);
  }

  // optional uint64 map_reparses = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_map_reparses(), target);
  }

  // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::unwinding_time_us(this),
        _Internal::unwinding_time_us(this).GetCachedSize(), target, stream);
  }

  // optional uint64 total_unwinding_time_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_total_unwinding_time_us(), target);
  }

  // optional uint64 client_spinlock_blocked_us = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_client_spinlock_blocked_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.ProcessStats)
  return target;
}

::size_t ProfilePacket_ProcessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.ProcessStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unwinding_time_us_);
    }

    // optional uint64 unwinding_errors = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_unwinding_errors());
    }

    // optional uint64 heap_samples = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_heap_samples());
    }

    // optional uint64 map_reparses = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_map_reparses());
    }

    // optional uint64 total_unwinding_time_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_total_unwinding_time_us());
    }

    // optional uint64 client_spinlock_blocked_us = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_client_spinlock_blocked_us());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePacket_ProcessStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilePacket_ProcessStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePacket_ProcessStats::GetClassData() const { return &_class_data_; }


void ProfilePacket_ProcessStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilePacket_ProcessStats*>(&to_msg);
  auto& from = static_cast<const ProfilePacket_ProcessStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.ProcessStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unwinding_time_us()->::perfetto::protos::ProfilePacket_Histogram::MergeFrom(
          from._internal_unwinding_time_us());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unwinding_errors_ = from._impl_.unwinding_errors_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.heap_samples_ = from._impl_.heap_samples_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.map_reparses_ = from._impl_.map_reparses_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_unwinding_time_us_ = from._impl_.total_unwinding_time_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.client_spinlock_blocked_us_ = from._impl_.client_spinlock_blocked_us_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePacket_ProcessStats::CopyFrom(const ProfilePacket_ProcessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_ProcessStats::IsInitialized() const {
  return true;
}

void ProfilePacket_ProcessStats::InternalSwap(ProfilePacket_ProcessStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, _impl_.client_spinlock_blocked_us_)
      + sizeof(ProfilePacket_ProcessStats::_impl_.client_spinlock_blocked_us_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, _impl_.unwinding_time_us_)>(
          reinterpret_cast<char*>(&_impl_.unwinding_time_us_),
          reinterpret_cast<char*>(&other->_impl_.unwinding_time_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePacket_ProcessStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[3]);
}
// ===================================================================

class ProfilePacket_ProcessHeapSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_ProcessHeapSamples>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, _impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rejected_concurrent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buffer_overran(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_buffer_corrupted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hit_guardrail(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heap_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_orig_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::ProfilePacket_ProcessStats& stats(const ProfilePacket_ProcessHeapSamples* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ProfilePacket_ProcessStats&
ProfilePacket_ProcessHeapSamples::_Internal::stats(const ProfilePacket_ProcessHeapSamples* msg) {
  return *msg->_impl_.stats_;
}
ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
}
ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(const ProfilePacket_ProcessHeapSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfilePacket_ProcessHeapSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.heap_name_) {}

    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.pid_) {}

    , decltype(_impl_.from_startup_) {}

    , decltype(_impl_.rejected_concurrent_) {}

    , decltype(_impl_.disconnected_) {}

    , decltype(_impl_.buffer_overran_) {}

    , decltype(_impl_.buffer_corrupted_) {}

    , decltype(_impl_.hit_guardrail_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.sampling_interval_bytes_) {}

    , decltype(_impl_.orig_sampling_interval_bytes_) {}

    , decltype(_impl_.client_error_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.heap_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.heap_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.heap_name_.Set(from._internal_heap_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.stats_ = new ::perfetto::protos::ProfilePacket_ProcessStats(*from._impl_.stats_);
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.client_error_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.client_error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
}

inline void ProfilePacket_ProcessHeapSamples::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){arena}
    , decltype(_impl_.heap_name_) {}

    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.pid_) { ::uint64_t{0u} }

    , decltype(_impl_.from_startup_) { false }

    , decltype(_impl_.rejected_concurrent_) { false }

    , decltype(_impl_.disconnected_) { false }

    , decltype(_impl_.buffer_overran_) { false }

    , decltype(_impl_.buffer_corrupted_) { false }

    , decltype(_impl_.hit_guardrail_) { false }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.sampling_interval_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.orig_sampling_interval_bytes_) { ::uint64_t{0u} }

    , decltype(_impl_.client_error_) { 0 }

  };
  _impl_.heap_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.heap_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfilePacket_ProcessHeapSamples::~ProfilePacket_ProcessHeapSamples() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket_ProcessHeapSamples::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_samples()->~RepeatedPtrField();
  _impl_.heap_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void ProfilePacket_ProcessHeapSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket_ProcessHeapSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_samples()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.heap_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.stats_ != nullptr);
      _impl_.stats_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buffer_corrupted_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.buffer_corrupted_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.hit_guardrail_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_error_) -
        reinterpret_cast<char*>(&_impl_.hit_guardrail_)) + sizeof(_impl_.client_error_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePacket_ProcessHeapSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool from_startup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_from_startup(&has_bits);
          _impl_.from_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool rejected_concurrent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_rejected_concurrent(&has_bits);
          _impl_.rejected_concurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disconnected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_disconnected(&has_bits);
          _impl_.disconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool buffer_overran = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_buffer_overran(&has_bits);
          _impl_.buffer_overran_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool buffer_corrupted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_buffer_corrupted(&has_bits);
          _impl_.buffer_corrupted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool hit_guardrail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_hit_guardrail(&has_bits);
          _impl_.hit_guardrail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string heap_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_heap_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 sampling_interval_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          _impl_.sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 orig_sampling_interval_bytes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_orig_sampling_interval_bytes(&has_bits);
          _impl_.orig_sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError_IsValid(static_cast<int>(val)))) {
            _internal_set_client_error(static_cast<::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfilePacket_ProcessHeapSamples::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 pid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool from_startup = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_from_startup(), target);
  }

  // optional bool rejected_concurrent = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_rejected_concurrent(), target);
  }

  // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // optional bool disconnected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_disconnected(), target);
  }

  // optional bool buffer_overran = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_buffer_overran(), target);
  }

  // optional bool buffer_corrupted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_buffer_corrupted(), target);
  }

  // optional uint64 timestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_timestamp(), target);
  }

  // optional bool hit_guardrail = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_hit_guardrail(), target);
  }

  // optional string heap_name = 11;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_heap_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional uint64 sampling_interval_bytes = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        12, this->_internal_sampling_interval_bytes(), target);
  }

  // optional uint64 orig_sampling_interval_bytes = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_orig_sampling_interval_bytes(), target);
  }

  // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this->_internal_client_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  return target;
}

::size_t ProfilePacket_ProcessHeapSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_internal_samples()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string heap_name = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_heap_name());
    }

    // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_);
    }

    // optional uint64 pid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_pid());
    }

    // optional bool from_startup = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool rejected_concurrent = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool disconnected = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool buffer_overran = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool buffer_corrupted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool hit_guardrail = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional uint64 timestamp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional uint64 sampling_interval_bytes = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_sampling_interval_bytes());
    }

    // optional uint64 orig_sampling_interval_bytes = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_orig_sampling_interval_bytes());
    }

    // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_client_error());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePacket_ProcessHeapSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilePacket_ProcessHeapSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePacket_ProcessHeapSamples::GetClassData() const { return &_class_data_; }


void ProfilePacket_ProcessHeapSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilePacket_ProcessHeapSamples*>(&to_msg);
  auto& from = static_cast<const ProfilePacket_ProcessHeapSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_samples()->MergeFrom(from._internal_samples());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_heap_name(from._internal_heap_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stats()->::perfetto::protos::ProfilePacket_ProcessStats::MergeFrom(
          from._internal_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.from_startup_ = from._impl_.from_startup_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rejected_concurrent_ = from._impl_.rejected_concurrent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.disconnected_ = from._impl_.disconnected_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.buffer_overran_ = from._impl_.buffer_overran_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.buffer_corrupted_ = from._impl_.buffer_corrupted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hit_guardrail_ = from._impl_.hit_guardrail_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sampling_interval_bytes_ = from._impl_.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.orig_sampling_interval_bytes_ = from._impl_.orig_sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.client_error_ = from._impl_.client_error_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePacket_ProcessHeapSamples::CopyFrom(const ProfilePacket_ProcessHeapSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_ProcessHeapSamples::IsInitialized() const {
  return true;
}

void ProfilePacket_ProcessHeapSamples::InternalSwap(ProfilePacket_ProcessHeapSamples* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_samples()->InternalSwap(other->_internal_mutable_samples());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.heap_name_, lhs_arena,
                                       &other->_impl_.heap_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, _impl_.client_error_)
      + sizeof(ProfilePacket_ProcessHeapSamples::_impl_.client_error_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePacket_ProcessHeapSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[4]);
}
// ===================================================================

class ProfilePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProfilePacket, _impl_._has_bits_);
  static void set_has_continued(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ProfilePacket::clear_strings() {
  _internal_mutable_strings()->Clear();
}
void ProfilePacket::clear_mappings() {
  _internal_mutable_mappings()->Clear();
}
void ProfilePacket::clear_frames() {
  _internal_mutable_frames()->Clear();
}
void ProfilePacket::clear_callstacks() {
  _internal_mutable_callstacks()->Clear();
}
ProfilePacket::ProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket)
}
ProfilePacket::ProfilePacket(const ProfilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfilePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strings_){from._impl_.strings_}
    , decltype(_impl_.frames_){from._impl_.frames_}
    , decltype(_impl_.callstacks_){from._impl_.callstacks_}
    , decltype(_impl_.mappings_){from._impl_.mappings_}
    , decltype(_impl_.process_dumps_){from._impl_.process_dumps_}
    , decltype(_impl_.index_) {}

    , decltype(_impl_.continued_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.continued_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.continued_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket)
}

inline void ProfilePacket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strings_){arena}
    , decltype(_impl_.frames_){arena}
    , decltype(_impl_.callstacks_){arena}
    , decltype(_impl_.mappings_){arena}
    , decltype(_impl_.process_dumps_){arena}
    , decltype(_impl_.index_) { ::uint64_t{0u} }

    , decltype(_impl_.continued_) { false }

  };
}

ProfilePacket::~ProfilePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfilePacket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_strings()->~RepeatedPtrField();
  _internal_mutable_frames()->~RepeatedPtrField();
  _internal_mutable_callstacks()->~RepeatedPtrField();
  _internal_mutable_mappings()->~RepeatedPtrField();
  _internal_mutable_process_dumps()->~RepeatedPtrField();
}

void ProfilePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_strings()->Clear();
  _internal_mutable_frames()->Clear();
  _internal_mutable_callstacks()->Clear();
  _internal_mutable_mappings()->Clear();
  _internal_mutable_process_dumps()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.continued_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.continued_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfilePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.InternedString strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.Frame frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.Callstack callstacks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callstacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.Mapping mappings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool continued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_continued(&has_bits);
          _impl_.continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProfilePacket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.InternedString strings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strings_size()); i < n; i++) {
    const auto& repfield = this->_internal_strings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.Frame frames = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frames_size()); i < n; i++) {
    const auto& repfield = this->_internal_frames(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.Callstack callstacks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_callstacks_size()); i < n; i++) {
    const auto& repfield = this->_internal_callstacks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.Mapping mappings = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mappings_size()); i < n; i++) {
    const auto& repfield = this->_internal_mappings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_process_dumps_size()); i < n; i++) {
    const auto& repfield = this->_internal_process_dumps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool continued = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_continued(), target);
  }

  // optional uint64 index = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket)
  return target;
}

::size_t ProfilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.InternedString strings = 1;
  total_size += 1UL * this->_internal_strings_size();
  for (const auto& msg : this->_internal_strings()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Frame frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->_internal_frames()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Callstack callstacks = 3;
  total_size += 1UL * this->_internal_callstacks_size();
  for (const auto& msg : this->_internal_callstacks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Mapping mappings = 4;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->_internal_mappings()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  total_size += 1UL * this->_internal_process_dumps_size();
  for (const auto& msg : this->_internal_process_dumps()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 index = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_index());
    }

    // optional bool continued = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfilePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfilePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfilePacket::GetClassData() const { return &_class_data_; }


void ProfilePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfilePacket*>(&to_msg);
  auto& from = static_cast<const ProfilePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_strings()->MergeFrom(from._internal_strings());
  _this->_internal_mutable_frames()->MergeFrom(from._internal_frames());
  _this->_internal_mutable_callstacks()->MergeFrom(from._internal_callstacks());
  _this->_internal_mutable_mappings()->MergeFrom(from._internal_mappings());
  _this->_internal_mutable_process_dumps()->MergeFrom(from._internal_process_dumps());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.continued_ = from._impl_.continued_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfilePacket::CopyFrom(const ProfilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket::IsInitialized() const {
  return true;
}

void ProfilePacket::InternalSwap(ProfilePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_strings()->InternalSwap(other->_internal_mutable_strings());
  _internal_mutable_frames()->InternalSwap(other->_internal_mutable_frames());
  _internal_mutable_callstacks()->InternalSwap(other->_internal_mutable_callstacks());
  _internal_mutable_mappings()->InternalSwap(other->_internal_mutable_mappings());
  _internal_mutable_process_dumps()->InternalSwap(other->_internal_mutable_process_dumps());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket, _impl_.continued_)
      + sizeof(ProfilePacket::_impl_.continued_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[5]);
}
// ===================================================================

class StreamingAllocation::_Internal {
 public:
};

StreamingAllocation::StreamingAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingAllocation)
}
StreamingAllocation::StreamingAllocation(const StreamingAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamingAllocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) { from._impl_.address_ }

    , decltype(_impl_.size_) { from._impl_.size_ }

    , decltype(_impl_.sample_size_) { from._impl_.sample_size_ }

    , decltype(_impl_.clock_monotonic_coarse_timestamp_) { from._impl_.clock_monotonic_coarse_timestamp_ }

    , decltype(_impl_.heap_id_) { from._impl_.heap_id_ }

    , decltype(_impl_.sequence_number_) { from._impl_.sequence_number_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingAllocation)
}

inline void StreamingAllocation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) { arena }

    , decltype(_impl_.size_) { arena }

    , decltype(_impl_.sample_size_) { arena }

    , decltype(_impl_.clock_monotonic_coarse_timestamp_) { arena }

    , decltype(_impl_.heap_id_) { arena }

    , decltype(_impl_.sequence_number_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamingAllocation::~StreamingAllocation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingAllocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamingAllocation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedField();
  _impl_.size_.~RepeatedField();
  _impl_.sample_size_.~RepeatedField();
  _impl_.clock_monotonic_coarse_timestamp_.~RepeatedField();
  _impl_.heap_id_.~RepeatedField();
  _impl_.sequence_number_.~RepeatedField();
}

void StreamingAllocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingAllocation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_address()->Clear();
  _internal_mutable_size()->Clear();
  _internal_mutable_sample_size()->Clear();
  _internal_mutable_clock_monotonic_coarse_timestamp()->Clear();
  _internal_mutable_heap_id()->Clear();
  _internal_mutable_sequence_number()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingAllocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 sample_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sample_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sample_size(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 clock_monotonic_coarse_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_clock_monotonic_coarse_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_clock_monotonic_coarse_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 heap_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heap_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heap_id(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sequence_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequence_number(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamingAllocation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingAllocation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_address(i), target);
  }

  // repeated uint64 size = 2;
  for (int i = 0, n = this->_internal_size_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_size(i), target);
  }

  // repeated uint64 sample_size = 3;
  for (int i = 0, n = this->_internal_sample_size_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sample_size(i), target);
  }

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  for (int i = 0, n = this->_internal_clock_monotonic_coarse_timestamp_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_clock_monotonic_coarse_timestamp(i), target);
  }

  // repeated uint32 heap_id = 5;
  for (int i = 0, n = this->_internal_heap_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_heap_id(i), target);
  }

  // repeated uint64 sequence_number = 6;
  for (int i = 0, n = this->_internal_sequence_number_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_sequence_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingAllocation)
  return target;
}

::size_t StreamingAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingAllocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_address())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_address_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 size = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_size_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 sample_size = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sample_size())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_sample_size_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_clock_monotonic_coarse_timestamp())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_clock_monotonic_coarse_timestamp_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 heap_id = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_heap_id())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_heap_id_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 sequence_number = 6;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sequence_number())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_sequence_number_size());
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingAllocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamingAllocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingAllocation::GetClassData() const { return &_class_data_; }


void StreamingAllocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamingAllocation*>(&to_msg);
  auto& from = static_cast<const StreamingAllocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingAllocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  _this->_impl_.size_.MergeFrom(from._impl_.size_);
  _this->_impl_.sample_size_.MergeFrom(from._impl_.sample_size_);
  _this->_impl_.clock_monotonic_coarse_timestamp_.MergeFrom(from._impl_.clock_monotonic_coarse_timestamp_);
  _this->_impl_.heap_id_.MergeFrom(from._impl_.heap_id_);
  _this->_impl_.sequence_number_.MergeFrom(from._impl_.sequence_number_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingAllocation::CopyFrom(const StreamingAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingAllocation::IsInitialized() const {
  return true;
}

void StreamingAllocation::InternalSwap(StreamingAllocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
  _impl_.size_.InternalSwap(&other->_impl_.size_);
  _impl_.sample_size_.InternalSwap(&other->_impl_.sample_size_);
  _impl_.clock_monotonic_coarse_timestamp_.InternalSwap(&other->_impl_.clock_monotonic_coarse_timestamp_);
  _impl_.heap_id_.InternalSwap(&other->_impl_.heap_id_);
  _impl_.sequence_number_.InternalSwap(&other->_impl_.sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingAllocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[6]);
}
// ===================================================================

class StreamingFree::_Internal {
 public:
};

StreamingFree::StreamingFree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingFree)
}
StreamingFree::StreamingFree(const StreamingFree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamingFree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) { from._impl_.address_ }

    , decltype(_impl_.heap_id_) { from._impl_.heap_id_ }

    , decltype(_impl_.sequence_number_) { from._impl_.sequence_number_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingFree)
}

inline void StreamingFree::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) { arena }

    , decltype(_impl_.heap_id_) { arena }

    , decltype(_impl_.sequence_number_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamingFree::~StreamingFree() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingFree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamingFree::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.~RepeatedField();
  _impl_.heap_id_.~RepeatedField();
  _impl_.sequence_number_.~RepeatedField();
}

void StreamingFree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingFree::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingFree)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_address()->Clear();
  _internal_mutable_heap_id()->Clear();
  _internal_mutable_sequence_number()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingFree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 heap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heap_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heap_id(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sequence_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequence_number(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamingFree::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingFree)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_address(i), target);
  }

  // repeated uint32 heap_id = 2;
  for (int i = 0, n = this->_internal_heap_id_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_heap_id(i), target);
  }

  // repeated uint64 sequence_number = 3;
  for (int i = 0, n = this->_internal_sequence_number_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingFree)
  return target;
}

::size_t StreamingFree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingFree)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_address())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_address_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 heap_id = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_heap_id())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_heap_id_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 sequence_number = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sequence_number())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_sequence_number_size());
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingFree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamingFree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingFree::GetClassData() const { return &_class_data_; }


void StreamingFree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamingFree*>(&to_msg);
  auto& from = static_cast<const StreamingFree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingFree)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.address_.MergeFrom(from._impl_.address_);
  _this->_impl_.heap_id_.MergeFrom(from._impl_.heap_id_);
  _this->_impl_.sequence_number_.MergeFrom(from._impl_.sequence_number_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingFree::CopyFrom(const StreamingFree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingFree::IsInitialized() const {
  return true;
}

void StreamingFree::InternalSwap(StreamingFree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.address_.InternalSwap(&other->_impl_.address_);
  _impl_.heap_id_.InternalSwap(&other->_impl_.heap_id_);
  _impl_.sequence_number_.InternalSwap(&other->_impl_.sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingFree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[7]);
}
// ===================================================================

class StreamingProfilePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamingProfilePacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamingProfilePacket, _impl_._has_bits_);
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StreamingProfilePacket::StreamingProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingProfilePacket)
}
StreamingProfilePacket::StreamingProfilePacket(const StreamingProfilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamingProfilePacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_iid_) { from._impl_.callstack_iid_ }

    , decltype(_impl_.timestamp_delta_us_) { from._impl_.timestamp_delta_us_ }

    , decltype(_impl_.process_priority_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.process_priority_ = from._impl_.process_priority_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingProfilePacket)
}

inline void StreamingProfilePacket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.callstack_iid_) { arena }

    , decltype(_impl_.timestamp_delta_us_) { arena }

    , decltype(_impl_.process_priority_) { 0 }

  };
}

StreamingProfilePacket::~StreamingProfilePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingProfilePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamingProfilePacket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callstack_iid_.~RepeatedField();
  _impl_.timestamp_delta_us_.~RepeatedField();
}

void StreamingProfilePacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamingProfilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingProfilePacket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_callstack_iid()->Clear();
  _internal_mutable_timestamp_delta_us()->Clear();
  _impl_.process_priority_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingProfilePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 callstack_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_callstack_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_callstack_iid(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 timestamp_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_timestamp_delta_us(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 process_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_process_priority(&has_bits);
          _impl_.process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamingProfilePacket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingProfilePacket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 callstack_iid = 1;
  for (int i = 0, n = this->_internal_callstack_iid_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_callstack_iid(i), target);
  }

  // repeated int64 timestamp_delta_us = 2;
  for (int i = 0, n = this->_internal_timestamp_delta_us_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_timestamp_delta_us(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 process_priority = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_process_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingProfilePacket)
  return target;
}

::size_t StreamingProfilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingProfilePacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 callstack_iid = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_callstack_iid())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_callstack_iid_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated int64 timestamp_delta_us = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_timestamp_delta_us())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_timestamp_delta_us_size());
    ;
    total_size += tag_size + data_size;
  }

  // optional int32 process_priority = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_process_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamingProfilePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamingProfilePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamingProfilePacket::GetClassData() const { return &_class_data_; }


void StreamingProfilePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamingProfilePacket*>(&to_msg);
  auto& from = static_cast<const StreamingProfilePacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingProfilePacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.callstack_iid_.MergeFrom(from._impl_.callstack_iid_);
  _this->_impl_.timestamp_delta_us_.MergeFrom(from._impl_.timestamp_delta_us_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_process_priority(from._internal_process_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingProfilePacket::CopyFrom(const StreamingProfilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingProfilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingProfilePacket::IsInitialized() const {
  return true;
}

void StreamingProfilePacket::InternalSwap(StreamingProfilePacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.callstack_iid_.InternalSwap(&other->_impl_.callstack_iid_);
  _impl_.timestamp_delta_us_.InternalSwap(&other->_impl_.timestamp_delta_us_);

  swap(_impl_.process_priority_, other->_impl_.process_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingProfilePacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[8]);
}
// ===================================================================

class Profiling::_Internal {
 public:
};

Profiling::Profiling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Profiling)
}
Profiling::Profiling(const Profiling& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Profiling* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Profiling)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Profiling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Profiling::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Profiling::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[9]);
}
// ===================================================================

class PerfSample_ProducerEvent::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample_ProducerEvent, _impl_._oneof_case_);
};

PerfSample_ProducerEvent::PerfSample_ProducerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSample.ProducerEvent)
}
PerfSample_ProducerEvent::PerfSample_ProducerEvent(const PerfSample_ProducerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfSample_ProducerEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_source_stop_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_source_stop_reason();
  switch (from.optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      _this->_internal_set_source_stop_reason(from._internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSample.ProducerEvent)
}

inline void PerfSample_ProducerEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_source_stop_reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_source_stop_reason();
}

PerfSample_ProducerEvent::~PerfSample_ProducerEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSample.ProducerEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfSample_ProducerEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_source_stop_reason()) {
    clear_optional_source_stop_reason();
  }
}

void PerfSample_ProducerEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfSample_ProducerEvent::clear_optional_source_stop_reason() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample.ProducerEvent)
  switch (optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}


void PerfSample_ProducerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSample.ProducerEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_source_stop_reason();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfSample_ProducerEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason_IsValid(static_cast<int>(val)))) {
            _internal_set_source_stop_reason(static_cast<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfSample_ProducerEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSample.ProducerEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
  if (optional_source_stop_reason_case() == kSourceStopReason) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_source_stop_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSample.ProducerEvent)
  return target;
}

::size_t PerfSample_ProducerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSample.ProducerEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_source_stop_reason_case()) {
    // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
    case kSourceStopReason: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfSample_ProducerEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfSample_ProducerEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfSample_ProducerEvent::GetClassData() const { return &_class_data_; }


void PerfSample_ProducerEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfSample_ProducerEvent*>(&to_msg);
  auto& from = static_cast<const PerfSample_ProducerEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSample.ProducerEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      _this->_internal_set_source_stop_reason(from._internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfSample_ProducerEvent::CopyFrom(const PerfSample_ProducerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSample.ProducerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSample_ProducerEvent::IsInitialized() const {
  return true;
}

void PerfSample_ProducerEvent::InternalSwap(PerfSample_ProducerEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_source_stop_reason_, other->_impl_.optional_source_stop_reason_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfSample_ProducerEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[10]);
}
// ===================================================================

class PerfSample::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfSample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfSample, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfSample, _impl_._oneof_case_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cpu_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timebase_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_callstack_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kernel_records_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::PerfSample_ProducerEvent& producer_event(const PerfSample* msg);
  static void set_has_producer_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfSample_ProducerEvent&
PerfSample::_Internal::producer_event(const PerfSample* msg) {
  return *msg->_impl_.producer_event_;
}
PerfSample::PerfSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSample)
}
PerfSample::PerfSample(const PerfSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_event_){nullptr}
    , decltype(_impl_.cpu_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.callstack_iid_) {}

    , decltype(_impl_.tid_) {}

    , decltype(_impl_.cpu_mode_) {}

    , decltype(_impl_.timebase_count_) {}

    , decltype(_impl_.kernel_records_lost_) {}

    , decltype(_impl_.optional_unwind_error_){}
    , decltype(_impl_.optional_sample_skipped_reason_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.producer_event_ = new ::perfetto::protos::PerfSample_ProducerEvent(*from._impl_.producer_event_);
  }
  ::memcpy(&_impl_.cpu_, &from._impl_.cpu_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.kernel_records_lost_) -
    reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.kernel_records_lost_));
  clear_has_optional_unwind_error();
  switch (from.optional_unwind_error_case()) {
    case kUnwindError: {
      _this->_internal_set_unwind_error(from._internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  clear_has_optional_sample_skipped_reason();
  switch (from.optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      _this->_internal_set_sample_skipped_reason(from._internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSample)
}

inline void PerfSample::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.producer_event_){nullptr}
    , decltype(_impl_.cpu_) { 0u }

    , decltype(_impl_.pid_) { 0u }

    , decltype(_impl_.callstack_iid_) { ::uint64_t{0u} }

    , decltype(_impl_.tid_) { 0u }

    , decltype(_impl_.cpu_mode_) { 0 }

    , decltype(_impl_.timebase_count_) { ::uint64_t{0u} }

    , decltype(_impl_.kernel_records_lost_) { ::uint64_t{0u} }

    , decltype(_impl_.optional_unwind_error_){}
    , decltype(_impl_.optional_sample_skipped_reason_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_unwind_error();
  clear_has_optional_sample_skipped_reason();
}

PerfSample::~PerfSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfSample::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.producer_event_;
  if (has_optional_unwind_error()) {
    clear_optional_unwind_error();
  }
  if (has_optional_sample_skipped_reason()) {
    clear_optional_sample_skipped_reason();
  }
}

void PerfSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfSample::clear_optional_unwind_error() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample)
  switch (optional_unwind_error_case()) {
    case kUnwindError: {
      // No need to clear
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_UNWIND_ERROR_NOT_SET;
}

void PerfSample::clear_optional_sample_skipped_reason() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample)
  switch (optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}


void PerfSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSample)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.producer_event_ != nullptr);
    _impl_.producer_event_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.cpu_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kernel_records_lost_) -
        reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.kernel_records_lost_));
  }
  clear_optional_unwind_error();
  clear_optional_sample_skipped_reason();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 callstack_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_callstack_iid(&has_bits);
          _impl_.callstack_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::Profiling_CpuMode_IsValid(static_cast<int>(val)))) {
            _internal_set_cpu_mode(static_cast<::perfetto::protos::Profiling_CpuMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 timebase_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_timebase_count(&has_bits);
          _impl_.timebase_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::Profiling_StackUnwindError_IsValid(static_cast<int>(val)))) {
            _internal_set_unwind_error(static_cast<::perfetto::protos::Profiling_StackUnwindError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 kernel_records_lost = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_kernel_records_lost(&has_bits);
          _impl_.kernel_records_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfSample_SampleSkipReason_IsValid(static_cast<int>(val)))) {
            _internal_set_sample_skipped_reason(static_cast<::perfetto::protos::PerfSample_SampleSkipReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_producer_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfSample::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSample)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_pid(), target);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_tid(), target);
  }

  // optional uint64 callstack_iid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_callstack_iid(), target);
  }

  // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_cpu_mode(), target);
  }

  // optional uint64 timebase_count = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_timebase_count(), target);
  }

  // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
  if (optional_unwind_error_case() == kUnwindError) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        16, this->_internal_unwind_error(), target);
  }

  // optional uint64 kernel_records_lost = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_kernel_records_lost(), target);
  }

  // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
  if (optional_sample_skipped_reason_case() == kSampleSkippedReason) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        18, this->_internal_sample_skipped_reason(), target);
  }

  // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::producer_event(this),
        _Internal::producer_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSample)
  return target;
}

::size_t PerfSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.producer_event_);
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pid());
    }

    // optional uint64 callstack_iid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_callstack_iid());
    }

    // optional uint32 tid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tid());
    }

    // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_cpu_mode());
    }

    // optional uint64 timebase_count = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_timebase_count());
    }

    // optional uint64 kernel_records_lost = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_kernel_records_lost());
    }

  }
  switch (optional_unwind_error_case()) {
    // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
    case kUnwindError: {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  switch (optional_sample_skipped_reason_case()) {
    // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
    case kSampleSkippedReason: {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfSample::GetClassData() const { return &_class_data_; }


void PerfSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfSample*>(&to_msg);
  auto& from = static_cast<const PerfSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_producer_event()->::perfetto::protos::PerfSample_ProducerEvent::MergeFrom(
          from._internal_producer_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.callstack_iid_ = from._impl_.callstack_iid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tid_ = from._impl_.tid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cpu_mode_ = from._impl_.cpu_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timebase_count_ = from._impl_.timebase_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.kernel_records_lost_ = from._impl_.kernel_records_lost_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.optional_unwind_error_case()) {
    case kUnwindError: {
      _this->_internal_set_unwind_error(from._internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  switch (from.optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      _this->_internal_set_sample_skipped_reason(from._internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfSample::CopyFrom(const PerfSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSample::IsInitialized() const {
  return true;
}

void PerfSample::InternalSwap(PerfSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfSample, _impl_.kernel_records_lost_)
      + sizeof(PerfSample::_impl_.kernel_records_lost_)
      - PROTOBUF_FIELD_OFFSET(PerfSample, _impl_.producer_event_)>(
          reinterpret_cast<char*>(&_impl_.producer_event_),
          reinterpret_cast<char*>(&other->_impl_.producer_event_));
  swap(_impl_.optional_unwind_error_, other->_impl_.optional_unwind_error_);
  swap(_impl_.optional_sample_skipped_reason_, other->_impl_.optional_sample_skipped_reason_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[11]);
}
// ===================================================================

class PerfSampleDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfSampleDefaults>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfSampleDefaults, _impl_._has_bits_);
  static const ::perfetto::protos::PerfEvents_Timebase& timebase(const PerfSampleDefaults* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_shard_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chosen_process_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::PerfEvents_Timebase&
PerfSampleDefaults::_Internal::timebase(const PerfSampleDefaults* msg) {
  return *msg->_impl_.timebase_;
}
void PerfSampleDefaults::clear_timebase() {
  if (_impl_.timebase_ != nullptr) _impl_.timebase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PerfSampleDefaults::PerfSampleDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSampleDefaults)
}
PerfSampleDefaults::PerfSampleDefaults(const PerfSampleDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfSampleDefaults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timebase_){nullptr}
    , decltype(_impl_.process_shard_count_) {}

    , decltype(_impl_.chosen_process_shard_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timebase_ = new ::perfetto::protos::PerfEvents_Timebase(*from._impl_.timebase_);
  }
  ::memcpy(&_impl_.process_shard_count_, &from._impl_.process_shard_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.chosen_process_shard_) -
    reinterpret_cast<char*>(&_impl_.process_shard_count_)) + sizeof(_impl_.chosen_process_shard_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSampleDefaults)
}

inline void PerfSampleDefaults::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timebase_){nullptr}
    , decltype(_impl_.process_shard_count_) { 0u }

    , decltype(_impl_.chosen_process_shard_) { 0u }

  };
}

PerfSampleDefaults::~PerfSampleDefaults() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSampleDefaults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfSampleDefaults::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timebase_;
}

void PerfSampleDefaults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfSampleDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSampleDefaults)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timebase_ != nullptr);
    _impl_.timebase_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.process_shard_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.chosen_process_shard_) -
        reinterpret_cast<char*>(&_impl_.process_shard_count_)) + sizeof(_impl_.chosen_process_shard_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfSampleDefaults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timebase(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 process_shard_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_process_shard_count(&has_bits);
          _impl_.process_shard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 chosen_process_shard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_chosen_process_shard(&has_bits);
          _impl_.chosen_process_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfSampleDefaults::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSampleDefaults)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timebase(this),
        _Internal::timebase(this).GetCachedSize(), target, stream);
  }

  // optional uint32 process_shard_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_process_shard_count(), target);
  }

  // optional uint32 chosen_process_shard = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_chosen_process_shard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSampleDefaults)
  return target;
}

::size_t PerfSampleDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSampleDefaults)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timebase_);
    }

    // optional uint32 process_shard_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_process_shard_count());
    }

    // optional uint32 chosen_process_shard = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chosen_process_shard());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfSampleDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfSampleDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfSampleDefaults::GetClassData() const { return &_class_data_; }


void PerfSampleDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfSampleDefaults*>(&to_msg);
  auto& from = static_cast<const PerfSampleDefaults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSampleDefaults)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timebase()->::perfetto::protos::PerfEvents_Timebase::MergeFrom(
          from._internal_timebase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.process_shard_count_ = from._impl_.process_shard_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chosen_process_shard_ = from._impl_.chosen_process_shard_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfSampleDefaults::CopyFrom(const PerfSampleDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSampleDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSampleDefaults::IsInitialized() const {
  return true;
}

void PerfSampleDefaults::InternalSwap(PerfSampleDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfSampleDefaults, _impl_.chosen_process_shard_)
      + sizeof(PerfSampleDefaults::_impl_.chosen_process_shard_)
      - PROTOBUF_FIELD_OFFSET(PerfSampleDefaults, _impl_.timebase_)>(
          reinterpret_cast<char*>(&_impl_.timebase_),
          reinterpret_cast<char*>(&other->_impl_.timebase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfSampleDefaults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_HeapSample*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_HeapSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_HeapSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_Histogram_Bucket*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_Histogram_Bucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_Histogram_Bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_Histogram*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_ProcessStats*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_ProcessStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_ProcessStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_ProcessHeapSamples*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket*
Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingAllocation*
Arena::CreateMaybeMessage< ::perfetto::protos::StreamingAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingFree*
Arena::CreateMaybeMessage< ::perfetto::protos::StreamingFree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingFree >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingProfilePacket*
Arena::CreateMaybeMessage< ::perfetto::protos::StreamingProfilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingProfilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Profiling*
Arena::CreateMaybeMessage< ::perfetto::protos::Profiling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Profiling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSample_ProducerEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfSample_ProducerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSample_ProducerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSample*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSampleDefaults*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfSampleDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSampleDefaults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
