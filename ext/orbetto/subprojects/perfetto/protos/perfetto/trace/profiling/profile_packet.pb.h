// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/common/perf_events.pb.h"
#include "protos/perfetto/trace/profiling/profile_common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
namespace perfetto {
namespace protos {
class PerfSample;
struct PerfSampleDefaultTypeInternal;
extern PerfSampleDefaultTypeInternal _PerfSample_default_instance_;
class PerfSampleDefaults;
struct PerfSampleDefaultsDefaultTypeInternal;
extern PerfSampleDefaultsDefaultTypeInternal _PerfSampleDefaults_default_instance_;
class PerfSample_ProducerEvent;
struct PerfSample_ProducerEventDefaultTypeInternal;
extern PerfSample_ProducerEventDefaultTypeInternal _PerfSample_ProducerEvent_default_instance_;
class ProfilePacket;
struct ProfilePacketDefaultTypeInternal;
extern ProfilePacketDefaultTypeInternal _ProfilePacket_default_instance_;
class ProfilePacket_HeapSample;
struct ProfilePacket_HeapSampleDefaultTypeInternal;
extern ProfilePacket_HeapSampleDefaultTypeInternal _ProfilePacket_HeapSample_default_instance_;
class ProfilePacket_Histogram;
struct ProfilePacket_HistogramDefaultTypeInternal;
extern ProfilePacket_HistogramDefaultTypeInternal _ProfilePacket_Histogram_default_instance_;
class ProfilePacket_Histogram_Bucket;
struct ProfilePacket_Histogram_BucketDefaultTypeInternal;
extern ProfilePacket_Histogram_BucketDefaultTypeInternal _ProfilePacket_Histogram_Bucket_default_instance_;
class ProfilePacket_ProcessHeapSamples;
struct ProfilePacket_ProcessHeapSamplesDefaultTypeInternal;
extern ProfilePacket_ProcessHeapSamplesDefaultTypeInternal _ProfilePacket_ProcessHeapSamples_default_instance_;
class ProfilePacket_ProcessStats;
struct ProfilePacket_ProcessStatsDefaultTypeInternal;
extern ProfilePacket_ProcessStatsDefaultTypeInternal _ProfilePacket_ProcessStats_default_instance_;
class Profiling;
struct ProfilingDefaultTypeInternal;
extern ProfilingDefaultTypeInternal _Profiling_default_instance_;
class StreamingAllocation;
struct StreamingAllocationDefaultTypeInternal;
extern StreamingAllocationDefaultTypeInternal _StreamingAllocation_default_instance_;
class StreamingFree;
struct StreamingFreeDefaultTypeInternal;
extern StreamingFreeDefaultTypeInternal _StreamingFree_default_instance_;
class StreamingProfilePacket;
struct StreamingProfilePacketDefaultTypeInternal;
extern StreamingProfilePacketDefaultTypeInternal _StreamingProfilePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::PerfSample* Arena::CreateMaybeMessage<::perfetto::protos::PerfSample>(Arena*);
template <>
::perfetto::protos::PerfSampleDefaults* Arena::CreateMaybeMessage<::perfetto::protos::PerfSampleDefaults>(Arena*);
template <>
::perfetto::protos::PerfSample_ProducerEvent* Arena::CreateMaybeMessage<::perfetto::protos::PerfSample_ProducerEvent>(Arena*);
template <>
::perfetto::protos::ProfilePacket* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket>(Arena*);
template <>
::perfetto::protos::ProfilePacket_HeapSample* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_HeapSample>(Arena*);
template <>
::perfetto::protos::ProfilePacket_Histogram* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_Histogram>(Arena*);
template <>
::perfetto::protos::ProfilePacket_Histogram_Bucket* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_Histogram_Bucket>(Arena*);
template <>
::perfetto::protos::ProfilePacket_ProcessHeapSamples* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_ProcessHeapSamples>(Arena*);
template <>
::perfetto::protos::ProfilePacket_ProcessStats* Arena::CreateMaybeMessage<::perfetto::protos::ProfilePacket_ProcessStats>(Arena*);
template <>
::perfetto::protos::Profiling* Arena::CreateMaybeMessage<::perfetto::protos::Profiling>(Arena*);
template <>
::perfetto::protos::StreamingAllocation* Arena::CreateMaybeMessage<::perfetto::protos::StreamingAllocation>(Arena*);
template <>
::perfetto::protos::StreamingFree* Arena::CreateMaybeMessage<::perfetto::protos::StreamingFree>(Arena*);
template <>
::perfetto::protos::StreamingProfilePacket* Arena::CreateMaybeMessage<::perfetto::protos::StreamingProfilePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ProfilePacket_ProcessHeapSamples_ClientError : int {
  ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE = 0,
  ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_HIT_TIMEOUT = 1,
  ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS = 2,
};

bool ProfilePacket_ProcessHeapSamples_ClientError_IsValid(int value);
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MIN = static_cast<ProfilePacket_ProcessHeapSamples_ClientError>(0);
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MAX = static_cast<ProfilePacket_ProcessHeapSamples_ClientError>(2);
constexpr int ProfilePacket_ProcessHeapSamples_ClientError_ClientError_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ProfilePacket_ProcessHeapSamples_ClientError_descriptor();
template <typename T>
const std::string& ProfilePacket_ProcessHeapSamples_ClientError_Name(T value) {
  static_assert(std::is_same<T, ProfilePacket_ProcessHeapSamples_ClientError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ClientError_Name().");
  return ProfilePacket_ProcessHeapSamples_ClientError_Name(static_cast<ProfilePacket_ProcessHeapSamples_ClientError>(value));
}
template <>
inline const std::string& ProfilePacket_ProcessHeapSamples_ClientError_Name(ProfilePacket_ProcessHeapSamples_ClientError value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ProfilePacket_ProcessHeapSamples_ClientError_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ProfilePacket_ProcessHeapSamples_ClientError_Parse(absl::string_view name, ProfilePacket_ProcessHeapSamples_ClientError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProfilePacket_ProcessHeapSamples_ClientError>(
      ProfilePacket_ProcessHeapSamples_ClientError_descriptor(), name, value);
}
enum Profiling_CpuMode : int {
  Profiling_CpuMode_MODE_UNKNOWN = 0,
  Profiling_CpuMode_MODE_KERNEL = 1,
  Profiling_CpuMode_MODE_USER = 2,
  Profiling_CpuMode_MODE_HYPERVISOR = 3,
  Profiling_CpuMode_MODE_GUEST_KERNEL = 4,
  Profiling_CpuMode_MODE_GUEST_USER = 5,
};

bool Profiling_CpuMode_IsValid(int value);
constexpr Profiling_CpuMode Profiling_CpuMode_CpuMode_MIN = static_cast<Profiling_CpuMode>(0);
constexpr Profiling_CpuMode Profiling_CpuMode_CpuMode_MAX = static_cast<Profiling_CpuMode>(5);
constexpr int Profiling_CpuMode_CpuMode_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Profiling_CpuMode_descriptor();
template <typename T>
const std::string& Profiling_CpuMode_Name(T value) {
  static_assert(std::is_same<T, Profiling_CpuMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CpuMode_Name().");
  return Profiling_CpuMode_Name(static_cast<Profiling_CpuMode>(value));
}
template <>
inline const std::string& Profiling_CpuMode_Name(Profiling_CpuMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Profiling_CpuMode_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Profiling_CpuMode_Parse(absl::string_view name, Profiling_CpuMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Profiling_CpuMode>(
      Profiling_CpuMode_descriptor(), name, value);
}
enum Profiling_StackUnwindError : int {
  Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN = 0,
  Profiling_StackUnwindError_UNWIND_ERROR_NONE = 1,
  Profiling_StackUnwindError_UNWIND_ERROR_MEMORY_INVALID = 2,
  Profiling_StackUnwindError_UNWIND_ERROR_UNWIND_INFO = 3,
  Profiling_StackUnwindError_UNWIND_ERROR_UNSUPPORTED = 4,
  Profiling_StackUnwindError_UNWIND_ERROR_INVALID_MAP = 5,
  Profiling_StackUnwindError_UNWIND_ERROR_MAX_FRAMES_EXCEEDED = 6,
  Profiling_StackUnwindError_UNWIND_ERROR_REPEATED_FRAME = 7,
  Profiling_StackUnwindError_UNWIND_ERROR_INVALID_ELF = 8,
  Profiling_StackUnwindError_UNWIND_ERROR_SYSTEM_CALL = 9,
  Profiling_StackUnwindError_UNWIND_ERROR_THREAD_TIMEOUT = 10,
  Profiling_StackUnwindError_UNWIND_ERROR_THREAD_DOES_NOT_EXIST = 11,
  Profiling_StackUnwindError_UNWIND_ERROR_BAD_ARCH = 12,
  Profiling_StackUnwindError_UNWIND_ERROR_MAPS_PARSE = 13,
  Profiling_StackUnwindError_UNWIND_ERROR_INVALID_PARAMETER = 14,
  Profiling_StackUnwindError_UNWIND_ERROR_PTRACE_CALL = 15,
};

bool Profiling_StackUnwindError_IsValid(int value);
constexpr Profiling_StackUnwindError Profiling_StackUnwindError_StackUnwindError_MIN = static_cast<Profiling_StackUnwindError>(0);
constexpr Profiling_StackUnwindError Profiling_StackUnwindError_StackUnwindError_MAX = static_cast<Profiling_StackUnwindError>(15);
constexpr int Profiling_StackUnwindError_StackUnwindError_ARRAYSIZE = 15 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Profiling_StackUnwindError_descriptor();
template <typename T>
const std::string& Profiling_StackUnwindError_Name(T value) {
  static_assert(std::is_same<T, Profiling_StackUnwindError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StackUnwindError_Name().");
  return Profiling_StackUnwindError_Name(static_cast<Profiling_StackUnwindError>(value));
}
template <>
inline const std::string& Profiling_StackUnwindError_Name(Profiling_StackUnwindError value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Profiling_StackUnwindError_descriptor,
                                                 0, 15>(
      static_cast<int>(value));
}
inline bool Profiling_StackUnwindError_Parse(absl::string_view name, Profiling_StackUnwindError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Profiling_StackUnwindError>(
      Profiling_StackUnwindError_descriptor(), name, value);
}
enum PerfSample_ProducerEvent_DataSourceStopReason : int {
  PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN = 0,
  PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL = 1,
};

bool PerfSample_ProducerEvent_DataSourceStopReason_IsValid(int value);
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MIN = static_cast<PerfSample_ProducerEvent_DataSourceStopReason>(0);
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MAX = static_cast<PerfSample_ProducerEvent_DataSourceStopReason>(1);
constexpr int PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PerfSample_ProducerEvent_DataSourceStopReason_descriptor();
template <typename T>
const std::string& PerfSample_ProducerEvent_DataSourceStopReason_Name(T value) {
  static_assert(std::is_same<T, PerfSample_ProducerEvent_DataSourceStopReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataSourceStopReason_Name().");
  return PerfSample_ProducerEvent_DataSourceStopReason_Name(static_cast<PerfSample_ProducerEvent_DataSourceStopReason>(value));
}
template <>
inline const std::string& PerfSample_ProducerEvent_DataSourceStopReason_Name(PerfSample_ProducerEvent_DataSourceStopReason value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PerfSample_ProducerEvent_DataSourceStopReason_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool PerfSample_ProducerEvent_DataSourceStopReason_Parse(absl::string_view name, PerfSample_ProducerEvent_DataSourceStopReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerfSample_ProducerEvent_DataSourceStopReason>(
      PerfSample_ProducerEvent_DataSourceStopReason_descriptor(), name, value);
}
enum PerfSample_SampleSkipReason : int {
  PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN = 0,
  PerfSample_SampleSkipReason_PROFILER_SKIP_READ_STAGE = 1,
  PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_STAGE = 2,
  PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_ENQUEUE = 3,
};

bool PerfSample_SampleSkipReason_IsValid(int value);
constexpr PerfSample_SampleSkipReason PerfSample_SampleSkipReason_SampleSkipReason_MIN = static_cast<PerfSample_SampleSkipReason>(0);
constexpr PerfSample_SampleSkipReason PerfSample_SampleSkipReason_SampleSkipReason_MAX = static_cast<PerfSample_SampleSkipReason>(3);
constexpr int PerfSample_SampleSkipReason_SampleSkipReason_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
PerfSample_SampleSkipReason_descriptor();
template <typename T>
const std::string& PerfSample_SampleSkipReason_Name(T value) {
  static_assert(std::is_same<T, PerfSample_SampleSkipReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SampleSkipReason_Name().");
  return PerfSample_SampleSkipReason_Name(static_cast<PerfSample_SampleSkipReason>(value));
}
template <>
inline const std::string& PerfSample_SampleSkipReason_Name(PerfSample_SampleSkipReason value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PerfSample_SampleSkipReason_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PerfSample_SampleSkipReason_Parse(absl::string_view name, PerfSample_SampleSkipReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerfSample_SampleSkipReason>(
      PerfSample_SampleSkipReason_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ProfilePacket_HeapSample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.HeapSample) */ {
 public:
  inline ProfilePacket_HeapSample() : ProfilePacket_HeapSample(nullptr) {}
  ~ProfilePacket_HeapSample() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilePacket_HeapSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePacket_HeapSample(const ProfilePacket_HeapSample& from);
  ProfilePacket_HeapSample(ProfilePacket_HeapSample&& from) noexcept
    : ProfilePacket_HeapSample() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_HeapSample& operator=(const ProfilePacket_HeapSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_HeapSample& operator=(ProfilePacket_HeapSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePacket_HeapSample& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePacket_HeapSample* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_HeapSample*>(
               &_ProfilePacket_HeapSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfilePacket_HeapSample& a, ProfilePacket_HeapSample& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_HeapSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePacket_HeapSample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePacket_HeapSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePacket_HeapSample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePacket_HeapSample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfilePacket_HeapSample& from) {
    ProfilePacket_HeapSample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePacket_HeapSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProfilePacket.HeapSample";
  }
  protected:
  explicit ProfilePacket_HeapSample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallstackIdFieldNumber = 1,
    kSelfAllocatedFieldNumber = 2,
    kSelfFreedFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kAllocCountFieldNumber = 5,
    kFreeCountFieldNumber = 6,
    kSelfMaxFieldNumber = 8,
    kSelfMaxCountFieldNumber = 9,
  };
  // optional uint64 callstack_id = 1;
  bool has_callstack_id() const;
  void clear_callstack_id() ;
  ::uint64_t callstack_id() const;
  void set_callstack_id(::uint64_t value);

  private:
  ::uint64_t _internal_callstack_id() const;
  void _internal_set_callstack_id(::uint64_t value);

  public:
  // optional uint64 self_allocated = 2;
  bool has_self_allocated() const;
  void clear_self_allocated() ;
  ::uint64_t self_allocated() const;
  void set_self_allocated(::uint64_t value);

  private:
  ::uint64_t _internal_self_allocated() const;
  void _internal_set_self_allocated(::uint64_t value);

  public:
  // optional uint64 self_freed = 3;
  bool has_self_freed() const;
  void clear_self_freed() ;
  ::uint64_t self_freed() const;
  void set_self_freed(::uint64_t value);

  private:
  ::uint64_t _internal_self_freed() const;
  void _internal_set_self_freed(::uint64_t value);

  public:
  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional uint64 alloc_count = 5;
  bool has_alloc_count() const;
  void clear_alloc_count() ;
  ::uint64_t alloc_count() const;
  void set_alloc_count(::uint64_t value);

  private:
  ::uint64_t _internal_alloc_count() const;
  void _internal_set_alloc_count(::uint64_t value);

  public:
  // optional uint64 free_count = 6;
  bool has_free_count() const;
  void clear_free_count() ;
  ::uint64_t free_count() const;
  void set_free_count(::uint64_t value);

  private:
  ::uint64_t _internal_free_count() const;
  void _internal_set_free_count(::uint64_t value);

  public:
  // optional uint64 self_max = 8;
  bool has_self_max() const;
  void clear_self_max() ;
  ::uint64_t self_max() const;
  void set_self_max(::uint64_t value);

  private:
  ::uint64_t _internal_self_max() const;
  void _internal_set_self_max(::uint64_t value);

  public:
  // optional uint64 self_max_count = 9;
  bool has_self_max_count() const;
  void clear_self_max_count() ;
  ::uint64_t self_max_count() const;
  void set_self_max_count(::uint64_t value);

  private:
  ::uint64_t _internal_self_max_count() const;
  void _internal_set_self_max_count(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.HeapSample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t callstack_id_;
    ::uint64_t self_allocated_;
    ::uint64_t self_freed_;
    ::uint64_t timestamp_;
    ::uint64_t alloc_count_;
    ::uint64_t free_count_;
    ::uint64_t self_max_;
    ::uint64_t self_max_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class ProfilePacket_Histogram_Bucket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.Histogram.Bucket) */ {
 public:
  inline ProfilePacket_Histogram_Bucket() : ProfilePacket_Histogram_Bucket(nullptr) {}
  ~ProfilePacket_Histogram_Bucket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilePacket_Histogram_Bucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePacket_Histogram_Bucket(const ProfilePacket_Histogram_Bucket& from);
  ProfilePacket_Histogram_Bucket(ProfilePacket_Histogram_Bucket&& from) noexcept
    : ProfilePacket_Histogram_Bucket() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_Histogram_Bucket& operator=(const ProfilePacket_Histogram_Bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_Histogram_Bucket& operator=(ProfilePacket_Histogram_Bucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePacket_Histogram_Bucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePacket_Histogram_Bucket* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_Histogram_Bucket*>(
               &_ProfilePacket_Histogram_Bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProfilePacket_Histogram_Bucket& a, ProfilePacket_Histogram_Bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_Histogram_Bucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePacket_Histogram_Bucket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePacket_Histogram_Bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePacket_Histogram_Bucket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePacket_Histogram_Bucket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfilePacket_Histogram_Bucket& from) {
    ProfilePacket_Histogram_Bucket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePacket_Histogram_Bucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProfilePacket.Histogram.Bucket";
  }
  protected:
  explicit ProfilePacket_Histogram_Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperLimitFieldNumber = 1,
    kCountFieldNumber = 3,
    kMaxBucketFieldNumber = 2,
  };
  // optional uint64 upper_limit = 1;
  bool has_upper_limit() const;
  void clear_upper_limit() ;
  ::uint64_t upper_limit() const;
  void set_upper_limit(::uint64_t value);

  private:
  ::uint64_t _internal_upper_limit() const;
  void _internal_set_upper_limit(::uint64_t value);

  public:
  // optional uint64 count = 3;
  bool has_count() const;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // optional bool max_bucket = 2;
  bool has_max_bucket() const;
  void clear_max_bucket() ;
  bool max_bucket() const;
  void set_max_bucket(bool value);

  private:
  bool _internal_max_bucket() const;
  void _internal_set_max_bucket(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.Histogram.Bucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t upper_limit_;
    ::uint64_t count_;
    bool max_bucket_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class ProfilePacket_Histogram final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.Histogram) */ {
 public:
  inline ProfilePacket_Histogram() : ProfilePacket_Histogram(nullptr) {}
  ~ProfilePacket_Histogram() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilePacket_Histogram(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePacket_Histogram(const ProfilePacket_Histogram& from);
  ProfilePacket_Histogram(ProfilePacket_Histogram&& from) noexcept
    : ProfilePacket_Histogram() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_Histogram& operator=(const ProfilePacket_Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_Histogram& operator=(ProfilePacket_Histogram&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePacket_Histogram& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePacket_Histogram* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_Histogram*>(
               &_ProfilePacket_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProfilePacket_Histogram& a, ProfilePacket_Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_Histogram* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePacket_Histogram* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePacket_Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePacket_Histogram>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePacket_Histogram& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfilePacket_Histogram& from) {
    ProfilePacket_Histogram::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePacket_Histogram* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProfilePacket.Histogram";
  }
  protected:
  explicit ProfilePacket_Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProfilePacket_Histogram_Bucket Bucket;

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 1,
  };
  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;

  public:
  void clear_buckets() ;
  ::perfetto::protos::ProfilePacket_Histogram_Bucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >*
      mutable_buckets();
  private:
  const ::perfetto::protos::ProfilePacket_Histogram_Bucket& _internal_buckets(int index) const;
  ::perfetto::protos::ProfilePacket_Histogram_Bucket* _internal_add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_Histogram_Bucket>& _internal_buckets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_Histogram_Bucket>* _internal_mutable_buckets();
  public:
  const ::perfetto::protos::ProfilePacket_Histogram_Bucket& buckets(int index) const;
  ::perfetto::protos::ProfilePacket_Histogram_Bucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >&
      buckets() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.Histogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket > buckets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class ProfilePacket_ProcessStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.ProcessStats) */ {
 public:
  inline ProfilePacket_ProcessStats() : ProfilePacket_ProcessStats(nullptr) {}
  ~ProfilePacket_ProcessStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilePacket_ProcessStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePacket_ProcessStats(const ProfilePacket_ProcessStats& from);
  ProfilePacket_ProcessStats(ProfilePacket_ProcessStats&& from) noexcept
    : ProfilePacket_ProcessStats() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_ProcessStats& operator=(const ProfilePacket_ProcessStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_ProcessStats& operator=(ProfilePacket_ProcessStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePacket_ProcessStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePacket_ProcessStats* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_ProcessStats*>(
               &_ProfilePacket_ProcessStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProfilePacket_ProcessStats& a, ProfilePacket_ProcessStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_ProcessStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePacket_ProcessStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePacket_ProcessStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePacket_ProcessStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePacket_ProcessStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfilePacket_ProcessStats& from) {
    ProfilePacket_ProcessStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePacket_ProcessStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProfilePacket.ProcessStats";
  }
  protected:
  explicit ProfilePacket_ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnwindingTimeUsFieldNumber = 4,
    kUnwindingErrorsFieldNumber = 1,
    kHeapSamplesFieldNumber = 2,
    kMapReparsesFieldNumber = 3,
    kTotalUnwindingTimeUsFieldNumber = 5,
    kClientSpinlockBlockedUsFieldNumber = 6,
  };
  // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
  bool has_unwinding_time_us() const;
  void clear_unwinding_time_us() ;
  const ::perfetto::protos::ProfilePacket_Histogram& unwinding_time_us() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProfilePacket_Histogram* release_unwinding_time_us();
  ::perfetto::protos::ProfilePacket_Histogram* mutable_unwinding_time_us();
  void set_allocated_unwinding_time_us(::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us);
  private:
  const ::perfetto::protos::ProfilePacket_Histogram& _internal_unwinding_time_us() const;
  ::perfetto::protos::ProfilePacket_Histogram* _internal_mutable_unwinding_time_us();
  public:
  void unsafe_arena_set_allocated_unwinding_time_us(
      ::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us);
  ::perfetto::protos::ProfilePacket_Histogram* unsafe_arena_release_unwinding_time_us();
  // optional uint64 unwinding_errors = 1;
  bool has_unwinding_errors() const;
  void clear_unwinding_errors() ;
  ::uint64_t unwinding_errors() const;
  void set_unwinding_errors(::uint64_t value);

  private:
  ::uint64_t _internal_unwinding_errors() const;
  void _internal_set_unwinding_errors(::uint64_t value);

  public:
  // optional uint64 heap_samples = 2;
  bool has_heap_samples() const;
  void clear_heap_samples() ;
  ::uint64_t heap_samples() const;
  void set_heap_samples(::uint64_t value);

  private:
  ::uint64_t _internal_heap_samples() const;
  void _internal_set_heap_samples(::uint64_t value);

  public:
  // optional uint64 map_reparses = 3;
  bool has_map_reparses() const;
  void clear_map_reparses() ;
  ::uint64_t map_reparses() const;
  void set_map_reparses(::uint64_t value);

  private:
  ::uint64_t _internal_map_reparses() const;
  void _internal_set_map_reparses(::uint64_t value);

  public:
  // optional uint64 total_unwinding_time_us = 5;
  bool has_total_unwinding_time_us() const;
  void clear_total_unwinding_time_us() ;
  ::uint64_t total_unwinding_time_us() const;
  void set_total_unwinding_time_us(::uint64_t value);

  private:
  ::uint64_t _internal_total_unwinding_time_us() const;
  void _internal_set_total_unwinding_time_us(::uint64_t value);

  public:
  // optional uint64 client_spinlock_blocked_us = 6;
  bool has_client_spinlock_blocked_us() const;
  void clear_client_spinlock_blocked_us() ;
  ::uint64_t client_spinlock_blocked_us() const;
  void set_client_spinlock_blocked_us(::uint64_t value);

  private:
  ::uint64_t _internal_client_spinlock_blocked_us() const;
  void _internal_set_client_spinlock_blocked_us(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.ProcessStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us_;
    ::uint64_t unwinding_errors_;
    ::uint64_t heap_samples_;
    ::uint64_t map_reparses_;
    ::uint64_t total_unwinding_time_us_;
    ::uint64_t client_spinlock_blocked_us_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class ProfilePacket_ProcessHeapSamples final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket.ProcessHeapSamples) */ {
 public:
  inline ProfilePacket_ProcessHeapSamples() : ProfilePacket_ProcessHeapSamples(nullptr) {}
  ~ProfilePacket_ProcessHeapSamples() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilePacket_ProcessHeapSamples(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePacket_ProcessHeapSamples(const ProfilePacket_ProcessHeapSamples& from);
  ProfilePacket_ProcessHeapSamples(ProfilePacket_ProcessHeapSamples&& from) noexcept
    : ProfilePacket_ProcessHeapSamples() {
    *this = ::std::move(from);
  }

  inline ProfilePacket_ProcessHeapSamples& operator=(const ProfilePacket_ProcessHeapSamples& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket_ProcessHeapSamples& operator=(ProfilePacket_ProcessHeapSamples&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePacket_ProcessHeapSamples& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePacket_ProcessHeapSamples* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket_ProcessHeapSamples*>(
               &_ProfilePacket_ProcessHeapSamples_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfilePacket_ProcessHeapSamples& a, ProfilePacket_ProcessHeapSamples& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket_ProcessHeapSamples* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePacket_ProcessHeapSamples* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePacket_ProcessHeapSamples* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePacket_ProcessHeapSamples>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePacket_ProcessHeapSamples& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfilePacket_ProcessHeapSamples& from) {
    ProfilePacket_ProcessHeapSamples::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePacket_ProcessHeapSamples* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProfilePacket.ProcessHeapSamples";
  }
  protected:
  explicit ProfilePacket_ProcessHeapSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ClientError = ProfilePacket_ProcessHeapSamples_ClientError;
  static constexpr ClientError CLIENT_ERROR_NONE = ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_NONE;
  static constexpr ClientError CLIENT_ERROR_HIT_TIMEOUT = ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_HIT_TIMEOUT;
  static constexpr ClientError CLIENT_ERROR_INVALID_STACK_BOUNDS = ProfilePacket_ProcessHeapSamples_ClientError_CLIENT_ERROR_INVALID_STACK_BOUNDS;
  static inline bool ClientError_IsValid(int value) {
    return ProfilePacket_ProcessHeapSamples_ClientError_IsValid(value);
  }
  static constexpr ClientError ClientError_MIN = ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MIN;
  static constexpr ClientError ClientError_MAX = ProfilePacket_ProcessHeapSamples_ClientError_ClientError_MAX;
  static constexpr int ClientError_ARRAYSIZE = ProfilePacket_ProcessHeapSamples_ClientError_ClientError_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientError_descriptor() {
    return ProfilePacket_ProcessHeapSamples_ClientError_descriptor();
  }
  template <typename T>
  static inline const std::string& ClientError_Name(T value) {
    return ProfilePacket_ProcessHeapSamples_ClientError_Name(value);
  }
  static inline bool ClientError_Parse(absl::string_view name, ClientError* value) {
    return ProfilePacket_ProcessHeapSamples_ClientError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 2,
    kHeapNameFieldNumber = 11,
    kStatsFieldNumber = 5,
    kPidFieldNumber = 1,
    kFromStartupFieldNumber = 3,
    kRejectedConcurrentFieldNumber = 4,
    kDisconnectedFieldNumber = 6,
    kBufferOverranFieldNumber = 7,
    kBufferCorruptedFieldNumber = 8,
    kHitGuardrailFieldNumber = 10,
    kTimestampFieldNumber = 9,
    kSamplingIntervalBytesFieldNumber = 12,
    kOrigSamplingIntervalBytesFieldNumber = 13,
    kClientErrorFieldNumber = 14,
  };
  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::perfetto::protos::ProfilePacket_HeapSample* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >*
      mutable_samples();
  private:
  const ::perfetto::protos::ProfilePacket_HeapSample& _internal_samples(int index) const;
  ::perfetto::protos::ProfilePacket_HeapSample* _internal_add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_HeapSample>& _internal_samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_HeapSample>* _internal_mutable_samples();
  public:
  const ::perfetto::protos::ProfilePacket_HeapSample& samples(int index) const;
  ::perfetto::protos::ProfilePacket_HeapSample* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >&
      samples() const;
  // optional string heap_name = 11;
  bool has_heap_name() const;
  void clear_heap_name() ;
  const std::string& heap_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_heap_name(Arg_&& arg, Args_... args);
  std::string* mutable_heap_name();
  PROTOBUF_NODISCARD std::string* release_heap_name();
  void set_allocated_heap_name(std::string* ptr);

  private:
  const std::string& _internal_heap_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_heap_name(
      const std::string& value);
  std::string* _internal_mutable_heap_name();

  public:
  // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
  bool has_stats() const;
  void clear_stats() ;
  const ::perfetto::protos::ProfilePacket_ProcessStats& stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProfilePacket_ProcessStats* release_stats();
  ::perfetto::protos::ProfilePacket_ProcessStats* mutable_stats();
  void set_allocated_stats(::perfetto::protos::ProfilePacket_ProcessStats* stats);
  private:
  const ::perfetto::protos::ProfilePacket_ProcessStats& _internal_stats() const;
  ::perfetto::protos::ProfilePacket_ProcessStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::perfetto::protos::ProfilePacket_ProcessStats* stats);
  ::perfetto::protos::ProfilePacket_ProcessStats* unsafe_arena_release_stats();
  // optional uint64 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::uint64_t pid() const;
  void set_pid(::uint64_t value);

  private:
  ::uint64_t _internal_pid() const;
  void _internal_set_pid(::uint64_t value);

  public:
  // optional bool from_startup = 3;
  bool has_from_startup() const;
  void clear_from_startup() ;
  bool from_startup() const;
  void set_from_startup(bool value);

  private:
  bool _internal_from_startup() const;
  void _internal_set_from_startup(bool value);

  public:
  // optional bool rejected_concurrent = 4;
  bool has_rejected_concurrent() const;
  void clear_rejected_concurrent() ;
  bool rejected_concurrent() const;
  void set_rejected_concurrent(bool value);

  private:
  bool _internal_rejected_concurrent() const;
  void _internal_set_rejected_concurrent(bool value);

  public:
  // optional bool disconnected = 6;
  bool has_disconnected() const;
  void clear_disconnected() ;
  bool disconnected() const;
  void set_disconnected(bool value);

  private:
  bool _internal_disconnected() const;
  void _internal_set_disconnected(bool value);

  public:
  // optional bool buffer_overran = 7;
  bool has_buffer_overran() const;
  void clear_buffer_overran() ;
  bool buffer_overran() const;
  void set_buffer_overran(bool value);

  private:
  bool _internal_buffer_overran() const;
  void _internal_set_buffer_overran(bool value);

  public:
  // optional bool buffer_corrupted = 8;
  bool has_buffer_corrupted() const;
  void clear_buffer_corrupted() ;
  bool buffer_corrupted() const;
  void set_buffer_corrupted(bool value);

  private:
  bool _internal_buffer_corrupted() const;
  void _internal_set_buffer_corrupted(bool value);

  public:
  // optional bool hit_guardrail = 10;
  bool has_hit_guardrail() const;
  void clear_hit_guardrail() ;
  bool hit_guardrail() const;
  void set_hit_guardrail(bool value);

  private:
  bool _internal_hit_guardrail() const;
  void _internal_set_hit_guardrail(bool value);

  public:
  // optional uint64 timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional uint64 sampling_interval_bytes = 12;
  bool has_sampling_interval_bytes() const;
  void clear_sampling_interval_bytes() ;
  ::uint64_t sampling_interval_bytes() const;
  void set_sampling_interval_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_sampling_interval_bytes() const;
  void _internal_set_sampling_interval_bytes(::uint64_t value);

  public:
  // optional uint64 orig_sampling_interval_bytes = 13;
  bool has_orig_sampling_interval_bytes() const;
  void clear_orig_sampling_interval_bytes() ;
  ::uint64_t orig_sampling_interval_bytes() const;
  void set_orig_sampling_interval_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_orig_sampling_interval_bytes() const;
  void _internal_set_orig_sampling_interval_bytes(::uint64_t value);

  public:
  // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
  bool has_client_error() const;
  void clear_client_error() ;
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError client_error() const;
  void set_client_error(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError value);

  private:
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError _internal_client_error() const;
  void _internal_set_client_error(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket.ProcessHeapSamples)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample > samples_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heap_name_;
    ::perfetto::protos::ProfilePacket_ProcessStats* stats_;
    ::uint64_t pid_;
    bool from_startup_;
    bool rejected_concurrent_;
    bool disconnected_;
    bool buffer_overran_;
    bool buffer_corrupted_;
    bool hit_guardrail_;
    ::uint64_t timestamp_;
    ::uint64_t sampling_interval_bytes_;
    ::uint64_t orig_sampling_interval_bytes_;
    int client_error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class ProfilePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProfilePacket) */ {
 public:
  inline ProfilePacket() : ProfilePacket(nullptr) {}
  ~ProfilePacket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProfilePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfilePacket(const ProfilePacket& from);
  ProfilePacket(ProfilePacket&& from) noexcept
    : ProfilePacket() {
    *this = ::std::move(from);
  }

  inline ProfilePacket& operator=(const ProfilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilePacket& operator=(ProfilePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProfilePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfilePacket* internal_default_instance() {
    return reinterpret_cast<const ProfilePacket*>(
               &_ProfilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProfilePacket& a, ProfilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfilePacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfilePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProfilePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProfilePacket& from) {
    ProfilePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfilePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProfilePacket";
  }
  protected:
  explicit ProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProfilePacket_HeapSample HeapSample;
  typedef ProfilePacket_Histogram Histogram;
  typedef ProfilePacket_ProcessStats ProcessStats;
  typedef ProfilePacket_ProcessHeapSamples ProcessHeapSamples;

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 1,
    kFramesFieldNumber = 2,
    kCallstacksFieldNumber = 3,
    kMappingsFieldNumber = 4,
    kProcessDumpsFieldNumber = 5,
    kIndexFieldNumber = 7,
    kContinuedFieldNumber = 6,
  };
  // repeated .perfetto.protos.InternedString strings = 1;
  int strings_size() const;
  private:
  int _internal_strings_size() const;

  public:
  void clear_strings() ;
  ::perfetto::protos::InternedString* mutable_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
      mutable_strings();
  private:
  const ::perfetto::protos::InternedString& _internal_strings(int index) const;
  ::perfetto::protos::InternedString* _internal_add_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InternedString>& _internal_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InternedString>* _internal_mutable_strings();
  public:
  const ::perfetto::protos::InternedString& strings(int index) const;
  ::perfetto::protos::InternedString* add_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
      strings() const;
  // repeated .perfetto.protos.Frame frames = 2;
  int frames_size() const;
  private:
  int _internal_frames_size() const;

  public:
  void clear_frames() ;
  ::perfetto::protos::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >*
      mutable_frames();
  private:
  const ::perfetto::protos::Frame& _internal_frames(int index) const;
  ::perfetto::protos::Frame* _internal_add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Frame>& _internal_frames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Frame>* _internal_mutable_frames();
  public:
  const ::perfetto::protos::Frame& frames(int index) const;
  ::perfetto::protos::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >&
      frames() const;
  // repeated .perfetto.protos.Callstack callstacks = 3;
  int callstacks_size() const;
  private:
  int _internal_callstacks_size() const;

  public:
  void clear_callstacks() ;
  ::perfetto::protos::Callstack* mutable_callstacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >*
      mutable_callstacks();
  private:
  const ::perfetto::protos::Callstack& _internal_callstacks(int index) const;
  ::perfetto::protos::Callstack* _internal_add_callstacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Callstack>& _internal_callstacks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Callstack>* _internal_mutable_callstacks();
  public:
  const ::perfetto::protos::Callstack& callstacks(int index) const;
  ::perfetto::protos::Callstack* add_callstacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >&
      callstacks() const;
  // repeated .perfetto.protos.Mapping mappings = 4;
  int mappings_size() const;
  private:
  int _internal_mappings_size() const;

  public:
  void clear_mappings() ;
  ::perfetto::protos::Mapping* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >*
      mutable_mappings();
  private:
  const ::perfetto::protos::Mapping& _internal_mappings(int index) const;
  ::perfetto::protos::Mapping* _internal_add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Mapping>& _internal_mappings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Mapping>* _internal_mutable_mappings();
  public:
  const ::perfetto::protos::Mapping& mappings(int index) const;
  ::perfetto::protos::Mapping* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >&
      mappings() const;
  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  int process_dumps_size() const;
  private:
  int _internal_process_dumps_size() const;

  public:
  void clear_process_dumps() ;
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples* mutable_process_dumps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >*
      mutable_process_dumps();
  private:
  const ::perfetto::protos::ProfilePacket_ProcessHeapSamples& _internal_process_dumps(int index) const;
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples* _internal_add_process_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_ProcessHeapSamples>& _internal_process_dumps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_ProcessHeapSamples>* _internal_mutable_process_dumps();
  public:
  const ::perfetto::protos::ProfilePacket_ProcessHeapSamples& process_dumps(int index) const;
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples* add_process_dumps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >&
      process_dumps() const;
  // optional uint64 index = 7;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional bool continued = 6;
  bool has_continued() const;
  void clear_continued() ;
  bool continued() const;
  void set_continued(bool value);

  private:
  bool _internal_continued() const;
  void _internal_set_continued(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProfilePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString > strings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame > frames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack > callstacks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping > mappings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples > process_dumps_;
    ::uint64_t index_;
    bool continued_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class StreamingAllocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.StreamingAllocation) */ {
 public:
  inline StreamingAllocation() : StreamingAllocation(nullptr) {}
  ~StreamingAllocation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingAllocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingAllocation(const StreamingAllocation& from);
  StreamingAllocation(StreamingAllocation&& from) noexcept
    : StreamingAllocation() {
    *this = ::std::move(from);
  }

  inline StreamingAllocation& operator=(const StreamingAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingAllocation& operator=(StreamingAllocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingAllocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingAllocation* internal_default_instance() {
    return reinterpret_cast<const StreamingAllocation*>(
               &_StreamingAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamingAllocation& a, StreamingAllocation& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingAllocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingAllocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingAllocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingAllocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingAllocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingAllocation& from) {
    StreamingAllocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingAllocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.StreamingAllocation";
  }
  protected:
  explicit StreamingAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
    kSampleSizeFieldNumber = 3,
    kClockMonotonicCoarseTimestampFieldNumber = 4,
    kHeapIdFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
  };
  // repeated uint64 address = 1;
  int address_size() const;
  private:
  int _internal_address_size() const;

  public:
  void clear_address() ;
  ::uint64_t address(int index) const;
  void set_address(int index, ::uint64_t value);
  void add_address(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_address();

  private:
  ::uint64_t _internal_address(int index) const;
  void _internal_add_address(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_address();

  public:
  // repeated uint64 size = 2;
  int size_size() const;
  private:
  int _internal_size_size() const;

  public:
  void clear_size() ;
  ::uint64_t size(int index) const;
  void set_size(int index, ::uint64_t value);
  void add_size(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_size();

  private:
  ::uint64_t _internal_size(int index) const;
  void _internal_add_size(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_size();

  public:
  // repeated uint64 sample_size = 3;
  int sample_size_size() const;
  private:
  int _internal_sample_size_size() const;

  public:
  void clear_sample_size() ;
  ::uint64_t sample_size(int index) const;
  void set_sample_size(int index, ::uint64_t value);
  void add_sample_size(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& sample_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_sample_size();

  private:
  ::uint64_t _internal_sample_size(int index) const;
  void _internal_add_sample_size(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_sample_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_sample_size();

  public:
  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  int clock_monotonic_coarse_timestamp_size() const;
  private:
  int _internal_clock_monotonic_coarse_timestamp_size() const;

  public:
  void clear_clock_monotonic_coarse_timestamp() ;
  ::uint64_t clock_monotonic_coarse_timestamp(int index) const;
  void set_clock_monotonic_coarse_timestamp(int index, ::uint64_t value);
  void add_clock_monotonic_coarse_timestamp(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& clock_monotonic_coarse_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_clock_monotonic_coarse_timestamp();

  private:
  ::uint64_t _internal_clock_monotonic_coarse_timestamp(int index) const;
  void _internal_add_clock_monotonic_coarse_timestamp(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_clock_monotonic_coarse_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_clock_monotonic_coarse_timestamp();

  public:
  // repeated uint32 heap_id = 5;
  int heap_id_size() const;
  private:
  int _internal_heap_id_size() const;

  public:
  void clear_heap_id() ;
  ::uint32_t heap_id(int index) const;
  void set_heap_id(int index, ::uint32_t value);
  void add_heap_id(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& heap_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_heap_id();

  private:
  ::uint32_t _internal_heap_id(int index) const;
  void _internal_add_heap_id(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_heap_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_heap_id();

  public:
  // repeated uint64 sequence_number = 6;
  int sequence_number_size() const;
  private:
  int _internal_sequence_number_size() const;

  public:
  void clear_sequence_number() ;
  ::uint64_t sequence_number(int index) const;
  void set_sequence_number(int index, ::uint64_t value);
  void add_sequence_number(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& sequence_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_sequence_number();

  private:
  ::uint64_t _internal_sequence_number(int index) const;
  void _internal_add_sequence_number(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_sequence_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_sequence_number();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.StreamingAllocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> address_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> sample_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> clock_monotonic_coarse_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> heap_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> sequence_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class StreamingFree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.StreamingFree) */ {
 public:
  inline StreamingFree() : StreamingFree(nullptr) {}
  ~StreamingFree() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingFree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingFree(const StreamingFree& from);
  StreamingFree(StreamingFree&& from) noexcept
    : StreamingFree() {
    *this = ::std::move(from);
  }

  inline StreamingFree& operator=(const StreamingFree& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingFree& operator=(StreamingFree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingFree& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingFree* internal_default_instance() {
    return reinterpret_cast<const StreamingFree*>(
               &_StreamingFree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamingFree& a, StreamingFree& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingFree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingFree* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingFree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingFree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingFree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingFree& from) {
    StreamingFree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingFree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.StreamingFree";
  }
  protected:
  explicit StreamingFree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kHeapIdFieldNumber = 2,
    kSequenceNumberFieldNumber = 3,
  };
  // repeated uint64 address = 1;
  int address_size() const;
  private:
  int _internal_address_size() const;

  public:
  void clear_address() ;
  ::uint64_t address(int index) const;
  void set_address(int index, ::uint64_t value);
  void add_address(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_address();

  private:
  ::uint64_t _internal_address(int index) const;
  void _internal_add_address(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_address();

  public:
  // repeated uint32 heap_id = 2;
  int heap_id_size() const;
  private:
  int _internal_heap_id_size() const;

  public:
  void clear_heap_id() ;
  ::uint32_t heap_id(int index) const;
  void set_heap_id(int index, ::uint32_t value);
  void add_heap_id(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& heap_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_heap_id();

  private:
  ::uint32_t _internal_heap_id(int index) const;
  void _internal_add_heap_id(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_heap_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_heap_id();

  public:
  // repeated uint64 sequence_number = 3;
  int sequence_number_size() const;
  private:
  int _internal_sequence_number_size() const;

  public:
  void clear_sequence_number() ;
  ::uint64_t sequence_number(int index) const;
  void set_sequence_number(int index, ::uint64_t value);
  void add_sequence_number(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& sequence_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_sequence_number();

  private:
  ::uint64_t _internal_sequence_number(int index) const;
  void _internal_add_sequence_number(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_sequence_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_sequence_number();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.StreamingFree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> address_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> heap_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> sequence_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class StreamingProfilePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.StreamingProfilePacket) */ {
 public:
  inline StreamingProfilePacket() : StreamingProfilePacket(nullptr) {}
  ~StreamingProfilePacket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingProfilePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamingProfilePacket(const StreamingProfilePacket& from);
  StreamingProfilePacket(StreamingProfilePacket&& from) noexcept
    : StreamingProfilePacket() {
    *this = ::std::move(from);
  }

  inline StreamingProfilePacket& operator=(const StreamingProfilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingProfilePacket& operator=(StreamingProfilePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingProfilePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingProfilePacket* internal_default_instance() {
    return reinterpret_cast<const StreamingProfilePacket*>(
               &_StreamingProfilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamingProfilePacket& a, StreamingProfilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingProfilePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingProfilePacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingProfilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingProfilePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamingProfilePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamingProfilePacket& from) {
    StreamingProfilePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingProfilePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.StreamingProfilePacket";
  }
  protected:
  explicit StreamingProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallstackIidFieldNumber = 1,
    kTimestampDeltaUsFieldNumber = 2,
    kProcessPriorityFieldNumber = 3,
  };
  // repeated uint64 callstack_iid = 1;
  int callstack_iid_size() const;
  private:
  int _internal_callstack_iid_size() const;

  public:
  void clear_callstack_iid() ;
  ::uint64_t callstack_iid(int index) const;
  void set_callstack_iid(int index, ::uint64_t value);
  void add_callstack_iid(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& callstack_iid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_callstack_iid();

  private:
  ::uint64_t _internal_callstack_iid(int index) const;
  void _internal_add_callstack_iid(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_callstack_iid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_callstack_iid();

  public:
  // repeated int64 timestamp_delta_us = 2;
  int timestamp_delta_us_size() const;
  private:
  int _internal_timestamp_delta_us_size() const;

  public:
  void clear_timestamp_delta_us() ;
  ::int64_t timestamp_delta_us(int index) const;
  void set_timestamp_delta_us(int index, ::int64_t value);
  void add_timestamp_delta_us(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& timestamp_delta_us() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_timestamp_delta_us();

  private:
  ::int64_t _internal_timestamp_delta_us(int index) const;
  void _internal_add_timestamp_delta_us(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_timestamp_delta_us() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_timestamp_delta_us();

  public:
  // optional int32 process_priority = 3;
  bool has_process_priority() const;
  void clear_process_priority() ;
  ::int32_t process_priority() const;
  void set_process_priority(::int32_t value);

  private:
  ::int32_t _internal_process_priority() const;
  void _internal_set_process_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.StreamingProfilePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> callstack_iid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> timestamp_delta_us_;
    ::int32_t process_priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class Profiling final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:perfetto.protos.Profiling) */ {
 public:
  inline Profiling() : Profiling(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Profiling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Profiling(const Profiling& from);
  Profiling(Profiling&& from) noexcept
    : Profiling() {
    *this = ::std::move(from);
  }

  inline Profiling& operator=(const Profiling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profiling& operator=(Profiling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Profiling& default_instance() {
    return *internal_default_instance();
  }
  static inline const Profiling* internal_default_instance() {
    return reinterpret_cast<const Profiling*>(
               &_Profiling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Profiling& a, Profiling& b) {
    a.Swap(&b);
  }
  inline void Swap(Profiling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profiling* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Profiling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Profiling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Profiling& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Profiling& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Profiling";
  }
  protected:
  explicit Profiling(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CpuMode = Profiling_CpuMode;
  static constexpr CpuMode MODE_UNKNOWN = Profiling_CpuMode_MODE_UNKNOWN;
  static constexpr CpuMode MODE_KERNEL = Profiling_CpuMode_MODE_KERNEL;
  static constexpr CpuMode MODE_USER = Profiling_CpuMode_MODE_USER;
  static constexpr CpuMode MODE_HYPERVISOR = Profiling_CpuMode_MODE_HYPERVISOR;
  static constexpr CpuMode MODE_GUEST_KERNEL = Profiling_CpuMode_MODE_GUEST_KERNEL;
  static constexpr CpuMode MODE_GUEST_USER = Profiling_CpuMode_MODE_GUEST_USER;
  static inline bool CpuMode_IsValid(int value) {
    return Profiling_CpuMode_IsValid(value);
  }
  static constexpr CpuMode CpuMode_MIN = Profiling_CpuMode_CpuMode_MIN;
  static constexpr CpuMode CpuMode_MAX = Profiling_CpuMode_CpuMode_MAX;
  static constexpr int CpuMode_ARRAYSIZE = Profiling_CpuMode_CpuMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CpuMode_descriptor() {
    return Profiling_CpuMode_descriptor();
  }
  template <typename T>
  static inline const std::string& CpuMode_Name(T value) {
    return Profiling_CpuMode_Name(value);
  }
  static inline bool CpuMode_Parse(absl::string_view name, CpuMode* value) {
    return Profiling_CpuMode_Parse(name, value);
  }

  using StackUnwindError = Profiling_StackUnwindError;
  static constexpr StackUnwindError UNWIND_ERROR_UNKNOWN = Profiling_StackUnwindError_UNWIND_ERROR_UNKNOWN;
  static constexpr StackUnwindError UNWIND_ERROR_NONE = Profiling_StackUnwindError_UNWIND_ERROR_NONE;
  static constexpr StackUnwindError UNWIND_ERROR_MEMORY_INVALID = Profiling_StackUnwindError_UNWIND_ERROR_MEMORY_INVALID;
  static constexpr StackUnwindError UNWIND_ERROR_UNWIND_INFO = Profiling_StackUnwindError_UNWIND_ERROR_UNWIND_INFO;
  static constexpr StackUnwindError UNWIND_ERROR_UNSUPPORTED = Profiling_StackUnwindError_UNWIND_ERROR_UNSUPPORTED;
  static constexpr StackUnwindError UNWIND_ERROR_INVALID_MAP = Profiling_StackUnwindError_UNWIND_ERROR_INVALID_MAP;
  static constexpr StackUnwindError UNWIND_ERROR_MAX_FRAMES_EXCEEDED = Profiling_StackUnwindError_UNWIND_ERROR_MAX_FRAMES_EXCEEDED;
  static constexpr StackUnwindError UNWIND_ERROR_REPEATED_FRAME = Profiling_StackUnwindError_UNWIND_ERROR_REPEATED_FRAME;
  static constexpr StackUnwindError UNWIND_ERROR_INVALID_ELF = Profiling_StackUnwindError_UNWIND_ERROR_INVALID_ELF;
  static constexpr StackUnwindError UNWIND_ERROR_SYSTEM_CALL = Profiling_StackUnwindError_UNWIND_ERROR_SYSTEM_CALL;
  static constexpr StackUnwindError UNWIND_ERROR_THREAD_TIMEOUT = Profiling_StackUnwindError_UNWIND_ERROR_THREAD_TIMEOUT;
  static constexpr StackUnwindError UNWIND_ERROR_THREAD_DOES_NOT_EXIST = Profiling_StackUnwindError_UNWIND_ERROR_THREAD_DOES_NOT_EXIST;
  static constexpr StackUnwindError UNWIND_ERROR_BAD_ARCH = Profiling_StackUnwindError_UNWIND_ERROR_BAD_ARCH;
  static constexpr StackUnwindError UNWIND_ERROR_MAPS_PARSE = Profiling_StackUnwindError_UNWIND_ERROR_MAPS_PARSE;
  static constexpr StackUnwindError UNWIND_ERROR_INVALID_PARAMETER = Profiling_StackUnwindError_UNWIND_ERROR_INVALID_PARAMETER;
  static constexpr StackUnwindError UNWIND_ERROR_PTRACE_CALL = Profiling_StackUnwindError_UNWIND_ERROR_PTRACE_CALL;
  static inline bool StackUnwindError_IsValid(int value) {
    return Profiling_StackUnwindError_IsValid(value);
  }
  static constexpr StackUnwindError StackUnwindError_MIN = Profiling_StackUnwindError_StackUnwindError_MIN;
  static constexpr StackUnwindError StackUnwindError_MAX = Profiling_StackUnwindError_StackUnwindError_MAX;
  static constexpr int StackUnwindError_ARRAYSIZE = Profiling_StackUnwindError_StackUnwindError_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StackUnwindError_descriptor() {
    return Profiling_StackUnwindError_descriptor();
  }
  template <typename T>
  static inline const std::string& StackUnwindError_Name(T value) {
    return Profiling_StackUnwindError_Name(value);
  }
  static inline bool StackUnwindError_Parse(absl::string_view name, StackUnwindError* value) {
    return Profiling_StackUnwindError_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfetto.protos.Profiling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class PerfSample_ProducerEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfSample.ProducerEvent) */ {
 public:
  inline PerfSample_ProducerEvent() : PerfSample_ProducerEvent(nullptr) {}
  ~PerfSample_ProducerEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfSample_ProducerEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfSample_ProducerEvent(const PerfSample_ProducerEvent& from);
  PerfSample_ProducerEvent(PerfSample_ProducerEvent&& from) noexcept
    : PerfSample_ProducerEvent() {
    *this = ::std::move(from);
  }

  inline PerfSample_ProducerEvent& operator=(const PerfSample_ProducerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfSample_ProducerEvent& operator=(PerfSample_ProducerEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfSample_ProducerEvent& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalSourceStopReasonCase {
    kSourceStopReason = 1,
    OPTIONAL_SOURCE_STOP_REASON_NOT_SET = 0,
  };

  static inline const PerfSample_ProducerEvent* internal_default_instance() {
    return reinterpret_cast<const PerfSample_ProducerEvent*>(
               &_PerfSample_ProducerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PerfSample_ProducerEvent& a, PerfSample_ProducerEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfSample_ProducerEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfSample_ProducerEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfSample_ProducerEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfSample_ProducerEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfSample_ProducerEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfSample_ProducerEvent& from) {
    PerfSample_ProducerEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfSample_ProducerEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfSample.ProducerEvent";
  }
  protected:
  explicit PerfSample_ProducerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DataSourceStopReason = PerfSample_ProducerEvent_DataSourceStopReason;
  static constexpr DataSourceStopReason PROFILER_STOP_UNKNOWN = PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_UNKNOWN;
  static constexpr DataSourceStopReason PROFILER_STOP_GUARDRAIL = PerfSample_ProducerEvent_DataSourceStopReason_PROFILER_STOP_GUARDRAIL;
  static inline bool DataSourceStopReason_IsValid(int value) {
    return PerfSample_ProducerEvent_DataSourceStopReason_IsValid(value);
  }
  static constexpr DataSourceStopReason DataSourceStopReason_MIN = PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MIN;
  static constexpr DataSourceStopReason DataSourceStopReason_MAX = PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_MAX;
  static constexpr int DataSourceStopReason_ARRAYSIZE = PerfSample_ProducerEvent_DataSourceStopReason_DataSourceStopReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataSourceStopReason_descriptor() {
    return PerfSample_ProducerEvent_DataSourceStopReason_descriptor();
  }
  template <typename T>
  static inline const std::string& DataSourceStopReason_Name(T value) {
    return PerfSample_ProducerEvent_DataSourceStopReason_Name(value);
  }
  static inline bool DataSourceStopReason_Parse(absl::string_view name, DataSourceStopReason* value) {
    return PerfSample_ProducerEvent_DataSourceStopReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceStopReasonFieldNumber = 1,
  };
  // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
  bool has_source_stop_reason() const;
  void clear_source_stop_reason() ;
  ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason source_stop_reason() const;
  void set_source_stop_reason(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason value);

  private:
  ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason _internal_source_stop_reason() const;
  void _internal_set_source_stop_reason(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason value);

  public:
  void clear_optional_source_stop_reason();
  OptionalSourceStopReasonCase optional_source_stop_reason_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfSample.ProducerEvent)
 private:
  class _Internal;
  void set_has_source_stop_reason();

  inline bool has_optional_source_stop_reason() const;
  inline void clear_has_optional_source_stop_reason();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalSourceStopReasonUnion {
      constexpr OptionalSourceStopReasonUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int source_stop_reason_;
    } optional_source_stop_reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class PerfSample final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfSample) */ {
 public:
  inline PerfSample() : PerfSample(nullptr) {}
  ~PerfSample() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfSample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfSample(const PerfSample& from);
  PerfSample(PerfSample&& from) noexcept
    : PerfSample() {
    *this = ::std::move(from);
  }

  inline PerfSample& operator=(const PerfSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfSample& operator=(PerfSample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfSample& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalUnwindErrorCase {
    kUnwindError = 16,
    OPTIONAL_UNWIND_ERROR_NOT_SET = 0,
  };

  enum OptionalSampleSkippedReasonCase {
    kSampleSkippedReason = 18,
    OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET = 0,
  };

  static inline const PerfSample* internal_default_instance() {
    return reinterpret_cast<const PerfSample*>(
               &_PerfSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PerfSample& a, PerfSample& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfSample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfSample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfSample>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfSample& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfSample& from) {
    PerfSample::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfSample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfSample";
  }
  protected:
  explicit PerfSample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerfSample_ProducerEvent ProducerEvent;

  using SampleSkipReason = PerfSample_SampleSkipReason;
  static constexpr SampleSkipReason PROFILER_SKIP_UNKNOWN = PerfSample_SampleSkipReason_PROFILER_SKIP_UNKNOWN;
  static constexpr SampleSkipReason PROFILER_SKIP_READ_STAGE = PerfSample_SampleSkipReason_PROFILER_SKIP_READ_STAGE;
  static constexpr SampleSkipReason PROFILER_SKIP_UNWIND_STAGE = PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_STAGE;
  static constexpr SampleSkipReason PROFILER_SKIP_UNWIND_ENQUEUE = PerfSample_SampleSkipReason_PROFILER_SKIP_UNWIND_ENQUEUE;
  static inline bool SampleSkipReason_IsValid(int value) {
    return PerfSample_SampleSkipReason_IsValid(value);
  }
  static constexpr SampleSkipReason SampleSkipReason_MIN = PerfSample_SampleSkipReason_SampleSkipReason_MIN;
  static constexpr SampleSkipReason SampleSkipReason_MAX = PerfSample_SampleSkipReason_SampleSkipReason_MAX;
  static constexpr int SampleSkipReason_ARRAYSIZE = PerfSample_SampleSkipReason_SampleSkipReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SampleSkipReason_descriptor() {
    return PerfSample_SampleSkipReason_descriptor();
  }
  template <typename T>
  static inline const std::string& SampleSkipReason_Name(T value) {
    return PerfSample_SampleSkipReason_Name(value);
  }
  static inline bool SampleSkipReason_Parse(absl::string_view name, SampleSkipReason* value) {
    return PerfSample_SampleSkipReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProducerEventFieldNumber = 19,
    kCpuFieldNumber = 1,
    kPidFieldNumber = 2,
    kCallstackIidFieldNumber = 4,
    kTidFieldNumber = 3,
    kCpuModeFieldNumber = 5,
    kTimebaseCountFieldNumber = 6,
    kKernelRecordsLostFieldNumber = 17,
    kUnwindErrorFieldNumber = 16,
    kSampleSkippedReasonFieldNumber = 18,
  };
  // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
  bool has_producer_event() const;
  void clear_producer_event() ;
  const ::perfetto::protos::PerfSample_ProducerEvent& producer_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfSample_ProducerEvent* release_producer_event();
  ::perfetto::protos::PerfSample_ProducerEvent* mutable_producer_event();
  void set_allocated_producer_event(::perfetto::protos::PerfSample_ProducerEvent* producer_event);
  private:
  const ::perfetto::protos::PerfSample_ProducerEvent& _internal_producer_event() const;
  ::perfetto::protos::PerfSample_ProducerEvent* _internal_mutable_producer_event();
  public:
  void unsafe_arena_set_allocated_producer_event(
      ::perfetto::protos::PerfSample_ProducerEvent* producer_event);
  ::perfetto::protos::PerfSample_ProducerEvent* unsafe_arena_release_producer_event();
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint32_t cpu() const;
  void set_cpu(::uint32_t value);

  private:
  ::uint32_t _internal_cpu() const;
  void _internal_set_cpu(::uint32_t value);

  public:
  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // optional uint64 callstack_iid = 4;
  bool has_callstack_iid() const;
  void clear_callstack_iid() ;
  ::uint64_t callstack_iid() const;
  void set_callstack_iid(::uint64_t value);

  private:
  ::uint64_t _internal_callstack_iid() const;
  void _internal_set_callstack_iid(::uint64_t value);

  public:
  // optional uint32 tid = 3;
  bool has_tid() const;
  void clear_tid() ;
  ::uint32_t tid() const;
  void set_tid(::uint32_t value);

  private:
  ::uint32_t _internal_tid() const;
  void _internal_set_tid(::uint32_t value);

  public:
  // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
  bool has_cpu_mode() const;
  void clear_cpu_mode() ;
  ::perfetto::protos::Profiling_CpuMode cpu_mode() const;
  void set_cpu_mode(::perfetto::protos::Profiling_CpuMode value);

  private:
  ::perfetto::protos::Profiling_CpuMode _internal_cpu_mode() const;
  void _internal_set_cpu_mode(::perfetto::protos::Profiling_CpuMode value);

  public:
  // optional uint64 timebase_count = 6;
  bool has_timebase_count() const;
  void clear_timebase_count() ;
  ::uint64_t timebase_count() const;
  void set_timebase_count(::uint64_t value);

  private:
  ::uint64_t _internal_timebase_count() const;
  void _internal_set_timebase_count(::uint64_t value);

  public:
  // optional uint64 kernel_records_lost = 17;
  bool has_kernel_records_lost() const;
  void clear_kernel_records_lost() ;
  ::uint64_t kernel_records_lost() const;
  void set_kernel_records_lost(::uint64_t value);

  private:
  ::uint64_t _internal_kernel_records_lost() const;
  void _internal_set_kernel_records_lost(::uint64_t value);

  public:
  // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
  bool has_unwind_error() const;
  void clear_unwind_error() ;
  ::perfetto::protos::Profiling_StackUnwindError unwind_error() const;
  void set_unwind_error(::perfetto::protos::Profiling_StackUnwindError value);

  private:
  ::perfetto::protos::Profiling_StackUnwindError _internal_unwind_error() const;
  void _internal_set_unwind_error(::perfetto::protos::Profiling_StackUnwindError value);

  public:
  // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
  bool has_sample_skipped_reason() const;
  void clear_sample_skipped_reason() ;
  ::perfetto::protos::PerfSample_SampleSkipReason sample_skipped_reason() const;
  void set_sample_skipped_reason(::perfetto::protos::PerfSample_SampleSkipReason value);

  private:
  ::perfetto::protos::PerfSample_SampleSkipReason _internal_sample_skipped_reason() const;
  void _internal_set_sample_skipped_reason(::perfetto::protos::PerfSample_SampleSkipReason value);

  public:
  void clear_optional_unwind_error();
  OptionalUnwindErrorCase optional_unwind_error_case() const;
  void clear_optional_sample_skipped_reason();
  OptionalSampleSkippedReasonCase optional_sample_skipped_reason_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfSample)
 private:
  class _Internal;
  void set_has_unwind_error();
  void set_has_sample_skipped_reason();

  inline bool has_optional_unwind_error() const;
  inline void clear_has_optional_unwind_error();

  inline bool has_optional_sample_skipped_reason() const;
  inline void clear_has_optional_sample_skipped_reason();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::PerfSample_ProducerEvent* producer_event_;
    ::uint32_t cpu_;
    ::uint32_t pid_;
    ::uint64_t callstack_iid_;
    ::uint32_t tid_;
    int cpu_mode_;
    ::uint64_t timebase_count_;
    ::uint64_t kernel_records_lost_;
    union OptionalUnwindErrorUnion {
      constexpr OptionalUnwindErrorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int unwind_error_;
    } optional_unwind_error_;
    union OptionalSampleSkippedReasonUnion {
      constexpr OptionalSampleSkippedReasonUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int sample_skipped_reason_;
    } optional_sample_skipped_reason_;
    ::uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};// -------------------------------------------------------------------

class PerfSampleDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfSampleDefaults) */ {
 public:
  inline PerfSampleDefaults() : PerfSampleDefaults(nullptr) {}
  ~PerfSampleDefaults() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfSampleDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfSampleDefaults(const PerfSampleDefaults& from);
  PerfSampleDefaults(PerfSampleDefaults&& from) noexcept
    : PerfSampleDefaults() {
    *this = ::std::move(from);
  }

  inline PerfSampleDefaults& operator=(const PerfSampleDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfSampleDefaults& operator=(PerfSampleDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfSampleDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfSampleDefaults* internal_default_instance() {
    return reinterpret_cast<const PerfSampleDefaults*>(
               &_PerfSampleDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PerfSampleDefaults& a, PerfSampleDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfSampleDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfSampleDefaults* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfSampleDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfSampleDefaults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfSampleDefaults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfSampleDefaults& from) {
    PerfSampleDefaults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfSampleDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfSampleDefaults";
  }
  protected:
  explicit PerfSampleDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimebaseFieldNumber = 1,
    kProcessShardCountFieldNumber = 2,
    kChosenProcessShardFieldNumber = 3,
  };
  // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
  bool has_timebase() const;
  void clear_timebase() ;
  const ::perfetto::protos::PerfEvents_Timebase& timebase() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfEvents_Timebase* release_timebase();
  ::perfetto::protos::PerfEvents_Timebase* mutable_timebase();
  void set_allocated_timebase(::perfetto::protos::PerfEvents_Timebase* timebase);
  private:
  const ::perfetto::protos::PerfEvents_Timebase& _internal_timebase() const;
  ::perfetto::protos::PerfEvents_Timebase* _internal_mutable_timebase();
  public:
  void unsafe_arena_set_allocated_timebase(
      ::perfetto::protos::PerfEvents_Timebase* timebase);
  ::perfetto::protos::PerfEvents_Timebase* unsafe_arena_release_timebase();
  // optional uint32 process_shard_count = 2;
  bool has_process_shard_count() const;
  void clear_process_shard_count() ;
  ::uint32_t process_shard_count() const;
  void set_process_shard_count(::uint32_t value);

  private:
  ::uint32_t _internal_process_shard_count() const;
  void _internal_set_process_shard_count(::uint32_t value);

  public:
  // optional uint32 chosen_process_shard = 3;
  bool has_chosen_process_shard() const;
  void clear_chosen_process_shard() ;
  ::uint32_t chosen_process_shard() const;
  void set_chosen_process_shard(::uint32_t value);

  private:
  ::uint32_t _internal_chosen_process_shard() const;
  void _internal_set_chosen_process_shard(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfSampleDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::PerfEvents_Timebase* timebase_;
    ::uint32_t process_shard_count_;
    ::uint32_t chosen_process_shard_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProfilePacket_HeapSample

// optional uint64 callstack_id = 1;
inline bool ProfilePacket_HeapSample::has_callstack_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_callstack_id() {
  _impl_.callstack_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ProfilePacket_HeapSample::callstack_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.callstack_id)
  return _internal_callstack_id();
}
inline void ProfilePacket_HeapSample::set_callstack_id(::uint64_t value) {
  _internal_set_callstack_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.callstack_id)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_callstack_id() const {
  return _impl_.callstack_id_;
}
inline void ProfilePacket_HeapSample::_internal_set_callstack_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.callstack_id_ = value;
}

// optional uint64 self_allocated = 2;
inline bool ProfilePacket_HeapSample::has_self_allocated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_self_allocated() {
  _impl_.self_allocated_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ProfilePacket_HeapSample::self_allocated() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_allocated)
  return _internal_self_allocated();
}
inline void ProfilePacket_HeapSample::set_self_allocated(::uint64_t value) {
  _internal_set_self_allocated(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_allocated)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_self_allocated() const {
  return _impl_.self_allocated_;
}
inline void ProfilePacket_HeapSample::_internal_set_self_allocated(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.self_allocated_ = value;
}

// optional uint64 self_freed = 3;
inline bool ProfilePacket_HeapSample::has_self_freed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_self_freed() {
  _impl_.self_freed_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ProfilePacket_HeapSample::self_freed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_freed)
  return _internal_self_freed();
}
inline void ProfilePacket_HeapSample::set_self_freed(::uint64_t value) {
  _internal_set_self_freed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_freed)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_self_freed() const {
  return _impl_.self_freed_;
}
inline void ProfilePacket_HeapSample::_internal_set_self_freed(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.self_freed_ = value;
}

// optional uint64 self_max = 8;
inline bool ProfilePacket_HeapSample::has_self_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_self_max() {
  _impl_.self_max_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t ProfilePacket_HeapSample::self_max() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_max)
  return _internal_self_max();
}
inline void ProfilePacket_HeapSample::set_self_max(::uint64_t value) {
  _internal_set_self_max(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_max)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_self_max() const {
  return _impl_.self_max_;
}
inline void ProfilePacket_HeapSample::_internal_set_self_max(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.self_max_ = value;
}

// optional uint64 self_max_count = 9;
inline bool ProfilePacket_HeapSample::has_self_max_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_self_max_count() {
  _impl_.self_max_count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t ProfilePacket_HeapSample::self_max_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.self_max_count)
  return _internal_self_max_count();
}
inline void ProfilePacket_HeapSample::set_self_max_count(::uint64_t value) {
  _internal_set_self_max_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.self_max_count)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_self_max_count() const {
  return _impl_.self_max_count_;
}
inline void ProfilePacket_HeapSample::_internal_set_self_max_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.self_max_count_ = value;
}

// optional uint64 timestamp = 4;
inline bool ProfilePacket_HeapSample::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t ProfilePacket_HeapSample::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.timestamp)
  return _internal_timestamp();
}
inline void ProfilePacket_HeapSample::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.timestamp)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void ProfilePacket_HeapSample::_internal_set_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.timestamp_ = value;
}

// optional uint64 alloc_count = 5;
inline bool ProfilePacket_HeapSample::has_alloc_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_alloc_count() {
  _impl_.alloc_count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t ProfilePacket_HeapSample::alloc_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.alloc_count)
  return _internal_alloc_count();
}
inline void ProfilePacket_HeapSample::set_alloc_count(::uint64_t value) {
  _internal_set_alloc_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.alloc_count)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_alloc_count() const {
  return _impl_.alloc_count_;
}
inline void ProfilePacket_HeapSample::_internal_set_alloc_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.alloc_count_ = value;
}

// optional uint64 free_count = 6;
inline bool ProfilePacket_HeapSample::has_free_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ProfilePacket_HeapSample::clear_free_count() {
  _impl_.free_count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t ProfilePacket_HeapSample::free_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.HeapSample.free_count)
  return _internal_free_count();
}
inline void ProfilePacket_HeapSample::set_free_count(::uint64_t value) {
  _internal_set_free_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.HeapSample.free_count)
}
inline ::uint64_t ProfilePacket_HeapSample::_internal_free_count() const {
  return _impl_.free_count_;
}
inline void ProfilePacket_HeapSample::_internal_set_free_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.free_count_ = value;
}

// -------------------------------------------------------------------

// ProfilePacket_Histogram_Bucket

// optional uint64 upper_limit = 1;
inline bool ProfilePacket_Histogram_Bucket::has_upper_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfilePacket_Histogram_Bucket::clear_upper_limit() {
  _impl_.upper_limit_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ProfilePacket_Histogram_Bucket::upper_limit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.Bucket.upper_limit)
  return _internal_upper_limit();
}
inline void ProfilePacket_Histogram_Bucket::set_upper_limit(::uint64_t value) {
  _internal_set_upper_limit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.Histogram.Bucket.upper_limit)
}
inline ::uint64_t ProfilePacket_Histogram_Bucket::_internal_upper_limit() const {
  return _impl_.upper_limit_;
}
inline void ProfilePacket_Histogram_Bucket::_internal_set_upper_limit(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.upper_limit_ = value;
}

// optional bool max_bucket = 2;
inline bool ProfilePacket_Histogram_Bucket::has_max_bucket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProfilePacket_Histogram_Bucket::clear_max_bucket() {
  _impl_.max_bucket_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ProfilePacket_Histogram_Bucket::max_bucket() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.Bucket.max_bucket)
  return _internal_max_bucket();
}
inline void ProfilePacket_Histogram_Bucket::set_max_bucket(bool value) {
  _internal_set_max_bucket(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.Histogram.Bucket.max_bucket)
}
inline bool ProfilePacket_Histogram_Bucket::_internal_max_bucket() const {
  return _impl_.max_bucket_;
}
inline void ProfilePacket_Histogram_Bucket::_internal_set_max_bucket(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_bucket_ = value;
}

// optional uint64 count = 3;
inline bool ProfilePacket_Histogram_Bucket::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProfilePacket_Histogram_Bucket::clear_count() {
  _impl_.count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ProfilePacket_Histogram_Bucket::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.Bucket.count)
  return _internal_count();
}
inline void ProfilePacket_Histogram_Bucket::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.Histogram.Bucket.count)
}
inline ::uint64_t ProfilePacket_Histogram_Bucket::_internal_count() const {
  return _impl_.count_;
}
inline void ProfilePacket_Histogram_Bucket::_internal_set_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// ProfilePacket_Histogram

// repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
inline int ProfilePacket_Histogram::_internal_buckets_size() const {
  return _impl_.buckets_.size();
}
inline int ProfilePacket_Histogram::buckets_size() const {
  return _internal_buckets_size();
}
inline void ProfilePacket_Histogram::clear_buckets() {
  _internal_mutable_buckets()->Clear();
}
inline ::perfetto::protos::ProfilePacket_Histogram_Bucket* ProfilePacket_Histogram::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.Histogram.buckets)
  return _internal_mutable_buckets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >*
ProfilePacket_Histogram::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.Histogram.buckets)
  return _internal_mutable_buckets();
}
inline const ::perfetto::protos::ProfilePacket_Histogram_Bucket& ProfilePacket_Histogram::_internal_buckets(int index) const {
  return _internal_buckets().Get(index);
}
inline const ::perfetto::protos::ProfilePacket_Histogram_Bucket& ProfilePacket_Histogram::buckets(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.Histogram.buckets)
  return _internal_buckets(index);
}
inline ::perfetto::protos::ProfilePacket_Histogram_Bucket* ProfilePacket_Histogram::_internal_add_buckets() {
  return _internal_mutable_buckets()->Add();
}
inline ::perfetto::protos::ProfilePacket_Histogram_Bucket* ProfilePacket_Histogram::add_buckets() {
  ::perfetto::protos::ProfilePacket_Histogram_Bucket* _add = _internal_add_buckets();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.Histogram.buckets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_Histogram_Bucket >&
ProfilePacket_Histogram::buckets() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.Histogram.buckets)
  return _internal_buckets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_Histogram_Bucket>&
ProfilePacket_Histogram::_internal_buckets() const {
  return _impl_.buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_Histogram_Bucket>*
ProfilePacket_Histogram::_internal_mutable_buckets() {
  return &_impl_.buckets_;
}

// -------------------------------------------------------------------

// ProfilePacket_ProcessStats

// optional uint64 unwinding_errors = 1;
inline bool ProfilePacket_ProcessStats::has_unwinding_errors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProfilePacket_ProcessStats::clear_unwinding_errors() {
  _impl_.unwinding_errors_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ProfilePacket_ProcessStats::unwinding_errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.unwinding_errors)
  return _internal_unwinding_errors();
}
inline void ProfilePacket_ProcessStats::set_unwinding_errors(::uint64_t value) {
  _internal_set_unwinding_errors(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.unwinding_errors)
}
inline ::uint64_t ProfilePacket_ProcessStats::_internal_unwinding_errors() const {
  return _impl_.unwinding_errors_;
}
inline void ProfilePacket_ProcessStats::_internal_set_unwinding_errors(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.unwinding_errors_ = value;
}

// optional uint64 heap_samples = 2;
inline bool ProfilePacket_ProcessStats::has_heap_samples() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProfilePacket_ProcessStats::clear_heap_samples() {
  _impl_.heap_samples_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ProfilePacket_ProcessStats::heap_samples() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.heap_samples)
  return _internal_heap_samples();
}
inline void ProfilePacket_ProcessStats::set_heap_samples(::uint64_t value) {
  _internal_set_heap_samples(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.heap_samples)
}
inline ::uint64_t ProfilePacket_ProcessStats::_internal_heap_samples() const {
  return _impl_.heap_samples_;
}
inline void ProfilePacket_ProcessStats::_internal_set_heap_samples(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.heap_samples_ = value;
}

// optional uint64 map_reparses = 3;
inline bool ProfilePacket_ProcessStats::has_map_reparses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProfilePacket_ProcessStats::clear_map_reparses() {
  _impl_.map_reparses_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t ProfilePacket_ProcessStats::map_reparses() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.map_reparses)
  return _internal_map_reparses();
}
inline void ProfilePacket_ProcessStats::set_map_reparses(::uint64_t value) {
  _internal_set_map_reparses(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.map_reparses)
}
inline ::uint64_t ProfilePacket_ProcessStats::_internal_map_reparses() const {
  return _impl_.map_reparses_;
}
inline void ProfilePacket_ProcessStats::_internal_set_map_reparses(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.map_reparses_ = value;
}

// optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
inline bool ProfilePacket_ProcessStats::has_unwinding_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unwinding_time_us_ != nullptr);
  return value;
}
inline void ProfilePacket_ProcessStats::clear_unwinding_time_us() {
  if (_impl_.unwinding_time_us_ != nullptr) _impl_.unwinding_time_us_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::ProfilePacket_Histogram& ProfilePacket_ProcessStats::_internal_unwinding_time_us() const {
  const ::perfetto::protos::ProfilePacket_Histogram* p = _impl_.unwinding_time_us_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProfilePacket_Histogram&>(
      ::perfetto::protos::_ProfilePacket_Histogram_default_instance_);
}
inline const ::perfetto::protos::ProfilePacket_Histogram& ProfilePacket_ProcessStats::unwinding_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
  return _internal_unwinding_time_us();
}
inline void ProfilePacket_ProcessStats::unsafe_arena_set_allocated_unwinding_time_us(
    ::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unwinding_time_us_);
  }
  _impl_.unwinding_time_us_ = unwinding_time_us;
  if (unwinding_time_us) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
}
inline ::perfetto::protos::ProfilePacket_Histogram* ProfilePacket_ProcessStats::release_unwinding_time_us() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ProfilePacket_Histogram* temp = _impl_.unwinding_time_us_;
  _impl_.unwinding_time_us_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ProfilePacket_Histogram* ProfilePacket_ProcessStats::unsafe_arena_release_unwinding_time_us() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ProfilePacket_Histogram* temp = _impl_.unwinding_time_us_;
  _impl_.unwinding_time_us_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProfilePacket_Histogram* ProfilePacket_ProcessStats::_internal_mutable_unwinding_time_us() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.unwinding_time_us_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProfilePacket_Histogram>(GetArenaForAllocation());
    _impl_.unwinding_time_us_ = p;
  }
  return _impl_.unwinding_time_us_;
}
inline ::perfetto::protos::ProfilePacket_Histogram* ProfilePacket_ProcessStats::mutable_unwinding_time_us() {
  ::perfetto::protos::ProfilePacket_Histogram* _msg = _internal_mutable_unwinding_time_us();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
  return _msg;
}
inline void ProfilePacket_ProcessStats::set_allocated_unwinding_time_us(::perfetto::protos::ProfilePacket_Histogram* unwinding_time_us) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unwinding_time_us_;
  }
  if (unwinding_time_us) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unwinding_time_us);
    if (message_arena != submessage_arena) {
      unwinding_time_us = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unwinding_time_us, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.unwinding_time_us_ = unwinding_time_us;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us)
}

// optional uint64 total_unwinding_time_us = 5;
inline bool ProfilePacket_ProcessStats::has_total_unwinding_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ProfilePacket_ProcessStats::clear_total_unwinding_time_us() {
  _impl_.total_unwinding_time_us_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t ProfilePacket_ProcessStats::total_unwinding_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.total_unwinding_time_us)
  return _internal_total_unwinding_time_us();
}
inline void ProfilePacket_ProcessStats::set_total_unwinding_time_us(::uint64_t value) {
  _internal_set_total_unwinding_time_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.total_unwinding_time_us)
}
inline ::uint64_t ProfilePacket_ProcessStats::_internal_total_unwinding_time_us() const {
  return _impl_.total_unwinding_time_us_;
}
inline void ProfilePacket_ProcessStats::_internal_set_total_unwinding_time_us(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_unwinding_time_us_ = value;
}

// optional uint64 client_spinlock_blocked_us = 6;
inline bool ProfilePacket_ProcessStats::has_client_spinlock_blocked_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ProfilePacket_ProcessStats::clear_client_spinlock_blocked_us() {
  _impl_.client_spinlock_blocked_us_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t ProfilePacket_ProcessStats::client_spinlock_blocked_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessStats.client_spinlock_blocked_us)
  return _internal_client_spinlock_blocked_us();
}
inline void ProfilePacket_ProcessStats::set_client_spinlock_blocked_us(::uint64_t value) {
  _internal_set_client_spinlock_blocked_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessStats.client_spinlock_blocked_us)
}
inline ::uint64_t ProfilePacket_ProcessStats::_internal_client_spinlock_blocked_us() const {
  return _impl_.client_spinlock_blocked_us_;
}
inline void ProfilePacket_ProcessStats::_internal_set_client_spinlock_blocked_us(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.client_spinlock_blocked_us_ = value;
}

// -------------------------------------------------------------------

// ProfilePacket_ProcessHeapSamples

// optional uint64 pid = 1;
inline bool ProfilePacket_ProcessHeapSamples::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_pid() {
  _impl_.pid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.pid)
  return _internal_pid();
}
inline void ProfilePacket_ProcessHeapSamples::set_pid(::uint64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.pid)
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::_internal_pid() const {
  return _impl_.pid_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_pid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// optional bool from_startup = 3;
inline bool ProfilePacket_ProcessHeapSamples::has_from_startup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_from_startup() {
  _impl_.from_startup_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ProfilePacket_ProcessHeapSamples::from_startup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.from_startup)
  return _internal_from_startup();
}
inline void ProfilePacket_ProcessHeapSamples::set_from_startup(bool value) {
  _internal_set_from_startup(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.from_startup)
}
inline bool ProfilePacket_ProcessHeapSamples::_internal_from_startup() const {
  return _impl_.from_startup_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_from_startup(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.from_startup_ = value;
}

// optional bool rejected_concurrent = 4;
inline bool ProfilePacket_ProcessHeapSamples::has_rejected_concurrent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_rejected_concurrent() {
  _impl_.rejected_concurrent_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ProfilePacket_ProcessHeapSamples::rejected_concurrent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.rejected_concurrent)
  return _internal_rejected_concurrent();
}
inline void ProfilePacket_ProcessHeapSamples::set_rejected_concurrent(bool value) {
  _internal_set_rejected_concurrent(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.rejected_concurrent)
}
inline bool ProfilePacket_ProcessHeapSamples::_internal_rejected_concurrent() const {
  return _impl_.rejected_concurrent_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_rejected_concurrent(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rejected_concurrent_ = value;
}

// optional bool disconnected = 6;
inline bool ProfilePacket_ProcessHeapSamples::has_disconnected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_disconnected() {
  _impl_.disconnected_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ProfilePacket_ProcessHeapSamples::disconnected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.disconnected)
  return _internal_disconnected();
}
inline void ProfilePacket_ProcessHeapSamples::set_disconnected(bool value) {
  _internal_set_disconnected(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.disconnected)
}
inline bool ProfilePacket_ProcessHeapSamples::_internal_disconnected() const {
  return _impl_.disconnected_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_disconnected(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.disconnected_ = value;
}

// optional bool buffer_overran = 7;
inline bool ProfilePacket_ProcessHeapSamples::has_buffer_overran() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_buffer_overran() {
  _impl_.buffer_overran_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ProfilePacket_ProcessHeapSamples::buffer_overran() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_overran)
  return _internal_buffer_overran();
}
inline void ProfilePacket_ProcessHeapSamples::set_buffer_overran(bool value) {
  _internal_set_buffer_overran(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_overran)
}
inline bool ProfilePacket_ProcessHeapSamples::_internal_buffer_overran() const {
  return _impl_.buffer_overran_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_buffer_overran(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.buffer_overran_ = value;
}

// optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
inline bool ProfilePacket_ProcessHeapSamples::has_client_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_client_error() {
  _impl_.client_error_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::client_error() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.client_error)
  return _internal_client_error();
}
inline void ProfilePacket_ProcessHeapSamples::set_client_error(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError value) {
   _internal_set_client_error(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.client_error)
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::_internal_client_error() const {
  return static_cast<::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError>(_impl_.client_error_);
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_client_error(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError value) {
  assert(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.client_error_ = value;
}

// optional bool buffer_corrupted = 8;
inline bool ProfilePacket_ProcessHeapSamples::has_buffer_corrupted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_buffer_corrupted() {
  _impl_.buffer_corrupted_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ProfilePacket_ProcessHeapSamples::buffer_corrupted() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_corrupted)
  return _internal_buffer_corrupted();
}
inline void ProfilePacket_ProcessHeapSamples::set_buffer_corrupted(bool value) {
  _internal_set_buffer_corrupted(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.buffer_corrupted)
}
inline bool ProfilePacket_ProcessHeapSamples::_internal_buffer_corrupted() const {
  return _impl_.buffer_corrupted_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_buffer_corrupted(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.buffer_corrupted_ = value;
}

// optional bool hit_guardrail = 10;
inline bool ProfilePacket_ProcessHeapSamples::has_hit_guardrail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_hit_guardrail() {
  _impl_.hit_guardrail_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ProfilePacket_ProcessHeapSamples::hit_guardrail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.hit_guardrail)
  return _internal_hit_guardrail();
}
inline void ProfilePacket_ProcessHeapSamples::set_hit_guardrail(bool value) {
  _internal_set_hit_guardrail(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.hit_guardrail)
}
inline bool ProfilePacket_ProcessHeapSamples::_internal_hit_guardrail() const {
  return _impl_.hit_guardrail_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_hit_guardrail(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.hit_guardrail_ = value;
}

// optional string heap_name = 11;
inline bool ProfilePacket_ProcessHeapSamples::has_heap_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_heap_name() {
  _impl_.heap_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilePacket_ProcessHeapSamples::heap_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
  return _internal_heap_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProfilePacket_ProcessHeapSamples::set_heap_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.heap_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}
inline std::string* ProfilePacket_ProcessHeapSamples::mutable_heap_name() {
  std::string* _s = _internal_mutable_heap_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
  return _s;
}
inline const std::string& ProfilePacket_ProcessHeapSamples::_internal_heap_name() const {
  return _impl_.heap_name_.Get();
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_heap_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.heap_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProfilePacket_ProcessHeapSamples::_internal_mutable_heap_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.heap_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ProfilePacket_ProcessHeapSamples::release_heap_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.heap_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.heap_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ProfilePacket_ProcessHeapSamples::set_allocated_heap_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.heap_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.heap_name_.IsDefault()) {
          _impl_.heap_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProfilePacket.ProcessHeapSamples.heap_name)
}

// optional uint64 sampling_interval_bytes = 12;
inline bool ProfilePacket_ProcessHeapSamples::has_sampling_interval_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_sampling_interval_bytes() {
  _impl_.sampling_interval_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.sampling_interval_bytes)
  return _internal_sampling_interval_bytes();
}
inline void ProfilePacket_ProcessHeapSamples::set_sampling_interval_bytes(::uint64_t value) {
  _internal_set_sampling_interval_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.sampling_interval_bytes)
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::_internal_sampling_interval_bytes() const {
  return _impl_.sampling_interval_bytes_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_sampling_interval_bytes(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.sampling_interval_bytes_ = value;
}

// optional uint64 orig_sampling_interval_bytes = 13;
inline bool ProfilePacket_ProcessHeapSamples::has_orig_sampling_interval_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_orig_sampling_interval_bytes() {
  _impl_.orig_sampling_interval_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::orig_sampling_interval_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.orig_sampling_interval_bytes)
  return _internal_orig_sampling_interval_bytes();
}
inline void ProfilePacket_ProcessHeapSamples::set_orig_sampling_interval_bytes(::uint64_t value) {
  _internal_set_orig_sampling_interval_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.orig_sampling_interval_bytes)
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::_internal_orig_sampling_interval_bytes() const {
  return _impl_.orig_sampling_interval_bytes_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_orig_sampling_interval_bytes(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.orig_sampling_interval_bytes_ = value;
}

// optional uint64 timestamp = 9;
inline bool ProfilePacket_ProcessHeapSamples::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.timestamp)
  return _internal_timestamp();
}
inline void ProfilePacket_ProcessHeapSamples::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.ProcessHeapSamples.timestamp)
}
inline ::uint64_t ProfilePacket_ProcessHeapSamples::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void ProfilePacket_ProcessHeapSamples::_internal_set_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.timestamp_ = value;
}

// optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
inline bool ProfilePacket_ProcessHeapSamples::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void ProfilePacket_ProcessHeapSamples::clear_stats() {
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::ProfilePacket_ProcessStats& ProfilePacket_ProcessHeapSamples::_internal_stats() const {
  const ::perfetto::protos::ProfilePacket_ProcessStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProfilePacket_ProcessStats&>(
      ::perfetto::protos::_ProfilePacket_ProcessStats_default_instance_);
}
inline const ::perfetto::protos::ProfilePacket_ProcessStats& ProfilePacket_ProcessHeapSamples::stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
  return _internal_stats();
}
inline void ProfilePacket_ProcessHeapSamples::unsafe_arena_set_allocated_stats(
    ::perfetto::protos::ProfilePacket_ProcessStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
}
inline ::perfetto::protos::ProfilePacket_ProcessStats* ProfilePacket_ProcessHeapSamples::release_stats() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ProfilePacket_ProcessStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ProfilePacket_ProcessStats* ProfilePacket_ProcessHeapSamples::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ProfilePacket_ProcessStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProfilePacket_ProcessStats* ProfilePacket_ProcessHeapSamples::_internal_mutable_stats() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProfilePacket_ProcessStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::perfetto::protos::ProfilePacket_ProcessStats* ProfilePacket_ProcessHeapSamples::mutable_stats() {
  ::perfetto::protos::ProfilePacket_ProcessStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
  return _msg;
}
inline void ProfilePacket_ProcessHeapSamples::set_allocated_stats(::perfetto::protos::ProfilePacket_ProcessStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProfilePacket.ProcessHeapSamples.stats)
}

// repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
inline int ProfilePacket_ProcessHeapSamples::_internal_samples_size() const {
  return _impl_.samples_.size();
}
inline int ProfilePacket_ProcessHeapSamples::samples_size() const {
  return _internal_samples_size();
}
inline void ProfilePacket_ProcessHeapSamples::clear_samples() {
  _internal_mutable_samples()->Clear();
}
inline ::perfetto::protos::ProfilePacket_HeapSample* ProfilePacket_ProcessHeapSamples::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >*
ProfilePacket_ProcessHeapSamples::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return _internal_mutable_samples();
}
inline const ::perfetto::protos::ProfilePacket_HeapSample& ProfilePacket_ProcessHeapSamples::_internal_samples(int index) const {
  return _internal_samples().Get(index);
}
inline const ::perfetto::protos::ProfilePacket_HeapSample& ProfilePacket_ProcessHeapSamples::samples(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return _internal_samples(index);
}
inline ::perfetto::protos::ProfilePacket_HeapSample* ProfilePacket_ProcessHeapSamples::_internal_add_samples() {
  return _internal_mutable_samples()->Add();
}
inline ::perfetto::protos::ProfilePacket_HeapSample* ProfilePacket_ProcessHeapSamples::add_samples() {
  ::perfetto::protos::ProfilePacket_HeapSample* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_HeapSample >&
ProfilePacket_ProcessHeapSamples::samples() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.ProcessHeapSamples.samples)
  return _internal_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_HeapSample>&
ProfilePacket_ProcessHeapSamples::_internal_samples() const {
  return _impl_.samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_HeapSample>*
ProfilePacket_ProcessHeapSamples::_internal_mutable_samples() {
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// ProfilePacket

// repeated .perfetto.protos.InternedString strings = 1;
inline int ProfilePacket::_internal_strings_size() const {
  return _impl_.strings_.size();
}
inline int ProfilePacket::strings_size() const {
  return _internal_strings_size();
}
inline ::perfetto::protos::InternedString* ProfilePacket::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.strings)
  return _internal_mutable_strings()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >*
ProfilePacket::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.strings)
  return _internal_mutable_strings();
}
inline const ::perfetto::protos::InternedString& ProfilePacket::_internal_strings(int index) const {
  return _internal_strings().Get(index);
}
inline const ::perfetto::protos::InternedString& ProfilePacket::strings(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.strings)
  return _internal_strings(index);
}
inline ::perfetto::protos::InternedString* ProfilePacket::_internal_add_strings() {
  return _internal_mutable_strings()->Add();
}
inline ::perfetto::protos::InternedString* ProfilePacket::add_strings() {
  ::perfetto::protos::InternedString* _add = _internal_add_strings();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.strings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InternedString >&
ProfilePacket::strings() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.strings)
  return _internal_strings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InternedString>&
ProfilePacket::_internal_strings() const {
  return _impl_.strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InternedString>*
ProfilePacket::_internal_mutable_strings() {
  return &_impl_.strings_;
}

// repeated .perfetto.protos.Mapping mappings = 4;
inline int ProfilePacket::_internal_mappings_size() const {
  return _impl_.mappings_.size();
}
inline int ProfilePacket::mappings_size() const {
  return _internal_mappings_size();
}
inline ::perfetto::protos::Mapping* ProfilePacket::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.mappings)
  return _internal_mutable_mappings()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >*
ProfilePacket::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.mappings)
  return _internal_mutable_mappings();
}
inline const ::perfetto::protos::Mapping& ProfilePacket::_internal_mappings(int index) const {
  return _internal_mappings().Get(index);
}
inline const ::perfetto::protos::Mapping& ProfilePacket::mappings(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.mappings)
  return _internal_mappings(index);
}
inline ::perfetto::protos::Mapping* ProfilePacket::_internal_add_mappings() {
  return _internal_mutable_mappings()->Add();
}
inline ::perfetto::protos::Mapping* ProfilePacket::add_mappings() {
  ::perfetto::protos::Mapping* _add = _internal_add_mappings();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.mappings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Mapping >&
ProfilePacket::mappings() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.mappings)
  return _internal_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Mapping>&
ProfilePacket::_internal_mappings() const {
  return _impl_.mappings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Mapping>*
ProfilePacket::_internal_mutable_mappings() {
  return &_impl_.mappings_;
}

// repeated .perfetto.protos.Frame frames = 2;
inline int ProfilePacket::_internal_frames_size() const {
  return _impl_.frames_.size();
}
inline int ProfilePacket::frames_size() const {
  return _internal_frames_size();
}
inline ::perfetto::protos::Frame* ProfilePacket::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.frames)
  return _internal_mutable_frames()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >*
ProfilePacket::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.frames)
  return _internal_mutable_frames();
}
inline const ::perfetto::protos::Frame& ProfilePacket::_internal_frames(int index) const {
  return _internal_frames().Get(index);
}
inline const ::perfetto::protos::Frame& ProfilePacket::frames(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.frames)
  return _internal_frames(index);
}
inline ::perfetto::protos::Frame* ProfilePacket::_internal_add_frames() {
  return _internal_mutable_frames()->Add();
}
inline ::perfetto::protos::Frame* ProfilePacket::add_frames() {
  ::perfetto::protos::Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Frame >&
ProfilePacket::frames() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.frames)
  return _internal_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Frame>&
ProfilePacket::_internal_frames() const {
  return _impl_.frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Frame>*
ProfilePacket::_internal_mutable_frames() {
  return &_impl_.frames_;
}

// repeated .perfetto.protos.Callstack callstacks = 3;
inline int ProfilePacket::_internal_callstacks_size() const {
  return _impl_.callstacks_.size();
}
inline int ProfilePacket::callstacks_size() const {
  return _internal_callstacks_size();
}
inline ::perfetto::protos::Callstack* ProfilePacket::mutable_callstacks(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.callstacks)
  return _internal_mutable_callstacks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >*
ProfilePacket::mutable_callstacks() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.callstacks)
  return _internal_mutable_callstacks();
}
inline const ::perfetto::protos::Callstack& ProfilePacket::_internal_callstacks(int index) const {
  return _internal_callstacks().Get(index);
}
inline const ::perfetto::protos::Callstack& ProfilePacket::callstacks(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.callstacks)
  return _internal_callstacks(index);
}
inline ::perfetto::protos::Callstack* ProfilePacket::_internal_add_callstacks() {
  return _internal_mutable_callstacks()->Add();
}
inline ::perfetto::protos::Callstack* ProfilePacket::add_callstacks() {
  ::perfetto::protos::Callstack* _add = _internal_add_callstacks();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.callstacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::Callstack >&
ProfilePacket::callstacks() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.callstacks)
  return _internal_callstacks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Callstack>&
ProfilePacket::_internal_callstacks() const {
  return _impl_.callstacks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::Callstack>*
ProfilePacket::_internal_mutable_callstacks() {
  return &_impl_.callstacks_;
}

// repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
inline int ProfilePacket::_internal_process_dumps_size() const {
  return _impl_.process_dumps_.size();
}
inline int ProfilePacket::process_dumps_size() const {
  return _internal_process_dumps_size();
}
inline void ProfilePacket::clear_process_dumps() {
  _internal_mutable_process_dumps()->Clear();
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples* ProfilePacket::mutable_process_dumps(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProfilePacket.process_dumps)
  return _internal_mutable_process_dumps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >*
ProfilePacket::mutable_process_dumps() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProfilePacket.process_dumps)
  return _internal_mutable_process_dumps();
}
inline const ::perfetto::protos::ProfilePacket_ProcessHeapSamples& ProfilePacket::_internal_process_dumps(int index) const {
  return _internal_process_dumps().Get(index);
}
inline const ::perfetto::protos::ProfilePacket_ProcessHeapSamples& ProfilePacket::process_dumps(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.process_dumps)
  return _internal_process_dumps(index);
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples* ProfilePacket::_internal_add_process_dumps() {
  return _internal_mutable_process_dumps()->Add();
}
inline ::perfetto::protos::ProfilePacket_ProcessHeapSamples* ProfilePacket::add_process_dumps() {
  ::perfetto::protos::ProfilePacket_ProcessHeapSamples* _add = _internal_add_process_dumps();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProfilePacket.process_dumps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >&
ProfilePacket::process_dumps() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProfilePacket.process_dumps)
  return _internal_process_dumps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_ProcessHeapSamples>&
ProfilePacket::_internal_process_dumps() const {
  return _impl_.process_dumps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProfilePacket_ProcessHeapSamples>*
ProfilePacket::_internal_mutable_process_dumps() {
  return &_impl_.process_dumps_;
}

// optional bool continued = 6;
inline bool ProfilePacket::has_continued() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProfilePacket::clear_continued() {
  _impl_.continued_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ProfilePacket::continued() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.continued)
  return _internal_continued();
}
inline void ProfilePacket::set_continued(bool value) {
  _internal_set_continued(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.continued)
}
inline bool ProfilePacket::_internal_continued() const {
  return _impl_.continued_;
}
inline void ProfilePacket::_internal_set_continued(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.continued_ = value;
}

// optional uint64 index = 7;
inline bool ProfilePacket::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProfilePacket::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ProfilePacket::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProfilePacket.index)
  return _internal_index();
}
inline void ProfilePacket::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProfilePacket.index)
}
inline ::uint64_t ProfilePacket::_internal_index() const {
  return _impl_.index_;
}
inline void ProfilePacket::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// StreamingAllocation

// repeated uint64 address = 1;
inline int StreamingAllocation::_internal_address_size() const {
  return _impl_.address_.size();
}
inline int StreamingAllocation::address_size() const {
  return _internal_address_size();
}
inline void StreamingAllocation::clear_address() {
  _internal_mutable_address()->Clear();
}
inline ::uint64_t StreamingAllocation::address(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.address)
  return _internal_address(index);
}
inline void StreamingAllocation::set_address(int index, ::uint64_t value) {
  _internal_mutable_address()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.address)
}
inline void StreamingAllocation::add_address(::uint64_t value) {
  _internal_add_address(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::address() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.address)
  return _internal_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.address)
  return _internal_mutable_address();
}

inline ::uint64_t StreamingAllocation::_internal_address(int index) const {
  return _internal_address().Get(index);
}
inline void StreamingAllocation::_internal_add_address(::uint64_t value) {
  _internal_mutable_address()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::_internal_address() const {
  return _impl_.address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::_internal_mutable_address() {
  return &_impl_.address_;
}

// repeated uint64 size = 2;
inline int StreamingAllocation::_internal_size_size() const {
  return _impl_.size_.size();
}
inline int StreamingAllocation::size_size() const {
  return _internal_size_size();
}
inline void StreamingAllocation::clear_size() {
  _internal_mutable_size()->Clear();
}
inline ::uint64_t StreamingAllocation::size(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.size)
  return _internal_size(index);
}
inline void StreamingAllocation::set_size(int index, ::uint64_t value) {
  _internal_mutable_size()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.size)
}
inline void StreamingAllocation::add_size(::uint64_t value) {
  _internal_add_size(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::size() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.size)
  return _internal_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.size)
  return _internal_mutable_size();
}

inline ::uint64_t StreamingAllocation::_internal_size(int index) const {
  return _internal_size().Get(index);
}
inline void StreamingAllocation::_internal_add_size(::uint64_t value) {
  _internal_mutable_size()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::_internal_size() const {
  return _impl_.size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::_internal_mutable_size() {
  return &_impl_.size_;
}

// repeated uint64 sample_size = 3;
inline int StreamingAllocation::_internal_sample_size_size() const {
  return _impl_.sample_size_.size();
}
inline int StreamingAllocation::sample_size_size() const {
  return _internal_sample_size_size();
}
inline void StreamingAllocation::clear_sample_size() {
  _internal_mutable_sample_size()->Clear();
}
inline ::uint64_t StreamingAllocation::sample_size(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.sample_size)
  return _internal_sample_size(index);
}
inline void StreamingAllocation::set_sample_size(int index, ::uint64_t value) {
  _internal_mutable_sample_size()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.sample_size)
}
inline void StreamingAllocation::add_sample_size(::uint64_t value) {
  _internal_add_sample_size(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.sample_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::sample_size() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.sample_size)
  return _internal_sample_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::mutable_sample_size() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.sample_size)
  return _internal_mutable_sample_size();
}

inline ::uint64_t StreamingAllocation::_internal_sample_size(int index) const {
  return _internal_sample_size().Get(index);
}
inline void StreamingAllocation::_internal_add_sample_size(::uint64_t value) {
  _internal_mutable_sample_size()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::_internal_sample_size() const {
  return _impl_.sample_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::_internal_mutable_sample_size() {
  return &_impl_.sample_size_;
}

// repeated uint64 clock_monotonic_coarse_timestamp = 4;
inline int StreamingAllocation::_internal_clock_monotonic_coarse_timestamp_size() const {
  return _impl_.clock_monotonic_coarse_timestamp_.size();
}
inline int StreamingAllocation::clock_monotonic_coarse_timestamp_size() const {
  return _internal_clock_monotonic_coarse_timestamp_size();
}
inline void StreamingAllocation::clear_clock_monotonic_coarse_timestamp() {
  _internal_mutable_clock_monotonic_coarse_timestamp()->Clear();
}
inline ::uint64_t StreamingAllocation::clock_monotonic_coarse_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
  return _internal_clock_monotonic_coarse_timestamp(index);
}
inline void StreamingAllocation::set_clock_monotonic_coarse_timestamp(int index, ::uint64_t value) {
  _internal_mutable_clock_monotonic_coarse_timestamp()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
}
inline void StreamingAllocation::add_clock_monotonic_coarse_timestamp(::uint64_t value) {
  _internal_add_clock_monotonic_coarse_timestamp(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::clock_monotonic_coarse_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
  return _internal_clock_monotonic_coarse_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::mutable_clock_monotonic_coarse_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.clock_monotonic_coarse_timestamp)
  return _internal_mutable_clock_monotonic_coarse_timestamp();
}

inline ::uint64_t StreamingAllocation::_internal_clock_monotonic_coarse_timestamp(int index) const {
  return _internal_clock_monotonic_coarse_timestamp().Get(index);
}
inline void StreamingAllocation::_internal_add_clock_monotonic_coarse_timestamp(::uint64_t value) {
  _internal_mutable_clock_monotonic_coarse_timestamp()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::_internal_clock_monotonic_coarse_timestamp() const {
  return _impl_.clock_monotonic_coarse_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::_internal_mutable_clock_monotonic_coarse_timestamp() {
  return &_impl_.clock_monotonic_coarse_timestamp_;
}

// repeated uint32 heap_id = 5;
inline int StreamingAllocation::_internal_heap_id_size() const {
  return _impl_.heap_id_.size();
}
inline int StreamingAllocation::heap_id_size() const {
  return _internal_heap_id_size();
}
inline void StreamingAllocation::clear_heap_id() {
  _internal_mutable_heap_id()->Clear();
}
inline ::uint32_t StreamingAllocation::heap_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.heap_id)
  return _internal_heap_id(index);
}
inline void StreamingAllocation::set_heap_id(int index, ::uint32_t value) {
  _internal_mutable_heap_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.heap_id)
}
inline void StreamingAllocation::add_heap_id(::uint32_t value) {
  _internal_add_heap_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.heap_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& StreamingAllocation::heap_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.heap_id)
  return _internal_heap_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* StreamingAllocation::mutable_heap_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.heap_id)
  return _internal_mutable_heap_id();
}

inline ::uint32_t StreamingAllocation::_internal_heap_id(int index) const {
  return _internal_heap_id().Get(index);
}
inline void StreamingAllocation::_internal_add_heap_id(::uint32_t value) {
  _internal_mutable_heap_id()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& StreamingAllocation::_internal_heap_id() const {
  return _impl_.heap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* StreamingAllocation::_internal_mutable_heap_id() {
  return &_impl_.heap_id_;
}

// repeated uint64 sequence_number = 6;
inline int StreamingAllocation::_internal_sequence_number_size() const {
  return _impl_.sequence_number_.size();
}
inline int StreamingAllocation::sequence_number_size() const {
  return _internal_sequence_number_size();
}
inline void StreamingAllocation::clear_sequence_number() {
  _internal_mutable_sequence_number()->Clear();
}
inline ::uint64_t StreamingAllocation::sequence_number(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingAllocation.sequence_number)
  return _internal_sequence_number(index);
}
inline void StreamingAllocation::set_sequence_number(int index, ::uint64_t value) {
  _internal_mutable_sequence_number()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingAllocation.sequence_number)
}
inline void StreamingAllocation::add_sequence_number(::uint64_t value) {
  _internal_add_sequence_number(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingAllocation.sequence_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::sequence_number() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingAllocation.sequence_number)
  return _internal_sequence_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingAllocation.sequence_number)
  return _internal_mutable_sequence_number();
}

inline ::uint64_t StreamingAllocation::_internal_sequence_number(int index) const {
  return _internal_sequence_number().Get(index);
}
inline void StreamingAllocation::_internal_add_sequence_number(::uint64_t value) {
  _internal_mutable_sequence_number()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingAllocation::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingAllocation::_internal_mutable_sequence_number() {
  return &_impl_.sequence_number_;
}

// -------------------------------------------------------------------

// StreamingFree

// repeated uint64 address = 1;
inline int StreamingFree::_internal_address_size() const {
  return _impl_.address_.size();
}
inline int StreamingFree::address_size() const {
  return _internal_address_size();
}
inline void StreamingFree::clear_address() {
  _internal_mutable_address()->Clear();
}
inline ::uint64_t StreamingFree::address(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingFree.address)
  return _internal_address(index);
}
inline void StreamingFree::set_address(int index, ::uint64_t value) {
  _internal_mutable_address()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingFree.address)
}
inline void StreamingFree::add_address(::uint64_t value) {
  _internal_add_address(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingFree.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingFree::address() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingFree.address)
  return _internal_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingFree::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingFree.address)
  return _internal_mutable_address();
}

inline ::uint64_t StreamingFree::_internal_address(int index) const {
  return _internal_address().Get(index);
}
inline void StreamingFree::_internal_add_address(::uint64_t value) {
  _internal_mutable_address()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingFree::_internal_address() const {
  return _impl_.address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingFree::_internal_mutable_address() {
  return &_impl_.address_;
}

// repeated uint32 heap_id = 2;
inline int StreamingFree::_internal_heap_id_size() const {
  return _impl_.heap_id_.size();
}
inline int StreamingFree::heap_id_size() const {
  return _internal_heap_id_size();
}
inline void StreamingFree::clear_heap_id() {
  _internal_mutable_heap_id()->Clear();
}
inline ::uint32_t StreamingFree::heap_id(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingFree.heap_id)
  return _internal_heap_id(index);
}
inline void StreamingFree::set_heap_id(int index, ::uint32_t value) {
  _internal_mutable_heap_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingFree.heap_id)
}
inline void StreamingFree::add_heap_id(::uint32_t value) {
  _internal_add_heap_id(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingFree.heap_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& StreamingFree::heap_id() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingFree.heap_id)
  return _internal_heap_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* StreamingFree::mutable_heap_id() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingFree.heap_id)
  return _internal_mutable_heap_id();
}

inline ::uint32_t StreamingFree::_internal_heap_id(int index) const {
  return _internal_heap_id().Get(index);
}
inline void StreamingFree::_internal_add_heap_id(::uint32_t value) {
  _internal_mutable_heap_id()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& StreamingFree::_internal_heap_id() const {
  return _impl_.heap_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* StreamingFree::_internal_mutable_heap_id() {
  return &_impl_.heap_id_;
}

// repeated uint64 sequence_number = 3;
inline int StreamingFree::_internal_sequence_number_size() const {
  return _impl_.sequence_number_.size();
}
inline int StreamingFree::sequence_number_size() const {
  return _internal_sequence_number_size();
}
inline void StreamingFree::clear_sequence_number() {
  _internal_mutable_sequence_number()->Clear();
}
inline ::uint64_t StreamingFree::sequence_number(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingFree.sequence_number)
  return _internal_sequence_number(index);
}
inline void StreamingFree::set_sequence_number(int index, ::uint64_t value) {
  _internal_mutable_sequence_number()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingFree.sequence_number)
}
inline void StreamingFree::add_sequence_number(::uint64_t value) {
  _internal_add_sequence_number(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingFree.sequence_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingFree::sequence_number() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingFree.sequence_number)
  return _internal_sequence_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingFree::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingFree.sequence_number)
  return _internal_mutable_sequence_number();
}

inline ::uint64_t StreamingFree::_internal_sequence_number(int index) const {
  return _internal_sequence_number().Get(index);
}
inline void StreamingFree::_internal_add_sequence_number(::uint64_t value) {
  _internal_mutable_sequence_number()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingFree::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingFree::_internal_mutable_sequence_number() {
  return &_impl_.sequence_number_;
}

// -------------------------------------------------------------------

// StreamingProfilePacket

// repeated uint64 callstack_iid = 1;
inline int StreamingProfilePacket::_internal_callstack_iid_size() const {
  return _impl_.callstack_iid_.size();
}
inline int StreamingProfilePacket::callstack_iid_size() const {
  return _internal_callstack_iid_size();
}
inline void StreamingProfilePacket::clear_callstack_iid() {
  _internal_mutable_callstack_iid()->Clear();
}
inline ::uint64_t StreamingProfilePacket::callstack_iid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingProfilePacket.callstack_iid)
  return _internal_callstack_iid(index);
}
inline void StreamingProfilePacket::set_callstack_iid(int index, ::uint64_t value) {
  _internal_mutable_callstack_iid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingProfilePacket.callstack_iid)
}
inline void StreamingProfilePacket::add_callstack_iid(::uint64_t value) {
  _internal_add_callstack_iid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingProfilePacket.callstack_iid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingProfilePacket::callstack_iid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingProfilePacket.callstack_iid)
  return _internal_callstack_iid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingProfilePacket::mutable_callstack_iid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingProfilePacket.callstack_iid)
  return _internal_mutable_callstack_iid();
}

inline ::uint64_t StreamingProfilePacket::_internal_callstack_iid(int index) const {
  return _internal_callstack_iid().Get(index);
}
inline void StreamingProfilePacket::_internal_add_callstack_iid(::uint64_t value) {
  _internal_mutable_callstack_iid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& StreamingProfilePacket::_internal_callstack_iid() const {
  return _impl_.callstack_iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* StreamingProfilePacket::_internal_mutable_callstack_iid() {
  return &_impl_.callstack_iid_;
}

// repeated int64 timestamp_delta_us = 2;
inline int StreamingProfilePacket::_internal_timestamp_delta_us_size() const {
  return _impl_.timestamp_delta_us_.size();
}
inline int StreamingProfilePacket::timestamp_delta_us_size() const {
  return _internal_timestamp_delta_us_size();
}
inline void StreamingProfilePacket::clear_timestamp_delta_us() {
  _internal_mutable_timestamp_delta_us()->Clear();
}
inline ::int64_t StreamingProfilePacket::timestamp_delta_us(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
  return _internal_timestamp_delta_us(index);
}
inline void StreamingProfilePacket::set_timestamp_delta_us(int index, ::int64_t value) {
  _internal_mutable_timestamp_delta_us()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
}
inline void StreamingProfilePacket::add_timestamp_delta_us(::int64_t value) {
  _internal_add_timestamp_delta_us(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& StreamingProfilePacket::timestamp_delta_us() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
  return _internal_timestamp_delta_us();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* StreamingProfilePacket::mutable_timestamp_delta_us() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.StreamingProfilePacket.timestamp_delta_us)
  return _internal_mutable_timestamp_delta_us();
}

inline ::int64_t StreamingProfilePacket::_internal_timestamp_delta_us(int index) const {
  return _internal_timestamp_delta_us().Get(index);
}
inline void StreamingProfilePacket::_internal_add_timestamp_delta_us(::int64_t value) {
  _internal_mutable_timestamp_delta_us()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& StreamingProfilePacket::_internal_timestamp_delta_us() const {
  return _impl_.timestamp_delta_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* StreamingProfilePacket::_internal_mutable_timestamp_delta_us() {
  return &_impl_.timestamp_delta_us_;
}

// optional int32 process_priority = 3;
inline bool StreamingProfilePacket::has_process_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StreamingProfilePacket::clear_process_priority() {
  _impl_.process_priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t StreamingProfilePacket::process_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.StreamingProfilePacket.process_priority)
  return _internal_process_priority();
}
inline void StreamingProfilePacket::set_process_priority(::int32_t value) {
  _internal_set_process_priority(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.StreamingProfilePacket.process_priority)
}
inline ::int32_t StreamingProfilePacket::_internal_process_priority() const {
  return _impl_.process_priority_;
}
inline void StreamingProfilePacket::_internal_set_process_priority(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.process_priority_ = value;
}

// -------------------------------------------------------------------

// Profiling

// -------------------------------------------------------------------

// PerfSample_ProducerEvent

// .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
inline bool PerfSample_ProducerEvent::has_source_stop_reason() const {
  return optional_source_stop_reason_case() == kSourceStopReason;
}
inline void PerfSample_ProducerEvent::set_has_source_stop_reason() {
  _impl_._oneof_case_[0] = kSourceStopReason;
}
inline void PerfSample_ProducerEvent::clear_source_stop_reason() {
  if (optional_source_stop_reason_case() == kSourceStopReason) {
    _impl_.optional_source_stop_reason_.source_stop_reason_ = 0;
    clear_has_optional_source_stop_reason();
  }
}
inline ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::source_stop_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.ProducerEvent.source_stop_reason)
  return _internal_source_stop_reason();
}
inline void PerfSample_ProducerEvent::set_source_stop_reason(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason value) {
   _internal_set_source_stop_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.ProducerEvent.source_stop_reason)
}
inline ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::_internal_source_stop_reason() const {
  if (optional_source_stop_reason_case() == kSourceStopReason) {
    return static_cast<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason>(_impl_.optional_source_stop_reason_.source_stop_reason_);
  }
  return static_cast<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason>(0);
}
inline void PerfSample_ProducerEvent::_internal_set_source_stop_reason(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason value) {
  assert(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason_IsValid(value));
  if (optional_source_stop_reason_case() != kSourceStopReason) {
    clear_optional_source_stop_reason();
    set_has_source_stop_reason();
  }
  _impl_.optional_source_stop_reason_.source_stop_reason_ = value;
}

inline bool PerfSample_ProducerEvent::has_optional_source_stop_reason() const {
  return optional_source_stop_reason_case() != OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}
inline void PerfSample_ProducerEvent::clear_has_optional_source_stop_reason() {
  _impl_._oneof_case_[0] = OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}
inline PerfSample_ProducerEvent::OptionalSourceStopReasonCase PerfSample_ProducerEvent::optional_source_stop_reason_case() const {
  return PerfSample_ProducerEvent::OptionalSourceStopReasonCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PerfSample

// optional uint32 cpu = 1;
inline bool PerfSample::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PerfSample::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PerfSample::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.cpu)
  return _internal_cpu();
}
inline void PerfSample::set_cpu(::uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.cpu)
}
inline ::uint32_t PerfSample::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void PerfSample::_internal_set_cpu(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_ = value;
}

// optional uint32 pid = 2;
inline bool PerfSample::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PerfSample::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PerfSample::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.pid)
  return _internal_pid();
}
inline void PerfSample::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.pid)
}
inline ::uint32_t PerfSample::_internal_pid() const {
  return _impl_.pid_;
}
inline void PerfSample::_internal_set_pid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// optional uint32 tid = 3;
inline bool PerfSample::has_tid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PerfSample::clear_tid() {
  _impl_.tid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t PerfSample::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.tid)
  return _internal_tid();
}
inline void PerfSample::set_tid(::uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.tid)
}
inline ::uint32_t PerfSample::_internal_tid() const {
  return _impl_.tid_;
}
inline void PerfSample::_internal_set_tid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tid_ = value;
}

// optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
inline bool PerfSample::has_cpu_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PerfSample::clear_cpu_mode() {
  _impl_.cpu_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::perfetto::protos::Profiling_CpuMode PerfSample::cpu_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.cpu_mode)
  return _internal_cpu_mode();
}
inline void PerfSample::set_cpu_mode(::perfetto::protos::Profiling_CpuMode value) {
   _internal_set_cpu_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.cpu_mode)
}
inline ::perfetto::protos::Profiling_CpuMode PerfSample::_internal_cpu_mode() const {
  return static_cast<::perfetto::protos::Profiling_CpuMode>(_impl_.cpu_mode_);
}
inline void PerfSample::_internal_set_cpu_mode(::perfetto::protos::Profiling_CpuMode value) {
  assert(::perfetto::protos::Profiling_CpuMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cpu_mode_ = value;
}

// optional uint64 timebase_count = 6;
inline bool PerfSample::has_timebase_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PerfSample::clear_timebase_count() {
  _impl_.timebase_count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t PerfSample::timebase_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.timebase_count)
  return _internal_timebase_count();
}
inline void PerfSample::set_timebase_count(::uint64_t value) {
  _internal_set_timebase_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.timebase_count)
}
inline ::uint64_t PerfSample::_internal_timebase_count() const {
  return _impl_.timebase_count_;
}
inline void PerfSample::_internal_set_timebase_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.timebase_count_ = value;
}

// optional uint64 callstack_iid = 4;
inline bool PerfSample::has_callstack_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PerfSample::clear_callstack_iid() {
  _impl_.callstack_iid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t PerfSample::callstack_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.callstack_iid)
  return _internal_callstack_iid();
}
inline void PerfSample::set_callstack_iid(::uint64_t value) {
  _internal_set_callstack_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.callstack_iid)
}
inline ::uint64_t PerfSample::_internal_callstack_iid() const {
  return _impl_.callstack_iid_;
}
inline void PerfSample::_internal_set_callstack_iid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.callstack_iid_ = value;
}

// .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
inline bool PerfSample::has_unwind_error() const {
  return optional_unwind_error_case() == kUnwindError;
}
inline void PerfSample::set_has_unwind_error() {
  _impl_._oneof_case_[0] = kUnwindError;
}
inline void PerfSample::clear_unwind_error() {
  if (optional_unwind_error_case() == kUnwindError) {
    _impl_.optional_unwind_error_.unwind_error_ = 0;
    clear_has_optional_unwind_error();
  }
}
inline ::perfetto::protos::Profiling_StackUnwindError PerfSample::unwind_error() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.unwind_error)
  return _internal_unwind_error();
}
inline void PerfSample::set_unwind_error(::perfetto::protos::Profiling_StackUnwindError value) {
   _internal_set_unwind_error(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.unwind_error)
}
inline ::perfetto::protos::Profiling_StackUnwindError PerfSample::_internal_unwind_error() const {
  if (optional_unwind_error_case() == kUnwindError) {
    return static_cast<::perfetto::protos::Profiling_StackUnwindError>(_impl_.optional_unwind_error_.unwind_error_);
  }
  return static_cast<::perfetto::protos::Profiling_StackUnwindError>(0);
}
inline void PerfSample::_internal_set_unwind_error(::perfetto::protos::Profiling_StackUnwindError value) {
  assert(::perfetto::protos::Profiling_StackUnwindError_IsValid(value));
  if (optional_unwind_error_case() != kUnwindError) {
    clear_optional_unwind_error();
    set_has_unwind_error();
  }
  _impl_.optional_unwind_error_.unwind_error_ = value;
}

// optional uint64 kernel_records_lost = 17;
inline bool PerfSample::has_kernel_records_lost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PerfSample::clear_kernel_records_lost() {
  _impl_.kernel_records_lost_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t PerfSample::kernel_records_lost() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.kernel_records_lost)
  return _internal_kernel_records_lost();
}
inline void PerfSample::set_kernel_records_lost(::uint64_t value) {
  _internal_set_kernel_records_lost(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.kernel_records_lost)
}
inline ::uint64_t PerfSample::_internal_kernel_records_lost() const {
  return _impl_.kernel_records_lost_;
}
inline void PerfSample::_internal_set_kernel_records_lost(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.kernel_records_lost_ = value;
}

// .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
inline bool PerfSample::has_sample_skipped_reason() const {
  return optional_sample_skipped_reason_case() == kSampleSkippedReason;
}
inline void PerfSample::set_has_sample_skipped_reason() {
  _impl_._oneof_case_[1] = kSampleSkippedReason;
}
inline void PerfSample::clear_sample_skipped_reason() {
  if (optional_sample_skipped_reason_case() == kSampleSkippedReason) {
    _impl_.optional_sample_skipped_reason_.sample_skipped_reason_ = 0;
    clear_has_optional_sample_skipped_reason();
  }
}
inline ::perfetto::protos::PerfSample_SampleSkipReason PerfSample::sample_skipped_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.sample_skipped_reason)
  return _internal_sample_skipped_reason();
}
inline void PerfSample::set_sample_skipped_reason(::perfetto::protos::PerfSample_SampleSkipReason value) {
   _internal_set_sample_skipped_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSample.sample_skipped_reason)
}
inline ::perfetto::protos::PerfSample_SampleSkipReason PerfSample::_internal_sample_skipped_reason() const {
  if (optional_sample_skipped_reason_case() == kSampleSkippedReason) {
    return static_cast<::perfetto::protos::PerfSample_SampleSkipReason>(_impl_.optional_sample_skipped_reason_.sample_skipped_reason_);
  }
  return static_cast<::perfetto::protos::PerfSample_SampleSkipReason>(0);
}
inline void PerfSample::_internal_set_sample_skipped_reason(::perfetto::protos::PerfSample_SampleSkipReason value) {
  assert(::perfetto::protos::PerfSample_SampleSkipReason_IsValid(value));
  if (optional_sample_skipped_reason_case() != kSampleSkippedReason) {
    clear_optional_sample_skipped_reason();
    set_has_sample_skipped_reason();
  }
  _impl_.optional_sample_skipped_reason_.sample_skipped_reason_ = value;
}

// optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
inline bool PerfSample::has_producer_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.producer_event_ != nullptr);
  return value;
}
inline void PerfSample::clear_producer_event() {
  if (_impl_.producer_event_ != nullptr) _impl_.producer_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::PerfSample_ProducerEvent& PerfSample::_internal_producer_event() const {
  const ::perfetto::protos::PerfSample_ProducerEvent* p = _impl_.producer_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PerfSample_ProducerEvent&>(
      ::perfetto::protos::_PerfSample_ProducerEvent_default_instance_);
}
inline const ::perfetto::protos::PerfSample_ProducerEvent& PerfSample::producer_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSample.producer_event)
  return _internal_producer_event();
}
inline void PerfSample::unsafe_arena_set_allocated_producer_event(
    ::perfetto::protos::PerfSample_ProducerEvent* producer_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producer_event_);
  }
  _impl_.producer_event_ = producer_event;
  if (producer_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.PerfSample.producer_event)
}
inline ::perfetto::protos::PerfSample_ProducerEvent* PerfSample::release_producer_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfSample_ProducerEvent* temp = _impl_.producer_event_;
  _impl_.producer_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PerfSample_ProducerEvent* PerfSample::unsafe_arena_release_producer_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfSample.producer_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfSample_ProducerEvent* temp = _impl_.producer_event_;
  _impl_.producer_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfSample_ProducerEvent* PerfSample::_internal_mutable_producer_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.producer_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfSample_ProducerEvent>(GetArenaForAllocation());
    _impl_.producer_event_ = p;
  }
  return _impl_.producer_event_;
}
inline ::perfetto::protos::PerfSample_ProducerEvent* PerfSample::mutable_producer_event() {
  ::perfetto::protos::PerfSample_ProducerEvent* _msg = _internal_mutable_producer_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfSample.producer_event)
  return _msg;
}
inline void PerfSample::set_allocated_producer_event(::perfetto::protos::PerfSample_ProducerEvent* producer_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.producer_event_;
  }
  if (producer_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(producer_event);
    if (message_arena != submessage_arena) {
      producer_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producer_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.producer_event_ = producer_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfSample.producer_event)
}

inline bool PerfSample::has_optional_unwind_error() const {
  return optional_unwind_error_case() != OPTIONAL_UNWIND_ERROR_NOT_SET;
}
inline void PerfSample::clear_has_optional_unwind_error() {
  _impl_._oneof_case_[0] = OPTIONAL_UNWIND_ERROR_NOT_SET;
}
inline bool PerfSample::has_optional_sample_skipped_reason() const {
  return optional_sample_skipped_reason_case() != OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}
inline void PerfSample::clear_has_optional_sample_skipped_reason() {
  _impl_._oneof_case_[1] = OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}
inline PerfSample::OptionalUnwindErrorCase PerfSample::optional_unwind_error_case() const {
  return PerfSample::OptionalUnwindErrorCase(_impl_._oneof_case_[0]);
}
inline PerfSample::OptionalSampleSkippedReasonCase PerfSample::optional_sample_skipped_reason_case() const {
  return PerfSample::OptionalSampleSkippedReasonCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// PerfSampleDefaults

// optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
inline bool PerfSampleDefaults::has_timebase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timebase_ != nullptr);
  return value;
}
inline const ::perfetto::protos::PerfEvents_Timebase& PerfSampleDefaults::_internal_timebase() const {
  const ::perfetto::protos::PerfEvents_Timebase* p = _impl_.timebase_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::PerfEvents_Timebase&>(
      ::perfetto::protos::_PerfEvents_Timebase_default_instance_);
}
inline const ::perfetto::protos::PerfEvents_Timebase& PerfSampleDefaults::timebase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSampleDefaults.timebase)
  return _internal_timebase();
}
inline void PerfSampleDefaults::unsafe_arena_set_allocated_timebase(
    ::perfetto::protos::PerfEvents_Timebase* timebase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timebase_);
  }
  _impl_.timebase_ = timebase;
  if (timebase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.PerfSampleDefaults.timebase)
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfSampleDefaults::release_timebase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEvents_Timebase* temp = _impl_.timebase_;
  _impl_.timebase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfSampleDefaults::unsafe_arena_release_timebase() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfSampleDefaults.timebase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::PerfEvents_Timebase* temp = _impl_.timebase_;
  _impl_.timebase_ = nullptr;
  return temp;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfSampleDefaults::_internal_mutable_timebase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timebase_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::PerfEvents_Timebase>(GetArenaForAllocation());
    _impl_.timebase_ = p;
  }
  return _impl_.timebase_;
}
inline ::perfetto::protos::PerfEvents_Timebase* PerfSampleDefaults::mutable_timebase() {
  ::perfetto::protos::PerfEvents_Timebase* _msg = _internal_mutable_timebase();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfSampleDefaults.timebase)
  return _msg;
}
inline void PerfSampleDefaults::set_allocated_timebase(::perfetto::protos::PerfEvents_Timebase* timebase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timebase_);
  }
  if (timebase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timebase));
    if (message_arena != submessage_arena) {
      timebase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timebase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timebase_ = timebase;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfSampleDefaults.timebase)
}

// optional uint32 process_shard_count = 2;
inline bool PerfSampleDefaults::has_process_shard_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PerfSampleDefaults::clear_process_shard_count() {
  _impl_.process_shard_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PerfSampleDefaults::process_shard_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSampleDefaults.process_shard_count)
  return _internal_process_shard_count();
}
inline void PerfSampleDefaults::set_process_shard_count(::uint32_t value) {
  _internal_set_process_shard_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSampleDefaults.process_shard_count)
}
inline ::uint32_t PerfSampleDefaults::_internal_process_shard_count() const {
  return _impl_.process_shard_count_;
}
inline void PerfSampleDefaults::_internal_set_process_shard_count(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.process_shard_count_ = value;
}

// optional uint32 chosen_process_shard = 3;
inline bool PerfSampleDefaults::has_chosen_process_shard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PerfSampleDefaults::clear_chosen_process_shard() {
  _impl_.chosen_process_shard_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PerfSampleDefaults::chosen_process_shard() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfSampleDefaults.chosen_process_shard)
  return _internal_chosen_process_shard();
}
inline void PerfSampleDefaults::set_chosen_process_shard(::uint32_t value) {
  _internal_set_chosen_process_shard(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfSampleDefaults.chosen_process_shard)
}
inline ::uint32_t PerfSampleDefaults::_internal_chosen_process_shard() const {
  return _impl_.chosen_process_shard_;
}
inline void PerfSampleDefaults::_internal_set_chosen_process_shard(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chosen_process_shard_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError>() {
  return ::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::Profiling_CpuMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::Profiling_CpuMode>() {
  return ::perfetto::protos::Profiling_CpuMode_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::Profiling_StackUnwindError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::Profiling_StackUnwindError>() {
  return ::perfetto::protos::Profiling_StackUnwindError_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason>() {
  return ::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::PerfSample_SampleSkipReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::PerfSample_SampleSkipReason>() {
  return ::perfetto::protos::PerfSample_SampleSkipReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto_2epb_2eh
