// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/heap_graph.proto

#include "protos/perfetto/trace/profiling/heap_graph.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR HeapGraphRoot::HeapGraphRoot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_ids_)*/ {}
  ,/* _impl_._object_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.root_type_)*/ 0
} {}
struct HeapGraphRootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphRootDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphRootDefaultTypeInternal() {}
  union {
    HeapGraphRoot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphRootDefaultTypeInternal _HeapGraphRoot_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeapGraphType::HeapGraphType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_field_id_)*/ {}
  ,/* _impl_._reference_field_id_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.class_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.location_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.object_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.superclass_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.classloader_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kind_)*/ 0
} {}
struct HeapGraphTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphTypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphTypeDefaultTypeInternal() {}
  union {
    HeapGraphType _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphTypeDefaultTypeInternal _HeapGraphType_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeapGraphObject::HeapGraphObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_field_id_)*/ {}
  ,/* _impl_._reference_field_id_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.reference_object_id_)*/ {}
  ,/* _impl_._reference_object_id_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.type_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.self_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.reference_field_id_base_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.native_allocation_registry_size_field_)*/ ::int64_t{0}

  , /*decltype(_impl_.identifier_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct HeapGraphObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphObjectDefaultTypeInternal() {}
  union {
    HeapGraphObject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphObjectDefaultTypeInternal _HeapGraphObject_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeapGraph::HeapGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_.field_names_)*/{}
  , /*decltype(_impl_.roots_)*/{}
  , /*decltype(_impl_.location_names_)*/{}
  , /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.continued_)*/ false

  , /*decltype(_impl_.index_)*/ ::uint64_t{0u}
} {}
struct HeapGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeapGraphDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeapGraphDefaultTypeInternal() {}
  union {
    HeapGraph _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeapGraphDefaultTypeInternal _HeapGraph_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphRoot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphRoot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphRoot, _impl_.object_ids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphRoot, _impl_.root_type_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.location_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.class_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.object_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.superclass_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.reference_field_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphType, _impl_.classloader_id_),
    1,
    2,
    0,
    3,
    4,
    ~0u,
    6,
    5,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.type_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.self_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.reference_field_id_base_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.reference_field_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.reference_object_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.native_allocation_registry_size_field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_.identifier_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.objects_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.roots_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.types_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.field_names_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.location_names_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.continued_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraph, _impl_.index_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::HeapGraphRoot)},
        { 12, 28, -1, sizeof(::perfetto::protos::HeapGraphType)},
        { 36, 53, -1, sizeof(::perfetto::protos::HeapGraphObject)},
        { 61, 77, -1, sizeof(::perfetto::protos::HeapGraph)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_HeapGraphRoot_default_instance_._instance,
    &::perfetto::protos::_HeapGraphType_default_instance_._instance,
    &::perfetto::protos::_HeapGraphObject_default_instance_._instance,
    &::perfetto::protos::_HeapGraph_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n0protos/perfetto/trace/profiling/heap_g"
    "raph.proto\022\017perfetto.protos\0323protos/perf"
    "etto/trace/profiling/deobfuscation.proto"
    "\0324protos/perfetto/trace/profiling/profil"
    "e_common.proto\"\266\003\n\rHeapGraphRoot\022\026\n\nobje"
    "ct_ids\030\001 \003(\004B\002\020\001\0226\n\troot_type\030\002 \001(\0162#.pe"
    "rfetto.protos.HeapGraphRoot.Type\"\324\002\n\004Typ"
    "e\022\020\n\014ROOT_UNKNOWN\020\000\022\023\n\017ROOT_JNI_GLOBAL\020\001"
    "\022\022\n\016ROOT_JNI_LOCAL\020\002\022\023\n\017ROOT_JAVA_FRAME\020"
    "\003\022\025\n\021ROOT_NATIVE_STACK\020\004\022\025\n\021ROOT_STICKY_"
    "CLASS\020\005\022\025\n\021ROOT_THREAD_BLOCK\020\006\022\025\n\021ROOT_M"
    "ONITOR_USED\020\007\022\026\n\022ROOT_THREAD_OBJECT\020\010\022\030\n"
    "\024ROOT_INTERNED_STRING\020\t\022\023\n\017ROOT_FINALIZI"
    "NG\020\n\022\021\n\rROOT_DEBUGGER\020\013\022\032\n\026ROOT_REFERENC"
    "E_CLEANUP\020\014\022\024\n\020ROOT_VM_INTERNAL\020\r\022\024\n\020ROO"
    "T_JNI_MONITOR\020\016\"\344\003\n\rHeapGraphType\022\n\n\002id\030"
    "\001 \001(\004\022\023\n\013location_id\030\002 \001(\004\022\022\n\nclass_name"
    "\030\003 \001(\t\022\023\n\013object_size\030\004 \001(\004\022\025\n\rsuperclas"
    "s_id\030\005 \001(\004\022\036\n\022reference_field_id\030\006 \003(\004B\002"
    "\020\001\0221\n\004kind\030\007 \001(\0162#.perfetto.protos.HeapG"
    "raphType.Kind\022\026\n\016classloader_id\030\010 \001(\004\"\206\002"
    "\n\004Kind\022\020\n\014KIND_UNKNOWN\020\000\022\017\n\013KIND_NORMAL\020"
    "\001\022\025\n\021KIND_NOREFERENCES\020\002\022\017\n\013KIND_STRING\020"
    "\003\022\016\n\nKIND_ARRAY\020\004\022\016\n\nKIND_CLASS\020\005\022\024\n\020KIN"
    "D_CLASSLOADER\020\006\022\021\n\rKIND_DEXCACHE\020\007\022\027\n\023KI"
    "ND_SOFT_REFERENCE\020\010\022\027\n\023KIND_WEAK_REFEREN"
    "CE\020\t\022\034\n\030KIND_FINALIZER_REFERENCE\020\n\022\032\n\026KI"
    "ND_PHANTOM_REFERENCE\020\013\"\366\001\n\017HeapGraphObje"
    "ct\022\014\n\002id\030\001 \001(\004H\000\022\022\n\010id_delta\030\007 \001(\004H\000\022\017\n\007"
    "type_id\030\002 \001(\004\022\021\n\tself_size\030\003 \001(\004\022\037\n\027refe"
    "rence_field_id_base\030\006 \001(\004\022\036\n\022reference_f"
    "ield_id\030\004 \003(\004B\002\020\001\022\037\n\023reference_object_id"
    "\030\005 \003(\004B\002\020\001\022-\n%native_allocation_registry"
    "_size_field\030\010 \001(\003B\014\n\nidentifier\"\300\002\n\tHeap"
    "Graph\022\013\n\003pid\030\001 \001(\005\0221\n\007objects\030\002 \003(\0132 .pe"
    "rfetto.protos.HeapGraphObject\022-\n\005roots\030\007"
    " \003(\0132\036.perfetto.protos.HeapGraphRoot\022-\n\005"
    "types\030\t \003(\0132\036.perfetto.protos.HeapGraphT"
    "ype\0224\n\013field_names\030\004 \003(\0132\037.perfetto.prot"
    "os.InternedString\0227\n\016location_names\030\010 \003("
    "\0132\037.perfetto.protos.InternedString\022\021\n\tco"
    "ntinued\030\005 \001(\010\022\r\n\005index\030\006 \001(\004J\004\010\003\020\004P\000"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_deps[2] =
    {
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fdeobfuscation_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto = {
    false,
    false,
    1676,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto,
    "protos/perfetto/trace/profiling/heap_graph.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeapGraphRoot_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[0];
}
bool HeapGraphRoot_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_UNKNOWN;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JNI_GLOBAL;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JNI_LOCAL;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JAVA_FRAME;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_NATIVE_STACK;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_STICKY_CLASS;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_THREAD_BLOCK;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_MONITOR_USED;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_THREAD_OBJECT;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_INTERNED_STRING;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_FINALIZING;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_DEBUGGER;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_REFERENCE_CLEANUP;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_VM_INTERNAL;
constexpr HeapGraphRoot_Type HeapGraphRoot::ROOT_JNI_MONITOR;
constexpr HeapGraphRoot_Type HeapGraphRoot::Type_MIN;
constexpr HeapGraphRoot_Type HeapGraphRoot::Type_MAX;
constexpr int HeapGraphRoot::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeapGraphType_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[1];
}
bool HeapGraphType_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr HeapGraphType_Kind HeapGraphType::KIND_UNKNOWN;
constexpr HeapGraphType_Kind HeapGraphType::KIND_NORMAL;
constexpr HeapGraphType_Kind HeapGraphType::KIND_NOREFERENCES;
constexpr HeapGraphType_Kind HeapGraphType::KIND_STRING;
constexpr HeapGraphType_Kind HeapGraphType::KIND_ARRAY;
constexpr HeapGraphType_Kind HeapGraphType::KIND_CLASS;
constexpr HeapGraphType_Kind HeapGraphType::KIND_CLASSLOADER;
constexpr HeapGraphType_Kind HeapGraphType::KIND_DEXCACHE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_SOFT_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_WEAK_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_FINALIZER_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::KIND_PHANTOM_REFERENCE;
constexpr HeapGraphType_Kind HeapGraphType::Kind_MIN;
constexpr HeapGraphType_Kind HeapGraphType::Kind_MAX;
constexpr int HeapGraphType::Kind_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class HeapGraphRoot::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraphRoot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeapGraphRoot, _impl_._has_bits_);
  static void set_has_root_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HeapGraphRoot::HeapGraphRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraphRoot)
}
HeapGraphRoot::HeapGraphRoot(const HeapGraphRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapGraphRoot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_ids_) { from._impl_.object_ids_ }
    ,/* _impl_._object_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.root_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.root_type_ = from._impl_.root_type_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraphRoot)
}

inline void HeapGraphRoot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_ids_) { arena }
    ,/* _impl_._object_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.root_type_) { 0 }

  };
}

HeapGraphRoot::~HeapGraphRoot() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraphRoot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraphRoot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_ids_.~RepeatedField();
}

void HeapGraphRoot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraphRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraphRoot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_object_ids()->Clear();
  _impl_.root_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapGraphRoot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 object_ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::HeapGraphRoot_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_root_type(static_cast<::perfetto::protos::HeapGraphRoot_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeapGraphRoot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraphRoot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1 [packed = true];
  {
    int byte_size = _impl_._object_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_object_ids(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_root_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraphRoot)
  return target;
}

::size_t HeapGraphRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraphRoot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_object_ids())
    ;
    _impl_._object_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // optional .perfetto.protos.HeapGraphRoot.Type root_type = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_root_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapGraphRoot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapGraphRoot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapGraphRoot::GetClassData() const { return &_class_data_; }


void HeapGraphRoot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapGraphRoot*>(&to_msg);
  auto& from = static_cast<const HeapGraphRoot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraphRoot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_root_type(from._internal_root_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapGraphRoot::CopyFrom(const HeapGraphRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraphRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraphRoot::IsInitialized() const {
  return true;
}

void HeapGraphRoot::InternalSwap(HeapGraphRoot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
  swap(_impl_.root_type_, other->_impl_.root_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapGraphRoot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[0]);
}
// ===================================================================

class HeapGraphType::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraphType>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeapGraphType, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_object_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_superclass_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_classloader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

HeapGraphType::HeapGraphType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraphType)
}
HeapGraphType::HeapGraphType(const HeapGraphType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapGraphType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_) { from._impl_.reference_field_id_ }
    ,/* _impl_._reference_field_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.class_name_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.location_id_) {}

    , decltype(_impl_.object_size_) {}

    , decltype(_impl_.superclass_id_) {}

    , decltype(_impl_.classloader_id_) {}

    , decltype(_impl_.kind_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.class_name_.Set(from._internal_class_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.kind_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.kind_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraphType)
}

inline void HeapGraphType::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_) { arena }
    ,/* _impl_._reference_field_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.class_name_) {}

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.location_id_) { ::uint64_t{0u} }

    , decltype(_impl_.object_size_) { ::uint64_t{0u} }

    , decltype(_impl_.superclass_id_) { ::uint64_t{0u} }

    , decltype(_impl_.classloader_id_) { ::uint64_t{0u} }

    , decltype(_impl_.kind_) { 0 }

  };
  _impl_.class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeapGraphType::~HeapGraphType() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraphType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraphType::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_field_id_.~RepeatedField();
  _impl_.class_name_.Destroy();
}

void HeapGraphType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraphType::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraphType)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_reference_field_id()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.class_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kind_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapGraphType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 location_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_location_id(&has_bits);
          _impl_.location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.HeapGraphType.class_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 object_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_object_size(&has_bits);
          _impl_.object_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 superclass_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_superclass_id(&has_bits);
          _impl_.superclass_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 reference_field_id = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reference_field_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 48) {
          _internal_add_reference_field_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::HeapGraphType_Kind_IsValid(static_cast<int>(val)))) {
            _internal_set_kind(static_cast<::perfetto::protos::HeapGraphType_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 classloader_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_classloader_id(&has_bits);
          _impl_.classloader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeapGraphType::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraphType)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // optional uint64 location_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_location_id(), target);
  }

  // optional string class_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_class_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.HeapGraphType.class_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional uint64 object_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_object_size(), target);
  }

  // optional uint64 superclass_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_superclass_id(), target);
  }

  // repeated uint64 reference_field_id = 6 [packed = true];
  {
    int byte_size = _impl_._reference_field_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(6, _internal_reference_field_id(),
                                                 byte_size, target);
    }
  }

  // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_kind(), target);
  }

  // optional uint64 classloader_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_classloader_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraphType)
  return target;
}

::size_t HeapGraphType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraphType)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 reference_field_id = 6 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_reference_field_id())
    ;
    _impl_._reference_field_id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string class_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_class_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
    }

    // optional uint64 location_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_location_id());
    }

    // optional uint64 object_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_object_size());
    }

    // optional uint64 superclass_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_superclass_id());
    }

    // optional uint64 classloader_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_classloader_id());
    }

    // optional .perfetto.protos.HeapGraphType.Kind kind = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapGraphType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapGraphType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapGraphType::GetClassData() const { return &_class_data_; }


void HeapGraphType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapGraphType*>(&to_msg);
  auto& from = static_cast<const HeapGraphType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraphType)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_field_id_.MergeFrom(from._impl_.reference_field_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.location_id_ = from._impl_.location_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.object_size_ = from._impl_.object_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.superclass_id_ = from._impl_.superclass_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.classloader_id_ = from._impl_.classloader_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapGraphType::CopyFrom(const HeapGraphType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraphType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraphType::IsInitialized() const {
  return true;
}

void HeapGraphType::InternalSwap(HeapGraphType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_field_id_.InternalSwap(&other->_impl_.reference_field_id_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_name_, lhs_arena,
                                       &other->_impl_.class_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapGraphType, _impl_.kind_)
      + sizeof(HeapGraphType::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(HeapGraphType, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapGraphType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[1]);
}
// ===================================================================

class HeapGraphObject::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraphObject>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeapGraphObject, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HeapGraphObject, _impl_._oneof_case_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_self_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_field_id_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_native_allocation_registry_size_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HeapGraphObject::HeapGraphObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraphObject)
}
HeapGraphObject::HeapGraphObject(const HeapGraphObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapGraphObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_) { from._impl_.reference_field_id_ }
    ,/* _impl_._reference_field_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.reference_object_id_) { from._impl_.reference_object_id_ }
    ,/* _impl_._reference_object_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.type_id_) {}

    , decltype(_impl_.self_size_) {}

    , decltype(_impl_.reference_field_id_base_) {}

    , decltype(_impl_.native_allocation_registry_size_field_) {}

    , decltype(_impl_.identifier_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_id_, &from._impl_.type_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.native_allocation_registry_size_field_) -
    reinterpret_cast<char*>(&_impl_.type_id_)) + sizeof(_impl_.native_allocation_registry_size_field_));
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kIdDelta: {
      _this->_internal_set_id_delta(from._internal_id_delta());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraphObject)
}

inline void HeapGraphObject::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_field_id_) { arena }
    ,/* _impl_._reference_field_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.reference_object_id_) { arena }
    ,/* _impl_._reference_object_id_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.type_id_) { ::uint64_t{0u} }

    , decltype(_impl_.self_size_) { ::uint64_t{0u} }

    , decltype(_impl_.reference_field_id_base_) { ::uint64_t{0u} }

    , decltype(_impl_.native_allocation_registry_size_field_) { ::int64_t{0} }

    , decltype(_impl_.identifier_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_identifier();
}

HeapGraphObject::~HeapGraphObject() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraphObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraphObject::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_field_id_.~RepeatedField();
  _impl_.reference_object_id_.~RepeatedField();
  if (has_identifier()) {
    clear_identifier();
  }
}

void HeapGraphObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraphObject::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.HeapGraphObject)
  switch (identifier_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kIdDelta: {
      // No need to clear
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void HeapGraphObject::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraphObject)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_reference_field_id()->Clear();
  _internal_mutable_reference_object_id()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.type_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.native_allocation_registry_size_field_) -
        reinterpret_cast<char*>(&_impl_.type_id_)) + sizeof(_impl_.native_allocation_registry_size_field_));
  }
  clear_identifier();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapGraphObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          _impl_.type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 self_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_self_size(&has_bits);
          _impl_.self_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 reference_field_id = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reference_field_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_reference_field_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 reference_object_id = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_reference_object_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_reference_object_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 reference_field_id_base = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_reference_field_id_base(&has_bits);
          _impl_.reference_field_id_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 id_delta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _internal_set_id_delta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 native_allocation_registry_size_field = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_native_allocation_registry_size_field(&has_bits);
          _impl_.native_allocation_registry_size_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeapGraphObject::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraphObject)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (identifier_case() == kId) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 type_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_type_id(), target);
  }

  // optional uint64 self_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_self_size(), target);
  }

  // repeated uint64 reference_field_id = 4 [packed = true];
  {
    int byte_size = _impl_._reference_field_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(4, _internal_reference_field_id(),
                                                 byte_size, target);
    }
  }

  // repeated uint64 reference_object_id = 5 [packed = true];
  {
    int byte_size = _impl_._reference_object_id_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(5, _internal_reference_object_id(),
                                                 byte_size, target);
    }
  }

  // optional uint64 reference_field_id_base = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_reference_field_id_base(), target);
  }

  // uint64 id_delta = 7;
  if (identifier_case() == kIdDelta) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_id_delta(), target);
  }

  // optional int64 native_allocation_registry_size_field = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_native_allocation_registry_size_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraphObject)
  return target;
}

::size_t HeapGraphObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraphObject)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 reference_field_id = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_reference_field_id())
    ;
    _impl_._reference_field_id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 reference_object_id = 5 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_reference_object_id())
    ;
    _impl_._reference_object_id_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 type_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_type_id());
    }

    // optional uint64 self_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_self_size());
    }

    // optional uint64 reference_field_id_base = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_reference_field_id_base());
    }

    // optional int64 native_allocation_registry_size_field = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_native_allocation_registry_size_field());
    }

  }
  switch (identifier_case()) {
    // uint64 id = 1;
    case kId: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
      break;
    }
    // uint64 id_delta = 7;
    case kIdDelta: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id_delta());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapGraphObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapGraphObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapGraphObject::GetClassData() const { return &_class_data_; }


void HeapGraphObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapGraphObject*>(&to_msg);
  auto& from = static_cast<const HeapGraphObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraphObject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_field_id_.MergeFrom(from._impl_.reference_field_id_);
  _this->_impl_.reference_object_id_.MergeFrom(from._impl_.reference_object_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_id_ = from._impl_.type_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.self_size_ = from._impl_.self_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_field_id_base_ = from._impl_.reference_field_id_base_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.native_allocation_registry_size_field_ = from._impl_.native_allocation_registry_size_field_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.identifier_case()) {
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case kIdDelta: {
      _this->_internal_set_id_delta(from._internal_id_delta());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapGraphObject::CopyFrom(const HeapGraphObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraphObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraphObject::IsInitialized() const {
  return true;
}

void HeapGraphObject::InternalSwap(HeapGraphObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_field_id_.InternalSwap(&other->_impl_.reference_field_id_);
  _impl_.reference_object_id_.InternalSwap(&other->_impl_.reference_object_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapGraphObject, _impl_.native_allocation_registry_size_field_)
      + sizeof(HeapGraphObject::_impl_.native_allocation_registry_size_field_)
      - PROTOBUF_FIELD_OFFSET(HeapGraphObject, _impl_.type_id_)>(
          reinterpret_cast<char*>(&_impl_.type_id_),
          reinterpret_cast<char*>(&other->_impl_.type_id_));
  swap(_impl_.identifier_, other->_impl_.identifier_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapGraphObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[2]);
}
// ===================================================================

class HeapGraph::_Internal {
 public:
  using HasBits = decltype(std::declval<HeapGraph>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeapGraph, _impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continued(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void HeapGraph::clear_field_names() {
  _internal_mutable_field_names()->Clear();
}
void HeapGraph::clear_location_names() {
  _internal_mutable_location_names()->Clear();
}
HeapGraph::HeapGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HeapGraph)
}
HeapGraph::HeapGraph(const HeapGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeapGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){from._impl_.objects_}
    , decltype(_impl_.field_names_){from._impl_.field_names_}
    , decltype(_impl_.roots_){from._impl_.roots_}
    , decltype(_impl_.location_names_){from._impl_.location_names_}
    , decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.pid_) {}

    , decltype(_impl_.continued_) {}

    , decltype(_impl_.index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HeapGraph)
}

inline void HeapGraph::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){arena}
    , decltype(_impl_.field_names_){arena}
    , decltype(_impl_.roots_){arena}
    , decltype(_impl_.location_names_){arena}
    , decltype(_impl_.types_){arena}
    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.continued_) { false }

    , decltype(_impl_.index_) { ::uint64_t{0u} }

  };
}

HeapGraph::~HeapGraph() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HeapGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeapGraph::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_objects()->~RepeatedPtrField();
  _internal_mutable_field_names()->~RepeatedPtrField();
  _internal_mutable_roots()->~RepeatedPtrField();
  _internal_mutable_location_names()->~RepeatedPtrField();
  _internal_mutable_types()->~RepeatedPtrField();
}

void HeapGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeapGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HeapGraph)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_objects()->Clear();
  _internal_mutable_field_names()->Clear();
  _internal_mutable_roots()->Clear();
  _internal_mutable_location_names()->Clear();
  _internal_mutable_types()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeapGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.HeapGraphObject objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.InternedString field_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool continued = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_continued(&has_bits);
          _impl_.continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.HeapGraphRoot roots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.InternedString location_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.HeapGraphType types = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeapGraph::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HeapGraph)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.HeapGraphObject objects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.InternedString field_names = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool continued = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_continued(), target);
  }

  // optional uint64 index = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_index(), target);
  }

  // repeated .perfetto.protos.HeapGraphRoot roots = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roots_size()); i < n; i++) {
    const auto& repfield = this->_internal_roots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.InternedString location_names = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_location_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.HeapGraphType types = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HeapGraph)
  return target;
}

::size_t HeapGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HeapGraph)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.HeapGraphObject objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_internal_objects()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.InternedString field_names = 4;
  total_size += 1UL * this->_internal_field_names_size();
  for (const auto& msg : this->_internal_field_names()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.HeapGraphRoot roots = 7;
  total_size += 1UL * this->_internal_roots_size();
  for (const auto& msg : this->_internal_roots()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.InternedString location_names = 8;
  total_size += 1UL * this->_internal_location_names_size();
  for (const auto& msg : this->_internal_location_names()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.HeapGraphType types = 9;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->_internal_types()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional bool continued = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional uint64 index = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeapGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeapGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeapGraph::GetClassData() const { return &_class_data_; }


void HeapGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeapGraph*>(&to_msg);
  auto& from = static_cast<const HeapGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HeapGraph)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_objects()->MergeFrom(from._internal_objects());
  _this->_internal_mutable_field_names()->MergeFrom(from._internal_field_names());
  _this->_internal_mutable_roots()->MergeFrom(from._internal_roots());
  _this->_internal_mutable_location_names()->MergeFrom(from._internal_location_names());
  _this->_internal_mutable_types()->MergeFrom(from._internal_types());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.continued_ = from._impl_.continued_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeapGraph::CopyFrom(const HeapGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HeapGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeapGraph::IsInitialized() const {
  return true;
}

void HeapGraph::InternalSwap(HeapGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_objects()->InternalSwap(other->_internal_mutable_objects());
  _internal_mutable_field_names()->InternalSwap(other->_internal_mutable_field_names());
  _internal_mutable_roots()->InternalSwap(other->_internal_mutable_roots());
  _internal_mutable_location_names()->InternalSwap(other->_internal_mutable_location_names());
  _internal_mutable_types()->InternalSwap(other->_internal_mutable_types());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeapGraph, _impl_.index_)
      + sizeof(HeapGraph::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(HeapGraph, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeapGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fprofiling_2fheap_5fgraph_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraphRoot*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraphRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraphRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraphType*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraphType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraphType >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraphObject*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraphObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraphObject >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HeapGraph*
Arena::CreateMaybeMessage< ::perfetto::protos::HeapGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HeapGraph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
