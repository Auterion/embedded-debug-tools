// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_latency_info.proto

#include "protos/perfetto/trace/track_event/chrome_latency_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_us_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.component_type_)*/ 0
} {}
struct ChromeLatencyInfo_ComponentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeLatencyInfo_ComponentInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeLatencyInfo_ComponentInfoDefaultTypeInternal() {}
  union {
    ChromeLatencyInfo_ComponentInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeLatencyInfo_ComponentInfoDefaultTypeInternal _ChromeLatencyInfo_ComponentInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChromeLatencyInfo::ChromeLatencyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.component_info_)*/{}
  , /*decltype(_impl_.trace_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.step_)*/ 0

  , /*decltype(_impl_.frame_tree_node_id_)*/ 0

  , /*decltype(_impl_.gesture_scroll_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.touch_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.is_coalesced_)*/ false
} {}
struct ChromeLatencyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeLatencyInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeLatencyInfoDefaultTypeInternal() {}
  union {
    ChromeLatencyInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeLatencyInfoDefaultTypeInternal _ChromeLatencyInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo_ComponentInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo_ComponentInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo_ComponentInfo, _impl_.component_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo_ComponentInfo, _impl_.time_us_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.trace_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.step_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.frame_tree_node_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.component_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.is_coalesced_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.gesture_scroll_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeLatencyInfo, _impl_.touch_id_),
    0,
    1,
    2,
    ~0u,
    5,
    3,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::ChromeLatencyInfo_ComponentInfo)},
        { 12, 27, -1, sizeof(::perfetto::protos::ChromeLatencyInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ChromeLatencyInfo_ComponentInfo_default_instance_._instance,
    &::perfetto::protos::_ChromeLatencyInfo_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n;protos/perfetto/trace/track_event/chro"
    "me_latency_info.proto\022\017perfetto.protos\"\205"
    "\014\n\021ChromeLatencyInfo\022\020\n\010trace_id\030\001 \001(\003\0225"
    "\n\004step\030\002 \001(\0162\'.perfetto.protos.ChromeLat"
    "encyInfo.Step\022\032\n\022frame_tree_node_id\030\003 \001("
    "\005\022H\n\016component_info\030\004 \003(\01320.perfetto.pro"
    "tos.ChromeLatencyInfo.ComponentInfo\022\024\n\014i"
    "s_coalesced\030\005 \001(\010\022\031\n\021gesture_scroll_id\030\006"
    " \001(\003\022\020\n\010touch_id\030\007 \001(\003\032q\n\rComponentInfo\022"
    "O\n\016component_type\030\001 \001(\01627.perfetto.proto"
    "s.ChromeLatencyInfo.LatencyComponentType"
    "\022\017\n\007time_us\030\002 \001(\004\"\222\003\n\004Step\022\024\n\020STEP_UNSPE"
    "CIFIED\020\000\022\034\n\030STEP_SEND_INPUT_EVENT_UI\020\003\022 "
    "\n\034STEP_HANDLE_INPUT_EVENT_IMPL\020\005\022(\n$STEP"
    "_DID_HANDLE_INPUT_AND_OVERSCROLL\020\010\022 \n\034ST"
    "EP_HANDLE_INPUT_EVENT_MAIN\020\004\022\"\n\036STEP_MAI"
    "N_THREAD_SCROLL_UPDATE\020\002\022\'\n#STEP_HANDLE_"
    "INPUT_EVENT_MAIN_COMMIT\020\001\022)\n%STEP_HANDLE"
    "D_INPUT_EVENT_MAIN_OR_IMPL\020\t\022!\n\035STEP_HAN"
    "DLED_INPUT_EVENT_IMPL\020\n\022\025\n\021STEP_SWAP_BUF"
    "FERS\020\006\022\026\n\022STEP_DRAW_AND_SWAP\020\007\022\036\n\032STEP_F"
    "INISHED_SWAP_BUFFERS\020\013\"\365\005\n\024LatencyCompon"
    "entType\022\031\n\025COMPONENT_UNSPECIFIED\020\000\022+\n\'CO"
    "MPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH\020\001\022"
    "8\n4COMPONENT_INPUT_EVENT_LATENCY_SCROLL_"
    "UPDATE_ORIGINAL\020\002\022>\n:COMPONENT_INPUT_EVE"
    "NT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL\020"
    "\003\022*\n&COMPONENT_INPUT_EVENT_LATENCY_ORIGI"
    "NAL\020\004\022$\n COMPONENT_INPUT_EVENT_LATENCY_U"
    "I\020\005\022/\n+COMPONENT_INPUT_EVENT_LATENCY_REN"
    "DERER_MAIN\020\006\022:\n6COMPONENT_INPUT_EVENT_LA"
    "TENCY_RENDERING_SCHEDULED_MAIN\020\007\022:\n6COMP"
    "ONENT_INPUT_EVENT_LATENCY_RENDERING_SCHE"
    "DULED_IMPL\020\010\022:\n6COMPONENT_INPUT_EVENT_LA"
    "TENCY_SCROLL_UPDATE_LAST_EVENT\020\t\022)\n%COMP"
    "ONENT_INPUT_EVENT_LATENCY_ACK_RWH\020\n\022/\n+C"
    "OMPONENT_INPUT_EVENT_LATENCY_RENDERER_SW"
    "AP\020\013\022/\n+COMPONENT_DISPLAY_COMPOSITOR_REC"
    "EIVED_FRAME\020\014\022)\n%COMPONENT_INPUT_EVENT_G"
    "PU_SWAP_BUFFER\020\r\022,\n(COMPONENT_INPUT_EVEN"
    "T_LATENCY_FRAME_SWAP\020\016"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto = {
    false,
    false,
    1622,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto,
    "protos/perfetto/trace/track_event/chrome_latency_info.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeLatencyInfo_Step_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[0];
}
bool ChromeLatencyInfo_Step_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_UNSPECIFIED;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_SEND_INPUT_EVENT_UI;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_DID_HANDLE_INPUT_AND_OVERSCROLL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_MAIN;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_MAIN_THREAD_SCROLL_UPDATE;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_HANDLED_INPUT_EVENT_IMPL;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_SWAP_BUFFERS;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_DRAW_AND_SWAP;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::STEP_FINISHED_SWAP_BUFFERS;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::Step_MIN;
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo::Step_MAX;
constexpr int ChromeLatencyInfo::Step_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeLatencyInfo_LatencyComponentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[1];
}
bool ChromeLatencyInfo_LatencyComponentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_UNSPECIFIED;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_UI;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::LatencyComponentType_MIN;
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo::LatencyComponentType_MAX;
constexpr int ChromeLatencyInfo::LatencyComponentType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ChromeLatencyInfo_ComponentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLatencyInfo_ComponentInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo_ComponentInfo, _impl_._has_bits_);
  static void set_has_component_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}
ChromeLatencyInfo_ComponentInfo::ChromeLatencyInfo_ComponentInfo(const ChromeLatencyInfo_ComponentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
}

inline void ChromeLatencyInfo_ComponentInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_us_) { ::uint64_t{0u} }

    , decltype(_impl_.component_type_) { 0 }

  };
}

ChromeLatencyInfo_ComponentInfo::~ChromeLatencyInfo_ComponentInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeLatencyInfo_ComponentInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeLatencyInfo_ComponentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeLatencyInfo_ComponentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.time_us_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.component_type_) -
        reinterpret_cast<char*>(&_impl_.time_us_)) + sizeof(_impl_.component_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeLatencyInfo_ComponentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_IsValid(static_cast<int>(val)))) {
            _internal_set_component_type(static_cast<::perfetto::protos::ChromeLatencyInfo_LatencyComponentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 time_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_time_us(&has_bits);
          _impl_.time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeLatencyInfo_ComponentInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_component_type(), target);
  }

  // optional uint64 time_us = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  return target;
}

::size_t ChromeLatencyInfo_ComponentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 time_us = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_time_us());
    }

    // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_component_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeLatencyInfo_ComponentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeLatencyInfo_ComponentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeLatencyInfo_ComponentInfo::GetClassData() const { return &_class_data_; }


void ChromeLatencyInfo_ComponentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeLatencyInfo_ComponentInfo*>(&to_msg);
  auto& from = static_cast<const ChromeLatencyInfo_ComponentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_us_ = from._impl_.time_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.component_type_ = from._impl_.component_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeLatencyInfo_ComponentInfo::CopyFrom(const ChromeLatencyInfo_ComponentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLatencyInfo_ComponentInfo::IsInitialized() const {
  return true;
}

void ChromeLatencyInfo_ComponentInfo::InternalSwap(ChromeLatencyInfo_ComponentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo_ComponentInfo, _impl_.component_type_)
      + sizeof(ChromeLatencyInfo_ComponentInfo::_impl_.component_type_)
      - PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo_ComponentInfo, _impl_.time_us_)>(
          reinterpret_cast<char*>(&_impl_.time_us_),
          reinterpret_cast<char*>(&other->_impl_.time_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeLatencyInfo_ComponentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[0]);
}
// ===================================================================

class ChromeLatencyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeLatencyInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo, _impl_._has_bits_);
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frame_tree_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_coalesced(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gesture_scroll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_touch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChromeLatencyInfo::ChromeLatencyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeLatencyInfo)
}
ChromeLatencyInfo::ChromeLatencyInfo(const ChromeLatencyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeLatencyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_info_){from._impl_.component_info_}
    , decltype(_impl_.trace_id_) {}

    , decltype(_impl_.step_) {}

    , decltype(_impl_.frame_tree_node_id_) {}

    , decltype(_impl_.gesture_scroll_id_) {}

    , decltype(_impl_.touch_id_) {}

    , decltype(_impl_.is_coalesced_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.trace_id_, &from._impl_.trace_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_coalesced_) -
    reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.is_coalesced_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeLatencyInfo)
}

inline void ChromeLatencyInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.component_info_){arena}
    , decltype(_impl_.trace_id_) { ::int64_t{0} }

    , decltype(_impl_.step_) { 0 }

    , decltype(_impl_.frame_tree_node_id_) { 0 }

    , decltype(_impl_.gesture_scroll_id_) { ::int64_t{0} }

    , decltype(_impl_.touch_id_) { ::int64_t{0} }

    , decltype(_impl_.is_coalesced_) { false }

  };
}

ChromeLatencyInfo::~ChromeLatencyInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeLatencyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeLatencyInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_component_info()->~RepeatedPtrField();
}

void ChromeLatencyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeLatencyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeLatencyInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_component_info()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.trace_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_coalesced_) -
        reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.is_coalesced_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeLatencyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeLatencyInfo_Step_IsValid(static_cast<int>(val)))) {
            _internal_set_step(static_cast<::perfetto::protos::ChromeLatencyInfo_Step>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 frame_tree_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_tree_node_id(&has_bits);
          _impl_.frame_tree_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_coalesced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_is_coalesced(&has_bits);
          _impl_.is_coalesced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 gesture_scroll_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_gesture_scroll_id(&has_bits);
          _impl_.gesture_scroll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 touch_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_touch_id(&has_bits);
          _impl_.touch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeLatencyInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeLatencyInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 trace_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_trace_id(), target);
  }

  // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_step(), target);
  }

  // optional int32 frame_tree_node_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_frame_tree_node_id(), target);
  }

  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_component_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_component_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_coalesced = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_coalesced(), target);
  }

  // optional int64 gesture_scroll_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_gesture_scroll_id(), target);
  }

  // optional int64 touch_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_touch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeLatencyInfo)
  return target;
}

::size_t ChromeLatencyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeLatencyInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  total_size += 1UL * this->_internal_component_info_size();
  for (const auto& msg : this->_internal_component_info()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 trace_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_trace_id());
    }

    // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_step());
    }

    // optional int32 frame_tree_node_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frame_tree_node_id());
    }

    // optional int64 gesture_scroll_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_gesture_scroll_id());
    }

    // optional int64 touch_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_touch_id());
    }

    // optional bool is_coalesced = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeLatencyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeLatencyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeLatencyInfo::GetClassData() const { return &_class_data_; }


void ChromeLatencyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeLatencyInfo*>(&to_msg);
  auto& from = static_cast<const ChromeLatencyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeLatencyInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_component_info()->MergeFrom(from._internal_component_info());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.step_ = from._impl_.step_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_tree_node_id_ = from._impl_.frame_tree_node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gesture_scroll_id_ = from._impl_.gesture_scroll_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.touch_id_ = from._impl_.touch_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_coalesced_ = from._impl_.is_coalesced_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeLatencyInfo::CopyFrom(const ChromeLatencyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeLatencyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeLatencyInfo::IsInitialized() const {
  return true;
}

void ChromeLatencyInfo::InternalSwap(ChromeLatencyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_component_info()->InternalSwap(other->_internal_mutable_component_info());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo, _impl_.is_coalesced_)
      + sizeof(ChromeLatencyInfo::_impl_.is_coalesced_)
      - PROTOBUF_FIELD_OFFSET(ChromeLatencyInfo, _impl_.trace_id_)>(
          reinterpret_cast<char*>(&_impl_.trace_id_),
          reinterpret_cast<char*>(&other->_impl_.trace_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeLatencyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLatencyInfo_ComponentInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeLatencyInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeLatencyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeLatencyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
