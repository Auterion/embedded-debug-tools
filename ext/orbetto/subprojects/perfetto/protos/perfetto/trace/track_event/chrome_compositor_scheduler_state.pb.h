// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_compositor_scheduler_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/trace/track_event/source_location.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
namespace perfetto {
namespace protos {
class BeginFrameArgs;
struct BeginFrameArgsDefaultTypeInternal;
extern BeginFrameArgsDefaultTypeInternal _BeginFrameArgs_default_instance_;
class BeginFrameObserverState;
struct BeginFrameObserverStateDefaultTypeInternal;
extern BeginFrameObserverStateDefaultTypeInternal _BeginFrameObserverState_default_instance_;
class BeginFrameSourceState;
struct BeginFrameSourceStateDefaultTypeInternal;
extern BeginFrameSourceStateDefaultTypeInternal _BeginFrameSourceState_default_instance_;
class BeginImplFrameArgs;
struct BeginImplFrameArgsDefaultTypeInternal;
extern BeginImplFrameArgsDefaultTypeInternal _BeginImplFrameArgs_default_instance_;
class BeginImplFrameArgs_TimestampsInUs;
struct BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal;
extern BeginImplFrameArgs_TimestampsInUsDefaultTypeInternal _BeginImplFrameArgs_TimestampsInUs_default_instance_;
class ChromeCompositorSchedulerState;
struct ChromeCompositorSchedulerStateDefaultTypeInternal;
extern ChromeCompositorSchedulerStateDefaultTypeInternal _ChromeCompositorSchedulerState_default_instance_;
class ChromeCompositorStateMachine;
struct ChromeCompositorStateMachineDefaultTypeInternal;
extern ChromeCompositorStateMachineDefaultTypeInternal _ChromeCompositorStateMachine_default_instance_;
class ChromeCompositorStateMachine_MajorState;
struct ChromeCompositorStateMachine_MajorStateDefaultTypeInternal;
extern ChromeCompositorStateMachine_MajorStateDefaultTypeInternal _ChromeCompositorStateMachine_MajorState_default_instance_;
class ChromeCompositorStateMachine_MinorState;
struct ChromeCompositorStateMachine_MinorStateDefaultTypeInternal;
extern ChromeCompositorStateMachine_MinorStateDefaultTypeInternal _ChromeCompositorStateMachine_MinorState_default_instance_;
class CompositorTimingHistory;
struct CompositorTimingHistoryDefaultTypeInternal;
extern CompositorTimingHistoryDefaultTypeInternal _CompositorTimingHistory_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::BeginFrameArgs* Arena::CreateMaybeMessage<::perfetto::protos::BeginFrameArgs>(Arena*);
template <>
::perfetto::protos::BeginFrameObserverState* Arena::CreateMaybeMessage<::perfetto::protos::BeginFrameObserverState>(Arena*);
template <>
::perfetto::protos::BeginFrameSourceState* Arena::CreateMaybeMessage<::perfetto::protos::BeginFrameSourceState>(Arena*);
template <>
::perfetto::protos::BeginImplFrameArgs* Arena::CreateMaybeMessage<::perfetto::protos::BeginImplFrameArgs>(Arena*);
template <>
::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* Arena::CreateMaybeMessage<::perfetto::protos::BeginImplFrameArgs_TimestampsInUs>(Arena*);
template <>
::perfetto::protos::ChromeCompositorSchedulerState* Arena::CreateMaybeMessage<::perfetto::protos::ChromeCompositorSchedulerState>(Arena*);
template <>
::perfetto::protos::ChromeCompositorStateMachine* Arena::CreateMaybeMessage<::perfetto::protos::ChromeCompositorStateMachine>(Arena*);
template <>
::perfetto::protos::ChromeCompositorStateMachine_MajorState* Arena::CreateMaybeMessage<::perfetto::protos::ChromeCompositorStateMachine_MajorState>(Arena*);
template <>
::perfetto::protos::ChromeCompositorStateMachine_MinorState* Arena::CreateMaybeMessage<::perfetto::protos::ChromeCompositorStateMachine_MinorState>(Arena*);
template <>
::perfetto::protos::CompositorTimingHistory* Arena::CreateMaybeMessage<::perfetto::protos::CompositorTimingHistory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode : int {
  ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_UNSPECIFIED = 0,
  ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_NONE = 1,
  ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_IMMEDIATE = 2,
  ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_REGULAR = 3,
  ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_LATE = 4,
  ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_BLOCKED = 5,
};

bool ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(int value);
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_BeginImplFrameDeadlineMode_MIN = static_cast<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(0);
constexpr ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_BeginImplFrameDeadlineMode_MAX = static_cast<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(5);
constexpr int ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_BeginImplFrameDeadlineMode_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_descriptor();
template <typename T>
const std::string& ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BeginImplFrameDeadlineMode_Name().");
  return ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Name(static_cast<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(value));
}
template <>
inline const std::string& ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Name(ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Parse(absl::string_view name, ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(
      ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_descriptor(), name, value);
}
enum ChromeCompositorStateMachine_MajorState_BeginImplFrameState : int {
  ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_UNSPECIFIED = 0,
  ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_IDLE = 1,
  ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME = 2,
  ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_DEADLINE = 3,
};

bool ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(int value);
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BeginImplFrameState_MIN = static_cast<ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(0);
constexpr ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BeginImplFrameState_MAX = static_cast<ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(3);
constexpr int ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BeginImplFrameState_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorStateMachine_MajorState_BeginImplFrameState_descriptor();
template <typename T>
const std::string& ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorStateMachine_MajorState_BeginImplFrameState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BeginImplFrameState_Name().");
  return ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Name(static_cast<ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(value));
}
template <>
inline const std::string& ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Name(ChromeCompositorStateMachine_MajorState_BeginImplFrameState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorStateMachine_MajorState_BeginImplFrameState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Parse(absl::string_view name, ChromeCompositorStateMachine_MajorState_BeginImplFrameState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(
      ChromeCompositorStateMachine_MajorState_BeginImplFrameState_descriptor(), name, value);
}
enum ChromeCompositorStateMachine_MajorState_BeginMainFrameState : int {
  ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_UNSPECIFIED = 0,
  ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_IDLE = 1,
  ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_SENT = 2,
  ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_READY_TO_COMMIT = 3,
};

bool ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(int value);
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BeginMainFrameState_MIN = static_cast<ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(0);
constexpr ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BeginMainFrameState_MAX = static_cast<ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(3);
constexpr int ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BeginMainFrameState_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorStateMachine_MajorState_BeginMainFrameState_descriptor();
template <typename T>
const std::string& ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorStateMachine_MajorState_BeginMainFrameState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BeginMainFrameState_Name().");
  return ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Name(static_cast<ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(value));
}
template <>
inline const std::string& ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Name(ChromeCompositorStateMachine_MajorState_BeginMainFrameState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorStateMachine_MajorState_BeginMainFrameState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Parse(absl::string_view name, ChromeCompositorStateMachine_MajorState_BeginMainFrameState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(
      ChromeCompositorStateMachine_MajorState_BeginMainFrameState_descriptor(), name, value);
}
enum ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState : int {
  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_UNSPECIFIED = 0,
  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_NONE = 1,
  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_ACTIVE = 2,
  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_CREATING = 3,
  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT = 4,
  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION = 5,
};

bool ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(int value);
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LayerTreeFrameSinkState_MIN = static_cast<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(0);
constexpr ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LayerTreeFrameSinkState_MAX = static_cast<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(5);
constexpr int ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LayerTreeFrameSinkState_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_descriptor();
template <typename T>
const std::string& ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LayerTreeFrameSinkState_Name().");
  return ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Name(static_cast<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(value));
}
template <>
inline const std::string& ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Name(ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Parse(absl::string_view name, ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(
      ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_descriptor(), name, value);
}
enum ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState : int {
  ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_UNSPECIFIED = 0,
  ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_IDLE = 1,
  ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_COMMIT = 2,
  ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_ACTIVATION = 3,
  ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_DRAW = 4,
};

bool ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(int value);
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ForcedRedrawOnTimeoutState_MIN = static_cast<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(0);
constexpr ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ForcedRedrawOnTimeoutState_MAX = static_cast<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(4);
constexpr int ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ForcedRedrawOnTimeoutState_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_descriptor();
template <typename T>
const std::string& ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ForcedRedrawOnTimeoutState_Name().");
  return ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Name(static_cast<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(value));
}
template <>
inline const std::string& ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Name(ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Parse(absl::string_view name, ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(
      ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_descriptor(), name, value);
}
enum ChromeCompositorStateMachine_MinorState_TreePriority : int {
  ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_UNSPECIFIED = 0,
  ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES = 1,
  ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY = 2,
  ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY = 3,
};

bool ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(int value);
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState_TreePriority_TreePriority_MIN = static_cast<ChromeCompositorStateMachine_MinorState_TreePriority>(0);
constexpr ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState_TreePriority_TreePriority_MAX = static_cast<ChromeCompositorStateMachine_MinorState_TreePriority>(3);
constexpr int ChromeCompositorStateMachine_MinorState_TreePriority_TreePriority_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorStateMachine_MinorState_TreePriority_descriptor();
template <typename T>
const std::string& ChromeCompositorStateMachine_MinorState_TreePriority_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorStateMachine_MinorState_TreePriority>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TreePriority_Name().");
  return ChromeCompositorStateMachine_MinorState_TreePriority_Name(static_cast<ChromeCompositorStateMachine_MinorState_TreePriority>(value));
}
template <>
inline const std::string& ChromeCompositorStateMachine_MinorState_TreePriority_Name(ChromeCompositorStateMachine_MinorState_TreePriority value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorStateMachine_MinorState_TreePriority_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ChromeCompositorStateMachine_MinorState_TreePriority_Parse(absl::string_view name, ChromeCompositorStateMachine_MinorState_TreePriority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorStateMachine_MinorState_TreePriority>(
      ChromeCompositorStateMachine_MinorState_TreePriority_descriptor(), name, value);
}
enum ChromeCompositorStateMachine_MinorState_ScrollHandlerState : int {
  ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_HANDLER_UNSPECIFIED = 0,
  ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_AFFECTS_SCROLL_HANDLER = 1,
  ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER = 2,
};

bool ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(int value);
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ScrollHandlerState_MIN = static_cast<ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(0);
constexpr ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ScrollHandlerState_MAX = static_cast<ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(2);
constexpr int ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ScrollHandlerState_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorStateMachine_MinorState_ScrollHandlerState_descriptor();
template <typename T>
const std::string& ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorStateMachine_MinorState_ScrollHandlerState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ScrollHandlerState_Name().");
  return ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Name(static_cast<ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(value));
}
template <>
inline const std::string& ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Name(ChromeCompositorStateMachine_MinorState_ScrollHandlerState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorStateMachine_MinorState_ScrollHandlerState_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Parse(absl::string_view name, ChromeCompositorStateMachine_MinorState_ScrollHandlerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(
      ChromeCompositorStateMachine_MinorState_ScrollHandlerState_descriptor(), name, value);
}
enum BeginFrameArgs_BeginFrameArgsType : int {
  BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED = 0,
  BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_INVALID = 1,
  BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_NORMAL = 2,
  BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_MISSED = 3,
};

bool BeginFrameArgs_BeginFrameArgsType_IsValid(int value);
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs_BeginFrameArgsType_BeginFrameArgsType_MIN = static_cast<BeginFrameArgs_BeginFrameArgsType>(0);
constexpr BeginFrameArgs_BeginFrameArgsType BeginFrameArgs_BeginFrameArgsType_BeginFrameArgsType_MAX = static_cast<BeginFrameArgs_BeginFrameArgsType>(3);
constexpr int BeginFrameArgs_BeginFrameArgsType_BeginFrameArgsType_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
BeginFrameArgs_BeginFrameArgsType_descriptor();
template <typename T>
const std::string& BeginFrameArgs_BeginFrameArgsType_Name(T value) {
  static_assert(std::is_same<T, BeginFrameArgs_BeginFrameArgsType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BeginFrameArgsType_Name().");
  return BeginFrameArgs_BeginFrameArgsType_Name(static_cast<BeginFrameArgs_BeginFrameArgsType>(value));
}
template <>
inline const std::string& BeginFrameArgs_BeginFrameArgsType_Name(BeginFrameArgs_BeginFrameArgsType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<BeginFrameArgs_BeginFrameArgsType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool BeginFrameArgs_BeginFrameArgsType_Parse(absl::string_view name, BeginFrameArgs_BeginFrameArgsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeginFrameArgs_BeginFrameArgsType>(
      BeginFrameArgs_BeginFrameArgsType_descriptor(), name, value);
}
enum BeginImplFrameArgs_State : int {
  BeginImplFrameArgs_State_BEGIN_FRAME_FINISHED = 0,
  BeginImplFrameArgs_State_BEGIN_FRAME_USING = 1,
};

bool BeginImplFrameArgs_State_IsValid(int value);
constexpr BeginImplFrameArgs_State BeginImplFrameArgs_State_State_MIN = static_cast<BeginImplFrameArgs_State>(0);
constexpr BeginImplFrameArgs_State BeginImplFrameArgs_State_State_MAX = static_cast<BeginImplFrameArgs_State>(1);
constexpr int BeginImplFrameArgs_State_State_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
BeginImplFrameArgs_State_descriptor();
template <typename T>
const std::string& BeginImplFrameArgs_State_Name(T value) {
  static_assert(std::is_same<T, BeginImplFrameArgs_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return BeginImplFrameArgs_State_Name(static_cast<BeginImplFrameArgs_State>(value));
}
template <>
inline const std::string& BeginImplFrameArgs_State_Name(BeginImplFrameArgs_State value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<BeginImplFrameArgs_State_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool BeginImplFrameArgs_State_Parse(absl::string_view name, BeginImplFrameArgs_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BeginImplFrameArgs_State>(
      BeginImplFrameArgs_State_descriptor(), name, value);
}
enum ChromeCompositorSchedulerAction : int {
  CC_SCHEDULER_ACTION_UNSPECIFIED = 0,
  CC_SCHEDULER_ACTION_NONE = 1,
  CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME = 2,
  CC_SCHEDULER_ACTION_COMMIT = 3,
  CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE = 4,
  CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE = 5,
  CC_SCHEDULER_ACTION_DRAW_FORCED = 6,
  CC_SCHEDULER_ACTION_DRAW_ABORT = 7,
  CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION = 8,
  CC_SCHEDULER_ACTION_PREPARE_TILES = 9,
  CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK = 10,
  CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION = 11,
  CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL = 12,
  CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON = 13,
};

bool ChromeCompositorSchedulerAction_IsValid(int value);
constexpr ChromeCompositorSchedulerAction ChromeCompositorSchedulerAction_MIN = static_cast<ChromeCompositorSchedulerAction>(0);
constexpr ChromeCompositorSchedulerAction ChromeCompositorSchedulerAction_MAX = static_cast<ChromeCompositorSchedulerAction>(13);
constexpr int ChromeCompositorSchedulerAction_ARRAYSIZE = 13 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeCompositorSchedulerAction_descriptor();
template <typename T>
const std::string& ChromeCompositorSchedulerAction_Name(T value) {
  static_assert(std::is_same<T, ChromeCompositorSchedulerAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChromeCompositorSchedulerAction_Name().");
  return ChromeCompositorSchedulerAction_Name(static_cast<ChromeCompositorSchedulerAction>(value));
}
template <>
inline const std::string& ChromeCompositorSchedulerAction_Name(ChromeCompositorSchedulerAction value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeCompositorSchedulerAction_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool ChromeCompositorSchedulerAction_Parse(absl::string_view name, ChromeCompositorSchedulerAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeCompositorSchedulerAction>(
      ChromeCompositorSchedulerAction_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChromeCompositorSchedulerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeCompositorSchedulerState) */ {
 public:
  inline ChromeCompositorSchedulerState() : ChromeCompositorSchedulerState(nullptr) {}
  ~ChromeCompositorSchedulerState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeCompositorSchedulerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeCompositorSchedulerState(const ChromeCompositorSchedulerState& from);
  ChromeCompositorSchedulerState(ChromeCompositorSchedulerState&& from) noexcept
    : ChromeCompositorSchedulerState() {
    *this = ::std::move(from);
  }

  inline ChromeCompositorSchedulerState& operator=(const ChromeCompositorSchedulerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeCompositorSchedulerState& operator=(ChromeCompositorSchedulerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeCompositorSchedulerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeCompositorSchedulerState* internal_default_instance() {
    return reinterpret_cast<const ChromeCompositorSchedulerState*>(
               &_ChromeCompositorSchedulerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeCompositorSchedulerState& a, ChromeCompositorSchedulerState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeCompositorSchedulerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeCompositorSchedulerState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeCompositorSchedulerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeCompositorSchedulerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeCompositorSchedulerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeCompositorSchedulerState& from) {
    ChromeCompositorSchedulerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeCompositorSchedulerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeCompositorSchedulerState";
  }
  protected:
  explicit ChromeCompositorSchedulerState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BeginImplFrameDeadlineMode = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode;
  static constexpr BeginImplFrameDeadlineMode DEADLINE_MODE_UNSPECIFIED = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_UNSPECIFIED;
  static constexpr BeginImplFrameDeadlineMode DEADLINE_MODE_NONE = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_NONE;
  static constexpr BeginImplFrameDeadlineMode DEADLINE_MODE_IMMEDIATE = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_IMMEDIATE;
  static constexpr BeginImplFrameDeadlineMode DEADLINE_MODE_REGULAR = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_REGULAR;
  static constexpr BeginImplFrameDeadlineMode DEADLINE_MODE_LATE = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_LATE;
  static constexpr BeginImplFrameDeadlineMode DEADLINE_MODE_BLOCKED = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_DEADLINE_MODE_BLOCKED;
  static inline bool BeginImplFrameDeadlineMode_IsValid(int value) {
    return ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(value);
  }
  static constexpr BeginImplFrameDeadlineMode BeginImplFrameDeadlineMode_MIN = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_BeginImplFrameDeadlineMode_MIN;
  static constexpr BeginImplFrameDeadlineMode BeginImplFrameDeadlineMode_MAX = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_BeginImplFrameDeadlineMode_MAX;
  static constexpr int BeginImplFrameDeadlineMode_ARRAYSIZE = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_BeginImplFrameDeadlineMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeginImplFrameDeadlineMode_descriptor() {
    return ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_descriptor();
  }
  template <typename T>
  static inline const std::string& BeginImplFrameDeadlineMode_Name(T value) {
    return ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Name(value);
  }
  static inline bool BeginImplFrameDeadlineMode_Parse(absl::string_view name, BeginImplFrameDeadlineMode* value) {
    return ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateMachineFieldNumber = 1,
    kBeginImplFrameArgsFieldNumber = 14,
    kBeginFrameObserverStateFieldNumber = 15,
    kBeginFrameSourceStateFieldNumber = 16,
    kCompositorTimingHistoryFieldNumber = 17,
    kObservingBeginFrameSourceFieldNumber = 2,
    kBeginImplFrameDeadlineTaskFieldNumber = 3,
    kPendingBeginFrameTaskFieldNumber = 4,
    kSkippedLastFrameMissedExceededDeadlineFieldNumber = 5,
    kInsideActionFieldNumber = 7,
    kDeadlineUsFieldNumber = 9,
    kDeadlineScheduledAtUsFieldNumber = 10,
    kNowUsFieldNumber = 11,
    kNowToDeadlineDeltaUsFieldNumber = 12,
    kNowToDeadlineScheduledAtDeltaUsFieldNumber = 13,
    kDeadlineModeFieldNumber = 8,
  };
  // optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
  bool has_state_machine() const;
  void clear_state_machine() ;
  const ::perfetto::protos::ChromeCompositorStateMachine& state_machine() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeCompositorStateMachine* release_state_machine();
  ::perfetto::protos::ChromeCompositorStateMachine* mutable_state_machine();
  void set_allocated_state_machine(::perfetto::protos::ChromeCompositorStateMachine* state_machine);
  private:
  const ::perfetto::protos::ChromeCompositorStateMachine& _internal_state_machine() const;
  ::perfetto::protos::ChromeCompositorStateMachine* _internal_mutable_state_machine();
  public:
  void unsafe_arena_set_allocated_state_machine(
      ::perfetto::protos::ChromeCompositorStateMachine* state_machine);
  ::perfetto::protos::ChromeCompositorStateMachine* unsafe_arena_release_state_machine();
  // optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
  bool has_begin_impl_frame_args() const;
  void clear_begin_impl_frame_args() ;
  const ::perfetto::protos::BeginImplFrameArgs& begin_impl_frame_args() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginImplFrameArgs* release_begin_impl_frame_args();
  ::perfetto::protos::BeginImplFrameArgs* mutable_begin_impl_frame_args();
  void set_allocated_begin_impl_frame_args(::perfetto::protos::BeginImplFrameArgs* begin_impl_frame_args);
  private:
  const ::perfetto::protos::BeginImplFrameArgs& _internal_begin_impl_frame_args() const;
  ::perfetto::protos::BeginImplFrameArgs* _internal_mutable_begin_impl_frame_args();
  public:
  void unsafe_arena_set_allocated_begin_impl_frame_args(
      ::perfetto::protos::BeginImplFrameArgs* begin_impl_frame_args);
  ::perfetto::protos::BeginImplFrameArgs* unsafe_arena_release_begin_impl_frame_args();
  // optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
  bool has_begin_frame_observer_state() const;
  void clear_begin_frame_observer_state() ;
  const ::perfetto::protos::BeginFrameObserverState& begin_frame_observer_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginFrameObserverState* release_begin_frame_observer_state();
  ::perfetto::protos::BeginFrameObserverState* mutable_begin_frame_observer_state();
  void set_allocated_begin_frame_observer_state(::perfetto::protos::BeginFrameObserverState* begin_frame_observer_state);
  private:
  const ::perfetto::protos::BeginFrameObserverState& _internal_begin_frame_observer_state() const;
  ::perfetto::protos::BeginFrameObserverState* _internal_mutable_begin_frame_observer_state();
  public:
  void unsafe_arena_set_allocated_begin_frame_observer_state(
      ::perfetto::protos::BeginFrameObserverState* begin_frame_observer_state);
  ::perfetto::protos::BeginFrameObserverState* unsafe_arena_release_begin_frame_observer_state();
  // optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
  bool has_begin_frame_source_state() const;
  void clear_begin_frame_source_state() ;
  const ::perfetto::protos::BeginFrameSourceState& begin_frame_source_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginFrameSourceState* release_begin_frame_source_state();
  ::perfetto::protos::BeginFrameSourceState* mutable_begin_frame_source_state();
  void set_allocated_begin_frame_source_state(::perfetto::protos::BeginFrameSourceState* begin_frame_source_state);
  private:
  const ::perfetto::protos::BeginFrameSourceState& _internal_begin_frame_source_state() const;
  ::perfetto::protos::BeginFrameSourceState* _internal_mutable_begin_frame_source_state();
  public:
  void unsafe_arena_set_allocated_begin_frame_source_state(
      ::perfetto::protos::BeginFrameSourceState* begin_frame_source_state);
  ::perfetto::protos::BeginFrameSourceState* unsafe_arena_release_begin_frame_source_state();
  // optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
  bool has_compositor_timing_history() const;
  void clear_compositor_timing_history() ;
  const ::perfetto::protos::CompositorTimingHistory& compositor_timing_history() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CompositorTimingHistory* release_compositor_timing_history();
  ::perfetto::protos::CompositorTimingHistory* mutable_compositor_timing_history();
  void set_allocated_compositor_timing_history(::perfetto::protos::CompositorTimingHistory* compositor_timing_history);
  private:
  const ::perfetto::protos::CompositorTimingHistory& _internal_compositor_timing_history() const;
  ::perfetto::protos::CompositorTimingHistory* _internal_mutable_compositor_timing_history();
  public:
  void unsafe_arena_set_allocated_compositor_timing_history(
      ::perfetto::protos::CompositorTimingHistory* compositor_timing_history);
  ::perfetto::protos::CompositorTimingHistory* unsafe_arena_release_compositor_timing_history();
  // optional bool observing_begin_frame_source = 2;
  bool has_observing_begin_frame_source() const;
  void clear_observing_begin_frame_source() ;
  bool observing_begin_frame_source() const;
  void set_observing_begin_frame_source(bool value);

  private:
  bool _internal_observing_begin_frame_source() const;
  void _internal_set_observing_begin_frame_source(bool value);

  public:
  // optional bool begin_impl_frame_deadline_task = 3;
  bool has_begin_impl_frame_deadline_task() const;
  void clear_begin_impl_frame_deadline_task() ;
  bool begin_impl_frame_deadline_task() const;
  void set_begin_impl_frame_deadline_task(bool value);

  private:
  bool _internal_begin_impl_frame_deadline_task() const;
  void _internal_set_begin_impl_frame_deadline_task(bool value);

  public:
  // optional bool pending_begin_frame_task = 4;
  bool has_pending_begin_frame_task() const;
  void clear_pending_begin_frame_task() ;
  bool pending_begin_frame_task() const;
  void set_pending_begin_frame_task(bool value);

  private:
  bool _internal_pending_begin_frame_task() const;
  void _internal_set_pending_begin_frame_task(bool value);

  public:
  // optional bool skipped_last_frame_missed_exceeded_deadline = 5;
  bool has_skipped_last_frame_missed_exceeded_deadline() const;
  void clear_skipped_last_frame_missed_exceeded_deadline() ;
  bool skipped_last_frame_missed_exceeded_deadline() const;
  void set_skipped_last_frame_missed_exceeded_deadline(bool value);

  private:
  bool _internal_skipped_last_frame_missed_exceeded_deadline() const;
  void _internal_set_skipped_last_frame_missed_exceeded_deadline(bool value);

  public:
  // optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
  bool has_inside_action() const;
  void clear_inside_action() ;
  ::perfetto::protos::ChromeCompositorSchedulerAction inside_action() const;
  void set_inside_action(::perfetto::protos::ChromeCompositorSchedulerAction value);

  private:
  ::perfetto::protos::ChromeCompositorSchedulerAction _internal_inside_action() const;
  void _internal_set_inside_action(::perfetto::protos::ChromeCompositorSchedulerAction value);

  public:
  // optional int64 deadline_us = 9;
  bool has_deadline_us() const;
  void clear_deadline_us() ;
  ::int64_t deadline_us() const;
  void set_deadline_us(::int64_t value);

  private:
  ::int64_t _internal_deadline_us() const;
  void _internal_set_deadline_us(::int64_t value);

  public:
  // optional int64 deadline_scheduled_at_us = 10;
  bool has_deadline_scheduled_at_us() const;
  void clear_deadline_scheduled_at_us() ;
  ::int64_t deadline_scheduled_at_us() const;
  void set_deadline_scheduled_at_us(::int64_t value);

  private:
  ::int64_t _internal_deadline_scheduled_at_us() const;
  void _internal_set_deadline_scheduled_at_us(::int64_t value);

  public:
  // optional int64 now_us = 11;
  bool has_now_us() const;
  void clear_now_us() ;
  ::int64_t now_us() const;
  void set_now_us(::int64_t value);

  private:
  ::int64_t _internal_now_us() const;
  void _internal_set_now_us(::int64_t value);

  public:
  // optional int64 now_to_deadline_delta_us = 12;
  bool has_now_to_deadline_delta_us() const;
  void clear_now_to_deadline_delta_us() ;
  ::int64_t now_to_deadline_delta_us() const;
  void set_now_to_deadline_delta_us(::int64_t value);

  private:
  ::int64_t _internal_now_to_deadline_delta_us() const;
  void _internal_set_now_to_deadline_delta_us(::int64_t value);

  public:
  // optional int64 now_to_deadline_scheduled_at_delta_us = 13;
  bool has_now_to_deadline_scheduled_at_delta_us() const;
  void clear_now_to_deadline_scheduled_at_delta_us() ;
  ::int64_t now_to_deadline_scheduled_at_delta_us() const;
  void set_now_to_deadline_scheduled_at_delta_us(::int64_t value);

  private:
  ::int64_t _internal_now_to_deadline_scheduled_at_delta_us() const;
  void _internal_set_now_to_deadline_scheduled_at_delta_us(::int64_t value);

  public:
  // optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
  bool has_deadline_mode() const;
  void clear_deadline_mode() ;
  ::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode deadline_mode() const;
  void set_deadline_mode(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value);

  private:
  ::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode _internal_deadline_mode() const;
  void _internal_set_deadline_mode(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeCompositorSchedulerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::ChromeCompositorStateMachine* state_machine_;
    ::perfetto::protos::BeginImplFrameArgs* begin_impl_frame_args_;
    ::perfetto::protos::BeginFrameObserverState* begin_frame_observer_state_;
    ::perfetto::protos::BeginFrameSourceState* begin_frame_source_state_;
    ::perfetto::protos::CompositorTimingHistory* compositor_timing_history_;
    bool observing_begin_frame_source_;
    bool begin_impl_frame_deadline_task_;
    bool pending_begin_frame_task_;
    bool skipped_last_frame_missed_exceeded_deadline_;
    int inside_action_;
    ::int64_t deadline_us_;
    ::int64_t deadline_scheduled_at_us_;
    ::int64_t now_us_;
    ::int64_t now_to_deadline_delta_us_;
    ::int64_t now_to_deadline_scheduled_at_delta_us_;
    int deadline_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class ChromeCompositorStateMachine_MajorState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeCompositorStateMachine.MajorState) */ {
 public:
  inline ChromeCompositorStateMachine_MajorState() : ChromeCompositorStateMachine_MajorState(nullptr) {}
  ~ChromeCompositorStateMachine_MajorState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeCompositorStateMachine_MajorState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeCompositorStateMachine_MajorState(const ChromeCompositorStateMachine_MajorState& from);
  ChromeCompositorStateMachine_MajorState(ChromeCompositorStateMachine_MajorState&& from) noexcept
    : ChromeCompositorStateMachine_MajorState() {
    *this = ::std::move(from);
  }

  inline ChromeCompositorStateMachine_MajorState& operator=(const ChromeCompositorStateMachine_MajorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeCompositorStateMachine_MajorState& operator=(ChromeCompositorStateMachine_MajorState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeCompositorStateMachine_MajorState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeCompositorStateMachine_MajorState* internal_default_instance() {
    return reinterpret_cast<const ChromeCompositorStateMachine_MajorState*>(
               &_ChromeCompositorStateMachine_MajorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeCompositorStateMachine_MajorState& a, ChromeCompositorStateMachine_MajorState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeCompositorStateMachine_MajorState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeCompositorStateMachine_MajorState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeCompositorStateMachine_MajorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeCompositorStateMachine_MajorState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeCompositorStateMachine_MajorState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeCompositorStateMachine_MajorState& from) {
    ChromeCompositorStateMachine_MajorState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeCompositorStateMachine_MajorState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeCompositorStateMachine.MajorState";
  }
  protected:
  explicit ChromeCompositorStateMachine_MajorState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BeginImplFrameState = ChromeCompositorStateMachine_MajorState_BeginImplFrameState;
  static constexpr BeginImplFrameState BEGIN_IMPL_FRAME_UNSPECIFIED = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_UNSPECIFIED;
  static constexpr BeginImplFrameState BEGIN_IMPL_FRAME_IDLE = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_IDLE;
  static constexpr BeginImplFrameState BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME;
  static constexpr BeginImplFrameState BEGIN_IMPL_FRAME_INSIDE_DEADLINE = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BEGIN_IMPL_FRAME_INSIDE_DEADLINE;
  static inline bool BeginImplFrameState_IsValid(int value) {
    return ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(value);
  }
  static constexpr BeginImplFrameState BeginImplFrameState_MIN = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BeginImplFrameState_MIN;
  static constexpr BeginImplFrameState BeginImplFrameState_MAX = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BeginImplFrameState_MAX;
  static constexpr int BeginImplFrameState_ARRAYSIZE = ChromeCompositorStateMachine_MajorState_BeginImplFrameState_BeginImplFrameState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeginImplFrameState_descriptor() {
    return ChromeCompositorStateMachine_MajorState_BeginImplFrameState_descriptor();
  }
  template <typename T>
  static inline const std::string& BeginImplFrameState_Name(T value) {
    return ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Name(value);
  }
  static inline bool BeginImplFrameState_Parse(absl::string_view name, BeginImplFrameState* value) {
    return ChromeCompositorStateMachine_MajorState_BeginImplFrameState_Parse(name, value);
  }

  using BeginMainFrameState = ChromeCompositorStateMachine_MajorState_BeginMainFrameState;
  static constexpr BeginMainFrameState BEGIN_MAIN_FRAME_UNSPECIFIED = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_UNSPECIFIED;
  static constexpr BeginMainFrameState BEGIN_MAIN_FRAME_IDLE = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_IDLE;
  static constexpr BeginMainFrameState BEGIN_MAIN_FRAME_SENT = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_SENT;
  static constexpr BeginMainFrameState BEGIN_MAIN_FRAME_READY_TO_COMMIT = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BEGIN_MAIN_FRAME_READY_TO_COMMIT;
  static inline bool BeginMainFrameState_IsValid(int value) {
    return ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(value);
  }
  static constexpr BeginMainFrameState BeginMainFrameState_MIN = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BeginMainFrameState_MIN;
  static constexpr BeginMainFrameState BeginMainFrameState_MAX = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BeginMainFrameState_MAX;
  static constexpr int BeginMainFrameState_ARRAYSIZE = ChromeCompositorStateMachine_MajorState_BeginMainFrameState_BeginMainFrameState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeginMainFrameState_descriptor() {
    return ChromeCompositorStateMachine_MajorState_BeginMainFrameState_descriptor();
  }
  template <typename T>
  static inline const std::string& BeginMainFrameState_Name(T value) {
    return ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Name(value);
  }
  static inline bool BeginMainFrameState_Parse(absl::string_view name, BeginMainFrameState* value) {
    return ChromeCompositorStateMachine_MajorState_BeginMainFrameState_Parse(name, value);
  }

  using LayerTreeFrameSinkState = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState;
  static constexpr LayerTreeFrameSinkState LAYER_TREE_FRAME_UNSPECIFIED = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_UNSPECIFIED;
  static constexpr LayerTreeFrameSinkState LAYER_TREE_FRAME_NONE = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_NONE;
  static constexpr LayerTreeFrameSinkState LAYER_TREE_FRAME_ACTIVE = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_ACTIVE;
  static constexpr LayerTreeFrameSinkState LAYER_TREE_FRAME_CREATING = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_CREATING;
  static constexpr LayerTreeFrameSinkState LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT;
  static constexpr LayerTreeFrameSinkState LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION;
  static inline bool LayerTreeFrameSinkState_IsValid(int value) {
    return ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(value);
  }
  static constexpr LayerTreeFrameSinkState LayerTreeFrameSinkState_MIN = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LayerTreeFrameSinkState_MIN;
  static constexpr LayerTreeFrameSinkState LayerTreeFrameSinkState_MAX = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LayerTreeFrameSinkState_MAX;
  static constexpr int LayerTreeFrameSinkState_ARRAYSIZE = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_LayerTreeFrameSinkState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LayerTreeFrameSinkState_descriptor() {
    return ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_descriptor();
  }
  template <typename T>
  static inline const std::string& LayerTreeFrameSinkState_Name(T value) {
    return ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Name(value);
  }
  static inline bool LayerTreeFrameSinkState_Parse(absl::string_view name, LayerTreeFrameSinkState* value) {
    return ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_Parse(name, value);
  }

  using ForcedRedrawOnTimeoutState = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState;
  static constexpr ForcedRedrawOnTimeoutState FORCED_REDRAW_UNSPECIFIED = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_UNSPECIFIED;
  static constexpr ForcedRedrawOnTimeoutState FORCED_REDRAW_IDLE = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_IDLE;
  static constexpr ForcedRedrawOnTimeoutState FORCED_REDRAW_WAITING_FOR_COMMIT = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_COMMIT;
  static constexpr ForcedRedrawOnTimeoutState FORCED_REDRAW_WAITING_FOR_ACTIVATION = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_ACTIVATION;
  static constexpr ForcedRedrawOnTimeoutState FORCED_REDRAW_WAITING_FOR_DRAW = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_FORCED_REDRAW_WAITING_FOR_DRAW;
  static inline bool ForcedRedrawOnTimeoutState_IsValid(int value) {
    return ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(value);
  }
  static constexpr ForcedRedrawOnTimeoutState ForcedRedrawOnTimeoutState_MIN = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ForcedRedrawOnTimeoutState_MIN;
  static constexpr ForcedRedrawOnTimeoutState ForcedRedrawOnTimeoutState_MAX = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ForcedRedrawOnTimeoutState_MAX;
  static constexpr int ForcedRedrawOnTimeoutState_ARRAYSIZE = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_ForcedRedrawOnTimeoutState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForcedRedrawOnTimeoutState_descriptor() {
    return ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_descriptor();
  }
  template <typename T>
  static inline const std::string& ForcedRedrawOnTimeoutState_Name(T value) {
    return ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Name(value);
  }
  static inline bool ForcedRedrawOnTimeoutState_Parse(absl::string_view name, ForcedRedrawOnTimeoutState* value) {
    return ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextActionFieldNumber = 1,
    kBeginImplFrameStateFieldNumber = 2,
    kBeginMainFrameStateFieldNumber = 3,
    kLayerTreeFrameSinkStateFieldNumber = 4,
    kForcedRedrawStateFieldNumber = 5,
  };
  // optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
  bool has_next_action() const;
  void clear_next_action() ;
  ::perfetto::protos::ChromeCompositorSchedulerAction next_action() const;
  void set_next_action(::perfetto::protos::ChromeCompositorSchedulerAction value);

  private:
  ::perfetto::protos::ChromeCompositorSchedulerAction _internal_next_action() const;
  void _internal_set_next_action(::perfetto::protos::ChromeCompositorSchedulerAction value);

  public:
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
  bool has_begin_impl_frame_state() const;
  void clear_begin_impl_frame_state() ;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState begin_impl_frame_state() const;
  void set_begin_impl_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState value);

  private:
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState _internal_begin_impl_frame_state() const;
  void _internal_set_begin_impl_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState value);

  public:
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
  bool has_begin_main_frame_state() const;
  void clear_begin_main_frame_state() ;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState begin_main_frame_state() const;
  void set_begin_main_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState value);

  private:
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState _internal_begin_main_frame_state() const;
  void _internal_set_begin_main_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState value);

  public:
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
  bool has_layer_tree_frame_sink_state() const;
  void clear_layer_tree_frame_sink_state() ;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState layer_tree_frame_sink_state() const;
  void set_layer_tree_frame_sink_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value);

  private:
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState _internal_layer_tree_frame_sink_state() const;
  void _internal_set_layer_tree_frame_sink_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value);

  public:
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
  bool has_forced_redraw_state() const;
  void clear_forced_redraw_state() ;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState forced_redraw_state() const;
  void set_forced_redraw_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value);

  private:
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState _internal_forced_redraw_state() const;
  void _internal_set_forced_redraw_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeCompositorStateMachine.MajorState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int next_action_;
    int begin_impl_frame_state_;
    int begin_main_frame_state_;
    int layer_tree_frame_sink_state_;
    int forced_redraw_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class ChromeCompositorStateMachine_MinorState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeCompositorStateMachine.MinorState) */ {
 public:
  inline ChromeCompositorStateMachine_MinorState() : ChromeCompositorStateMachine_MinorState(nullptr) {}
  ~ChromeCompositorStateMachine_MinorState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeCompositorStateMachine_MinorState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeCompositorStateMachine_MinorState(const ChromeCompositorStateMachine_MinorState& from);
  ChromeCompositorStateMachine_MinorState(ChromeCompositorStateMachine_MinorState&& from) noexcept
    : ChromeCompositorStateMachine_MinorState() {
    *this = ::std::move(from);
  }

  inline ChromeCompositorStateMachine_MinorState& operator=(const ChromeCompositorStateMachine_MinorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeCompositorStateMachine_MinorState& operator=(ChromeCompositorStateMachine_MinorState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeCompositorStateMachine_MinorState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeCompositorStateMachine_MinorState* internal_default_instance() {
    return reinterpret_cast<const ChromeCompositorStateMachine_MinorState*>(
               &_ChromeCompositorStateMachine_MinorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChromeCompositorStateMachine_MinorState& a, ChromeCompositorStateMachine_MinorState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeCompositorStateMachine_MinorState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeCompositorStateMachine_MinorState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeCompositorStateMachine_MinorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeCompositorStateMachine_MinorState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeCompositorStateMachine_MinorState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeCompositorStateMachine_MinorState& from) {
    ChromeCompositorStateMachine_MinorState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeCompositorStateMachine_MinorState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeCompositorStateMachine.MinorState";
  }
  protected:
  explicit ChromeCompositorStateMachine_MinorState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TreePriority = ChromeCompositorStateMachine_MinorState_TreePriority;
  static constexpr TreePriority TREE_PRIORITY_UNSPECIFIED = ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_UNSPECIFIED;
  static constexpr TreePriority TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES = ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES;
  static constexpr TreePriority TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY = ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY;
  static constexpr TreePriority TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY = ChromeCompositorStateMachine_MinorState_TreePriority_TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY;
  static inline bool TreePriority_IsValid(int value) {
    return ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(value);
  }
  static constexpr TreePriority TreePriority_MIN = ChromeCompositorStateMachine_MinorState_TreePriority_TreePriority_MIN;
  static constexpr TreePriority TreePriority_MAX = ChromeCompositorStateMachine_MinorState_TreePriority_TreePriority_MAX;
  static constexpr int TreePriority_ARRAYSIZE = ChromeCompositorStateMachine_MinorState_TreePriority_TreePriority_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TreePriority_descriptor() {
    return ChromeCompositorStateMachine_MinorState_TreePriority_descriptor();
  }
  template <typename T>
  static inline const std::string& TreePriority_Name(T value) {
    return ChromeCompositorStateMachine_MinorState_TreePriority_Name(value);
  }
  static inline bool TreePriority_Parse(absl::string_view name, TreePriority* value) {
    return ChromeCompositorStateMachine_MinorState_TreePriority_Parse(name, value);
  }

  using ScrollHandlerState = ChromeCompositorStateMachine_MinorState_ScrollHandlerState;
  static constexpr ScrollHandlerState SCROLL_HANDLER_UNSPECIFIED = ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_HANDLER_UNSPECIFIED;
  static constexpr ScrollHandlerState SCROLL_AFFECTS_SCROLL_HANDLER = ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_AFFECTS_SCROLL_HANDLER;
  static constexpr ScrollHandlerState SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER = ChromeCompositorStateMachine_MinorState_ScrollHandlerState_SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER;
  static inline bool ScrollHandlerState_IsValid(int value) {
    return ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(value);
  }
  static constexpr ScrollHandlerState ScrollHandlerState_MIN = ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ScrollHandlerState_MIN;
  static constexpr ScrollHandlerState ScrollHandlerState_MAX = ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ScrollHandlerState_MAX;
  static constexpr int ScrollHandlerState_ARRAYSIZE = ChromeCompositorStateMachine_MinorState_ScrollHandlerState_ScrollHandlerState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScrollHandlerState_descriptor() {
    return ChromeCompositorStateMachine_MinorState_ScrollHandlerState_descriptor();
  }
  template <typename T>
  static inline const std::string& ScrollHandlerState_Name(T value) {
    return ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Name(value);
  }
  static inline bool ScrollHandlerState_Parse(absl::string_view name, ScrollHandlerState* value) {
    return ChromeCompositorStateMachine_MinorState_ScrollHandlerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommitCountFieldNumber = 1,
    kCurrentFrameNumberFieldNumber = 2,
    kLastFrameNumberSubmitPerformedFieldNumber = 3,
    kLastFrameNumberDrawPerformedFieldNumber = 4,
    kLastFrameNumberBeginMainFrameSentFieldNumber = 5,
    kDidDrawFieldNumber = 6,
    kDidSendBeginMainFrameForCurrentFrameFieldNumber = 7,
    kDidNotifyBeginMainFrameNotExpectedUntilFieldNumber = 8,
    kDidNotifyBeginMainFrameNotExpectedSoonFieldNumber = 9,
    kWantsBeginMainFrameNotExpectedFieldNumber = 10,
    kDidCommitDuringFrameFieldNumber = 11,
    kDidInvalidateLayerTreeFrameSinkFieldNumber = 12,
    kDidPerformImplSideInvalidaionFieldNumber = 13,
    kConsecutiveCheckerboardAnimationsFieldNumber = 15,
    kPendingSubmitFramesFieldNumber = 16,
    kSubmitFramesWithCurrentLayerTreeFrameSinkFieldNumber = 17,
    kDidPrepareTilesFieldNumber = 14,
    kNeedsRedrawFieldNumber = 18,
    kNeedsPrepareTilesFieldNumber = 19,
    kNeedsBeginMainFrameFieldNumber = 20,
    kNeedsOneBeginImplFrameFieldNumber = 21,
    kVisibleFieldNumber = 22,
    kBeginFrameSourcePausedFieldNumber = 23,
    kCanDrawFieldNumber = 24,
    kResourcelessDrawFieldNumber = 25,
    kHasPendingTreeFieldNumber = 26,
    kPendingTreeIsReadyForActivationFieldNumber = 27,
    kActiveTreeNeedsFirstDrawFieldNumber = 28,
    kTreePriorityFieldNumber = 31,
    kActiveTreeIsReadyToDrawFieldNumber = 29,
    kDidCreateAndInitializeFirstLayerTreeFrameSinkFieldNumber = 30,
    kCriticalBeginMainFrameToActivateIsFastFieldNumber = 33,
    kMainThreadMissedLastDeadlineFieldNumber = 34,
    kScrollHandlerStateFieldNumber = 32,
    kVideoNeedsBeginFramesFieldNumber = 36,
    kDeferBeginMainFrameFieldNumber = 37,
    kLastCommitHadNoUpdatesFieldNumber = 38,
    kDidDrawInLastFrameFieldNumber = 39,
    kDidSubmitInLastFrameFieldNumber = 40,
    kNeedsImplSideInvalidationFieldNumber = 41,
    kCurrentPendingTreeIsImplSideFieldNumber = 42,
    kPreviousPendingTreeWasImplSideFieldNumber = 43,
    kProcessingAnimationWorkletsForActiveTreeFieldNumber = 44,
    kProcessingAnimationWorkletsForPendingTreeFieldNumber = 45,
    kProcessingPaintWorkletsForPendingTreeFieldNumber = 46,
  };
  // optional int32 commit_count = 1;
  bool has_commit_count() const;
  void clear_commit_count() ;
  ::int32_t commit_count() const;
  void set_commit_count(::int32_t value);

  private:
  ::int32_t _internal_commit_count() const;
  void _internal_set_commit_count(::int32_t value);

  public:
  // optional int32 current_frame_number = 2;
  bool has_current_frame_number() const;
  void clear_current_frame_number() ;
  ::int32_t current_frame_number() const;
  void set_current_frame_number(::int32_t value);

  private:
  ::int32_t _internal_current_frame_number() const;
  void _internal_set_current_frame_number(::int32_t value);

  public:
  // optional int32 last_frame_number_submit_performed = 3;
  bool has_last_frame_number_submit_performed() const;
  void clear_last_frame_number_submit_performed() ;
  ::int32_t last_frame_number_submit_performed() const;
  void set_last_frame_number_submit_performed(::int32_t value);

  private:
  ::int32_t _internal_last_frame_number_submit_performed() const;
  void _internal_set_last_frame_number_submit_performed(::int32_t value);

  public:
  // optional int32 last_frame_number_draw_performed = 4;
  bool has_last_frame_number_draw_performed() const;
  void clear_last_frame_number_draw_performed() ;
  ::int32_t last_frame_number_draw_performed() const;
  void set_last_frame_number_draw_performed(::int32_t value);

  private:
  ::int32_t _internal_last_frame_number_draw_performed() const;
  void _internal_set_last_frame_number_draw_performed(::int32_t value);

  public:
  // optional int32 last_frame_number_begin_main_frame_sent = 5;
  bool has_last_frame_number_begin_main_frame_sent() const;
  void clear_last_frame_number_begin_main_frame_sent() ;
  ::int32_t last_frame_number_begin_main_frame_sent() const;
  void set_last_frame_number_begin_main_frame_sent(::int32_t value);

  private:
  ::int32_t _internal_last_frame_number_begin_main_frame_sent() const;
  void _internal_set_last_frame_number_begin_main_frame_sent(::int32_t value);

  public:
  // optional bool did_draw = 6;
  bool has_did_draw() const;
  void clear_did_draw() ;
  bool did_draw() const;
  void set_did_draw(bool value);

  private:
  bool _internal_did_draw() const;
  void _internal_set_did_draw(bool value);

  public:
  // optional bool did_send_begin_main_frame_for_current_frame = 7;
  bool has_did_send_begin_main_frame_for_current_frame() const;
  void clear_did_send_begin_main_frame_for_current_frame() ;
  bool did_send_begin_main_frame_for_current_frame() const;
  void set_did_send_begin_main_frame_for_current_frame(bool value);

  private:
  bool _internal_did_send_begin_main_frame_for_current_frame() const;
  void _internal_set_did_send_begin_main_frame_for_current_frame(bool value);

  public:
  // optional bool did_notify_begin_main_frame_not_expected_until = 8;
  bool has_did_notify_begin_main_frame_not_expected_until() const;
  void clear_did_notify_begin_main_frame_not_expected_until() ;
  bool did_notify_begin_main_frame_not_expected_until() const;
  void set_did_notify_begin_main_frame_not_expected_until(bool value);

  private:
  bool _internal_did_notify_begin_main_frame_not_expected_until() const;
  void _internal_set_did_notify_begin_main_frame_not_expected_until(bool value);

  public:
  // optional bool did_notify_begin_main_frame_not_expected_soon = 9;
  bool has_did_notify_begin_main_frame_not_expected_soon() const;
  void clear_did_notify_begin_main_frame_not_expected_soon() ;
  bool did_notify_begin_main_frame_not_expected_soon() const;
  void set_did_notify_begin_main_frame_not_expected_soon(bool value);

  private:
  bool _internal_did_notify_begin_main_frame_not_expected_soon() const;
  void _internal_set_did_notify_begin_main_frame_not_expected_soon(bool value);

  public:
  // optional bool wants_begin_main_frame_not_expected = 10;
  bool has_wants_begin_main_frame_not_expected() const;
  void clear_wants_begin_main_frame_not_expected() ;
  bool wants_begin_main_frame_not_expected() const;
  void set_wants_begin_main_frame_not_expected(bool value);

  private:
  bool _internal_wants_begin_main_frame_not_expected() const;
  void _internal_set_wants_begin_main_frame_not_expected(bool value);

  public:
  // optional bool did_commit_during_frame = 11;
  bool has_did_commit_during_frame() const;
  void clear_did_commit_during_frame() ;
  bool did_commit_during_frame() const;
  void set_did_commit_during_frame(bool value);

  private:
  bool _internal_did_commit_during_frame() const;
  void _internal_set_did_commit_during_frame(bool value);

  public:
  // optional bool did_invalidate_layer_tree_frame_sink = 12;
  bool has_did_invalidate_layer_tree_frame_sink() const;
  void clear_did_invalidate_layer_tree_frame_sink() ;
  bool did_invalidate_layer_tree_frame_sink() const;
  void set_did_invalidate_layer_tree_frame_sink(bool value);

  private:
  bool _internal_did_invalidate_layer_tree_frame_sink() const;
  void _internal_set_did_invalidate_layer_tree_frame_sink(bool value);

  public:
  // optional bool did_perform_impl_side_invalidaion = 13;
  bool has_did_perform_impl_side_invalidaion() const;
  void clear_did_perform_impl_side_invalidaion() ;
  bool did_perform_impl_side_invalidaion() const;
  void set_did_perform_impl_side_invalidaion(bool value);

  private:
  bool _internal_did_perform_impl_side_invalidaion() const;
  void _internal_set_did_perform_impl_side_invalidaion(bool value);

  public:
  // optional int32 consecutive_checkerboard_animations = 15;
  bool has_consecutive_checkerboard_animations() const;
  void clear_consecutive_checkerboard_animations() ;
  ::int32_t consecutive_checkerboard_animations() const;
  void set_consecutive_checkerboard_animations(::int32_t value);

  private:
  ::int32_t _internal_consecutive_checkerboard_animations() const;
  void _internal_set_consecutive_checkerboard_animations(::int32_t value);

  public:
  // optional int32 pending_submit_frames = 16;
  bool has_pending_submit_frames() const;
  void clear_pending_submit_frames() ;
  ::int32_t pending_submit_frames() const;
  void set_pending_submit_frames(::int32_t value);

  private:
  ::int32_t _internal_pending_submit_frames() const;
  void _internal_set_pending_submit_frames(::int32_t value);

  public:
  // optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
  bool has_submit_frames_with_current_layer_tree_frame_sink() const;
  void clear_submit_frames_with_current_layer_tree_frame_sink() ;
  ::int32_t submit_frames_with_current_layer_tree_frame_sink() const;
  void set_submit_frames_with_current_layer_tree_frame_sink(::int32_t value);

  private:
  ::int32_t _internal_submit_frames_with_current_layer_tree_frame_sink() const;
  void _internal_set_submit_frames_with_current_layer_tree_frame_sink(::int32_t value);

  public:
  // optional bool did_prepare_tiles = 14;
  bool has_did_prepare_tiles() const;
  void clear_did_prepare_tiles() ;
  bool did_prepare_tiles() const;
  void set_did_prepare_tiles(bool value);

  private:
  bool _internal_did_prepare_tiles() const;
  void _internal_set_did_prepare_tiles(bool value);

  public:
  // optional bool needs_redraw = 18;
  bool has_needs_redraw() const;
  void clear_needs_redraw() ;
  bool needs_redraw() const;
  void set_needs_redraw(bool value);

  private:
  bool _internal_needs_redraw() const;
  void _internal_set_needs_redraw(bool value);

  public:
  // optional bool needs_prepare_tiles = 19;
  bool has_needs_prepare_tiles() const;
  void clear_needs_prepare_tiles() ;
  bool needs_prepare_tiles() const;
  void set_needs_prepare_tiles(bool value);

  private:
  bool _internal_needs_prepare_tiles() const;
  void _internal_set_needs_prepare_tiles(bool value);

  public:
  // optional bool needs_begin_main_frame = 20;
  bool has_needs_begin_main_frame() const;
  void clear_needs_begin_main_frame() ;
  bool needs_begin_main_frame() const;
  void set_needs_begin_main_frame(bool value);

  private:
  bool _internal_needs_begin_main_frame() const;
  void _internal_set_needs_begin_main_frame(bool value);

  public:
  // optional bool needs_one_begin_impl_frame = 21;
  bool has_needs_one_begin_impl_frame() const;
  void clear_needs_one_begin_impl_frame() ;
  bool needs_one_begin_impl_frame() const;
  void set_needs_one_begin_impl_frame(bool value);

  private:
  bool _internal_needs_one_begin_impl_frame() const;
  void _internal_set_needs_one_begin_impl_frame(bool value);

  public:
  // optional bool visible = 22;
  bool has_visible() const;
  void clear_visible() ;
  bool visible() const;
  void set_visible(bool value);

  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);

  public:
  // optional bool begin_frame_source_paused = 23;
  bool has_begin_frame_source_paused() const;
  void clear_begin_frame_source_paused() ;
  bool begin_frame_source_paused() const;
  void set_begin_frame_source_paused(bool value);

  private:
  bool _internal_begin_frame_source_paused() const;
  void _internal_set_begin_frame_source_paused(bool value);

  public:
  // optional bool can_draw = 24;
  bool has_can_draw() const;
  void clear_can_draw() ;
  bool can_draw() const;
  void set_can_draw(bool value);

  private:
  bool _internal_can_draw() const;
  void _internal_set_can_draw(bool value);

  public:
  // optional bool resourceless_draw = 25;
  bool has_resourceless_draw() const;
  void clear_resourceless_draw() ;
  bool resourceless_draw() const;
  void set_resourceless_draw(bool value);

  private:
  bool _internal_resourceless_draw() const;
  void _internal_set_resourceless_draw(bool value);

  public:
  // optional bool has_pending_tree = 26;
  bool has_has_pending_tree() const;
  void clear_has_pending_tree() ;
  bool has_pending_tree() const;
  void set_has_pending_tree(bool value);

  private:
  bool _internal_has_pending_tree() const;
  void _internal_set_has_pending_tree(bool value);

  public:
  // optional bool pending_tree_is_ready_for_activation = 27;
  bool has_pending_tree_is_ready_for_activation() const;
  void clear_pending_tree_is_ready_for_activation() ;
  bool pending_tree_is_ready_for_activation() const;
  void set_pending_tree_is_ready_for_activation(bool value);

  private:
  bool _internal_pending_tree_is_ready_for_activation() const;
  void _internal_set_pending_tree_is_ready_for_activation(bool value);

  public:
  // optional bool active_tree_needs_first_draw = 28;
  bool has_active_tree_needs_first_draw() const;
  void clear_active_tree_needs_first_draw() ;
  bool active_tree_needs_first_draw() const;
  void set_active_tree_needs_first_draw(bool value);

  private:
  bool _internal_active_tree_needs_first_draw() const;
  void _internal_set_active_tree_needs_first_draw(bool value);

  public:
  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
  bool has_tree_priority() const;
  void clear_tree_priority() ;
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority tree_priority() const;
  void set_tree_priority(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority value);

  private:
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority _internal_tree_priority() const;
  void _internal_set_tree_priority(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority value);

  public:
  // optional bool active_tree_is_ready_to_draw = 29;
  bool has_active_tree_is_ready_to_draw() const;
  void clear_active_tree_is_ready_to_draw() ;
  bool active_tree_is_ready_to_draw() const;
  void set_active_tree_is_ready_to_draw(bool value);

  private:
  bool _internal_active_tree_is_ready_to_draw() const;
  void _internal_set_active_tree_is_ready_to_draw(bool value);

  public:
  // optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
  bool has_did_create_and_initialize_first_layer_tree_frame_sink() const;
  void clear_did_create_and_initialize_first_layer_tree_frame_sink() ;
  bool did_create_and_initialize_first_layer_tree_frame_sink() const;
  void set_did_create_and_initialize_first_layer_tree_frame_sink(bool value);

  private:
  bool _internal_did_create_and_initialize_first_layer_tree_frame_sink() const;
  void _internal_set_did_create_and_initialize_first_layer_tree_frame_sink(bool value);

  public:
  // optional bool critical_begin_main_frame_to_activate_is_fast = 33;
  bool has_critical_begin_main_frame_to_activate_is_fast() const;
  void clear_critical_begin_main_frame_to_activate_is_fast() ;
  bool critical_begin_main_frame_to_activate_is_fast() const;
  void set_critical_begin_main_frame_to_activate_is_fast(bool value);

  private:
  bool _internal_critical_begin_main_frame_to_activate_is_fast() const;
  void _internal_set_critical_begin_main_frame_to_activate_is_fast(bool value);

  public:
  // optional bool main_thread_missed_last_deadline = 34;
  bool has_main_thread_missed_last_deadline() const;
  void clear_main_thread_missed_last_deadline() ;
  bool main_thread_missed_last_deadline() const;
  void set_main_thread_missed_last_deadline(bool value);

  private:
  bool _internal_main_thread_missed_last_deadline() const;
  void _internal_set_main_thread_missed_last_deadline(bool value);

  public:
  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
  bool has_scroll_handler_state() const;
  void clear_scroll_handler_state() ;
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState scroll_handler_state() const;
  void set_scroll_handler_state(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState value);

  private:
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState _internal_scroll_handler_state() const;
  void _internal_set_scroll_handler_state(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState value);

  public:
  // optional bool video_needs_begin_frames = 36;
  bool has_video_needs_begin_frames() const;
  void clear_video_needs_begin_frames() ;
  bool video_needs_begin_frames() const;
  void set_video_needs_begin_frames(bool value);

  private:
  bool _internal_video_needs_begin_frames() const;
  void _internal_set_video_needs_begin_frames(bool value);

  public:
  // optional bool defer_begin_main_frame = 37;
  bool has_defer_begin_main_frame() const;
  void clear_defer_begin_main_frame() ;
  bool defer_begin_main_frame() const;
  void set_defer_begin_main_frame(bool value);

  private:
  bool _internal_defer_begin_main_frame() const;
  void _internal_set_defer_begin_main_frame(bool value);

  public:
  // optional bool last_commit_had_no_updates = 38;
  bool has_last_commit_had_no_updates() const;
  void clear_last_commit_had_no_updates() ;
  bool last_commit_had_no_updates() const;
  void set_last_commit_had_no_updates(bool value);

  private:
  bool _internal_last_commit_had_no_updates() const;
  void _internal_set_last_commit_had_no_updates(bool value);

  public:
  // optional bool did_draw_in_last_frame = 39;
  bool has_did_draw_in_last_frame() const;
  void clear_did_draw_in_last_frame() ;
  bool did_draw_in_last_frame() const;
  void set_did_draw_in_last_frame(bool value);

  private:
  bool _internal_did_draw_in_last_frame() const;
  void _internal_set_did_draw_in_last_frame(bool value);

  public:
  // optional bool did_submit_in_last_frame = 40;
  bool has_did_submit_in_last_frame() const;
  void clear_did_submit_in_last_frame() ;
  bool did_submit_in_last_frame() const;
  void set_did_submit_in_last_frame(bool value);

  private:
  bool _internal_did_submit_in_last_frame() const;
  void _internal_set_did_submit_in_last_frame(bool value);

  public:
  // optional bool needs_impl_side_invalidation = 41;
  bool has_needs_impl_side_invalidation() const;
  void clear_needs_impl_side_invalidation() ;
  bool needs_impl_side_invalidation() const;
  void set_needs_impl_side_invalidation(bool value);

  private:
  bool _internal_needs_impl_side_invalidation() const;
  void _internal_set_needs_impl_side_invalidation(bool value);

  public:
  // optional bool current_pending_tree_is_impl_side = 42;
  bool has_current_pending_tree_is_impl_side() const;
  void clear_current_pending_tree_is_impl_side() ;
  bool current_pending_tree_is_impl_side() const;
  void set_current_pending_tree_is_impl_side(bool value);

  private:
  bool _internal_current_pending_tree_is_impl_side() const;
  void _internal_set_current_pending_tree_is_impl_side(bool value);

  public:
  // optional bool previous_pending_tree_was_impl_side = 43;
  bool has_previous_pending_tree_was_impl_side() const;
  void clear_previous_pending_tree_was_impl_side() ;
  bool previous_pending_tree_was_impl_side() const;
  void set_previous_pending_tree_was_impl_side(bool value);

  private:
  bool _internal_previous_pending_tree_was_impl_side() const;
  void _internal_set_previous_pending_tree_was_impl_side(bool value);

  public:
  // optional bool processing_animation_worklets_for_active_tree = 44;
  bool has_processing_animation_worklets_for_active_tree() const;
  void clear_processing_animation_worklets_for_active_tree() ;
  bool processing_animation_worklets_for_active_tree() const;
  void set_processing_animation_worklets_for_active_tree(bool value);

  private:
  bool _internal_processing_animation_worklets_for_active_tree() const;
  void _internal_set_processing_animation_worklets_for_active_tree(bool value);

  public:
  // optional bool processing_animation_worklets_for_pending_tree = 45;
  bool has_processing_animation_worklets_for_pending_tree() const;
  void clear_processing_animation_worklets_for_pending_tree() ;
  bool processing_animation_worklets_for_pending_tree() const;
  void set_processing_animation_worklets_for_pending_tree(bool value);

  private:
  bool _internal_processing_animation_worklets_for_pending_tree() const;
  void _internal_set_processing_animation_worklets_for_pending_tree(bool value);

  public:
  // optional bool processing_paint_worklets_for_pending_tree = 46;
  bool has_processing_paint_worklets_for_pending_tree() const;
  void clear_processing_paint_worklets_for_pending_tree() ;
  bool processing_paint_worklets_for_pending_tree() const;
  void set_processing_paint_worklets_for_pending_tree(bool value);

  private:
  bool _internal_processing_paint_worklets_for_pending_tree() const;
  void _internal_set_processing_paint_worklets_for_pending_tree(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeCompositorStateMachine.MinorState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t commit_count_;
    ::int32_t current_frame_number_;
    ::int32_t last_frame_number_submit_performed_;
    ::int32_t last_frame_number_draw_performed_;
    ::int32_t last_frame_number_begin_main_frame_sent_;
    bool did_draw_;
    bool did_send_begin_main_frame_for_current_frame_;
    bool did_notify_begin_main_frame_not_expected_until_;
    bool did_notify_begin_main_frame_not_expected_soon_;
    bool wants_begin_main_frame_not_expected_;
    bool did_commit_during_frame_;
    bool did_invalidate_layer_tree_frame_sink_;
    bool did_perform_impl_side_invalidaion_;
    ::int32_t consecutive_checkerboard_animations_;
    ::int32_t pending_submit_frames_;
    ::int32_t submit_frames_with_current_layer_tree_frame_sink_;
    bool did_prepare_tiles_;
    bool needs_redraw_;
    bool needs_prepare_tiles_;
    bool needs_begin_main_frame_;
    bool needs_one_begin_impl_frame_;
    bool visible_;
    bool begin_frame_source_paused_;
    bool can_draw_;
    bool resourceless_draw_;
    bool has_pending_tree_;
    bool pending_tree_is_ready_for_activation_;
    bool active_tree_needs_first_draw_;
    int tree_priority_;
    bool active_tree_is_ready_to_draw_;
    bool did_create_and_initialize_first_layer_tree_frame_sink_;
    bool critical_begin_main_frame_to_activate_is_fast_;
    bool main_thread_missed_last_deadline_;
    int scroll_handler_state_;
    bool video_needs_begin_frames_;
    bool defer_begin_main_frame_;
    bool last_commit_had_no_updates_;
    bool did_draw_in_last_frame_;
    bool did_submit_in_last_frame_;
    bool needs_impl_side_invalidation_;
    bool current_pending_tree_is_impl_side_;
    bool previous_pending_tree_was_impl_side_;
    bool processing_animation_worklets_for_active_tree_;
    bool processing_animation_worklets_for_pending_tree_;
    bool processing_paint_worklets_for_pending_tree_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class ChromeCompositorStateMachine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeCompositorStateMachine) */ {
 public:
  inline ChromeCompositorStateMachine() : ChromeCompositorStateMachine(nullptr) {}
  ~ChromeCompositorStateMachine() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeCompositorStateMachine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeCompositorStateMachine(const ChromeCompositorStateMachine& from);
  ChromeCompositorStateMachine(ChromeCompositorStateMachine&& from) noexcept
    : ChromeCompositorStateMachine() {
    *this = ::std::move(from);
  }

  inline ChromeCompositorStateMachine& operator=(const ChromeCompositorStateMachine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeCompositorStateMachine& operator=(ChromeCompositorStateMachine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeCompositorStateMachine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeCompositorStateMachine* internal_default_instance() {
    return reinterpret_cast<const ChromeCompositorStateMachine*>(
               &_ChromeCompositorStateMachine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChromeCompositorStateMachine& a, ChromeCompositorStateMachine& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeCompositorStateMachine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeCompositorStateMachine* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeCompositorStateMachine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeCompositorStateMachine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeCompositorStateMachine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeCompositorStateMachine& from) {
    ChromeCompositorStateMachine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeCompositorStateMachine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeCompositorStateMachine";
  }
  protected:
  explicit ChromeCompositorStateMachine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChromeCompositorStateMachine_MajorState MajorState;
  typedef ChromeCompositorStateMachine_MinorState MinorState;

  // accessors -------------------------------------------------------

  enum : int {
    kMajorStateFieldNumber = 1,
    kMinorStateFieldNumber = 2,
  };
  // optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
  bool has_major_state() const;
  void clear_major_state() ;
  const ::perfetto::protos::ChromeCompositorStateMachine_MajorState& major_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeCompositorStateMachine_MajorState* release_major_state();
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState* mutable_major_state();
  void set_allocated_major_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState* major_state);
  private:
  const ::perfetto::protos::ChromeCompositorStateMachine_MajorState& _internal_major_state() const;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState* _internal_mutable_major_state();
  public:
  void unsafe_arena_set_allocated_major_state(
      ::perfetto::protos::ChromeCompositorStateMachine_MajorState* major_state);
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState* unsafe_arena_release_major_state();
  // optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
  bool has_minor_state() const;
  void clear_minor_state() ;
  const ::perfetto::protos::ChromeCompositorStateMachine_MinorState& minor_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeCompositorStateMachine_MinorState* release_minor_state();
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState* mutable_minor_state();
  void set_allocated_minor_state(::perfetto::protos::ChromeCompositorStateMachine_MinorState* minor_state);
  private:
  const ::perfetto::protos::ChromeCompositorStateMachine_MinorState& _internal_minor_state() const;
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState* _internal_mutable_minor_state();
  public:
  void unsafe_arena_set_allocated_minor_state(
      ::perfetto::protos::ChromeCompositorStateMachine_MinorState* minor_state);
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState* unsafe_arena_release_minor_state();
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeCompositorStateMachine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::ChromeCompositorStateMachine_MajorState* major_state_;
    ::perfetto::protos::ChromeCompositorStateMachine_MinorState* minor_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class BeginFrameArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.BeginFrameArgs) */ {
 public:
  inline BeginFrameArgs() : BeginFrameArgs(nullptr) {}
  ~BeginFrameArgs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BeginFrameArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginFrameArgs(const BeginFrameArgs& from);
  BeginFrameArgs(BeginFrameArgs&& from) noexcept
    : BeginFrameArgs() {
    *this = ::std::move(from);
  }

  inline BeginFrameArgs& operator=(const BeginFrameArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginFrameArgs& operator=(BeginFrameArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginFrameArgs& default_instance() {
    return *internal_default_instance();
  }
  enum CreatedFromCase {
    kSourceLocationIid = 9,
    kSourceLocation = 10,
    CREATED_FROM_NOT_SET = 0,
  };

  static inline const BeginFrameArgs* internal_default_instance() {
    return reinterpret_cast<const BeginFrameArgs*>(
               &_BeginFrameArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BeginFrameArgs& a, BeginFrameArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginFrameArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginFrameArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeginFrameArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeginFrameArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginFrameArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BeginFrameArgs& from) {
    BeginFrameArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginFrameArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.BeginFrameArgs";
  }
  protected:
  explicit BeginFrameArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BeginFrameArgsType = BeginFrameArgs_BeginFrameArgsType;
  static constexpr BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED = BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED;
  static constexpr BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_INVALID = BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_INVALID;
  static constexpr BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_NORMAL = BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_NORMAL;
  static constexpr BeginFrameArgsType BEGIN_FRAME_ARGS_TYPE_MISSED = BeginFrameArgs_BeginFrameArgsType_BEGIN_FRAME_ARGS_TYPE_MISSED;
  static inline bool BeginFrameArgsType_IsValid(int value) {
    return BeginFrameArgs_BeginFrameArgsType_IsValid(value);
  }
  static constexpr BeginFrameArgsType BeginFrameArgsType_MIN = BeginFrameArgs_BeginFrameArgsType_BeginFrameArgsType_MIN;
  static constexpr BeginFrameArgsType BeginFrameArgsType_MAX = BeginFrameArgs_BeginFrameArgsType_BeginFrameArgsType_MAX;
  static constexpr int BeginFrameArgsType_ARRAYSIZE = BeginFrameArgs_BeginFrameArgsType_BeginFrameArgsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeginFrameArgsType_descriptor() {
    return BeginFrameArgs_BeginFrameArgsType_descriptor();
  }
  template <typename T>
  static inline const std::string& BeginFrameArgsType_Name(T value) {
    return BeginFrameArgs_BeginFrameArgsType_Name(value);
  }
  static inline bool BeginFrameArgsType_Parse(absl::string_view name, BeginFrameArgsType* value) {
    return BeginFrameArgs_BeginFrameArgsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 2,
    kSequenceNumberFieldNumber = 3,
    kFrameTimeUsFieldNumber = 4,
    kDeadlineUsFieldNumber = 5,
    kTypeFieldNumber = 1,
    kOnCriticalPathFieldNumber = 7,
    kAnimateOnlyFieldNumber = 8,
    kIntervalDeltaUsFieldNumber = 6,
    kFramesThrottledSinceLastFieldNumber = 12,
    kSourceLocationIidFieldNumber = 9,
    kSourceLocationFieldNumber = 10,
  };
  // optional uint64 source_id = 2;
  bool has_source_id() const;
  void clear_source_id() ;
  ::uint64_t source_id() const;
  void set_source_id(::uint64_t value);

  private:
  ::uint64_t _internal_source_id() const;
  void _internal_set_source_id(::uint64_t value);

  public:
  // optional uint64 sequence_number = 3;
  bool has_sequence_number() const;
  void clear_sequence_number() ;
  ::uint64_t sequence_number() const;
  void set_sequence_number(::uint64_t value);

  private:
  ::uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::uint64_t value);

  public:
  // optional int64 frame_time_us = 4;
  bool has_frame_time_us() const;
  void clear_frame_time_us() ;
  ::int64_t frame_time_us() const;
  void set_frame_time_us(::int64_t value);

  private:
  ::int64_t _internal_frame_time_us() const;
  void _internal_set_frame_time_us(::int64_t value);

  public:
  // optional int64 deadline_us = 5;
  bool has_deadline_us() const;
  void clear_deadline_us() ;
  ::int64_t deadline_us() const;
  void set_deadline_us(::int64_t value);

  private:
  ::int64_t _internal_deadline_us() const;
  void _internal_set_deadline_us(::int64_t value);

  public:
  // optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::perfetto::protos::BeginFrameArgs_BeginFrameArgsType type() const;
  void set_type(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType value);

  private:
  ::perfetto::protos::BeginFrameArgs_BeginFrameArgsType _internal_type() const;
  void _internal_set_type(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType value);

  public:
  // optional bool on_critical_path = 7;
  bool has_on_critical_path() const;
  void clear_on_critical_path() ;
  bool on_critical_path() const;
  void set_on_critical_path(bool value);

  private:
  bool _internal_on_critical_path() const;
  void _internal_set_on_critical_path(bool value);

  public:
  // optional bool animate_only = 8;
  bool has_animate_only() const;
  void clear_animate_only() ;
  bool animate_only() const;
  void set_animate_only(bool value);

  private:
  bool _internal_animate_only() const;
  void _internal_set_animate_only(bool value);

  public:
  // optional int64 interval_delta_us = 6;
  bool has_interval_delta_us() const;
  void clear_interval_delta_us() ;
  ::int64_t interval_delta_us() const;
  void set_interval_delta_us(::int64_t value);

  private:
  ::int64_t _internal_interval_delta_us() const;
  void _internal_set_interval_delta_us(::int64_t value);

  public:
  // optional int64 frames_throttled_since_last = 12;
  bool has_frames_throttled_since_last() const;
  void clear_frames_throttled_since_last() ;
  ::int64_t frames_throttled_since_last() const;
  void set_frames_throttled_since_last(::int64_t value);

  private:
  ::int64_t _internal_frames_throttled_since_last() const;
  void _internal_set_frames_throttled_since_last(::int64_t value);

  public:
  // uint64 source_location_iid = 9;
  bool has_source_location_iid() const;
  void clear_source_location_iid() ;
  ::uint64_t source_location_iid() const;
  void set_source_location_iid(::uint64_t value);

  private:
  ::uint64_t _internal_source_location_iid() const;
  void _internal_set_source_location_iid(::uint64_t value);

  public:
  // .perfetto.protos.SourceLocation source_location = 10;
  bool has_source_location() const;
  private:
  bool _internal_has_source_location() const;

  public:
  void clear_source_location() ;
  const ::perfetto::protos::SourceLocation& source_location() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SourceLocation* release_source_location();
  ::perfetto::protos::SourceLocation* mutable_source_location();
  void set_allocated_source_location(::perfetto::protos::SourceLocation* source_location);
  private:
  const ::perfetto::protos::SourceLocation& _internal_source_location() const;
  ::perfetto::protos::SourceLocation* _internal_mutable_source_location();
  public:
  void unsafe_arena_set_allocated_source_location(
      ::perfetto::protos::SourceLocation* source_location);
  ::perfetto::protos::SourceLocation* unsafe_arena_release_source_location();
  void clear_created_from();
  CreatedFromCase created_from_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.BeginFrameArgs)
 private:
  class _Internal;
  void set_has_source_location_iid();
  void set_has_source_location();

  inline bool has_created_from() const;
  inline void clear_has_created_from();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t source_id_;
    ::uint64_t sequence_number_;
    ::int64_t frame_time_us_;
    ::int64_t deadline_us_;
    int type_;
    bool on_critical_path_;
    bool animate_only_;
    ::int64_t interval_delta_us_;
    ::int64_t frames_throttled_since_last_;
    union CreatedFromUnion {
      constexpr CreatedFromUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint64_t source_location_iid_;
      ::perfetto::protos::SourceLocation* source_location_;
    } created_from_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class BeginImplFrameArgs_TimestampsInUs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.BeginImplFrameArgs.TimestampsInUs) */ {
 public:
  inline BeginImplFrameArgs_TimestampsInUs() : BeginImplFrameArgs_TimestampsInUs(nullptr) {}
  ~BeginImplFrameArgs_TimestampsInUs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BeginImplFrameArgs_TimestampsInUs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginImplFrameArgs_TimestampsInUs(const BeginImplFrameArgs_TimestampsInUs& from);
  BeginImplFrameArgs_TimestampsInUs(BeginImplFrameArgs_TimestampsInUs&& from) noexcept
    : BeginImplFrameArgs_TimestampsInUs() {
    *this = ::std::move(from);
  }

  inline BeginImplFrameArgs_TimestampsInUs& operator=(const BeginImplFrameArgs_TimestampsInUs& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginImplFrameArgs_TimestampsInUs& operator=(BeginImplFrameArgs_TimestampsInUs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginImplFrameArgs_TimestampsInUs& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginImplFrameArgs_TimestampsInUs* internal_default_instance() {
    return reinterpret_cast<const BeginImplFrameArgs_TimestampsInUs*>(
               &_BeginImplFrameArgs_TimestampsInUs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BeginImplFrameArgs_TimestampsInUs& a, BeginImplFrameArgs_TimestampsInUs& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginImplFrameArgs_TimestampsInUs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginImplFrameArgs_TimestampsInUs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeginImplFrameArgs_TimestampsInUs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeginImplFrameArgs_TimestampsInUs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginImplFrameArgs_TimestampsInUs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BeginImplFrameArgs_TimestampsInUs& from) {
    BeginImplFrameArgs_TimestampsInUs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginImplFrameArgs_TimestampsInUs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.BeginImplFrameArgs.TimestampsInUs";
  }
  protected:
  explicit BeginImplFrameArgs_TimestampsInUs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalDeltaFieldNumber = 1,
    kNowToDeadlineDeltaFieldNumber = 2,
    kFrameTimeToNowDeltaFieldNumber = 3,
    kFrameTimeToDeadlineDeltaFieldNumber = 4,
    kNowFieldNumber = 5,
    kFrameTimeFieldNumber = 6,
    kDeadlineFieldNumber = 7,
  };
  // optional int64 interval_delta = 1;
  bool has_interval_delta() const;
  void clear_interval_delta() ;
  ::int64_t interval_delta() const;
  void set_interval_delta(::int64_t value);

  private:
  ::int64_t _internal_interval_delta() const;
  void _internal_set_interval_delta(::int64_t value);

  public:
  // optional int64 now_to_deadline_delta = 2;
  bool has_now_to_deadline_delta() const;
  void clear_now_to_deadline_delta() ;
  ::int64_t now_to_deadline_delta() const;
  void set_now_to_deadline_delta(::int64_t value);

  private:
  ::int64_t _internal_now_to_deadline_delta() const;
  void _internal_set_now_to_deadline_delta(::int64_t value);

  public:
  // optional int64 frame_time_to_now_delta = 3;
  bool has_frame_time_to_now_delta() const;
  void clear_frame_time_to_now_delta() ;
  ::int64_t frame_time_to_now_delta() const;
  void set_frame_time_to_now_delta(::int64_t value);

  private:
  ::int64_t _internal_frame_time_to_now_delta() const;
  void _internal_set_frame_time_to_now_delta(::int64_t value);

  public:
  // optional int64 frame_time_to_deadline_delta = 4;
  bool has_frame_time_to_deadline_delta() const;
  void clear_frame_time_to_deadline_delta() ;
  ::int64_t frame_time_to_deadline_delta() const;
  void set_frame_time_to_deadline_delta(::int64_t value);

  private:
  ::int64_t _internal_frame_time_to_deadline_delta() const;
  void _internal_set_frame_time_to_deadline_delta(::int64_t value);

  public:
  // optional int64 now = 5;
  bool has_now() const;
  void clear_now() ;
  ::int64_t now() const;
  void set_now(::int64_t value);

  private:
  ::int64_t _internal_now() const;
  void _internal_set_now(::int64_t value);

  public:
  // optional int64 frame_time = 6;
  bool has_frame_time() const;
  void clear_frame_time() ;
  ::int64_t frame_time() const;
  void set_frame_time(::int64_t value);

  private:
  ::int64_t _internal_frame_time() const;
  void _internal_set_frame_time(::int64_t value);

  public:
  // optional int64 deadline = 7;
  bool has_deadline() const;
  void clear_deadline() ;
  ::int64_t deadline() const;
  void set_deadline(::int64_t value);

  private:
  ::int64_t _internal_deadline() const;
  void _internal_set_deadline(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.BeginImplFrameArgs.TimestampsInUs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t interval_delta_;
    ::int64_t now_to_deadline_delta_;
    ::int64_t frame_time_to_now_delta_;
    ::int64_t frame_time_to_deadline_delta_;
    ::int64_t now_;
    ::int64_t frame_time_;
    ::int64_t deadline_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class BeginImplFrameArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.BeginImplFrameArgs) */ {
 public:
  inline BeginImplFrameArgs() : BeginImplFrameArgs(nullptr) {}
  ~BeginImplFrameArgs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BeginImplFrameArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginImplFrameArgs(const BeginImplFrameArgs& from);
  BeginImplFrameArgs(BeginImplFrameArgs&& from) noexcept
    : BeginImplFrameArgs() {
    *this = ::std::move(from);
  }

  inline BeginImplFrameArgs& operator=(const BeginImplFrameArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginImplFrameArgs& operator=(BeginImplFrameArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginImplFrameArgs& default_instance() {
    return *internal_default_instance();
  }
  enum ArgsCase {
    kCurrentArgs = 4,
    kLastArgs = 5,
    ARGS_NOT_SET = 0,
  };

  static inline const BeginImplFrameArgs* internal_default_instance() {
    return reinterpret_cast<const BeginImplFrameArgs*>(
               &_BeginImplFrameArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BeginImplFrameArgs& a, BeginImplFrameArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginImplFrameArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginImplFrameArgs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeginImplFrameArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeginImplFrameArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginImplFrameArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BeginImplFrameArgs& from) {
    BeginImplFrameArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginImplFrameArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.BeginImplFrameArgs";
  }
  protected:
  explicit BeginImplFrameArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BeginImplFrameArgs_TimestampsInUs TimestampsInUs;

  using State = BeginImplFrameArgs_State;
  static constexpr State BEGIN_FRAME_FINISHED = BeginImplFrameArgs_State_BEGIN_FRAME_FINISHED;
  static constexpr State BEGIN_FRAME_USING = BeginImplFrameArgs_State_BEGIN_FRAME_USING;
  static inline bool State_IsValid(int value) {
    return BeginImplFrameArgs_State_IsValid(value);
  }
  static constexpr State State_MIN = BeginImplFrameArgs_State_State_MIN;
  static constexpr State State_MAX = BeginImplFrameArgs_State_State_MAX;
  static constexpr int State_ARRAYSIZE = BeginImplFrameArgs_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor() {
    return BeginImplFrameArgs_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return BeginImplFrameArgs_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return BeginImplFrameArgs_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsInUsFieldNumber = 6,
    kUpdatedAtUsFieldNumber = 1,
    kFinishedAtUsFieldNumber = 2,
    kStateFieldNumber = 3,
    kCurrentArgsFieldNumber = 4,
    kLastArgsFieldNumber = 5,
  };
  // optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
  bool has_timestamps_in_us() const;
  void clear_timestamps_in_us() ;
  const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs& timestamps_in_us() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* release_timestamps_in_us();
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* mutable_timestamps_in_us();
  void set_allocated_timestamps_in_us(::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* timestamps_in_us);
  private:
  const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs& _internal_timestamps_in_us() const;
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* _internal_mutable_timestamps_in_us();
  public:
  void unsafe_arena_set_allocated_timestamps_in_us(
      ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* timestamps_in_us);
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* unsafe_arena_release_timestamps_in_us();
  // optional int64 updated_at_us = 1;
  bool has_updated_at_us() const;
  void clear_updated_at_us() ;
  ::int64_t updated_at_us() const;
  void set_updated_at_us(::int64_t value);

  private:
  ::int64_t _internal_updated_at_us() const;
  void _internal_set_updated_at_us(::int64_t value);

  public:
  // optional int64 finished_at_us = 2;
  bool has_finished_at_us() const;
  void clear_finished_at_us() ;
  ::int64_t finished_at_us() const;
  void set_finished_at_us(::int64_t value);

  private:
  ::int64_t _internal_finished_at_us() const;
  void _internal_set_finished_at_us(::int64_t value);

  public:
  // optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
  bool has_state() const;
  void clear_state() ;
  ::perfetto::protos::BeginImplFrameArgs_State state() const;
  void set_state(::perfetto::protos::BeginImplFrameArgs_State value);

  private:
  ::perfetto::protos::BeginImplFrameArgs_State _internal_state() const;
  void _internal_set_state(::perfetto::protos::BeginImplFrameArgs_State value);

  public:
  // .perfetto.protos.BeginFrameArgs current_args = 4;
  bool has_current_args() const;
  private:
  bool _internal_has_current_args() const;

  public:
  void clear_current_args() ;
  const ::perfetto::protos::BeginFrameArgs& current_args() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginFrameArgs* release_current_args();
  ::perfetto::protos::BeginFrameArgs* mutable_current_args();
  void set_allocated_current_args(::perfetto::protos::BeginFrameArgs* current_args);
  private:
  const ::perfetto::protos::BeginFrameArgs& _internal_current_args() const;
  ::perfetto::protos::BeginFrameArgs* _internal_mutable_current_args();
  public:
  void unsafe_arena_set_allocated_current_args(
      ::perfetto::protos::BeginFrameArgs* current_args);
  ::perfetto::protos::BeginFrameArgs* unsafe_arena_release_current_args();
  // .perfetto.protos.BeginFrameArgs last_args = 5;
  bool has_last_args() const;
  private:
  bool _internal_has_last_args() const;

  public:
  void clear_last_args() ;
  const ::perfetto::protos::BeginFrameArgs& last_args() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginFrameArgs* release_last_args();
  ::perfetto::protos::BeginFrameArgs* mutable_last_args();
  void set_allocated_last_args(::perfetto::protos::BeginFrameArgs* last_args);
  private:
  const ::perfetto::protos::BeginFrameArgs& _internal_last_args() const;
  ::perfetto::protos::BeginFrameArgs* _internal_mutable_last_args();
  public:
  void unsafe_arena_set_allocated_last_args(
      ::perfetto::protos::BeginFrameArgs* last_args);
  ::perfetto::protos::BeginFrameArgs* unsafe_arena_release_last_args();
  void clear_args();
  ArgsCase args_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.BeginImplFrameArgs)
 private:
  class _Internal;
  void set_has_current_args();
  void set_has_last_args();

  inline bool has_args() const;
  inline void clear_has_args();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* timestamps_in_us_;
    ::int64_t updated_at_us_;
    ::int64_t finished_at_us_;
    int state_;
    union ArgsUnion {
      constexpr ArgsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::BeginFrameArgs* current_args_;
      ::perfetto::protos::BeginFrameArgs* last_args_;
    } args_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class BeginFrameObserverState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.BeginFrameObserverState) */ {
 public:
  inline BeginFrameObserverState() : BeginFrameObserverState(nullptr) {}
  ~BeginFrameObserverState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BeginFrameObserverState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginFrameObserverState(const BeginFrameObserverState& from);
  BeginFrameObserverState(BeginFrameObserverState&& from) noexcept
    : BeginFrameObserverState() {
    *this = ::std::move(from);
  }

  inline BeginFrameObserverState& operator=(const BeginFrameObserverState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginFrameObserverState& operator=(BeginFrameObserverState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginFrameObserverState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginFrameObserverState* internal_default_instance() {
    return reinterpret_cast<const BeginFrameObserverState*>(
               &_BeginFrameObserverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BeginFrameObserverState& a, BeginFrameObserverState& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginFrameObserverState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginFrameObserverState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeginFrameObserverState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeginFrameObserverState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginFrameObserverState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BeginFrameObserverState& from) {
    BeginFrameObserverState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginFrameObserverState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.BeginFrameObserverState";
  }
  protected:
  explicit BeginFrameObserverState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastBeginFrameArgsFieldNumber = 2,
    kDroppedBeginFrameArgsFieldNumber = 1,
  };
  // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
  bool has_last_begin_frame_args() const;
  void clear_last_begin_frame_args() ;
  const ::perfetto::protos::BeginFrameArgs& last_begin_frame_args() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginFrameArgs* release_last_begin_frame_args();
  ::perfetto::protos::BeginFrameArgs* mutable_last_begin_frame_args();
  void set_allocated_last_begin_frame_args(::perfetto::protos::BeginFrameArgs* last_begin_frame_args);
  private:
  const ::perfetto::protos::BeginFrameArgs& _internal_last_begin_frame_args() const;
  ::perfetto::protos::BeginFrameArgs* _internal_mutable_last_begin_frame_args();
  public:
  void unsafe_arena_set_allocated_last_begin_frame_args(
      ::perfetto::protos::BeginFrameArgs* last_begin_frame_args);
  ::perfetto::protos::BeginFrameArgs* unsafe_arena_release_last_begin_frame_args();
  // optional int64 dropped_begin_frame_args = 1;
  bool has_dropped_begin_frame_args() const;
  void clear_dropped_begin_frame_args() ;
  ::int64_t dropped_begin_frame_args() const;
  void set_dropped_begin_frame_args(::int64_t value);

  private:
  ::int64_t _internal_dropped_begin_frame_args() const;
  void _internal_set_dropped_begin_frame_args(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.BeginFrameObserverState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::BeginFrameArgs* last_begin_frame_args_;
    ::int64_t dropped_begin_frame_args_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class BeginFrameSourceState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.BeginFrameSourceState) */ {
 public:
  inline BeginFrameSourceState() : BeginFrameSourceState(nullptr) {}
  ~BeginFrameSourceState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BeginFrameSourceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginFrameSourceState(const BeginFrameSourceState& from);
  BeginFrameSourceState(BeginFrameSourceState&& from) noexcept
    : BeginFrameSourceState() {
    *this = ::std::move(from);
  }

  inline BeginFrameSourceState& operator=(const BeginFrameSourceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginFrameSourceState& operator=(BeginFrameSourceState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeginFrameSourceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginFrameSourceState* internal_default_instance() {
    return reinterpret_cast<const BeginFrameSourceState*>(
               &_BeginFrameSourceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BeginFrameSourceState& a, BeginFrameSourceState& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginFrameSourceState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginFrameSourceState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeginFrameSourceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeginFrameSourceState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeginFrameSourceState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BeginFrameSourceState& from) {
    BeginFrameSourceState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginFrameSourceState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.BeginFrameSourceState";
  }
  protected:
  explicit BeginFrameSourceState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastBeginFrameArgsFieldNumber = 4,
    kSourceIdFieldNumber = 1,
    kPausedFieldNumber = 2,
    kNumObserversFieldNumber = 3,
  };
  // optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
  bool has_last_begin_frame_args() const;
  void clear_last_begin_frame_args() ;
  const ::perfetto::protos::BeginFrameArgs& last_begin_frame_args() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BeginFrameArgs* release_last_begin_frame_args();
  ::perfetto::protos::BeginFrameArgs* mutable_last_begin_frame_args();
  void set_allocated_last_begin_frame_args(::perfetto::protos::BeginFrameArgs* last_begin_frame_args);
  private:
  const ::perfetto::protos::BeginFrameArgs& _internal_last_begin_frame_args() const;
  ::perfetto::protos::BeginFrameArgs* _internal_mutable_last_begin_frame_args();
  public:
  void unsafe_arena_set_allocated_last_begin_frame_args(
      ::perfetto::protos::BeginFrameArgs* last_begin_frame_args);
  ::perfetto::protos::BeginFrameArgs* unsafe_arena_release_last_begin_frame_args();
  // optional uint32 source_id = 1;
  bool has_source_id() const;
  void clear_source_id() ;
  ::uint32_t source_id() const;
  void set_source_id(::uint32_t value);

  private:
  ::uint32_t _internal_source_id() const;
  void _internal_set_source_id(::uint32_t value);

  public:
  // optional bool paused = 2;
  bool has_paused() const;
  void clear_paused() ;
  bool paused() const;
  void set_paused(bool value);

  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);

  public:
  // optional uint32 num_observers = 3;
  bool has_num_observers() const;
  void clear_num_observers() ;
  ::uint32_t num_observers() const;
  void set_num_observers(::uint32_t value);

  private:
  ::uint32_t _internal_num_observers() const;
  void _internal_set_num_observers(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.BeginFrameSourceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::BeginFrameArgs* last_begin_frame_args_;
    ::uint32_t source_id_;
    bool paused_;
    ::uint32_t num_observers_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};// -------------------------------------------------------------------

class CompositorTimingHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CompositorTimingHistory) */ {
 public:
  inline CompositorTimingHistory() : CompositorTimingHistory(nullptr) {}
  ~CompositorTimingHistory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CompositorTimingHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompositorTimingHistory(const CompositorTimingHistory& from);
  CompositorTimingHistory(CompositorTimingHistory&& from) noexcept
    : CompositorTimingHistory() {
    *this = ::std::move(from);
  }

  inline CompositorTimingHistory& operator=(const CompositorTimingHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompositorTimingHistory& operator=(CompositorTimingHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompositorTimingHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompositorTimingHistory* internal_default_instance() {
    return reinterpret_cast<const CompositorTimingHistory*>(
               &_CompositorTimingHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CompositorTimingHistory& a, CompositorTimingHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CompositorTimingHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompositorTimingHistory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompositorTimingHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompositorTimingHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompositorTimingHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompositorTimingHistory& from) {
    CompositorTimingHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompositorTimingHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CompositorTimingHistory";
  }
  protected:
  explicit CompositorTimingHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginMainFrameQueueCriticalEstimateDeltaUsFieldNumber = 1,
    kBeginMainFrameQueueNotCriticalEstimateDeltaUsFieldNumber = 2,
    kBeginMainFrameStartToReadyToCommitEstimateDeltaUsFieldNumber = 3,
    kCommitToReadyToActivateEstimateDeltaUsFieldNumber = 4,
    kPrepareTilesEstimateDeltaUsFieldNumber = 5,
    kActivateEstimateDeltaUsFieldNumber = 6,
    kDrawEstimateDeltaUsFieldNumber = 7,
  };
  // optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
  bool has_begin_main_frame_queue_critical_estimate_delta_us() const;
  void clear_begin_main_frame_queue_critical_estimate_delta_us() ;
  ::int64_t begin_main_frame_queue_critical_estimate_delta_us() const;
  void set_begin_main_frame_queue_critical_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_begin_main_frame_queue_critical_estimate_delta_us() const;
  void _internal_set_begin_main_frame_queue_critical_estimate_delta_us(::int64_t value);

  public:
  // optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
  bool has_begin_main_frame_queue_not_critical_estimate_delta_us() const;
  void clear_begin_main_frame_queue_not_critical_estimate_delta_us() ;
  ::int64_t begin_main_frame_queue_not_critical_estimate_delta_us() const;
  void set_begin_main_frame_queue_not_critical_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_begin_main_frame_queue_not_critical_estimate_delta_us() const;
  void _internal_set_begin_main_frame_queue_not_critical_estimate_delta_us(::int64_t value);

  public:
  // optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
  bool has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const;
  void clear_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() ;
  ::int64_t begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const;
  void set_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const;
  void _internal_set_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(::int64_t value);

  public:
  // optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
  bool has_commit_to_ready_to_activate_estimate_delta_us() const;
  void clear_commit_to_ready_to_activate_estimate_delta_us() ;
  ::int64_t commit_to_ready_to_activate_estimate_delta_us() const;
  void set_commit_to_ready_to_activate_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_commit_to_ready_to_activate_estimate_delta_us() const;
  void _internal_set_commit_to_ready_to_activate_estimate_delta_us(::int64_t value);

  public:
  // optional int64 prepare_tiles_estimate_delta_us = 5;
  bool has_prepare_tiles_estimate_delta_us() const;
  void clear_prepare_tiles_estimate_delta_us() ;
  ::int64_t prepare_tiles_estimate_delta_us() const;
  void set_prepare_tiles_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_prepare_tiles_estimate_delta_us() const;
  void _internal_set_prepare_tiles_estimate_delta_us(::int64_t value);

  public:
  // optional int64 activate_estimate_delta_us = 6;
  bool has_activate_estimate_delta_us() const;
  void clear_activate_estimate_delta_us() ;
  ::int64_t activate_estimate_delta_us() const;
  void set_activate_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_activate_estimate_delta_us() const;
  void _internal_set_activate_estimate_delta_us(::int64_t value);

  public:
  // optional int64 draw_estimate_delta_us = 7;
  bool has_draw_estimate_delta_us() const;
  void clear_draw_estimate_delta_us() ;
  ::int64_t draw_estimate_delta_us() const;
  void set_draw_estimate_delta_us(::int64_t value);

  private:
  ::int64_t _internal_draw_estimate_delta_us() const;
  void _internal_set_draw_estimate_delta_us(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CompositorTimingHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t begin_main_frame_queue_critical_estimate_delta_us_;
    ::int64_t begin_main_frame_queue_not_critical_estimate_delta_us_;
    ::int64_t begin_main_frame_start_to_ready_to_commit_estimate_delta_us_;
    ::int64_t commit_to_ready_to_activate_estimate_delta_us_;
    ::int64_t prepare_tiles_estimate_delta_us_;
    ::int64_t activate_estimate_delta_us_;
    ::int64_t draw_estimate_delta_us_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChromeCompositorSchedulerState

// optional .perfetto.protos.ChromeCompositorStateMachine state_machine = 1;
inline bool ChromeCompositorSchedulerState::has_state_machine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_machine_ != nullptr);
  return value;
}
inline void ChromeCompositorSchedulerState::clear_state_machine() {
  if (_impl_.state_machine_ != nullptr) _impl_.state_machine_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::ChromeCompositorStateMachine& ChromeCompositorSchedulerState::_internal_state_machine() const {
  const ::perfetto::protos::ChromeCompositorStateMachine* p = _impl_.state_machine_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeCompositorStateMachine&>(
      ::perfetto::protos::_ChromeCompositorStateMachine_default_instance_);
}
inline const ::perfetto::protos::ChromeCompositorStateMachine& ChromeCompositorSchedulerState::state_machine() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.state_machine)
  return _internal_state_machine();
}
inline void ChromeCompositorSchedulerState::unsafe_arena_set_allocated_state_machine(
    ::perfetto::protos::ChromeCompositorStateMachine* state_machine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_machine_);
  }
  _impl_.state_machine_ = state_machine;
  if (state_machine) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.state_machine)
}
inline ::perfetto::protos::ChromeCompositorStateMachine* ChromeCompositorSchedulerState::release_state_machine() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ChromeCompositorStateMachine* temp = _impl_.state_machine_;
  _impl_.state_machine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeCompositorStateMachine* ChromeCompositorSchedulerState::unsafe_arena_release_state_machine() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorSchedulerState.state_machine)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ChromeCompositorStateMachine* temp = _impl_.state_machine_;
  _impl_.state_machine_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeCompositorStateMachine* ChromeCompositorSchedulerState::_internal_mutable_state_machine() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeCompositorStateMachine>(GetArenaForAllocation());
    _impl_.state_machine_ = p;
  }
  return _impl_.state_machine_;
}
inline ::perfetto::protos::ChromeCompositorStateMachine* ChromeCompositorSchedulerState::mutable_state_machine() {
  ::perfetto::protos::ChromeCompositorStateMachine* _msg = _internal_mutable_state_machine();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorSchedulerState.state_machine)
  return _msg;
}
inline void ChromeCompositorSchedulerState::set_allocated_state_machine(::perfetto::protos::ChromeCompositorStateMachine* state_machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_machine_;
  }
  if (state_machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state_machine);
    if (message_arena != submessage_arena) {
      state_machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_machine, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_machine_ = state_machine;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.state_machine)
}

// optional bool observing_begin_frame_source = 2;
inline bool ChromeCompositorSchedulerState::has_observing_begin_frame_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_observing_begin_frame_source() {
  _impl_.observing_begin_frame_source_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ChromeCompositorSchedulerState::observing_begin_frame_source() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.observing_begin_frame_source)
  return _internal_observing_begin_frame_source();
}
inline void ChromeCompositorSchedulerState::set_observing_begin_frame_source(bool value) {
  _internal_set_observing_begin_frame_source(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.observing_begin_frame_source)
}
inline bool ChromeCompositorSchedulerState::_internal_observing_begin_frame_source() const {
  return _impl_.observing_begin_frame_source_;
}
inline void ChromeCompositorSchedulerState::_internal_set_observing_begin_frame_source(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.observing_begin_frame_source_ = value;
}

// optional bool begin_impl_frame_deadline_task = 3;
inline bool ChromeCompositorSchedulerState::has_begin_impl_frame_deadline_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_begin_impl_frame_deadline_task() {
  _impl_.begin_impl_frame_deadline_task_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ChromeCompositorSchedulerState::begin_impl_frame_deadline_task() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_deadline_task)
  return _internal_begin_impl_frame_deadline_task();
}
inline void ChromeCompositorSchedulerState::set_begin_impl_frame_deadline_task(bool value) {
  _internal_set_begin_impl_frame_deadline_task(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_deadline_task)
}
inline bool ChromeCompositorSchedulerState::_internal_begin_impl_frame_deadline_task() const {
  return _impl_.begin_impl_frame_deadline_task_;
}
inline void ChromeCompositorSchedulerState::_internal_set_begin_impl_frame_deadline_task(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.begin_impl_frame_deadline_task_ = value;
}

// optional bool pending_begin_frame_task = 4;
inline bool ChromeCompositorSchedulerState::has_pending_begin_frame_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_pending_begin_frame_task() {
  _impl_.pending_begin_frame_task_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ChromeCompositorSchedulerState::pending_begin_frame_task() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.pending_begin_frame_task)
  return _internal_pending_begin_frame_task();
}
inline void ChromeCompositorSchedulerState::set_pending_begin_frame_task(bool value) {
  _internal_set_pending_begin_frame_task(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.pending_begin_frame_task)
}
inline bool ChromeCompositorSchedulerState::_internal_pending_begin_frame_task() const {
  return _impl_.pending_begin_frame_task_;
}
inline void ChromeCompositorSchedulerState::_internal_set_pending_begin_frame_task(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pending_begin_frame_task_ = value;
}

// optional bool skipped_last_frame_missed_exceeded_deadline = 5;
inline bool ChromeCompositorSchedulerState::has_skipped_last_frame_missed_exceeded_deadline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_skipped_last_frame_missed_exceeded_deadline() {
  _impl_.skipped_last_frame_missed_exceeded_deadline_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ChromeCompositorSchedulerState::skipped_last_frame_missed_exceeded_deadline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.skipped_last_frame_missed_exceeded_deadline)
  return _internal_skipped_last_frame_missed_exceeded_deadline();
}
inline void ChromeCompositorSchedulerState::set_skipped_last_frame_missed_exceeded_deadline(bool value) {
  _internal_set_skipped_last_frame_missed_exceeded_deadline(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.skipped_last_frame_missed_exceeded_deadline)
}
inline bool ChromeCompositorSchedulerState::_internal_skipped_last_frame_missed_exceeded_deadline() const {
  return _impl_.skipped_last_frame_missed_exceeded_deadline_;
}
inline void ChromeCompositorSchedulerState::_internal_set_skipped_last_frame_missed_exceeded_deadline(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.skipped_last_frame_missed_exceeded_deadline_ = value;
}

// optional .perfetto.protos.ChromeCompositorSchedulerAction inside_action = 7;
inline bool ChromeCompositorSchedulerState::has_inside_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_inside_action() {
  _impl_.inside_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::perfetto::protos::ChromeCompositorSchedulerAction ChromeCompositorSchedulerState::inside_action() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.inside_action)
  return _internal_inside_action();
}
inline void ChromeCompositorSchedulerState::set_inside_action(::perfetto::protos::ChromeCompositorSchedulerAction value) {
   _internal_set_inside_action(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.inside_action)
}
inline ::perfetto::protos::ChromeCompositorSchedulerAction ChromeCompositorSchedulerState::_internal_inside_action() const {
  return static_cast<::perfetto::protos::ChromeCompositorSchedulerAction>(_impl_.inside_action_);
}
inline void ChromeCompositorSchedulerState::_internal_set_inside_action(::perfetto::protos::ChromeCompositorSchedulerAction value) {
  assert(::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.inside_action_ = value;
}

// optional .perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode deadline_mode = 8;
inline bool ChromeCompositorSchedulerState::has_deadline_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_deadline_mode() {
  _impl_.deadline_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::deadline_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.deadline_mode)
  return _internal_deadline_mode();
}
inline void ChromeCompositorSchedulerState::set_deadline_mode(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value) {
   _internal_set_deadline_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.deadline_mode)
}
inline ::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode ChromeCompositorSchedulerState::_internal_deadline_mode() const {
  return static_cast<::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>(_impl_.deadline_mode_);
}
inline void ChromeCompositorSchedulerState::_internal_set_deadline_mode(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode value) {
  assert(::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.deadline_mode_ = value;
}

// optional int64 deadline_us = 9;
inline bool ChromeCompositorSchedulerState::has_deadline_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_deadline_us() {
  _impl_.deadline_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t ChromeCompositorSchedulerState::deadline_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.deadline_us)
  return _internal_deadline_us();
}
inline void ChromeCompositorSchedulerState::set_deadline_us(::int64_t value) {
  _internal_set_deadline_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.deadline_us)
}
inline ::int64_t ChromeCompositorSchedulerState::_internal_deadline_us() const {
  return _impl_.deadline_us_;
}
inline void ChromeCompositorSchedulerState::_internal_set_deadline_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.deadline_us_ = value;
}

// optional int64 deadline_scheduled_at_us = 10;
inline bool ChromeCompositorSchedulerState::has_deadline_scheduled_at_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_deadline_scheduled_at_us() {
  _impl_.deadline_scheduled_at_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t ChromeCompositorSchedulerState::deadline_scheduled_at_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.deadline_scheduled_at_us)
  return _internal_deadline_scheduled_at_us();
}
inline void ChromeCompositorSchedulerState::set_deadline_scheduled_at_us(::int64_t value) {
  _internal_set_deadline_scheduled_at_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.deadline_scheduled_at_us)
}
inline ::int64_t ChromeCompositorSchedulerState::_internal_deadline_scheduled_at_us() const {
  return _impl_.deadline_scheduled_at_us_;
}
inline void ChromeCompositorSchedulerState::_internal_set_deadline_scheduled_at_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.deadline_scheduled_at_us_ = value;
}

// optional int64 now_us = 11;
inline bool ChromeCompositorSchedulerState::has_now_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_now_us() {
  _impl_.now_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t ChromeCompositorSchedulerState::now_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.now_us)
  return _internal_now_us();
}
inline void ChromeCompositorSchedulerState::set_now_us(::int64_t value) {
  _internal_set_now_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.now_us)
}
inline ::int64_t ChromeCompositorSchedulerState::_internal_now_us() const {
  return _impl_.now_us_;
}
inline void ChromeCompositorSchedulerState::_internal_set_now_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.now_us_ = value;
}

// optional int64 now_to_deadline_delta_us = 12;
inline bool ChromeCompositorSchedulerState::has_now_to_deadline_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_now_to_deadline_delta_us() {
  _impl_.now_to_deadline_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t ChromeCompositorSchedulerState::now_to_deadline_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.now_to_deadline_delta_us)
  return _internal_now_to_deadline_delta_us();
}
inline void ChromeCompositorSchedulerState::set_now_to_deadline_delta_us(::int64_t value) {
  _internal_set_now_to_deadline_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.now_to_deadline_delta_us)
}
inline ::int64_t ChromeCompositorSchedulerState::_internal_now_to_deadline_delta_us() const {
  return _impl_.now_to_deadline_delta_us_;
}
inline void ChromeCompositorSchedulerState::_internal_set_now_to_deadline_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.now_to_deadline_delta_us_ = value;
}

// optional int64 now_to_deadline_scheduled_at_delta_us = 13;
inline bool ChromeCompositorSchedulerState::has_now_to_deadline_scheduled_at_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ChromeCompositorSchedulerState::clear_now_to_deadline_scheduled_at_delta_us() {
  _impl_.now_to_deadline_scheduled_at_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int64_t ChromeCompositorSchedulerState::now_to_deadline_scheduled_at_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.now_to_deadline_scheduled_at_delta_us)
  return _internal_now_to_deadline_scheduled_at_delta_us();
}
inline void ChromeCompositorSchedulerState::set_now_to_deadline_scheduled_at_delta_us(::int64_t value) {
  _internal_set_now_to_deadline_scheduled_at_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorSchedulerState.now_to_deadline_scheduled_at_delta_us)
}
inline ::int64_t ChromeCompositorSchedulerState::_internal_now_to_deadline_scheduled_at_delta_us() const {
  return _impl_.now_to_deadline_scheduled_at_delta_us_;
}
inline void ChromeCompositorSchedulerState::_internal_set_now_to_deadline_scheduled_at_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.now_to_deadline_scheduled_at_delta_us_ = value;
}

// optional .perfetto.protos.BeginImplFrameArgs begin_impl_frame_args = 14;
inline bool ChromeCompositorSchedulerState::has_begin_impl_frame_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.begin_impl_frame_args_ != nullptr);
  return value;
}
inline void ChromeCompositorSchedulerState::clear_begin_impl_frame_args() {
  if (_impl_.begin_impl_frame_args_ != nullptr) _impl_.begin_impl_frame_args_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::BeginImplFrameArgs& ChromeCompositorSchedulerState::_internal_begin_impl_frame_args() const {
  const ::perfetto::protos::BeginImplFrameArgs* p = _impl_.begin_impl_frame_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BeginImplFrameArgs&>(
      ::perfetto::protos::_BeginImplFrameArgs_default_instance_);
}
inline const ::perfetto::protos::BeginImplFrameArgs& ChromeCompositorSchedulerState::begin_impl_frame_args() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_args)
  return _internal_begin_impl_frame_args();
}
inline void ChromeCompositorSchedulerState::unsafe_arena_set_allocated_begin_impl_frame_args(
    ::perfetto::protos::BeginImplFrameArgs* begin_impl_frame_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.begin_impl_frame_args_);
  }
  _impl_.begin_impl_frame_args_ = begin_impl_frame_args;
  if (begin_impl_frame_args) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_args)
}
inline ::perfetto::protos::BeginImplFrameArgs* ChromeCompositorSchedulerState::release_begin_impl_frame_args() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BeginImplFrameArgs* temp = _impl_.begin_impl_frame_args_;
  _impl_.begin_impl_frame_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BeginImplFrameArgs* ChromeCompositorSchedulerState::unsafe_arena_release_begin_impl_frame_args() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_args)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::BeginImplFrameArgs* temp = _impl_.begin_impl_frame_args_;
  _impl_.begin_impl_frame_args_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BeginImplFrameArgs* ChromeCompositorSchedulerState::_internal_mutable_begin_impl_frame_args() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.begin_impl_frame_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BeginImplFrameArgs>(GetArenaForAllocation());
    _impl_.begin_impl_frame_args_ = p;
  }
  return _impl_.begin_impl_frame_args_;
}
inline ::perfetto::protos::BeginImplFrameArgs* ChromeCompositorSchedulerState::mutable_begin_impl_frame_args() {
  ::perfetto::protos::BeginImplFrameArgs* _msg = _internal_mutable_begin_impl_frame_args();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_args)
  return _msg;
}
inline void ChromeCompositorSchedulerState::set_allocated_begin_impl_frame_args(::perfetto::protos::BeginImplFrameArgs* begin_impl_frame_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.begin_impl_frame_args_;
  }
  if (begin_impl_frame_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(begin_impl_frame_args);
    if (message_arena != submessage_arena) {
      begin_impl_frame_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_impl_frame_args, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.begin_impl_frame_args_ = begin_impl_frame_args;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_args)
}

// optional .perfetto.protos.BeginFrameObserverState begin_frame_observer_state = 15;
inline bool ChromeCompositorSchedulerState::has_begin_frame_observer_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.begin_frame_observer_state_ != nullptr);
  return value;
}
inline void ChromeCompositorSchedulerState::clear_begin_frame_observer_state() {
  if (_impl_.begin_frame_observer_state_ != nullptr) _impl_.begin_frame_observer_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::BeginFrameObserverState& ChromeCompositorSchedulerState::_internal_begin_frame_observer_state() const {
  const ::perfetto::protos::BeginFrameObserverState* p = _impl_.begin_frame_observer_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BeginFrameObserverState&>(
      ::perfetto::protos::_BeginFrameObserverState_default_instance_);
}
inline const ::perfetto::protos::BeginFrameObserverState& ChromeCompositorSchedulerState::begin_frame_observer_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_observer_state)
  return _internal_begin_frame_observer_state();
}
inline void ChromeCompositorSchedulerState::unsafe_arena_set_allocated_begin_frame_observer_state(
    ::perfetto::protos::BeginFrameObserverState* begin_frame_observer_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.begin_frame_observer_state_);
  }
  _impl_.begin_frame_observer_state_ = begin_frame_observer_state;
  if (begin_frame_observer_state) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_observer_state)
}
inline ::perfetto::protos::BeginFrameObserverState* ChromeCompositorSchedulerState::release_begin_frame_observer_state() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::BeginFrameObserverState* temp = _impl_.begin_frame_observer_state_;
  _impl_.begin_frame_observer_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BeginFrameObserverState* ChromeCompositorSchedulerState::unsafe_arena_release_begin_frame_observer_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_observer_state)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::BeginFrameObserverState* temp = _impl_.begin_frame_observer_state_;
  _impl_.begin_frame_observer_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BeginFrameObserverState* ChromeCompositorSchedulerState::_internal_mutable_begin_frame_observer_state() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.begin_frame_observer_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BeginFrameObserverState>(GetArenaForAllocation());
    _impl_.begin_frame_observer_state_ = p;
  }
  return _impl_.begin_frame_observer_state_;
}
inline ::perfetto::protos::BeginFrameObserverState* ChromeCompositorSchedulerState::mutable_begin_frame_observer_state() {
  ::perfetto::protos::BeginFrameObserverState* _msg = _internal_mutable_begin_frame_observer_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_observer_state)
  return _msg;
}
inline void ChromeCompositorSchedulerState::set_allocated_begin_frame_observer_state(::perfetto::protos::BeginFrameObserverState* begin_frame_observer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.begin_frame_observer_state_;
  }
  if (begin_frame_observer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(begin_frame_observer_state);
    if (message_arena != submessage_arena) {
      begin_frame_observer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_frame_observer_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.begin_frame_observer_state_ = begin_frame_observer_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_observer_state)
}

// optional .perfetto.protos.BeginFrameSourceState begin_frame_source_state = 16;
inline bool ChromeCompositorSchedulerState::has_begin_frame_source_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.begin_frame_source_state_ != nullptr);
  return value;
}
inline void ChromeCompositorSchedulerState::clear_begin_frame_source_state() {
  if (_impl_.begin_frame_source_state_ != nullptr) _impl_.begin_frame_source_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::perfetto::protos::BeginFrameSourceState& ChromeCompositorSchedulerState::_internal_begin_frame_source_state() const {
  const ::perfetto::protos::BeginFrameSourceState* p = _impl_.begin_frame_source_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BeginFrameSourceState&>(
      ::perfetto::protos::_BeginFrameSourceState_default_instance_);
}
inline const ::perfetto::protos::BeginFrameSourceState& ChromeCompositorSchedulerState::begin_frame_source_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_source_state)
  return _internal_begin_frame_source_state();
}
inline void ChromeCompositorSchedulerState::unsafe_arena_set_allocated_begin_frame_source_state(
    ::perfetto::protos::BeginFrameSourceState* begin_frame_source_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.begin_frame_source_state_);
  }
  _impl_.begin_frame_source_state_ = begin_frame_source_state;
  if (begin_frame_source_state) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_source_state)
}
inline ::perfetto::protos::BeginFrameSourceState* ChromeCompositorSchedulerState::release_begin_frame_source_state() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::BeginFrameSourceState* temp = _impl_.begin_frame_source_state_;
  _impl_.begin_frame_source_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BeginFrameSourceState* ChromeCompositorSchedulerState::unsafe_arena_release_begin_frame_source_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_source_state)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::perfetto::protos::BeginFrameSourceState* temp = _impl_.begin_frame_source_state_;
  _impl_.begin_frame_source_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BeginFrameSourceState* ChromeCompositorSchedulerState::_internal_mutable_begin_frame_source_state() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.begin_frame_source_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BeginFrameSourceState>(GetArenaForAllocation());
    _impl_.begin_frame_source_state_ = p;
  }
  return _impl_.begin_frame_source_state_;
}
inline ::perfetto::protos::BeginFrameSourceState* ChromeCompositorSchedulerState::mutable_begin_frame_source_state() {
  ::perfetto::protos::BeginFrameSourceState* _msg = _internal_mutable_begin_frame_source_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_source_state)
  return _msg;
}
inline void ChromeCompositorSchedulerState::set_allocated_begin_frame_source_state(::perfetto::protos::BeginFrameSourceState* begin_frame_source_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.begin_frame_source_state_;
  }
  if (begin_frame_source_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(begin_frame_source_state);
    if (message_arena != submessage_arena) {
      begin_frame_source_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_frame_source_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.begin_frame_source_state_ = begin_frame_source_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.begin_frame_source_state)
}

// optional .perfetto.protos.CompositorTimingHistory compositor_timing_history = 17;
inline bool ChromeCompositorSchedulerState::has_compositor_timing_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compositor_timing_history_ != nullptr);
  return value;
}
inline void ChromeCompositorSchedulerState::clear_compositor_timing_history() {
  if (_impl_.compositor_timing_history_ != nullptr) _impl_.compositor_timing_history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::perfetto::protos::CompositorTimingHistory& ChromeCompositorSchedulerState::_internal_compositor_timing_history() const {
  const ::perfetto::protos::CompositorTimingHistory* p = _impl_.compositor_timing_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::CompositorTimingHistory&>(
      ::perfetto::protos::_CompositorTimingHistory_default_instance_);
}
inline const ::perfetto::protos::CompositorTimingHistory& ChromeCompositorSchedulerState::compositor_timing_history() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorSchedulerState.compositor_timing_history)
  return _internal_compositor_timing_history();
}
inline void ChromeCompositorSchedulerState::unsafe_arena_set_allocated_compositor_timing_history(
    ::perfetto::protos::CompositorTimingHistory* compositor_timing_history) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compositor_timing_history_);
  }
  _impl_.compositor_timing_history_ = compositor_timing_history;
  if (compositor_timing_history) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.compositor_timing_history)
}
inline ::perfetto::protos::CompositorTimingHistory* ChromeCompositorSchedulerState::release_compositor_timing_history() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::CompositorTimingHistory* temp = _impl_.compositor_timing_history_;
  _impl_.compositor_timing_history_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::CompositorTimingHistory* ChromeCompositorSchedulerState::unsafe_arena_release_compositor_timing_history() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorSchedulerState.compositor_timing_history)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::perfetto::protos::CompositorTimingHistory* temp = _impl_.compositor_timing_history_;
  _impl_.compositor_timing_history_ = nullptr;
  return temp;
}
inline ::perfetto::protos::CompositorTimingHistory* ChromeCompositorSchedulerState::_internal_mutable_compositor_timing_history() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.compositor_timing_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::CompositorTimingHistory>(GetArenaForAllocation());
    _impl_.compositor_timing_history_ = p;
  }
  return _impl_.compositor_timing_history_;
}
inline ::perfetto::protos::CompositorTimingHistory* ChromeCompositorSchedulerState::mutable_compositor_timing_history() {
  ::perfetto::protos::CompositorTimingHistory* _msg = _internal_mutable_compositor_timing_history();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorSchedulerState.compositor_timing_history)
  return _msg;
}
inline void ChromeCompositorSchedulerState::set_allocated_compositor_timing_history(::perfetto::protos::CompositorTimingHistory* compositor_timing_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compositor_timing_history_;
  }
  if (compositor_timing_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compositor_timing_history);
    if (message_arena != submessage_arena) {
      compositor_timing_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compositor_timing_history, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.compositor_timing_history_ = compositor_timing_history;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorSchedulerState.compositor_timing_history)
}

// -------------------------------------------------------------------

// ChromeCompositorStateMachine_MajorState

// optional .perfetto.protos.ChromeCompositorSchedulerAction next_action = 1;
inline bool ChromeCompositorStateMachine_MajorState::has_next_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MajorState::clear_next_action() {
  _impl_.next_action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ChromeCompositorSchedulerAction ChromeCompositorStateMachine_MajorState::next_action() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MajorState.next_action)
  return _internal_next_action();
}
inline void ChromeCompositorStateMachine_MajorState::set_next_action(::perfetto::protos::ChromeCompositorSchedulerAction value) {
   _internal_set_next_action(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MajorState.next_action)
}
inline ::perfetto::protos::ChromeCompositorSchedulerAction ChromeCompositorStateMachine_MajorState::_internal_next_action() const {
  return static_cast<::perfetto::protos::ChromeCompositorSchedulerAction>(_impl_.next_action_);
}
inline void ChromeCompositorStateMachine_MajorState::_internal_set_next_action(::perfetto::protos::ChromeCompositorSchedulerAction value) {
  assert(::perfetto::protos::ChromeCompositorSchedulerAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.next_action_ = value;
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState begin_impl_frame_state = 2;
inline bool ChromeCompositorStateMachine_MajorState::has_begin_impl_frame_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MajorState::clear_begin_impl_frame_state() {
  _impl_.begin_impl_frame_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::begin_impl_frame_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MajorState.begin_impl_frame_state)
  return _internal_begin_impl_frame_state();
}
inline void ChromeCompositorStateMachine_MajorState::set_begin_impl_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState value) {
   _internal_set_begin_impl_frame_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MajorState.begin_impl_frame_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState ChromeCompositorStateMachine_MajorState::_internal_begin_impl_frame_state() const {
  return static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState>(_impl_.begin_impl_frame_state_);
}
inline void ChromeCompositorStateMachine_MajorState::_internal_set_begin_impl_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState value) {
  assert(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.begin_impl_frame_state_ = value;
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState begin_main_frame_state = 3;
inline bool ChromeCompositorStateMachine_MajorState::has_begin_main_frame_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MajorState::clear_begin_main_frame_state() {
  _impl_.begin_main_frame_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::begin_main_frame_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MajorState.begin_main_frame_state)
  return _internal_begin_main_frame_state();
}
inline void ChromeCompositorStateMachine_MajorState::set_begin_main_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState value) {
   _internal_set_begin_main_frame_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MajorState.begin_main_frame_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState ChromeCompositorStateMachine_MajorState::_internal_begin_main_frame_state() const {
  return static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState>(_impl_.begin_main_frame_state_);
}
inline void ChromeCompositorStateMachine_MajorState::_internal_set_begin_main_frame_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState value) {
  assert(::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.begin_main_frame_state_ = value;
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState layer_tree_frame_sink_state = 4;
inline bool ChromeCompositorStateMachine_MajorState::has_layer_tree_frame_sink_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MajorState::clear_layer_tree_frame_sink_state() {
  _impl_.layer_tree_frame_sink_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::layer_tree_frame_sink_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MajorState.layer_tree_frame_sink_state)
  return _internal_layer_tree_frame_sink_state();
}
inline void ChromeCompositorStateMachine_MajorState::set_layer_tree_frame_sink_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value) {
   _internal_set_layer_tree_frame_sink_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MajorState.layer_tree_frame_sink_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState ChromeCompositorStateMachine_MajorState::_internal_layer_tree_frame_sink_state() const {
  return static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>(_impl_.layer_tree_frame_sink_state_);
}
inline void ChromeCompositorStateMachine_MajorState::_internal_set_layer_tree_frame_sink_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState value) {
  assert(::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.layer_tree_frame_sink_state_ = value;
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState forced_redraw_state = 5;
inline bool ChromeCompositorStateMachine_MajorState::has_forced_redraw_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MajorState::clear_forced_redraw_state() {
  _impl_.forced_redraw_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::forced_redraw_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MajorState.forced_redraw_state)
  return _internal_forced_redraw_state();
}
inline void ChromeCompositorStateMachine_MajorState::set_forced_redraw_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value) {
   _internal_set_forced_redraw_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MajorState.forced_redraw_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState ChromeCompositorStateMachine_MajorState::_internal_forced_redraw_state() const {
  return static_cast<::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>(_impl_.forced_redraw_state_);
}
inline void ChromeCompositorStateMachine_MajorState::_internal_set_forced_redraw_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState value) {
  assert(::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.forced_redraw_state_ = value;
}

// -------------------------------------------------------------------

// ChromeCompositorStateMachine_MinorState

// optional int32 commit_count = 1;
inline bool ChromeCompositorStateMachine_MinorState::has_commit_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_commit_count() {
  _impl_.commit_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::commit_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.commit_count)
  return _internal_commit_count();
}
inline void ChromeCompositorStateMachine_MinorState::set_commit_count(::int32_t value) {
  _internal_set_commit_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.commit_count)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_commit_count() const {
  return _impl_.commit_count_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_commit_count(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.commit_count_ = value;
}

// optional int32 current_frame_number = 2;
inline bool ChromeCompositorStateMachine_MinorState::has_current_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_current_frame_number() {
  _impl_.current_frame_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::current_frame_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.current_frame_number)
  return _internal_current_frame_number();
}
inline void ChromeCompositorStateMachine_MinorState::set_current_frame_number(::int32_t value) {
  _internal_set_current_frame_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.current_frame_number)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_current_frame_number() const {
  return _impl_.current_frame_number_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_current_frame_number(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.current_frame_number_ = value;
}

// optional int32 last_frame_number_submit_performed = 3;
inline bool ChromeCompositorStateMachine_MinorState::has_last_frame_number_submit_performed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_last_frame_number_submit_performed() {
  _impl_.last_frame_number_submit_performed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::last_frame_number_submit_performed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_frame_number_submit_performed)
  return _internal_last_frame_number_submit_performed();
}
inline void ChromeCompositorStateMachine_MinorState::set_last_frame_number_submit_performed(::int32_t value) {
  _internal_set_last_frame_number_submit_performed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_frame_number_submit_performed)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_last_frame_number_submit_performed() const {
  return _impl_.last_frame_number_submit_performed_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_last_frame_number_submit_performed(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.last_frame_number_submit_performed_ = value;
}

// optional int32 last_frame_number_draw_performed = 4;
inline bool ChromeCompositorStateMachine_MinorState::has_last_frame_number_draw_performed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_last_frame_number_draw_performed() {
  _impl_.last_frame_number_draw_performed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::last_frame_number_draw_performed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_frame_number_draw_performed)
  return _internal_last_frame_number_draw_performed();
}
inline void ChromeCompositorStateMachine_MinorState::set_last_frame_number_draw_performed(::int32_t value) {
  _internal_set_last_frame_number_draw_performed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_frame_number_draw_performed)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_last_frame_number_draw_performed() const {
  return _impl_.last_frame_number_draw_performed_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_last_frame_number_draw_performed(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.last_frame_number_draw_performed_ = value;
}

// optional int32 last_frame_number_begin_main_frame_sent = 5;
inline bool ChromeCompositorStateMachine_MinorState::has_last_frame_number_begin_main_frame_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_last_frame_number_begin_main_frame_sent() {
  _impl_.last_frame_number_begin_main_frame_sent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::last_frame_number_begin_main_frame_sent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_frame_number_begin_main_frame_sent)
  return _internal_last_frame_number_begin_main_frame_sent();
}
inline void ChromeCompositorStateMachine_MinorState::set_last_frame_number_begin_main_frame_sent(::int32_t value) {
  _internal_set_last_frame_number_begin_main_frame_sent(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_frame_number_begin_main_frame_sent)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_last_frame_number_begin_main_frame_sent() const {
  return _impl_.last_frame_number_begin_main_frame_sent_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_last_frame_number_begin_main_frame_sent(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.last_frame_number_begin_main_frame_sent_ = value;
}

// optional bool did_draw = 6;
inline bool ChromeCompositorStateMachine_MinorState::has_did_draw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_draw() {
  _impl_.did_draw_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_draw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_draw)
  return _internal_did_draw();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_draw(bool value) {
  _internal_set_did_draw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_draw)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_draw() const {
  return _impl_.did_draw_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_draw(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.did_draw_ = value;
}

// optional bool did_send_begin_main_frame_for_current_frame = 7;
inline bool ChromeCompositorStateMachine_MinorState::has_did_send_begin_main_frame_for_current_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_send_begin_main_frame_for_current_frame() {
  _impl_.did_send_begin_main_frame_for_current_frame_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_send_begin_main_frame_for_current_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_send_begin_main_frame_for_current_frame)
  return _internal_did_send_begin_main_frame_for_current_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_send_begin_main_frame_for_current_frame(bool value) {
  _internal_set_did_send_begin_main_frame_for_current_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_send_begin_main_frame_for_current_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_send_begin_main_frame_for_current_frame() const {
  return _impl_.did_send_begin_main_frame_for_current_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_send_begin_main_frame_for_current_frame(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.did_send_begin_main_frame_for_current_frame_ = value;
}

// optional bool did_notify_begin_main_frame_not_expected_until = 8;
inline bool ChromeCompositorStateMachine_MinorState::has_did_notify_begin_main_frame_not_expected_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_notify_begin_main_frame_not_expected_until() {
  _impl_.did_notify_begin_main_frame_not_expected_until_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_notify_begin_main_frame_not_expected_until() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_notify_begin_main_frame_not_expected_until)
  return _internal_did_notify_begin_main_frame_not_expected_until();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_notify_begin_main_frame_not_expected_until(bool value) {
  _internal_set_did_notify_begin_main_frame_not_expected_until(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_notify_begin_main_frame_not_expected_until)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_notify_begin_main_frame_not_expected_until() const {
  return _impl_.did_notify_begin_main_frame_not_expected_until_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_notify_begin_main_frame_not_expected_until(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.did_notify_begin_main_frame_not_expected_until_ = value;
}

// optional bool did_notify_begin_main_frame_not_expected_soon = 9;
inline bool ChromeCompositorStateMachine_MinorState::has_did_notify_begin_main_frame_not_expected_soon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_notify_begin_main_frame_not_expected_soon() {
  _impl_.did_notify_begin_main_frame_not_expected_soon_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_notify_begin_main_frame_not_expected_soon() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_notify_begin_main_frame_not_expected_soon)
  return _internal_did_notify_begin_main_frame_not_expected_soon();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_notify_begin_main_frame_not_expected_soon(bool value) {
  _internal_set_did_notify_begin_main_frame_not_expected_soon(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_notify_begin_main_frame_not_expected_soon)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_notify_begin_main_frame_not_expected_soon() const {
  return _impl_.did_notify_begin_main_frame_not_expected_soon_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_notify_begin_main_frame_not_expected_soon(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.did_notify_begin_main_frame_not_expected_soon_ = value;
}

// optional bool wants_begin_main_frame_not_expected = 10;
inline bool ChromeCompositorStateMachine_MinorState::has_wants_begin_main_frame_not_expected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_wants_begin_main_frame_not_expected() {
  _impl_.wants_begin_main_frame_not_expected_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ChromeCompositorStateMachine_MinorState::wants_begin_main_frame_not_expected() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.wants_begin_main_frame_not_expected)
  return _internal_wants_begin_main_frame_not_expected();
}
inline void ChromeCompositorStateMachine_MinorState::set_wants_begin_main_frame_not_expected(bool value) {
  _internal_set_wants_begin_main_frame_not_expected(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.wants_begin_main_frame_not_expected)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_wants_begin_main_frame_not_expected() const {
  return _impl_.wants_begin_main_frame_not_expected_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_wants_begin_main_frame_not_expected(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.wants_begin_main_frame_not_expected_ = value;
}

// optional bool did_commit_during_frame = 11;
inline bool ChromeCompositorStateMachine_MinorState::has_did_commit_during_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_commit_during_frame() {
  _impl_.did_commit_during_frame_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_commit_during_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_commit_during_frame)
  return _internal_did_commit_during_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_commit_during_frame(bool value) {
  _internal_set_did_commit_during_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_commit_during_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_commit_during_frame() const {
  return _impl_.did_commit_during_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_commit_during_frame(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.did_commit_during_frame_ = value;
}

// optional bool did_invalidate_layer_tree_frame_sink = 12;
inline bool ChromeCompositorStateMachine_MinorState::has_did_invalidate_layer_tree_frame_sink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_invalidate_layer_tree_frame_sink() {
  _impl_.did_invalidate_layer_tree_frame_sink_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_invalidate_layer_tree_frame_sink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_invalidate_layer_tree_frame_sink)
  return _internal_did_invalidate_layer_tree_frame_sink();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_invalidate_layer_tree_frame_sink(bool value) {
  _internal_set_did_invalidate_layer_tree_frame_sink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_invalidate_layer_tree_frame_sink)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_invalidate_layer_tree_frame_sink() const {
  return _impl_.did_invalidate_layer_tree_frame_sink_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_invalidate_layer_tree_frame_sink(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.did_invalidate_layer_tree_frame_sink_ = value;
}

// optional bool did_perform_impl_side_invalidaion = 13;
inline bool ChromeCompositorStateMachine_MinorState::has_did_perform_impl_side_invalidaion() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_perform_impl_side_invalidaion() {
  _impl_.did_perform_impl_side_invalidaion_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_perform_impl_side_invalidaion() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_perform_impl_side_invalidaion)
  return _internal_did_perform_impl_side_invalidaion();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_perform_impl_side_invalidaion(bool value) {
  _internal_set_did_perform_impl_side_invalidaion(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_perform_impl_side_invalidaion)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_perform_impl_side_invalidaion() const {
  return _impl_.did_perform_impl_side_invalidaion_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_perform_impl_side_invalidaion(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.did_perform_impl_side_invalidaion_ = value;
}

// optional bool did_prepare_tiles = 14;
inline bool ChromeCompositorStateMachine_MinorState::has_did_prepare_tiles() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_prepare_tiles() {
  _impl_.did_prepare_tiles_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_prepare_tiles() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_prepare_tiles)
  return _internal_did_prepare_tiles();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_prepare_tiles(bool value) {
  _internal_set_did_prepare_tiles(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_prepare_tiles)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_prepare_tiles() const {
  return _impl_.did_prepare_tiles_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_prepare_tiles(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.did_prepare_tiles_ = value;
}

// optional int32 consecutive_checkerboard_animations = 15;
inline bool ChromeCompositorStateMachine_MinorState::has_consecutive_checkerboard_animations() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_consecutive_checkerboard_animations() {
  _impl_.consecutive_checkerboard_animations_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::consecutive_checkerboard_animations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.consecutive_checkerboard_animations)
  return _internal_consecutive_checkerboard_animations();
}
inline void ChromeCompositorStateMachine_MinorState::set_consecutive_checkerboard_animations(::int32_t value) {
  _internal_set_consecutive_checkerboard_animations(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.consecutive_checkerboard_animations)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_consecutive_checkerboard_animations() const {
  return _impl_.consecutive_checkerboard_animations_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_consecutive_checkerboard_animations(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.consecutive_checkerboard_animations_ = value;
}

// optional int32 pending_submit_frames = 16;
inline bool ChromeCompositorStateMachine_MinorState::has_pending_submit_frames() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_pending_submit_frames() {
  _impl_.pending_submit_frames_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::pending_submit_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.pending_submit_frames)
  return _internal_pending_submit_frames();
}
inline void ChromeCompositorStateMachine_MinorState::set_pending_submit_frames(::int32_t value) {
  _internal_set_pending_submit_frames(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.pending_submit_frames)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_pending_submit_frames() const {
  return _impl_.pending_submit_frames_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_pending_submit_frames(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.pending_submit_frames_ = value;
}

// optional int32 submit_frames_with_current_layer_tree_frame_sink = 17;
inline bool ChromeCompositorStateMachine_MinorState::has_submit_frames_with_current_layer_tree_frame_sink() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_submit_frames_with_current_layer_tree_frame_sink() {
  _impl_.submit_frames_with_current_layer_tree_frame_sink_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::submit_frames_with_current_layer_tree_frame_sink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.submit_frames_with_current_layer_tree_frame_sink)
  return _internal_submit_frames_with_current_layer_tree_frame_sink();
}
inline void ChromeCompositorStateMachine_MinorState::set_submit_frames_with_current_layer_tree_frame_sink(::int32_t value) {
  _internal_set_submit_frames_with_current_layer_tree_frame_sink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.submit_frames_with_current_layer_tree_frame_sink)
}
inline ::int32_t ChromeCompositorStateMachine_MinorState::_internal_submit_frames_with_current_layer_tree_frame_sink() const {
  return _impl_.submit_frames_with_current_layer_tree_frame_sink_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_submit_frames_with_current_layer_tree_frame_sink(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.submit_frames_with_current_layer_tree_frame_sink_ = value;
}

// optional bool needs_redraw = 18;
inline bool ChromeCompositorStateMachine_MinorState::has_needs_redraw() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_needs_redraw() {
  _impl_.needs_redraw_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool ChromeCompositorStateMachine_MinorState::needs_redraw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_redraw)
  return _internal_needs_redraw();
}
inline void ChromeCompositorStateMachine_MinorState::set_needs_redraw(bool value) {
  _internal_set_needs_redraw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_redraw)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_needs_redraw() const {
  return _impl_.needs_redraw_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_needs_redraw(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.needs_redraw_ = value;
}

// optional bool needs_prepare_tiles = 19;
inline bool ChromeCompositorStateMachine_MinorState::has_needs_prepare_tiles() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_needs_prepare_tiles() {
  _impl_.needs_prepare_tiles_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool ChromeCompositorStateMachine_MinorState::needs_prepare_tiles() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_prepare_tiles)
  return _internal_needs_prepare_tiles();
}
inline void ChromeCompositorStateMachine_MinorState::set_needs_prepare_tiles(bool value) {
  _internal_set_needs_prepare_tiles(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_prepare_tiles)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_needs_prepare_tiles() const {
  return _impl_.needs_prepare_tiles_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_needs_prepare_tiles(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.needs_prepare_tiles_ = value;
}

// optional bool needs_begin_main_frame = 20;
inline bool ChromeCompositorStateMachine_MinorState::has_needs_begin_main_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_needs_begin_main_frame() {
  _impl_.needs_begin_main_frame_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool ChromeCompositorStateMachine_MinorState::needs_begin_main_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_begin_main_frame)
  return _internal_needs_begin_main_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_needs_begin_main_frame(bool value) {
  _internal_set_needs_begin_main_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_begin_main_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_needs_begin_main_frame() const {
  return _impl_.needs_begin_main_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_needs_begin_main_frame(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.needs_begin_main_frame_ = value;
}

// optional bool needs_one_begin_impl_frame = 21;
inline bool ChromeCompositorStateMachine_MinorState::has_needs_one_begin_impl_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_needs_one_begin_impl_frame() {
  _impl_.needs_one_begin_impl_frame_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool ChromeCompositorStateMachine_MinorState::needs_one_begin_impl_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_one_begin_impl_frame)
  return _internal_needs_one_begin_impl_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_needs_one_begin_impl_frame(bool value) {
  _internal_set_needs_one_begin_impl_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_one_begin_impl_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_needs_one_begin_impl_frame() const {
  return _impl_.needs_one_begin_impl_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_needs_one_begin_impl_frame(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.needs_one_begin_impl_frame_ = value;
}

// optional bool visible = 22;
inline bool ChromeCompositorStateMachine_MinorState::has_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_visible() {
  _impl_.visible_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool ChromeCompositorStateMachine_MinorState::visible() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.visible)
  return _internal_visible();
}
inline void ChromeCompositorStateMachine_MinorState::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.visible)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_visible() const {
  return _impl_.visible_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_visible(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.visible_ = value;
}

// optional bool begin_frame_source_paused = 23;
inline bool ChromeCompositorStateMachine_MinorState::has_begin_frame_source_paused() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_begin_frame_source_paused() {
  _impl_.begin_frame_source_paused_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool ChromeCompositorStateMachine_MinorState::begin_frame_source_paused() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.begin_frame_source_paused)
  return _internal_begin_frame_source_paused();
}
inline void ChromeCompositorStateMachine_MinorState::set_begin_frame_source_paused(bool value) {
  _internal_set_begin_frame_source_paused(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.begin_frame_source_paused)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_begin_frame_source_paused() const {
  return _impl_.begin_frame_source_paused_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_begin_frame_source_paused(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.begin_frame_source_paused_ = value;
}

// optional bool can_draw = 24;
inline bool ChromeCompositorStateMachine_MinorState::has_can_draw() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_can_draw() {
  _impl_.can_draw_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool ChromeCompositorStateMachine_MinorState::can_draw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.can_draw)
  return _internal_can_draw();
}
inline void ChromeCompositorStateMachine_MinorState::set_can_draw(bool value) {
  _internal_set_can_draw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.can_draw)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_can_draw() const {
  return _impl_.can_draw_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_can_draw(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.can_draw_ = value;
}

// optional bool resourceless_draw = 25;
inline bool ChromeCompositorStateMachine_MinorState::has_resourceless_draw() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_resourceless_draw() {
  _impl_.resourceless_draw_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::resourceless_draw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.resourceless_draw)
  return _internal_resourceless_draw();
}
inline void ChromeCompositorStateMachine_MinorState::set_resourceless_draw(bool value) {
  _internal_set_resourceless_draw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.resourceless_draw)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_resourceless_draw() const {
  return _impl_.resourceless_draw_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_resourceless_draw(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.resourceless_draw_ = value;
}

// optional bool has_pending_tree = 26;
inline bool ChromeCompositorStateMachine_MinorState::has_has_pending_tree() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_has_pending_tree() {
  _impl_.has_pending_tree_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::has_pending_tree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.has_pending_tree)
  return _internal_has_pending_tree();
}
inline void ChromeCompositorStateMachine_MinorState::set_has_pending_tree(bool value) {
  _internal_set_has_pending_tree(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.has_pending_tree)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_has_pending_tree() const {
  return _impl_.has_pending_tree_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_has_pending_tree(bool value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.has_pending_tree_ = value;
}

// optional bool pending_tree_is_ready_for_activation = 27;
inline bool ChromeCompositorStateMachine_MinorState::has_pending_tree_is_ready_for_activation() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_pending_tree_is_ready_for_activation() {
  _impl_.pending_tree_is_ready_for_activation_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::pending_tree_is_ready_for_activation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.pending_tree_is_ready_for_activation)
  return _internal_pending_tree_is_ready_for_activation();
}
inline void ChromeCompositorStateMachine_MinorState::set_pending_tree_is_ready_for_activation(bool value) {
  _internal_set_pending_tree_is_ready_for_activation(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.pending_tree_is_ready_for_activation)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_pending_tree_is_ready_for_activation() const {
  return _impl_.pending_tree_is_ready_for_activation_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_pending_tree_is_ready_for_activation(bool value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.pending_tree_is_ready_for_activation_ = value;
}

// optional bool active_tree_needs_first_draw = 28;
inline bool ChromeCompositorStateMachine_MinorState::has_active_tree_needs_first_draw() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_active_tree_needs_first_draw() {
  _impl_.active_tree_needs_first_draw_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::active_tree_needs_first_draw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.active_tree_needs_first_draw)
  return _internal_active_tree_needs_first_draw();
}
inline void ChromeCompositorStateMachine_MinorState::set_active_tree_needs_first_draw(bool value) {
  _internal_set_active_tree_needs_first_draw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.active_tree_needs_first_draw)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_active_tree_needs_first_draw() const {
  return _impl_.active_tree_needs_first_draw_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_active_tree_needs_first_draw(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.active_tree_needs_first_draw_ = value;
}

// optional bool active_tree_is_ready_to_draw = 29;
inline bool ChromeCompositorStateMachine_MinorState::has_active_tree_is_ready_to_draw() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_active_tree_is_ready_to_draw() {
  _impl_.active_tree_is_ready_to_draw_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::active_tree_is_ready_to_draw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.active_tree_is_ready_to_draw)
  return _internal_active_tree_is_ready_to_draw();
}
inline void ChromeCompositorStateMachine_MinorState::set_active_tree_is_ready_to_draw(bool value) {
  _internal_set_active_tree_is_ready_to_draw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.active_tree_is_ready_to_draw)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_active_tree_is_ready_to_draw() const {
  return _impl_.active_tree_is_ready_to_draw_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_active_tree_is_ready_to_draw(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.active_tree_is_ready_to_draw_ = value;
}

// optional bool did_create_and_initialize_first_layer_tree_frame_sink = 30;
inline bool ChromeCompositorStateMachine_MinorState::has_did_create_and_initialize_first_layer_tree_frame_sink() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_create_and_initialize_first_layer_tree_frame_sink() {
  _impl_.did_create_and_initialize_first_layer_tree_frame_sink_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_create_and_initialize_first_layer_tree_frame_sink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_create_and_initialize_first_layer_tree_frame_sink)
  return _internal_did_create_and_initialize_first_layer_tree_frame_sink();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_create_and_initialize_first_layer_tree_frame_sink(bool value) {
  _internal_set_did_create_and_initialize_first_layer_tree_frame_sink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_create_and_initialize_first_layer_tree_frame_sink)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_create_and_initialize_first_layer_tree_frame_sink() const {
  return _impl_.did_create_and_initialize_first_layer_tree_frame_sink_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_create_and_initialize_first_layer_tree_frame_sink(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.did_create_and_initialize_first_layer_tree_frame_sink_ = value;
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority tree_priority = 31;
inline bool ChromeCompositorStateMachine_MinorState::has_tree_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_tree_priority() {
  _impl_.tree_priority_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::tree_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.tree_priority)
  return _internal_tree_priority();
}
inline void ChromeCompositorStateMachine_MinorState::set_tree_priority(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority value) {
   _internal_set_tree_priority(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.tree_priority)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority ChromeCompositorStateMachine_MinorState::_internal_tree_priority() const {
  return static_cast<::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority>(_impl_.tree_priority_);
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_tree_priority(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority value) {
  assert(::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority_IsValid(value));
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.tree_priority_ = value;
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState scroll_handler_state = 32;
inline bool ChromeCompositorStateMachine_MinorState::has_scroll_handler_state() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_scroll_handler_state() {
  _impl_.scroll_handler_state_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::scroll_handler_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.scroll_handler_state)
  return _internal_scroll_handler_state();
}
inline void ChromeCompositorStateMachine_MinorState::set_scroll_handler_state(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState value) {
   _internal_set_scroll_handler_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.scroll_handler_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState ChromeCompositorStateMachine_MinorState::_internal_scroll_handler_state() const {
  return static_cast<::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState>(_impl_.scroll_handler_state_);
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_scroll_handler_state(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState value) {
  assert(::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.scroll_handler_state_ = value;
}

// optional bool critical_begin_main_frame_to_activate_is_fast = 33;
inline bool ChromeCompositorStateMachine_MinorState::has_critical_begin_main_frame_to_activate_is_fast() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_critical_begin_main_frame_to_activate_is_fast() {
  _impl_.critical_begin_main_frame_to_activate_is_fast_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool ChromeCompositorStateMachine_MinorState::critical_begin_main_frame_to_activate_is_fast() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.critical_begin_main_frame_to_activate_is_fast)
  return _internal_critical_begin_main_frame_to_activate_is_fast();
}
inline void ChromeCompositorStateMachine_MinorState::set_critical_begin_main_frame_to_activate_is_fast(bool value) {
  _internal_set_critical_begin_main_frame_to_activate_is_fast(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.critical_begin_main_frame_to_activate_is_fast)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_critical_begin_main_frame_to_activate_is_fast() const {
  return _impl_.critical_begin_main_frame_to_activate_is_fast_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_critical_begin_main_frame_to_activate_is_fast(bool value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.critical_begin_main_frame_to_activate_is_fast_ = value;
}

// optional bool main_thread_missed_last_deadline = 34;
inline bool ChromeCompositorStateMachine_MinorState::has_main_thread_missed_last_deadline() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_main_thread_missed_last_deadline() {
  _impl_.main_thread_missed_last_deadline_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool ChromeCompositorStateMachine_MinorState::main_thread_missed_last_deadline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.main_thread_missed_last_deadline)
  return _internal_main_thread_missed_last_deadline();
}
inline void ChromeCompositorStateMachine_MinorState::set_main_thread_missed_last_deadline(bool value) {
  _internal_set_main_thread_missed_last_deadline(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.main_thread_missed_last_deadline)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_main_thread_missed_last_deadline() const {
  return _impl_.main_thread_missed_last_deadline_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_main_thread_missed_last_deadline(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.main_thread_missed_last_deadline_ = value;
}

// optional bool video_needs_begin_frames = 36;
inline bool ChromeCompositorStateMachine_MinorState::has_video_needs_begin_frames() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_video_needs_begin_frames() {
  _impl_.video_needs_begin_frames_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool ChromeCompositorStateMachine_MinorState::video_needs_begin_frames() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.video_needs_begin_frames)
  return _internal_video_needs_begin_frames();
}
inline void ChromeCompositorStateMachine_MinorState::set_video_needs_begin_frames(bool value) {
  _internal_set_video_needs_begin_frames(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.video_needs_begin_frames)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_video_needs_begin_frames() const {
  return _impl_.video_needs_begin_frames_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_video_needs_begin_frames(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.video_needs_begin_frames_ = value;
}

// optional bool defer_begin_main_frame = 37;
inline bool ChromeCompositorStateMachine_MinorState::has_defer_begin_main_frame() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_defer_begin_main_frame() {
  _impl_.defer_begin_main_frame_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool ChromeCompositorStateMachine_MinorState::defer_begin_main_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.defer_begin_main_frame)
  return _internal_defer_begin_main_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_defer_begin_main_frame(bool value) {
  _internal_set_defer_begin_main_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.defer_begin_main_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_defer_begin_main_frame() const {
  return _impl_.defer_begin_main_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_defer_begin_main_frame(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.defer_begin_main_frame_ = value;
}

// optional bool last_commit_had_no_updates = 38;
inline bool ChromeCompositorStateMachine_MinorState::has_last_commit_had_no_updates() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_last_commit_had_no_updates() {
  _impl_.last_commit_had_no_updates_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool ChromeCompositorStateMachine_MinorState::last_commit_had_no_updates() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_commit_had_no_updates)
  return _internal_last_commit_had_no_updates();
}
inline void ChromeCompositorStateMachine_MinorState::set_last_commit_had_no_updates(bool value) {
  _internal_set_last_commit_had_no_updates(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.last_commit_had_no_updates)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_last_commit_had_no_updates() const {
  return _impl_.last_commit_had_no_updates_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_last_commit_had_no_updates(bool value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.last_commit_had_no_updates_ = value;
}

// optional bool did_draw_in_last_frame = 39;
inline bool ChromeCompositorStateMachine_MinorState::has_did_draw_in_last_frame() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_draw_in_last_frame() {
  _impl_.did_draw_in_last_frame_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_draw_in_last_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_draw_in_last_frame)
  return _internal_did_draw_in_last_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_draw_in_last_frame(bool value) {
  _internal_set_did_draw_in_last_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_draw_in_last_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_draw_in_last_frame() const {
  return _impl_.did_draw_in_last_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_draw_in_last_frame(bool value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.did_draw_in_last_frame_ = value;
}

// optional bool did_submit_in_last_frame = 40;
inline bool ChromeCompositorStateMachine_MinorState::has_did_submit_in_last_frame() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_did_submit_in_last_frame() {
  _impl_.did_submit_in_last_frame_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool ChromeCompositorStateMachine_MinorState::did_submit_in_last_frame() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_submit_in_last_frame)
  return _internal_did_submit_in_last_frame();
}
inline void ChromeCompositorStateMachine_MinorState::set_did_submit_in_last_frame(bool value) {
  _internal_set_did_submit_in_last_frame(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.did_submit_in_last_frame)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_did_submit_in_last_frame() const {
  return _impl_.did_submit_in_last_frame_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_did_submit_in_last_frame(bool value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.did_submit_in_last_frame_ = value;
}

// optional bool needs_impl_side_invalidation = 41;
inline bool ChromeCompositorStateMachine_MinorState::has_needs_impl_side_invalidation() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_needs_impl_side_invalidation() {
  _impl_.needs_impl_side_invalidation_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool ChromeCompositorStateMachine_MinorState::needs_impl_side_invalidation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_impl_side_invalidation)
  return _internal_needs_impl_side_invalidation();
}
inline void ChromeCompositorStateMachine_MinorState::set_needs_impl_side_invalidation(bool value) {
  _internal_set_needs_impl_side_invalidation(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.needs_impl_side_invalidation)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_needs_impl_side_invalidation() const {
  return _impl_.needs_impl_side_invalidation_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_needs_impl_side_invalidation(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.needs_impl_side_invalidation_ = value;
}

// optional bool current_pending_tree_is_impl_side = 42;
inline bool ChromeCompositorStateMachine_MinorState::has_current_pending_tree_is_impl_side() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_current_pending_tree_is_impl_side() {
  _impl_.current_pending_tree_is_impl_side_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool ChromeCompositorStateMachine_MinorState::current_pending_tree_is_impl_side() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.current_pending_tree_is_impl_side)
  return _internal_current_pending_tree_is_impl_side();
}
inline void ChromeCompositorStateMachine_MinorState::set_current_pending_tree_is_impl_side(bool value) {
  _internal_set_current_pending_tree_is_impl_side(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.current_pending_tree_is_impl_side)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_current_pending_tree_is_impl_side() const {
  return _impl_.current_pending_tree_is_impl_side_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_current_pending_tree_is_impl_side(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.current_pending_tree_is_impl_side_ = value;
}

// optional bool previous_pending_tree_was_impl_side = 43;
inline bool ChromeCompositorStateMachine_MinorState::has_previous_pending_tree_was_impl_side() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_previous_pending_tree_was_impl_side() {
  _impl_.previous_pending_tree_was_impl_side_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool ChromeCompositorStateMachine_MinorState::previous_pending_tree_was_impl_side() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.previous_pending_tree_was_impl_side)
  return _internal_previous_pending_tree_was_impl_side();
}
inline void ChromeCompositorStateMachine_MinorState::set_previous_pending_tree_was_impl_side(bool value) {
  _internal_set_previous_pending_tree_was_impl_side(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.previous_pending_tree_was_impl_side)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_previous_pending_tree_was_impl_side() const {
  return _impl_.previous_pending_tree_was_impl_side_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_previous_pending_tree_was_impl_side(bool value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.previous_pending_tree_was_impl_side_ = value;
}

// optional bool processing_animation_worklets_for_active_tree = 44;
inline bool ChromeCompositorStateMachine_MinorState::has_processing_animation_worklets_for_active_tree() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_processing_animation_worklets_for_active_tree() {
  _impl_.processing_animation_worklets_for_active_tree_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool ChromeCompositorStateMachine_MinorState::processing_animation_worklets_for_active_tree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.processing_animation_worklets_for_active_tree)
  return _internal_processing_animation_worklets_for_active_tree();
}
inline void ChromeCompositorStateMachine_MinorState::set_processing_animation_worklets_for_active_tree(bool value) {
  _internal_set_processing_animation_worklets_for_active_tree(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.processing_animation_worklets_for_active_tree)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_processing_animation_worklets_for_active_tree() const {
  return _impl_.processing_animation_worklets_for_active_tree_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_processing_animation_worklets_for_active_tree(bool value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.processing_animation_worklets_for_active_tree_ = value;
}

// optional bool processing_animation_worklets_for_pending_tree = 45;
inline bool ChromeCompositorStateMachine_MinorState::has_processing_animation_worklets_for_pending_tree() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_processing_animation_worklets_for_pending_tree() {
  _impl_.processing_animation_worklets_for_pending_tree_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool ChromeCompositorStateMachine_MinorState::processing_animation_worklets_for_pending_tree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.processing_animation_worklets_for_pending_tree)
  return _internal_processing_animation_worklets_for_pending_tree();
}
inline void ChromeCompositorStateMachine_MinorState::set_processing_animation_worklets_for_pending_tree(bool value) {
  _internal_set_processing_animation_worklets_for_pending_tree(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.processing_animation_worklets_for_pending_tree)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_processing_animation_worklets_for_pending_tree() const {
  return _impl_.processing_animation_worklets_for_pending_tree_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_processing_animation_worklets_for_pending_tree(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.processing_animation_worklets_for_pending_tree_ = value;
}

// optional bool processing_paint_worklets_for_pending_tree = 46;
inline bool ChromeCompositorStateMachine_MinorState::has_processing_paint_worklets_for_pending_tree() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void ChromeCompositorStateMachine_MinorState::clear_processing_paint_worklets_for_pending_tree() {
  _impl_.processing_paint_worklets_for_pending_tree_ = false;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline bool ChromeCompositorStateMachine_MinorState::processing_paint_worklets_for_pending_tree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.MinorState.processing_paint_worklets_for_pending_tree)
  return _internal_processing_paint_worklets_for_pending_tree();
}
inline void ChromeCompositorStateMachine_MinorState::set_processing_paint_worklets_for_pending_tree(bool value) {
  _internal_set_processing_paint_worklets_for_pending_tree(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeCompositorStateMachine.MinorState.processing_paint_worklets_for_pending_tree)
}
inline bool ChromeCompositorStateMachine_MinorState::_internal_processing_paint_worklets_for_pending_tree() const {
  return _impl_.processing_paint_worklets_for_pending_tree_;
}
inline void ChromeCompositorStateMachine_MinorState::_internal_set_processing_paint_worklets_for_pending_tree(bool value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.processing_paint_worklets_for_pending_tree_ = value;
}

// -------------------------------------------------------------------

// ChromeCompositorStateMachine

// optional .perfetto.protos.ChromeCompositorStateMachine.MajorState major_state = 1;
inline bool ChromeCompositorStateMachine::has_major_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.major_state_ != nullptr);
  return value;
}
inline void ChromeCompositorStateMachine::clear_major_state() {
  if (_impl_.major_state_ != nullptr) _impl_.major_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::ChromeCompositorStateMachine_MajorState& ChromeCompositorStateMachine::_internal_major_state() const {
  const ::perfetto::protos::ChromeCompositorStateMachine_MajorState* p = _impl_.major_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeCompositorStateMachine_MajorState&>(
      ::perfetto::protos::_ChromeCompositorStateMachine_MajorState_default_instance_);
}
inline const ::perfetto::protos::ChromeCompositorStateMachine_MajorState& ChromeCompositorStateMachine::major_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.major_state)
  return _internal_major_state();
}
inline void ChromeCompositorStateMachine::unsafe_arena_set_allocated_major_state(
    ::perfetto::protos::ChromeCompositorStateMachine_MajorState* major_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.major_state_);
  }
  _impl_.major_state_ = major_state;
  if (major_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorStateMachine.major_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState* ChromeCompositorStateMachine::release_major_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState* temp = _impl_.major_state_;
  _impl_.major_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState* ChromeCompositorStateMachine::unsafe_arena_release_major_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorStateMachine.major_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState* temp = _impl_.major_state_;
  _impl_.major_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState* ChromeCompositorStateMachine::_internal_mutable_major_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.major_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeCompositorStateMachine_MajorState>(GetArenaForAllocation());
    _impl_.major_state_ = p;
  }
  return _impl_.major_state_;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MajorState* ChromeCompositorStateMachine::mutable_major_state() {
  ::perfetto::protos::ChromeCompositorStateMachine_MajorState* _msg = _internal_mutable_major_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorStateMachine.major_state)
  return _msg;
}
inline void ChromeCompositorStateMachine::set_allocated_major_state(::perfetto::protos::ChromeCompositorStateMachine_MajorState* major_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.major_state_;
  }
  if (major_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(major_state);
    if (message_arena != submessage_arena) {
      major_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, major_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.major_state_ = major_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorStateMachine.major_state)
}

// optional .perfetto.protos.ChromeCompositorStateMachine.MinorState minor_state = 2;
inline bool ChromeCompositorStateMachine::has_minor_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.minor_state_ != nullptr);
  return value;
}
inline void ChromeCompositorStateMachine::clear_minor_state() {
  if (_impl_.minor_state_ != nullptr) _impl_.minor_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::perfetto::protos::ChromeCompositorStateMachine_MinorState& ChromeCompositorStateMachine::_internal_minor_state() const {
  const ::perfetto::protos::ChromeCompositorStateMachine_MinorState* p = _impl_.minor_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeCompositorStateMachine_MinorState&>(
      ::perfetto::protos::_ChromeCompositorStateMachine_MinorState_default_instance_);
}
inline const ::perfetto::protos::ChromeCompositorStateMachine_MinorState& ChromeCompositorStateMachine::minor_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeCompositorStateMachine.minor_state)
  return _internal_minor_state();
}
inline void ChromeCompositorStateMachine::unsafe_arena_set_allocated_minor_state(
    ::perfetto::protos::ChromeCompositorStateMachine_MinorState* minor_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minor_state_);
  }
  _impl_.minor_state_ = minor_state;
  if (minor_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeCompositorStateMachine.minor_state)
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState* ChromeCompositorStateMachine::release_minor_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState* temp = _impl_.minor_state_;
  _impl_.minor_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState* ChromeCompositorStateMachine::unsafe_arena_release_minor_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeCompositorStateMachine.minor_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState* temp = _impl_.minor_state_;
  _impl_.minor_state_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState* ChromeCompositorStateMachine::_internal_mutable_minor_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.minor_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeCompositorStateMachine_MinorState>(GetArenaForAllocation());
    _impl_.minor_state_ = p;
  }
  return _impl_.minor_state_;
}
inline ::perfetto::protos::ChromeCompositorStateMachine_MinorState* ChromeCompositorStateMachine::mutable_minor_state() {
  ::perfetto::protos::ChromeCompositorStateMachine_MinorState* _msg = _internal_mutable_minor_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeCompositorStateMachine.minor_state)
  return _msg;
}
inline void ChromeCompositorStateMachine::set_allocated_minor_state(::perfetto::protos::ChromeCompositorStateMachine_MinorState* minor_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.minor_state_;
  }
  if (minor_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(minor_state);
    if (message_arena != submessage_arena) {
      minor_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minor_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.minor_state_ = minor_state;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeCompositorStateMachine.minor_state)
}

// -------------------------------------------------------------------

// BeginFrameArgs

// optional .perfetto.protos.BeginFrameArgs.BeginFrameArgsType type = 1;
inline bool BeginFrameArgs::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.type)
  return _internal_type();
}
inline void BeginFrameArgs::set_type(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.type)
}
inline ::perfetto::protos::BeginFrameArgs_BeginFrameArgsType BeginFrameArgs::_internal_type() const {
  return static_cast<::perfetto::protos::BeginFrameArgs_BeginFrameArgsType>(_impl_.type_);
}
inline void BeginFrameArgs::_internal_set_type(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType value) {
  assert(::perfetto::protos::BeginFrameArgs_BeginFrameArgsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}

// optional uint64 source_id = 2;
inline bool BeginFrameArgs::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_source_id() {
  _impl_.source_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t BeginFrameArgs::source_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.source_id)
  return _internal_source_id();
}
inline void BeginFrameArgs::set_source_id(::uint64_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.source_id)
}
inline ::uint64_t BeginFrameArgs::_internal_source_id() const {
  return _impl_.source_id_;
}
inline void BeginFrameArgs::_internal_set_source_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_id_ = value;
}

// optional uint64 sequence_number = 3;
inline bool BeginFrameArgs::has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_sequence_number() {
  _impl_.sequence_number_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t BeginFrameArgs::sequence_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.sequence_number)
  return _internal_sequence_number();
}
inline void BeginFrameArgs::set_sequence_number(::uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.sequence_number)
}
inline ::uint64_t BeginFrameArgs::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline void BeginFrameArgs::_internal_set_sequence_number(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sequence_number_ = value;
}

// optional int64 frame_time_us = 4;
inline bool BeginFrameArgs::has_frame_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_frame_time_us() {
  _impl_.frame_time_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t BeginFrameArgs::frame_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.frame_time_us)
  return _internal_frame_time_us();
}
inline void BeginFrameArgs::set_frame_time_us(::int64_t value) {
  _internal_set_frame_time_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.frame_time_us)
}
inline ::int64_t BeginFrameArgs::_internal_frame_time_us() const {
  return _impl_.frame_time_us_;
}
inline void BeginFrameArgs::_internal_set_frame_time_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.frame_time_us_ = value;
}

// optional int64 deadline_us = 5;
inline bool BeginFrameArgs::has_deadline_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_deadline_us() {
  _impl_.deadline_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t BeginFrameArgs::deadline_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.deadline_us)
  return _internal_deadline_us();
}
inline void BeginFrameArgs::set_deadline_us(::int64_t value) {
  _internal_set_deadline_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.deadline_us)
}
inline ::int64_t BeginFrameArgs::_internal_deadline_us() const {
  return _impl_.deadline_us_;
}
inline void BeginFrameArgs::_internal_set_deadline_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deadline_us_ = value;
}

// optional int64 interval_delta_us = 6;
inline bool BeginFrameArgs::has_interval_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_interval_delta_us() {
  _impl_.interval_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t BeginFrameArgs::interval_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.interval_delta_us)
  return _internal_interval_delta_us();
}
inline void BeginFrameArgs::set_interval_delta_us(::int64_t value) {
  _internal_set_interval_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.interval_delta_us)
}
inline ::int64_t BeginFrameArgs::_internal_interval_delta_us() const {
  return _impl_.interval_delta_us_;
}
inline void BeginFrameArgs::_internal_set_interval_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.interval_delta_us_ = value;
}

// optional bool on_critical_path = 7;
inline bool BeginFrameArgs::has_on_critical_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_on_critical_path() {
  _impl_.on_critical_path_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool BeginFrameArgs::on_critical_path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.on_critical_path)
  return _internal_on_critical_path();
}
inline void BeginFrameArgs::set_on_critical_path(bool value) {
  _internal_set_on_critical_path(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.on_critical_path)
}
inline bool BeginFrameArgs::_internal_on_critical_path() const {
  return _impl_.on_critical_path_;
}
inline void BeginFrameArgs::_internal_set_on_critical_path(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.on_critical_path_ = value;
}

// optional bool animate_only = 8;
inline bool BeginFrameArgs::has_animate_only() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_animate_only() {
  _impl_.animate_only_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool BeginFrameArgs::animate_only() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.animate_only)
  return _internal_animate_only();
}
inline void BeginFrameArgs::set_animate_only(bool value) {
  _internal_set_animate_only(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.animate_only)
}
inline bool BeginFrameArgs::_internal_animate_only() const {
  return _impl_.animate_only_;
}
inline void BeginFrameArgs::_internal_set_animate_only(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.animate_only_ = value;
}

// uint64 source_location_iid = 9;
inline bool BeginFrameArgs::has_source_location_iid() const {
  return created_from_case() == kSourceLocationIid;
}
inline void BeginFrameArgs::set_has_source_location_iid() {
  _impl_._oneof_case_[0] = kSourceLocationIid;
}
inline void BeginFrameArgs::clear_source_location_iid() {
  if (created_from_case() == kSourceLocationIid) {
    _impl_.created_from_.source_location_iid_ = ::uint64_t{0u};
    clear_has_created_from();
  }
}
inline ::uint64_t BeginFrameArgs::source_location_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.source_location_iid)
  return _internal_source_location_iid();
}
inline void BeginFrameArgs::set_source_location_iid(::uint64_t value) {
  _internal_set_source_location_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.source_location_iid)
}
inline ::uint64_t BeginFrameArgs::_internal_source_location_iid() const {
  if (created_from_case() == kSourceLocationIid) {
    return _impl_.created_from_.source_location_iid_;
  }
  return ::uint64_t{0u};
}
inline void BeginFrameArgs::_internal_set_source_location_iid(::uint64_t value) {
  if (created_from_case() != kSourceLocationIid) {
    clear_created_from();
    set_has_source_location_iid();
  }
  _impl_.created_from_.source_location_iid_ = value;
}

// .perfetto.protos.SourceLocation source_location = 10;
inline bool BeginFrameArgs::has_source_location() const {
  return created_from_case() == kSourceLocation;
}
inline bool BeginFrameArgs::_internal_has_source_location() const {
  return created_from_case() == kSourceLocation;
}
inline void BeginFrameArgs::set_has_source_location() {
  _impl_._oneof_case_[0] = kSourceLocation;
}
inline ::perfetto::protos::SourceLocation* BeginFrameArgs::release_source_location() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BeginFrameArgs.source_location)
  if (created_from_case() == kSourceLocation) {
    clear_has_created_from();
    ::perfetto::protos::SourceLocation* temp = _impl_.created_from_.source_location_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.created_from_.source_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SourceLocation& BeginFrameArgs::_internal_source_location() const {
  return created_from_case() == kSourceLocation
      ? *_impl_.created_from_.source_location_
      : reinterpret_cast<::perfetto::protos::SourceLocation&>(::perfetto::protos::_SourceLocation_default_instance_);
}
inline const ::perfetto::protos::SourceLocation& BeginFrameArgs::source_location() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.source_location)
  return _internal_source_location();
}
inline ::perfetto::protos::SourceLocation* BeginFrameArgs::unsafe_arena_release_source_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.BeginFrameArgs.source_location)
  if (created_from_case() == kSourceLocation) {
    clear_has_created_from();
    ::perfetto::protos::SourceLocation* temp = _impl_.created_from_.source_location_;
    _impl_.created_from_.source_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BeginFrameArgs::unsafe_arena_set_allocated_source_location(::perfetto::protos::SourceLocation* source_location) {
  clear_created_from();
  if (source_location) {
    set_has_source_location();
    _impl_.created_from_.source_location_ = source_location;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BeginFrameArgs.source_location)
}
inline ::perfetto::protos::SourceLocation* BeginFrameArgs::_internal_mutable_source_location() {
  if (created_from_case() != kSourceLocation) {
    clear_created_from();
    set_has_source_location();
    _impl_.created_from_.source_location_ = CreateMaybeMessage< ::perfetto::protos::SourceLocation >(GetArenaForAllocation());
  }
  return _impl_.created_from_.source_location_;
}
inline ::perfetto::protos::SourceLocation* BeginFrameArgs::mutable_source_location() {
  ::perfetto::protos::SourceLocation* _msg = _internal_mutable_source_location();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BeginFrameArgs.source_location)
  return _msg;
}

// optional int64 frames_throttled_since_last = 12;
inline bool BeginFrameArgs::has_frames_throttled_since_last() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void BeginFrameArgs::clear_frames_throttled_since_last() {
  _impl_.frames_throttled_since_last_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t BeginFrameArgs::frames_throttled_since_last() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameArgs.frames_throttled_since_last)
  return _internal_frames_throttled_since_last();
}
inline void BeginFrameArgs::set_frames_throttled_since_last(::int64_t value) {
  _internal_set_frames_throttled_since_last(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameArgs.frames_throttled_since_last)
}
inline ::int64_t BeginFrameArgs::_internal_frames_throttled_since_last() const {
  return _impl_.frames_throttled_since_last_;
}
inline void BeginFrameArgs::_internal_set_frames_throttled_since_last(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.frames_throttled_since_last_ = value;
}

inline bool BeginFrameArgs::has_created_from() const {
  return created_from_case() != CREATED_FROM_NOT_SET;
}
inline void BeginFrameArgs::clear_has_created_from() {
  _impl_._oneof_case_[0] = CREATED_FROM_NOT_SET;
}
inline BeginFrameArgs::CreatedFromCase BeginFrameArgs::created_from_case() const {
  return BeginFrameArgs::CreatedFromCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BeginImplFrameArgs_TimestampsInUs

// optional int64 interval_delta = 1;
inline bool BeginImplFrameArgs_TimestampsInUs::has_interval_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_interval_delta() {
  _impl_.interval_delta_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::interval_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.interval_delta)
  return _internal_interval_delta();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_interval_delta(::int64_t value) {
  _internal_set_interval_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.interval_delta)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_interval_delta() const {
  return _impl_.interval_delta_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_interval_delta(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.interval_delta_ = value;
}

// optional int64 now_to_deadline_delta = 2;
inline bool BeginImplFrameArgs_TimestampsInUs::has_now_to_deadline_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_now_to_deadline_delta() {
  _impl_.now_to_deadline_delta_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::now_to_deadline_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.now_to_deadline_delta)
  return _internal_now_to_deadline_delta();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_now_to_deadline_delta(::int64_t value) {
  _internal_set_now_to_deadline_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.now_to_deadline_delta)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_now_to_deadline_delta() const {
  return _impl_.now_to_deadline_delta_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_now_to_deadline_delta(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.now_to_deadline_delta_ = value;
}

// optional int64 frame_time_to_now_delta = 3;
inline bool BeginImplFrameArgs_TimestampsInUs::has_frame_time_to_now_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_frame_time_to_now_delta() {
  _impl_.frame_time_to_now_delta_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::frame_time_to_now_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.frame_time_to_now_delta)
  return _internal_frame_time_to_now_delta();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_frame_time_to_now_delta(::int64_t value) {
  _internal_set_frame_time_to_now_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.frame_time_to_now_delta)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_frame_time_to_now_delta() const {
  return _impl_.frame_time_to_now_delta_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_frame_time_to_now_delta(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.frame_time_to_now_delta_ = value;
}

// optional int64 frame_time_to_deadline_delta = 4;
inline bool BeginImplFrameArgs_TimestampsInUs::has_frame_time_to_deadline_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_frame_time_to_deadline_delta() {
  _impl_.frame_time_to_deadline_delta_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::frame_time_to_deadline_delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.frame_time_to_deadline_delta)
  return _internal_frame_time_to_deadline_delta();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_frame_time_to_deadline_delta(::int64_t value) {
  _internal_set_frame_time_to_deadline_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.frame_time_to_deadline_delta)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_frame_time_to_deadline_delta() const {
  return _impl_.frame_time_to_deadline_delta_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_frame_time_to_deadline_delta(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.frame_time_to_deadline_delta_ = value;
}

// optional int64 now = 5;
inline bool BeginImplFrameArgs_TimestampsInUs::has_now() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_now() {
  _impl_.now_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::now() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.now)
  return _internal_now();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_now(::int64_t value) {
  _internal_set_now(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.now)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_now() const {
  return _impl_.now_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_now(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.now_ = value;
}

// optional int64 frame_time = 6;
inline bool BeginImplFrameArgs_TimestampsInUs::has_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_frame_time() {
  _impl_.frame_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::frame_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.frame_time)
  return _internal_frame_time();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_frame_time(::int64_t value) {
  _internal_set_frame_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.frame_time)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_frame_time() const {
  return _impl_.frame_time_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_frame_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.frame_time_ = value;
}

// optional int64 deadline = 7;
inline bool BeginImplFrameArgs_TimestampsInUs::has_deadline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void BeginImplFrameArgs_TimestampsInUs::clear_deadline() {
  _impl_.deadline_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::deadline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.deadline)
  return _internal_deadline();
}
inline void BeginImplFrameArgs_TimestampsInUs::set_deadline(::int64_t value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.TimestampsInUs.deadline)
}
inline ::int64_t BeginImplFrameArgs_TimestampsInUs::_internal_deadline() const {
  return _impl_.deadline_;
}
inline void BeginImplFrameArgs_TimestampsInUs::_internal_set_deadline(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deadline_ = value;
}

// -------------------------------------------------------------------

// BeginImplFrameArgs

// optional int64 updated_at_us = 1;
inline bool BeginImplFrameArgs::has_updated_at_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BeginImplFrameArgs::clear_updated_at_us() {
  _impl_.updated_at_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t BeginImplFrameArgs::updated_at_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.updated_at_us)
  return _internal_updated_at_us();
}
inline void BeginImplFrameArgs::set_updated_at_us(::int64_t value) {
  _internal_set_updated_at_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.updated_at_us)
}
inline ::int64_t BeginImplFrameArgs::_internal_updated_at_us() const {
  return _impl_.updated_at_us_;
}
inline void BeginImplFrameArgs::_internal_set_updated_at_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.updated_at_us_ = value;
}

// optional int64 finished_at_us = 2;
inline bool BeginImplFrameArgs::has_finished_at_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BeginImplFrameArgs::clear_finished_at_us() {
  _impl_.finished_at_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t BeginImplFrameArgs::finished_at_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.finished_at_us)
  return _internal_finished_at_us();
}
inline void BeginImplFrameArgs::set_finished_at_us(::int64_t value) {
  _internal_set_finished_at_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.finished_at_us)
}
inline ::int64_t BeginImplFrameArgs::_internal_finished_at_us() const {
  return _impl_.finished_at_us_;
}
inline void BeginImplFrameArgs::_internal_set_finished_at_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.finished_at_us_ = value;
}

// optional .perfetto.protos.BeginImplFrameArgs.State state = 3;
inline bool BeginImplFrameArgs::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BeginImplFrameArgs::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::perfetto::protos::BeginImplFrameArgs_State BeginImplFrameArgs::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.state)
  return _internal_state();
}
inline void BeginImplFrameArgs::set_state(::perfetto::protos::BeginImplFrameArgs_State value) {
   _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginImplFrameArgs.state)
}
inline ::perfetto::protos::BeginImplFrameArgs_State BeginImplFrameArgs::_internal_state() const {
  return static_cast<::perfetto::protos::BeginImplFrameArgs_State>(_impl_.state_);
}
inline void BeginImplFrameArgs::_internal_set_state(::perfetto::protos::BeginImplFrameArgs_State value) {
  assert(::perfetto::protos::BeginImplFrameArgs_State_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}

// .perfetto.protos.BeginFrameArgs current_args = 4;
inline bool BeginImplFrameArgs::has_current_args() const {
  return args_case() == kCurrentArgs;
}
inline bool BeginImplFrameArgs::_internal_has_current_args() const {
  return args_case() == kCurrentArgs;
}
inline void BeginImplFrameArgs::set_has_current_args() {
  _impl_._oneof_case_[0] = kCurrentArgs;
}
inline void BeginImplFrameArgs::clear_current_args() {
  if (args_case() == kCurrentArgs) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.args_.current_args_;
    }
    clear_has_args();
  }
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::release_current_args() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BeginImplFrameArgs.current_args)
  if (args_case() == kCurrentArgs) {
    clear_has_args();
    ::perfetto::protos::BeginFrameArgs* temp = _impl_.args_.current_args_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.current_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BeginFrameArgs& BeginImplFrameArgs::_internal_current_args() const {
  return args_case() == kCurrentArgs
      ? *_impl_.args_.current_args_
      : reinterpret_cast<::perfetto::protos::BeginFrameArgs&>(::perfetto::protos::_BeginFrameArgs_default_instance_);
}
inline const ::perfetto::protos::BeginFrameArgs& BeginImplFrameArgs::current_args() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.current_args)
  return _internal_current_args();
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::unsafe_arena_release_current_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.BeginImplFrameArgs.current_args)
  if (args_case() == kCurrentArgs) {
    clear_has_args();
    ::perfetto::protos::BeginFrameArgs* temp = _impl_.args_.current_args_;
    _impl_.args_.current_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BeginImplFrameArgs::unsafe_arena_set_allocated_current_args(::perfetto::protos::BeginFrameArgs* current_args) {
  clear_args();
  if (current_args) {
    set_has_current_args();
    _impl_.args_.current_args_ = current_args;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BeginImplFrameArgs.current_args)
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::_internal_mutable_current_args() {
  if (args_case() != kCurrentArgs) {
    clear_args();
    set_has_current_args();
    _impl_.args_.current_args_ = CreateMaybeMessage< ::perfetto::protos::BeginFrameArgs >(GetArenaForAllocation());
  }
  return _impl_.args_.current_args_;
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::mutable_current_args() {
  ::perfetto::protos::BeginFrameArgs* _msg = _internal_mutable_current_args();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BeginImplFrameArgs.current_args)
  return _msg;
}

// .perfetto.protos.BeginFrameArgs last_args = 5;
inline bool BeginImplFrameArgs::has_last_args() const {
  return args_case() == kLastArgs;
}
inline bool BeginImplFrameArgs::_internal_has_last_args() const {
  return args_case() == kLastArgs;
}
inline void BeginImplFrameArgs::set_has_last_args() {
  _impl_._oneof_case_[0] = kLastArgs;
}
inline void BeginImplFrameArgs::clear_last_args() {
  if (args_case() == kLastArgs) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.args_.last_args_;
    }
    clear_has_args();
  }
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::release_last_args() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BeginImplFrameArgs.last_args)
  if (args_case() == kLastArgs) {
    clear_has_args();
    ::perfetto::protos::BeginFrameArgs* temp = _impl_.args_.last_args_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.args_.last_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BeginFrameArgs& BeginImplFrameArgs::_internal_last_args() const {
  return args_case() == kLastArgs
      ? *_impl_.args_.last_args_
      : reinterpret_cast<::perfetto::protos::BeginFrameArgs&>(::perfetto::protos::_BeginFrameArgs_default_instance_);
}
inline const ::perfetto::protos::BeginFrameArgs& BeginImplFrameArgs::last_args() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.last_args)
  return _internal_last_args();
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::unsafe_arena_release_last_args() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.BeginImplFrameArgs.last_args)
  if (args_case() == kLastArgs) {
    clear_has_args();
    ::perfetto::protos::BeginFrameArgs* temp = _impl_.args_.last_args_;
    _impl_.args_.last_args_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BeginImplFrameArgs::unsafe_arena_set_allocated_last_args(::perfetto::protos::BeginFrameArgs* last_args) {
  clear_args();
  if (last_args) {
    set_has_last_args();
    _impl_.args_.last_args_ = last_args;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BeginImplFrameArgs.last_args)
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::_internal_mutable_last_args() {
  if (args_case() != kLastArgs) {
    clear_args();
    set_has_last_args();
    _impl_.args_.last_args_ = CreateMaybeMessage< ::perfetto::protos::BeginFrameArgs >(GetArenaForAllocation());
  }
  return _impl_.args_.last_args_;
}
inline ::perfetto::protos::BeginFrameArgs* BeginImplFrameArgs::mutable_last_args() {
  ::perfetto::protos::BeginFrameArgs* _msg = _internal_mutable_last_args();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BeginImplFrameArgs.last_args)
  return _msg;
}

// optional .perfetto.protos.BeginImplFrameArgs.TimestampsInUs timestamps_in_us = 6;
inline bool BeginImplFrameArgs::has_timestamps_in_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamps_in_us_ != nullptr);
  return value;
}
inline void BeginImplFrameArgs::clear_timestamps_in_us() {
  if (_impl_.timestamps_in_us_ != nullptr) _impl_.timestamps_in_us_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs& BeginImplFrameArgs::_internal_timestamps_in_us() const {
  const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* p = _impl_.timestamps_in_us_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs&>(
      ::perfetto::protos::_BeginImplFrameArgs_TimestampsInUs_default_instance_);
}
inline const ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs& BeginImplFrameArgs::timestamps_in_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginImplFrameArgs.timestamps_in_us)
  return _internal_timestamps_in_us();
}
inline void BeginImplFrameArgs::unsafe_arena_set_allocated_timestamps_in_us(
    ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* timestamps_in_us) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamps_in_us_);
  }
  _impl_.timestamps_in_us_ = timestamps_in_us;
  if (timestamps_in_us) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BeginImplFrameArgs.timestamps_in_us)
}
inline ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* BeginImplFrameArgs::release_timestamps_in_us() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* temp = _impl_.timestamps_in_us_;
  _impl_.timestamps_in_us_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* BeginImplFrameArgs::unsafe_arena_release_timestamps_in_us() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BeginImplFrameArgs.timestamps_in_us)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* temp = _impl_.timestamps_in_us_;
  _impl_.timestamps_in_us_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* BeginImplFrameArgs::_internal_mutable_timestamps_in_us() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamps_in_us_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BeginImplFrameArgs_TimestampsInUs>(GetArenaForAllocation());
    _impl_.timestamps_in_us_ = p;
  }
  return _impl_.timestamps_in_us_;
}
inline ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* BeginImplFrameArgs::mutable_timestamps_in_us() {
  ::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* _msg = _internal_mutable_timestamps_in_us();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BeginImplFrameArgs.timestamps_in_us)
  return _msg;
}
inline void BeginImplFrameArgs::set_allocated_timestamps_in_us(::perfetto::protos::BeginImplFrameArgs_TimestampsInUs* timestamps_in_us) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timestamps_in_us_;
  }
  if (timestamps_in_us) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestamps_in_us);
    if (message_arena != submessage_arena) {
      timestamps_in_us = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamps_in_us, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamps_in_us_ = timestamps_in_us;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginImplFrameArgs.timestamps_in_us)
}

inline bool BeginImplFrameArgs::has_args() const {
  return args_case() != ARGS_NOT_SET;
}
inline void BeginImplFrameArgs::clear_has_args() {
  _impl_._oneof_case_[0] = ARGS_NOT_SET;
}
inline BeginImplFrameArgs::ArgsCase BeginImplFrameArgs::args_case() const {
  return BeginImplFrameArgs::ArgsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BeginFrameObserverState

// optional int64 dropped_begin_frame_args = 1;
inline bool BeginFrameObserverState::has_dropped_begin_frame_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BeginFrameObserverState::clear_dropped_begin_frame_args() {
  _impl_.dropped_begin_frame_args_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t BeginFrameObserverState::dropped_begin_frame_args() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameObserverState.dropped_begin_frame_args)
  return _internal_dropped_begin_frame_args();
}
inline void BeginFrameObserverState::set_dropped_begin_frame_args(::int64_t value) {
  _internal_set_dropped_begin_frame_args(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameObserverState.dropped_begin_frame_args)
}
inline ::int64_t BeginFrameObserverState::_internal_dropped_begin_frame_args() const {
  return _impl_.dropped_begin_frame_args_;
}
inline void BeginFrameObserverState::_internal_set_dropped_begin_frame_args(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dropped_begin_frame_args_ = value;
}

// optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 2;
inline bool BeginFrameObserverState::has_last_begin_frame_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_begin_frame_args_ != nullptr);
  return value;
}
inline void BeginFrameObserverState::clear_last_begin_frame_args() {
  if (_impl_.last_begin_frame_args_ != nullptr) _impl_.last_begin_frame_args_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BeginFrameArgs& BeginFrameObserverState::_internal_last_begin_frame_args() const {
  const ::perfetto::protos::BeginFrameArgs* p = _impl_.last_begin_frame_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BeginFrameArgs&>(
      ::perfetto::protos::_BeginFrameArgs_default_instance_);
}
inline const ::perfetto::protos::BeginFrameArgs& BeginFrameObserverState::last_begin_frame_args() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameObserverState.last_begin_frame_args)
  return _internal_last_begin_frame_args();
}
inline void BeginFrameObserverState::unsafe_arena_set_allocated_last_begin_frame_args(
    ::perfetto::protos::BeginFrameArgs* last_begin_frame_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_begin_frame_args_);
  }
  _impl_.last_begin_frame_args_ = last_begin_frame_args;
  if (last_begin_frame_args) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BeginFrameObserverState.last_begin_frame_args)
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameObserverState::release_last_begin_frame_args() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BeginFrameArgs* temp = _impl_.last_begin_frame_args_;
  _impl_.last_begin_frame_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameObserverState::unsafe_arena_release_last_begin_frame_args() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BeginFrameObserverState.last_begin_frame_args)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BeginFrameArgs* temp = _impl_.last_begin_frame_args_;
  _impl_.last_begin_frame_args_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameObserverState::_internal_mutable_last_begin_frame_args() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.last_begin_frame_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BeginFrameArgs>(GetArenaForAllocation());
    _impl_.last_begin_frame_args_ = p;
  }
  return _impl_.last_begin_frame_args_;
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameObserverState::mutable_last_begin_frame_args() {
  ::perfetto::protos::BeginFrameArgs* _msg = _internal_mutable_last_begin_frame_args();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BeginFrameObserverState.last_begin_frame_args)
  return _msg;
}
inline void BeginFrameObserverState::set_allocated_last_begin_frame_args(::perfetto::protos::BeginFrameArgs* last_begin_frame_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_begin_frame_args_;
  }
  if (last_begin_frame_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_begin_frame_args);
    if (message_arena != submessage_arena) {
      last_begin_frame_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_begin_frame_args, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_begin_frame_args_ = last_begin_frame_args;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginFrameObserverState.last_begin_frame_args)
}

// -------------------------------------------------------------------

// BeginFrameSourceState

// optional uint32 source_id = 1;
inline bool BeginFrameSourceState::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BeginFrameSourceState::clear_source_id() {
  _impl_.source_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t BeginFrameSourceState::source_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameSourceState.source_id)
  return _internal_source_id();
}
inline void BeginFrameSourceState::set_source_id(::uint32_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameSourceState.source_id)
}
inline ::uint32_t BeginFrameSourceState::_internal_source_id() const {
  return _impl_.source_id_;
}
inline void BeginFrameSourceState::_internal_set_source_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_id_ = value;
}

// optional bool paused = 2;
inline bool BeginFrameSourceState::has_paused() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BeginFrameSourceState::clear_paused() {
  _impl_.paused_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool BeginFrameSourceState::paused() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameSourceState.paused)
  return _internal_paused();
}
inline void BeginFrameSourceState::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameSourceState.paused)
}
inline bool BeginFrameSourceState::_internal_paused() const {
  return _impl_.paused_;
}
inline void BeginFrameSourceState::_internal_set_paused(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.paused_ = value;
}

// optional uint32 num_observers = 3;
inline bool BeginFrameSourceState::has_num_observers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BeginFrameSourceState::clear_num_observers() {
  _impl_.num_observers_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t BeginFrameSourceState::num_observers() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameSourceState.num_observers)
  return _internal_num_observers();
}
inline void BeginFrameSourceState::set_num_observers(::uint32_t value) {
  _internal_set_num_observers(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.BeginFrameSourceState.num_observers)
}
inline ::uint32_t BeginFrameSourceState::_internal_num_observers() const {
  return _impl_.num_observers_;
}
inline void BeginFrameSourceState::_internal_set_num_observers(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_observers_ = value;
}

// optional .perfetto.protos.BeginFrameArgs last_begin_frame_args = 4;
inline bool BeginFrameSourceState::has_last_begin_frame_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_begin_frame_args_ != nullptr);
  return value;
}
inline void BeginFrameSourceState::clear_last_begin_frame_args() {
  if (_impl_.last_begin_frame_args_ != nullptr) _impl_.last_begin_frame_args_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::BeginFrameArgs& BeginFrameSourceState::_internal_last_begin_frame_args() const {
  const ::perfetto::protos::BeginFrameArgs* p = _impl_.last_begin_frame_args_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::BeginFrameArgs&>(
      ::perfetto::protos::_BeginFrameArgs_default_instance_);
}
inline const ::perfetto::protos::BeginFrameArgs& BeginFrameSourceState::last_begin_frame_args() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.BeginFrameSourceState.last_begin_frame_args)
  return _internal_last_begin_frame_args();
}
inline void BeginFrameSourceState::unsafe_arena_set_allocated_last_begin_frame_args(
    ::perfetto::protos::BeginFrameArgs* last_begin_frame_args) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_begin_frame_args_);
  }
  _impl_.last_begin_frame_args_ = last_begin_frame_args;
  if (last_begin_frame_args) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.BeginFrameSourceState.last_begin_frame_args)
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameSourceState::release_last_begin_frame_args() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BeginFrameArgs* temp = _impl_.last_begin_frame_args_;
  _impl_.last_begin_frame_args_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameSourceState::unsafe_arena_release_last_begin_frame_args() {
  // @@protoc_insertion_point(field_release:perfetto.protos.BeginFrameSourceState.last_begin_frame_args)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::BeginFrameArgs* temp = _impl_.last_begin_frame_args_;
  _impl_.last_begin_frame_args_ = nullptr;
  return temp;
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameSourceState::_internal_mutable_last_begin_frame_args() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.last_begin_frame_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::BeginFrameArgs>(GetArenaForAllocation());
    _impl_.last_begin_frame_args_ = p;
  }
  return _impl_.last_begin_frame_args_;
}
inline ::perfetto::protos::BeginFrameArgs* BeginFrameSourceState::mutable_last_begin_frame_args() {
  ::perfetto::protos::BeginFrameArgs* _msg = _internal_mutable_last_begin_frame_args();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.BeginFrameSourceState.last_begin_frame_args)
  return _msg;
}
inline void BeginFrameSourceState::set_allocated_last_begin_frame_args(::perfetto::protos::BeginFrameArgs* last_begin_frame_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_begin_frame_args_;
  }
  if (last_begin_frame_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_begin_frame_args);
    if (message_arena != submessage_arena) {
      last_begin_frame_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_begin_frame_args, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_begin_frame_args_ = last_begin_frame_args;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.BeginFrameSourceState.last_begin_frame_args)
}

// -------------------------------------------------------------------

// CompositorTimingHistory

// optional int64 begin_main_frame_queue_critical_estimate_delta_us = 1;
inline bool CompositorTimingHistory::has_begin_main_frame_queue_critical_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_begin_main_frame_queue_critical_estimate_delta_us() {
  _impl_.begin_main_frame_queue_critical_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t CompositorTimingHistory::begin_main_frame_queue_critical_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.begin_main_frame_queue_critical_estimate_delta_us)
  return _internal_begin_main_frame_queue_critical_estimate_delta_us();
}
inline void CompositorTimingHistory::set_begin_main_frame_queue_critical_estimate_delta_us(::int64_t value) {
  _internal_set_begin_main_frame_queue_critical_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.begin_main_frame_queue_critical_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_begin_main_frame_queue_critical_estimate_delta_us() const {
  return _impl_.begin_main_frame_queue_critical_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_begin_main_frame_queue_critical_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.begin_main_frame_queue_critical_estimate_delta_us_ = value;
}

// optional int64 begin_main_frame_queue_not_critical_estimate_delta_us = 2;
inline bool CompositorTimingHistory::has_begin_main_frame_queue_not_critical_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_begin_main_frame_queue_not_critical_estimate_delta_us() {
  _impl_.begin_main_frame_queue_not_critical_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t CompositorTimingHistory::begin_main_frame_queue_not_critical_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.begin_main_frame_queue_not_critical_estimate_delta_us)
  return _internal_begin_main_frame_queue_not_critical_estimate_delta_us();
}
inline void CompositorTimingHistory::set_begin_main_frame_queue_not_critical_estimate_delta_us(::int64_t value) {
  _internal_set_begin_main_frame_queue_not_critical_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.begin_main_frame_queue_not_critical_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_begin_main_frame_queue_not_critical_estimate_delta_us() const {
  return _impl_.begin_main_frame_queue_not_critical_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_begin_main_frame_queue_not_critical_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.begin_main_frame_queue_not_critical_estimate_delta_us_ = value;
}

// optional int64 begin_main_frame_start_to_ready_to_commit_estimate_delta_us = 3;
inline bool CompositorTimingHistory::has_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() {
  _impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t CompositorTimingHistory::begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.begin_main_frame_start_to_ready_to_commit_estimate_delta_us)
  return _internal_begin_main_frame_start_to_ready_to_commit_estimate_delta_us();
}
inline void CompositorTimingHistory::set_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(::int64_t value) {
  _internal_set_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.begin_main_frame_start_to_ready_to_commit_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_begin_main_frame_start_to_ready_to_commit_estimate_delta_us() const {
  return _impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_begin_main_frame_start_to_ready_to_commit_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.begin_main_frame_start_to_ready_to_commit_estimate_delta_us_ = value;
}

// optional int64 commit_to_ready_to_activate_estimate_delta_us = 4;
inline bool CompositorTimingHistory::has_commit_to_ready_to_activate_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_commit_to_ready_to_activate_estimate_delta_us() {
  _impl_.commit_to_ready_to_activate_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t CompositorTimingHistory::commit_to_ready_to_activate_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.commit_to_ready_to_activate_estimate_delta_us)
  return _internal_commit_to_ready_to_activate_estimate_delta_us();
}
inline void CompositorTimingHistory::set_commit_to_ready_to_activate_estimate_delta_us(::int64_t value) {
  _internal_set_commit_to_ready_to_activate_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.commit_to_ready_to_activate_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_commit_to_ready_to_activate_estimate_delta_us() const {
  return _impl_.commit_to_ready_to_activate_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_commit_to_ready_to_activate_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.commit_to_ready_to_activate_estimate_delta_us_ = value;
}

// optional int64 prepare_tiles_estimate_delta_us = 5;
inline bool CompositorTimingHistory::has_prepare_tiles_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_prepare_tiles_estimate_delta_us() {
  _impl_.prepare_tiles_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t CompositorTimingHistory::prepare_tiles_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.prepare_tiles_estimate_delta_us)
  return _internal_prepare_tiles_estimate_delta_us();
}
inline void CompositorTimingHistory::set_prepare_tiles_estimate_delta_us(::int64_t value) {
  _internal_set_prepare_tiles_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.prepare_tiles_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_prepare_tiles_estimate_delta_us() const {
  return _impl_.prepare_tiles_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_prepare_tiles_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.prepare_tiles_estimate_delta_us_ = value;
}

// optional int64 activate_estimate_delta_us = 6;
inline bool CompositorTimingHistory::has_activate_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_activate_estimate_delta_us() {
  _impl_.activate_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t CompositorTimingHistory::activate_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.activate_estimate_delta_us)
  return _internal_activate_estimate_delta_us();
}
inline void CompositorTimingHistory::set_activate_estimate_delta_us(::int64_t value) {
  _internal_set_activate_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.activate_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_activate_estimate_delta_us() const {
  return _impl_.activate_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_activate_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.activate_estimate_delta_us_ = value;
}

// optional int64 draw_estimate_delta_us = 7;
inline bool CompositorTimingHistory::has_draw_estimate_delta_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CompositorTimingHistory::clear_draw_estimate_delta_us() {
  _impl_.draw_estimate_delta_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t CompositorTimingHistory::draw_estimate_delta_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CompositorTimingHistory.draw_estimate_delta_us)
  return _internal_draw_estimate_delta_us();
}
inline void CompositorTimingHistory::set_draw_estimate_delta_us(::int64_t value) {
  _internal_set_draw_estimate_delta_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CompositorTimingHistory.draw_estimate_delta_us)
}
inline ::int64_t CompositorTimingHistory::_internal_draw_estimate_delta_us() const {
  return _impl_.draw_estimate_delta_us_;
}
inline void CompositorTimingHistory::_internal_set_draw_estimate_delta_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.draw_estimate_delta_us_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode>() {
  return ::perfetto::protos::ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState>() {
  return ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginImplFrameState_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState>() {
  return ::perfetto::protos::ChromeCompositorStateMachine_MajorState_BeginMainFrameState_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState>() {
  return ::perfetto::protos::ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState>() {
  return ::perfetto::protos::ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority>() {
  return ::perfetto::protos::ChromeCompositorStateMachine_MinorState_TreePriority_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState>() {
  return ::perfetto::protos::ChromeCompositorStateMachine_MinorState_ScrollHandlerState_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::BeginFrameArgs_BeginFrameArgsType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::BeginFrameArgs_BeginFrameArgsType>() {
  return ::perfetto::protos::BeginFrameArgs_BeginFrameArgsType_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::BeginImplFrameArgs_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::BeginImplFrameArgs_State>() {
  return ::perfetto::protos::BeginImplFrameArgs_State_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeCompositorSchedulerAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeCompositorSchedulerAction>() {
  return ::perfetto::protos::ChromeCompositorSchedulerAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto_2epb_2eh
