// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_event.proto

#include "protos/perfetto/trace/track_event/track_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TrackEvent_LegacyEvent::TrackEvent_LegacyEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_scope_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_iid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.duration_us_)*/ ::int64_t{0}

  , /*decltype(_impl_.thread_duration_us_)*/ ::int64_t{0}

  , /*decltype(_impl_.phase_)*/ 0

  , /*decltype(_impl_.use_async_tts_)*/ false

  , /*decltype(_impl_.bind_to_enclosing_)*/ false

  , /*decltype(_impl_.bind_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.flow_direction_)*/ 0

  , /*decltype(_impl_.instant_event_scope_)*/ 0

  , /*decltype(_impl_.thread_instruction_delta_)*/ ::int64_t{0}

  , /*decltype(_impl_.pid_override_)*/ 0

  , /*decltype(_impl_.tid_override_)*/ 0

  , /*decltype(_impl_.id_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrackEvent_LegacyEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEvent_LegacyEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEvent_LegacyEventDefaultTypeInternal() {}
  union {
    TrackEvent_LegacyEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEvent_LegacyEventDefaultTypeInternal _TrackEvent_LegacyEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrackEvent::TrackEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_iids_)*/ {}

  , /*decltype(_impl_.debug_annotations_)*/{}
  , /*decltype(_impl_.extra_counter_values_)*/ {}

  , /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.extra_counter_track_uuids_)*/ {}

  , /*decltype(_impl_.flow_ids_old_)*/ {}

  , /*decltype(_impl_.terminating_flow_ids_old_)*/ {}

  , /*decltype(_impl_.extra_double_counter_track_uuids_)*/ {}

  , /*decltype(_impl_.extra_double_counter_values_)*/ {}

  , /*decltype(_impl_.flow_ids_)*/ {}

  , /*decltype(_impl_.terminating_flow_ids_)*/ {}

  , /*decltype(_impl_.task_execution_)*/nullptr
  , /*decltype(_impl_.legacy_event_)*/nullptr
  , /*decltype(_impl_.log_message_)*/nullptr
  , /*decltype(_impl_.cc_scheduler_state_)*/nullptr
  , /*decltype(_impl_.chrome_user_event_)*/nullptr
  , /*decltype(_impl_.chrome_keyed_service_)*/nullptr
  , /*decltype(_impl_.chrome_legacy_ipc_)*/nullptr
  , /*decltype(_impl_.chrome_histogram_sample_)*/nullptr
  , /*decltype(_impl_.chrome_latency_info_)*/nullptr
  , /*decltype(_impl_.chrome_frame_reporter_)*/nullptr
  , /*decltype(_impl_.chrome_message_pump_)*/nullptr
  , /*decltype(_impl_.chrome_mojo_event_info_)*/nullptr
  , /*decltype(_impl_.chrome_application_state_info_)*/nullptr
  , /*decltype(_impl_.chrome_renderer_scheduler_state_)*/nullptr
  , /*decltype(_impl_.chrome_window_handle_event_info_)*/nullptr
  , /*decltype(_impl_.chrome_content_settings_event_info_)*/nullptr
  , /*decltype(_impl_.chrome_active_processes_)*/nullptr
  , /*decltype(_impl_.track_uuid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.name_field_)*/{}
  , /*decltype(_impl_.counter_value_field_)*/{}
  , /*decltype(_impl_.source_location_field_)*/{}
  , /*decltype(_impl_.timestamp_)*/{}
  , /*decltype(_impl_.thread_time_)*/{}
  , /*decltype(_impl_.thread_instruction_count_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrackEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEventDefaultTypeInternal() {}
  union {
    TrackEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEventDefaultTypeInternal _TrackEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrackEventDefaults::TrackEventDefaults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_counter_track_uuids_)*/ {}

  , /*decltype(_impl_.extra_double_counter_track_uuids_)*/ {}

  , /*decltype(_impl_.track_uuid_)*/ ::uint64_t{0u}
} {}
struct TrackEventDefaultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEventDefaultsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEventDefaultsDefaultTypeInternal() {}
  union {
    TrackEventDefaults _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEventDefaultsDefaultTypeInternal _TrackEventDefaults_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventCategory::EventCategory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct EventCategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventCategoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventCategoryDefaultTypeInternal() {}
  union {
    EventCategory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventCategoryDefaultTypeInternal _EventCategory_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventName::EventName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct EventNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventNameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventNameDefaultTypeInternal() {}
  union {
    EventName _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventNameDefaultTypeInternal _EventName_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.name_iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.duration_us_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.thread_duration_us_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.thread_instruction_delta_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.id_scope_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.use_async_tts_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.bind_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.bind_to_enclosing_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.flow_direction_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.instant_event_scope_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.pid_override_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.tid_override_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_.id_),
    1,
    4,
    2,
    3,
    10,
    ~0u,
    ~0u,
    ~0u,
    0,
    5,
    7,
    6,
    8,
    9,
    11,
    12,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _internal_metadata_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_._extensions_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.category_iids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.categories_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.track_uuid_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.extra_counter_track_uuids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.extra_counter_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.extra_double_counter_track_uuids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.extra_double_counter_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.flow_ids_old_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.flow_ids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.terminating_flow_ids_old_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.terminating_flow_ids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.debug_annotations_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.task_execution_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.log_message_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.cc_scheduler_state_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_user_event_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_keyed_service_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_legacy_ipc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_histogram_sample_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_latency_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_frame_reporter_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_application_state_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_renderer_scheduler_state_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_window_handle_event_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_content_settings_event_info_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_active_processes_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_message_pump_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.chrome_mojo_event_info_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.legacy_event_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.name_field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.counter_value_field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.source_location_field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.thread_time_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_.thread_instruction_count_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    18,
    17,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    12,
    13,
    14,
    15,
    16,
    ~0u,
    ~0u,
    10,
    11,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEventDefaults, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEventDefaults, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEventDefaults, _impl_.track_uuid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEventDefaults, _impl_.extra_counter_track_uuids_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEventDefaults, _impl_.extra_double_counter_track_uuids_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventCategory, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventCategory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventCategory, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventCategory, _impl_.name_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventName, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventName, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventName, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::EventName, _impl_.name_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 25, -1, sizeof(::perfetto::protos::TrackEvent_LegacyEvent)},
        { 41, 97, -1, sizeof(::perfetto::protos::TrackEvent)},
        { 139, 150, -1, sizeof(::perfetto::protos::TrackEventDefaults)},
        { 153, 163, -1, sizeof(::perfetto::protos::EventCategory)},
        { 165, 175, -1, sizeof(::perfetto::protos::EventName)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TrackEvent_LegacyEvent_default_instance_._instance,
    &::perfetto::protos::_TrackEvent_default_instance_._instance,
    &::perfetto::protos::_TrackEventDefaults_default_instance_._instance,
    &::perfetto::protos::_EventCategory_default_instance_._instance,
    &::perfetto::protos::_EventName_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n3protos/perfetto/trace/track_event/trac"
    "k_event.proto\022\017perfetto.protos\0328protos/p"
    "erfetto/trace/track_event/debug_annotati"
    "on.proto\0323protos/perfetto/trace/track_ev"
    "ent/log_message.proto\0326protos/perfetto/t"
    "race/track_event/task_execution.proto\032\?p"
    "rotos/perfetto/trace/track_event/chrome_"
    "active_processes.proto\032Eprotos/perfetto/"
    "trace/track_event/chrome_application_sta"
    "te_info.proto\032Iprotos/perfetto/trace/tra"
    "ck_event/chrome_compositor_scheduler_sta"
    "te.proto\032Jprotos/perfetto/trace/track_ev"
    "ent/chrome_content_settings_event_info.p"
    "roto\032=protos/perfetto/trace/track_event/"
    "chrome_frame_reporter.proto\032\?protos/perf"
    "etto/trace/track_event/chrome_histogram_"
    "sample.proto\032<protos/perfetto/trace/trac"
    "k_event/chrome_keyed_service.proto\032;prot"
    "os/perfetto/trace/track_event/chrome_lat"
    "ency_info.proto\0329protos/perfetto/trace/t"
    "rack_event/chrome_legacy_ipc.proto\032;prot"
    "os/perfetto/trace/track_event/chrome_mes"
    "sage_pump.proto\032>protos/perfetto/trace/t"
    "rack_event/chrome_mojo_event_info.proto\032"
    "Gprotos/perfetto/trace/track_event/chrom"
    "e_renderer_scheduler_state.proto\0329protos"
    "/perfetto/trace/track_event/chrome_user_"
    "event.proto\032Gprotos/perfetto/trace/track"
    "_event/chrome_window_handle_event_info.p"
    "roto\0327protos/perfetto/trace/track_event/"
    "source_location.proto\"\232\027\n\nTrackEvent\022\025\n\r"
    "category_iids\030\003 \003(\004\022\022\n\ncategories\030\026 \003(\t\022"
    "\022\n\010name_iid\030\n \001(\004H\000\022\016\n\004name\030\027 \001(\tH\000\022.\n\004t"
    "ype\030\t \001(\0162 .perfetto.protos.TrackEvent.T"
    "ype\022\022\n\ntrack_uuid\030\013 \001(\004\022\027\n\rcounter_value"
    "\030\036 \001(\003H\001\022\036\n\024double_counter_value\030, \001(\001H\001"
    "\022!\n\031extra_counter_track_uuids\030\037 \003(\004\022\034\n\024e"
    "xtra_counter_values\030\014 \003(\003\022(\n extra_doubl"
    "e_counter_track_uuids\030- \003(\004\022#\n\033extra_dou"
    "ble_counter_values\030. \003(\001\022\030\n\014flow_ids_old"
    "\030$ \003(\004B\002\030\001\022\020\n\010flow_ids\030/ \003(\006\022$\n\030terminat"
    "ing_flow_ids_old\030* \003(\004B\002\030\001\022\034\n\024terminatin"
    "g_flow_ids\0300 \003(\006\022;\n\021debug_annotations\030\004 "
    "\003(\0132 .perfetto.protos.DebugAnnotation\0226\n"
    "\016task_execution\030\005 \001(\0132\036.perfetto.protos."
    "TaskExecution\0220\n\013log_message\030\025 \001(\0132\033.per"
    "fetto.protos.LogMessage\022K\n\022cc_scheduler_"
    "state\030\030 \001(\0132/.perfetto.protos.ChromeComp"
    "ositorSchedulerState\022;\n\021chrome_user_even"
    "t\030\031 \001(\0132 .perfetto.protos.ChromeUserEven"
    "t\022A\n\024chrome_keyed_service\030\032 \001(\0132#.perfet"
    "to.protos.ChromeKeyedService\022;\n\021chrome_l"
    "egacy_ipc\030\033 \001(\0132 .perfetto.protos.Chrome"
    "LegacyIpc\022G\n\027chrome_histogram_sample\030\034 \001"
    "(\0132&.perfetto.protos.ChromeHistogramSamp"
    "le\022\?\n\023chrome_latency_info\030\035 \001(\0132\".perfet"
    "to.protos.ChromeLatencyInfo\022C\n\025chrome_fr"
    "ame_reporter\030  \001(\0132$.perfetto.protos.Chr"
    "omeFrameReporter\022R\n\035chrome_application_s"
    "tate_info\030\' \001(\0132+.perfetto.protos.Chrome"
    "ApplicationStateInfo\022V\n\037chrome_renderer_"
    "scheduler_state\030( \001(\0132-.perfetto.protos."
    "ChromeRendererSchedulerState\022U\n\037chrome_w"
    "indow_handle_event_info\030) \001(\0132,.perfetto"
    ".protos.ChromeWindowHandleEventInfo\022[\n\"c"
    "hrome_content_settings_event_info\030+ \001(\0132"
    "/.perfetto.protos.ChromeContentSettingsE"
    "ventInfo\022G\n\027chrome_active_processes\0301 \001("
    "\0132&.perfetto.protos.ChromeActiveProcesse"
    "s\022:\n\017source_location\030! \001(\0132\037.perfetto.pr"
    "otos.SourceLocationH\002\022\035\n\023source_location"
    "_iid\030\" \001(\004H\002\022\?\n\023chrome_message_pump\030# \001("
    "\0132\".perfetto.protos.ChromeMessagePump\022D\n"
    "\026chrome_mojo_event_info\030& \001(\0132$.perfetto"
    ".protos.ChromeMojoEventInfo\022\034\n\022timestamp"
    "_delta_us\030\001 \001(\003H\003\022\037\n\025timestamp_absolute_"
    "us\030\020 \001(\003H\003\022\036\n\024thread_time_delta_us\030\002 \001(\003"
    "H\004\022!\n\027thread_time_absolute_us\030\021 \001(\003H\004\022(\n"
    "\036thread_instruction_count_delta\030\010 \001(\003H\005\022"
    "+\n!thread_instruction_count_absolute\030\024 \001"
    "(\003H\005\022=\n\014legacy_event\030\006 \001(\0132\'.perfetto.pr"
    "otos.TrackEvent.LegacyEvent\032\252\005\n\013LegacyEv"
    "ent\022\020\n\010name_iid\030\001 \001(\004\022\r\n\005phase\030\002 \001(\005\022\023\n\013"
    "duration_us\030\003 \001(\003\022\032\n\022thread_duration_us\030"
    "\004 \001(\003\022 \n\030thread_instruction_delta\030\017 \001(\003\022"
    "\025\n\013unscoped_id\030\006 \001(\004H\000\022\022\n\010local_id\030\n \001(\004"
    "H\000\022\023\n\tglobal_id\030\013 \001(\004H\000\022\020\n\010id_scope\030\007 \001("
    "\t\022\025\n\ruse_async_tts\030\t \001(\010\022\017\n\007bind_id\030\010 \001("
    "\004\022\031\n\021bind_to_enclosing\030\014 \001(\010\022M\n\016flow_dir"
    "ection\030\r \001(\01625.perfetto.protos.TrackEven"
    "t.LegacyEvent.FlowDirection\022V\n\023instant_e"
    "vent_scope\030\016 \001(\01629.perfetto.protos.Track"
    "Event.LegacyEvent.InstantEventScope\022\024\n\014p"
    "id_override\030\022 \001(\005\022\024\n\014tid_override\030\023 \001(\005\""
    "P\n\rFlowDirection\022\024\n\020FLOW_UNSPECIFIED\020\000\022\013"
    "\n\007FLOW_IN\020\001\022\014\n\010FLOW_OUT\020\002\022\016\n\nFLOW_INOUT\020"
    "\003\"a\n\021InstantEventScope\022\025\n\021SCOPE_UNSPECIF"
    "IED\020\000\022\020\n\014SCOPE_GLOBAL\020\001\022\021\n\rSCOPE_PROCESS"
    "\020\002\022\020\n\014SCOPE_THREAD\020\003B\004\n\002idJ\004\010\005\020\006\"j\n\004Type"
    "\022\024\n\020TYPE_UNSPECIFIED\020\000\022\024\n\020TYPE_SLICE_BEG"
    "IN\020\001\022\022\n\016TYPE_SLICE_END\020\002\022\020\n\014TYPE_INSTANT"
    "\020\003\022\020\n\014TYPE_COUNTER\020\004*\006\010\350\007\020\254M*\006\010\254M\020\221NB\014\n\n"
    "name_fieldB\025\n\023counter_value_fieldB\027\n\025sou"
    "rce_location_fieldB\013\n\ttimestampB\r\n\013threa"
    "d_timeB\032\n\030thread_instruction_count\"u\n\022Tr"
    "ackEventDefaults\022\022\n\ntrack_uuid\030\013 \001(\004\022!\n\031"
    "extra_counter_track_uuids\030\037 \003(\004\022(\n extra"
    "_double_counter_track_uuids\030- \003(\004\"*\n\rEve"
    "ntCategory\022\013\n\003iid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"&\n"
    "\tEventName\022\013\n\003iid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_deps[18] =
    {
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5factive_5fprocesses_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fapplication_5fstate_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcompositor_5fscheduler_5fstate_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fcontent_5fsettings_5fevent_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fhistogram_5fsample_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fkeyed_5fservice_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flegacy_5fipc_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmessage_5fpump_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fmojo_5fevent_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5frenderer_5fscheduler_5fstate_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fuser_5fevent_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2flog_5fmessage_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fsource_5flocation_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftask_5fexecution_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto = {
    false,
    false,
    4397,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto,
    "protos/perfetto/trace/track_event/track_event.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_deps,
    18,
    5,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackEvent_LegacyEvent_FlowDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[0];
}
bool TrackEvent_LegacyEvent_FlowDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_IN;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_OUT;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FLOW_INOUT;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FlowDirection_MIN;
constexpr TrackEvent_LegacyEvent_FlowDirection TrackEvent_LegacyEvent::FlowDirection_MAX;
constexpr int TrackEvent_LegacyEvent::FlowDirection_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackEvent_LegacyEvent_InstantEventScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[1];
}
bool TrackEvent_LegacyEvent_InstantEventScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_UNSPECIFIED;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_GLOBAL;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_PROCESS;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::SCOPE_THREAD;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::InstantEventScope_MIN;
constexpr TrackEvent_LegacyEvent_InstantEventScope TrackEvent_LegacyEvent::InstantEventScope_MAX;
constexpr int TrackEvent_LegacyEvent::InstantEventScope_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrackEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[2];
}
bool TrackEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrackEvent_Type TrackEvent::TYPE_UNSPECIFIED;
constexpr TrackEvent_Type TrackEvent::TYPE_SLICE_BEGIN;
constexpr TrackEvent_Type TrackEvent::TYPE_SLICE_END;
constexpr TrackEvent_Type TrackEvent::TYPE_INSTANT;
constexpr TrackEvent_Type TrackEvent::TYPE_COUNTER;
constexpr TrackEvent_Type TrackEvent::Type_MIN;
constexpr TrackEvent_Type TrackEvent::Type_MAX;
constexpr int TrackEvent::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class TrackEvent_LegacyEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEvent_LegacyEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrackEvent_LegacyEvent, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent_LegacyEvent, _impl_._oneof_case_);
  static void set_has_name_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thread_duration_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thread_instruction_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_id_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_async_tts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bind_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bind_to_enclosing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flow_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_instant_event_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pid_override(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tid_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

TrackEvent_LegacyEvent::TrackEvent_LegacyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrackEvent.LegacyEvent)
}
TrackEvent_LegacyEvent::TrackEvent_LegacyEvent(const TrackEvent_LegacyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackEvent_LegacyEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_scope_) {}

    , decltype(_impl_.name_iid_) {}

    , decltype(_impl_.duration_us_) {}

    , decltype(_impl_.thread_duration_us_) {}

    , decltype(_impl_.phase_) {}

    , decltype(_impl_.use_async_tts_) {}

    , decltype(_impl_.bind_to_enclosing_) {}

    , decltype(_impl_.bind_id_) {}

    , decltype(_impl_.flow_direction_) {}

    , decltype(_impl_.instant_event_scope_) {}

    , decltype(_impl_.thread_instruction_delta_) {}

    , decltype(_impl_.pid_override_) {}

    , decltype(_impl_.tid_override_) {}

    , decltype(_impl_.id_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_scope_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_scope_.Set(from._internal_id_scope(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.name_iid_, &from._impl_.name_iid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tid_override_) -
    reinterpret_cast<char*>(&_impl_.name_iid_)) + sizeof(_impl_.tid_override_));
  clear_has_id();
  switch (from.id_case()) {
    case kUnscopedId: {
      _this->_internal_set_unscoped_id(from._internal_unscoped_id());
      break;
    }
    case kLocalId: {
      _this->_internal_set_local_id(from._internal_local_id());
      break;
    }
    case kGlobalId: {
      _this->_internal_set_global_id(from._internal_global_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEvent.LegacyEvent)
}

inline void TrackEvent_LegacyEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_scope_) {}

    , decltype(_impl_.name_iid_) { ::uint64_t{0u} }

    , decltype(_impl_.duration_us_) { ::int64_t{0} }

    , decltype(_impl_.thread_duration_us_) { ::int64_t{0} }

    , decltype(_impl_.phase_) { 0 }

    , decltype(_impl_.use_async_tts_) { false }

    , decltype(_impl_.bind_to_enclosing_) { false }

    , decltype(_impl_.bind_id_) { ::uint64_t{0u} }

    , decltype(_impl_.flow_direction_) { 0 }

    , decltype(_impl_.instant_event_scope_) { 0 }

    , decltype(_impl_.thread_instruction_delta_) { ::int64_t{0} }

    , decltype(_impl_.pid_override_) { 0 }

    , decltype(_impl_.tid_override_) { 0 }

    , decltype(_impl_.id_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_scope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_scope_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_id();
}

TrackEvent_LegacyEvent::~TrackEvent_LegacyEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEvent.LegacyEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackEvent_LegacyEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_scope_.Destroy();
  if (has_id()) {
    clear_id();
  }
}

void TrackEvent_LegacyEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackEvent_LegacyEvent::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent.LegacyEvent)
  switch (id_case()) {
    case kUnscopedId: {
      // No need to clear
      break;
    }
    case kLocalId: {
      // No need to clear
      break;
    }
    case kGlobalId: {
      // No need to clear
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ID_NOT_SET;
}


void TrackEvent_LegacyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEvent.LegacyEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_scope_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.name_iid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bind_id_) -
        reinterpret_cast<char*>(&_impl_.name_iid_)) + sizeof(_impl_.bind_id_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.flow_direction_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tid_override_) -
        reinterpret_cast<char*>(&_impl_.flow_direction_)) + sizeof(_impl_.tid_override_));
  }
  clear_id();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackEvent_LegacyEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 name_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_name_iid(&has_bits);
          _impl_.name_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_phase(&has_bits);
          _impl_.phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 duration_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_duration_us(&has_bits);
          _impl_.duration_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 thread_duration_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_thread_duration_us(&has_bits);
          _impl_.thread_duration_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 unscoped_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _internal_set_unscoped_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string id_scope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_id_scope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrackEvent.LegacyEvent.id_scope");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bind_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_bind_id(&has_bits);
          _impl_.bind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool use_async_tts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_use_async_tts(&has_bits);
          _impl_.use_async_tts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 local_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _internal_set_local_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 global_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _internal_set_global_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bind_to_enclosing = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_bind_to_enclosing(&has_bits);
          _impl_.bind_to_enclosing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection_IsValid(static_cast<int>(val)))) {
            _internal_set_flow_direction(static_cast<::perfetto::protos::TrackEvent_LegacyEvent_FlowDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope_IsValid(static_cast<int>(val)))) {
            _internal_set_instant_event_scope(static_cast<::perfetto::protos::TrackEvent_LegacyEvent_InstantEventScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 thread_instruction_delta = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_thread_instruction_delta(&has_bits);
          _impl_.thread_instruction_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid_override = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_pid_override(&has_bits);
          _impl_.pid_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 tid_override = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_tid_override(&has_bits);
          _impl_.tid_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrackEvent_LegacyEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrackEvent.LegacyEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 name_iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_name_iid(), target);
  }

  // optional int32 phase = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_phase(), target);
  }

  // optional int64 duration_us = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_duration_us(), target);
  }

  // optional int64 thread_duration_us = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_thread_duration_us(), target);
  }

  // uint64 unscoped_id = 6;
  if (id_case() == kUnscopedId) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_unscoped_id(), target);
  }

  // optional string id_scope = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id_scope();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrackEvent.LegacyEvent.id_scope");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional uint64 bind_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_bind_id(), target);
  }

  // optional bool use_async_tts = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_use_async_tts(), target);
  }

  switch (id_case()) {
    case kLocalId: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          10, this->_internal_local_id(), target);
      break;
    }
    case kGlobalId: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          11, this->_internal_global_id(), target);
      break;
    }
    default: ;
  }
  // optional bool bind_to_enclosing = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_bind_to_enclosing(), target);
  }

  // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_flow_direction(), target);
  }

  // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this->_internal_instant_event_scope(), target);
  }

  // optional int64 thread_instruction_delta = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        15, this->_internal_thread_instruction_delta(), target);
  }

  // optional int32 pid_override = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_pid_override(), target);
  }

  // optional int32 tid_override = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        19, this->_internal_tid_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrackEvent.LegacyEvent)
  return target;
}

::size_t TrackEvent_LegacyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEvent.LegacyEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id_scope = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_id_scope());
    }

    // optional uint64 name_iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_name_iid());
    }

    // optional int64 duration_us = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_duration_us());
    }

    // optional int64 thread_duration_us = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_thread_duration_us());
    }

    // optional int32 phase = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_phase());
    }

    // optional bool use_async_tts = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool bind_to_enclosing = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional uint64 bind_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bind_id());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .perfetto.protos.TrackEvent.LegacyEvent.FlowDirection flow_direction = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_flow_direction());
    }

    // optional .perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope instant_event_scope = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_instant_event_scope());
    }

    // optional int64 thread_instruction_delta = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_thread_instruction_delta());
    }

    // optional int32 pid_override = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_pid_override());
    }

    // optional int32 tid_override = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_tid_override());
    }

  }
  switch (id_case()) {
    // uint64 unscoped_id = 6;
    case kUnscopedId: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_unscoped_id());
      break;
    }
    // uint64 local_id = 10;
    case kLocalId: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_local_id());
      break;
    }
    // uint64 global_id = 11;
    case kGlobalId: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_global_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackEvent_LegacyEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackEvent_LegacyEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackEvent_LegacyEvent::GetClassData() const { return &_class_data_; }


void TrackEvent_LegacyEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackEvent_LegacyEvent*>(&to_msg);
  auto& from = static_cast<const TrackEvent_LegacyEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEvent.LegacyEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id_scope(from._internal_id_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.name_iid_ = from._impl_.name_iid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_us_ = from._impl_.duration_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.thread_duration_us_ = from._impl_.thread_duration_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.phase_ = from._impl_.phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.use_async_tts_ = from._impl_.use_async_tts_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bind_to_enclosing_ = from._impl_.bind_to_enclosing_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bind_id_ = from._impl_.bind_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.flow_direction_ = from._impl_.flow_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.instant_event_scope_ = from._impl_.instant_event_scope_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.thread_instruction_delta_ = from._impl_.thread_instruction_delta_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.pid_override_ = from._impl_.pid_override_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tid_override_ = from._impl_.tid_override_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.id_case()) {
    case kUnscopedId: {
      _this->_internal_set_unscoped_id(from._internal_unscoped_id());
      break;
    }
    case kLocalId: {
      _this->_internal_set_local_id(from._internal_local_id());
      break;
    }
    case kGlobalId: {
      _this->_internal_set_global_id(from._internal_global_id());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackEvent_LegacyEvent::CopyFrom(const TrackEvent_LegacyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEvent.LegacyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEvent_LegacyEvent::IsInitialized() const {
  return true;
}

void TrackEvent_LegacyEvent::InternalSwap(TrackEvent_LegacyEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_scope_, lhs_arena,
                                       &other->_impl_.id_scope_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackEvent_LegacyEvent, _impl_.tid_override_)
      + sizeof(TrackEvent_LegacyEvent::_impl_.tid_override_)
      - PROTOBUF_FIELD_OFFSET(TrackEvent_LegacyEvent, _impl_.name_iid_)>(
          reinterpret_cast<char*>(&_impl_.name_iid_),
          reinterpret_cast<char*>(&other->_impl_.name_iid_));
  swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackEvent_LegacyEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[0]);
}
// ===================================================================

class TrackEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrackEvent, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackEvent, _impl_._oneof_case_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_track_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::perfetto::protos::TaskExecution& task_execution(const TrackEvent* msg);
  static void set_has_task_execution(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::LogMessage& log_message(const TrackEvent* msg);
  static void set_has_log_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::ChromeCompositorSchedulerState& cc_scheduler_state(const TrackEvent* msg);
  static void set_has_cc_scheduler_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ChromeUserEvent& chrome_user_event(const TrackEvent* msg);
  static void set_has_chrome_user_event(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::ChromeKeyedService& chrome_keyed_service(const TrackEvent* msg);
  static void set_has_chrome_keyed_service(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::perfetto::protos::ChromeLegacyIpc& chrome_legacy_ipc(const TrackEvent* msg);
  static void set_has_chrome_legacy_ipc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::perfetto::protos::ChromeHistogramSample& chrome_histogram_sample(const TrackEvent* msg);
  static void set_has_chrome_histogram_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::ChromeLatencyInfo& chrome_latency_info(const TrackEvent* msg);
  static void set_has_chrome_latency_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::perfetto::protos::ChromeFrameReporter& chrome_frame_reporter(const TrackEvent* msg);
  static void set_has_chrome_frame_reporter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::ChromeApplicationStateInfo& chrome_application_state_info(const TrackEvent* msg);
  static void set_has_chrome_application_state_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::perfetto::protos::ChromeRendererSchedulerState& chrome_renderer_scheduler_state(const TrackEvent* msg);
  static void set_has_chrome_renderer_scheduler_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::perfetto::protos::ChromeWindowHandleEventInfo& chrome_window_handle_event_info(const TrackEvent* msg);
  static void set_has_chrome_window_handle_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::perfetto::protos::ChromeContentSettingsEventInfo& chrome_content_settings_event_info(const TrackEvent* msg);
  static void set_has_chrome_content_settings_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::perfetto::protos::ChromeActiveProcesses& chrome_active_processes(const TrackEvent* msg);
  static void set_has_chrome_active_processes(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::perfetto::protos::SourceLocation& source_location(const TrackEvent* msg);
  static const ::perfetto::protos::ChromeMessagePump& chrome_message_pump(const TrackEvent* msg);
  static void set_has_chrome_message_pump(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::perfetto::protos::ChromeMojoEventInfo& chrome_mojo_event_info(const TrackEvent* msg);
  static void set_has_chrome_mojo_event_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::perfetto::protos::TrackEvent_LegacyEvent& legacy_event(const TrackEvent* msg);
  static void set_has_legacy_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::TaskExecution&
TrackEvent::_Internal::task_execution(const TrackEvent* msg) {
  return *msg->_impl_.task_execution_;
}
const ::perfetto::protos::LogMessage&
TrackEvent::_Internal::log_message(const TrackEvent* msg) {
  return *msg->_impl_.log_message_;
}
const ::perfetto::protos::ChromeCompositorSchedulerState&
TrackEvent::_Internal::cc_scheduler_state(const TrackEvent* msg) {
  return *msg->_impl_.cc_scheduler_state_;
}
const ::perfetto::protos::ChromeUserEvent&
TrackEvent::_Internal::chrome_user_event(const TrackEvent* msg) {
  return *msg->_impl_.chrome_user_event_;
}
const ::perfetto::protos::ChromeKeyedService&
TrackEvent::_Internal::chrome_keyed_service(const TrackEvent* msg) {
  return *msg->_impl_.chrome_keyed_service_;
}
const ::perfetto::protos::ChromeLegacyIpc&
TrackEvent::_Internal::chrome_legacy_ipc(const TrackEvent* msg) {
  return *msg->_impl_.chrome_legacy_ipc_;
}
const ::perfetto::protos::ChromeHistogramSample&
TrackEvent::_Internal::chrome_histogram_sample(const TrackEvent* msg) {
  return *msg->_impl_.chrome_histogram_sample_;
}
const ::perfetto::protos::ChromeLatencyInfo&
TrackEvent::_Internal::chrome_latency_info(const TrackEvent* msg) {
  return *msg->_impl_.chrome_latency_info_;
}
const ::perfetto::protos::ChromeFrameReporter&
TrackEvent::_Internal::chrome_frame_reporter(const TrackEvent* msg) {
  return *msg->_impl_.chrome_frame_reporter_;
}
const ::perfetto::protos::ChromeApplicationStateInfo&
TrackEvent::_Internal::chrome_application_state_info(const TrackEvent* msg) {
  return *msg->_impl_.chrome_application_state_info_;
}
const ::perfetto::protos::ChromeRendererSchedulerState&
TrackEvent::_Internal::chrome_renderer_scheduler_state(const TrackEvent* msg) {
  return *msg->_impl_.chrome_renderer_scheduler_state_;
}
const ::perfetto::protos::ChromeWindowHandleEventInfo&
TrackEvent::_Internal::chrome_window_handle_event_info(const TrackEvent* msg) {
  return *msg->_impl_.chrome_window_handle_event_info_;
}
const ::perfetto::protos::ChromeContentSettingsEventInfo&
TrackEvent::_Internal::chrome_content_settings_event_info(const TrackEvent* msg) {
  return *msg->_impl_.chrome_content_settings_event_info_;
}
const ::perfetto::protos::ChromeActiveProcesses&
TrackEvent::_Internal::chrome_active_processes(const TrackEvent* msg) {
  return *msg->_impl_.chrome_active_processes_;
}
const ::perfetto::protos::SourceLocation&
TrackEvent::_Internal::source_location(const TrackEvent* msg) {
  return *msg->_impl_.source_location_field_.source_location_;
}
const ::perfetto::protos::ChromeMessagePump&
TrackEvent::_Internal::chrome_message_pump(const TrackEvent* msg) {
  return *msg->_impl_.chrome_message_pump_;
}
const ::perfetto::protos::ChromeMojoEventInfo&
TrackEvent::_Internal::chrome_mojo_event_info(const TrackEvent* msg) {
  return *msg->_impl_.chrome_mojo_event_info_;
}
const ::perfetto::protos::TrackEvent_LegacyEvent&
TrackEvent::_Internal::legacy_event(const TrackEvent* msg) {
  return *msg->_impl_.legacy_event_;
}
void TrackEvent::clear_debug_annotations() {
  _internal_mutable_debug_annotations()->Clear();
}
void TrackEvent::clear_task_execution() {
  if (_impl_.task_execution_ != nullptr) _impl_.task_execution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrackEvent::clear_log_message() {
  if (_impl_.log_message_ != nullptr) _impl_.log_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TrackEvent::clear_cc_scheduler_state() {
  if (_impl_.cc_scheduler_state_ != nullptr) _impl_.cc_scheduler_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TrackEvent::clear_chrome_user_event() {
  if (_impl_.chrome_user_event_ != nullptr) _impl_.chrome_user_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TrackEvent::clear_chrome_keyed_service() {
  if (_impl_.chrome_keyed_service_ != nullptr) _impl_.chrome_keyed_service_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void TrackEvent::clear_chrome_legacy_ipc() {
  if (_impl_.chrome_legacy_ipc_ != nullptr) _impl_.chrome_legacy_ipc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TrackEvent::clear_chrome_histogram_sample() {
  if (_impl_.chrome_histogram_sample_ != nullptr) _impl_.chrome_histogram_sample_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void TrackEvent::clear_chrome_latency_info() {
  if (_impl_.chrome_latency_info_ != nullptr) _impl_.chrome_latency_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TrackEvent::clear_chrome_frame_reporter() {
  if (_impl_.chrome_frame_reporter_ != nullptr) _impl_.chrome_frame_reporter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void TrackEvent::clear_chrome_application_state_info() {
  if (_impl_.chrome_application_state_info_ != nullptr) _impl_.chrome_application_state_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void TrackEvent::clear_chrome_renderer_scheduler_state() {
  if (_impl_.chrome_renderer_scheduler_state_ != nullptr) _impl_.chrome_renderer_scheduler_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void TrackEvent::clear_chrome_window_handle_event_info() {
  if (_impl_.chrome_window_handle_event_info_ != nullptr) _impl_.chrome_window_handle_event_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void TrackEvent::clear_chrome_content_settings_event_info() {
  if (_impl_.chrome_content_settings_event_info_ != nullptr) _impl_.chrome_content_settings_event_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void TrackEvent::clear_chrome_active_processes() {
  if (_impl_.chrome_active_processes_ != nullptr) _impl_.chrome_active_processes_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void TrackEvent::set_allocated_source_location(::perfetto::protos::SourceLocation* source_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_source_location_field();
  if (source_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_location));
    if (message_arena != submessage_arena) {
      source_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_location, submessage_arena);
    }
    set_has_source_location();
    _impl_.source_location_field_.source_location_ = source_location;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrackEvent.source_location)
}
void TrackEvent::clear_source_location() {
  if (source_location_field_case() == kSourceLocation) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.source_location_field_.source_location_;
    }
    clear_has_source_location_field();
  }
}
void TrackEvent::clear_chrome_message_pump() {
  if (_impl_.chrome_message_pump_ != nullptr) _impl_.chrome_message_pump_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TrackEvent::clear_chrome_mojo_event_info() {
  if (_impl_.chrome_mojo_event_info_ != nullptr) _impl_.chrome_mojo_event_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
TrackEvent::TrackEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrackEvent)
}
TrackEvent::TrackEvent(const TrackEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_iids_) { from._impl_.category_iids_ }

    , decltype(_impl_.debug_annotations_){from._impl_.debug_annotations_}
    , decltype(_impl_.extra_counter_values_) { from._impl_.extra_counter_values_ }

    , decltype(_impl_.categories_){from._impl_.categories_}
    , decltype(_impl_.extra_counter_track_uuids_) { from._impl_.extra_counter_track_uuids_ }

    , decltype(_impl_.flow_ids_old_) { from._impl_.flow_ids_old_ }

    , decltype(_impl_.terminating_flow_ids_old_) { from._impl_.terminating_flow_ids_old_ }

    , decltype(_impl_.extra_double_counter_track_uuids_) { from._impl_.extra_double_counter_track_uuids_ }

    , decltype(_impl_.extra_double_counter_values_) { from._impl_.extra_double_counter_values_ }

    , decltype(_impl_.flow_ids_) { from._impl_.flow_ids_ }

    , decltype(_impl_.terminating_flow_ids_) { from._impl_.terminating_flow_ids_ }

    , decltype(_impl_.task_execution_){nullptr}
    , decltype(_impl_.legacy_event_){nullptr}
    , decltype(_impl_.log_message_){nullptr}
    , decltype(_impl_.cc_scheduler_state_){nullptr}
    , decltype(_impl_.chrome_user_event_){nullptr}
    , decltype(_impl_.chrome_keyed_service_){nullptr}
    , decltype(_impl_.chrome_legacy_ipc_){nullptr}
    , decltype(_impl_.chrome_histogram_sample_){nullptr}
    , decltype(_impl_.chrome_latency_info_){nullptr}
    , decltype(_impl_.chrome_frame_reporter_){nullptr}
    , decltype(_impl_.chrome_message_pump_){nullptr}
    , decltype(_impl_.chrome_mojo_event_info_){nullptr}
    , decltype(_impl_.chrome_application_state_info_){nullptr}
    , decltype(_impl_.chrome_renderer_scheduler_state_){nullptr}
    , decltype(_impl_.chrome_window_handle_event_info_){nullptr}
    , decltype(_impl_.chrome_content_settings_event_info_){nullptr}
    , decltype(_impl_.chrome_active_processes_){nullptr}
    , decltype(_impl_.track_uuid_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.name_field_){}
    , decltype(_impl_.counter_value_field_){}
    , decltype(_impl_.source_location_field_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.thread_time_){}
    , decltype(_impl_.thread_instruction_count_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.task_execution_ = new ::perfetto::protos::TaskExecution(*from._impl_.task_execution_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.legacy_event_ = new ::perfetto::protos::TrackEvent_LegacyEvent(*from._impl_.legacy_event_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.log_message_ = new ::perfetto::protos::LogMessage(*from._impl_.log_message_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.cc_scheduler_state_ = new ::perfetto::protos::ChromeCompositorSchedulerState(*from._impl_.cc_scheduler_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.chrome_user_event_ = new ::perfetto::protos::ChromeUserEvent(*from._impl_.chrome_user_event_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.chrome_keyed_service_ = new ::perfetto::protos::ChromeKeyedService(*from._impl_.chrome_keyed_service_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.chrome_legacy_ipc_ = new ::perfetto::protos::ChromeLegacyIpc(*from._impl_.chrome_legacy_ipc_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.chrome_histogram_sample_ = new ::perfetto::protos::ChromeHistogramSample(*from._impl_.chrome_histogram_sample_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.chrome_latency_info_ = new ::perfetto::protos::ChromeLatencyInfo(*from._impl_.chrome_latency_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.chrome_frame_reporter_ = new ::perfetto::protos::ChromeFrameReporter(*from._impl_.chrome_frame_reporter_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.chrome_message_pump_ = new ::perfetto::protos::ChromeMessagePump(*from._impl_.chrome_message_pump_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.chrome_mojo_event_info_ = new ::perfetto::protos::ChromeMojoEventInfo(*from._impl_.chrome_mojo_event_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
    _this->_impl_.chrome_application_state_info_ = new ::perfetto::protos::ChromeApplicationStateInfo(*from._impl_.chrome_application_state_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00002000u) != 0) {
    _this->_impl_.chrome_renderer_scheduler_state_ = new ::perfetto::protos::ChromeRendererSchedulerState(*from._impl_.chrome_renderer_scheduler_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00004000u) != 0) {
    _this->_impl_.chrome_window_handle_event_info_ = new ::perfetto::protos::ChromeWindowHandleEventInfo(*from._impl_.chrome_window_handle_event_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00008000u) != 0) {
    _this->_impl_.chrome_content_settings_event_info_ = new ::perfetto::protos::ChromeContentSettingsEventInfo(*from._impl_.chrome_content_settings_event_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00010000u) != 0) {
    _this->_impl_.chrome_active_processes_ = new ::perfetto::protos::ChromeActiveProcesses(*from._impl_.chrome_active_processes_);
  }
  ::memcpy(&_impl_.track_uuid_, &from._impl_.track_uuid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.track_uuid_)) + sizeof(_impl_.type_));
  clear_has_name_field();
  switch (from.name_field_case()) {
    case kNameIid: {
      _this->_internal_set_name_iid(from._internal_name_iid());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_counter_value_field();
  switch (from.counter_value_field_case()) {
    case kCounterValue: {
      _this->_internal_set_counter_value(from._internal_counter_value());
      break;
    }
    case kDoubleCounterValue: {
      _this->_internal_set_double_counter_value(from._internal_double_counter_value());
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_source_location_field();
  switch (from.source_location_field_case()) {
    case kSourceLocation: {
      _this->_internal_mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(
          from._internal_source_location());
      break;
    }
    case kSourceLocationIid: {
      _this->_internal_set_source_location_iid(from._internal_source_location_iid());
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_timestamp();
  switch (from.timestamp_case()) {
    case kTimestampDeltaUs: {
      _this->_internal_set_timestamp_delta_us(from._internal_timestamp_delta_us());
      break;
    }
    case kTimestampAbsoluteUs: {
      _this->_internal_set_timestamp_absolute_us(from._internal_timestamp_absolute_us());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  clear_has_thread_time();
  switch (from.thread_time_case()) {
    case kThreadTimeDeltaUs: {
      _this->_internal_set_thread_time_delta_us(from._internal_thread_time_delta_us());
      break;
    }
    case kThreadTimeAbsoluteUs: {
      _this->_internal_set_thread_time_absolute_us(from._internal_thread_time_absolute_us());
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_thread_instruction_count();
  switch (from.thread_instruction_count_case()) {
    case kThreadInstructionCountDelta: {
      _this->_internal_set_thread_instruction_count_delta(from._internal_thread_instruction_count_delta());
      break;
    }
    case kThreadInstructionCountAbsolute: {
      _this->_internal_set_thread_instruction_count_absolute(from._internal_thread_instruction_count_absolute());
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEvent)
}

inline void TrackEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_iids_) { arena }

    , decltype(_impl_.debug_annotations_){arena}
    , decltype(_impl_.extra_counter_values_) { arena }

    , decltype(_impl_.categories_){arena}
    , decltype(_impl_.extra_counter_track_uuids_) { arena }

    , decltype(_impl_.flow_ids_old_) { arena }

    , decltype(_impl_.terminating_flow_ids_old_) { arena }

    , decltype(_impl_.extra_double_counter_track_uuids_) { arena }

    , decltype(_impl_.extra_double_counter_values_) { arena }

    , decltype(_impl_.flow_ids_) { arena }

    , decltype(_impl_.terminating_flow_ids_) { arena }

    , decltype(_impl_.task_execution_){nullptr}
    , decltype(_impl_.legacy_event_){nullptr}
    , decltype(_impl_.log_message_){nullptr}
    , decltype(_impl_.cc_scheduler_state_){nullptr}
    , decltype(_impl_.chrome_user_event_){nullptr}
    , decltype(_impl_.chrome_keyed_service_){nullptr}
    , decltype(_impl_.chrome_legacy_ipc_){nullptr}
    , decltype(_impl_.chrome_histogram_sample_){nullptr}
    , decltype(_impl_.chrome_latency_info_){nullptr}
    , decltype(_impl_.chrome_frame_reporter_){nullptr}
    , decltype(_impl_.chrome_message_pump_){nullptr}
    , decltype(_impl_.chrome_mojo_event_info_){nullptr}
    , decltype(_impl_.chrome_application_state_info_){nullptr}
    , decltype(_impl_.chrome_renderer_scheduler_state_){nullptr}
    , decltype(_impl_.chrome_window_handle_event_info_){nullptr}
    , decltype(_impl_.chrome_content_settings_event_info_){nullptr}
    , decltype(_impl_.chrome_active_processes_){nullptr}
    , decltype(_impl_.track_uuid_) { ::uint64_t{0u} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.name_field_){}
    , decltype(_impl_.counter_value_field_){}
    , decltype(_impl_.source_location_field_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.thread_time_){}
    , decltype(_impl_.thread_instruction_count_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_name_field();
  clear_has_counter_value_field();
  clear_has_source_location_field();
  clear_has_timestamp();
  clear_has_thread_time();
  clear_has_thread_instruction_count();
}

TrackEvent::~TrackEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.category_iids_.~RepeatedField();
  _internal_mutable_debug_annotations()->~RepeatedPtrField();
  _impl_.extra_counter_values_.~RepeatedField();
  _internal_mutable_categories()->~RepeatedPtrField();
  _impl_.extra_counter_track_uuids_.~RepeatedField();
  _impl_.flow_ids_old_.~RepeatedField();
  _impl_.terminating_flow_ids_old_.~RepeatedField();
  _impl_.extra_double_counter_track_uuids_.~RepeatedField();
  _impl_.extra_double_counter_values_.~RepeatedField();
  _impl_.flow_ids_.~RepeatedField();
  _impl_.terminating_flow_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.task_execution_;
  if (this != internal_default_instance()) delete _impl_.legacy_event_;
  if (this != internal_default_instance()) delete _impl_.log_message_;
  if (this != internal_default_instance()) delete _impl_.cc_scheduler_state_;
  if (this != internal_default_instance()) delete _impl_.chrome_user_event_;
  if (this != internal_default_instance()) delete _impl_.chrome_keyed_service_;
  if (this != internal_default_instance()) delete _impl_.chrome_legacy_ipc_;
  if (this != internal_default_instance()) delete _impl_.chrome_histogram_sample_;
  if (this != internal_default_instance()) delete _impl_.chrome_latency_info_;
  if (this != internal_default_instance()) delete _impl_.chrome_frame_reporter_;
  if (this != internal_default_instance()) delete _impl_.chrome_message_pump_;
  if (this != internal_default_instance()) delete _impl_.chrome_mojo_event_info_;
  if (this != internal_default_instance()) delete _impl_.chrome_application_state_info_;
  if (this != internal_default_instance()) delete _impl_.chrome_renderer_scheduler_state_;
  if (this != internal_default_instance()) delete _impl_.chrome_window_handle_event_info_;
  if (this != internal_default_instance()) delete _impl_.chrome_content_settings_event_info_;
  if (this != internal_default_instance()) delete _impl_.chrome_active_processes_;
  if (has_name_field()) {
    clear_name_field();
  }
  if (has_counter_value_field()) {
    clear_counter_value_field();
  }
  if (has_source_location_field()) {
    clear_source_location_field();
  }
  if (has_timestamp()) {
    clear_timestamp();
  }
  if (has_thread_time()) {
    clear_thread_time();
  }
  if (has_thread_instruction_count()) {
    clear_thread_instruction_count();
  }
}

void TrackEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackEvent::clear_name_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (name_field_case()) {
    case kNameIid: {
      // No need to clear
      break;
    }
    case kName: {
      _impl_.name_field_.name_.Destroy();
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NAME_FIELD_NOT_SET;
}

void TrackEvent::clear_counter_value_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (counter_value_field_case()) {
    case kCounterValue: {
      // No need to clear
      break;
    }
    case kDoubleCounterValue: {
      // No need to clear
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = COUNTER_VALUE_FIELD_NOT_SET;
}

void TrackEvent::clear_source_location_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (source_location_field_case()) {
    case kSourceLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.source_location_field_.source_location_;
      }
      break;
    }
    case kSourceLocationIid: {
      // No need to clear
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = SOURCE_LOCATION_FIELD_NOT_SET;
}

void TrackEvent::clear_timestamp() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (timestamp_case()) {
    case kTimestampDeltaUs: {
      // No need to clear
      break;
    }
    case kTimestampAbsoluteUs: {
      // No need to clear
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = TIMESTAMP_NOT_SET;
}

void TrackEvent::clear_thread_time() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (thread_time_case()) {
    case kThreadTimeDeltaUs: {
      // No need to clear
      break;
    }
    case kThreadTimeAbsoluteUs: {
      // No need to clear
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = THREAD_TIME_NOT_SET;
}

void TrackEvent::clear_thread_instruction_count() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.TrackEvent)
  switch (thread_instruction_count_case()) {
    case kThreadInstructionCountDelta: {
      // No need to clear
      break;
    }
    case kThreadInstructionCountAbsolute: {
      // No need to clear
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[5] = THREAD_INSTRUCTION_COUNT_NOT_SET;
}


void TrackEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _internal_mutable_category_iids()->Clear();
  _internal_mutable_debug_annotations()->Clear();
  _internal_mutable_extra_counter_values()->Clear();
  _internal_mutable_categories()->Clear();
  _internal_mutable_extra_counter_track_uuids()->Clear();
  _internal_mutable_flow_ids_old()->Clear();
  _internal_mutable_terminating_flow_ids_old()->Clear();
  _internal_mutable_extra_double_counter_track_uuids()->Clear();
  _internal_mutable_extra_double_counter_values()->Clear();
  _internal_mutable_flow_ids()->Clear();
  _internal_mutable_terminating_flow_ids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.task_execution_ != nullptr);
      _impl_.task_execution_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.legacy_event_ != nullptr);
      _impl_.legacy_event_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.log_message_ != nullptr);
      _impl_.log_message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.cc_scheduler_state_ != nullptr);
      _impl_.cc_scheduler_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.chrome_user_event_ != nullptr);
      _impl_.chrome_user_event_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.chrome_keyed_service_ != nullptr);
      _impl_.chrome_keyed_service_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.chrome_legacy_ipc_ != nullptr);
      _impl_.chrome_legacy_ipc_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.chrome_histogram_sample_ != nullptr);
      _impl_.chrome_histogram_sample_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.chrome_latency_info_ != nullptr);
      _impl_.chrome_latency_info_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.chrome_frame_reporter_ != nullptr);
      _impl_.chrome_frame_reporter_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.chrome_message_pump_ != nullptr);
      _impl_.chrome_message_pump_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.chrome_mojo_event_info_ != nullptr);
      _impl_.chrome_mojo_event_info_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.chrome_application_state_info_ != nullptr);
      _impl_.chrome_application_state_info_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.chrome_renderer_scheduler_state_ != nullptr);
      _impl_.chrome_renderer_scheduler_state_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.chrome_window_handle_event_info_ != nullptr);
      _impl_.chrome_window_handle_event_info_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.chrome_content_settings_event_info_ != nullptr);
      _impl_.chrome_content_settings_event_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    ABSL_DCHECK(_impl_.chrome_active_processes_ != nullptr);
    _impl_.chrome_active_processes_->Clear();
  }
  if (cached_has_bits & 0x00060000u) {
    ::memset(&_impl_.track_uuid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.track_uuid_)) + sizeof(_impl_.type_));
  }
  clear_name_field();
  clear_counter_value_field();
  clear_source_location_field();
  clear_timestamp();
  clear_thread_time();
  clear_thread_instruction_count();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp_delta_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 thread_time_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_thread_time_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 category_iids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_iids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_category_iids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TaskExecution task_execution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_execution(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 thread_instruction_count_delta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _internal_set_thread_instruction_count_delta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.TrackEvent.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::TrackEvent_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::perfetto::protos::TrackEvent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 name_iid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _internal_set_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 track_uuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_track_uuid(&has_bits);
          _impl_.track_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 extra_counter_values = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_extra_counter_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_extra_counter_values(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 timestamp_absolute_us = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _internal_set_timestamp_absolute_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 thread_time_absolute_us = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _internal_set_thread_time_absolute_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 thread_instruction_count_absolute = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _internal_set_thread_instruction_count_absolute(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.LogMessage log_message = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string categories = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.TrackEvent.categories");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrackEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_cc_scheduler_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_user_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_keyed_service(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_legacy_ipc(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_histogram_sample(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_latency_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 counter_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 240)) {
          _internal_set_counter_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 extra_counter_track_uuids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_extra_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_frame_reporter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.SourceLocation source_location = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 source_location_iid = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_source_location_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_message_pump(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 flow_ids_old = 36 [deprecated = true];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_flow_ids_old(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_flow_ids_old(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_mojo_event_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_application_state_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_renderer_scheduler_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_window_handle_event_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_terminating_flow_ids_old(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<336>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_terminating_flow_ids_old(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_content_settings_event_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double_counter_value = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 97)) {
          _internal_set_double_counter_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 extra_double_counter_track_uuids = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<360>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_extra_double_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated double extra_double_counter_values = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 113)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_extra_double_counter_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<369>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_extra_double_counter_values(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated fixed64 flow_ids = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 121)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_flow_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr));
            ptr += sizeof(::uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<377>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_flow_ids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated fixed64 terminating_flow_ids = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 129)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_terminating_flow_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr));
            ptr += sizeof(::uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<385>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_terminating_flow_ids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_active_processes(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((8000u <= tag && tag < 79200u) ||
    (79200u <= tag && tag < 80008u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrackEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrackEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_delta_us = 1;
  if (timestamp_case() == kTimestampDeltaUs) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp_delta_us(), target);
  }

  // int64 thread_time_delta_us = 2;
  if (thread_time_case() == kThreadTimeDeltaUs) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_thread_time_delta_us(), target);
  }

  // repeated uint64 category_iids = 3;
  for (int i = 0, n = this->_internal_category_iids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_category_iids(i), target);
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.TaskExecution task_execution = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::task_execution(this),
        _Internal::task_execution(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::legacy_event(this),
        _Internal::legacy_event(this).GetCachedSize(), target, stream);
  }

  // int64 thread_instruction_count_delta = 8;
  if (thread_instruction_count_case() == kThreadInstructionCountDelta) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_thread_instruction_count_delta(), target);
  }

  // optional .perfetto.protos.TrackEvent.Type type = 9;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_type(), target);
  }

  // uint64 name_iid = 10;
  if (name_field_case() == kNameIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_name_iid(), target);
  }

  // optional uint64 track_uuid = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_track_uuid(), target);
  }

  // repeated int64 extra_counter_values = 12;
  for (int i = 0, n = this->_internal_extra_counter_values_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        12, this->_internal_extra_counter_values(i), target);
  }

  // int64 timestamp_absolute_us = 16;
  if (timestamp_case() == kTimestampAbsoluteUs) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        16, this->_internal_timestamp_absolute_us(), target);
  }

  // int64 thread_time_absolute_us = 17;
  if (thread_time_case() == kThreadTimeAbsoluteUs) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        17, this->_internal_thread_time_absolute_us(), target);
  }

  // int64 thread_instruction_count_absolute = 20;
  if (thread_instruction_count_case() == kThreadInstructionCountAbsolute) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        20, this->_internal_thread_instruction_count_absolute(), target);
  }

  // optional .perfetto.protos.LogMessage log_message = 21;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::log_message(this),
        _Internal::log_message(this).GetCachedSize(), target, stream);
  }

  // repeated string categories = 22;
  for (int i = 0, n = this->_internal_categories_size(); i < n; ++i) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrackEvent.categories");
    target = stream->WriteString(22, s, target);
  }

  // string name = 23;
  if (name_field_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrackEvent.name");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::cc_scheduler_state(this),
        _Internal::cc_scheduler_state(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::chrome_user_event(this),
        _Internal::chrome_user_event(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::chrome_keyed_service(this),
        _Internal::chrome_keyed_service(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::chrome_legacy_ipc(this),
        _Internal::chrome_legacy_ipc(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::chrome_histogram_sample(this),
        _Internal::chrome_histogram_sample(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::chrome_latency_info(this),
        _Internal::chrome_latency_info(this).GetCachedSize(), target, stream);
  }

  // int64 counter_value = 30;
  if (counter_value_field_case() == kCounterValue) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        30, this->_internal_counter_value(), target);
  }

  // repeated uint64 extra_counter_track_uuids = 31;
  for (int i = 0, n = this->_internal_extra_counter_track_uuids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        31, this->_internal_extra_counter_track_uuids(i), target);
  }

  // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::chrome_frame_reporter(this),
        _Internal::chrome_frame_reporter(this).GetCachedSize(), target, stream);
  }

  switch (source_location_field_case()) {
    case kSourceLocation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::source_location(this),
          _Internal::source_location(this).GetCachedSize(), target, stream);
      break;
    }
    case kSourceLocationIid: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          34, this->_internal_source_location_iid(), target);
      break;
    }
    default: ;
  }
  // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::chrome_message_pump(this),
        _Internal::chrome_message_pump(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 flow_ids_old = 36 [deprecated = true];
  for (int i = 0, n = this->_internal_flow_ids_old_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        36, this->_internal_flow_ids_old(i), target);
  }

  // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::chrome_mojo_event_info(this),
        _Internal::chrome_mojo_event_info(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::chrome_application_state_info(this),
        _Internal::chrome_application_state_info(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::chrome_renderer_scheduler_state(this),
        _Internal::chrome_renderer_scheduler_state(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::chrome_window_handle_event_info(this),
        _Internal::chrome_window_handle_event_info(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];
  for (int i = 0, n = this->_internal_terminating_flow_ids_old_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        42, this->_internal_terminating_flow_ids_old(i), target);
  }

  // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::chrome_content_settings_event_info(this),
        _Internal::chrome_content_settings_event_info(this).GetCachedSize(), target, stream);
  }

  // double double_counter_value = 44;
  if (counter_value_field_case() == kDoubleCounterValue) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        44, this->_internal_double_counter_value(), target);
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  for (int i = 0, n = this->_internal_extra_double_counter_track_uuids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        45, this->_internal_extra_double_counter_track_uuids(i), target);
  }

  // repeated double extra_double_counter_values = 46;
  for (int i = 0, n = this->_internal_extra_double_counter_values_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        46, this->_internal_extra_double_counter_values(i), target);
  }

  // repeated fixed64 flow_ids = 47;
  for (int i = 0, n = this->_internal_flow_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        47, this->_internal_flow_ids(i), target);
  }

  // repeated fixed64 terminating_flow_ids = 48;
  for (int i = 0, n = this->_internal_terminating_flow_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        48, this->_internal_terminating_flow_ids(i), target);
  }

  // optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::chrome_active_processes(this),
        _Internal::chrome_active_processes(this).GetCachedSize(), target, stream);
  }

  // Extension range [1000, 10001)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 1000, 10001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrackEvent)
  return target;
}

::size_t TrackEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEvent)
  ::size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 category_iids = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_category_iids())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_category_iids_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated .perfetto.protos.DebugAnnotation debug_annotations = 4;
  total_size += 1UL * this->_internal_debug_annotations_size();
  for (const auto& msg : this->_internal_debug_annotations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 extra_counter_values = 12;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_extra_counter_values())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_extra_counter_values_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated string categories = 22;
  total_size += 2 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_categories().size());
  for (int i = 0, n = _internal_categories().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_categories().Get(i));
  }

  // repeated uint64 extra_counter_track_uuids = 31;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_extra_counter_track_uuids())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_extra_counter_track_uuids_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 flow_ids_old = 36 [deprecated = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_flow_ids_old())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_flow_ids_old_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 terminating_flow_ids_old = 42 [deprecated = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_terminating_flow_ids_old())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_terminating_flow_ids_old_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_extra_double_counter_track_uuids())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_extra_double_counter_track_uuids_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated double extra_double_counter_values = 46;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_extra_double_counter_values_size())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_extra_double_counter_values_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated fixed64 flow_ids = 47;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_flow_ids_size())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_flow_ids_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated fixed64 terminating_flow_ids = 48;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_terminating_flow_ids_size())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_terminating_flow_ids_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.TaskExecution task_execution = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_execution_);
    }

    // optional .perfetto.protos.TrackEvent.LegacyEvent legacy_event = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legacy_event_);
    }

    // optional .perfetto.protos.LogMessage log_message = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.log_message_);
    }

    // optional .perfetto.protos.ChromeCompositorSchedulerState cc_scheduler_state = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cc_scheduler_state_);
    }

    // optional .perfetto.protos.ChromeUserEvent chrome_user_event = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_user_event_);
    }

    // optional .perfetto.protos.ChromeKeyedService chrome_keyed_service = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_keyed_service_);
    }

    // optional .perfetto.protos.ChromeLegacyIpc chrome_legacy_ipc = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_legacy_ipc_);
    }

    // optional .perfetto.protos.ChromeHistogramSample chrome_histogram_sample = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_histogram_sample_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .perfetto.protos.ChromeLatencyInfo chrome_latency_info = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_latency_info_);
    }

    // optional .perfetto.protos.ChromeFrameReporter chrome_frame_reporter = 32;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_frame_reporter_);
    }

    // optional .perfetto.protos.ChromeMessagePump chrome_message_pump = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_message_pump_);
    }

    // optional .perfetto.protos.ChromeMojoEventInfo chrome_mojo_event_info = 38;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_mojo_event_info_);
    }

    // optional .perfetto.protos.ChromeApplicationStateInfo chrome_application_state_info = 39;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_application_state_info_);
    }

    // optional .perfetto.protos.ChromeRendererSchedulerState chrome_renderer_scheduler_state = 40;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_renderer_scheduler_state_);
    }

    // optional .perfetto.protos.ChromeWindowHandleEventInfo chrome_window_handle_event_info = 41;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_window_handle_event_info_);
    }

    // optional .perfetto.protos.ChromeContentSettingsEventInfo chrome_content_settings_event_info = 43;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_content_settings_event_info_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .perfetto.protos.ChromeActiveProcesses chrome_active_processes = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_active_processes_);
    }

    // optional uint64 track_uuid = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_track_uuid());
    }

    // optional .perfetto.protos.TrackEvent.Type type = 9;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (name_field_case()) {
    // uint64 name_iid = 10;
    case kNameIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_name_iid());
      break;
    }
    // string name = 23;
    case kName: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (counter_value_field_case()) {
    // int64 counter_value = 30;
    case kCounterValue: {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_counter_value());
      break;
    }
    // double double_counter_value = 44;
    case kDoubleCounterValue: {
      total_size += 10;
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  switch (source_location_field_case()) {
    // .perfetto.protos.SourceLocation source_location = 33;
    case kSourceLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_location_field_.source_location_);
      break;
    }
    // uint64 source_location_iid = 34;
    case kSourceLocationIid: {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_source_location_iid());
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  switch (timestamp_case()) {
    // int64 timestamp_delta_us = 1;
    case kTimestampDeltaUs: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp_delta_us());
      break;
    }
    // int64 timestamp_absolute_us = 16;
    case kTimestampAbsoluteUs: {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_timestamp_absolute_us());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  switch (thread_time_case()) {
    // int64 thread_time_delta_us = 2;
    case kThreadTimeDeltaUs: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_thread_time_delta_us());
      break;
    }
    // int64 thread_time_absolute_us = 17;
    case kThreadTimeAbsoluteUs: {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_thread_time_absolute_us());
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  switch (thread_instruction_count_case()) {
    // int64 thread_instruction_count_delta = 8;
    case kThreadInstructionCountDelta: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_thread_instruction_count_delta());
      break;
    }
    // int64 thread_instruction_count_absolute = 20;
    case kThreadInstructionCountAbsolute: {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this->_internal_thread_instruction_count_absolute());
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackEvent::GetClassData() const { return &_class_data_; }


void TrackEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackEvent*>(&to_msg);
  auto& from = static_cast<const TrackEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.category_iids_.MergeFrom(from._impl_.category_iids_);
  _this->_internal_mutable_debug_annotations()->MergeFrom(from._internal_debug_annotations());
  _this->_impl_.extra_counter_values_.MergeFrom(from._impl_.extra_counter_values_);
  _this->_internal_mutable_categories()->MergeFrom(from._internal_categories());
  _this->_impl_.extra_counter_track_uuids_.MergeFrom(from._impl_.extra_counter_track_uuids_);
  _this->_impl_.flow_ids_old_.MergeFrom(from._impl_.flow_ids_old_);
  _this->_impl_.terminating_flow_ids_old_.MergeFrom(from._impl_.terminating_flow_ids_old_);
  _this->_impl_.extra_double_counter_track_uuids_.MergeFrom(from._impl_.extra_double_counter_track_uuids_);
  _this->_impl_.extra_double_counter_values_.MergeFrom(from._impl_.extra_double_counter_values_);
  _this->_impl_.flow_ids_.MergeFrom(from._impl_.flow_ids_);
  _this->_impl_.terminating_flow_ids_.MergeFrom(from._impl_.terminating_flow_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_task_execution()->::perfetto::protos::TaskExecution::MergeFrom(
          from._internal_task_execution());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_legacy_event()->::perfetto::protos::TrackEvent_LegacyEvent::MergeFrom(
          from._internal_legacy_event());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_log_message()->::perfetto::protos::LogMessage::MergeFrom(
          from._internal_log_message());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_cc_scheduler_state()->::perfetto::protos::ChromeCompositorSchedulerState::MergeFrom(
          from._internal_cc_scheduler_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_chrome_user_event()->::perfetto::protos::ChromeUserEvent::MergeFrom(
          from._internal_chrome_user_event());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_chrome_keyed_service()->::perfetto::protos::ChromeKeyedService::MergeFrom(
          from._internal_chrome_keyed_service());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_chrome_legacy_ipc()->::perfetto::protos::ChromeLegacyIpc::MergeFrom(
          from._internal_chrome_legacy_ipc());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_chrome_histogram_sample()->::perfetto::protos::ChromeHistogramSample::MergeFrom(
          from._internal_chrome_histogram_sample());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_chrome_latency_info()->::perfetto::protos::ChromeLatencyInfo::MergeFrom(
          from._internal_chrome_latency_info());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_chrome_frame_reporter()->::perfetto::protos::ChromeFrameReporter::MergeFrom(
          from._internal_chrome_frame_reporter());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_chrome_message_pump()->::perfetto::protos::ChromeMessagePump::MergeFrom(
          from._internal_chrome_message_pump());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_chrome_mojo_event_info()->::perfetto::protos::ChromeMojoEventInfo::MergeFrom(
          from._internal_chrome_mojo_event_info());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_chrome_application_state_info()->::perfetto::protos::ChromeApplicationStateInfo::MergeFrom(
          from._internal_chrome_application_state_info());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_chrome_renderer_scheduler_state()->::perfetto::protos::ChromeRendererSchedulerState::MergeFrom(
          from._internal_chrome_renderer_scheduler_state());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_chrome_window_handle_event_info()->::perfetto::protos::ChromeWindowHandleEventInfo::MergeFrom(
          from._internal_chrome_window_handle_event_info());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_chrome_content_settings_event_info()->::perfetto::protos::ChromeContentSettingsEventInfo::MergeFrom(
          from._internal_chrome_content_settings_event_info());
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_chrome_active_processes()->::perfetto::protos::ChromeActiveProcesses::MergeFrom(
          from._internal_chrome_active_processes());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.track_uuid_ = from._impl_.track_uuid_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.name_field_case()) {
    case kNameIid: {
      _this->_internal_set_name_iid(from._internal_name_iid());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.counter_value_field_case()) {
    case kCounterValue: {
      _this->_internal_set_counter_value(from._internal_counter_value());
      break;
    }
    case kDoubleCounterValue: {
      _this->_internal_set_double_counter_value(from._internal_double_counter_value());
      break;
    }
    case COUNTER_VALUE_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.source_location_field_case()) {
    case kSourceLocation: {
      _this->_internal_mutable_source_location()->::perfetto::protos::SourceLocation::MergeFrom(
          from._internal_source_location());
      break;
    }
    case kSourceLocationIid: {
      _this->_internal_set_source_location_iid(from._internal_source_location_iid());
      break;
    }
    case SOURCE_LOCATION_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.timestamp_case()) {
    case kTimestampDeltaUs: {
      _this->_internal_set_timestamp_delta_us(from._internal_timestamp_delta_us());
      break;
    }
    case kTimestampAbsoluteUs: {
      _this->_internal_set_timestamp_absolute_us(from._internal_timestamp_absolute_us());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  switch (from.thread_time_case()) {
    case kThreadTimeDeltaUs: {
      _this->_internal_set_thread_time_delta_us(from._internal_thread_time_delta_us());
      break;
    }
    case kThreadTimeAbsoluteUs: {
      _this->_internal_set_thread_time_absolute_us(from._internal_thread_time_absolute_us());
      break;
    }
    case THREAD_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.thread_instruction_count_case()) {
    case kThreadInstructionCountDelta: {
      _this->_internal_set_thread_instruction_count_delta(from._internal_thread_instruction_count_delta());
      break;
    }
    case kThreadInstructionCountAbsolute: {
      _this->_internal_set_thread_instruction_count_absolute(from._internal_thread_instruction_count_absolute());
      break;
    }
    case THREAD_INSTRUCTION_COUNT_NOT_SET: {
      break;
    }
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackEvent::CopyFrom(const TrackEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEvent::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized(internal_default_instance())) {
    return false;
  }

  return true;
}

void TrackEvent::InternalSwap(TrackEvent* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.category_iids_.InternalSwap(&other->_impl_.category_iids_);
  _internal_mutable_debug_annotations()->InternalSwap(other->_internal_mutable_debug_annotations());
  _impl_.extra_counter_values_.InternalSwap(&other->_impl_.extra_counter_values_);
  _internal_mutable_categories()->InternalSwap(
      other->_internal_mutable_categories());
  _impl_.extra_counter_track_uuids_.InternalSwap(&other->_impl_.extra_counter_track_uuids_);
  _impl_.flow_ids_old_.InternalSwap(&other->_impl_.flow_ids_old_);
  _impl_.terminating_flow_ids_old_.InternalSwap(&other->_impl_.terminating_flow_ids_old_);
  _impl_.extra_double_counter_track_uuids_.InternalSwap(&other->_impl_.extra_double_counter_track_uuids_);
  _impl_.extra_double_counter_values_.InternalSwap(&other->_impl_.extra_double_counter_values_);
  _impl_.flow_ids_.InternalSwap(&other->_impl_.flow_ids_);
  _impl_.terminating_flow_ids_.InternalSwap(&other->_impl_.terminating_flow_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackEvent, _impl_.type_)
      + sizeof(TrackEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TrackEvent, _impl_.task_execution_)>(
          reinterpret_cast<char*>(&_impl_.task_execution_),
          reinterpret_cast<char*>(&other->_impl_.task_execution_));
  swap(_impl_.name_field_, other->_impl_.name_field_);
  swap(_impl_.counter_value_field_, other->_impl_.counter_value_field_);
  swap(_impl_.source_location_field_, other->_impl_.source_location_field_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.thread_time_, other->_impl_.thread_time_);
  swap(_impl_.thread_instruction_count_, other->_impl_.thread_instruction_count_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
  swap(_impl_._oneof_case_[5], other->_impl_._oneof_case_[5]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[1]);
}
// ===================================================================

class TrackEventDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackEventDefaults>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrackEventDefaults, _impl_._has_bits_);
  static void set_has_track_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrackEventDefaults::TrackEventDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrackEventDefaults)
}
TrackEventDefaults::TrackEventDefaults(const TrackEventDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackEventDefaults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_counter_track_uuids_) { from._impl_.extra_counter_track_uuids_ }

    , decltype(_impl_.extra_double_counter_track_uuids_) { from._impl_.extra_double_counter_track_uuids_ }

    , decltype(_impl_.track_uuid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.track_uuid_ = from._impl_.track_uuid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackEventDefaults)
}

inline void TrackEventDefaults::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_counter_track_uuids_) { arena }

    , decltype(_impl_.extra_double_counter_track_uuids_) { arena }

    , decltype(_impl_.track_uuid_) { ::uint64_t{0u} }

  };
}

TrackEventDefaults::~TrackEventDefaults() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackEventDefaults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackEventDefaults::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_counter_track_uuids_.~RepeatedField();
  _impl_.extra_double_counter_track_uuids_.~RepeatedField();
}

void TrackEventDefaults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackEventDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackEventDefaults)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_extra_counter_track_uuids()->Clear();
  _internal_mutable_extra_double_counter_track_uuids()->Clear();
  _impl_.track_uuid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackEventDefaults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 track_uuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_track_uuid(&has_bits);
          _impl_.track_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 extra_counter_track_uuids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_extra_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_extra_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 extra_double_counter_track_uuids = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_extra_double_counter_track_uuids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<360>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_extra_double_counter_track_uuids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrackEventDefaults::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrackEventDefaults)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 track_uuid = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_track_uuid(), target);
  }

  // repeated uint64 extra_counter_track_uuids = 31;
  for (int i = 0, n = this->_internal_extra_counter_track_uuids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        31, this->_internal_extra_counter_track_uuids(i), target);
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  for (int i = 0, n = this->_internal_extra_double_counter_track_uuids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        45, this->_internal_extra_double_counter_track_uuids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrackEventDefaults)
  return target;
}

::size_t TrackEventDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackEventDefaults)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 extra_counter_track_uuids = 31;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_extra_counter_track_uuids())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_extra_counter_track_uuids_size());
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 extra_double_counter_track_uuids = 45;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_extra_double_counter_track_uuids())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_extra_double_counter_track_uuids_size());
    ;
    total_size += tag_size + data_size;
  }

  // optional uint64 track_uuid = 11;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_track_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackEventDefaults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackEventDefaults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackEventDefaults::GetClassData() const { return &_class_data_; }


void TrackEventDefaults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackEventDefaults*>(&to_msg);
  auto& from = static_cast<const TrackEventDefaults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackEventDefaults)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_counter_track_uuids_.MergeFrom(from._impl_.extra_counter_track_uuids_);
  _this->_impl_.extra_double_counter_track_uuids_.MergeFrom(from._impl_.extra_double_counter_track_uuids_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_track_uuid(from._internal_track_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackEventDefaults::CopyFrom(const TrackEventDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackEventDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackEventDefaults::IsInitialized() const {
  return true;
}

void TrackEventDefaults::InternalSwap(TrackEventDefaults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extra_counter_track_uuids_.InternalSwap(&other->_impl_.extra_counter_track_uuids_);
  _impl_.extra_double_counter_track_uuids_.InternalSwap(&other->_impl_.extra_double_counter_track_uuids_);

  swap(_impl_.track_uuid_, other->_impl_.track_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackEventDefaults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[2]);
}
// ===================================================================

class EventCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<EventCategory>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventCategory, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EventCategory::EventCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.EventCategory)
}
EventCategory::EventCategory(const EventCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventCategory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.EventCategory)
}

inline void EventCategory::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventCategory::~EventCategory() {
  // @@protoc_insertion_point(destructor:perfetto.protos.EventCategory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventCategory::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void EventCategory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.EventCategory)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventCategory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.EventCategory.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventCategory::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.EventCategory)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.EventCategory.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.EventCategory)
  return target;
}

::size_t EventCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.EventCategory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventCategory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventCategory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventCategory::GetClassData() const { return &_class_data_; }


void EventCategory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventCategory*>(&to_msg);
  auto& from = static_cast<const EventCategory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.EventCategory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventCategory::CopyFrom(const EventCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.EventCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCategory::IsInitialized() const {
  return true;
}

void EventCategory::InternalSwap(EventCategory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventCategory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[3]);
}
// ===================================================================

class EventName::_Internal {
 public:
  using HasBits = decltype(std::declval<EventName>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventName, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EventName::EventName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.EventName)
}
EventName::EventName(const EventName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.EventName)
}

inline void EventName::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventName::~EventName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.EventName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventName::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void EventName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.EventName)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.EventName.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventName::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.EventName)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.EventName.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.EventName)
  return target;
}

::size_t EventName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.EventName)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventName::GetClassData() const { return &_class_data_; }


void EventName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventName*>(&to_msg);
  auto& from = static_cast<const EventName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.EventName)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventName::CopyFrom(const EventName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.EventName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventName::IsInitialized() const {
  return true;
}

void EventName::InternalSwap(EventName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fevent_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEvent_LegacyEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrackEvent_LegacyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrackEvent_LegacyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrackEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrackEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackEventDefaults*
Arena::CreateMaybeMessage< ::perfetto::protos::TrackEventDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrackEventDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::EventCategory*
Arena::CreateMaybeMessage< ::perfetto::protos::EventCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::EventCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::EventName*
Arena::CreateMaybeMessage< ::perfetto::protos::EventName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::EventName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
