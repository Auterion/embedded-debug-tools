// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/debug_annotation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
namespace perfetto {
namespace protos {
class DebugAnnotation;
struct DebugAnnotationDefaultTypeInternal;
extern DebugAnnotationDefaultTypeInternal _DebugAnnotation_default_instance_;
class DebugAnnotationName;
struct DebugAnnotationNameDefaultTypeInternal;
extern DebugAnnotationNameDefaultTypeInternal _DebugAnnotationName_default_instance_;
class DebugAnnotationValueTypeName;
struct DebugAnnotationValueTypeNameDefaultTypeInternal;
extern DebugAnnotationValueTypeNameDefaultTypeInternal _DebugAnnotationValueTypeName_default_instance_;
class DebugAnnotation_NestedValue;
struct DebugAnnotation_NestedValueDefaultTypeInternal;
extern DebugAnnotation_NestedValueDefaultTypeInternal _DebugAnnotation_NestedValue_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::DebugAnnotation* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotation>(Arena*);
template <>
::perfetto::protos::DebugAnnotationName* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotationName>(Arena*);
template <>
::perfetto::protos::DebugAnnotationValueTypeName* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotationValueTypeName>(Arena*);
template <>
::perfetto::protos::DebugAnnotation_NestedValue* Arena::CreateMaybeMessage<::perfetto::protos::DebugAnnotation_NestedValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum DebugAnnotation_NestedValue_NestedType : int {
  DebugAnnotation_NestedValue_NestedType_UNSPECIFIED = 0,
  DebugAnnotation_NestedValue_NestedType_DICT = 1,
  DebugAnnotation_NestedValue_NestedType_ARRAY = 2,
};

bool DebugAnnotation_NestedValue_NestedType_IsValid(int value);
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue_NestedType_NestedType_MIN = static_cast<DebugAnnotation_NestedValue_NestedType>(0);
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue_NestedType_NestedType_MAX = static_cast<DebugAnnotation_NestedValue_NestedType>(2);
constexpr int DebugAnnotation_NestedValue_NestedType_NestedType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DebugAnnotation_NestedValue_NestedType_descriptor();
template <typename T>
const std::string& DebugAnnotation_NestedValue_NestedType_Name(T value) {
  static_assert(std::is_same<T, DebugAnnotation_NestedValue_NestedType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NestedType_Name().");
  return DebugAnnotation_NestedValue_NestedType_Name(static_cast<DebugAnnotation_NestedValue_NestedType>(value));
}
template <>
inline const std::string& DebugAnnotation_NestedValue_NestedType_Name(DebugAnnotation_NestedValue_NestedType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DebugAnnotation_NestedValue_NestedType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool DebugAnnotation_NestedValue_NestedType_Parse(absl::string_view name, DebugAnnotation_NestedValue_NestedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugAnnotation_NestedValue_NestedType>(
      DebugAnnotation_NestedValue_NestedType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class DebugAnnotation_NestedValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotation.NestedValue) */ {
 public:
  inline DebugAnnotation_NestedValue() : DebugAnnotation_NestedValue(nullptr) {}
  ~DebugAnnotation_NestedValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DebugAnnotation_NestedValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugAnnotation_NestedValue(const DebugAnnotation_NestedValue& from);
  DebugAnnotation_NestedValue(DebugAnnotation_NestedValue&& from) noexcept
    : DebugAnnotation_NestedValue() {
    *this = ::std::move(from);
  }

  inline DebugAnnotation_NestedValue& operator=(const DebugAnnotation_NestedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotation_NestedValue& operator=(DebugAnnotation_NestedValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugAnnotation_NestedValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugAnnotation_NestedValue* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotation_NestedValue*>(
               &_DebugAnnotation_NestedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DebugAnnotation_NestedValue& a, DebugAnnotation_NestedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotation_NestedValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugAnnotation_NestedValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugAnnotation_NestedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugAnnotation_NestedValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugAnnotation_NestedValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugAnnotation_NestedValue& from) {
    DebugAnnotation_NestedValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugAnnotation_NestedValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DebugAnnotation.NestedValue";
  }
  protected:
  explicit DebugAnnotation_NestedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using NestedType = DebugAnnotation_NestedValue_NestedType;
  static constexpr NestedType UNSPECIFIED = DebugAnnotation_NestedValue_NestedType_UNSPECIFIED;
  static constexpr NestedType DICT = DebugAnnotation_NestedValue_NestedType_DICT;
  static constexpr NestedType ARRAY = DebugAnnotation_NestedValue_NestedType_ARRAY;
  static inline bool NestedType_IsValid(int value) {
    return DebugAnnotation_NestedValue_NestedType_IsValid(value);
  }
  static constexpr NestedType NestedType_MIN = DebugAnnotation_NestedValue_NestedType_NestedType_MIN;
  static constexpr NestedType NestedType_MAX = DebugAnnotation_NestedValue_NestedType_NestedType_MAX;
  static constexpr int NestedType_ARRAYSIZE = DebugAnnotation_NestedValue_NestedType_NestedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NestedType_descriptor() {
    return DebugAnnotation_NestedValue_NestedType_descriptor();
  }
  template <typename T>
  static inline const std::string& NestedType_Name(T value) {
    return DebugAnnotation_NestedValue_NestedType_Name(value);
  }
  static inline bool NestedType_Parse(absl::string_view name, NestedType* value) {
    return DebugAnnotation_NestedValue_NestedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDictKeysFieldNumber = 2,
    kDictValuesFieldNumber = 3,
    kArrayValuesFieldNumber = 4,
    kStringValueFieldNumber = 8,
    kNestedTypeFieldNumber = 1,
    kBoolValueFieldNumber = 7,
    kIntValueFieldNumber = 5,
    kDoubleValueFieldNumber = 6,
  };
  // repeated string dict_keys = 2;
  int dict_keys_size() const;
  private:
  int _internal_dict_keys_size() const;

  public:
  void clear_dict_keys() ;
  const std::string& dict_keys(int index) const;
  std::string* mutable_dict_keys(int index);
  void set_dict_keys(int index, const std::string& value);
  void set_dict_keys(int index, std::string&& value);
  void set_dict_keys(int index, const char* value);
  void set_dict_keys(int index, const char* value, std::size_t size);
  void set_dict_keys(int index, absl::string_view value);
  std::string* add_dict_keys();
  void add_dict_keys(const std::string& value);
  void add_dict_keys(std::string&& value);
  void add_dict_keys(const char* value);
  void add_dict_keys(const char* value, std::size_t size);
  void add_dict_keys(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dict_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dict_keys();

  private:
  const std::string& _internal_dict_keys(int index) const;
  std::string* _internal_add_dict_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_dict_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_dict_keys();

  public:
  // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
  int dict_values_size() const;
  private:
  int _internal_dict_values_size() const;

  public:
  void clear_dict_values() ;
  ::perfetto::protos::DebugAnnotation_NestedValue* mutable_dict_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
      mutable_dict_values();
  private:
  const ::perfetto::protos::DebugAnnotation_NestedValue& _internal_dict_values(int index) const;
  ::perfetto::protos::DebugAnnotation_NestedValue* _internal_add_dict_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>& _internal_dict_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>* _internal_mutable_dict_values();
  public:
  const ::perfetto::protos::DebugAnnotation_NestedValue& dict_values(int index) const;
  ::perfetto::protos::DebugAnnotation_NestedValue* add_dict_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
      dict_values() const;
  // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
  int array_values_size() const;
  private:
  int _internal_array_values_size() const;

  public:
  void clear_array_values() ;
  ::perfetto::protos::DebugAnnotation_NestedValue* mutable_array_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
      mutable_array_values();
  private:
  const ::perfetto::protos::DebugAnnotation_NestedValue& _internal_array_values(int index) const;
  ::perfetto::protos::DebugAnnotation_NestedValue* _internal_add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>& _internal_array_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>* _internal_mutable_array_values();
  public:
  const ::perfetto::protos::DebugAnnotation_NestedValue& array_values(int index) const;
  ::perfetto::protos::DebugAnnotation_NestedValue* add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
      array_values() const;
  // optional string string_value = 8;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* ptr);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
  bool has_nested_type() const;
  void clear_nested_type() ;
  ::perfetto::protos::DebugAnnotation_NestedValue_NestedType nested_type() const;
  void set_nested_type(::perfetto::protos::DebugAnnotation_NestedValue_NestedType value);

  private:
  ::perfetto::protos::DebugAnnotation_NestedValue_NestedType _internal_nested_type() const;
  void _internal_set_nested_type(::perfetto::protos::DebugAnnotation_NestedValue_NestedType value);

  public:
  // optional bool bool_value = 7;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // optional int64 int_value = 5;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // optional double double_value = 6;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotation.NestedValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dict_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue > dict_values_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue > array_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    int nested_type_;
    bool bool_value_;
    ::int64_t int_value_;
    double double_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};// -------------------------------------------------------------------

class DebugAnnotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotation) */ {
 public:
  inline DebugAnnotation() : DebugAnnotation(nullptr) {}
  ~DebugAnnotation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DebugAnnotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugAnnotation(const DebugAnnotation& from);
  DebugAnnotation(DebugAnnotation&& from) noexcept
    : DebugAnnotation() {
    *this = ::std::move(from);
  }

  inline DebugAnnotation& operator=(const DebugAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotation& operator=(DebugAnnotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugAnnotation& default_instance() {
    return *internal_default_instance();
  }
  enum NameFieldCase {
    kNameIid = 1,
    kName = 10,
    NAME_FIELD_NOT_SET = 0,
  };

  enum ValueCase {
    kBoolValue = 2,
    kUintValue = 3,
    kIntValue = 4,
    kDoubleValue = 5,
    kPointerValue = 7,
    kNestedValue = 8,
    kLegacyJsonValue = 9,
    kStringValue = 6,
    kStringValueIid = 17,
    VALUE_NOT_SET = 0,
  };

  enum ProtoTypeDescriptorCase {
    kProtoTypeName = 16,
    kProtoTypeNameIid = 13,
    PROTO_TYPE_DESCRIPTOR_NOT_SET = 0,
  };

  static inline const DebugAnnotation* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotation*>(
               &_DebugAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DebugAnnotation& a, DebugAnnotation& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugAnnotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugAnnotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugAnnotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugAnnotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugAnnotation& from) {
    DebugAnnotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugAnnotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DebugAnnotation";
  }
  protected:
  explicit DebugAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DebugAnnotation_NestedValue NestedValue;

  // accessors -------------------------------------------------------

  enum : int {
    kDictEntriesFieldNumber = 11,
    kArrayValuesFieldNumber = 12,
    kProtoValueFieldNumber = 14,
    kNameIidFieldNumber = 1,
    kNameFieldNumber = 10,
    kBoolValueFieldNumber = 2,
    kUintValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kPointerValueFieldNumber = 7,
    kNestedValueFieldNumber = 8,
    kLegacyJsonValueFieldNumber = 9,
    kStringValueFieldNumber = 6,
    kStringValueIidFieldNumber = 17,
    kProtoTypeNameFieldNumber = 16,
    kProtoTypeNameIidFieldNumber = 13,
  };
  // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
  int dict_entries_size() const;
  private:
  int _internal_dict_entries_size() const;

  public:
  void clear_dict_entries() ;
  ::perfetto::protos::DebugAnnotation* mutable_dict_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
      mutable_dict_entries();
  private:
  const ::perfetto::protos::DebugAnnotation& _internal_dict_entries(int index) const;
  ::perfetto::protos::DebugAnnotation* _internal_add_dict_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>& _internal_dict_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>* _internal_mutable_dict_entries();
  public:
  const ::perfetto::protos::DebugAnnotation& dict_entries(int index) const;
  ::perfetto::protos::DebugAnnotation* add_dict_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
      dict_entries() const;
  // repeated .perfetto.protos.DebugAnnotation array_values = 12;
  int array_values_size() const;
  private:
  int _internal_array_values_size() const;

  public:
  void clear_array_values() ;
  ::perfetto::protos::DebugAnnotation* mutable_array_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
      mutable_array_values();
  private:
  const ::perfetto::protos::DebugAnnotation& _internal_array_values(int index) const;
  ::perfetto::protos::DebugAnnotation* _internal_add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>& _internal_array_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>* _internal_mutable_array_values();
  public:
  const ::perfetto::protos::DebugAnnotation& array_values(int index) const;
  ::perfetto::protos::DebugAnnotation* add_array_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
      array_values() const;
  // optional bytes proto_value = 14;
  bool has_proto_value() const;
  void clear_proto_value() ;
  const std::string& proto_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_value(Arg_&& arg, Args_... args);
  std::string* mutable_proto_value();
  PROTOBUF_NODISCARD std::string* release_proto_value();
  void set_allocated_proto_value(std::string* ptr);

  private:
  const std::string& _internal_proto_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_value(
      const std::string& value);
  std::string* _internal_mutable_proto_value();

  public:
  // uint64 name_iid = 1;
  bool has_name_iid() const;
  void clear_name_iid() ;
  ::uint64_t name_iid() const;
  void set_name_iid(::uint64_t value);

  private:
  ::uint64_t _internal_name_iid() const;
  void _internal_set_name_iid(::uint64_t value);

  public:
  // string name = 10;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool bool_value = 2;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // uint64 uint_value = 3;
  bool has_uint_value() const;
  void clear_uint_value() ;
  ::uint64_t uint_value() const;
  void set_uint_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint_value() const;
  void _internal_set_uint_value(::uint64_t value);

  public:
  // int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // double double_value = 5;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // uint64 pointer_value = 7;
  bool has_pointer_value() const;
  void clear_pointer_value() ;
  ::uint64_t pointer_value() const;
  void set_pointer_value(::uint64_t value);

  private:
  ::uint64_t _internal_pointer_value() const;
  void _internal_set_pointer_value(::uint64_t value);

  public:
  // .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
  bool has_nested_value() const;
  private:
  bool _internal_has_nested_value() const;

  public:
  void clear_nested_value() ;
  const ::perfetto::protos::DebugAnnotation_NestedValue& nested_value() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DebugAnnotation_NestedValue* release_nested_value();
  ::perfetto::protos::DebugAnnotation_NestedValue* mutable_nested_value();
  void set_allocated_nested_value(::perfetto::protos::DebugAnnotation_NestedValue* nested_value);
  private:
  const ::perfetto::protos::DebugAnnotation_NestedValue& _internal_nested_value() const;
  ::perfetto::protos::DebugAnnotation_NestedValue* _internal_mutable_nested_value();
  public:
  void unsafe_arena_set_allocated_nested_value(
      ::perfetto::protos::DebugAnnotation_NestedValue* nested_value);
  ::perfetto::protos::DebugAnnotation_NestedValue* unsafe_arena_release_nested_value();
  // string legacy_json_value = 9;
  bool has_legacy_json_value() const;
  void clear_legacy_json_value() ;
  const std::string& legacy_json_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_legacy_json_value(Arg_&& arg, Args_... args);
  std::string* mutable_legacy_json_value();
  PROTOBUF_NODISCARD std::string* release_legacy_json_value();
  void set_allocated_legacy_json_value(std::string* ptr);

  private:
  const std::string& _internal_legacy_json_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legacy_json_value(
      const std::string& value);
  std::string* _internal_mutable_legacy_json_value();

  public:
  // string string_value = 6;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* ptr);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // uint64 string_value_iid = 17;
  bool has_string_value_iid() const;
  void clear_string_value_iid() ;
  ::uint64_t string_value_iid() const;
  void set_string_value_iid(::uint64_t value);

  private:
  ::uint64_t _internal_string_value_iid() const;
  void _internal_set_string_value_iid(::uint64_t value);

  public:
  // string proto_type_name = 16;
  bool has_proto_type_name() const;
  void clear_proto_type_name() ;
  const std::string& proto_type_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_type_name(Arg_&& arg, Args_... args);
  std::string* mutable_proto_type_name();
  PROTOBUF_NODISCARD std::string* release_proto_type_name();
  void set_allocated_proto_type_name(std::string* ptr);

  private:
  const std::string& _internal_proto_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_type_name(
      const std::string& value);
  std::string* _internal_mutable_proto_type_name();

  public:
  // uint64 proto_type_name_iid = 13;
  bool has_proto_type_name_iid() const;
  void clear_proto_type_name_iid() ;
  ::uint64_t proto_type_name_iid() const;
  void set_proto_type_name_iid(::uint64_t value);

  private:
  ::uint64_t _internal_proto_type_name_iid() const;
  void _internal_set_proto_type_name_iid(::uint64_t value);

  public:
  void clear_name_field();
  NameFieldCase name_field_case() const;
  void clear_value();
  ValueCase value_case() const;
  void clear_proto_type_descriptor();
  ProtoTypeDescriptorCase proto_type_descriptor_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotation)
 private:
  class _Internal;
  void set_has_name_iid();
  void set_has_name();
  void set_has_bool_value();
  void set_has_uint_value();
  void set_has_int_value();
  void set_has_double_value();
  void set_has_pointer_value();
  void set_has_nested_value();
  void set_has_legacy_json_value();
  void set_has_string_value();
  void set_has_string_value_iid();
  void set_has_proto_type_name();
  void set_has_proto_type_name_iid();

  inline bool has_name_field() const;
  inline void clear_has_name_field();

  inline bool has_value() const;
  inline void clear_has_value();

  inline bool has_proto_type_descriptor() const;
  inline void clear_has_proto_type_descriptor();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation > dict_entries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation > array_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_value_;
    union NameFieldUnion {
      constexpr NameFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint64_t name_iid_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } name_field_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_value_;
      ::uint64_t uint_value_;
      ::int64_t int_value_;
      double double_value_;
      ::uint64_t pointer_value_;
      ::perfetto::protos::DebugAnnotation_NestedValue* nested_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_json_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::uint64_t string_value_iid_;
    } value_;
    union ProtoTypeDescriptorUnion {
      constexpr ProtoTypeDescriptorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_type_name_;
      ::uint64_t proto_type_name_iid_;
    } proto_type_descriptor_;
    ::uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};// -------------------------------------------------------------------

class DebugAnnotationName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotationName) */ {
 public:
  inline DebugAnnotationName() : DebugAnnotationName(nullptr) {}
  ~DebugAnnotationName() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DebugAnnotationName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugAnnotationName(const DebugAnnotationName& from);
  DebugAnnotationName(DebugAnnotationName&& from) noexcept
    : DebugAnnotationName() {
    *this = ::std::move(from);
  }

  inline DebugAnnotationName& operator=(const DebugAnnotationName& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotationName& operator=(DebugAnnotationName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugAnnotationName& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugAnnotationName* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotationName*>(
               &_DebugAnnotationName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DebugAnnotationName& a, DebugAnnotationName& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotationName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugAnnotationName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugAnnotationName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugAnnotationName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugAnnotationName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugAnnotationName& from) {
    DebugAnnotationName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugAnnotationName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DebugAnnotationName";
  }
  protected:
  explicit DebugAnnotationName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid() ;
  ::uint64_t iid() const;
  void set_iid(::uint64_t value);

  private:
  ::uint64_t _internal_iid() const;
  void _internal_set_iid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotationName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};// -------------------------------------------------------------------

class DebugAnnotationValueTypeName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DebugAnnotationValueTypeName) */ {
 public:
  inline DebugAnnotationValueTypeName() : DebugAnnotationValueTypeName(nullptr) {}
  ~DebugAnnotationValueTypeName() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DebugAnnotationValueTypeName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugAnnotationValueTypeName(const DebugAnnotationValueTypeName& from);
  DebugAnnotationValueTypeName(DebugAnnotationValueTypeName&& from) noexcept
    : DebugAnnotationValueTypeName() {
    *this = ::std::move(from);
  }

  inline DebugAnnotationValueTypeName& operator=(const DebugAnnotationValueTypeName& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugAnnotationValueTypeName& operator=(DebugAnnotationValueTypeName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugAnnotationValueTypeName& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugAnnotationValueTypeName* internal_default_instance() {
    return reinterpret_cast<const DebugAnnotationValueTypeName*>(
               &_DebugAnnotationValueTypeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DebugAnnotationValueTypeName& a, DebugAnnotationValueTypeName& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugAnnotationValueTypeName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugAnnotationValueTypeName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugAnnotationValueTypeName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugAnnotationValueTypeName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugAnnotationValueTypeName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugAnnotationValueTypeName& from) {
    DebugAnnotationValueTypeName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugAnnotationValueTypeName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DebugAnnotationValueTypeName";
  }
  protected:
  explicit DebugAnnotationValueTypeName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid() ;
  ::uint64_t iid() const;
  void set_iid(::uint64_t value);

  private:
  ::uint64_t _internal_iid() const;
  void _internal_set_iid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DebugAnnotationValueTypeName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DebugAnnotation_NestedValue

// optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
inline bool DebugAnnotation_NestedValue::has_nested_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DebugAnnotation_NestedValue::clear_nested_type() {
  _impl_.nested_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::nested_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.nested_type)
  return _internal_nested_type();
}
inline void DebugAnnotation_NestedValue::set_nested_type(::perfetto::protos::DebugAnnotation_NestedValue_NestedType value) {
   _internal_set_nested_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.nested_type)
}
inline ::perfetto::protos::DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::_internal_nested_type() const {
  return static_cast<::perfetto::protos::DebugAnnotation_NestedValue_NestedType>(_impl_.nested_type_);
}
inline void DebugAnnotation_NestedValue::_internal_set_nested_type(::perfetto::protos::DebugAnnotation_NestedValue_NestedType value) {
  assert(::perfetto::protos::DebugAnnotation_NestedValue_NestedType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nested_type_ = value;
}

// repeated string dict_keys = 2;
inline int DebugAnnotation_NestedValue::_internal_dict_keys_size() const {
  return _impl_.dict_keys_.size();
}
inline int DebugAnnotation_NestedValue::dict_keys_size() const {
  return _internal_dict_keys_size();
}
inline void DebugAnnotation_NestedValue::clear_dict_keys() {
  _internal_mutable_dict_keys()->Clear();
}
inline std::string* DebugAnnotation_NestedValue::add_dict_keys() {
  std::string* _s = _internal_add_dict_keys();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return _s;
}
inline const std::string& DebugAnnotation_NestedValue::dict_keys(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return _internal_dict_keys(index);
}
inline std::string* DebugAnnotation_NestedValue::mutable_dict_keys(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return _internal_mutable_dict_keys()->Mutable(index);
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, const std::string& value) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, std::string&& value) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dict_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::set_dict_keys(int index, absl::string_view value) {
  _internal_mutable_dict_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(const std::string& value) {
  _internal_mutable_dict_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(std::string&& value) {
  _internal_mutable_dict_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_dict_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(const char* value, std::size_t size) {
  _internal_mutable_dict_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline void DebugAnnotation_NestedValue::add_dict_keys(absl::string_view value) {
  _internal_mutable_dict_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugAnnotation_NestedValue::dict_keys() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return _internal_dict_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* DebugAnnotation_NestedValue::mutable_dict_keys() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.NestedValue.dict_keys)
  return _internal_mutable_dict_keys();
}
inline const std::string& DebugAnnotation_NestedValue::_internal_dict_keys(int index) const {
  return _internal_dict_keys().Get(index);
}
inline std::string* DebugAnnotation_NestedValue::_internal_add_dict_keys() {
  return _internal_mutable_dict_keys()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DebugAnnotation_NestedValue::_internal_dict_keys() const {
  return _impl_.dict_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DebugAnnotation_NestedValue::_internal_mutable_dict_keys() {
  return &_impl_.dict_keys_;
}

// repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
inline int DebugAnnotation_NestedValue::_internal_dict_values_size() const {
  return _impl_.dict_values_.size();
}
inline int DebugAnnotation_NestedValue::dict_values_size() const {
  return _internal_dict_values_size();
}
inline void DebugAnnotation_NestedValue::clear_dict_values() {
  _internal_mutable_dict_values()->Clear();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::mutable_dict_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return _internal_mutable_dict_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
DebugAnnotation_NestedValue::mutable_dict_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return _internal_mutable_dict_values();
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation_NestedValue::_internal_dict_values(int index) const {
  return _internal_dict_values().Get(index);
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation_NestedValue::dict_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return _internal_dict_values(index);
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::_internal_add_dict_values() {
  return _internal_mutable_dict_values()->Add();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::add_dict_values() {
  ::perfetto::protos::DebugAnnotation_NestedValue* _add = _internal_add_dict_values();
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
DebugAnnotation_NestedValue::dict_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.NestedValue.dict_values)
  return _internal_dict_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>&
DebugAnnotation_NestedValue::_internal_dict_values() const {
  return _impl_.dict_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>*
DebugAnnotation_NestedValue::_internal_mutable_dict_values() {
  return &_impl_.dict_values_;
}

// repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
inline int DebugAnnotation_NestedValue::_internal_array_values_size() const {
  return _impl_.array_values_.size();
}
inline int DebugAnnotation_NestedValue::array_values_size() const {
  return _internal_array_values_size();
}
inline void DebugAnnotation_NestedValue::clear_array_values() {
  _internal_mutable_array_values()->Clear();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return _internal_mutable_array_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >*
DebugAnnotation_NestedValue::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return _internal_mutable_array_values();
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation_NestedValue::_internal_array_values(int index) const {
  return _internal_array_values().Get(index);
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation_NestedValue::array_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return _internal_array_values(index);
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::_internal_add_array_values() {
  return _internal_mutable_array_values()->Add();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation_NestedValue::add_array_values() {
  ::perfetto::protos::DebugAnnotation_NestedValue* _add = _internal_add_array_values();
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation_NestedValue >&
DebugAnnotation_NestedValue::array_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.NestedValue.array_values)
  return _internal_array_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>&
DebugAnnotation_NestedValue::_internal_array_values() const {
  return _impl_.array_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation_NestedValue>*
DebugAnnotation_NestedValue::_internal_mutable_array_values() {
  return &_impl_.array_values_;
}

// optional int64 int_value = 5;
inline bool DebugAnnotation_NestedValue::has_int_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DebugAnnotation_NestedValue::clear_int_value() {
  _impl_.int_value_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t DebugAnnotation_NestedValue::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.int_value)
  return _internal_int_value();
}
inline void DebugAnnotation_NestedValue::set_int_value(::int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.int_value)
}
inline ::int64_t DebugAnnotation_NestedValue::_internal_int_value() const {
  return _impl_.int_value_;
}
inline void DebugAnnotation_NestedValue::_internal_set_int_value(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.int_value_ = value;
}

// optional double double_value = 6;
inline bool DebugAnnotation_NestedValue::has_double_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void DebugAnnotation_NestedValue::clear_double_value() {
  _impl_.double_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DebugAnnotation_NestedValue::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.double_value)
  return _internal_double_value();
}
inline void DebugAnnotation_NestedValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.double_value)
}
inline double DebugAnnotation_NestedValue::_internal_double_value() const {
  return _impl_.double_value_;
}
inline void DebugAnnotation_NestedValue::_internal_set_double_value(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.double_value_ = value;
}

// optional bool bool_value = 7;
inline bool DebugAnnotation_NestedValue::has_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DebugAnnotation_NestedValue::clear_bool_value() {
  _impl_.bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DebugAnnotation_NestedValue::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.bool_value)
  return _internal_bool_value();
}
inline void DebugAnnotation_NestedValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.bool_value)
}
inline bool DebugAnnotation_NestedValue::_internal_bool_value() const {
  return _impl_.bool_value_;
}
inline void DebugAnnotation_NestedValue::_internal_set_bool_value(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bool_value_ = value;
}

// optional string string_value = 8;
inline bool DebugAnnotation_NestedValue::has_string_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DebugAnnotation_NestedValue::clear_string_value() {
  _impl_.string_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugAnnotation_NestedValue::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.NestedValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotation_NestedValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}
inline std::string* DebugAnnotation_NestedValue::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.NestedValue.string_value)
  return _s;
}
inline const std::string& DebugAnnotation_NestedValue::_internal_string_value() const {
  return _impl_.string_value_.Get();
}
inline void DebugAnnotation_NestedValue::_internal_set_string_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotation_NestedValue::_internal_mutable_string_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_value_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotation_NestedValue::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.NestedValue.string_value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.string_value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugAnnotation_NestedValue::set_allocated_string_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_value_.IsDefault()) {
          _impl_.string_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.NestedValue.string_value)
}

// -------------------------------------------------------------------

// DebugAnnotation

// uint64 name_iid = 1;
inline bool DebugAnnotation::has_name_iid() const {
  return name_field_case() == kNameIid;
}
inline void DebugAnnotation::set_has_name_iid() {
  _impl_._oneof_case_[0] = kNameIid;
}
inline void DebugAnnotation::clear_name_iid() {
  if (name_field_case() == kNameIid) {
    _impl_.name_field_.name_iid_ = ::uint64_t{0u};
    clear_has_name_field();
  }
}
inline ::uint64_t DebugAnnotation::name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.name_iid)
  return _internal_name_iid();
}
inline void DebugAnnotation::set_name_iid(::uint64_t value) {
  _internal_set_name_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.name_iid)
}
inline ::uint64_t DebugAnnotation::_internal_name_iid() const {
  if (name_field_case() == kNameIid) {
    return _impl_.name_field_.name_iid_;
  }
  return ::uint64_t{0u};
}
inline void DebugAnnotation::_internal_set_name_iid(::uint64_t value) {
  if (name_field_case() != kNameIid) {
    clear_name_field();
    set_has_name_iid();
  }
  _impl_.name_field_.name_iid_ = value;
}

// string name = 10;
inline bool DebugAnnotation::has_name() const {
  return name_field_case() == kName;
}
inline void DebugAnnotation::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void DebugAnnotation::clear_name() {
  if (name_field_case() == kName) {
    _impl_.name_field_.name_.Destroy();
    clear_has_name_field();
  }
}
inline const std::string& DebugAnnotation::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotation::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (name_field_case() != kName) {
    clear_name_field();

    set_has_name();
    _impl_.name_field_.name_.InitDefault();
  }
  _impl_.name_field_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.name)
}
inline std::string* DebugAnnotation::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.name)
  return _s;
}
inline const std::string& DebugAnnotation::_internal_name() const {
  if (name_field_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.name_field_.name_.Get();
}
inline void DebugAnnotation::_internal_set_name(const std::string& value) {
  if (name_field_case() != kName) {
    clear_name_field();

    set_has_name();
    _impl_.name_field_.name_.InitDefault();
  }


  _impl_.name_field_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotation::_internal_mutable_name() {
  if (name_field_case() != kName) {
    clear_name_field();

    set_has_name();
    _impl_.name_field_.name_.InitDefault();
  }
  return _impl_.name_field_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotation::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.name)
  if (name_field_case() != kName) {
    return nullptr;
  }
  clear_has_name_field();
  return _impl_.name_field_.name_.Release();
}
inline void DebugAnnotation::set_allocated_name(std::string* value) {
  if (has_name_field()) {
    clear_name_field();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.name_field_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.name)
}

// bool bool_value = 2;
inline bool DebugAnnotation::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void DebugAnnotation::set_has_bool_value() {
  _impl_._oneof_case_[1] = kBoolValue;
}
inline void DebugAnnotation::clear_bool_value() {
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool DebugAnnotation::bool_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.bool_value)
  return _internal_bool_value();
}
inline void DebugAnnotation::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.bool_value)
}
inline bool DebugAnnotation::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void DebugAnnotation::_internal_set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}

// uint64 uint_value = 3;
inline bool DebugAnnotation::has_uint_value() const {
  return value_case() == kUintValue;
}
inline void DebugAnnotation::set_has_uint_value() {
  _impl_._oneof_case_[1] = kUintValue;
}
inline void DebugAnnotation::clear_uint_value() {
  if (value_case() == kUintValue) {
    _impl_.value_.uint_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t DebugAnnotation::uint_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.uint_value)
  return _internal_uint_value();
}
inline void DebugAnnotation::set_uint_value(::uint64_t value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.uint_value)
}
inline ::uint64_t DebugAnnotation::_internal_uint_value() const {
  if (value_case() == kUintValue) {
    return _impl_.value_.uint_value_;
  }
  return ::uint64_t{0u};
}
inline void DebugAnnotation::_internal_set_uint_value(::uint64_t value) {
  if (value_case() != kUintValue) {
    clear_value();
    set_has_uint_value();
  }
  _impl_.value_.uint_value_ = value;
}

// int64 int_value = 4;
inline bool DebugAnnotation::has_int_value() const {
  return value_case() == kIntValue;
}
inline void DebugAnnotation::set_has_int_value() {
  _impl_._oneof_case_[1] = kIntValue;
}
inline void DebugAnnotation::clear_int_value() {
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t DebugAnnotation::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.int_value)
  return _internal_int_value();
}
inline void DebugAnnotation::set_int_value(::int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.int_value)
}
inline ::int64_t DebugAnnotation::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}
inline void DebugAnnotation::_internal_set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}

// double double_value = 5;
inline bool DebugAnnotation::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void DebugAnnotation::set_has_double_value() {
  _impl_._oneof_case_[1] = kDoubleValue;
}
inline void DebugAnnotation::clear_double_value() {
  if (value_case() == kDoubleValue) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double DebugAnnotation::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.double_value)
  return _internal_double_value();
}
inline void DebugAnnotation::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.double_value)
}
inline double DebugAnnotation::_internal_double_value() const {
  if (value_case() == kDoubleValue) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void DebugAnnotation::_internal_set_double_value(double value) {
  if (value_case() != kDoubleValue) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}

// uint64 pointer_value = 7;
inline bool DebugAnnotation::has_pointer_value() const {
  return value_case() == kPointerValue;
}
inline void DebugAnnotation::set_has_pointer_value() {
  _impl_._oneof_case_[1] = kPointerValue;
}
inline void DebugAnnotation::clear_pointer_value() {
  if (value_case() == kPointerValue) {
    _impl_.value_.pointer_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t DebugAnnotation::pointer_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.pointer_value)
  return _internal_pointer_value();
}
inline void DebugAnnotation::set_pointer_value(::uint64_t value) {
  _internal_set_pointer_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.pointer_value)
}
inline ::uint64_t DebugAnnotation::_internal_pointer_value() const {
  if (value_case() == kPointerValue) {
    return _impl_.value_.pointer_value_;
  }
  return ::uint64_t{0u};
}
inline void DebugAnnotation::_internal_set_pointer_value(::uint64_t value) {
  if (value_case() != kPointerValue) {
    clear_value();
    set_has_pointer_value();
  }
  _impl_.value_.pointer_value_ = value;
}

// .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
inline bool DebugAnnotation::has_nested_value() const {
  return value_case() == kNestedValue;
}
inline bool DebugAnnotation::_internal_has_nested_value() const {
  return value_case() == kNestedValue;
}
inline void DebugAnnotation::set_has_nested_value() {
  _impl_._oneof_case_[1] = kNestedValue;
}
inline void DebugAnnotation::clear_nested_value() {
  if (value_case() == kNestedValue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.nested_value_;
    }
    clear_has_value();
  }
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation::release_nested_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.nested_value)
  if (value_case() == kNestedValue) {
    clear_has_value();
    ::perfetto::protos::DebugAnnotation_NestedValue* temp = _impl_.value_.nested_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.nested_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation::_internal_nested_value() const {
  return value_case() == kNestedValue
      ? *_impl_.value_.nested_value_
      : reinterpret_cast<::perfetto::protos::DebugAnnotation_NestedValue&>(::perfetto::protos::_DebugAnnotation_NestedValue_default_instance_);
}
inline const ::perfetto::protos::DebugAnnotation_NestedValue& DebugAnnotation::nested_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.nested_value)
  return _internal_nested_value();
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation::unsafe_arena_release_nested_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.DebugAnnotation.nested_value)
  if (value_case() == kNestedValue) {
    clear_has_value();
    ::perfetto::protos::DebugAnnotation_NestedValue* temp = _impl_.value_.nested_value_;
    _impl_.value_.nested_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DebugAnnotation::unsafe_arena_set_allocated_nested_value(::perfetto::protos::DebugAnnotation_NestedValue* nested_value) {
  clear_value();
  if (nested_value) {
    set_has_nested_value();
    _impl_.value_.nested_value_ = nested_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.DebugAnnotation.nested_value)
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation::_internal_mutable_nested_value() {
  if (value_case() != kNestedValue) {
    clear_value();
    set_has_nested_value();
    _impl_.value_.nested_value_ = CreateMaybeMessage< ::perfetto::protos::DebugAnnotation_NestedValue >(GetArenaForAllocation());
  }
  return _impl_.value_.nested_value_;
}
inline ::perfetto::protos::DebugAnnotation_NestedValue* DebugAnnotation::mutable_nested_value() {
  ::perfetto::protos::DebugAnnotation_NestedValue* _msg = _internal_mutable_nested_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.nested_value)
  return _msg;
}

// string legacy_json_value = 9;
inline bool DebugAnnotation::has_legacy_json_value() const {
  return value_case() == kLegacyJsonValue;
}
inline void DebugAnnotation::set_has_legacy_json_value() {
  _impl_._oneof_case_[1] = kLegacyJsonValue;
}
inline void DebugAnnotation::clear_legacy_json_value() {
  if (value_case() == kLegacyJsonValue) {
    _impl_.value_.legacy_json_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& DebugAnnotation::legacy_json_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.legacy_json_value)
  return _internal_legacy_json_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotation::set_legacy_json_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kLegacyJsonValue) {
    clear_value();

    set_has_legacy_json_value();
    _impl_.value_.legacy_json_value_.InitDefault();
  }
  _impl_.value_.legacy_json_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.legacy_json_value)
}
inline std::string* DebugAnnotation::mutable_legacy_json_value() {
  std::string* _s = _internal_mutable_legacy_json_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.legacy_json_value)
  return _s;
}
inline const std::string& DebugAnnotation::_internal_legacy_json_value() const {
  if (value_case() != kLegacyJsonValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.legacy_json_value_.Get();
}
inline void DebugAnnotation::_internal_set_legacy_json_value(const std::string& value) {
  if (value_case() != kLegacyJsonValue) {
    clear_value();

    set_has_legacy_json_value();
    _impl_.value_.legacy_json_value_.InitDefault();
  }


  _impl_.value_.legacy_json_value_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotation::_internal_mutable_legacy_json_value() {
  if (value_case() != kLegacyJsonValue) {
    clear_value();

    set_has_legacy_json_value();
    _impl_.value_.legacy_json_value_.InitDefault();
  }
  return _impl_.value_.legacy_json_value_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotation::release_legacy_json_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.legacy_json_value)
  if (value_case() != kLegacyJsonValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.legacy_json_value_.Release();
}
inline void DebugAnnotation::set_allocated_legacy_json_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_legacy_json_value();
    _impl_.value_.legacy_json_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.legacy_json_value)
}

// string string_value = 6;
inline bool DebugAnnotation::has_string_value() const {
  return value_case() == kStringValue;
}
inline void DebugAnnotation::set_has_string_value() {
  _impl_._oneof_case_[1] = kStringValue;
}
inline void DebugAnnotation::clear_string_value() {
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& DebugAnnotation::string_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotation::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.string_value)
}
inline std::string* DebugAnnotation::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.string_value)
  return _s;
}
inline const std::string& DebugAnnotation::_internal_string_value() const {
  if (value_case() != kStringValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void DebugAnnotation::_internal_set_string_value(const std::string& value) {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }


  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotation::_internal_mutable_string_value() {
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotation::release_string_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void DebugAnnotation::set_allocated_string_value(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.string_value)
}

// uint64 string_value_iid = 17;
inline bool DebugAnnotation::has_string_value_iid() const {
  return value_case() == kStringValueIid;
}
inline void DebugAnnotation::set_has_string_value_iid() {
  _impl_._oneof_case_[1] = kStringValueIid;
}
inline void DebugAnnotation::clear_string_value_iid() {
  if (value_case() == kStringValueIid) {
    _impl_.value_.string_value_iid_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t DebugAnnotation::string_value_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.string_value_iid)
  return _internal_string_value_iid();
}
inline void DebugAnnotation::set_string_value_iid(::uint64_t value) {
  _internal_set_string_value_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.string_value_iid)
}
inline ::uint64_t DebugAnnotation::_internal_string_value_iid() const {
  if (value_case() == kStringValueIid) {
    return _impl_.value_.string_value_iid_;
  }
  return ::uint64_t{0u};
}
inline void DebugAnnotation::_internal_set_string_value_iid(::uint64_t value) {
  if (value_case() != kStringValueIid) {
    clear_value();
    set_has_string_value_iid();
  }
  _impl_.value_.string_value_iid_ = value;
}

// string proto_type_name = 16;
inline bool DebugAnnotation::has_proto_type_name() const {
  return proto_type_descriptor_case() == kProtoTypeName;
}
inline void DebugAnnotation::set_has_proto_type_name() {
  _impl_._oneof_case_[2] = kProtoTypeName;
}
inline void DebugAnnotation::clear_proto_type_name() {
  if (proto_type_descriptor_case() == kProtoTypeName) {
    _impl_.proto_type_descriptor_.proto_type_name_.Destroy();
    clear_has_proto_type_descriptor();
  }
}
inline const std::string& DebugAnnotation::proto_type_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.proto_type_name)
  return _internal_proto_type_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotation::set_proto_type_name(Arg_&& arg,
                                                     Args_... args) {
  if (proto_type_descriptor_case() != kProtoTypeName) {
    clear_proto_type_descriptor();

    set_has_proto_type_name();
    _impl_.proto_type_descriptor_.proto_type_name_.InitDefault();
  }
  _impl_.proto_type_descriptor_.proto_type_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.proto_type_name)
}
inline std::string* DebugAnnotation::mutable_proto_type_name() {
  std::string* _s = _internal_mutable_proto_type_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.proto_type_name)
  return _s;
}
inline const std::string& DebugAnnotation::_internal_proto_type_name() const {
  if (proto_type_descriptor_case() != kProtoTypeName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.proto_type_descriptor_.proto_type_name_.Get();
}
inline void DebugAnnotation::_internal_set_proto_type_name(const std::string& value) {
  if (proto_type_descriptor_case() != kProtoTypeName) {
    clear_proto_type_descriptor();

    set_has_proto_type_name();
    _impl_.proto_type_descriptor_.proto_type_name_.InitDefault();
  }


  _impl_.proto_type_descriptor_.proto_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotation::_internal_mutable_proto_type_name() {
  if (proto_type_descriptor_case() != kProtoTypeName) {
    clear_proto_type_descriptor();

    set_has_proto_type_name();
    _impl_.proto_type_descriptor_.proto_type_name_.InitDefault();
  }
  return _impl_.proto_type_descriptor_.proto_type_name_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotation::release_proto_type_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.proto_type_name)
  if (proto_type_descriptor_case() != kProtoTypeName) {
    return nullptr;
  }
  clear_has_proto_type_descriptor();
  return _impl_.proto_type_descriptor_.proto_type_name_.Release();
}
inline void DebugAnnotation::set_allocated_proto_type_name(std::string* value) {
  if (has_proto_type_descriptor()) {
    clear_proto_type_descriptor();
  }
  if (value != nullptr) {
    set_has_proto_type_name();
    _impl_.proto_type_descriptor_.proto_type_name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.proto_type_name)
}

// uint64 proto_type_name_iid = 13;
inline bool DebugAnnotation::has_proto_type_name_iid() const {
  return proto_type_descriptor_case() == kProtoTypeNameIid;
}
inline void DebugAnnotation::set_has_proto_type_name_iid() {
  _impl_._oneof_case_[2] = kProtoTypeNameIid;
}
inline void DebugAnnotation::clear_proto_type_name_iid() {
  if (proto_type_descriptor_case() == kProtoTypeNameIid) {
    _impl_.proto_type_descriptor_.proto_type_name_iid_ = ::uint64_t{0u};
    clear_has_proto_type_descriptor();
  }
}
inline ::uint64_t DebugAnnotation::proto_type_name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.proto_type_name_iid)
  return _internal_proto_type_name_iid();
}
inline void DebugAnnotation::set_proto_type_name_iid(::uint64_t value) {
  _internal_set_proto_type_name_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.proto_type_name_iid)
}
inline ::uint64_t DebugAnnotation::_internal_proto_type_name_iid() const {
  if (proto_type_descriptor_case() == kProtoTypeNameIid) {
    return _impl_.proto_type_descriptor_.proto_type_name_iid_;
  }
  return ::uint64_t{0u};
}
inline void DebugAnnotation::_internal_set_proto_type_name_iid(::uint64_t value) {
  if (proto_type_descriptor_case() != kProtoTypeNameIid) {
    clear_proto_type_descriptor();
    set_has_proto_type_name_iid();
  }
  _impl_.proto_type_descriptor_.proto_type_name_iid_ = value;
}

// optional bytes proto_value = 14;
inline bool DebugAnnotation::has_proto_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DebugAnnotation::clear_proto_value() {
  _impl_.proto_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugAnnotation::proto_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.proto_value)
  return _internal_proto_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotation::set_proto_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.proto_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotation.proto_value)
}
inline std::string* DebugAnnotation::mutable_proto_value() {
  std::string* _s = _internal_mutable_proto_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.proto_value)
  return _s;
}
inline const std::string& DebugAnnotation::_internal_proto_value() const {
  return _impl_.proto_value_.Get();
}
inline void DebugAnnotation::_internal_set_proto_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.proto_value_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotation::_internal_mutable_proto_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.proto_value_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotation::release_proto_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotation.proto_value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.proto_value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugAnnotation::set_allocated_proto_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proto_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proto_value_.IsDefault()) {
          _impl_.proto_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.proto_value)
}

// repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
inline int DebugAnnotation::_internal_dict_entries_size() const {
  return _impl_.dict_entries_.size();
}
inline int DebugAnnotation::dict_entries_size() const {
  return _internal_dict_entries_size();
}
inline void DebugAnnotation::clear_dict_entries() {
  _internal_mutable_dict_entries()->Clear();
}
inline ::perfetto::protos::DebugAnnotation* DebugAnnotation::mutable_dict_entries(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.dict_entries)
  return _internal_mutable_dict_entries()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
DebugAnnotation::mutable_dict_entries() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.dict_entries)
  return _internal_mutable_dict_entries();
}
inline const ::perfetto::protos::DebugAnnotation& DebugAnnotation::_internal_dict_entries(int index) const {
  return _internal_dict_entries().Get(index);
}
inline const ::perfetto::protos::DebugAnnotation& DebugAnnotation::dict_entries(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.dict_entries)
  return _internal_dict_entries(index);
}
inline ::perfetto::protos::DebugAnnotation* DebugAnnotation::_internal_add_dict_entries() {
  return _internal_mutable_dict_entries()->Add();
}
inline ::perfetto::protos::DebugAnnotation* DebugAnnotation::add_dict_entries() {
  ::perfetto::protos::DebugAnnotation* _add = _internal_add_dict_entries();
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.dict_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
DebugAnnotation::dict_entries() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.dict_entries)
  return _internal_dict_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>&
DebugAnnotation::_internal_dict_entries() const {
  return _impl_.dict_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>*
DebugAnnotation::_internal_mutable_dict_entries() {
  return &_impl_.dict_entries_;
}

// repeated .perfetto.protos.DebugAnnotation array_values = 12;
inline int DebugAnnotation::_internal_array_values_size() const {
  return _impl_.array_values_.size();
}
inline int DebugAnnotation::array_values_size() const {
  return _internal_array_values_size();
}
inline void DebugAnnotation::clear_array_values() {
  _internal_mutable_array_values()->Clear();
}
inline ::perfetto::protos::DebugAnnotation* DebugAnnotation::mutable_array_values(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotation.array_values)
  return _internal_mutable_array_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >*
DebugAnnotation::mutable_array_values() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.DebugAnnotation.array_values)
  return _internal_mutable_array_values();
}
inline const ::perfetto::protos::DebugAnnotation& DebugAnnotation::_internal_array_values(int index) const {
  return _internal_array_values().Get(index);
}
inline const ::perfetto::protos::DebugAnnotation& DebugAnnotation::array_values(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotation.array_values)
  return _internal_array_values(index);
}
inline ::perfetto::protos::DebugAnnotation* DebugAnnotation::_internal_add_array_values() {
  return _internal_mutable_array_values()->Add();
}
inline ::perfetto::protos::DebugAnnotation* DebugAnnotation::add_array_values() {
  ::perfetto::protos::DebugAnnotation* _add = _internal_add_array_values();
  // @@protoc_insertion_point(field_add:perfetto.protos.DebugAnnotation.array_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::DebugAnnotation >&
DebugAnnotation::array_values() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.DebugAnnotation.array_values)
  return _internal_array_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>&
DebugAnnotation::_internal_array_values() const {
  return _impl_.array_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::DebugAnnotation>*
DebugAnnotation::_internal_mutable_array_values() {
  return &_impl_.array_values_;
}

inline bool DebugAnnotation::has_name_field() const {
  return name_field_case() != NAME_FIELD_NOT_SET;
}
inline void DebugAnnotation::clear_has_name_field() {
  _impl_._oneof_case_[0] = NAME_FIELD_NOT_SET;
}
inline bool DebugAnnotation::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DebugAnnotation::clear_has_value() {
  _impl_._oneof_case_[1] = VALUE_NOT_SET;
}
inline bool DebugAnnotation::has_proto_type_descriptor() const {
  return proto_type_descriptor_case() != PROTO_TYPE_DESCRIPTOR_NOT_SET;
}
inline void DebugAnnotation::clear_has_proto_type_descriptor() {
  _impl_._oneof_case_[2] = PROTO_TYPE_DESCRIPTOR_NOT_SET;
}
inline DebugAnnotation::NameFieldCase DebugAnnotation::name_field_case() const {
  return DebugAnnotation::NameFieldCase(_impl_._oneof_case_[0]);
}
inline DebugAnnotation::ValueCase DebugAnnotation::value_case() const {
  return DebugAnnotation::ValueCase(_impl_._oneof_case_[1]);
}
inline DebugAnnotation::ProtoTypeDescriptorCase DebugAnnotation::proto_type_descriptor_case() const {
  return DebugAnnotation::ProtoTypeDescriptorCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// DebugAnnotationName

// optional uint64 iid = 1;
inline bool DebugAnnotationName::has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DebugAnnotationName::clear_iid() {
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t DebugAnnotationName::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotationName.iid)
  return _internal_iid();
}
inline void DebugAnnotationName::set_iid(::uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotationName.iid)
}
inline ::uint64_t DebugAnnotationName::_internal_iid() const {
  return _impl_.iid_;
}
inline void DebugAnnotationName::_internal_set_iid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}

// optional string name = 2;
inline bool DebugAnnotationName::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DebugAnnotationName::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugAnnotationName::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotationName.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotationName::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotationName.name)
}
inline std::string* DebugAnnotationName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotationName.name)
  return _s;
}
inline const std::string& DebugAnnotationName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DebugAnnotationName::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotationName::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotationName::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotationName.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugAnnotationName::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotationName.name)
}

// -------------------------------------------------------------------

// DebugAnnotationValueTypeName

// optional uint64 iid = 1;
inline bool DebugAnnotationValueTypeName::has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DebugAnnotationValueTypeName::clear_iid() {
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t DebugAnnotationValueTypeName::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotationValueTypeName.iid)
  return _internal_iid();
}
inline void DebugAnnotationValueTypeName::set_iid(::uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotationValueTypeName.iid)
}
inline ::uint64_t DebugAnnotationValueTypeName::_internal_iid() const {
  return _impl_.iid_;
}
inline void DebugAnnotationValueTypeName::_internal_set_iid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}

// optional string name = 2;
inline bool DebugAnnotationValueTypeName::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DebugAnnotationValueTypeName::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugAnnotationValueTypeName::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DebugAnnotationValueTypeName.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DebugAnnotationValueTypeName::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.DebugAnnotationValueTypeName.name)
}
inline std::string* DebugAnnotationValueTypeName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.DebugAnnotationValueTypeName.name)
  return _s;
}
inline const std::string& DebugAnnotationValueTypeName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DebugAnnotationValueTypeName::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DebugAnnotationValueTypeName::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DebugAnnotationValueTypeName::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.DebugAnnotationValueTypeName.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DebugAnnotationValueTypeName::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotationValueTypeName.name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::DebugAnnotation_NestedValue_NestedType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::DebugAnnotation_NestedValue_NestedType>() {
  return ::perfetto::protos::DebugAnnotation_NestedValue_NestedType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_2epb_2eh
