// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_thread_descriptor.proto

#include "protos/perfetto/trace/track_event/chrome_thread_descriptor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ChromeThreadDescriptor::ChromeThreadDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.thread_type_)*/ 0

  , /*decltype(_impl_.legacy_sort_index_)*/ 0
} {}
struct ChromeThreadDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeThreadDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeThreadDescriptorDefaultTypeInternal() {}
  union {
    ChromeThreadDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeThreadDescriptorDefaultTypeInternal _ChromeThreadDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeThreadDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeThreadDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeThreadDescriptor, _impl_.thread_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeThreadDescriptor, _impl_.legacy_sort_index_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::ChromeThreadDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ChromeThreadDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n@protos/perfetto/trace/track_event/chro"
    "me_thread_descriptor.proto\022\017perfetto.pro"
    "tos\"\354\t\n\026ChromeThreadDescriptor\022G\n\013thread"
    "_type\030\001 \001(\01622.perfetto.protos.ChromeThre"
    "adDescriptor.ThreadType\022\031\n\021legacy_sort_i"
    "ndex\030\002 \001(\005\"\355\010\n\nThreadType\022\026\n\022THREAD_UNSP"
    "ECIFIED\020\000\022\017\n\013THREAD_MAIN\020\001\022\r\n\tTHREAD_IO\020"
    "\002\022\031\n\025THREAD_POOL_BG_WORKER\020\003\022\031\n\025THREAD_P"
    "OOL_FG_WORKER\020\004\022\033\n\027THREAD_POOL_FG_BLOCKI"
    "NG\020\005\022\033\n\027THREAD_POOL_BG_BLOCKING\020\006\022\027\n\023THR"
    "EAD_POOL_SERVICE\020\007\022\025\n\021THREAD_COMPOSITOR\020"
    "\010\022\031\n\025THREAD_VIZ_COMPOSITOR\020\t\022\034\n\030THREAD_C"
    "OMPOSITOR_WORKER\020\n\022\031\n\025THREAD_SERVICE_WOR"
    "KER\020\013\022\032\n\026THREAD_NETWORK_SERVICE\020\014\022\023\n\017THR"
    "EAD_CHILD_IO\020\r\022\025\n\021THREAD_BROWSER_IO\020\016\022\027\n"
    "\023THREAD_BROWSER_MAIN\020\017\022\030\n\024THREAD_RENDERE"
    "R_MAIN\020\020\022\027\n\023THREAD_UTILITY_MAIN\020\021\022\023\n\017THR"
    "EAD_GPU_MAIN\020\022\022\032\n\026THREAD_CACHE_BLOCKFILE"
    "\020\023\022\020\n\014THREAD_MEDIA\020\024\022\035\n\031THREAD_AUDIO_OUT"
    "PUTDEVICE\020\025\022\034\n\030THREAD_AUDIO_INPUTDEVICE\020"
    "\026\022\025\n\021THREAD_GPU_MEMORY\020\027\022\024\n\020THREAD_GPU_V"
    "SYNC\020\030\022\033\n\027THREAD_DXA_VIDEODECODER\020\031\022\033\n\027T"
    "HREAD_BROWSER_WATCHDOG\020\032\022\031\n\025THREAD_WEBRT"
    "C_NETWORK\020\033\022\027\n\023THREAD_WINDOW_OWNER\020\034\022\033\n\027"
    "THREAD_WEBRTC_SIGNALING\020\035\022\030\n\024THREAD_WEBR"
    "TC_WORKER\020\036\022\025\n\021THREAD_PPAPI_MAIN\020\037\022\027\n\023TH"
    "READ_GPU_WATCHDOG\020 \022\022\n\016THREAD_SWAPPER\020!\022"
    "\032\n\026THREAD_GAMEPAD_POLLING\020\"\022\024\n\020THREAD_WE"
    "BCRYPTO\020#\022\023\n\017THREAD_DATABASE\020$\022\030\n\024THREAD"
    "_PROXYRESOLVER\020%\022\026\n\022THREAD_DEVTOOLSADB\020&"
    "\022\037\n\033THREAD_NETWORKCONFIGWATCHER\020\'\022\030\n\024THR"
    "EAD_WASAPI_RENDER\020(\022\036\n\032THREAD_LOADER_LOC"
    "K_SAMPLER\020)\022\027\n\023THREAD_MEMORY_INFRA\0202\022\034\n\030"
    "THREAD_SAMPLING_PROFILER\0203"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto = {
    false,
    false,
    1346,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto,
    "protos/perfetto/trace/track_event/chrome_thread_descriptor.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeThreadDescriptor_ThreadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto[0];
}
bool ChromeThreadDescriptor_ThreadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 51:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_UNSPECIFIED;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_MAIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_IO;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_POOL_BG_WORKER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_POOL_FG_WORKER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_POOL_FG_BLOCKING;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_POOL_BG_BLOCKING;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_POOL_SERVICE;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_COMPOSITOR;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_VIZ_COMPOSITOR;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_COMPOSITOR_WORKER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_SERVICE_WORKER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_NETWORK_SERVICE;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_CHILD_IO;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_BROWSER_IO;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_BROWSER_MAIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_RENDERER_MAIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_UTILITY_MAIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_GPU_MAIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_CACHE_BLOCKFILE;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_MEDIA;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_AUDIO_OUTPUTDEVICE;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_AUDIO_INPUTDEVICE;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_GPU_MEMORY;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_GPU_VSYNC;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_DXA_VIDEODECODER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_BROWSER_WATCHDOG;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_WEBRTC_NETWORK;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_WINDOW_OWNER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_WEBRTC_SIGNALING;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_WEBRTC_WORKER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_PPAPI_MAIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_GPU_WATCHDOG;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_SWAPPER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_GAMEPAD_POLLING;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_WEBCRYPTO;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_DATABASE;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_PROXYRESOLVER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_DEVTOOLSADB;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_NETWORKCONFIGWATCHER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_WASAPI_RENDER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_LOADER_LOCK_SAMPLER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_MEMORY_INFRA;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::THREAD_SAMPLING_PROFILER;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::ThreadType_MIN;
constexpr ChromeThreadDescriptor_ThreadType ChromeThreadDescriptor::ThreadType_MAX;
constexpr int ChromeThreadDescriptor::ThreadType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ChromeThreadDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeThreadDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeThreadDescriptor, _impl_._has_bits_);
  static void set_has_thread_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeThreadDescriptor::ChromeThreadDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeThreadDescriptor)
}
ChromeThreadDescriptor::ChromeThreadDescriptor(const ChromeThreadDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeThreadDescriptor)
}

inline void ChromeThreadDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.thread_type_) { 0 }

    , decltype(_impl_.legacy_sort_index_) { 0 }

  };
}

ChromeThreadDescriptor::~ChromeThreadDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeThreadDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeThreadDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChromeThreadDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeThreadDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeThreadDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.thread_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_sort_index_) -
        reinterpret_cast<char*>(&_impl_.thread_type_)) + sizeof(_impl_.legacy_sort_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeThreadDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeThreadDescriptor_ThreadType_IsValid(static_cast<int>(val)))) {
            _internal_set_thread_type(static_cast<::perfetto::protos::ChromeThreadDescriptor_ThreadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 legacy_sort_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_legacy_sort_index(&has_bits);
          _impl_.legacy_sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeThreadDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeThreadDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_thread_type(), target);
  }

  // optional int32 legacy_sort_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_legacy_sort_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeThreadDescriptor)
  return target;
}

::size_t ChromeThreadDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeThreadDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.ChromeThreadDescriptor.ThreadType thread_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_thread_type());
    }

    // optional int32 legacy_sort_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_legacy_sort_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeThreadDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeThreadDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeThreadDescriptor::GetClassData() const { return &_class_data_; }


void ChromeThreadDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeThreadDescriptor*>(&to_msg);
  auto& from = static_cast<const ChromeThreadDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeThreadDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.thread_type_ = from._impl_.thread_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.legacy_sort_index_ = from._impl_.legacy_sort_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeThreadDescriptor::CopyFrom(const ChromeThreadDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeThreadDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeThreadDescriptor::IsInitialized() const {
  return true;
}

void ChromeThreadDescriptor::InternalSwap(ChromeThreadDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeThreadDescriptor, _impl_.legacy_sort_index_)
      + sizeof(ChromeThreadDescriptor::_impl_.legacy_sort_index_)
      - PROTOBUF_FIELD_OFFSET(ChromeThreadDescriptor, _impl_.thread_type_)>(
          reinterpret_cast<char*>(&_impl_.thread_type_),
          reinterpret_cast<char*>(&other->_impl_.thread_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeThreadDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeThreadDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeThreadDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeThreadDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
