// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/debug_annotation.proto

#include "protos/perfetto/trace/track_event/debug_annotation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR DebugAnnotation_NestedValue::DebugAnnotation_NestedValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dict_keys_)*/{}
  , /*decltype(_impl_.dict_values_)*/{}
  , /*decltype(_impl_.array_values_)*/{}
  , /*decltype(_impl_.string_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.nested_type_)*/ 0

  , /*decltype(_impl_.bool_value_)*/ false

  , /*decltype(_impl_.int_value_)*/ ::int64_t{0}

  , /*decltype(_impl_.double_value_)*/ 0
} {}
struct DebugAnnotation_NestedValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotation_NestedValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotation_NestedValueDefaultTypeInternal() {}
  union {
    DebugAnnotation_NestedValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotation_NestedValueDefaultTypeInternal _DebugAnnotation_NestedValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DebugAnnotation::DebugAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dict_entries_)*/{}
  , /*decltype(_impl_.array_values_)*/{}
  , /*decltype(_impl_.proto_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_field_)*/{}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.proto_type_descriptor_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DebugAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotationDefaultTypeInternal() {}
  union {
    DebugAnnotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotationDefaultTypeInternal _DebugAnnotation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DebugAnnotationName::DebugAnnotationName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct DebugAnnotationNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotationNameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotationNameDefaultTypeInternal() {}
  union {
    DebugAnnotationName _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotationNameDefaultTypeInternal _DebugAnnotationName_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DebugAnnotationValueTypeName::DebugAnnotationValueTypeName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct DebugAnnotationValueTypeNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugAnnotationValueTypeNameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugAnnotationValueTypeNameDefaultTypeInternal() {}
  union {
    DebugAnnotationValueTypeName _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugAnnotationValueTypeNameDefaultTypeInternal _DebugAnnotationValueTypeName_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.nested_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.dict_keys_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.dict_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.array_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.int_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.double_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.bool_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation_NestedValue, _impl_.string_value_),
    1,
    ~0u,
    ~0u,
    ~0u,
    3,
    4,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_.proto_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_.dict_entries_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_.array_values_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_.name_field_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_.proto_type_descriptor_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationName, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationName, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationName, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationName, _impl_.name_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationValueTypeName, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationValueTypeName, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationValueTypeName, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotationValueTypeName, _impl_.name_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::perfetto::protos::DebugAnnotation_NestedValue)},
        { 24, 51, -1, sizeof(::perfetto::protos::DebugAnnotation)},
        { 67, 77, -1, sizeof(::perfetto::protos::DebugAnnotationName)},
        { 79, 89, -1, sizeof(::perfetto::protos::DebugAnnotationValueTypeName)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_DebugAnnotation_NestedValue_default_instance_._instance,
    &::perfetto::protos::_DebugAnnotation_default_instance_._instance,
    &::perfetto::protos::_DebugAnnotationName_default_instance_._instance,
    &::perfetto::protos::_DebugAnnotationValueTypeName_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n8protos/perfetto/trace/track_event/debu"
    "g_annotation.proto\022\017perfetto.protos\"\254\007\n\017"
    "DebugAnnotation\022\022\n\010name_iid\030\001 \001(\004H\000\022\016\n\004n"
    "ame\030\n \001(\tH\000\022\024\n\nbool_value\030\002 \001(\010H\001\022\024\n\nuin"
    "t_value\030\003 \001(\004H\001\022\023\n\tint_value\030\004 \001(\003H\001\022\026\n\014"
    "double_value\030\005 \001(\001H\001\022\027\n\rpointer_value\030\007 "
    "\001(\004H\001\022D\n\014nested_value\030\010 \001(\0132,.perfetto.p"
    "rotos.DebugAnnotation.NestedValueH\001\022\033\n\021l"
    "egacy_json_value\030\t \001(\tH\001\022\026\n\014string_value"
    "\030\006 \001(\tH\001\022\032\n\020string_value_iid\030\021 \001(\004H\001\022\031\n\017"
    "proto_type_name\030\020 \001(\tH\002\022\035\n\023proto_type_na"
    "me_iid\030\r \001(\004H\002\022\023\n\013proto_value\030\016 \001(\014\0226\n\014d"
    "ict_entries\030\013 \003(\0132 .perfetto.protos.Debu"
    "gAnnotation\0226\n\014array_values\030\014 \003(\0132 .perf"
    "etto.protos.DebugAnnotation\032\374\002\n\013NestedVa"
    "lue\022L\n\013nested_type\030\001 \001(\01627.perfetto.prot"
    "os.DebugAnnotation.NestedValue.NestedTyp"
    "e\022\021\n\tdict_keys\030\002 \003(\t\022A\n\013dict_values\030\003 \003("
    "\0132,.perfetto.protos.DebugAnnotation.Nest"
    "edValue\022B\n\014array_values\030\004 \003(\0132,.perfetto"
    ".protos.DebugAnnotation.NestedValue\022\021\n\ti"
    "nt_value\030\005 \001(\003\022\024\n\014double_value\030\006 \001(\001\022\022\n\n"
    "bool_value\030\007 \001(\010\022\024\n\014string_value\030\010 \001(\t\"2"
    "\n\nNestedType\022\017\n\013UNSPECIFIED\020\000\022\010\n\004DICT\020\001\022"
    "\t\n\005ARRAY\020\002B\014\n\nname_fieldB\007\n\005valueB\027\n\025pro"
    "to_type_descriptor\"0\n\023DebugAnnotationNam"
    "e\022\013\n\003iid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"9\n\034DebugAnn"
    "otationValueTypeName\022\013\n\003iid\030\001 \001(\004\022\014\n\004nam"
    "e\030\002 \001(\t"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto = {
    false,
    false,
    1127,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto,
    "protos/perfetto/trace/track_event/debug_annotation.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugAnnotation_NestedValue_NestedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[0];
}
bool DebugAnnotation_NestedValue_NestedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::UNSPECIFIED;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::DICT;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::ARRAY;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::NestedType_MIN;
constexpr DebugAnnotation_NestedValue_NestedType DebugAnnotation_NestedValue::NestedType_MAX;
constexpr int DebugAnnotation_NestedValue::NestedType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class DebugAnnotation_NestedValue::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotation_NestedValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DebugAnnotation_NestedValue, _impl_._has_bits_);
  static void set_has_nested_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugAnnotation_NestedValue::DebugAnnotation_NestedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotation.NestedValue)
}
DebugAnnotation_NestedValue::DebugAnnotation_NestedValue(const DebugAnnotation_NestedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugAnnotation_NestedValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dict_keys_){from._impl_.dict_keys_}
    , decltype(_impl_.dict_values_){from._impl_.dict_values_}
    , decltype(_impl_.array_values_){from._impl_.array_values_}
    , decltype(_impl_.string_value_) {}

    , decltype(_impl_.nested_type_) {}

    , decltype(_impl_.bool_value_) {}

    , decltype(_impl_.int_value_) {}

    , decltype(_impl_.double_value_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nested_type_, &from._impl_.nested_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.double_value_) -
    reinterpret_cast<char*>(&_impl_.nested_type_)) + sizeof(_impl_.double_value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotation.NestedValue)
}

inline void DebugAnnotation_NestedValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dict_keys_){arena}
    , decltype(_impl_.dict_values_){arena}
    , decltype(_impl_.array_values_){arena}
    , decltype(_impl_.string_value_) {}

    , decltype(_impl_.nested_type_) { 0 }

    , decltype(_impl_.bool_value_) { false }

    , decltype(_impl_.int_value_) { ::int64_t{0} }

    , decltype(_impl_.double_value_) { 0 }

  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugAnnotation_NestedValue::~DebugAnnotation_NestedValue() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotation.NestedValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotation_NestedValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_dict_keys()->~RepeatedPtrField();
  _internal_mutable_dict_values()->~RepeatedPtrField();
  _internal_mutable_array_values()->~RepeatedPtrField();
  _impl_.string_value_.Destroy();
}

void DebugAnnotation_NestedValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugAnnotation_NestedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotation.NestedValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dict_keys()->Clear();
  _internal_mutable_dict_values()->Clear();
  _internal_mutable_array_values()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.nested_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.double_value_) -
        reinterpret_cast<char*>(&_impl_.nested_type_)) + sizeof(_impl_.double_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugAnnotation_NestedValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::DebugAnnotation_NestedValue_NestedType_IsValid(static_cast<int>(val)))) {
            _internal_set_nested_type(static_cast<::perfetto::protos::DebugAnnotation_NestedValue_NestedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string dict_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dict_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotation.NestedValue.dict_keys");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dict_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 int_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_int_value(&has_bits);
          _impl_.int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double double_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bool_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_bool_value(&has_bits);
          _impl_.bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string string_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotation.NestedValue.string_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DebugAnnotation_NestedValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotation.NestedValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_nested_type(), target);
  }

  // repeated string dict_keys = 2;
  for (int i = 0, n = this->_internal_dict_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_dict_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.DebugAnnotation.NestedValue.dict_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dict_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_dict_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int64 int_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_int_value(), target);
  }

  // optional double double_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_double_value(), target);
  }

  // optional bool bool_value = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_bool_value(), target);
  }

  // optional string string_value = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_string_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.DebugAnnotation.NestedValue.string_value");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotation.NestedValue)
  return target;
}

::size_t DebugAnnotation_NestedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotation.NestedValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dict_keys = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_dict_keys().size());
  for (int i = 0, n = _internal_dict_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_dict_keys().Get(i));
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue dict_values = 3;
  total_size += 1UL * this->_internal_dict_values_size();
  for (const auto& msg : this->_internal_dict_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.DebugAnnotation.NestedValue array_values = 4;
  total_size += 1UL * this->_internal_array_values_size();
  for (const auto& msg : this->_internal_array_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string string_value = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string_value());
    }

    // optional .perfetto.protos.DebugAnnotation.NestedValue.NestedType nested_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_type());
    }

    // optional bool bool_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional int64 int_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
    }

    // optional double double_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugAnnotation_NestedValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugAnnotation_NestedValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugAnnotation_NestedValue::GetClassData() const { return &_class_data_; }


void DebugAnnotation_NestedValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugAnnotation_NestedValue*>(&to_msg);
  auto& from = static_cast<const DebugAnnotation_NestedValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotation.NestedValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dict_keys()->MergeFrom(from._internal_dict_keys());
  _this->_internal_mutable_dict_values()->MergeFrom(from._internal_dict_values());
  _this->_internal_mutable_array_values()->MergeFrom(from._internal_array_values());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.nested_type_ = from._impl_.nested_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.int_value_ = from._impl_.int_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugAnnotation_NestedValue::CopyFrom(const DebugAnnotation_NestedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotation.NestedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotation_NestedValue::IsInitialized() const {
  return true;
}

void DebugAnnotation_NestedValue::InternalSwap(DebugAnnotation_NestedValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_dict_keys()->InternalSwap(
      other->_internal_mutable_dict_keys());
  _internal_mutable_dict_values()->InternalSwap(other->_internal_mutable_dict_values());
  _internal_mutable_array_values()->InternalSwap(other->_internal_mutable_array_values());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string_value_, lhs_arena,
                                       &other->_impl_.string_value_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugAnnotation_NestedValue, _impl_.double_value_)
      + sizeof(DebugAnnotation_NestedValue::_impl_.double_value_)
      - PROTOBUF_FIELD_OFFSET(DebugAnnotation_NestedValue, _impl_.nested_type_)>(
          reinterpret_cast<char*>(&_impl_.nested_type_),
          reinterpret_cast<char*>(&other->_impl_.nested_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugAnnotation_NestedValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[0]);
}
// ===================================================================

class DebugAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DebugAnnotation, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DebugAnnotation, _impl_._oneof_case_);
  static const ::perfetto::protos::DebugAnnotation_NestedValue& nested_value(const DebugAnnotation* msg);
  static void set_has_proto_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::DebugAnnotation_NestedValue&
DebugAnnotation::_Internal::nested_value(const DebugAnnotation* msg) {
  return *msg->_impl_.value_.nested_value_;
}
void DebugAnnotation::set_allocated_nested_value(::perfetto::protos::DebugAnnotation_NestedValue* nested_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (nested_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nested_value);
    if (message_arena != submessage_arena) {
      nested_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_value, submessage_arena);
    }
    set_has_nested_value();
    _impl_.value_.nested_value_ = nested_value;
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.DebugAnnotation.nested_value)
}
DebugAnnotation::DebugAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotation)
}
DebugAnnotation::DebugAnnotation(const DebugAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dict_entries_){from._impl_.dict_entries_}
    , decltype(_impl_.array_values_){from._impl_.array_values_}
    , decltype(_impl_.proto_value_) {}

    , decltype(_impl_.name_field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.proto_type_descriptor_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proto_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proto_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proto_value_.Set(from._internal_proto_value(), _this->GetArenaForAllocation());
  }
  clear_has_name_field();
  switch (from.name_field_case()) {
    case kNameIid: {
      _this->_internal_set_name_iid(from._internal_name_iid());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUintValue: {
      _this->_internal_set_uint_value(from._internal_uint_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kPointerValue: {
      _this->_internal_set_pointer_value(from._internal_pointer_value());
      break;
    }
    case kNestedValue: {
      _this->_internal_mutable_nested_value()->::perfetto::protos::DebugAnnotation_NestedValue::MergeFrom(
          from._internal_nested_value());
      break;
    }
    case kLegacyJsonValue: {
      _this->_internal_set_legacy_json_value(from._internal_legacy_json_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStringValueIid: {
      _this->_internal_set_string_value_iid(from._internal_string_value_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  clear_has_proto_type_descriptor();
  switch (from.proto_type_descriptor_case()) {
    case kProtoTypeName: {
      _this->_internal_set_proto_type_name(from._internal_proto_type_name());
      break;
    }
    case kProtoTypeNameIid: {
      _this->_internal_set_proto_type_name_iid(from._internal_proto_type_name_iid());
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotation)
}

inline void DebugAnnotation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dict_entries_){arena}
    , decltype(_impl_.array_values_){arena}
    , decltype(_impl_.proto_value_) {}

    , decltype(_impl_.name_field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.proto_type_descriptor_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.proto_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proto_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_name_field();
  clear_has_value();
  clear_has_proto_type_descriptor();
}

DebugAnnotation::~DebugAnnotation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_dict_entries()->~RepeatedPtrField();
  _internal_mutable_array_values()->~RepeatedPtrField();
  _impl_.proto_value_.Destroy();
  if (has_name_field()) {
    clear_name_field();
  }
  if (has_value()) {
    clear_value();
  }
  if (has_proto_type_descriptor()) {
    clear_proto_type_descriptor();
  }
}

void DebugAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugAnnotation::clear_name_field() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.DebugAnnotation)
  switch (name_field_case()) {
    case kNameIid: {
      // No need to clear
      break;
    }
    case kName: {
      _impl_.name_field_.name_.Destroy();
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NAME_FIELD_NOT_SET;
}

void DebugAnnotation::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.DebugAnnotation)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kUintValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kPointerValue: {
      // No need to clear
      break;
    }
    case kNestedValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.nested_value_;
      }
      break;
    }
    case kLegacyJsonValue: {
      _impl_.value_.legacy_json_value_.Destroy();
      break;
    }
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kStringValueIid: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = VALUE_NOT_SET;
}

void DebugAnnotation::clear_proto_type_descriptor() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.DebugAnnotation)
  switch (proto_type_descriptor_case()) {
    case kProtoTypeName: {
      _impl_.proto_type_descriptor_.proto_type_name_.Destroy();
      break;
    }
    case kProtoTypeNameIid: {
      // No need to clear
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = PROTO_TYPE_DESCRIPTOR_NOT_SET;
}


void DebugAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dict_entries()->Clear();
  _internal_mutable_array_values()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.proto_value_.ClearNonDefaultToEmpty();
  }
  clear_name_field();
  clear_value();
  clear_proto_type_descriptor();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 name_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 uint_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotation.string_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 pointer_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _internal_set_pointer_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string legacy_json_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_legacy_json_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotation.legacy_json_value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotation.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dict_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.DebugAnnotation array_values = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 proto_type_name_iid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _internal_set_proto_type_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes proto_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proto_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string proto_type_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_proto_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotation.proto_type_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 string_value_iid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _internal_set_string_value_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DebugAnnotation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 name_iid = 1;
  if (name_field_case() == kNameIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_name_iid(), target);
  }

  switch (value_case()) {
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this->_internal_bool_value(), target);
      break;
    }
    case kUintValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this->_internal_uint_value(), target);
      break;
    }
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          4, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this->_internal_double_value(), target);
      break;
    }
    case kStringValue: {
      const std::string& _s = this->_internal_string_value();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.DebugAnnotation.string_value");
      target = stream->WriteStringMaybeAliased(6, _s, target);
      break;
    }
    case kPointerValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          7, this->_internal_pointer_value(), target);
      break;
    }
    case kNestedValue: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::nested_value(this),
          _Internal::nested_value(this).GetCachedSize(), target, stream);
      break;
    }
    case kLegacyJsonValue: {
      const std::string& _s = this->_internal_legacy_json_value();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.DebugAnnotation.legacy_json_value");
      target = stream->WriteStringMaybeAliased(9, _s, target);
      break;
    }
    default: ;
  }
  // string name = 10;
  if (name_field_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.DebugAnnotation.name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dict_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_dict_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.DebugAnnotation array_values = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 proto_type_name_iid = 13;
  if (proto_type_descriptor_case() == kProtoTypeNameIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        13, this->_internal_proto_type_name_iid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes proto_value = 14;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_proto_value();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  // string proto_type_name = 16;
  if (proto_type_descriptor_case() == kProtoTypeName) {
    const std::string& _s = this->_internal_proto_type_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.DebugAnnotation.proto_type_name");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // uint64 string_value_iid = 17;
  if (value_case() == kStringValueIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_string_value_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotation)
  return target;
}

::size_t DebugAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.DebugAnnotation dict_entries = 11;
  total_size += 1UL * this->_internal_dict_entries_size();
  for (const auto& msg : this->_internal_dict_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.DebugAnnotation array_values = 12;
  total_size += 1UL * this->_internal_array_values_size();
  for (const auto& msg : this->_internal_array_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes proto_value = 14;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proto_value());
  }

  switch (name_field_case()) {
    // uint64 name_iid = 1;
    case kNameIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_name_iid());
      break;
    }
    // string name = 10;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (value_case()) {
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 2;
      break;
    }
    // uint64 uint_value = 3;
    case kUintValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint_value());
      break;
    }
    // int64 int_value = 4;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
      break;
    }
    // double double_value = 5;
    case kDoubleValue: {
      total_size += 9;
      break;
    }
    // uint64 pointer_value = 7;
    case kPointerValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_pointer_value());
      break;
    }
    // .perfetto.protos.DebugAnnotation.NestedValue nested_value = 8;
    case kNestedValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.nested_value_);
      break;
    }
    // string legacy_json_value = 9;
    case kLegacyJsonValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_legacy_json_value());
      break;
    }
    // string string_value = 6;
    case kStringValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string_value());
      break;
    }
    // uint64 string_value_iid = 17;
    case kStringValueIid: {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_string_value_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  switch (proto_type_descriptor_case()) {
    // string proto_type_name = 16;
    case kProtoTypeName: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_proto_type_name());
      break;
    }
    // uint64 proto_type_name_iid = 13;
    case kProtoTypeNameIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_proto_type_name_iid());
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugAnnotation::GetClassData() const { return &_class_data_; }


void DebugAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugAnnotation*>(&to_msg);
  auto& from = static_cast<const DebugAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dict_entries()->MergeFrom(from._internal_dict_entries());
  _this->_internal_mutable_array_values()->MergeFrom(from._internal_array_values());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_proto_value(from._internal_proto_value());
  }
  switch (from.name_field_case()) {
    case kNameIid: {
      _this->_internal_set_name_iid(from._internal_name_iid());
      break;
    }
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case NAME_FIELD_NOT_SET: {
      break;
    }
  }
  switch (from.value_case()) {
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUintValue: {
      _this->_internal_set_uint_value(from._internal_uint_value());
      break;
    }
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kPointerValue: {
      _this->_internal_set_pointer_value(from._internal_pointer_value());
      break;
    }
    case kNestedValue: {
      _this->_internal_mutable_nested_value()->::perfetto::protos::DebugAnnotation_NestedValue::MergeFrom(
          from._internal_nested_value());
      break;
    }
    case kLegacyJsonValue: {
      _this->_internal_set_legacy_json_value(from._internal_legacy_json_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStringValueIid: {
      _this->_internal_set_string_value_iid(from._internal_string_value_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  switch (from.proto_type_descriptor_case()) {
    case kProtoTypeName: {
      _this->_internal_set_proto_type_name(from._internal_proto_type_name());
      break;
    }
    case kProtoTypeNameIid: {
      _this->_internal_set_proto_type_name_iid(from._internal_proto_type_name_iid());
      break;
    }
    case PROTO_TYPE_DESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugAnnotation::CopyFrom(const DebugAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotation::IsInitialized() const {
  return true;
}

void DebugAnnotation::InternalSwap(DebugAnnotation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_dict_entries()->InternalSwap(other->_internal_mutable_dict_entries());
  _internal_mutable_array_values()->InternalSwap(other->_internal_mutable_array_values());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proto_value_, lhs_arena,
                                       &other->_impl_.proto_value_, rhs_arena);
  swap(_impl_.name_field_, other->_impl_.name_field_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_.proto_type_descriptor_, other->_impl_.proto_type_descriptor_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[1]);
}
// ===================================================================

class DebugAnnotationName::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotationName>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DebugAnnotationName, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugAnnotationName::DebugAnnotationName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotationName)
}
DebugAnnotationName::DebugAnnotationName(const DebugAnnotationName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugAnnotationName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotationName)
}

inline void DebugAnnotationName::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugAnnotationName::~DebugAnnotationName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotationName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotationName::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DebugAnnotationName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugAnnotationName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotationName)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugAnnotationName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotationName.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DebugAnnotationName::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotationName)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.DebugAnnotationName.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotationName)
  return target;
}

::size_t DebugAnnotationName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotationName)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugAnnotationName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugAnnotationName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugAnnotationName::GetClassData() const { return &_class_data_; }


void DebugAnnotationName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugAnnotationName*>(&to_msg);
  auto& from = static_cast<const DebugAnnotationName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotationName)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugAnnotationName::CopyFrom(const DebugAnnotationName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotationName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotationName::IsInitialized() const {
  return true;
}

void DebugAnnotationName::InternalSwap(DebugAnnotationName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugAnnotationName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[2]);
}
// ===================================================================

class DebugAnnotationValueTypeName::_Internal {
 public:
  using HasBits = decltype(std::declval<DebugAnnotationValueTypeName>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DebugAnnotationValueTypeName, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DebugAnnotationValueTypeName::DebugAnnotationValueTypeName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DebugAnnotationValueTypeName)
}
DebugAnnotationValueTypeName::DebugAnnotationValueTypeName(const DebugAnnotationValueTypeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugAnnotationValueTypeName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DebugAnnotationValueTypeName)
}

inline void DebugAnnotationValueTypeName::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugAnnotationValueTypeName::~DebugAnnotationValueTypeName() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DebugAnnotationValueTypeName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugAnnotationValueTypeName::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DebugAnnotationValueTypeName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugAnnotationValueTypeName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DebugAnnotationValueTypeName)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugAnnotationValueTypeName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.DebugAnnotationValueTypeName.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DebugAnnotationValueTypeName::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DebugAnnotationValueTypeName)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.DebugAnnotationValueTypeName.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DebugAnnotationValueTypeName)
  return target;
}

::size_t DebugAnnotationValueTypeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DebugAnnotationValueTypeName)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugAnnotationValueTypeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugAnnotationValueTypeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugAnnotationValueTypeName::GetClassData() const { return &_class_data_; }


void DebugAnnotationValueTypeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugAnnotationValueTypeName*>(&to_msg);
  auto& from = static_cast<const DebugAnnotationValueTypeName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DebugAnnotationValueTypeName)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugAnnotationValueTypeName::CopyFrom(const DebugAnnotationValueTypeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DebugAnnotationValueTypeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugAnnotationValueTypeName::IsInitialized() const {
  return true;
}

void DebugAnnotationValueTypeName::InternalSwap(DebugAnnotationValueTypeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugAnnotationValueTypeName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fdebug_5fannotation_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotation_NestedValue*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotation_NestedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotation_NestedValue >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotation*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotationName*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotationName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotationName >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DebugAnnotationValueTypeName*
Arena::CreateMaybeMessage< ::perfetto::protos::DebugAnnotationValueTypeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DebugAnnotationValueTypeName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
