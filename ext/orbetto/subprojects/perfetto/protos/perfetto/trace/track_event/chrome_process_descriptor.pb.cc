// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_process_descriptor.proto

#include "protos/perfetto/trace/track_event/chrome_process_descriptor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ChromeProcessDescriptor::ChromeProcessDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.host_app_package_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.process_type_)*/ 0

  , /*decltype(_impl_.process_priority_)*/ 0

  , /*decltype(_impl_.crash_trace_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.legacy_sort_index_)*/ 0
} {}
struct ChromeProcessDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeProcessDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeProcessDescriptorDefaultTypeInternal() {}
  union {
    ChromeProcessDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeProcessDescriptorDefaultTypeInternal _ChromeProcessDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _impl_.process_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _impl_.process_priority_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _impl_.legacy_sort_index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _impl_.host_app_package_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ChromeProcessDescriptor, _impl_.crash_trace_id_),
    1,
    2,
    4,
    0,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::ChromeProcessDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ChromeProcessDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\nAprotos/perfetto/trace/track_event/chro"
    "me_process_descriptor.proto\022\017perfetto.pr"
    "otos\"\277\013\n\027ChromeProcessDescriptor\022J\n\014proc"
    "ess_type\030\001 \001(\01624.perfetto.protos.ChromeP"
    "rocessDescriptor.ProcessType\022\030\n\020process_"
    "priority\030\002 \001(\005\022\031\n\021legacy_sort_index\030\003 \001("
    "\005\022\035\n\025host_app_package_name\030\004 \001(\t\022\026\n\016cras"
    "h_trace_id\030\005 \001(\004\"\353\t\n\013ProcessType\022\027\n\023PROC"
    "ESS_UNSPECIFIED\020\000\022\023\n\017PROCESS_BROWSER\020\001\022\024"
    "\n\020PROCESS_RENDERER\020\002\022\023\n\017PROCESS_UTILITY\020"
    "\003\022\022\n\016PROCESS_ZYGOTE\020\004\022\032\n\026PROCESS_SANDBOX"
    "_HELPER\020\005\022\017\n\013PROCESS_GPU\020\006\022\030\n\024PROCESS_PP"
    "API_PLUGIN\020\007\022\030\n\024PROCESS_PPAPI_BROKER\020\010\022\033"
    "\n\027PROCESS_SERVICE_NETWORK\020\t\022\033\n\027PROCESS_S"
    "ERVICE_TRACING\020\n\022\033\n\027PROCESS_SERVICE_STOR"
    "AGE\020\013\022\031\n\025PROCESS_SERVICE_AUDIO\020\014\022 \n\034PROC"
    "ESS_SERVICE_DATA_DECODER\020\r\022\034\n\030PROCESS_SE"
    "RVICE_UTIL_WIN\020\016\022\"\n\036PROCESS_SERVICE_PROX"
    "Y_RESOLVER\020\017\022\027\n\023PROCESS_SERVICE_CDM\020\020\022!\n"
    "\035PROCESS_SERVICE_VIDEO_CAPTURE\020\021\022\034\n\030PROC"
    "ESS_SERVICE_UNZIPPER\020\022\022\035\n\031PROCESS_SERVIC"
    "E_MIRRORING\020\023\022\037\n\033PROCESS_SERVICE_FILEPAT"
    "CHER\020\024\022\027\n\023PROCESS_SERVICE_TTS\020\025\022\034\n\030PROCE"
    "SS_SERVICE_PRINTING\020\026\022\036\n\032PROCESS_SERVICE"
    "_QUARANTINE\020\027\022$\n PROCESS_SERVICE_CROS_LO"
    "CALSEARCH\020\030\0220\n,PROCESS_SERVICE_CROS_ASSI"
    "STANT_AUDIO_DECODER\020\031\022\034\n\030PROCESS_SERVICE"
    "_FILEUTIL\020\032\022#\n\037PROCESS_SERVICE_PRINTCOMP"
    "OSITOR\020\033\022 \n\034PROCESS_SERVICE_PAINTPREVIEW"
    "\020\034\022%\n!PROCESS_SERVICE_SPEECHRECOGNITION\020"
    "\035\022\034\n\030PROCESS_SERVICE_XRDEVICE\020\036\022\034\n\030PROCE"
    "SS_SERVICE_READICON\020\037\022%\n!PROCESS_SERVICE"
    "_LANGUAGEDETECTION\020 \022\033\n\027PROCESS_SERVICE_"
    "SHARING\020!\022\037\n\033PROCESS_SERVICE_MEDIAPARSER"
    "\020\"\022#\n\037PROCESS_SERVICE_QRCODEGENERATOR\020#\022"
    "!\n\035PROCESS_SERVICE_PROFILEIMPORT\020$\022\027\n\023PR"
    "OCESS_SERVICE_IME\020%\022\035\n\031PROCESS_SERVICE_R"
    "ECORDING\020&\022\"\n\036PROCESS_SERVICE_SHAPEDETEC"
    "TION\020\'\022\036\n\032PROCESS_RENDERER_EXTENSION\020("
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto = {
    false,
    false,
    1558,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto,
    "protos/perfetto/trace/track_event/chrome_process_descriptor.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeProcessDescriptor_ProcessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto[0];
}
bool ChromeProcessDescriptor_ProcessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_UNSPECIFIED;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_BROWSER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_RENDERER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_UTILITY;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_ZYGOTE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SANDBOX_HELPER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_GPU;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_PPAPI_PLUGIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_PPAPI_BROKER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_NETWORK;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_TRACING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_STORAGE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_AUDIO;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_DATA_DECODER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_UTIL_WIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PROXY_RESOLVER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CDM;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_VIDEO_CAPTURE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_UNZIPPER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MIRRORING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_FILEPATCHER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_TTS;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PRINTING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_QUARANTINE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CROS_LOCALSEARCH;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_CROS_ASSISTANT_AUDIO_DECODER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_FILEUTIL;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PRINTCOMPOSITOR;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PAINTPREVIEW;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SPEECHRECOGNITION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_XRDEVICE;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_READICON;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_LANGUAGEDETECTION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SHARING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_MEDIAPARSER;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_QRCODEGENERATOR;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_PROFILEIMPORT;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_IME;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_RECORDING;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_SERVICE_SHAPEDETECTION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::PROCESS_RENDERER_EXTENSION;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::ProcessType_MIN;
constexpr ChromeProcessDescriptor_ProcessType ChromeProcessDescriptor::ProcessType_MAX;
constexpr int ChromeProcessDescriptor::ProcessType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ChromeProcessDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeProcessDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChromeProcessDescriptor, _impl_._has_bits_);
  static void set_has_process_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_legacy_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_host_app_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeProcessDescriptor::ChromeProcessDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeProcessDescriptor)
}
ChromeProcessDescriptor::ChromeProcessDescriptor(const ChromeProcessDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChromeProcessDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_app_package_name_) {}

    , decltype(_impl_.process_type_) {}

    , decltype(_impl_.process_priority_) {}

    , decltype(_impl_.crash_trace_id_) {}

    , decltype(_impl_.legacy_sort_index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_app_package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_app_package_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.host_app_package_name_.Set(from._internal_host_app_package_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.process_type_, &from._impl_.process_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.legacy_sort_index_) -
    reinterpret_cast<char*>(&_impl_.process_type_)) + sizeof(_impl_.legacy_sort_index_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeProcessDescriptor)
}

inline void ChromeProcessDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.host_app_package_name_) {}

    , decltype(_impl_.process_type_) { 0 }

    , decltype(_impl_.process_priority_) { 0 }

    , decltype(_impl_.crash_trace_id_) { ::uint64_t{0u} }

    , decltype(_impl_.legacy_sort_index_) { 0 }

  };
  _impl_.host_app_package_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_app_package_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChromeProcessDescriptor::~ChromeProcessDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeProcessDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeProcessDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_app_package_name_.Destroy();
}

void ChromeProcessDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChromeProcessDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeProcessDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.host_app_package_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.process_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_sort_index_) -
        reinterpret_cast<char*>(&_impl_.process_type_)) + sizeof(_impl_.legacy_sort_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChromeProcessDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeProcessDescriptor_ProcessType_IsValid(static_cast<int>(val)))) {
            _internal_set_process_type(static_cast<::perfetto::protos::ChromeProcessDescriptor_ProcessType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 process_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_process_priority(&has_bits);
          _impl_.process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 legacy_sort_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_legacy_sort_index(&has_bits);
          _impl_.legacy_sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string host_app_package_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_host_app_package_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ChromeProcessDescriptor.host_app_package_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 crash_trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_crash_trace_id(&has_bits);
          _impl_.crash_trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChromeProcessDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeProcessDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_process_type(), target);
  }

  // optional int32 process_priority = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_process_priority(), target);
  }

  // optional int32 legacy_sort_index = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_legacy_sort_index(), target);
  }

  // optional string host_app_package_name = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_host_app_package_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ChromeProcessDescriptor.host_app_package_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional uint64 crash_trace_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_crash_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeProcessDescriptor)
  return target;
}

::size_t ChromeProcessDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeProcessDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string host_app_package_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_host_app_package_name());
    }

    // optional .perfetto.protos.ChromeProcessDescriptor.ProcessType process_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_process_type());
    }

    // optional int32 process_priority = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_process_priority());
    }

    // optional uint64 crash_trace_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_crash_trace_id());
    }

    // optional int32 legacy_sort_index = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_legacy_sort_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChromeProcessDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChromeProcessDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChromeProcessDescriptor::GetClassData() const { return &_class_data_; }


void ChromeProcessDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChromeProcessDescriptor*>(&to_msg);
  auto& from = static_cast<const ChromeProcessDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeProcessDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_host_app_package_name(from._internal_host_app_package_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.process_type_ = from._impl_.process_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.process_priority_ = from._impl_.process_priority_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.crash_trace_id_ = from._impl_.crash_trace_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_sort_index_ = from._impl_.legacy_sort_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChromeProcessDescriptor::CopyFrom(const ChromeProcessDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeProcessDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeProcessDescriptor::IsInitialized() const {
  return true;
}

void ChromeProcessDescriptor::InternalSwap(ChromeProcessDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_app_package_name_, lhs_arena,
                                       &other->_impl_.host_app_package_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeProcessDescriptor, _impl_.legacy_sort_index_)
      + sizeof(ChromeProcessDescriptor::_impl_.legacy_sort_index_)
      - PROTOBUF_FIELD_OFFSET(ChromeProcessDescriptor, _impl_.process_type_)>(
          reinterpret_cast<char*>(&_impl_.process_type_),
          reinterpret_cast<char*>(&other->_impl_.process_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChromeProcessDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeProcessDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::ChromeProcessDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeProcessDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
