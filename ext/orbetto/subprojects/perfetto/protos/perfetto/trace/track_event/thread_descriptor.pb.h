// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/thread_descriptor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto;
namespace perfetto {
namespace protos {
class ThreadDescriptor;
struct ThreadDescriptorDefaultTypeInternal;
extern ThreadDescriptorDefaultTypeInternal _ThreadDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ThreadDescriptor* Arena::CreateMaybeMessage<::perfetto::protos::ThreadDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ThreadDescriptor_ChromeThreadType : int {
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_UNSPECIFIED = 0,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_MAIN = 1,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_IO = 2,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_BG_WORKER = 3,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_FG_WORKER = 4,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_FB_BLOCKING = 5,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_BG_BLOCKING = 6,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_SERVICE = 7,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_COMPOSITOR = 8,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_VIZ_COMPOSITOR = 9,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_COMPOSITOR_WORKER = 10,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SERVICE_WORKER = 11,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_MEMORY_INFRA = 50,
  ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SAMPLING_PROFILER = 51,
};

bool ThreadDescriptor_ChromeThreadType_IsValid(int value);
constexpr ThreadDescriptor_ChromeThreadType ThreadDescriptor_ChromeThreadType_ChromeThreadType_MIN = static_cast<ThreadDescriptor_ChromeThreadType>(0);
constexpr ThreadDescriptor_ChromeThreadType ThreadDescriptor_ChromeThreadType_ChromeThreadType_MAX = static_cast<ThreadDescriptor_ChromeThreadType>(51);
constexpr int ThreadDescriptor_ChromeThreadType_ChromeThreadType_ARRAYSIZE = 51 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ThreadDescriptor_ChromeThreadType_descriptor();
template <typename T>
const std::string& ThreadDescriptor_ChromeThreadType_Name(T value) {
  static_assert(std::is_same<T, ThreadDescriptor_ChromeThreadType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChromeThreadType_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(ThreadDescriptor_ChromeThreadType_descriptor(), value);
}
inline bool ThreadDescriptor_ChromeThreadType_Parse(absl::string_view name, ThreadDescriptor_ChromeThreadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ThreadDescriptor_ChromeThreadType>(
      ThreadDescriptor_ChromeThreadType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ThreadDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ThreadDescriptor) */ {
 public:
  inline ThreadDescriptor() : ThreadDescriptor(nullptr) {}
  ~ThreadDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ThreadDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadDescriptor(const ThreadDescriptor& from);
  ThreadDescriptor(ThreadDescriptor&& from) noexcept
    : ThreadDescriptor() {
    *this = ::std::move(from);
  }

  inline ThreadDescriptor& operator=(const ThreadDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadDescriptor& operator=(ThreadDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadDescriptor* internal_default_instance() {
    return reinterpret_cast<const ThreadDescriptor*>(
               &_ThreadDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThreadDescriptor& a, ThreadDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThreadDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThreadDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThreadDescriptor& from) {
    ThreadDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ThreadDescriptor";
  }
  protected:
  explicit ThreadDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ChromeThreadType = ThreadDescriptor_ChromeThreadType;
  static constexpr ChromeThreadType CHROME_THREAD_UNSPECIFIED = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_UNSPECIFIED;
  static constexpr ChromeThreadType CHROME_THREAD_MAIN = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_MAIN;
  static constexpr ChromeThreadType CHROME_THREAD_IO = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_IO;
  static constexpr ChromeThreadType CHROME_THREAD_POOL_BG_WORKER = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_BG_WORKER;
  static constexpr ChromeThreadType CHROME_THREAD_POOL_FG_WORKER = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_FG_WORKER;
  static constexpr ChromeThreadType CHROME_THREAD_POOL_FB_BLOCKING = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_FB_BLOCKING;
  static constexpr ChromeThreadType CHROME_THREAD_POOL_BG_BLOCKING = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_BG_BLOCKING;
  static constexpr ChromeThreadType CHROME_THREAD_POOL_SERVICE = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_POOL_SERVICE;
  static constexpr ChromeThreadType CHROME_THREAD_COMPOSITOR = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_COMPOSITOR;
  static constexpr ChromeThreadType CHROME_THREAD_VIZ_COMPOSITOR = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_VIZ_COMPOSITOR;
  static constexpr ChromeThreadType CHROME_THREAD_COMPOSITOR_WORKER = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_COMPOSITOR_WORKER;
  static constexpr ChromeThreadType CHROME_THREAD_SERVICE_WORKER = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SERVICE_WORKER;
  static constexpr ChromeThreadType CHROME_THREAD_MEMORY_INFRA = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_MEMORY_INFRA;
  static constexpr ChromeThreadType CHROME_THREAD_SAMPLING_PROFILER = ThreadDescriptor_ChromeThreadType_CHROME_THREAD_SAMPLING_PROFILER;
  static inline bool ChromeThreadType_IsValid(int value) {
    return ThreadDescriptor_ChromeThreadType_IsValid(value);
  }
  static constexpr ChromeThreadType ChromeThreadType_MIN = ThreadDescriptor_ChromeThreadType_ChromeThreadType_MIN;
  static constexpr ChromeThreadType ChromeThreadType_MAX = ThreadDescriptor_ChromeThreadType_ChromeThreadType_MAX;
  static constexpr int ChromeThreadType_ARRAYSIZE = ThreadDescriptor_ChromeThreadType_ChromeThreadType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChromeThreadType_descriptor() {
    return ThreadDescriptor_ChromeThreadType_descriptor();
  }
  template <typename T>
  static inline const std::string& ChromeThreadType_Name(T value) {
    return ThreadDescriptor_ChromeThreadType_Name(value);
  }
  static inline bool ChromeThreadType_Parse(absl::string_view name, ChromeThreadType* value) {
    return ThreadDescriptor_ChromeThreadType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kThreadNameFieldNumber = 5,
    kPidFieldNumber = 1,
    kTidFieldNumber = 2,
    kLegacySortIndexFieldNumber = 3,
    kChromeThreadTypeFieldNumber = 4,
    kReferenceTimestampUsFieldNumber = 6,
    kReferenceThreadTimeUsFieldNumber = 7,
    kReferenceThreadInstructionCountFieldNumber = 8,
  };
  // optional string thread_name = 5;
  bool has_thread_name() const;
  void clear_thread_name() ;
  const std::string& thread_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_thread_name(Arg_&& arg, Args_... args);
  std::string* mutable_thread_name();
  PROTOBUF_NODISCARD std::string* release_thread_name();
  void set_allocated_thread_name(std::string* ptr);

  private:
  const std::string& _internal_thread_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thread_name(
      const std::string& value);
  std::string* _internal_mutable_thread_name();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 tid = 2;
  bool has_tid() const;
  void clear_tid() ;
  ::int32_t tid() const;
  void set_tid(::int32_t value);

  private:
  ::int32_t _internal_tid() const;
  void _internal_set_tid(::int32_t value);

  public:
  // optional int32 legacy_sort_index = 3;
  bool has_legacy_sort_index() const;
  void clear_legacy_sort_index() ;
  ::int32_t legacy_sort_index() const;
  void set_legacy_sort_index(::int32_t value);

  private:
  ::int32_t _internal_legacy_sort_index() const;
  void _internal_set_legacy_sort_index(::int32_t value);

  public:
  // optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
  bool has_chrome_thread_type() const;
  void clear_chrome_thread_type() ;
  ::perfetto::protos::ThreadDescriptor_ChromeThreadType chrome_thread_type() const;
  void set_chrome_thread_type(::perfetto::protos::ThreadDescriptor_ChromeThreadType value);

  private:
  ::perfetto::protos::ThreadDescriptor_ChromeThreadType _internal_chrome_thread_type() const;
  void _internal_set_chrome_thread_type(::perfetto::protos::ThreadDescriptor_ChromeThreadType value);

  public:
  // optional int64 reference_timestamp_us = 6;
  bool has_reference_timestamp_us() const;
  void clear_reference_timestamp_us() ;
  ::int64_t reference_timestamp_us() const;
  void set_reference_timestamp_us(::int64_t value);

  private:
  ::int64_t _internal_reference_timestamp_us() const;
  void _internal_set_reference_timestamp_us(::int64_t value);

  public:
  // optional int64 reference_thread_time_us = 7;
  bool has_reference_thread_time_us() const;
  void clear_reference_thread_time_us() ;
  ::int64_t reference_thread_time_us() const;
  void set_reference_thread_time_us(::int64_t value);

  private:
  ::int64_t _internal_reference_thread_time_us() const;
  void _internal_set_reference_thread_time_us(::int64_t value);

  public:
  // optional int64 reference_thread_instruction_count = 8;
  bool has_reference_thread_instruction_count() const;
  void clear_reference_thread_instruction_count() ;
  ::int64_t reference_thread_instruction_count() const;
  void set_reference_thread_instruction_count(::int64_t value);

  private:
  ::int64_t _internal_reference_thread_instruction_count() const;
  void _internal_set_reference_thread_instruction_count(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ThreadDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thread_name_;
    ::int32_t pid_;
    ::int32_t tid_;
    ::int32_t legacy_sort_index_;
    int chrome_thread_type_;
    ::int64_t reference_timestamp_us_;
    ::int64_t reference_thread_time_us_;
    ::int64_t reference_thread_instruction_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ThreadDescriptor

// optional int32 pid = 1;
inline bool ThreadDescriptor::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ThreadDescriptor::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.pid)
  return _internal_pid();
}
inline void ThreadDescriptor::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.pid)
}
inline ::int32_t ThreadDescriptor::_internal_pid() const {
  return _impl_.pid_;
}
inline void ThreadDescriptor::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional int32 tid = 2;
inline bool ThreadDescriptor::has_tid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_tid() {
  _impl_.tid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ThreadDescriptor::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.tid)
  return _internal_tid();
}
inline void ThreadDescriptor::set_tid(::int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.tid)
}
inline ::int32_t ThreadDescriptor::_internal_tid() const {
  return _impl_.tid_;
}
inline void ThreadDescriptor::_internal_set_tid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tid_ = value;
}

// optional string thread_name = 5;
inline bool ThreadDescriptor::has_thread_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_thread_name() {
  _impl_.thread_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThreadDescriptor::thread_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.thread_name)
  return _internal_thread_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ThreadDescriptor::set_thread_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.thread_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.thread_name)
}
inline std::string* ThreadDescriptor::mutable_thread_name() {
  std::string* _s = _internal_mutable_thread_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ThreadDescriptor.thread_name)
  return _s;
}
inline const std::string& ThreadDescriptor::_internal_thread_name() const {
  return _impl_.thread_name_.Get();
}
inline void ThreadDescriptor::_internal_set_thread_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.thread_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ThreadDescriptor::_internal_mutable_thread_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.thread_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ThreadDescriptor::release_thread_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ThreadDescriptor.thread_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.thread_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thread_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ThreadDescriptor::set_allocated_thread_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.thread_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.thread_name_.IsDefault()) {
          _impl_.thread_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ThreadDescriptor.thread_name)
}

// optional .perfetto.protos.ThreadDescriptor.ChromeThreadType chrome_thread_type = 4;
inline bool ThreadDescriptor::has_chrome_thread_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_chrome_thread_type() {
  _impl_.chrome_thread_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::ThreadDescriptor_ChromeThreadType ThreadDescriptor::chrome_thread_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.chrome_thread_type)
  return _internal_chrome_thread_type();
}
inline void ThreadDescriptor::set_chrome_thread_type(::perfetto::protos::ThreadDescriptor_ChromeThreadType value) {
   _internal_set_chrome_thread_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.chrome_thread_type)
}
inline ::perfetto::protos::ThreadDescriptor_ChromeThreadType ThreadDescriptor::_internal_chrome_thread_type() const {
  return static_cast<::perfetto::protos::ThreadDescriptor_ChromeThreadType>(_impl_.chrome_thread_type_);
}
inline void ThreadDescriptor::_internal_set_chrome_thread_type(::perfetto::protos::ThreadDescriptor_ChromeThreadType value) {
  assert(::perfetto::protos::ThreadDescriptor_ChromeThreadType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.chrome_thread_type_ = value;
}

// optional int64 reference_timestamp_us = 6;
inline bool ThreadDescriptor::has_reference_timestamp_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_reference_timestamp_us() {
  _impl_.reference_timestamp_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t ThreadDescriptor::reference_timestamp_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.reference_timestamp_us)
  return _internal_reference_timestamp_us();
}
inline void ThreadDescriptor::set_reference_timestamp_us(::int64_t value) {
  _internal_set_reference_timestamp_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.reference_timestamp_us)
}
inline ::int64_t ThreadDescriptor::_internal_reference_timestamp_us() const {
  return _impl_.reference_timestamp_us_;
}
inline void ThreadDescriptor::_internal_set_reference_timestamp_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reference_timestamp_us_ = value;
}

// optional int64 reference_thread_time_us = 7;
inline bool ThreadDescriptor::has_reference_thread_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_reference_thread_time_us() {
  _impl_.reference_thread_time_us_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t ThreadDescriptor::reference_thread_time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.reference_thread_time_us)
  return _internal_reference_thread_time_us();
}
inline void ThreadDescriptor::set_reference_thread_time_us(::int64_t value) {
  _internal_set_reference_thread_time_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.reference_thread_time_us)
}
inline ::int64_t ThreadDescriptor::_internal_reference_thread_time_us() const {
  return _impl_.reference_thread_time_us_;
}
inline void ThreadDescriptor::_internal_set_reference_thread_time_us(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.reference_thread_time_us_ = value;
}

// optional int64 reference_thread_instruction_count = 8;
inline bool ThreadDescriptor::has_reference_thread_instruction_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_reference_thread_instruction_count() {
  _impl_.reference_thread_instruction_count_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t ThreadDescriptor::reference_thread_instruction_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.reference_thread_instruction_count)
  return _internal_reference_thread_instruction_count();
}
inline void ThreadDescriptor::set_reference_thread_instruction_count(::int64_t value) {
  _internal_set_reference_thread_instruction_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.reference_thread_instruction_count)
}
inline ::int64_t ThreadDescriptor::_internal_reference_thread_instruction_count() const {
  return _impl_.reference_thread_instruction_count_;
}
inline void ThreadDescriptor::_internal_set_reference_thread_instruction_count(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.reference_thread_instruction_count_ = value;
}

// optional int32 legacy_sort_index = 3;
inline bool ThreadDescriptor::has_legacy_sort_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ThreadDescriptor::clear_legacy_sort_index() {
  _impl_.legacy_sort_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ThreadDescriptor::legacy_sort_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ThreadDescriptor.legacy_sort_index)
  return _internal_legacy_sort_index();
}
inline void ThreadDescriptor::set_legacy_sort_index(::int32_t value) {
  _internal_set_legacy_sort_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ThreadDescriptor.legacy_sort_index)
}
inline ::int32_t ThreadDescriptor::_internal_legacy_sort_index() const {
  return _impl_.legacy_sort_index_;
}
inline void ThreadDescriptor::_internal_set_legacy_sort_index(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.legacy_sort_index_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ThreadDescriptor_ChromeThreadType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ThreadDescriptor_ChromeThreadType>() {
  return ::perfetto::protos::ThreadDescriptor_ChromeThreadType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto_2epb_2eh
