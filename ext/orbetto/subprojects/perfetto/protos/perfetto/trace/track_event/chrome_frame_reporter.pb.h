// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_frame_reporter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto;
namespace perfetto {
namespace protos {
class ChromeFrameReporter;
struct ChromeFrameReporterDefaultTypeInternal;
extern ChromeFrameReporterDefaultTypeInternal _ChromeFrameReporter_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ChromeFrameReporter* Arena::CreateMaybeMessage<::perfetto::protos::ChromeFrameReporter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ChromeFrameReporter_State : int {
  ChromeFrameReporter_State_STATE_NO_UPDATE_DESIRED = 0,
  ChromeFrameReporter_State_STATE_PRESENTED_ALL = 1,
  ChromeFrameReporter_State_STATE_PRESENTED_PARTIAL = 2,
  ChromeFrameReporter_State_STATE_DROPPED = 3,
};

bool ChromeFrameReporter_State_IsValid(int value);
constexpr ChromeFrameReporter_State ChromeFrameReporter_State_State_MIN = static_cast<ChromeFrameReporter_State>(0);
constexpr ChromeFrameReporter_State ChromeFrameReporter_State_State_MAX = static_cast<ChromeFrameReporter_State>(3);
constexpr int ChromeFrameReporter_State_State_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeFrameReporter_State_descriptor();
template <typename T>
const std::string& ChromeFrameReporter_State_Name(T value) {
  static_assert(std::is_same<T, ChromeFrameReporter_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return ChromeFrameReporter_State_Name(static_cast<ChromeFrameReporter_State>(value));
}
template <>
inline const std::string& ChromeFrameReporter_State_Name(ChromeFrameReporter_State value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeFrameReporter_State_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ChromeFrameReporter_State_Parse(absl::string_view name, ChromeFrameReporter_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeFrameReporter_State>(
      ChromeFrameReporter_State_descriptor(), name, value);
}
enum ChromeFrameReporter_FrameDropReason : int {
  ChromeFrameReporter_FrameDropReason_REASON_UNSPECIFIED = 0,
  ChromeFrameReporter_FrameDropReason_REASON_DISPLAY_COMPOSITOR = 1,
  ChromeFrameReporter_FrameDropReason_REASON_MAIN_THREAD = 2,
  ChromeFrameReporter_FrameDropReason_REASON_CLIENT_COMPOSITOR = 3,
};

bool ChromeFrameReporter_FrameDropReason_IsValid(int value);
constexpr ChromeFrameReporter_FrameDropReason ChromeFrameReporter_FrameDropReason_FrameDropReason_MIN = static_cast<ChromeFrameReporter_FrameDropReason>(0);
constexpr ChromeFrameReporter_FrameDropReason ChromeFrameReporter_FrameDropReason_FrameDropReason_MAX = static_cast<ChromeFrameReporter_FrameDropReason>(3);
constexpr int ChromeFrameReporter_FrameDropReason_FrameDropReason_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeFrameReporter_FrameDropReason_descriptor();
template <typename T>
const std::string& ChromeFrameReporter_FrameDropReason_Name(T value) {
  static_assert(std::is_same<T, ChromeFrameReporter_FrameDropReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FrameDropReason_Name().");
  return ChromeFrameReporter_FrameDropReason_Name(static_cast<ChromeFrameReporter_FrameDropReason>(value));
}
template <>
inline const std::string& ChromeFrameReporter_FrameDropReason_Name(ChromeFrameReporter_FrameDropReason value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeFrameReporter_FrameDropReason_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ChromeFrameReporter_FrameDropReason_Parse(absl::string_view name, ChromeFrameReporter_FrameDropReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeFrameReporter_FrameDropReason>(
      ChromeFrameReporter_FrameDropReason_descriptor(), name, value);
}
enum ChromeFrameReporter_ScrollState : int {
  ChromeFrameReporter_ScrollState_SCROLL_NONE = 0,
  ChromeFrameReporter_ScrollState_SCROLL_MAIN_THREAD = 1,
  ChromeFrameReporter_ScrollState_SCROLL_COMPOSITOR_THREAD = 2,
  ChromeFrameReporter_ScrollState_SCROLL_UNKNOWN = 3,
};

bool ChromeFrameReporter_ScrollState_IsValid(int value);
constexpr ChromeFrameReporter_ScrollState ChromeFrameReporter_ScrollState_ScrollState_MIN = static_cast<ChromeFrameReporter_ScrollState>(0);
constexpr ChromeFrameReporter_ScrollState ChromeFrameReporter_ScrollState_ScrollState_MAX = static_cast<ChromeFrameReporter_ScrollState>(3);
constexpr int ChromeFrameReporter_ScrollState_ScrollState_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeFrameReporter_ScrollState_descriptor();
template <typename T>
const std::string& ChromeFrameReporter_ScrollState_Name(T value) {
  static_assert(std::is_same<T, ChromeFrameReporter_ScrollState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ScrollState_Name().");
  return ChromeFrameReporter_ScrollState_Name(static_cast<ChromeFrameReporter_ScrollState>(value));
}
template <>
inline const std::string& ChromeFrameReporter_ScrollState_Name(ChromeFrameReporter_ScrollState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeFrameReporter_ScrollState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ChromeFrameReporter_ScrollState_Parse(absl::string_view name, ChromeFrameReporter_ScrollState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeFrameReporter_ScrollState>(
      ChromeFrameReporter_ScrollState_descriptor(), name, value);
}
enum ChromeFrameReporter_FrameType : int {
  ChromeFrameReporter_FrameType_FORKED = 0,
  ChromeFrameReporter_FrameType_BACKFILL = 1,
};

bool ChromeFrameReporter_FrameType_IsValid(int value);
constexpr ChromeFrameReporter_FrameType ChromeFrameReporter_FrameType_FrameType_MIN = static_cast<ChromeFrameReporter_FrameType>(0);
constexpr ChromeFrameReporter_FrameType ChromeFrameReporter_FrameType_FrameType_MAX = static_cast<ChromeFrameReporter_FrameType>(1);
constexpr int ChromeFrameReporter_FrameType_FrameType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeFrameReporter_FrameType_descriptor();
template <typename T>
const std::string& ChromeFrameReporter_FrameType_Name(T value) {
  static_assert(std::is_same<T, ChromeFrameReporter_FrameType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FrameType_Name().");
  return ChromeFrameReporter_FrameType_Name(static_cast<ChromeFrameReporter_FrameType>(value));
}
template <>
inline const std::string& ChromeFrameReporter_FrameType_Name(ChromeFrameReporter_FrameType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeFrameReporter_FrameType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ChromeFrameReporter_FrameType_Parse(absl::string_view name, ChromeFrameReporter_FrameType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeFrameReporter_FrameType>(
      ChromeFrameReporter_FrameType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChromeFrameReporter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeFrameReporter) */ {
 public:
  inline ChromeFrameReporter() : ChromeFrameReporter(nullptr) {}
  ~ChromeFrameReporter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeFrameReporter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeFrameReporter(const ChromeFrameReporter& from);
  ChromeFrameReporter(ChromeFrameReporter&& from) noexcept
    : ChromeFrameReporter() {
    *this = ::std::move(from);
  }

  inline ChromeFrameReporter& operator=(const ChromeFrameReporter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeFrameReporter& operator=(ChromeFrameReporter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeFrameReporter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeFrameReporter* internal_default_instance() {
    return reinterpret_cast<const ChromeFrameReporter*>(
               &_ChromeFrameReporter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeFrameReporter& a, ChromeFrameReporter& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeFrameReporter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeFrameReporter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeFrameReporter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeFrameReporter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeFrameReporter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeFrameReporter& from) {
    ChromeFrameReporter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeFrameReporter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeFrameReporter";
  }
  protected:
  explicit ChromeFrameReporter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using State = ChromeFrameReporter_State;
  static constexpr State STATE_NO_UPDATE_DESIRED = ChromeFrameReporter_State_STATE_NO_UPDATE_DESIRED;
  static constexpr State STATE_PRESENTED_ALL = ChromeFrameReporter_State_STATE_PRESENTED_ALL;
  static constexpr State STATE_PRESENTED_PARTIAL = ChromeFrameReporter_State_STATE_PRESENTED_PARTIAL;
  static constexpr State STATE_DROPPED = ChromeFrameReporter_State_STATE_DROPPED;
  static inline bool State_IsValid(int value) {
    return ChromeFrameReporter_State_IsValid(value);
  }
  static constexpr State State_MIN = ChromeFrameReporter_State_State_MIN;
  static constexpr State State_MAX = ChromeFrameReporter_State_State_MAX;
  static constexpr int State_ARRAYSIZE = ChromeFrameReporter_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor() {
    return ChromeFrameReporter_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return ChromeFrameReporter_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return ChromeFrameReporter_State_Parse(name, value);
  }

  using FrameDropReason = ChromeFrameReporter_FrameDropReason;
  static constexpr FrameDropReason REASON_UNSPECIFIED = ChromeFrameReporter_FrameDropReason_REASON_UNSPECIFIED;
  static constexpr FrameDropReason REASON_DISPLAY_COMPOSITOR = ChromeFrameReporter_FrameDropReason_REASON_DISPLAY_COMPOSITOR;
  static constexpr FrameDropReason REASON_MAIN_THREAD = ChromeFrameReporter_FrameDropReason_REASON_MAIN_THREAD;
  static constexpr FrameDropReason REASON_CLIENT_COMPOSITOR = ChromeFrameReporter_FrameDropReason_REASON_CLIENT_COMPOSITOR;
  static inline bool FrameDropReason_IsValid(int value) {
    return ChromeFrameReporter_FrameDropReason_IsValid(value);
  }
  static constexpr FrameDropReason FrameDropReason_MIN = ChromeFrameReporter_FrameDropReason_FrameDropReason_MIN;
  static constexpr FrameDropReason FrameDropReason_MAX = ChromeFrameReporter_FrameDropReason_FrameDropReason_MAX;
  static constexpr int FrameDropReason_ARRAYSIZE = ChromeFrameReporter_FrameDropReason_FrameDropReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameDropReason_descriptor() {
    return ChromeFrameReporter_FrameDropReason_descriptor();
  }
  template <typename T>
  static inline const std::string& FrameDropReason_Name(T value) {
    return ChromeFrameReporter_FrameDropReason_Name(value);
  }
  static inline bool FrameDropReason_Parse(absl::string_view name, FrameDropReason* value) {
    return ChromeFrameReporter_FrameDropReason_Parse(name, value);
  }

  using ScrollState = ChromeFrameReporter_ScrollState;
  static constexpr ScrollState SCROLL_NONE = ChromeFrameReporter_ScrollState_SCROLL_NONE;
  static constexpr ScrollState SCROLL_MAIN_THREAD = ChromeFrameReporter_ScrollState_SCROLL_MAIN_THREAD;
  static constexpr ScrollState SCROLL_COMPOSITOR_THREAD = ChromeFrameReporter_ScrollState_SCROLL_COMPOSITOR_THREAD;
  static constexpr ScrollState SCROLL_UNKNOWN = ChromeFrameReporter_ScrollState_SCROLL_UNKNOWN;
  static inline bool ScrollState_IsValid(int value) {
    return ChromeFrameReporter_ScrollState_IsValid(value);
  }
  static constexpr ScrollState ScrollState_MIN = ChromeFrameReporter_ScrollState_ScrollState_MIN;
  static constexpr ScrollState ScrollState_MAX = ChromeFrameReporter_ScrollState_ScrollState_MAX;
  static constexpr int ScrollState_ARRAYSIZE = ChromeFrameReporter_ScrollState_ScrollState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScrollState_descriptor() {
    return ChromeFrameReporter_ScrollState_descriptor();
  }
  template <typename T>
  static inline const std::string& ScrollState_Name(T value) {
    return ChromeFrameReporter_ScrollState_Name(value);
  }
  static inline bool ScrollState_Parse(absl::string_view name, ScrollState* value) {
    return ChromeFrameReporter_ScrollState_Parse(name, value);
  }

  using FrameType = ChromeFrameReporter_FrameType;
  static constexpr FrameType FORKED = ChromeFrameReporter_FrameType_FORKED;
  static constexpr FrameType BACKFILL = ChromeFrameReporter_FrameType_BACKFILL;
  static inline bool FrameType_IsValid(int value) {
    return ChromeFrameReporter_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN = ChromeFrameReporter_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX = ChromeFrameReporter_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE = ChromeFrameReporter_FrameType_FrameType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FrameType_descriptor() {
    return ChromeFrameReporter_FrameType_descriptor();
  }
  template <typename T>
  static inline const std::string& FrameType_Name(T value) {
    return ChromeFrameReporter_FrameType_Name(value);
  }
  static inline bool FrameType_Parse(absl::string_view name, FrameType* value) {
    return ChromeFrameReporter_FrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHighLatencyContributionStageFieldNumber = 14,
    kStateFieldNumber = 1,
    kReasonFieldNumber = 2,
    kFrameSourceFieldNumber = 3,
    kFrameSequenceFieldNumber = 4,
    kScrollStateFieldNumber = 6,
    kAffectsSmoothnessFieldNumber = 5,
    kHasMainAnimationFieldNumber = 7,
    kHasCompositorAnimationFieldNumber = 8,
    kHasSmoothInputMainFieldNumber = 9,
    kLayerTreeHostIdFieldNumber = 11,
    kHasMissingContentFieldNumber = 10,
    kHasHighLatencyFieldNumber = 12,
    kFrameTypeFieldNumber = 13,
  };
  // repeated string high_latency_contribution_stage = 14;
  int high_latency_contribution_stage_size() const;
  private:
  int _internal_high_latency_contribution_stage_size() const;

  public:
  void clear_high_latency_contribution_stage() ;
  const std::string& high_latency_contribution_stage(int index) const;
  std::string* mutable_high_latency_contribution_stage(int index);
  void set_high_latency_contribution_stage(int index, const std::string& value);
  void set_high_latency_contribution_stage(int index, std::string&& value);
  void set_high_latency_contribution_stage(int index, const char* value);
  void set_high_latency_contribution_stage(int index, const char* value, std::size_t size);
  void set_high_latency_contribution_stage(int index, absl::string_view value);
  std::string* add_high_latency_contribution_stage();
  void add_high_latency_contribution_stage(const std::string& value);
  void add_high_latency_contribution_stage(std::string&& value);
  void add_high_latency_contribution_stage(const char* value);
  void add_high_latency_contribution_stage(const char* value, std::size_t size);
  void add_high_latency_contribution_stage(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& high_latency_contribution_stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_high_latency_contribution_stage();

  private:
  const std::string& _internal_high_latency_contribution_stage(int index) const;
  std::string* _internal_add_high_latency_contribution_stage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_high_latency_contribution_stage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_high_latency_contribution_stage();

  public:
  // optional .perfetto.protos.ChromeFrameReporter.State state = 1;
  bool has_state() const;
  void clear_state() ;
  ::perfetto::protos::ChromeFrameReporter_State state() const;
  void set_state(::perfetto::protos::ChromeFrameReporter_State value);

  private:
  ::perfetto::protos::ChromeFrameReporter_State _internal_state() const;
  void _internal_set_state(::perfetto::protos::ChromeFrameReporter_State value);

  public:
  // optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  ::perfetto::protos::ChromeFrameReporter_FrameDropReason reason() const;
  void set_reason(::perfetto::protos::ChromeFrameReporter_FrameDropReason value);

  private:
  ::perfetto::protos::ChromeFrameReporter_FrameDropReason _internal_reason() const;
  void _internal_set_reason(::perfetto::protos::ChromeFrameReporter_FrameDropReason value);

  public:
  // optional uint64 frame_source = 3;
  bool has_frame_source() const;
  void clear_frame_source() ;
  ::uint64_t frame_source() const;
  void set_frame_source(::uint64_t value);

  private:
  ::uint64_t _internal_frame_source() const;
  void _internal_set_frame_source(::uint64_t value);

  public:
  // optional uint64 frame_sequence = 4;
  bool has_frame_sequence() const;
  void clear_frame_sequence() ;
  ::uint64_t frame_sequence() const;
  void set_frame_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_frame_sequence() const;
  void _internal_set_frame_sequence(::uint64_t value);

  public:
  // optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;
  bool has_scroll_state() const;
  void clear_scroll_state() ;
  ::perfetto::protos::ChromeFrameReporter_ScrollState scroll_state() const;
  void set_scroll_state(::perfetto::protos::ChromeFrameReporter_ScrollState value);

  private:
  ::perfetto::protos::ChromeFrameReporter_ScrollState _internal_scroll_state() const;
  void _internal_set_scroll_state(::perfetto::protos::ChromeFrameReporter_ScrollState value);

  public:
  // optional bool affects_smoothness = 5;
  bool has_affects_smoothness() const;
  void clear_affects_smoothness() ;
  bool affects_smoothness() const;
  void set_affects_smoothness(bool value);

  private:
  bool _internal_affects_smoothness() const;
  void _internal_set_affects_smoothness(bool value);

  public:
  // optional bool has_main_animation = 7;
  bool has_has_main_animation() const;
  void clear_has_main_animation() ;
  bool has_main_animation() const;
  void set_has_main_animation(bool value);

  private:
  bool _internal_has_main_animation() const;
  void _internal_set_has_main_animation(bool value);

  public:
  // optional bool has_compositor_animation = 8;
  bool has_has_compositor_animation() const;
  void clear_has_compositor_animation() ;
  bool has_compositor_animation() const;
  void set_has_compositor_animation(bool value);

  private:
  bool _internal_has_compositor_animation() const;
  void _internal_set_has_compositor_animation(bool value);

  public:
  // optional bool has_smooth_input_main = 9;
  bool has_has_smooth_input_main() const;
  void clear_has_smooth_input_main() ;
  bool has_smooth_input_main() const;
  void set_has_smooth_input_main(bool value);

  private:
  bool _internal_has_smooth_input_main() const;
  void _internal_set_has_smooth_input_main(bool value);

  public:
  // optional uint64 layer_tree_host_id = 11;
  bool has_layer_tree_host_id() const;
  void clear_layer_tree_host_id() ;
  ::uint64_t layer_tree_host_id() const;
  void set_layer_tree_host_id(::uint64_t value);

  private:
  ::uint64_t _internal_layer_tree_host_id() const;
  void _internal_set_layer_tree_host_id(::uint64_t value);

  public:
  // optional bool has_missing_content = 10;
  bool has_has_missing_content() const;
  void clear_has_missing_content() ;
  bool has_missing_content() const;
  void set_has_missing_content(bool value);

  private:
  bool _internal_has_missing_content() const;
  void _internal_set_has_missing_content(bool value);

  public:
  // optional bool has_high_latency = 12;
  bool has_has_high_latency() const;
  void clear_has_high_latency() ;
  bool has_high_latency() const;
  void set_has_high_latency(bool value);

  private:
  bool _internal_has_high_latency() const;
  void _internal_set_has_high_latency(bool value);

  public:
  // optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;
  bool has_frame_type() const;
  void clear_frame_type() ;
  ::perfetto::protos::ChromeFrameReporter_FrameType frame_type() const;
  void set_frame_type(::perfetto::protos::ChromeFrameReporter_FrameType value);

  private:
  ::perfetto::protos::ChromeFrameReporter_FrameType _internal_frame_type() const;
  void _internal_set_frame_type(::perfetto::protos::ChromeFrameReporter_FrameType value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeFrameReporter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> high_latency_contribution_stage_;
    int state_;
    int reason_;
    ::uint64_t frame_source_;
    ::uint64_t frame_sequence_;
    int scroll_state_;
    bool affects_smoothness_;
    bool has_main_animation_;
    bool has_compositor_animation_;
    bool has_smooth_input_main_;
    ::uint64_t layer_tree_host_id_;
    bool has_missing_content_;
    bool has_high_latency_;
    int frame_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChromeFrameReporter

// optional .perfetto.protos.ChromeFrameReporter.State state = 1;
inline bool ChromeFrameReporter::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::perfetto::protos::ChromeFrameReporter_State ChromeFrameReporter::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.state)
  return _internal_state();
}
inline void ChromeFrameReporter::set_state(::perfetto::protos::ChromeFrameReporter_State value) {
   _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.state)
}
inline ::perfetto::protos::ChromeFrameReporter_State ChromeFrameReporter::_internal_state() const {
  return static_cast<::perfetto::protos::ChromeFrameReporter_State>(_impl_.state_);
}
inline void ChromeFrameReporter::_internal_set_state(::perfetto::protos::ChromeFrameReporter_State value) {
  assert(::perfetto::protos::ChromeFrameReporter_State_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_ = value;
}

// optional .perfetto.protos.ChromeFrameReporter.FrameDropReason reason = 2;
inline bool ChromeFrameReporter::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_reason() {
  _impl_.reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeFrameReporter_FrameDropReason ChromeFrameReporter::reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.reason)
  return _internal_reason();
}
inline void ChromeFrameReporter::set_reason(::perfetto::protos::ChromeFrameReporter_FrameDropReason value) {
   _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.reason)
}
inline ::perfetto::protos::ChromeFrameReporter_FrameDropReason ChromeFrameReporter::_internal_reason() const {
  return static_cast<::perfetto::protos::ChromeFrameReporter_FrameDropReason>(_impl_.reason_);
}
inline void ChromeFrameReporter::_internal_set_reason(::perfetto::protos::ChromeFrameReporter_FrameDropReason value) {
  assert(::perfetto::protos::ChromeFrameReporter_FrameDropReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_ = value;
}

// optional uint64 frame_source = 3;
inline bool ChromeFrameReporter::has_frame_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_frame_source() {
  _impl_.frame_source_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ChromeFrameReporter::frame_source() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.frame_source)
  return _internal_frame_source();
}
inline void ChromeFrameReporter::set_frame_source(::uint64_t value) {
  _internal_set_frame_source(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.frame_source)
}
inline ::uint64_t ChromeFrameReporter::_internal_frame_source() const {
  return _impl_.frame_source_;
}
inline void ChromeFrameReporter::_internal_set_frame_source(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.frame_source_ = value;
}

// optional uint64 frame_sequence = 4;
inline bool ChromeFrameReporter::has_frame_sequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_frame_sequence() {
  _impl_.frame_sequence_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t ChromeFrameReporter::frame_sequence() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.frame_sequence)
  return _internal_frame_sequence();
}
inline void ChromeFrameReporter::set_frame_sequence(::uint64_t value) {
  _internal_set_frame_sequence(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.frame_sequence)
}
inline ::uint64_t ChromeFrameReporter::_internal_frame_sequence() const {
  return _impl_.frame_sequence_;
}
inline void ChromeFrameReporter::_internal_set_frame_sequence(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.frame_sequence_ = value;
}

// optional bool affects_smoothness = 5;
inline bool ChromeFrameReporter::has_affects_smoothness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_affects_smoothness() {
  _impl_.affects_smoothness_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ChromeFrameReporter::affects_smoothness() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.affects_smoothness)
  return _internal_affects_smoothness();
}
inline void ChromeFrameReporter::set_affects_smoothness(bool value) {
  _internal_set_affects_smoothness(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.affects_smoothness)
}
inline bool ChromeFrameReporter::_internal_affects_smoothness() const {
  return _impl_.affects_smoothness_;
}
inline void ChromeFrameReporter::_internal_set_affects_smoothness(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.affects_smoothness_ = value;
}

// optional .perfetto.protos.ChromeFrameReporter.ScrollState scroll_state = 6;
inline bool ChromeFrameReporter::has_scroll_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_scroll_state() {
  _impl_.scroll_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::perfetto::protos::ChromeFrameReporter_ScrollState ChromeFrameReporter::scroll_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.scroll_state)
  return _internal_scroll_state();
}
inline void ChromeFrameReporter::set_scroll_state(::perfetto::protos::ChromeFrameReporter_ScrollState value) {
   _internal_set_scroll_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.scroll_state)
}
inline ::perfetto::protos::ChromeFrameReporter_ScrollState ChromeFrameReporter::_internal_scroll_state() const {
  return static_cast<::perfetto::protos::ChromeFrameReporter_ScrollState>(_impl_.scroll_state_);
}
inline void ChromeFrameReporter::_internal_set_scroll_state(::perfetto::protos::ChromeFrameReporter_ScrollState value) {
  assert(::perfetto::protos::ChromeFrameReporter_ScrollState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.scroll_state_ = value;
}

// optional bool has_main_animation = 7;
inline bool ChromeFrameReporter::has_has_main_animation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_has_main_animation() {
  _impl_.has_main_animation_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ChromeFrameReporter::has_main_animation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.has_main_animation)
  return _internal_has_main_animation();
}
inline void ChromeFrameReporter::set_has_main_animation(bool value) {
  _internal_set_has_main_animation(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.has_main_animation)
}
inline bool ChromeFrameReporter::_internal_has_main_animation() const {
  return _impl_.has_main_animation_;
}
inline void ChromeFrameReporter::_internal_set_has_main_animation(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.has_main_animation_ = value;
}

// optional bool has_compositor_animation = 8;
inline bool ChromeFrameReporter::has_has_compositor_animation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_has_compositor_animation() {
  _impl_.has_compositor_animation_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ChromeFrameReporter::has_compositor_animation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.has_compositor_animation)
  return _internal_has_compositor_animation();
}
inline void ChromeFrameReporter::set_has_compositor_animation(bool value) {
  _internal_set_has_compositor_animation(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.has_compositor_animation)
}
inline bool ChromeFrameReporter::_internal_has_compositor_animation() const {
  return _impl_.has_compositor_animation_;
}
inline void ChromeFrameReporter::_internal_set_has_compositor_animation(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.has_compositor_animation_ = value;
}

// optional bool has_smooth_input_main = 9;
inline bool ChromeFrameReporter::has_has_smooth_input_main() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_has_smooth_input_main() {
  _impl_.has_smooth_input_main_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool ChromeFrameReporter::has_smooth_input_main() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.has_smooth_input_main)
  return _internal_has_smooth_input_main();
}
inline void ChromeFrameReporter::set_has_smooth_input_main(bool value) {
  _internal_set_has_smooth_input_main(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.has_smooth_input_main)
}
inline bool ChromeFrameReporter::_internal_has_smooth_input_main() const {
  return _impl_.has_smooth_input_main_;
}
inline void ChromeFrameReporter::_internal_set_has_smooth_input_main(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.has_smooth_input_main_ = value;
}

// optional bool has_missing_content = 10;
inline bool ChromeFrameReporter::has_has_missing_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_has_missing_content() {
  _impl_.has_missing_content_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ChromeFrameReporter::has_missing_content() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.has_missing_content)
  return _internal_has_missing_content();
}
inline void ChromeFrameReporter::set_has_missing_content(bool value) {
  _internal_set_has_missing_content(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.has_missing_content)
}
inline bool ChromeFrameReporter::_internal_has_missing_content() const {
  return _impl_.has_missing_content_;
}
inline void ChromeFrameReporter::_internal_set_has_missing_content(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.has_missing_content_ = value;
}

// optional uint64 layer_tree_host_id = 11;
inline bool ChromeFrameReporter::has_layer_tree_host_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_layer_tree_host_id() {
  _impl_.layer_tree_host_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t ChromeFrameReporter::layer_tree_host_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.layer_tree_host_id)
  return _internal_layer_tree_host_id();
}
inline void ChromeFrameReporter::set_layer_tree_host_id(::uint64_t value) {
  _internal_set_layer_tree_host_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.layer_tree_host_id)
}
inline ::uint64_t ChromeFrameReporter::_internal_layer_tree_host_id() const {
  return _impl_.layer_tree_host_id_;
}
inline void ChromeFrameReporter::_internal_set_layer_tree_host_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.layer_tree_host_id_ = value;
}

// optional bool has_high_latency = 12;
inline bool ChromeFrameReporter::has_has_high_latency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_has_high_latency() {
  _impl_.has_high_latency_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ChromeFrameReporter::has_high_latency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.has_high_latency)
  return _internal_has_high_latency();
}
inline void ChromeFrameReporter::set_has_high_latency(bool value) {
  _internal_set_has_high_latency(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.has_high_latency)
}
inline bool ChromeFrameReporter::_internal_has_high_latency() const {
  return _impl_.has_high_latency_;
}
inline void ChromeFrameReporter::_internal_set_has_high_latency(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.has_high_latency_ = value;
}

// optional .perfetto.protos.ChromeFrameReporter.FrameType frame_type = 13;
inline bool ChromeFrameReporter::has_frame_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ChromeFrameReporter::clear_frame_type() {
  _impl_.frame_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::perfetto::protos::ChromeFrameReporter_FrameType ChromeFrameReporter::frame_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.frame_type)
  return _internal_frame_type();
}
inline void ChromeFrameReporter::set_frame_type(::perfetto::protos::ChromeFrameReporter_FrameType value) {
   _internal_set_frame_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.frame_type)
}
inline ::perfetto::protos::ChromeFrameReporter_FrameType ChromeFrameReporter::_internal_frame_type() const {
  return static_cast<::perfetto::protos::ChromeFrameReporter_FrameType>(_impl_.frame_type_);
}
inline void ChromeFrameReporter::_internal_set_frame_type(::perfetto::protos::ChromeFrameReporter_FrameType value) {
  assert(::perfetto::protos::ChromeFrameReporter_FrameType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.frame_type_ = value;
}

// repeated string high_latency_contribution_stage = 14;
inline int ChromeFrameReporter::_internal_high_latency_contribution_stage_size() const {
  return _impl_.high_latency_contribution_stage_.size();
}
inline int ChromeFrameReporter::high_latency_contribution_stage_size() const {
  return _internal_high_latency_contribution_stage_size();
}
inline void ChromeFrameReporter::clear_high_latency_contribution_stage() {
  _internal_mutable_high_latency_contribution_stage()->Clear();
}
inline std::string* ChromeFrameReporter::add_high_latency_contribution_stage() {
  std::string* _s = _internal_add_high_latency_contribution_stage();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
  return _s;
}
inline const std::string& ChromeFrameReporter::high_latency_contribution_stage(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
  return _internal_high_latency_contribution_stage(index);
}
inline std::string* ChromeFrameReporter::mutable_high_latency_contribution_stage(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
  return _internal_mutable_high_latency_contribution_stage()->Mutable(index);
}
inline void ChromeFrameReporter::set_high_latency_contribution_stage(int index, const std::string& value) {
  _internal_mutable_high_latency_contribution_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::set_high_latency_contribution_stage(int index, std::string&& value) {
  _internal_mutable_high_latency_contribution_stage()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::set_high_latency_contribution_stage(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_high_latency_contribution_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::set_high_latency_contribution_stage(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_high_latency_contribution_stage()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::set_high_latency_contribution_stage(int index, absl::string_view value) {
  _internal_mutable_high_latency_contribution_stage()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::add_high_latency_contribution_stage(const std::string& value) {
  _internal_mutable_high_latency_contribution_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::add_high_latency_contribution_stage(std::string&& value) {
  _internal_mutable_high_latency_contribution_stage()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::add_high_latency_contribution_stage(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_high_latency_contribution_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::add_high_latency_contribution_stage(const char* value, std::size_t size) {
  _internal_mutable_high_latency_contribution_stage()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline void ChromeFrameReporter::add_high_latency_contribution_stage(absl::string_view value) {
  _internal_mutable_high_latency_contribution_stage()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeFrameReporter::high_latency_contribution_stage() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
  return _internal_high_latency_contribution_stage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ChromeFrameReporter::mutable_high_latency_contribution_stage() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeFrameReporter.high_latency_contribution_stage)
  return _internal_mutable_high_latency_contribution_stage();
}
inline const std::string& ChromeFrameReporter::_internal_high_latency_contribution_stage(int index) const {
  return _internal_high_latency_contribution_stage().Get(index);
}
inline std::string* ChromeFrameReporter::_internal_add_high_latency_contribution_stage() {
  return _internal_mutable_high_latency_contribution_stage()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeFrameReporter::_internal_high_latency_contribution_stage() const {
  return _impl_.high_latency_contribution_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeFrameReporter::_internal_mutable_high_latency_contribution_stage() {
  return &_impl_.high_latency_contribution_stage_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ChromeFrameReporter_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeFrameReporter_State>() {
  return ::perfetto::protos::ChromeFrameReporter_State_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeFrameReporter_FrameDropReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeFrameReporter_FrameDropReason>() {
  return ::perfetto::protos::ChromeFrameReporter_FrameDropReason_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeFrameReporter_ScrollState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeFrameReporter_ScrollState>() {
  return ::perfetto::protos::ChromeFrameReporter_ScrollState_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeFrameReporter_FrameType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeFrameReporter_FrameType>() {
  return ::perfetto::protos::ChromeFrameReporter_FrameType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fframe_5freporter_2eproto_2epb_2eh
