// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_latency_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
namespace perfetto {
namespace protos {
class ChromeLatencyInfo;
struct ChromeLatencyInfoDefaultTypeInternal;
extern ChromeLatencyInfoDefaultTypeInternal _ChromeLatencyInfo_default_instance_;
class ChromeLatencyInfo_ComponentInfo;
struct ChromeLatencyInfo_ComponentInfoDefaultTypeInternal;
extern ChromeLatencyInfo_ComponentInfoDefaultTypeInternal _ChromeLatencyInfo_ComponentInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ChromeLatencyInfo* Arena::CreateMaybeMessage<::perfetto::protos::ChromeLatencyInfo>(Arena*);
template <>
::perfetto::protos::ChromeLatencyInfo_ComponentInfo* Arena::CreateMaybeMessage<::perfetto::protos::ChromeLatencyInfo_ComponentInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum ChromeLatencyInfo_Step : int {
  ChromeLatencyInfo_Step_STEP_UNSPECIFIED = 0,
  ChromeLatencyInfo_Step_STEP_SEND_INPUT_EVENT_UI = 3,
  ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_IMPL = 5,
  ChromeLatencyInfo_Step_STEP_DID_HANDLE_INPUT_AND_OVERSCROLL = 8,
  ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN = 4,
  ChromeLatencyInfo_Step_STEP_MAIN_THREAD_SCROLL_UPDATE = 2,
  ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT = 1,
  ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL = 9,
  ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_IMPL = 10,
  ChromeLatencyInfo_Step_STEP_SWAP_BUFFERS = 6,
  ChromeLatencyInfo_Step_STEP_DRAW_AND_SWAP = 7,
  ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS = 11,
};

bool ChromeLatencyInfo_Step_IsValid(int value);
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo_Step_Step_MIN = static_cast<ChromeLatencyInfo_Step>(0);
constexpr ChromeLatencyInfo_Step ChromeLatencyInfo_Step_Step_MAX = static_cast<ChromeLatencyInfo_Step>(11);
constexpr int ChromeLatencyInfo_Step_Step_ARRAYSIZE = 11 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeLatencyInfo_Step_descriptor();
template <typename T>
const std::string& ChromeLatencyInfo_Step_Name(T value) {
  static_assert(std::is_same<T, ChromeLatencyInfo_Step>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Step_Name().");
  return ChromeLatencyInfo_Step_Name(static_cast<ChromeLatencyInfo_Step>(value));
}
template <>
inline const std::string& ChromeLatencyInfo_Step_Name(ChromeLatencyInfo_Step value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeLatencyInfo_Step_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool ChromeLatencyInfo_Step_Parse(absl::string_view name, ChromeLatencyInfo_Step* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeLatencyInfo_Step>(
      ChromeLatencyInfo_Step_descriptor(), name, value);
}
enum ChromeLatencyInfo_LatencyComponentType : int {
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED = 0,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH = 1,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL = 2,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL = 3,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL = 4,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_UI = 5,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN = 6,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN = 7,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL = 8,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT = 9,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH = 10,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP = 11,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME = 12,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER = 13,
  ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP = 14,
};

bool ChromeLatencyInfo_LatencyComponentType_IsValid(int value);
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MIN = static_cast<ChromeLatencyInfo_LatencyComponentType>(0);
constexpr ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MAX = static_cast<ChromeLatencyInfo_LatencyComponentType>(14);
constexpr int ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_ARRAYSIZE = 14 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ChromeLatencyInfo_LatencyComponentType_descriptor();
template <typename T>
const std::string& ChromeLatencyInfo_LatencyComponentType_Name(T value) {
  static_assert(std::is_same<T, ChromeLatencyInfo_LatencyComponentType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LatencyComponentType_Name().");
  return ChromeLatencyInfo_LatencyComponentType_Name(static_cast<ChromeLatencyInfo_LatencyComponentType>(value));
}
template <>
inline const std::string& ChromeLatencyInfo_LatencyComponentType_Name(ChromeLatencyInfo_LatencyComponentType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ChromeLatencyInfo_LatencyComponentType_descriptor,
                                                 0, 14>(
      static_cast<int>(value));
}
inline bool ChromeLatencyInfo_LatencyComponentType_Parse(absl::string_view name, ChromeLatencyInfo_LatencyComponentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChromeLatencyInfo_LatencyComponentType>(
      ChromeLatencyInfo_LatencyComponentType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ChromeLatencyInfo_ComponentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeLatencyInfo.ComponentInfo) */ {
 public:
  inline ChromeLatencyInfo_ComponentInfo() : ChromeLatencyInfo_ComponentInfo(nullptr) {}
  ~ChromeLatencyInfo_ComponentInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeLatencyInfo_ComponentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeLatencyInfo_ComponentInfo(const ChromeLatencyInfo_ComponentInfo& from);
  ChromeLatencyInfo_ComponentInfo(ChromeLatencyInfo_ComponentInfo&& from) noexcept
    : ChromeLatencyInfo_ComponentInfo() {
    *this = ::std::move(from);
  }

  inline ChromeLatencyInfo_ComponentInfo& operator=(const ChromeLatencyInfo_ComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeLatencyInfo_ComponentInfo& operator=(ChromeLatencyInfo_ComponentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeLatencyInfo_ComponentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeLatencyInfo_ComponentInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeLatencyInfo_ComponentInfo*>(
               &_ChromeLatencyInfo_ComponentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeLatencyInfo_ComponentInfo& a, ChromeLatencyInfo_ComponentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeLatencyInfo_ComponentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeLatencyInfo_ComponentInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeLatencyInfo_ComponentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeLatencyInfo_ComponentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeLatencyInfo_ComponentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeLatencyInfo_ComponentInfo& from) {
    ChromeLatencyInfo_ComponentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeLatencyInfo_ComponentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeLatencyInfo.ComponentInfo";
  }
  protected:
  explicit ChromeLatencyInfo_ComponentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUsFieldNumber = 2,
    kComponentTypeFieldNumber = 1,
  };
  // optional uint64 time_us = 2;
  bool has_time_us() const;
  void clear_time_us() ;
  ::uint64_t time_us() const;
  void set_time_us(::uint64_t value);

  private:
  ::uint64_t _internal_time_us() const;
  void _internal_set_time_us(::uint64_t value);

  public:
  // optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
  bool has_component_type() const;
  void clear_component_type() ;
  ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType component_type() const;
  void set_component_type(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType value);

  private:
  ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType _internal_component_type() const;
  void _internal_set_component_type(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeLatencyInfo.ComponentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t time_us_;
    int component_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
};// -------------------------------------------------------------------

class ChromeLatencyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeLatencyInfo) */ {
 public:
  inline ChromeLatencyInfo() : ChromeLatencyInfo(nullptr) {}
  ~ChromeLatencyInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChromeLatencyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeLatencyInfo(const ChromeLatencyInfo& from);
  ChromeLatencyInfo(ChromeLatencyInfo&& from) noexcept
    : ChromeLatencyInfo() {
    *this = ::std::move(from);
  }

  inline ChromeLatencyInfo& operator=(const ChromeLatencyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeLatencyInfo& operator=(ChromeLatencyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChromeLatencyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeLatencyInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeLatencyInfo*>(
               &_ChromeLatencyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeLatencyInfo& a, ChromeLatencyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeLatencyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeLatencyInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeLatencyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeLatencyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChromeLatencyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChromeLatencyInfo& from) {
    ChromeLatencyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChromeLatencyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ChromeLatencyInfo";
  }
  protected:
  explicit ChromeLatencyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChromeLatencyInfo_ComponentInfo ComponentInfo;

  using Step = ChromeLatencyInfo_Step;
  static constexpr Step STEP_UNSPECIFIED = ChromeLatencyInfo_Step_STEP_UNSPECIFIED;
  static constexpr Step STEP_SEND_INPUT_EVENT_UI = ChromeLatencyInfo_Step_STEP_SEND_INPUT_EVENT_UI;
  static constexpr Step STEP_HANDLE_INPUT_EVENT_IMPL = ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_IMPL;
  static constexpr Step STEP_DID_HANDLE_INPUT_AND_OVERSCROLL = ChromeLatencyInfo_Step_STEP_DID_HANDLE_INPUT_AND_OVERSCROLL;
  static constexpr Step STEP_HANDLE_INPUT_EVENT_MAIN = ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN;
  static constexpr Step STEP_MAIN_THREAD_SCROLL_UPDATE = ChromeLatencyInfo_Step_STEP_MAIN_THREAD_SCROLL_UPDATE;
  static constexpr Step STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT = ChromeLatencyInfo_Step_STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT;
  static constexpr Step STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL = ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL;
  static constexpr Step STEP_HANDLED_INPUT_EVENT_IMPL = ChromeLatencyInfo_Step_STEP_HANDLED_INPUT_EVENT_IMPL;
  static constexpr Step STEP_SWAP_BUFFERS = ChromeLatencyInfo_Step_STEP_SWAP_BUFFERS;
  static constexpr Step STEP_DRAW_AND_SWAP = ChromeLatencyInfo_Step_STEP_DRAW_AND_SWAP;
  static constexpr Step STEP_FINISHED_SWAP_BUFFERS = ChromeLatencyInfo_Step_STEP_FINISHED_SWAP_BUFFERS;
  static inline bool Step_IsValid(int value) {
    return ChromeLatencyInfo_Step_IsValid(value);
  }
  static constexpr Step Step_MIN = ChromeLatencyInfo_Step_Step_MIN;
  static constexpr Step Step_MAX = ChromeLatencyInfo_Step_Step_MAX;
  static constexpr int Step_ARRAYSIZE = ChromeLatencyInfo_Step_Step_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Step_descriptor() {
    return ChromeLatencyInfo_Step_descriptor();
  }
  template <typename T>
  static inline const std::string& Step_Name(T value) {
    return ChromeLatencyInfo_Step_Name(value);
  }
  static inline bool Step_Parse(absl::string_view name, Step* value) {
    return ChromeLatencyInfo_Step_Parse(name, value);
  }

  using LatencyComponentType = ChromeLatencyInfo_LatencyComponentType;
  static constexpr LatencyComponentType COMPONENT_UNSPECIFIED = ChromeLatencyInfo_LatencyComponentType_COMPONENT_UNSPECIFIED;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_UI = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_UI;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP;
  static constexpr LatencyComponentType COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME = ChromeLatencyInfo_LatencyComponentType_COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER;
  static constexpr LatencyComponentType COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP = ChromeLatencyInfo_LatencyComponentType_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP;
  static inline bool LatencyComponentType_IsValid(int value) {
    return ChromeLatencyInfo_LatencyComponentType_IsValid(value);
  }
  static constexpr LatencyComponentType LatencyComponentType_MIN = ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MIN;
  static constexpr LatencyComponentType LatencyComponentType_MAX = ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_MAX;
  static constexpr int LatencyComponentType_ARRAYSIZE = ChromeLatencyInfo_LatencyComponentType_LatencyComponentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LatencyComponentType_descriptor() {
    return ChromeLatencyInfo_LatencyComponentType_descriptor();
  }
  template <typename T>
  static inline const std::string& LatencyComponentType_Name(T value) {
    return ChromeLatencyInfo_LatencyComponentType_Name(value);
  }
  static inline bool LatencyComponentType_Parse(absl::string_view name, LatencyComponentType* value) {
    return ChromeLatencyInfo_LatencyComponentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentInfoFieldNumber = 4,
    kTraceIdFieldNumber = 1,
    kStepFieldNumber = 2,
    kFrameTreeNodeIdFieldNumber = 3,
    kGestureScrollIdFieldNumber = 6,
    kTouchIdFieldNumber = 7,
    kIsCoalescedFieldNumber = 5,
  };
  // repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
  int component_info_size() const;
  private:
  int _internal_component_info_size() const;

  public:
  void clear_component_info() ;
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* mutable_component_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >*
      mutable_component_info();
  private:
  const ::perfetto::protos::ChromeLatencyInfo_ComponentInfo& _internal_component_info(int index) const;
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* _internal_add_component_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLatencyInfo_ComponentInfo>& _internal_component_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLatencyInfo_ComponentInfo>* _internal_mutable_component_info();
  public:
  const ::perfetto::protos::ChromeLatencyInfo_ComponentInfo& component_info(int index) const;
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* add_component_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >&
      component_info() const;
  // optional int64 trace_id = 1;
  bool has_trace_id() const;
  void clear_trace_id() ;
  ::int64_t trace_id() const;
  void set_trace_id(::int64_t value);

  private:
  ::int64_t _internal_trace_id() const;
  void _internal_set_trace_id(::int64_t value);

  public:
  // optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
  bool has_step() const;
  void clear_step() ;
  ::perfetto::protos::ChromeLatencyInfo_Step step() const;
  void set_step(::perfetto::protos::ChromeLatencyInfo_Step value);

  private:
  ::perfetto::protos::ChromeLatencyInfo_Step _internal_step() const;
  void _internal_set_step(::perfetto::protos::ChromeLatencyInfo_Step value);

  public:
  // optional int32 frame_tree_node_id = 3;
  bool has_frame_tree_node_id() const;
  void clear_frame_tree_node_id() ;
  ::int32_t frame_tree_node_id() const;
  void set_frame_tree_node_id(::int32_t value);

  private:
  ::int32_t _internal_frame_tree_node_id() const;
  void _internal_set_frame_tree_node_id(::int32_t value);

  public:
  // optional int64 gesture_scroll_id = 6;
  bool has_gesture_scroll_id() const;
  void clear_gesture_scroll_id() ;
  ::int64_t gesture_scroll_id() const;
  void set_gesture_scroll_id(::int64_t value);

  private:
  ::int64_t _internal_gesture_scroll_id() const;
  void _internal_set_gesture_scroll_id(::int64_t value);

  public:
  // optional int64 touch_id = 7;
  bool has_touch_id() const;
  void clear_touch_id() ;
  ::int64_t touch_id() const;
  void set_touch_id(::int64_t value);

  private:
  ::int64_t _internal_touch_id() const;
  void _internal_set_touch_id(::int64_t value);

  public:
  // optional bool is_coalesced = 5;
  bool has_is_coalesced() const;
  void clear_is_coalesced() ;
  bool is_coalesced() const;
  void set_is_coalesced(bool value);

  private:
  bool _internal_is_coalesced() const;
  void _internal_set_is_coalesced(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeLatencyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo > component_info_;
    ::int64_t trace_id_;
    int step_;
    ::int32_t frame_tree_node_id_;
    ::int64_t gesture_scroll_id_;
    ::int64_t touch_id_;
    bool is_coalesced_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ChromeLatencyInfo_ComponentInfo

// optional .perfetto.protos.ChromeLatencyInfo.LatencyComponentType component_type = 1;
inline bool ChromeLatencyInfo_ComponentInfo::has_component_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeLatencyInfo_ComponentInfo::clear_component_type() {
  _impl_.component_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_ComponentInfo::component_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.ComponentInfo.component_type)
  return _internal_component_type();
}
inline void ChromeLatencyInfo_ComponentInfo::set_component_type(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType value) {
   _internal_set_component_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.ComponentInfo.component_type)
}
inline ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType ChromeLatencyInfo_ComponentInfo::_internal_component_type() const {
  return static_cast<::perfetto::protos::ChromeLatencyInfo_LatencyComponentType>(_impl_.component_type_);
}
inline void ChromeLatencyInfo_ComponentInfo::_internal_set_component_type(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType value) {
  assert(::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.component_type_ = value;
}

// optional uint64 time_us = 2;
inline bool ChromeLatencyInfo_ComponentInfo::has_time_us() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeLatencyInfo_ComponentInfo::clear_time_us() {
  _impl_.time_us_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ChromeLatencyInfo_ComponentInfo::time_us() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.ComponentInfo.time_us)
  return _internal_time_us();
}
inline void ChromeLatencyInfo_ComponentInfo::set_time_us(::uint64_t value) {
  _internal_set_time_us(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.ComponentInfo.time_us)
}
inline ::uint64_t ChromeLatencyInfo_ComponentInfo::_internal_time_us() const {
  return _impl_.time_us_;
}
inline void ChromeLatencyInfo_ComponentInfo::_internal_set_time_us(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_us_ = value;
}

// -------------------------------------------------------------------

// ChromeLatencyInfo

// optional int64 trace_id = 1;
inline bool ChromeLatencyInfo::has_trace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChromeLatencyInfo::clear_trace_id() {
  _impl_.trace_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ChromeLatencyInfo::trace_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.trace_id)
  return _internal_trace_id();
}
inline void ChromeLatencyInfo::set_trace_id(::int64_t value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.trace_id)
}
inline ::int64_t ChromeLatencyInfo::_internal_trace_id() const {
  return _impl_.trace_id_;
}
inline void ChromeLatencyInfo::_internal_set_trace_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trace_id_ = value;
}

// optional .perfetto.protos.ChromeLatencyInfo.Step step = 2;
inline bool ChromeLatencyInfo::has_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ChromeLatencyInfo::clear_step() {
  _impl_.step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::ChromeLatencyInfo_Step ChromeLatencyInfo::step() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.step)
  return _internal_step();
}
inline void ChromeLatencyInfo::set_step(::perfetto::protos::ChromeLatencyInfo_Step value) {
   _internal_set_step(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.step)
}
inline ::perfetto::protos::ChromeLatencyInfo_Step ChromeLatencyInfo::_internal_step() const {
  return static_cast<::perfetto::protos::ChromeLatencyInfo_Step>(_impl_.step_);
}
inline void ChromeLatencyInfo::_internal_set_step(::perfetto::protos::ChromeLatencyInfo_Step value) {
  assert(::perfetto::protos::ChromeLatencyInfo_Step_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.step_ = value;
}

// optional int32 frame_tree_node_id = 3;
inline bool ChromeLatencyInfo::has_frame_tree_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ChromeLatencyInfo::clear_frame_tree_node_id() {
  _impl_.frame_tree_node_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ChromeLatencyInfo::frame_tree_node_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.frame_tree_node_id)
  return _internal_frame_tree_node_id();
}
inline void ChromeLatencyInfo::set_frame_tree_node_id(::int32_t value) {
  _internal_set_frame_tree_node_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.frame_tree_node_id)
}
inline ::int32_t ChromeLatencyInfo::_internal_frame_tree_node_id() const {
  return _impl_.frame_tree_node_id_;
}
inline void ChromeLatencyInfo::_internal_set_frame_tree_node_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.frame_tree_node_id_ = value;
}

// repeated .perfetto.protos.ChromeLatencyInfo.ComponentInfo component_info = 4;
inline int ChromeLatencyInfo::_internal_component_info_size() const {
  return _impl_.component_info_.size();
}
inline int ChromeLatencyInfo::component_info_size() const {
  return _internal_component_info_size();
}
inline void ChromeLatencyInfo::clear_component_info() {
  _internal_mutable_component_info()->Clear();
}
inline ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* ChromeLatencyInfo::mutable_component_info(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeLatencyInfo.component_info)
  return _internal_mutable_component_info()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >*
ChromeLatencyInfo::mutable_component_info() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ChromeLatencyInfo.component_info)
  return _internal_mutable_component_info();
}
inline const ::perfetto::protos::ChromeLatencyInfo_ComponentInfo& ChromeLatencyInfo::_internal_component_info(int index) const {
  return _internal_component_info().Get(index);
}
inline const ::perfetto::protos::ChromeLatencyInfo_ComponentInfo& ChromeLatencyInfo::component_info(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.component_info)
  return _internal_component_info(index);
}
inline ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* ChromeLatencyInfo::_internal_add_component_info() {
  return _internal_mutable_component_info()->Add();
}
inline ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* ChromeLatencyInfo::add_component_info() {
  ::perfetto::protos::ChromeLatencyInfo_ComponentInfo* _add = _internal_add_component_info();
  // @@protoc_insertion_point(field_add:perfetto.protos.ChromeLatencyInfo.component_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ChromeLatencyInfo_ComponentInfo >&
ChromeLatencyInfo::component_info() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ChromeLatencyInfo.component_info)
  return _internal_component_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLatencyInfo_ComponentInfo>&
ChromeLatencyInfo::_internal_component_info() const {
  return _impl_.component_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ChromeLatencyInfo_ComponentInfo>*
ChromeLatencyInfo::_internal_mutable_component_info() {
  return &_impl_.component_info_;
}

// optional bool is_coalesced = 5;
inline bool ChromeLatencyInfo::has_is_coalesced() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ChromeLatencyInfo::clear_is_coalesced() {
  _impl_.is_coalesced_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ChromeLatencyInfo::is_coalesced() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.is_coalesced)
  return _internal_is_coalesced();
}
inline void ChromeLatencyInfo::set_is_coalesced(bool value) {
  _internal_set_is_coalesced(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.is_coalesced)
}
inline bool ChromeLatencyInfo::_internal_is_coalesced() const {
  return _impl_.is_coalesced_;
}
inline void ChromeLatencyInfo::_internal_set_is_coalesced(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_coalesced_ = value;
}

// optional int64 gesture_scroll_id = 6;
inline bool ChromeLatencyInfo::has_gesture_scroll_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChromeLatencyInfo::clear_gesture_scroll_id() {
  _impl_.gesture_scroll_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t ChromeLatencyInfo::gesture_scroll_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.gesture_scroll_id)
  return _internal_gesture_scroll_id();
}
inline void ChromeLatencyInfo::set_gesture_scroll_id(::int64_t value) {
  _internal_set_gesture_scroll_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.gesture_scroll_id)
}
inline ::int64_t ChromeLatencyInfo::_internal_gesture_scroll_id() const {
  return _impl_.gesture_scroll_id_;
}
inline void ChromeLatencyInfo::_internal_set_gesture_scroll_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gesture_scroll_id_ = value;
}

// optional int64 touch_id = 7;
inline bool ChromeLatencyInfo::has_touch_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ChromeLatencyInfo::clear_touch_id() {
  _impl_.touch_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t ChromeLatencyInfo::touch_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeLatencyInfo.touch_id)
  return _internal_touch_id();
}
inline void ChromeLatencyInfo::set_touch_id(::int64_t value) {
  _internal_set_touch_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeLatencyInfo.touch_id)
}
inline ::int64_t ChromeLatencyInfo::_internal_touch_id() const {
  return _impl_.touch_id_;
}
inline void ChromeLatencyInfo::_internal_set_touch_id(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.touch_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::ChromeLatencyInfo_Step> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeLatencyInfo_Step>() {
  return ::perfetto::protos::ChromeLatencyInfo_Step_descriptor();
}
template <>
struct is_proto_enum<::perfetto::protos::ChromeLatencyInfo_LatencyComponentType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::ChromeLatencyInfo_LatencyComponentType>() {
  return ::perfetto::protos::ChromeLatencyInfo_LatencyComponentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5flatency_5finfo_2eproto_2epb_2eh
