// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/track_descriptor.proto

#include "protos/perfetto/trace/track_event/track_descriptor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TrackDescriptor::TrackDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.process_)*/nullptr
  , /*decltype(_impl_.thread_)*/nullptr
  , /*decltype(_impl_.chrome_process_)*/nullptr
  , /*decltype(_impl_.chrome_thread_)*/nullptr
  , /*decltype(_impl_.counter_)*/nullptr
  , /*decltype(_impl_.uuid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.parent_uuid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.disallow_merging_with_system_tracks_)*/ false
} {}
struct TrackDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackDescriptorDefaultTypeInternal() {}
  union {
    TrackDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackDescriptorDefaultTypeInternal _TrackDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.uuid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.parent_uuid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.process_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.chrome_process_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.thread_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.chrome_thread_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.counter_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrackDescriptor, _impl_.disallow_merging_with_system_tracks_),
    6,
    7,
    0,
    1,
    3,
    2,
    4,
    5,
    8,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::perfetto::protos::TrackDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TrackDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n8protos/perfetto/trace/track_event/trac"
    "k_descriptor.proto\022\017perfetto.protos\032Apro"
    "tos/perfetto/trace/track_event/chrome_pr"
    "ocess_descriptor.proto\032@protos/perfetto/"
    "trace/track_event/chrome_thread_descript"
    "or.proto\032:protos/perfetto/trace/track_ev"
    "ent/process_descriptor.proto\0329protos/per"
    "fetto/trace/track_event/thread_descripto"
    "r.proto\032:protos/perfetto/trace/track_eve"
    "nt/counter_descriptor.proto\"\216\003\n\017TrackDes"
    "criptor\022\014\n\004uuid\030\001 \001(\004\022\023\n\013parent_uuid\030\005 \001"
    "(\004\022\014\n\004name\030\002 \001(\t\0223\n\007process\030\003 \001(\0132\".perf"
    "etto.protos.ProcessDescriptor\022@\n\016chrome_"
    "process\030\006 \001(\0132(.perfetto.protos.ChromePr"
    "ocessDescriptor\0221\n\006thread\030\004 \001(\0132!.perfet"
    "to.protos.ThreadDescriptor\022>\n\rchrome_thr"
    "ead\030\007 \001(\0132\'.perfetto.protos.ChromeThread"
    "Descriptor\0223\n\007counter\030\010 \001(\0132\".perfetto.p"
    "rotos.CounterDescriptor\022+\n#disallow_merg"
    "ing_with_system_tracks\030\t \001(\010"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_deps[5] =
    {
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fprocess_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fthread_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fprocess_5fdescriptor_2eproto,
        &::descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fthread_5fdescriptor_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto = {
    false,
    false,
    788,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto,
    "protos/perfetto/trace/track_event/track_descriptor.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_deps,
    5,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class TrackDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrackDescriptor, _impl_._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_parent_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::ProcessDescriptor& process(const TrackDescriptor* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::perfetto::protos::ChromeProcessDescriptor& chrome_process(const TrackDescriptor* msg);
  static void set_has_chrome_process(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ThreadDescriptor& thread(const TrackDescriptor* msg);
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::ChromeThreadDescriptor& chrome_thread(const TrackDescriptor* msg);
  static void set_has_chrome_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::perfetto::protos::CounterDescriptor& counter(const TrackDescriptor* msg);
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disallow_merging_with_system_tracks(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::perfetto::protos::ProcessDescriptor&
TrackDescriptor::_Internal::process(const TrackDescriptor* msg) {
  return *msg->_impl_.process_;
}
const ::perfetto::protos::ChromeProcessDescriptor&
TrackDescriptor::_Internal::chrome_process(const TrackDescriptor* msg) {
  return *msg->_impl_.chrome_process_;
}
const ::perfetto::protos::ThreadDescriptor&
TrackDescriptor::_Internal::thread(const TrackDescriptor* msg) {
  return *msg->_impl_.thread_;
}
const ::perfetto::protos::ChromeThreadDescriptor&
TrackDescriptor::_Internal::chrome_thread(const TrackDescriptor* msg) {
  return *msg->_impl_.chrome_thread_;
}
const ::perfetto::protos::CounterDescriptor&
TrackDescriptor::_Internal::counter(const TrackDescriptor* msg) {
  return *msg->_impl_.counter_;
}
void TrackDescriptor::clear_process() {
  if (_impl_.process_ != nullptr) _impl_.process_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrackDescriptor::clear_chrome_process() {
  if (_impl_.chrome_process_ != nullptr) _impl_.chrome_process_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TrackDescriptor::clear_thread() {
  if (_impl_.thread_ != nullptr) _impl_.thread_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TrackDescriptor::clear_chrome_thread() {
  if (_impl_.chrome_thread_ != nullptr) _impl_.chrome_thread_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TrackDescriptor::clear_counter() {
  if (_impl_.counter_ != nullptr) _impl_.counter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
TrackDescriptor::TrackDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrackDescriptor)
}
TrackDescriptor::TrackDescriptor(const TrackDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.process_){nullptr}
    , decltype(_impl_.thread_){nullptr}
    , decltype(_impl_.chrome_process_){nullptr}
    , decltype(_impl_.chrome_thread_){nullptr}
    , decltype(_impl_.counter_){nullptr}
    , decltype(_impl_.uuid_) {}

    , decltype(_impl_.parent_uuid_) {}

    , decltype(_impl_.disallow_merging_with_system_tracks_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.process_ = new ::perfetto::protos::ProcessDescriptor(*from._impl_.process_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.thread_ = new ::perfetto::protos::ThreadDescriptor(*from._impl_.thread_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.chrome_process_ = new ::perfetto::protos::ChromeProcessDescriptor(*from._impl_.chrome_process_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.chrome_thread_ = new ::perfetto::protos::ChromeThreadDescriptor(*from._impl_.chrome_thread_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.counter_ = new ::perfetto::protos::CounterDescriptor(*from._impl_.counter_);
  }
  ::memcpy(&_impl_.uuid_, &from._impl_.uuid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.disallow_merging_with_system_tracks_) -
    reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.disallow_merging_with_system_tracks_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrackDescriptor)
}

inline void TrackDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.process_){nullptr}
    , decltype(_impl_.thread_){nullptr}
    , decltype(_impl_.chrome_process_){nullptr}
    , decltype(_impl_.chrome_thread_){nullptr}
    , decltype(_impl_.counter_){nullptr}
    , decltype(_impl_.uuid_) { ::uint64_t{0u} }

    , decltype(_impl_.parent_uuid_) { ::uint64_t{0u} }

    , decltype(_impl_.disallow_merging_with_system_tracks_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackDescriptor::~TrackDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrackDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.process_;
  if (this != internal_default_instance()) delete _impl_.thread_;
  if (this != internal_default_instance()) delete _impl_.chrome_process_;
  if (this != internal_default_instance()) delete _impl_.chrome_thread_;
  if (this != internal_default_instance()) delete _impl_.counter_;
}

void TrackDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrackDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.process_ != nullptr);
      _impl_.process_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.thread_ != nullptr);
      _impl_.thread_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.chrome_process_ != nullptr);
      _impl_.chrome_process_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.chrome_thread_ != nullptr);
      _impl_.chrome_thread_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.counter_ != nullptr);
      _impl_.counter_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.uuid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.parent_uuid_) -
        reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.parent_uuid_));
  }
  _impl_.disallow_merging_with_system_tracks_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_uuid(&has_bits);
          _impl_.uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrackDescriptor.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ProcessDescriptor process = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ThreadDescriptor thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_thread(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 parent_uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_parent_uuid(&has_bits);
          _impl_.parent_uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_process(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_thread(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.CounterDescriptor counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool disallow_merging_with_system_tracks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_disallow_merging_with_system_tracks(&has_bits);
          _impl_.disallow_merging_with_system_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrackDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrackDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 uuid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_uuid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrackDescriptor.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .perfetto.protos.ProcessDescriptor process = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::process(this),
        _Internal::process(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ThreadDescriptor thread = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::thread(this),
        _Internal::thread(this).GetCachedSize(), target, stream);
  }

  // optional uint64 parent_uuid = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_parent_uuid(), target);
  }

  // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chrome_process(this),
        _Internal::chrome_process(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::chrome_thread(this),
        _Internal::chrome_thread(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.CounterDescriptor counter = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::counter(this),
        _Internal::counter(this).GetCachedSize(), target, stream);
  }

  // optional bool disallow_merging_with_system_tracks = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_disallow_merging_with_system_tracks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrackDescriptor)
  return target;
}

::size_t TrackDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrackDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional .perfetto.protos.ProcessDescriptor process = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.process_);
    }

    // optional .perfetto.protos.ThreadDescriptor thread = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.thread_);
    }

    // optional .perfetto.protos.ChromeProcessDescriptor chrome_process = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_process_);
    }

    // optional .perfetto.protos.ChromeThreadDescriptor chrome_thread = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chrome_thread_);
    }

    // optional .perfetto.protos.CounterDescriptor counter = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.counter_);
    }

    // optional uint64 uuid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uuid());
    }

    // optional uint64 parent_uuid = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_parent_uuid());
    }

  }
  // optional bool disallow_merging_with_system_tracks = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackDescriptor::GetClassData() const { return &_class_data_; }


void TrackDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackDescriptor*>(&to_msg);
  auto& from = static_cast<const TrackDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrackDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_process()->::perfetto::protos::ProcessDescriptor::MergeFrom(
          from._internal_process());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_thread()->::perfetto::protos::ThreadDescriptor::MergeFrom(
          from._internal_thread());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_chrome_process()->::perfetto::protos::ChromeProcessDescriptor::MergeFrom(
          from._internal_chrome_process());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_chrome_thread()->::perfetto::protos::ChromeThreadDescriptor::MergeFrom(
          from._internal_chrome_thread());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_counter()->::perfetto::protos::CounterDescriptor::MergeFrom(
          from._internal_counter());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.uuid_ = from._impl_.uuid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.parent_uuid_ = from._impl_.parent_uuid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_disallow_merging_with_system_tracks(from._internal_disallow_merging_with_system_tracks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackDescriptor::CopyFrom(const TrackDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrackDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDescriptor::IsInitialized() const {
  return true;
}

void TrackDescriptor::InternalSwap(TrackDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackDescriptor, _impl_.disallow_merging_with_system_tracks_)
      + sizeof(TrackDescriptor::_impl_.disallow_merging_with_system_tracks_)
      - PROTOBUF_FIELD_OFFSET(TrackDescriptor, _impl_.process_)>(
          reinterpret_cast<char*>(&_impl_.process_),
          reinterpret_cast<char*>(&other->_impl_.process_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2ftrack_5fdescriptor_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrackDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::TrackDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrackDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
