// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/counter_descriptor.proto

#include "protos/perfetto/trace/track_event/counter_descriptor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR CounterDescriptor::CounterDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.unit_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.unit_)*/ 0

  , /*decltype(_impl_.unit_multiplier_)*/ ::int64_t{0}

  , /*decltype(_impl_.is_incremental_)*/ false
} {}
struct CounterDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CounterDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CounterDescriptorDefaultTypeInternal() {}
  union {
    CounterDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CounterDescriptorDefaultTypeInternal _CounterDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_.categories_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_.unit_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_.unit_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_.unit_multiplier_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CounterDescriptor, _impl_.is_incremental_),
    1,
    ~0u,
    2,
    0,
    3,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 14, -1, sizeof(::perfetto::protos::CounterDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_CounterDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n:protos/perfetto/trace/track_event/coun"
    "ter_descriptor.proto\022\017perfetto.protos\"\255\003"
    "\n\021CounterDescriptor\022C\n\004type\030\001 \001(\01625.perf"
    "etto.protos.CounterDescriptor.BuiltinCou"
    "nterType\022\022\n\ncategories\030\002 \003(\t\0225\n\004unit\030\003 \001"
    "(\0162\'.perfetto.protos.CounterDescriptor.U"
    "nit\022\021\n\tunit_name\030\006 \001(\t\022\027\n\017unit_multiplie"
    "r\030\004 \001(\003\022\026\n\016is_incremental\030\005 \001(\010\"o\n\022Built"
    "inCounterType\022\027\n\023COUNTER_UNSPECIFIED\020\000\022\032"
    "\n\026COUNTER_THREAD_TIME_NS\020\001\022$\n COUNTER_TH"
    "READ_INSTRUCTION_COUNT\020\002\"S\n\004Unit\022\024\n\020UNIT"
    "_UNSPECIFIED\020\000\022\020\n\014UNIT_TIME_NS\020\001\022\016\n\nUNIT"
    "_COUNT\020\002\022\023\n\017UNIT_SIZE_BYTES\020\003"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto = {
    false,
    false,
    509,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto,
    "protos/perfetto/trace/track_event/counter_descriptor.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CounterDescriptor_BuiltinCounterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto[0];
}
bool CounterDescriptor_BuiltinCounterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::COUNTER_UNSPECIFIED;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::COUNTER_THREAD_TIME_NS;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::COUNTER_THREAD_INSTRUCTION_COUNT;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::BuiltinCounterType_MIN;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::BuiltinCounterType_MAX;
constexpr int CounterDescriptor::BuiltinCounterType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CounterDescriptor_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto[1];
}
bool CounterDescriptor_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_UNSPECIFIED;
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_TIME_NS;
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_COUNT;
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_SIZE_BYTES;
constexpr CounterDescriptor_Unit CounterDescriptor::Unit_MIN;
constexpr CounterDescriptor_Unit CounterDescriptor::Unit_MAX;
constexpr int CounterDescriptor::Unit_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class CounterDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<CounterDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CounterDescriptor, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_incremental(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CounterDescriptor::CounterDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CounterDescriptor)
}
CounterDescriptor::CounterDescriptor(const CounterDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CounterDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.categories_){from._impl_.categories_}
    , decltype(_impl_.unit_name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.unit_) {}

    , decltype(_impl_.unit_multiplier_) {}

    , decltype(_impl_.is_incremental_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unit_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unit_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.unit_name_.Set(from._internal_unit_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_incremental_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_incremental_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CounterDescriptor)
}

inline void CounterDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.categories_){arena}
    , decltype(_impl_.unit_name_) {}

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.unit_) { 0 }

    , decltype(_impl_.unit_multiplier_) { ::int64_t{0} }

    , decltype(_impl_.is_incremental_) { false }

  };
  _impl_.unit_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unit_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CounterDescriptor::~CounterDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CounterDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CounterDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_categories()->~RepeatedPtrField();
  _impl_.unit_name_.Destroy();
}

void CounterDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CounterDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CounterDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_categories()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.unit_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_incremental_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_incremental_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CounterDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::CounterDescriptor_BuiltinCounterType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::perfetto::protos::CounterDescriptor_BuiltinCounterType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.CounterDescriptor.categories");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::CounterDescriptor_Unit_IsValid(static_cast<int>(val)))) {
            _internal_set_unit(static_cast<::perfetto::protos::CounterDescriptor_Unit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 unit_multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_unit_multiplier(&has_bits);
          _impl_.unit_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_incremental = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_is_incremental(&has_bits);
          _impl_.is_incremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string unit_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_unit_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CounterDescriptor.unit_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CounterDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CounterDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // repeated string categories = 2;
  for (int i = 0, n = this->_internal_categories_size(); i < n; ++i) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CounterDescriptor.categories");
    target = stream->WriteString(2, s, target);
  }

  // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_unit(), target);
  }

  // optional int64 unit_multiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_unit_multiplier(), target);
  }

  // optional bool is_incremental = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_incremental(), target);
  }

  // optional string unit_name = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_unit_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CounterDescriptor.unit_name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CounterDescriptor)
  return target;
}

::size_t CounterDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CounterDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string categories = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_categories().size());
  for (int i = 0, n = _internal_categories().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_categories().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string unit_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_unit_name());
    }

    // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_unit());
    }

    // optional int64 unit_multiplier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_unit_multiplier());
    }

    // optional bool is_incremental = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CounterDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CounterDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CounterDescriptor::GetClassData() const { return &_class_data_; }


void CounterDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CounterDescriptor*>(&to_msg);
  auto& from = static_cast<const CounterDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CounterDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_categories()->MergeFrom(from._internal_categories());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unit_name(from._internal_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unit_ = from._impl_.unit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unit_multiplier_ = from._impl_.unit_multiplier_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_incremental_ = from._impl_.is_incremental_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CounterDescriptor::CopyFrom(const CounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CounterDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterDescriptor::IsInitialized() const {
  return true;
}

void CounterDescriptor::InternalSwap(CounterDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_categories()->InternalSwap(
      other->_internal_mutable_categories());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unit_name_, lhs_arena,
                                       &other->_impl_.unit_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CounterDescriptor, _impl_.is_incremental_)
      + sizeof(CounterDescriptor::_impl_.is_incremental_)
      - PROTOBUF_FIELD_OFFSET(CounterDescriptor, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CounterDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CounterDescriptor*
Arena::CreateMaybeMessage< ::perfetto::protos::CounterDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CounterDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
