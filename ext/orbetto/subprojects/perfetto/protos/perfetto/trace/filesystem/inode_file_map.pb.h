// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/filesystem/inode_file_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto;
namespace perfetto {
namespace protos {
class InodeFileMap;
struct InodeFileMapDefaultTypeInternal;
extern InodeFileMapDefaultTypeInternal _InodeFileMap_default_instance_;
class InodeFileMap_Entry;
struct InodeFileMap_EntryDefaultTypeInternal;
extern InodeFileMap_EntryDefaultTypeInternal _InodeFileMap_Entry_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::InodeFileMap* Arena::CreateMaybeMessage<::perfetto::protos::InodeFileMap>(Arena*);
template <>
::perfetto::protos::InodeFileMap_Entry* Arena::CreateMaybeMessage<::perfetto::protos::InodeFileMap_Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum InodeFileMap_Entry_Type : int {
  InodeFileMap_Entry_Type_UNKNOWN = 0,
  InodeFileMap_Entry_Type_FILE = 1,
  InodeFileMap_Entry_Type_DIRECTORY = 2,
};

bool InodeFileMap_Entry_Type_IsValid(int value);
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry_Type_Type_MIN = static_cast<InodeFileMap_Entry_Type>(0);
constexpr InodeFileMap_Entry_Type InodeFileMap_Entry_Type_Type_MAX = static_cast<InodeFileMap_Entry_Type>(2);
constexpr int InodeFileMap_Entry_Type_Type_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
InodeFileMap_Entry_Type_descriptor();
template <typename T>
const std::string& InodeFileMap_Entry_Type_Name(T value) {
  static_assert(std::is_same<T, InodeFileMap_Entry_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return InodeFileMap_Entry_Type_Name(static_cast<InodeFileMap_Entry_Type>(value));
}
template <>
inline const std::string& InodeFileMap_Entry_Type_Name(InodeFileMap_Entry_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<InodeFileMap_Entry_Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool InodeFileMap_Entry_Type_Parse(absl::string_view name, InodeFileMap_Entry_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InodeFileMap_Entry_Type>(
      InodeFileMap_Entry_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class InodeFileMap_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.InodeFileMap.Entry) */ {
 public:
  inline InodeFileMap_Entry() : InodeFileMap_Entry(nullptr) {}
  ~InodeFileMap_Entry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InodeFileMap_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InodeFileMap_Entry(const InodeFileMap_Entry& from);
  InodeFileMap_Entry(InodeFileMap_Entry&& from) noexcept
    : InodeFileMap_Entry() {
    *this = ::std::move(from);
  }

  inline InodeFileMap_Entry& operator=(const InodeFileMap_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InodeFileMap_Entry& operator=(InodeFileMap_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InodeFileMap_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const InodeFileMap_Entry* internal_default_instance() {
    return reinterpret_cast<const InodeFileMap_Entry*>(
               &_InodeFileMap_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InodeFileMap_Entry& a, InodeFileMap_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(InodeFileMap_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InodeFileMap_Entry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InodeFileMap_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InodeFileMap_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InodeFileMap_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InodeFileMap_Entry& from) {
    InodeFileMap_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InodeFileMap_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.InodeFileMap.Entry";
  }
  protected:
  explicit InodeFileMap_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = InodeFileMap_Entry_Type;
  static constexpr Type UNKNOWN = InodeFileMap_Entry_Type_UNKNOWN;
  static constexpr Type FILE = InodeFileMap_Entry_Type_FILE;
  static constexpr Type DIRECTORY = InodeFileMap_Entry_Type_DIRECTORY;
  static inline bool Type_IsValid(int value) {
    return InodeFileMap_Entry_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = InodeFileMap_Entry_Type_Type_MIN;
  static constexpr Type Type_MAX = InodeFileMap_Entry_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = InodeFileMap_Entry_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return InodeFileMap_Entry_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return InodeFileMap_Entry_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return InodeFileMap_Entry_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kInodeNumberFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated string paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;

  public:
  void clear_paths() ;
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  void set_paths(int index, const std::string& value);
  void set_paths(int index, std::string&& value);
  void set_paths(int index, const char* value);
  void set_paths(int index, const char* value, std::size_t size);
  void set_paths(int index, absl::string_view value);
  std::string* add_paths();
  void add_paths(const std::string& value);
  void add_paths(std::string&& value);
  void add_paths(const char* value);
  void add_paths(const char* value, std::size_t size);
  void add_paths(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_paths();

  private:
  const std::string& _internal_paths(int index) const;
  std::string* _internal_add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_paths();

  public:
  // optional uint64 inode_number = 1;
  bool has_inode_number() const;
  void clear_inode_number() ;
  ::uint64_t inode_number() const;
  void set_inode_number(::uint64_t value);

  private:
  ::uint64_t _internal_inode_number() const;
  void _internal_set_inode_number(::uint64_t value);

  public:
  // optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
  bool has_type() const;
  void clear_type() ;
  ::perfetto::protos::InodeFileMap_Entry_Type type() const;
  void set_type(::perfetto::protos::InodeFileMap_Entry_Type value);

  private:
  ::perfetto::protos::InodeFileMap_Entry_Type _internal_type() const;
  void _internal_set_type(::perfetto::protos::InodeFileMap_Entry_Type value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.InodeFileMap.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> paths_;
    ::uint64_t inode_number_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto;
};// -------------------------------------------------------------------

class InodeFileMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.InodeFileMap) */ {
 public:
  inline InodeFileMap() : InodeFileMap(nullptr) {}
  ~InodeFileMap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InodeFileMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InodeFileMap(const InodeFileMap& from);
  InodeFileMap(InodeFileMap&& from) noexcept
    : InodeFileMap() {
    *this = ::std::move(from);
  }

  inline InodeFileMap& operator=(const InodeFileMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline InodeFileMap& operator=(InodeFileMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InodeFileMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const InodeFileMap* internal_default_instance() {
    return reinterpret_cast<const InodeFileMap*>(
               &_InodeFileMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InodeFileMap& a, InodeFileMap& b) {
    a.Swap(&b);
  }
  inline void Swap(InodeFileMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InodeFileMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InodeFileMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InodeFileMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InodeFileMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InodeFileMap& from) {
    InodeFileMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InodeFileMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.InodeFileMap";
  }
  protected:
  explicit InodeFileMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InodeFileMap_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kMountPointsFieldNumber = 2,
    kEntriesFieldNumber = 3,
    kBlockDeviceIdFieldNumber = 1,
  };
  // repeated string mount_points = 2;
  int mount_points_size() const;
  private:
  int _internal_mount_points_size() const;

  public:
  void clear_mount_points() ;
  const std::string& mount_points(int index) const;
  std::string* mutable_mount_points(int index);
  void set_mount_points(int index, const std::string& value);
  void set_mount_points(int index, std::string&& value);
  void set_mount_points(int index, const char* value);
  void set_mount_points(int index, const char* value, std::size_t size);
  void set_mount_points(int index, absl::string_view value);
  std::string* add_mount_points();
  void add_mount_points(const std::string& value);
  void add_mount_points(std::string&& value);
  void add_mount_points(const char* value);
  void add_mount_points(const char* value, std::size_t size);
  void add_mount_points(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mount_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mount_points();

  private:
  const std::string& _internal_mount_points(int index) const;
  std::string* _internal_add_mount_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_mount_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_mount_points();

  public:
  // repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::perfetto::protos::InodeFileMap_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileMap_Entry >*
      mutable_entries();
  private:
  const ::perfetto::protos::InodeFileMap_Entry& _internal_entries(int index) const;
  ::perfetto::protos::InodeFileMap_Entry* _internal_add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileMap_Entry>& _internal_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileMap_Entry>* _internal_mutable_entries();
  public:
  const ::perfetto::protos::InodeFileMap_Entry& entries(int index) const;
  ::perfetto::protos::InodeFileMap_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileMap_Entry >&
      entries() const;
  // optional uint64 block_device_id = 1;
  bool has_block_device_id() const;
  void clear_block_device_id() ;
  ::uint64_t block_device_id() const;
  void set_block_device_id(::uint64_t value);

  private:
  ::uint64_t _internal_block_device_id() const;
  void _internal_set_block_device_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.InodeFileMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mount_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileMap_Entry > entries_;
    ::uint64_t block_device_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InodeFileMap_Entry

// optional uint64 inode_number = 1;
inline bool InodeFileMap_Entry::has_inode_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InodeFileMap_Entry::clear_inode_number() {
  _impl_.inode_number_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t InodeFileMap_Entry::inode_number() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileMap.Entry.inode_number)
  return _internal_inode_number();
}
inline void InodeFileMap_Entry::set_inode_number(::uint64_t value) {
  _internal_set_inode_number(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.Entry.inode_number)
}
inline ::uint64_t InodeFileMap_Entry::_internal_inode_number() const {
  return _impl_.inode_number_;
}
inline void InodeFileMap_Entry::_internal_set_inode_number(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inode_number_ = value;
}

// repeated string paths = 2;
inline int InodeFileMap_Entry::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int InodeFileMap_Entry::paths_size() const {
  return _internal_paths_size();
}
inline void InodeFileMap_Entry::clear_paths() {
  _internal_mutable_paths()->Clear();
}
inline std::string* InodeFileMap_Entry::add_paths() {
  std::string* _s = _internal_add_paths();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.InodeFileMap.Entry.paths)
  return _s;
}
inline const std::string& InodeFileMap_Entry::paths(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileMap.Entry.paths)
  return _internal_paths(index);
}
inline std::string* InodeFileMap_Entry::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileMap.Entry.paths)
  return _internal_mutable_paths()->Mutable(index);
}
inline void InodeFileMap_Entry::set_paths(int index, const std::string& value) {
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::set_paths(int index, std::string&& value) {
  _internal_mutable_paths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::set_paths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::set_paths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_paths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::set_paths(int index, absl::string_view value) {
  _internal_mutable_paths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::add_paths(const std::string& value) {
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::add_paths(std::string&& value) {
  _internal_mutable_paths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::add_paths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::add_paths(const char* value, std::size_t size) {
  _internal_mutable_paths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.InodeFileMap.Entry.paths)
}
inline void InodeFileMap_Entry::add_paths(absl::string_view value) {
  _internal_mutable_paths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.InodeFileMap.Entry.paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileMap_Entry::paths() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileMap.Entry.paths)
  return _internal_paths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* InodeFileMap_Entry::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileMap.Entry.paths)
  return _internal_mutable_paths();
}
inline const std::string& InodeFileMap_Entry::_internal_paths(int index) const {
  return _internal_paths().Get(index);
}
inline std::string* InodeFileMap_Entry::_internal_add_paths() {
  return _internal_mutable_paths()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileMap_Entry::_internal_paths() const {
  return _impl_.paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InodeFileMap_Entry::_internal_mutable_paths() {
  return &_impl_.paths_;
}

// optional .perfetto.protos.InodeFileMap.Entry.Type type = 3;
inline bool InodeFileMap_Entry::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InodeFileMap_Entry::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::InodeFileMap_Entry_Type InodeFileMap_Entry::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileMap.Entry.type)
  return _internal_type();
}
inline void InodeFileMap_Entry::set_type(::perfetto::protos::InodeFileMap_Entry_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.Entry.type)
}
inline ::perfetto::protos::InodeFileMap_Entry_Type InodeFileMap_Entry::_internal_type() const {
  return static_cast<::perfetto::protos::InodeFileMap_Entry_Type>(_impl_.type_);
}
inline void InodeFileMap_Entry::_internal_set_type(::perfetto::protos::InodeFileMap_Entry_Type value) {
  assert(::perfetto::protos::InodeFileMap_Entry_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// InodeFileMap

// optional uint64 block_device_id = 1;
inline bool InodeFileMap::has_block_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InodeFileMap::clear_block_device_id() {
  _impl_.block_device_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t InodeFileMap::block_device_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileMap.block_device_id)
  return _internal_block_device_id();
}
inline void InodeFileMap::set_block_device_id(::uint64_t value) {
  _internal_set_block_device_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.block_device_id)
}
inline ::uint64_t InodeFileMap::_internal_block_device_id() const {
  return _impl_.block_device_id_;
}
inline void InodeFileMap::_internal_set_block_device_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.block_device_id_ = value;
}

// repeated string mount_points = 2;
inline int InodeFileMap::_internal_mount_points_size() const {
  return _impl_.mount_points_.size();
}
inline int InodeFileMap::mount_points_size() const {
  return _internal_mount_points_size();
}
inline void InodeFileMap::clear_mount_points() {
  _internal_mutable_mount_points()->Clear();
}
inline std::string* InodeFileMap::add_mount_points() {
  std::string* _s = _internal_add_mount_points();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.InodeFileMap.mount_points)
  return _s;
}
inline const std::string& InodeFileMap::mount_points(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileMap.mount_points)
  return _internal_mount_points(index);
}
inline std::string* InodeFileMap::mutable_mount_points(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileMap.mount_points)
  return _internal_mutable_mount_points()->Mutable(index);
}
inline void InodeFileMap::set_mount_points(int index, const std::string& value) {
  _internal_mutable_mount_points()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::set_mount_points(int index, std::string&& value) {
  _internal_mutable_mount_points()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::set_mount_points(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_mount_points()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::set_mount_points(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_mount_points()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::set_mount_points(int index, absl::string_view value) {
  _internal_mutable_mount_points()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::add_mount_points(const std::string& value) {
  _internal_mutable_mount_points()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::add_mount_points(std::string&& value) {
  _internal_mutable_mount_points()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::add_mount_points(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_mount_points()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::add_mount_points(const char* value, std::size_t size) {
  _internal_mutable_mount_points()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.InodeFileMap.mount_points)
}
inline void InodeFileMap::add_mount_points(absl::string_view value) {
  _internal_mutable_mount_points()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.InodeFileMap.mount_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileMap::mount_points() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileMap.mount_points)
  return _internal_mount_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* InodeFileMap::mutable_mount_points() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileMap.mount_points)
  return _internal_mutable_mount_points();
}
inline const std::string& InodeFileMap::_internal_mount_points(int index) const {
  return _internal_mount_points().Get(index);
}
inline std::string* InodeFileMap::_internal_add_mount_points() {
  return _internal_mutable_mount_points()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InodeFileMap::_internal_mount_points() const {
  return _impl_.mount_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InodeFileMap::_internal_mutable_mount_points() {
  return &_impl_.mount_points_;
}

// repeated .perfetto.protos.InodeFileMap.Entry entries = 3;
inline int InodeFileMap::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int InodeFileMap::entries_size() const {
  return _internal_entries_size();
}
inline void InodeFileMap::clear_entries() {
  _internal_mutable_entries()->Clear();
}
inline ::perfetto::protos::InodeFileMap_Entry* InodeFileMap::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.InodeFileMap.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileMap_Entry >*
InodeFileMap::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.InodeFileMap.entries)
  return _internal_mutable_entries();
}
inline const ::perfetto::protos::InodeFileMap_Entry& InodeFileMap::_internal_entries(int index) const {
  return _internal_entries().Get(index);
}
inline const ::perfetto::protos::InodeFileMap_Entry& InodeFileMap::entries(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.InodeFileMap.entries)
  return _internal_entries(index);
}
inline ::perfetto::protos::InodeFileMap_Entry* InodeFileMap::_internal_add_entries() {
  return _internal_mutable_entries()->Add();
}
inline ::perfetto::protos::InodeFileMap_Entry* InodeFileMap::add_entries() {
  ::perfetto::protos::InodeFileMap_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:perfetto.protos.InodeFileMap.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::InodeFileMap_Entry >&
InodeFileMap::entries() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.InodeFileMap.entries)
  return _internal_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileMap_Entry>&
InodeFileMap::_internal_entries() const {
  return _impl_.entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::InodeFileMap_Entry>*
InodeFileMap::_internal_mutable_entries() {
  return &_impl_.entries_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::InodeFileMap_Entry_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::InodeFileMap_Entry_Type>() {
  return ::perfetto::protos::InodeFileMap_Entry_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ffilesystem_2finode_5ffile_5fmap_2eproto_2epb_2eh
