// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/vulkan_api_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto;
namespace perfetto {
namespace protos {
class VulkanApiEvent;
struct VulkanApiEventDefaultTypeInternal;
extern VulkanApiEventDefaultTypeInternal _VulkanApiEvent_default_instance_;
class VulkanApiEvent_VkDebugUtilsObjectName;
struct VulkanApiEvent_VkDebugUtilsObjectNameDefaultTypeInternal;
extern VulkanApiEvent_VkDebugUtilsObjectNameDefaultTypeInternal _VulkanApiEvent_VkDebugUtilsObjectName_default_instance_;
class VulkanApiEvent_VkQueueSubmit;
struct VulkanApiEvent_VkQueueSubmitDefaultTypeInternal;
extern VulkanApiEvent_VkQueueSubmitDefaultTypeInternal _VulkanApiEvent_VkQueueSubmit_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::VulkanApiEvent* Arena::CreateMaybeMessage<::perfetto::protos::VulkanApiEvent>(Arena*);
template <>
::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* Arena::CreateMaybeMessage<::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName>(Arena*);
template <>
::perfetto::protos::VulkanApiEvent_VkQueueSubmit* Arena::CreateMaybeMessage<::perfetto::protos::VulkanApiEvent_VkQueueSubmit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class VulkanApiEvent_VkDebugUtilsObjectName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName) */ {
 public:
  inline VulkanApiEvent_VkDebugUtilsObjectName() : VulkanApiEvent_VkDebugUtilsObjectName(nullptr) {}
  ~VulkanApiEvent_VkDebugUtilsObjectName() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VulkanApiEvent_VkDebugUtilsObjectName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VulkanApiEvent_VkDebugUtilsObjectName(const VulkanApiEvent_VkDebugUtilsObjectName& from);
  VulkanApiEvent_VkDebugUtilsObjectName(VulkanApiEvent_VkDebugUtilsObjectName&& from) noexcept
    : VulkanApiEvent_VkDebugUtilsObjectName() {
    *this = ::std::move(from);
  }

  inline VulkanApiEvent_VkDebugUtilsObjectName& operator=(const VulkanApiEvent_VkDebugUtilsObjectName& from) {
    CopyFrom(from);
    return *this;
  }
  inline VulkanApiEvent_VkDebugUtilsObjectName& operator=(VulkanApiEvent_VkDebugUtilsObjectName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VulkanApiEvent_VkDebugUtilsObjectName& default_instance() {
    return *internal_default_instance();
  }
  static inline const VulkanApiEvent_VkDebugUtilsObjectName* internal_default_instance() {
    return reinterpret_cast<const VulkanApiEvent_VkDebugUtilsObjectName*>(
               &_VulkanApiEvent_VkDebugUtilsObjectName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VulkanApiEvent_VkDebugUtilsObjectName& a, VulkanApiEvent_VkDebugUtilsObjectName& b) {
    a.Swap(&b);
  }
  inline void Swap(VulkanApiEvent_VkDebugUtilsObjectName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VulkanApiEvent_VkDebugUtilsObjectName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VulkanApiEvent_VkDebugUtilsObjectName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VulkanApiEvent_VkDebugUtilsObjectName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VulkanApiEvent_VkDebugUtilsObjectName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VulkanApiEvent_VkDebugUtilsObjectName& from) {
    VulkanApiEvent_VkDebugUtilsObjectName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VulkanApiEvent_VkDebugUtilsObjectName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName";
  }
  protected:
  explicit VulkanApiEvent_VkDebugUtilsObjectName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 5,
    kVkDeviceFieldNumber = 2,
    kPidFieldNumber = 1,
    kObjectTypeFieldNumber = 3,
    kObjectFieldNumber = 4,
  };
  // optional string object_name = 5;
  bool has_object_name() const;
  void clear_object_name() ;
  const std::string& object_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object_name(Arg_&& arg, Args_... args);
  std::string* mutable_object_name();
  PROTOBUF_NODISCARD std::string* release_object_name();
  void set_allocated_object_name(std::string* ptr);

  private:
  const std::string& _internal_object_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_name(
      const std::string& value);
  std::string* _internal_mutable_object_name();

  public:
  // optional uint64 vk_device = 2;
  bool has_vk_device() const;
  void clear_vk_device() ;
  ::uint64_t vk_device() const;
  void set_vk_device(::uint64_t value);

  private:
  ::uint64_t _internal_vk_device() const;
  void _internal_set_vk_device(::uint64_t value);

  public:
  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // optional int32 object_type = 3;
  bool has_object_type() const;
  void clear_object_type() ;
  ::int32_t object_type() const;
  void set_object_type(::int32_t value);

  private:
  ::int32_t _internal_object_type() const;
  void _internal_set_object_type(::int32_t value);

  public:
  // optional uint64 object = 4;
  bool has_object() const;
  void clear_object() ;
  ::uint64_t object() const;
  void set_object(::uint64_t value);

  private:
  ::uint64_t _internal_object() const;
  void _internal_set_object(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
    ::uint64_t vk_device_;
    ::uint32_t pid_;
    ::int32_t object_type_;
    ::uint64_t object_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto;
};// -------------------------------------------------------------------

class VulkanApiEvent_VkQueueSubmit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VulkanApiEvent.VkQueueSubmit) */ {
 public:
  inline VulkanApiEvent_VkQueueSubmit() : VulkanApiEvent_VkQueueSubmit(nullptr) {}
  ~VulkanApiEvent_VkQueueSubmit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VulkanApiEvent_VkQueueSubmit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VulkanApiEvent_VkQueueSubmit(const VulkanApiEvent_VkQueueSubmit& from);
  VulkanApiEvent_VkQueueSubmit(VulkanApiEvent_VkQueueSubmit&& from) noexcept
    : VulkanApiEvent_VkQueueSubmit() {
    *this = ::std::move(from);
  }

  inline VulkanApiEvent_VkQueueSubmit& operator=(const VulkanApiEvent_VkQueueSubmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline VulkanApiEvent_VkQueueSubmit& operator=(VulkanApiEvent_VkQueueSubmit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VulkanApiEvent_VkQueueSubmit& default_instance() {
    return *internal_default_instance();
  }
  static inline const VulkanApiEvent_VkQueueSubmit* internal_default_instance() {
    return reinterpret_cast<const VulkanApiEvent_VkQueueSubmit*>(
               &_VulkanApiEvent_VkQueueSubmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VulkanApiEvent_VkQueueSubmit& a, VulkanApiEvent_VkQueueSubmit& b) {
    a.Swap(&b);
  }
  inline void Swap(VulkanApiEvent_VkQueueSubmit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VulkanApiEvent_VkQueueSubmit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VulkanApiEvent_VkQueueSubmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VulkanApiEvent_VkQueueSubmit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VulkanApiEvent_VkQueueSubmit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VulkanApiEvent_VkQueueSubmit& from) {
    VulkanApiEvent_VkQueueSubmit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VulkanApiEvent_VkQueueSubmit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VulkanApiEvent.VkQueueSubmit";
  }
  protected:
  explicit VulkanApiEvent_VkQueueSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVkCommandBuffersFieldNumber = 5,
    kDurationNsFieldNumber = 1,
    kPidFieldNumber = 2,
    kTidFieldNumber = 3,
    kVkQueueFieldNumber = 4,
    kSubmissionIdFieldNumber = 6,
  };
  // repeated uint64 vk_command_buffers = 5;
  int vk_command_buffers_size() const;
  private:
  int _internal_vk_command_buffers_size() const;

  public:
  void clear_vk_command_buffers() ;
  ::uint64_t vk_command_buffers(int index) const;
  void set_vk_command_buffers(int index, ::uint64_t value);
  void add_vk_command_buffers(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& vk_command_buffers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_vk_command_buffers();

  private:
  ::uint64_t _internal_vk_command_buffers(int index) const;
  void _internal_add_vk_command_buffers(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_vk_command_buffers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_vk_command_buffers();

  public:
  // optional uint64 duration_ns = 1;
  bool has_duration_ns() const;
  void clear_duration_ns() ;
  ::uint64_t duration_ns() const;
  void set_duration_ns(::uint64_t value);

  private:
  ::uint64_t _internal_duration_ns() const;
  void _internal_set_duration_ns(::uint64_t value);

  public:
  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // optional uint32 tid = 3;
  bool has_tid() const;
  void clear_tid() ;
  ::uint32_t tid() const;
  void set_tid(::uint32_t value);

  private:
  ::uint32_t _internal_tid() const;
  void _internal_set_tid(::uint32_t value);

  public:
  // optional uint64 vk_queue = 4;
  bool has_vk_queue() const;
  void clear_vk_queue() ;
  ::uint64_t vk_queue() const;
  void set_vk_queue(::uint64_t value);

  private:
  ::uint64_t _internal_vk_queue() const;
  void _internal_set_vk_queue(::uint64_t value);

  public:
  // optional uint32 submission_id = 6;
  bool has_submission_id() const;
  void clear_submission_id() ;
  ::uint32_t submission_id() const;
  void set_submission_id(::uint32_t value);

  private:
  ::uint32_t _internal_submission_id() const;
  void _internal_set_submission_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VulkanApiEvent.VkQueueSubmit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> vk_command_buffers_;
    ::uint64_t duration_ns_;
    ::uint32_t pid_;
    ::uint32_t tid_;
    ::uint64_t vk_queue_;
    ::uint32_t submission_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto;
};// -------------------------------------------------------------------

class VulkanApiEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VulkanApiEvent) */ {
 public:
  inline VulkanApiEvent() : VulkanApiEvent(nullptr) {}
  ~VulkanApiEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VulkanApiEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VulkanApiEvent(const VulkanApiEvent& from);
  VulkanApiEvent(VulkanApiEvent&& from) noexcept
    : VulkanApiEvent() {
    *this = ::std::move(from);
  }

  inline VulkanApiEvent& operator=(const VulkanApiEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VulkanApiEvent& operator=(VulkanApiEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VulkanApiEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kVkDebugUtilsObjectName = 1,
    kVkQueueSubmit = 2,
    EVENT_NOT_SET = 0,
  };

  static inline const VulkanApiEvent* internal_default_instance() {
    return reinterpret_cast<const VulkanApiEvent*>(
               &_VulkanApiEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VulkanApiEvent& a, VulkanApiEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VulkanApiEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VulkanApiEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VulkanApiEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VulkanApiEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VulkanApiEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VulkanApiEvent& from) {
    VulkanApiEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VulkanApiEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VulkanApiEvent";
  }
  protected:
  explicit VulkanApiEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VulkanApiEvent_VkDebugUtilsObjectName VkDebugUtilsObjectName;
  typedef VulkanApiEvent_VkQueueSubmit VkQueueSubmit;

  // accessors -------------------------------------------------------

  enum : int {
    kVkDebugUtilsObjectNameFieldNumber = 1,
    kVkQueueSubmitFieldNumber = 2,
  };
  // .perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName vk_debug_utils_object_name = 1;
  bool has_vk_debug_utils_object_name() const;
  private:
  bool _internal_has_vk_debug_utils_object_name() const;

  public:
  void clear_vk_debug_utils_object_name() ;
  const ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName& vk_debug_utils_object_name() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* release_vk_debug_utils_object_name();
  ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* mutable_vk_debug_utils_object_name();
  void set_allocated_vk_debug_utils_object_name(::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* vk_debug_utils_object_name);
  private:
  const ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName& _internal_vk_debug_utils_object_name() const;
  ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* _internal_mutable_vk_debug_utils_object_name();
  public:
  void unsafe_arena_set_allocated_vk_debug_utils_object_name(
      ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* vk_debug_utils_object_name);
  ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* unsafe_arena_release_vk_debug_utils_object_name();
  // .perfetto.protos.VulkanApiEvent.VkQueueSubmit vk_queue_submit = 2;
  bool has_vk_queue_submit() const;
  private:
  bool _internal_has_vk_queue_submit() const;

  public:
  void clear_vk_queue_submit() ;
  const ::perfetto::protos::VulkanApiEvent_VkQueueSubmit& vk_queue_submit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* release_vk_queue_submit();
  ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* mutable_vk_queue_submit();
  void set_allocated_vk_queue_submit(::perfetto::protos::VulkanApiEvent_VkQueueSubmit* vk_queue_submit);
  private:
  const ::perfetto::protos::VulkanApiEvent_VkQueueSubmit& _internal_vk_queue_submit() const;
  ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* _internal_mutable_vk_queue_submit();
  public:
  void unsafe_arena_set_allocated_vk_queue_submit(
      ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* vk_queue_submit);
  ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* unsafe_arena_release_vk_queue_submit();
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.VulkanApiEvent)
 private:
  class _Internal;
  void set_has_vk_debug_utils_object_name();
  void set_has_vk_queue_submit();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* vk_debug_utils_object_name_;
      ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* vk_queue_submit_;
    } event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VulkanApiEvent_VkDebugUtilsObjectName

// optional uint32 pid = 1;
inline bool VulkanApiEvent_VkDebugUtilsObjectName::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t VulkanApiEvent_VkDebugUtilsObjectName::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.pid)
  return _internal_pid();
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.pid)
}
inline ::uint32_t VulkanApiEvent_VkDebugUtilsObjectName::_internal_pid() const {
  return _impl_.pid_;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::_internal_set_pid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// optional uint64 vk_device = 2;
inline bool VulkanApiEvent_VkDebugUtilsObjectName::has_vk_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::clear_vk_device() {
  _impl_.vk_device_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t VulkanApiEvent_VkDebugUtilsObjectName::vk_device() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.vk_device)
  return _internal_vk_device();
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::set_vk_device(::uint64_t value) {
  _internal_set_vk_device(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.vk_device)
}
inline ::uint64_t VulkanApiEvent_VkDebugUtilsObjectName::_internal_vk_device() const {
  return _impl_.vk_device_;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::_internal_set_vk_device(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vk_device_ = value;
}

// optional int32 object_type = 3;
inline bool VulkanApiEvent_VkDebugUtilsObjectName::has_object_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::clear_object_type() {
  _impl_.object_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t VulkanApiEvent_VkDebugUtilsObjectName::object_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_type)
  return _internal_object_type();
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::set_object_type(::int32_t value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_type)
}
inline ::int32_t VulkanApiEvent_VkDebugUtilsObjectName::_internal_object_type() const {
  return _impl_.object_type_;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::_internal_set_object_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.object_type_ = value;
}

// optional uint64 object = 4;
inline bool VulkanApiEvent_VkDebugUtilsObjectName::has_object() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::clear_object() {
  _impl_.object_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t VulkanApiEvent_VkDebugUtilsObjectName::object() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object)
  return _internal_object();
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::set_object(::uint64_t value) {
  _internal_set_object(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object)
}
inline ::uint64_t VulkanApiEvent_VkDebugUtilsObjectName::_internal_object() const {
  return _impl_.object_;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::_internal_set_object(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.object_ = value;
}

// optional string object_name = 5;
inline bool VulkanApiEvent_VkDebugUtilsObjectName::has_object_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::clear_object_name() {
  _impl_.object_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VulkanApiEvent_VkDebugUtilsObjectName::object_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_name)
  return _internal_object_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VulkanApiEvent_VkDebugUtilsObjectName::set_object_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.object_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_name)
}
inline std::string* VulkanApiEvent_VkDebugUtilsObjectName::mutable_object_name() {
  std::string* _s = _internal_mutable_object_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_name)
  return _s;
}
inline const std::string& VulkanApiEvent_VkDebugUtilsObjectName::_internal_object_name() const {
  return _impl_.object_name_.Get();
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::_internal_set_object_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.object_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VulkanApiEvent_VkDebugUtilsObjectName::_internal_mutable_object_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.object_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VulkanApiEvent_VkDebugUtilsObjectName::release_object_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.object_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VulkanApiEvent_VkDebugUtilsObjectName::set_allocated_object_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.object_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_name_.IsDefault()) {
          _impl_.object_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName.object_name)
}

// -------------------------------------------------------------------

// VulkanApiEvent_VkQueueSubmit

// optional uint64 duration_ns = 1;
inline bool VulkanApiEvent_VkQueueSubmit::has_duration_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VulkanApiEvent_VkQueueSubmit::clear_duration_ns() {
  _impl_.duration_ns_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t VulkanApiEvent_VkQueueSubmit::duration_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkQueueSubmit.duration_ns)
  return _internal_duration_ns();
}
inline void VulkanApiEvent_VkQueueSubmit::set_duration_ns(::uint64_t value) {
  _internal_set_duration_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkQueueSubmit.duration_ns)
}
inline ::uint64_t VulkanApiEvent_VkQueueSubmit::_internal_duration_ns() const {
  return _impl_.duration_ns_;
}
inline void VulkanApiEvent_VkQueueSubmit::_internal_set_duration_ns(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.duration_ns_ = value;
}

// optional uint32 pid = 2;
inline bool VulkanApiEvent_VkQueueSubmit::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VulkanApiEvent_VkQueueSubmit::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VulkanApiEvent_VkQueueSubmit::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkQueueSubmit.pid)
  return _internal_pid();
}
inline void VulkanApiEvent_VkQueueSubmit::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkQueueSubmit.pid)
}
inline ::uint32_t VulkanApiEvent_VkQueueSubmit::_internal_pid() const {
  return _impl_.pid_;
}
inline void VulkanApiEvent_VkQueueSubmit::_internal_set_pid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional uint32 tid = 3;
inline bool VulkanApiEvent_VkQueueSubmit::has_tid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VulkanApiEvent_VkQueueSubmit::clear_tid() {
  _impl_.tid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t VulkanApiEvent_VkQueueSubmit::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkQueueSubmit.tid)
  return _internal_tid();
}
inline void VulkanApiEvent_VkQueueSubmit::set_tid(::uint32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkQueueSubmit.tid)
}
inline ::uint32_t VulkanApiEvent_VkQueueSubmit::_internal_tid() const {
  return _impl_.tid_;
}
inline void VulkanApiEvent_VkQueueSubmit::_internal_set_tid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tid_ = value;
}

// optional uint64 vk_queue = 4;
inline bool VulkanApiEvent_VkQueueSubmit::has_vk_queue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VulkanApiEvent_VkQueueSubmit::clear_vk_queue() {
  _impl_.vk_queue_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t VulkanApiEvent_VkQueueSubmit::vk_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_queue)
  return _internal_vk_queue();
}
inline void VulkanApiEvent_VkQueueSubmit::set_vk_queue(::uint64_t value) {
  _internal_set_vk_queue(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_queue)
}
inline ::uint64_t VulkanApiEvent_VkQueueSubmit::_internal_vk_queue() const {
  return _impl_.vk_queue_;
}
inline void VulkanApiEvent_VkQueueSubmit::_internal_set_vk_queue(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vk_queue_ = value;
}

// repeated uint64 vk_command_buffers = 5;
inline int VulkanApiEvent_VkQueueSubmit::_internal_vk_command_buffers_size() const {
  return _impl_.vk_command_buffers_.size();
}
inline int VulkanApiEvent_VkQueueSubmit::vk_command_buffers_size() const {
  return _internal_vk_command_buffers_size();
}
inline void VulkanApiEvent_VkQueueSubmit::clear_vk_command_buffers() {
  _internal_mutable_vk_command_buffers()->Clear();
}
inline ::uint64_t VulkanApiEvent_VkQueueSubmit::vk_command_buffers(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_command_buffers)
  return _internal_vk_command_buffers(index);
}
inline void VulkanApiEvent_VkQueueSubmit::set_vk_command_buffers(int index, ::uint64_t value) {
  _internal_mutable_vk_command_buffers()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_command_buffers)
}
inline void VulkanApiEvent_VkQueueSubmit::add_vk_command_buffers(::uint64_t value) {
  _internal_add_vk_command_buffers(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_command_buffers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& VulkanApiEvent_VkQueueSubmit::vk_command_buffers() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_command_buffers)
  return _internal_vk_command_buffers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* VulkanApiEvent_VkQueueSubmit::mutable_vk_command_buffers() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.VulkanApiEvent.VkQueueSubmit.vk_command_buffers)
  return _internal_mutable_vk_command_buffers();
}

inline ::uint64_t VulkanApiEvent_VkQueueSubmit::_internal_vk_command_buffers(int index) const {
  return _internal_vk_command_buffers().Get(index);
}
inline void VulkanApiEvent_VkQueueSubmit::_internal_add_vk_command_buffers(::uint64_t value) {
  _internal_mutable_vk_command_buffers()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& VulkanApiEvent_VkQueueSubmit::_internal_vk_command_buffers() const {
  return _impl_.vk_command_buffers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* VulkanApiEvent_VkQueueSubmit::_internal_mutable_vk_command_buffers() {
  return &_impl_.vk_command_buffers_;
}

// optional uint32 submission_id = 6;
inline bool VulkanApiEvent_VkQueueSubmit::has_submission_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VulkanApiEvent_VkQueueSubmit::clear_submission_id() {
  _impl_.submission_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t VulkanApiEvent_VkQueueSubmit::submission_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.VkQueueSubmit.submission_id)
  return _internal_submission_id();
}
inline void VulkanApiEvent_VkQueueSubmit::set_submission_id(::uint32_t value) {
  _internal_set_submission_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VulkanApiEvent.VkQueueSubmit.submission_id)
}
inline ::uint32_t VulkanApiEvent_VkQueueSubmit::_internal_submission_id() const {
  return _impl_.submission_id_;
}
inline void VulkanApiEvent_VkQueueSubmit::_internal_set_submission_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.submission_id_ = value;
}

// -------------------------------------------------------------------

// VulkanApiEvent

// .perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName vk_debug_utils_object_name = 1;
inline bool VulkanApiEvent::has_vk_debug_utils_object_name() const {
  return event_case() == kVkDebugUtilsObjectName;
}
inline bool VulkanApiEvent::_internal_has_vk_debug_utils_object_name() const {
  return event_case() == kVkDebugUtilsObjectName;
}
inline void VulkanApiEvent::set_has_vk_debug_utils_object_name() {
  _impl_._oneof_case_[0] = kVkDebugUtilsObjectName;
}
inline void VulkanApiEvent::clear_vk_debug_utils_object_name() {
  if (event_case() == kVkDebugUtilsObjectName) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vk_debug_utils_object_name_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* VulkanApiEvent::release_vk_debug_utils_object_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name)
  if (event_case() == kVkDebugUtilsObjectName) {
    clear_has_event();
    ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* temp = _impl_.event_.vk_debug_utils_object_name_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vk_debug_utils_object_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName& VulkanApiEvent::_internal_vk_debug_utils_object_name() const {
  return event_case() == kVkDebugUtilsObjectName
      ? *_impl_.event_.vk_debug_utils_object_name_
      : reinterpret_cast<::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName&>(::perfetto::protos::_VulkanApiEvent_VkDebugUtilsObjectName_default_instance_);
}
inline const ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName& VulkanApiEvent::vk_debug_utils_object_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name)
  return _internal_vk_debug_utils_object_name();
}
inline ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* VulkanApiEvent::unsafe_arena_release_vk_debug_utils_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name)
  if (event_case() == kVkDebugUtilsObjectName) {
    clear_has_event();
    ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* temp = _impl_.event_.vk_debug_utils_object_name_;
    _impl_.event_.vk_debug_utils_object_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VulkanApiEvent::unsafe_arena_set_allocated_vk_debug_utils_object_name(::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* vk_debug_utils_object_name) {
  clear_event();
  if (vk_debug_utils_object_name) {
    set_has_vk_debug_utils_object_name();
    _impl_.event_.vk_debug_utils_object_name_ = vk_debug_utils_object_name;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name)
}
inline ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* VulkanApiEvent::_internal_mutable_vk_debug_utils_object_name() {
  if (event_case() != kVkDebugUtilsObjectName) {
    clear_event();
    set_has_vk_debug_utils_object_name();
    _impl_.event_.vk_debug_utils_object_name_ = CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName >(GetArenaForAllocation());
  }
  return _impl_.event_.vk_debug_utils_object_name_;
}
inline ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* VulkanApiEvent::mutable_vk_debug_utils_object_name() {
  ::perfetto::protos::VulkanApiEvent_VkDebugUtilsObjectName* _msg = _internal_mutable_vk_debug_utils_object_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name)
  return _msg;
}

// .perfetto.protos.VulkanApiEvent.VkQueueSubmit vk_queue_submit = 2;
inline bool VulkanApiEvent::has_vk_queue_submit() const {
  return event_case() == kVkQueueSubmit;
}
inline bool VulkanApiEvent::_internal_has_vk_queue_submit() const {
  return event_case() == kVkQueueSubmit;
}
inline void VulkanApiEvent::set_has_vk_queue_submit() {
  _impl_._oneof_case_[0] = kVkQueueSubmit;
}
inline void VulkanApiEvent::clear_vk_queue_submit() {
  if (event_case() == kVkQueueSubmit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.vk_queue_submit_;
    }
    clear_has_event();
  }
}
inline ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* VulkanApiEvent::release_vk_queue_submit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.VulkanApiEvent.vk_queue_submit)
  if (event_case() == kVkQueueSubmit) {
    clear_has_event();
    ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* temp = _impl_.event_.vk_queue_submit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vk_queue_submit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VulkanApiEvent_VkQueueSubmit& VulkanApiEvent::_internal_vk_queue_submit() const {
  return event_case() == kVkQueueSubmit
      ? *_impl_.event_.vk_queue_submit_
      : reinterpret_cast<::perfetto::protos::VulkanApiEvent_VkQueueSubmit&>(::perfetto::protos::_VulkanApiEvent_VkQueueSubmit_default_instance_);
}
inline const ::perfetto::protos::VulkanApiEvent_VkQueueSubmit& VulkanApiEvent::vk_queue_submit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VulkanApiEvent.vk_queue_submit)
  return _internal_vk_queue_submit();
}
inline ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* VulkanApiEvent::unsafe_arena_release_vk_queue_submit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.VulkanApiEvent.vk_queue_submit)
  if (event_case() == kVkQueueSubmit) {
    clear_has_event();
    ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* temp = _impl_.event_.vk_queue_submit_;
    _impl_.event_.vk_queue_submit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VulkanApiEvent::unsafe_arena_set_allocated_vk_queue_submit(::perfetto::protos::VulkanApiEvent_VkQueueSubmit* vk_queue_submit) {
  clear_event();
  if (vk_queue_submit) {
    set_has_vk_queue_submit();
    _impl_.event_.vk_queue_submit_ = vk_queue_submit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.VulkanApiEvent.vk_queue_submit)
}
inline ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* VulkanApiEvent::_internal_mutable_vk_queue_submit() {
  if (event_case() != kVkQueueSubmit) {
    clear_event();
    set_has_vk_queue_submit();
    _impl_.event_.vk_queue_submit_ = CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent_VkQueueSubmit >(GetArenaForAllocation());
  }
  return _impl_.event_.vk_queue_submit_;
}
inline ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* VulkanApiEvent::mutable_vk_queue_submit() {
  ::perfetto::protos::VulkanApiEvent_VkQueueSubmit* _msg = _internal_mutable_vk_queue_submit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.VulkanApiEvent.vk_queue_submit)
  return _msg;
}

inline bool VulkanApiEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void VulkanApiEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline VulkanApiEvent::EventCase VulkanApiEvent::event_case() const {
  return VulkanApiEvent::EventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fapi_5fevent_2eproto_2epb_2eh
