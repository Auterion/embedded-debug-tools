// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/vulkan_memory_event.proto

#include "protos/perfetto/trace/gpu/vulkan_memory_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_iid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VulkanMemoryEventAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanMemoryEventAnnotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanMemoryEventAnnotationDefaultTypeInternal() {}
  union {
    VulkanMemoryEventAnnotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanMemoryEventAnnotationDefaultTypeInternal _VulkanMemoryEventAnnotation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VulkanMemoryEvent::VulkanMemoryEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.source_)*/ 0

  , /*decltype(_impl_.operation_)*/ 0

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.memory_address_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.memory_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pid_)*/ 0u

  , /*decltype(_impl_.allocation_scope_)*/ 0

  , /*decltype(_impl_.caller_iid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.device_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.device_memory_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.memory_type_)*/ 0u

  , /*decltype(_impl_.heap_)*/ 0u

  , /*decltype(_impl_.object_handle_)*/ ::uint64_t{0u}
} {}
struct VulkanMemoryEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VulkanMemoryEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VulkanMemoryEventDefaultTypeInternal() {}
  union {
    VulkanMemoryEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VulkanMemoryEventDefaultTypeInternal _VulkanMemoryEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEventAnnotation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEventAnnotation, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEventAnnotation, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEventAnnotation, _impl_.key_iid_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEventAnnotation, _impl_.value_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.source_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.memory_address_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.memory_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.caller_iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.allocation_scope_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.annotations_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.device_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.device_memory_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.memory_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.heap_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEvent, _impl_.object_handle_),
    0,
    1,
    2,
    5,
    3,
    4,
    7,
    6,
    ~0u,
    8,
    9,
    10,
    11,
    12,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::perfetto::protos::VulkanMemoryEventAnnotation)},
        { 17, 39, -1, sizeof(::perfetto::protos::VulkanMemoryEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_VulkanMemoryEventAnnotation_default_instance_._instance,
    &::perfetto::protos::_VulkanMemoryEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n3protos/perfetto/trace/gpu/vulkan_memor"
    "y_event.proto\022\017perfetto.protos\"z\n\033Vulkan"
    "MemoryEventAnnotation\022\017\n\007key_iid\030\001 \001(\004\022\023"
    "\n\tint_value\030\002 \001(\003H\000\022\026\n\014double_value\030\003 \001("
    "\001H\000\022\024\n\nstring_iid\030\004 \001(\004H\000B\007\n\005value\"\350\006\n\021V"
    "ulkanMemoryEvent\0229\n\006source\030\001 \001(\0162).perfe"
    "tto.protos.VulkanMemoryEvent.Source\022\?\n\to"
    "peration\030\002 \001(\0162,.perfetto.protos.VulkanM"
    "emoryEvent.Operation\022\021\n\ttimestamp\030\003 \001(\003\022"
    "\013\n\003pid\030\004 \001(\r\022\026\n\016memory_address\030\005 \001(\006\022\023\n\013"
    "memory_size\030\006 \001(\004\022\022\n\ncaller_iid\030\007 \001(\004\022L\n"
    "\020allocation_scope\030\010 \001(\01622.perfetto.proto"
    "s.VulkanMemoryEvent.AllocationScope\022A\n\013a"
    "nnotations\030\t \003(\0132,.perfetto.protos.Vulka"
    "nMemoryEventAnnotation\022\016\n\006device\030\020 \001(\006\022\025"
    "\n\rdevice_memory\030\021 \001(\006\022\023\n\013memory_type\030\022 \001"
    "(\r\022\014\n\004heap\030\023 \001(\r\022\025\n\robject_handle\030\024 \001(\006\""
    "\205\001\n\006Source\022\026\n\022SOURCE_UNSPECIFIED\020\000\022\021\n\rSO"
    "URCE_DRIVER\020\001\022\021\n\rSOURCE_DEVICE\020\002\022\030\n\024SOUR"
    "CE_DEVICE_MEMORY\020\003\022\021\n\rSOURCE_BUFFER\020\004\022\020\n"
    "\014SOURCE_IMAGE\020\005\"u\n\tOperation\022\022\n\016OP_UNSPE"
    "CIFIED\020\000\022\r\n\tOP_CREATE\020\001\022\016\n\nOP_DESTROY\020\002\022"
    "\013\n\007OP_BIND\020\003\022\024\n\020OP_DESTROY_BOUND\020\004\022\022\n\016OP"
    "_ANNOTATIONS\020\005\"\204\001\n\017AllocationScope\022\025\n\021SC"
    "OPE_UNSPECIFIED\020\000\022\021\n\rSCOPE_COMMAND\020\001\022\020\n\014"
    "SCOPE_OBJECT\020\002\022\017\n\013SCOPE_CACHE\020\003\022\020\n\014SCOPE"
    "_DEVICE\020\004\022\022\n\016SCOPE_INSTANCE\020\005"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto = {
    false,
    false,
    1069,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto,
    "protos/perfetto/trace/gpu/vulkan_memory_event.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VulkanMemoryEvent_Source_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[0];
}
bool VulkanMemoryEvent_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_UNSPECIFIED;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DRIVER;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DEVICE;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_DEVICE_MEMORY;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_BUFFER;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::SOURCE_IMAGE;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::Source_MIN;
constexpr VulkanMemoryEvent_Source VulkanMemoryEvent::Source_MAX;
constexpr int VulkanMemoryEvent::Source_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VulkanMemoryEvent_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[1];
}
bool VulkanMemoryEvent_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_UNSPECIFIED;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_CREATE;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_DESTROY;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_BIND;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_DESTROY_BOUND;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::OP_ANNOTATIONS;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::Operation_MIN;
constexpr VulkanMemoryEvent_Operation VulkanMemoryEvent::Operation_MAX;
constexpr int VulkanMemoryEvent::Operation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VulkanMemoryEvent_AllocationScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[2];
}
bool VulkanMemoryEvent_AllocationScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_UNSPECIFIED;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_COMMAND;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_OBJECT;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_CACHE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_DEVICE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::SCOPE_INSTANCE;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::AllocationScope_MIN;
constexpr VulkanMemoryEvent_AllocationScope VulkanMemoryEvent::AllocationScope_MAX;
constexpr int VulkanMemoryEvent::AllocationScope_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class VulkanMemoryEventAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryEventAnnotation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VulkanMemoryEventAnnotation, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::VulkanMemoryEventAnnotation, _impl_._oneof_case_);
  static void set_has_key_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanMemoryEventAnnotation)
}
VulkanMemoryEventAnnotation::VulkanMemoryEventAnnotation(const VulkanMemoryEventAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VulkanMemoryEventAnnotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_iid_) {}

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.key_iid_ = from._impl_.key_iid_;
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringIid: {
      _this->_internal_set_string_iid(from._internal_string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryEventAnnotation)
}

inline void VulkanMemoryEventAnnotation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_iid_) { ::uint64_t{0u} }

    , decltype(_impl_.value_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

VulkanMemoryEventAnnotation::~VulkanMemoryEventAnnotation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryEventAnnotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanMemoryEventAnnotation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void VulkanMemoryEventAnnotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanMemoryEventAnnotation::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.VulkanMemoryEventAnnotation)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringIid: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void VulkanMemoryEventAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryEventAnnotation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_iid_ = ::uint64_t{0u};
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VulkanMemoryEventAnnotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 key_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_key_iid(&has_bits);
          _impl_.key_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 string_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_string_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VulkanMemoryEventAnnotation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanMemoryEventAnnotation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 key_iid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_key_iid(), target);
  }

  switch (value_case()) {
    case kIntValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          2, this->_internal_int_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this->_internal_double_value(), target);
      break;
    }
    case kStringIid: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this->_internal_string_iid(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanMemoryEventAnnotation)
  return target;
}

::size_t VulkanMemoryEventAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryEventAnnotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 key_iid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_key_iid());
  }

  switch (value_case()) {
    // int64 int_value = 2;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 9;
      break;
    }
    // uint64 string_iid = 4;
    case kStringIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VulkanMemoryEventAnnotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VulkanMemoryEventAnnotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VulkanMemoryEventAnnotation::GetClassData() const { return &_class_data_; }


void VulkanMemoryEventAnnotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VulkanMemoryEventAnnotation*>(&to_msg);
  auto& from = static_cast<const VulkanMemoryEventAnnotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryEventAnnotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_key_iid(from._internal_key_iid());
  }
  switch (from.value_case()) {
    case kIntValue: {
      _this->_internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringIid: {
      _this->_internal_set_string_iid(from._internal_string_iid());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VulkanMemoryEventAnnotation::CopyFrom(const VulkanMemoryEventAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryEventAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryEventAnnotation::IsInitialized() const {
  return true;
}

void VulkanMemoryEventAnnotation::InternalSwap(VulkanMemoryEventAnnotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.key_iid_, other->_impl_.key_iid_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VulkanMemoryEventAnnotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[0]);
}
// ===================================================================

class VulkanMemoryEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VulkanMemoryEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VulkanMemoryEvent, _impl_._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memory_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_memory_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_caller_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_allocation_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_device_memory(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_memory_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_heap(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_object_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

VulkanMemoryEvent::VulkanMemoryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.VulkanMemoryEvent)
}
VulkanMemoryEvent::VulkanMemoryEvent(const VulkanMemoryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VulkanMemoryEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.source_) {}

    , decltype(_impl_.operation_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.memory_address_) {}

    , decltype(_impl_.memory_size_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.allocation_scope_) {}

    , decltype(_impl_.caller_iid_) {}

    , decltype(_impl_.device_) {}

    , decltype(_impl_.device_memory_) {}

    , decltype(_impl_.memory_type_) {}

    , decltype(_impl_.heap_) {}

    , decltype(_impl_.object_handle_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.object_handle_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.object_handle_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.VulkanMemoryEvent)
}

inline void VulkanMemoryEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.source_) { 0 }

    , decltype(_impl_.operation_) { 0 }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.memory_address_) { ::uint64_t{0u} }

    , decltype(_impl_.memory_size_) { ::uint64_t{0u} }

    , decltype(_impl_.pid_) { 0u }

    , decltype(_impl_.allocation_scope_) { 0 }

    , decltype(_impl_.caller_iid_) { ::uint64_t{0u} }

    , decltype(_impl_.device_) { ::uint64_t{0u} }

    , decltype(_impl_.device_memory_) { ::uint64_t{0u} }

    , decltype(_impl_.memory_type_) { 0u }

    , decltype(_impl_.heap_) { 0u }

    , decltype(_impl_.object_handle_) { ::uint64_t{0u} }

  };
}

VulkanMemoryEvent::~VulkanMemoryEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.VulkanMemoryEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VulkanMemoryEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_annotations()->~RepeatedPtrField();
}

void VulkanMemoryEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VulkanMemoryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.VulkanMemoryEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_annotations()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.source_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.caller_iid_) -
        reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.caller_iid_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.device_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.object_handle_) -
        reinterpret_cast<char*>(&_impl_.device_)) + sizeof(_impl_.object_handle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VulkanMemoryEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_Source_IsValid(static_cast<int>(val)))) {
            _internal_set_source(static_cast<::perfetto::protos::VulkanMemoryEvent_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_Operation_IsValid(static_cast<int>(val)))) {
            _internal_set_operation(static_cast<::perfetto::protos::VulkanMemoryEvent_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed64 memory_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 41)) {
          _Internal::set_has_memory_address(&has_bits);
          _impl_.memory_address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 memory_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_memory_size(&has_bits);
          _impl_.memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 caller_iid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_caller_iid(&has_bits);
          _impl_.caller_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::VulkanMemoryEvent_AllocationScope_IsValid(static_cast<int>(val)))) {
            _internal_set_allocation_scope(static_cast<::perfetto::protos::VulkanMemoryEvent_AllocationScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed64 device = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 129)) {
          _Internal::set_has_device(&has_bits);
          _impl_.device_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed64 device_memory = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 137)) {
          _Internal::set_has_device_memory(&has_bits);
          _impl_.device_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 memory_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_memory_type(&has_bits);
          _impl_.memory_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 heap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_heap(&has_bits);
          _impl_.heap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional fixed64 object_handle = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 161)) {
          _Internal::set_has_object_handle(&has_bits);
          _impl_.object_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint64_t>(ptr);
          ptr += sizeof(::uint64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VulkanMemoryEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.VulkanMemoryEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_source(), target);
  }

  // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_operation(), target);
  }

  // optional int64 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  // optional uint32 pid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_pid(), target);
  }

  // optional fixed64 memory_address = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this->_internal_memory_address(), target);
  }

  // optional uint64 memory_size = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_memory_size(), target);
  }

  // optional uint64 caller_iid = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_caller_iid(), target);
  }

  // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_allocation_scope(), target);
  }

  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed64 device = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        16, this->_internal_device(), target);
  }

  // optional fixed64 device_memory = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        17, this->_internal_device_memory(), target);
  }

  // optional uint32 memory_type = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_memory_type(), target);
  }

  // optional uint32 heap = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_heap(), target);
  }

  // optional fixed64 object_handle = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        20, this->_internal_object_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.VulkanMemoryEvent)
  return target;
}

::size_t VulkanMemoryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.VulkanMemoryEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.VulkanMemoryEventAnnotation annotations = 9;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_internal_annotations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.VulkanMemoryEvent.Source source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

    // optional .perfetto.protos.VulkanMemoryEvent.Operation operation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional fixed64 memory_address = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional uint64 memory_size = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_memory_size());
    }

    // optional uint32 pid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pid());
    }

    // optional .perfetto.protos.VulkanMemoryEvent.AllocationScope allocation_scope = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_allocation_scope());
    }

    // optional uint64 caller_iid = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_caller_iid());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional fixed64 device = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 10;
    }

    // optional fixed64 device_memory = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 10;
    }

    // optional uint32 memory_type = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_memory_type());
    }

    // optional uint32 heap = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_heap());
    }

    // optional fixed64 object_handle = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 10;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VulkanMemoryEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VulkanMemoryEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VulkanMemoryEvent::GetClassData() const { return &_class_data_; }


void VulkanMemoryEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VulkanMemoryEvent*>(&to_msg);
  auto& from = static_cast<const VulkanMemoryEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.VulkanMemoryEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_annotations()->MergeFrom(from._internal_annotations());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.memory_address_ = from._impl_.memory_address_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.memory_size_ = from._impl_.memory_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.allocation_scope_ = from._impl_.allocation_scope_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.caller_iid_ = from._impl_.caller_iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.device_ = from._impl_.device_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.device_memory_ = from._impl_.device_memory_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.memory_type_ = from._impl_.memory_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.heap_ = from._impl_.heap_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.object_handle_ = from._impl_.object_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VulkanMemoryEvent::CopyFrom(const VulkanMemoryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.VulkanMemoryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulkanMemoryEvent::IsInitialized() const {
  return true;
}

void VulkanMemoryEvent::InternalSwap(VulkanMemoryEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_annotations()->InternalSwap(other->_internal_mutable_annotations());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VulkanMemoryEvent, _impl_.object_handle_)
      + sizeof(VulkanMemoryEvent::_impl_.object_handle_)
      - PROTOBUF_FIELD_OFFSET(VulkanMemoryEvent, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VulkanMemoryEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fgpu_2fvulkan_5fmemory_5fevent_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryEventAnnotation*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEventAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanMemoryEventAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::VulkanMemoryEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::VulkanMemoryEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
