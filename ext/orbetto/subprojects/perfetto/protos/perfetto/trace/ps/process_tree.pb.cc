// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_tree.proto

#include "protos/perfetto/trace/ps/process_tree.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ProcessTree_Thread::ProcessTree_Thread(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nstid_)*/ {}

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tid_)*/ 0

  , /*decltype(_impl_.tgid_)*/ 0
} {}
struct ProcessTree_ThreadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTree_ThreadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTree_ThreadDefaultTypeInternal() {}
  union {
    ProcessTree_Thread _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTree_ThreadDefaultTypeInternal _ProcessTree_Thread_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProcessTree_Process::ProcessTree_Process(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmdline_)*/{}
  , /*decltype(_impl_.threads_deprecated_)*/{}
  , /*decltype(_impl_.nspid_)*/ {}

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.ppid_)*/ 0

  , /*decltype(_impl_.uid_)*/ 0
} {}
struct ProcessTree_ProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTree_ProcessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTree_ProcessDefaultTypeInternal() {}
  union {
    ProcessTree_Process _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTree_ProcessDefaultTypeInternal _ProcessTree_Process_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProcessTree::ProcessTree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.processes_)*/{}
  , /*decltype(_impl_.threads_)*/{}
  , /*decltype(_impl_.collection_end_timestamp_)*/ ::uint64_t{0u}
} {}
struct ProcessTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTreeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTreeDefaultTypeInternal() {}
  union {
    ProcessTree _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTreeDefaultTypeInternal _ProcessTree_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Thread, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Thread, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Thread, _impl_.tid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Thread, _impl_.tgid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Thread, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Thread, _impl_.nstid_),
    1,
    2,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_.ppid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_.cmdline_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_.threads_deprecated_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_.uid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree_Process, _impl_.nspid_),
    0,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree, _impl_.processes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree, _impl_.threads_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessTree, _impl_.collection_end_timestamp_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::perfetto::protos::ProcessTree_Thread)},
        { 16, 30, -1, sizeof(::perfetto::protos::ProcessTree_Process)},
        { 36, 47, -1, sizeof(::perfetto::protos::ProcessTree)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ProcessTree_Thread_default_instance_._instance,
    &::perfetto::protos::_ProcessTree_Process_default_instance_._instance,
    &::perfetto::protos::_ProcessTree_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+protos/perfetto/trace/ps/process_tree."
    "proto\022\017perfetto.protos\"\371\002\n\013ProcessTree\0227"
    "\n\tprocesses\030\001 \003(\0132$.perfetto.protos.Proc"
    "essTree.Process\0224\n\007threads\030\002 \003(\0132#.perfe"
    "tto.protos.ProcessTree.Thread\022 \n\030collect"
    "ion_end_timestamp\030\003 \001(\004\032@\n\006Thread\022\013\n\003tid"
    "\030\001 \001(\005\022\014\n\004tgid\030\003 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005ns"
    "tid\030\004 \003(\005\032\226\001\n\007Process\022\013\n\003pid\030\001 \001(\005\022\014\n\004pp"
    "id\030\002 \001(\005\022\017\n\007cmdline\030\003 \003(\t\022C\n\022threads_dep"
    "recated\030\004 \003(\0132#.perfetto.protos.ProcessT"
    "ree.ThreadB\002\030\001\022\013\n\003uid\030\005 \001(\005\022\r\n\005nspid\030\006 \003"
    "(\005"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto = {
    false,
    false,
    442,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto,
    "protos/perfetto/trace/ps/process_tree.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class ProcessTree_Thread::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessTree_Thread>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessTree_Thread, _impl_._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessTree_Thread::ProcessTree_Thread(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessTree.Thread)
}
ProcessTree_Thread::ProcessTree_Thread(const ProcessTree_Thread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessTree_Thread* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nstid_) { from._impl_.nstid_ }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.tid_) {}

    , decltype(_impl_.tgid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tid_, &from._impl_.tid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tgid_) -
    reinterpret_cast<char*>(&_impl_.tid_)) + sizeof(_impl_.tgid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessTree.Thread)
}

inline void ProcessTree_Thread::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nstid_) { arena }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.tid_) { 0 }

    , decltype(_impl_.tgid_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessTree_Thread::~ProcessTree_Thread() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessTree.Thread)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTree_Thread::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nstid_.~RepeatedField();
  _impl_.name_.Destroy();
}

void ProcessTree_Thread::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTree_Thread::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessTree.Thread)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_nstid()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.tid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tgid_) -
        reinterpret_cast<char*>(&_impl_.tid_)) + sizeof(_impl_.tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTree_Thread::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ProcessTree.Thread.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_tgid(&has_bits);
          _impl_.tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 nstid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nstid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nstid(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessTree_Thread::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessTree.Thread)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_tid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ProcessTree.Thread.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_tgid(), target);
  }

  // repeated int32 nstid = 4;
  for (int i = 0, n = this->_internal_nstid_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_nstid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessTree.Thread)
  return target;
}

::size_t ProcessTree_Thread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessTree.Thread)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nstid = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_nstid())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_nstid_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 tid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tid());
    }

    // optional int32 tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_tgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessTree_Thread::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessTree_Thread::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessTree_Thread::GetClassData() const { return &_class_data_; }


void ProcessTree_Thread::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessTree_Thread*>(&to_msg);
  auto& from = static_cast<const ProcessTree_Thread&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessTree.Thread)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nstid_.MergeFrom(from._impl_.nstid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tid_ = from._impl_.tid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tgid_ = from._impl_.tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessTree_Thread::CopyFrom(const ProcessTree_Thread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessTree.Thread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTree_Thread::IsInitialized() const {
  return true;
}

void ProcessTree_Thread::InternalSwap(ProcessTree_Thread* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nstid_.InternalSwap(&other->_impl_.nstid_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTree_Thread, _impl_.tgid_)
      + sizeof(ProcessTree_Thread::_impl_.tgid_)
      - PROTOBUF_FIELD_OFFSET(ProcessTree_Thread, _impl_.tid_)>(
          reinterpret_cast<char*>(&_impl_.tid_),
          reinterpret_cast<char*>(&other->_impl_.tid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTree_Thread::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto[0]);
}
// ===================================================================

class ProcessTree_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessTree_Process>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessTree_Process, _impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ppid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ProcessTree_Process::ProcessTree_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessTree.Process)
}
ProcessTree_Process::ProcessTree_Process(const ProcessTree_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessTree_Process* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_){from._impl_.cmdline_}
    , decltype(_impl_.threads_deprecated_){from._impl_.threads_deprecated_}
    , decltype(_impl_.nspid_) { from._impl_.nspid_ }

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.ppid_) {}

    , decltype(_impl_.uid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.uid_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.uid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessTree.Process)
}

inline void ProcessTree_Process::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmdline_){arena}
    , decltype(_impl_.threads_deprecated_){arena}
    , decltype(_impl_.nspid_) { arena }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.ppid_) { 0 }

    , decltype(_impl_.uid_) { 0 }

  };
}

ProcessTree_Process::~ProcessTree_Process() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessTree.Process)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTree_Process::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cmdline()->~RepeatedPtrField();
  _internal_mutable_threads_deprecated()->~RepeatedPtrField();
  _impl_.nspid_.~RepeatedField();
}

void ProcessTree_Process::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTree_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessTree.Process)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cmdline()->Clear();
  _internal_mutable_threads_deprecated()->Clear();
  _internal_mutable_nspid()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.uid_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.uid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTree_Process::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ppid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ppid(&has_bits);
          _impl_.ppid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string cmdline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmdline();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.ProcessTree.Process.cmdline");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads_deprecated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_uid(&has_bits);
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 nspid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_nspid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nspid(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessTree_Process::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessTree.Process)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_pid(), target);
  }

  // optional int32 ppid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_ppid(), target);
  }

  // repeated string cmdline = 3;
  for (int i = 0, n = this->_internal_cmdline_size(); i < n; ++i) {
    const auto& s = this->_internal_cmdline(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ProcessTree.Process.cmdline");
    target = stream->WriteString(3, s, target);
  }

  // repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threads_deprecated_size()); i < n; i++) {
    const auto& repfield = this->_internal_threads_deprecated(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 uid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_uid(), target);
  }

  // repeated int32 nspid = 6;
  for (int i = 0, n = this->_internal_nspid_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_nspid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessTree.Process)
  return target;
}

::size_t ProcessTree_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessTree.Process)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmdline = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_cmdline().size());
  for (int i = 0, n = _internal_cmdline().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_cmdline().Get(i));
  }

  // repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
  total_size += 1UL * this->_internal_threads_deprecated_size();
  for (const auto& msg : this->_internal_threads_deprecated()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 nspid = 6;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_nspid())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_nspid_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional int32 ppid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ppid());
    }

    // optional int32 uid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_uid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessTree_Process::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessTree_Process::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessTree_Process::GetClassData() const { return &_class_data_; }


void ProcessTree_Process::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessTree_Process*>(&to_msg);
  auto& from = static_cast<const ProcessTree_Process&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessTree.Process)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cmdline()->MergeFrom(from._internal_cmdline());
  _this->_internal_mutable_threads_deprecated()->MergeFrom(from._internal_threads_deprecated());
  _this->_impl_.nspid_.MergeFrom(from._impl_.nspid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ppid_ = from._impl_.ppid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uid_ = from._impl_.uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessTree_Process::CopyFrom(const ProcessTree_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessTree.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTree_Process::IsInitialized() const {
  return true;
}

void ProcessTree_Process::InternalSwap(ProcessTree_Process* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_cmdline()->InternalSwap(
      other->_internal_mutable_cmdline());
  _internal_mutable_threads_deprecated()->InternalSwap(other->_internal_mutable_threads_deprecated());
  _impl_.nspid_.InternalSwap(&other->_impl_.nspid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTree_Process, _impl_.uid_)
      + sizeof(ProcessTree_Process::_impl_.uid_)
      - PROTOBUF_FIELD_OFFSET(ProcessTree_Process, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTree_Process::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto[1]);
}
// ===================================================================

class ProcessTree::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessTree>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessTree, _impl_._has_bits_);
  static void set_has_collection_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessTree::ProcessTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessTree)
}
ProcessTree::ProcessTree(const ProcessTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessTree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.processes_){from._impl_.processes_}
    , decltype(_impl_.threads_){from._impl_.threads_}
    , decltype(_impl_.collection_end_timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.collection_end_timestamp_ = from._impl_.collection_end_timestamp_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessTree)
}

inline void ProcessTree::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.processes_){arena}
    , decltype(_impl_.threads_){arena}
    , decltype(_impl_.collection_end_timestamp_) { ::uint64_t{0u} }

  };
}

ProcessTree::~ProcessTree() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTree::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_processes()->~RepeatedPtrField();
  _internal_mutable_threads()->~RepeatedPtrField();
}

void ProcessTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTree::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessTree)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_processes()->Clear();
  _internal_mutable_threads()->Clear();
  _impl_.collection_end_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProcessTree.Process processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ProcessTree.Thread threads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 collection_end_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_collection_end_timestamp(&has_bits);
          _impl_.collection_end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessTree::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessTree)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessTree.Process processes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .perfetto.protos.ProcessTree.Thread threads = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threads_size()); i < n; i++) {
    const auto& repfield = this->_internal_threads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 collection_end_timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_collection_end_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessTree)
  return target;
}

::size_t ProcessTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessTree)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessTree.Process processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->_internal_processes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProcessTree.Thread threads = 2;
  total_size += 1UL * this->_internal_threads_size();
  for (const auto& msg : this->_internal_threads()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 collection_end_timestamp = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_collection_end_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessTree::GetClassData() const { return &_class_data_; }


void ProcessTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessTree*>(&to_msg);
  auto& from = static_cast<const ProcessTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessTree)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_processes()->MergeFrom(from._internal_processes());
  _this->_internal_mutable_threads()->MergeFrom(from._internal_threads());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_collection_end_timestamp(from._internal_collection_end_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessTree::CopyFrom(const ProcessTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTree::IsInitialized() const {
  return true;
}

void ProcessTree::InternalSwap(ProcessTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_processes()->InternalSwap(other->_internal_mutable_processes());
  _internal_mutable_threads()->InternalSwap(other->_internal_mutable_threads());

  swap(_impl_.collection_end_timestamp_, other->_impl_.collection_end_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessTree_Thread*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessTree_Thread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessTree_Thread >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessTree_Process*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessTree_Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessTree_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessTree*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessTree >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
