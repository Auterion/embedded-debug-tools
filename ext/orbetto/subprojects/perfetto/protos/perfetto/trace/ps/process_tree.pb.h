// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_tree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
namespace perfetto {
namespace protos {
class ProcessTree;
struct ProcessTreeDefaultTypeInternal;
extern ProcessTreeDefaultTypeInternal _ProcessTree_default_instance_;
class ProcessTree_Process;
struct ProcessTree_ProcessDefaultTypeInternal;
extern ProcessTree_ProcessDefaultTypeInternal _ProcessTree_Process_default_instance_;
class ProcessTree_Thread;
struct ProcessTree_ThreadDefaultTypeInternal;
extern ProcessTree_ThreadDefaultTypeInternal _ProcessTree_Thread_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ProcessTree* Arena::CreateMaybeMessage<::perfetto::protos::ProcessTree>(Arena*);
template <>
::perfetto::protos::ProcessTree_Process* Arena::CreateMaybeMessage<::perfetto::protos::ProcessTree_Process>(Arena*);
template <>
::perfetto::protos::ProcessTree_Thread* Arena::CreateMaybeMessage<::perfetto::protos::ProcessTree_Thread>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class ProcessTree_Thread final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessTree.Thread) */ {
 public:
  inline ProcessTree_Thread() : ProcessTree_Thread(nullptr) {}
  ~ProcessTree_Thread() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessTree_Thread(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTree_Thread(const ProcessTree_Thread& from);
  ProcessTree_Thread(ProcessTree_Thread&& from) noexcept
    : ProcessTree_Thread() {
    *this = ::std::move(from);
  }

  inline ProcessTree_Thread& operator=(const ProcessTree_Thread& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTree_Thread& operator=(ProcessTree_Thread&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTree_Thread& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTree_Thread* internal_default_instance() {
    return reinterpret_cast<const ProcessTree_Thread*>(
               &_ProcessTree_Thread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessTree_Thread& a, ProcessTree_Thread& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTree_Thread* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTree_Thread* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTree_Thread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTree_Thread>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTree_Thread& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTree_Thread& from) {
    ProcessTree_Thread::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTree_Thread* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProcessTree.Thread";
  }
  protected:
  explicit ProcessTree_Thread(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNstidFieldNumber = 4,
    kNameFieldNumber = 2,
    kTidFieldNumber = 1,
    kTgidFieldNumber = 3,
  };
  // repeated int32 nstid = 4;
  int nstid_size() const;
  private:
  int _internal_nstid_size() const;

  public:
  void clear_nstid() ;
  ::int32_t nstid(int index) const;
  void set_nstid(int index, ::int32_t value);
  void add_nstid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& nstid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_nstid();

  private:
  ::int32_t _internal_nstid(int index) const;
  void _internal_add_nstid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_nstid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_nstid();

  public:
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 tid = 1;
  bool has_tid() const;
  void clear_tid() ;
  ::int32_t tid() const;
  void set_tid(::int32_t value);

  private:
  ::int32_t _internal_tid() const;
  void _internal_set_tid(::int32_t value);

  public:
  // optional int32 tgid = 3;
  bool has_tgid() const;
  void clear_tgid() ;
  ::int32_t tgid() const;
  void set_tgid(::int32_t value);

  private:
  ::int32_t _internal_tgid() const;
  void _internal_set_tgid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree.Thread)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> nstid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t tid_;
    ::int32_t tgid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
};// -------------------------------------------------------------------

class ProcessTree_Process final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessTree.Process) */ {
 public:
  inline ProcessTree_Process() : ProcessTree_Process(nullptr) {}
  ~ProcessTree_Process() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessTree_Process(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTree_Process(const ProcessTree_Process& from);
  ProcessTree_Process(ProcessTree_Process&& from) noexcept
    : ProcessTree_Process() {
    *this = ::std::move(from);
  }

  inline ProcessTree_Process& operator=(const ProcessTree_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTree_Process& operator=(ProcessTree_Process&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTree_Process& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTree_Process* internal_default_instance() {
    return reinterpret_cast<const ProcessTree_Process*>(
               &_ProcessTree_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessTree_Process& a, ProcessTree_Process& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTree_Process* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTree_Process* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTree_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTree_Process>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTree_Process& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTree_Process& from) {
    ProcessTree_Process::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTree_Process* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProcessTree.Process";
  }
  protected:
  explicit ProcessTree_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdlineFieldNumber = 3,
    kThreadsDeprecatedFieldNumber = 4,
    kNspidFieldNumber = 6,
    kPidFieldNumber = 1,
    kPpidFieldNumber = 2,
    kUidFieldNumber = 5,
  };
  // repeated string cmdline = 3;
  int cmdline_size() const;
  private:
  int _internal_cmdline_size() const;

  public:
  void clear_cmdline() ;
  const std::string& cmdline(int index) const;
  std::string* mutable_cmdline(int index);
  void set_cmdline(int index, const std::string& value);
  void set_cmdline(int index, std::string&& value);
  void set_cmdline(int index, const char* value);
  void set_cmdline(int index, const char* value, std::size_t size);
  void set_cmdline(int index, absl::string_view value);
  std::string* add_cmdline();
  void add_cmdline(const std::string& value);
  void add_cmdline(std::string&& value);
  void add_cmdline(const char* value);
  void add_cmdline(const char* value, std::size_t size);
  void add_cmdline(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cmdline();

  private:
  const std::string& _internal_cmdline(int index) const;
  std::string* _internal_add_cmdline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_cmdline() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_cmdline();

  public:
  // repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
  [[deprecated]]  int threads_deprecated_size() const;
  private:
  int _internal_threads_deprecated_size() const;

  public:
  [[deprecated]]  void clear_threads_deprecated() ;
  [[deprecated]] ::perfetto::protos::ProcessTree_Thread* mutable_threads_deprecated(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
      mutable_threads_deprecated();
  private:
  const ::perfetto::protos::ProcessTree_Thread& _internal_threads_deprecated(int index) const;
  ::perfetto::protos::ProcessTree_Thread* _internal_add_threads_deprecated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>& _internal_threads_deprecated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>* _internal_mutable_threads_deprecated();
  public:
  [[deprecated]] const ::perfetto::protos::ProcessTree_Thread& threads_deprecated(int index) const;
  [[deprecated]] ::perfetto::protos::ProcessTree_Thread* add_threads_deprecated();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
      threads_deprecated() const;
  // repeated int32 nspid = 6;
  int nspid_size() const;
  private:
  int _internal_nspid_size() const;

  public:
  void clear_nspid() ;
  ::int32_t nspid(int index) const;
  void set_nspid(int index, ::int32_t value);
  void add_nspid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& nspid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_nspid();

  private:
  ::int32_t _internal_nspid(int index) const;
  void _internal_add_nspid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_nspid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_nspid();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 ppid = 2;
  bool has_ppid() const;
  void clear_ppid() ;
  ::int32_t ppid() const;
  void set_ppid(::int32_t value);

  private:
  ::int32_t _internal_ppid() const;
  void _internal_set_ppid(::int32_t value);

  public:
  // optional int32 uid = 5;
  bool has_uid() const;
  void clear_uid() ;
  ::int32_t uid() const;
  void set_uid(::int32_t value);

  private:
  ::int32_t _internal_uid() const;
  void _internal_set_uid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree.Process)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cmdline_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread > threads_deprecated_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> nspid_;
    ::int32_t pid_;
    ::int32_t ppid_;
    ::int32_t uid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
};// -------------------------------------------------------------------

class ProcessTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ProcessTree) */ {
 public:
  inline ProcessTree() : ProcessTree(nullptr) {}
  ~ProcessTree() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessTree(const ProcessTree& from);
  ProcessTree(ProcessTree&& from) noexcept
    : ProcessTree() {
    *this = ::std::move(from);
  }

  inline ProcessTree& operator=(const ProcessTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessTree& operator=(ProcessTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessTree* internal_default_instance() {
    return reinterpret_cast<const ProcessTree*>(
               &_ProcessTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessTree& a, ProcessTree& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessTree* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProcessTree& from) {
    ProcessTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ProcessTree";
  }
  protected:
  explicit ProcessTree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcessTree_Thread Thread;
  typedef ProcessTree_Process Process;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessesFieldNumber = 1,
    kThreadsFieldNumber = 2,
    kCollectionEndTimestampFieldNumber = 3,
  };
  // repeated .perfetto.protos.ProcessTree.Process processes = 1;
  int processes_size() const;
  private:
  int _internal_processes_size() const;

  public:
  void clear_processes() ;
  ::perfetto::protos::ProcessTree_Process* mutable_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >*
      mutable_processes();
  private:
  const ::perfetto::protos::ProcessTree_Process& _internal_processes(int index) const;
  ::perfetto::protos::ProcessTree_Process* _internal_add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Process>& _internal_processes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Process>* _internal_mutable_processes();
  public:
  const ::perfetto::protos::ProcessTree_Process& processes(int index) const;
  ::perfetto::protos::ProcessTree_Process* add_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >&
      processes() const;
  // repeated .perfetto.protos.ProcessTree.Thread threads = 2;
  int threads_size() const;
  private:
  int _internal_threads_size() const;

  public:
  void clear_threads() ;
  ::perfetto::protos::ProcessTree_Thread* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
      mutable_threads();
  private:
  const ::perfetto::protos::ProcessTree_Thread& _internal_threads(int index) const;
  ::perfetto::protos::ProcessTree_Thread* _internal_add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>& _internal_threads() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>* _internal_mutable_threads();
  public:
  const ::perfetto::protos::ProcessTree_Thread& threads(int index) const;
  ::perfetto::protos::ProcessTree_Thread* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
      threads() const;
  // optional uint64 collection_end_timestamp = 3;
  bool has_collection_end_timestamp() const;
  void clear_collection_end_timestamp() ;
  ::uint64_t collection_end_timestamp() const;
  void set_collection_end_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_collection_end_timestamp() const;
  void _internal_set_collection_end_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ProcessTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process > processes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread > threads_;
    ::uint64_t collection_end_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessTree_Thread

// optional int32 tid = 1;
inline bool ProcessTree_Thread::has_tid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProcessTree_Thread::clear_tid() {
  _impl_.tid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ProcessTree_Thread::tid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.tid)
  return _internal_tid();
}
inline void ProcessTree_Thread::set_tid(::int32_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.tid)
}
inline ::int32_t ProcessTree_Thread::_internal_tid() const {
  return _impl_.tid_;
}
inline void ProcessTree_Thread::_internal_set_tid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tid_ = value;
}

// optional int32 tgid = 3;
inline bool ProcessTree_Thread::has_tgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProcessTree_Thread::clear_tgid() {
  _impl_.tgid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ProcessTree_Thread::tgid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.tgid)
  return _internal_tgid();
}
inline void ProcessTree_Thread::set_tgid(::int32_t value) {
  _internal_set_tgid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.tgid)
}
inline ::int32_t ProcessTree_Thread::_internal_tgid() const {
  return _impl_.tgid_;
}
inline void ProcessTree_Thread::_internal_set_tgid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tgid_ = value;
}

// optional string name = 2;
inline bool ProcessTree_Thread::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProcessTree_Thread::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessTree_Thread::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessTree_Thread::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.name)
}
inline std::string* ProcessTree_Thread::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.Thread.name)
  return _s;
}
inline const std::string& ProcessTree_Thread::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProcessTree_Thread::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProcessTree_Thread::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ProcessTree_Thread::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ProcessTree.Thread.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ProcessTree_Thread::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ProcessTree.Thread.name)
}

// repeated int32 nstid = 4;
inline int ProcessTree_Thread::_internal_nstid_size() const {
  return _impl_.nstid_.size();
}
inline int ProcessTree_Thread::nstid_size() const {
  return _internal_nstid_size();
}
inline void ProcessTree_Thread::clear_nstid() {
  _internal_mutable_nstid()->Clear();
}
inline ::int32_t ProcessTree_Thread::nstid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Thread.nstid)
  return _internal_nstid(index);
}
inline void ProcessTree_Thread::set_nstid(int index, ::int32_t value) {
  _internal_mutable_nstid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Thread.nstid)
}
inline void ProcessTree_Thread::add_nstid(::int32_t value) {
  _internal_add_nstid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Thread.nstid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ProcessTree_Thread::nstid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.Thread.nstid)
  return _internal_nstid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ProcessTree_Thread::mutable_nstid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.Thread.nstid)
  return _internal_mutable_nstid();
}

inline ::int32_t ProcessTree_Thread::_internal_nstid(int index) const {
  return _internal_nstid().Get(index);
}
inline void ProcessTree_Thread::_internal_add_nstid(::int32_t value) {
  _internal_mutable_nstid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ProcessTree_Thread::_internal_nstid() const {
  return _impl_.nstid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ProcessTree_Thread::_internal_mutable_nstid() {
  return &_impl_.nstid_;
}

// -------------------------------------------------------------------

// ProcessTree_Process

// optional int32 pid = 1;
inline bool ProcessTree_Process::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProcessTree_Process::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ProcessTree_Process::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.pid)
  return _internal_pid();
}
inline void ProcessTree_Process::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.pid)
}
inline ::int32_t ProcessTree_Process::_internal_pid() const {
  return _impl_.pid_;
}
inline void ProcessTree_Process::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_ = value;
}

// optional int32 ppid = 2;
inline bool ProcessTree_Process::has_ppid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProcessTree_Process::clear_ppid() {
  _impl_.ppid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ProcessTree_Process::ppid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.ppid)
  return _internal_ppid();
}
inline void ProcessTree_Process::set_ppid(::int32_t value) {
  _internal_set_ppid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.ppid)
}
inline ::int32_t ProcessTree_Process::_internal_ppid() const {
  return _impl_.ppid_;
}
inline void ProcessTree_Process::_internal_set_ppid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ppid_ = value;
}

// repeated string cmdline = 3;
inline int ProcessTree_Process::_internal_cmdline_size() const {
  return _impl_.cmdline_.size();
}
inline int ProcessTree_Process::cmdline_size() const {
  return _internal_cmdline_size();
}
inline void ProcessTree_Process::clear_cmdline() {
  _internal_mutable_cmdline()->Clear();
}
inline std::string* ProcessTree_Process::add_cmdline() {
  std::string* _s = _internal_add_cmdline();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.ProcessTree.Process.cmdline)
  return _s;
}
inline const std::string& ProcessTree_Process::cmdline(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.cmdline)
  return _internal_cmdline(index);
}
inline std::string* ProcessTree_Process::mutable_cmdline(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.Process.cmdline)
  return _internal_mutable_cmdline()->Mutable(index);
}
inline void ProcessTree_Process::set_cmdline(int index, const std::string& value) {
  _internal_mutable_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::set_cmdline(int index, std::string&& value) {
  _internal_mutable_cmdline()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::set_cmdline(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cmdline()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::set_cmdline(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_cmdline()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::set_cmdline(int index, absl::string_view value) {
  _internal_mutable_cmdline()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(const std::string& value) {
  _internal_mutable_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(std::string&& value) {
  _internal_mutable_cmdline()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cmdline()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(const char* value, std::size_t size) {
  _internal_mutable_cmdline()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.ProcessTree.Process.cmdline)
}
inline void ProcessTree_Process::add_cmdline(absl::string_view value) {
  _internal_mutable_cmdline()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.ProcessTree.Process.cmdline)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessTree_Process::cmdline() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.Process.cmdline)
  return _internal_cmdline();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ProcessTree_Process::mutable_cmdline() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.Process.cmdline)
  return _internal_mutable_cmdline();
}
inline const std::string& ProcessTree_Process::_internal_cmdline(int index) const {
  return _internal_cmdline().Get(index);
}
inline std::string* ProcessTree_Process::_internal_add_cmdline() {
  return _internal_mutable_cmdline()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessTree_Process::_internal_cmdline() const {
  return _impl_.cmdline_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessTree_Process::_internal_mutable_cmdline() {
  return &_impl_.cmdline_;
}

// repeated .perfetto.protos.ProcessTree.Thread threads_deprecated = 4 [deprecated = true];
inline int ProcessTree_Process::_internal_threads_deprecated_size() const {
  return _impl_.threads_deprecated_.size();
}
inline int ProcessTree_Process::threads_deprecated_size() const {
  return _internal_threads_deprecated_size();
}
inline void ProcessTree_Process::clear_threads_deprecated() {
  _internal_mutable_threads_deprecated()->Clear();
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree_Process::mutable_threads_deprecated(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return _internal_mutable_threads_deprecated()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
ProcessTree_Process::mutable_threads_deprecated() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return _internal_mutable_threads_deprecated();
}
inline const ::perfetto::protos::ProcessTree_Thread& ProcessTree_Process::_internal_threads_deprecated(int index) const {
  return _internal_threads_deprecated().Get(index);
}
inline const ::perfetto::protos::ProcessTree_Thread& ProcessTree_Process::threads_deprecated(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return _internal_threads_deprecated(index);
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree_Process::_internal_add_threads_deprecated() {
  return _internal_mutable_threads_deprecated()->Add();
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree_Process::add_threads_deprecated() {
  ::perfetto::protos::ProcessTree_Thread* _add = _internal_add_threads_deprecated();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
ProcessTree_Process::threads_deprecated() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.Process.threads_deprecated)
  return _internal_threads_deprecated();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>&
ProcessTree_Process::_internal_threads_deprecated() const {
  return _impl_.threads_deprecated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>*
ProcessTree_Process::_internal_mutable_threads_deprecated() {
  return &_impl_.threads_deprecated_;
}

// optional int32 uid = 5;
inline bool ProcessTree_Process::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProcessTree_Process::clear_uid() {
  _impl_.uid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ProcessTree_Process::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.uid)
  return _internal_uid();
}
inline void ProcessTree_Process::set_uid(::int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.uid)
}
inline ::int32_t ProcessTree_Process::_internal_uid() const {
  return _impl_.uid_;
}
inline void ProcessTree_Process::_internal_set_uid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uid_ = value;
}

// repeated int32 nspid = 6;
inline int ProcessTree_Process::_internal_nspid_size() const {
  return _impl_.nspid_.size();
}
inline int ProcessTree_Process::nspid_size() const {
  return _internal_nspid_size();
}
inline void ProcessTree_Process::clear_nspid() {
  _internal_mutable_nspid()->Clear();
}
inline ::int32_t ProcessTree_Process::nspid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.Process.nspid)
  return _internal_nspid(index);
}
inline void ProcessTree_Process::set_nspid(int index, ::int32_t value) {
  _internal_mutable_nspid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.Process.nspid)
}
inline void ProcessTree_Process::add_nspid(::int32_t value) {
  _internal_add_nspid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.Process.nspid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ProcessTree_Process::nspid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.Process.nspid)
  return _internal_nspid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ProcessTree_Process::mutable_nspid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.Process.nspid)
  return _internal_mutable_nspid();
}

inline ::int32_t ProcessTree_Process::_internal_nspid(int index) const {
  return _internal_nspid().Get(index);
}
inline void ProcessTree_Process::_internal_add_nspid(::int32_t value) {
  _internal_mutable_nspid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ProcessTree_Process::_internal_nspid() const {
  return _impl_.nspid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ProcessTree_Process::_internal_mutable_nspid() {
  return &_impl_.nspid_;
}

// -------------------------------------------------------------------

// ProcessTree

// repeated .perfetto.protos.ProcessTree.Process processes = 1;
inline int ProcessTree::_internal_processes_size() const {
  return _impl_.processes_.size();
}
inline int ProcessTree::processes_size() const {
  return _internal_processes_size();
}
inline void ProcessTree::clear_processes() {
  _internal_mutable_processes()->Clear();
}
inline ::perfetto::protos::ProcessTree_Process* ProcessTree::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.processes)
  return _internal_mutable_processes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >*
ProcessTree::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.processes)
  return _internal_mutable_processes();
}
inline const ::perfetto::protos::ProcessTree_Process& ProcessTree::_internal_processes(int index) const {
  return _internal_processes().Get(index);
}
inline const ::perfetto::protos::ProcessTree_Process& ProcessTree::processes(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.processes)
  return _internal_processes(index);
}
inline ::perfetto::protos::ProcessTree_Process* ProcessTree::_internal_add_processes() {
  return _internal_mutable_processes()->Add();
}
inline ::perfetto::protos::ProcessTree_Process* ProcessTree::add_processes() {
  ::perfetto::protos::ProcessTree_Process* _add = _internal_add_processes();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.processes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Process >&
ProcessTree::processes() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.processes)
  return _internal_processes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Process>&
ProcessTree::_internal_processes() const {
  return _impl_.processes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Process>*
ProcessTree::_internal_mutable_processes() {
  return &_impl_.processes_;
}

// repeated .perfetto.protos.ProcessTree.Thread threads = 2;
inline int ProcessTree::_internal_threads_size() const {
  return _impl_.threads_.size();
}
inline int ProcessTree::threads_size() const {
  return _internal_threads_size();
}
inline void ProcessTree::clear_threads() {
  _internal_mutable_threads()->Clear();
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ProcessTree.threads)
  return _internal_mutable_threads()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >*
ProcessTree::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.ProcessTree.threads)
  return _internal_mutable_threads();
}
inline const ::perfetto::protos::ProcessTree_Thread& ProcessTree::_internal_threads(int index) const {
  return _internal_threads().Get(index);
}
inline const ::perfetto::protos::ProcessTree_Thread& ProcessTree::threads(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.threads)
  return _internal_threads(index);
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree::_internal_add_threads() {
  return _internal_mutable_threads()->Add();
}
inline ::perfetto::protos::ProcessTree_Thread* ProcessTree::add_threads() {
  ::perfetto::protos::ProcessTree_Thread* _add = _internal_add_threads();
  // @@protoc_insertion_point(field_add:perfetto.protos.ProcessTree.threads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::ProcessTree_Thread >&
ProcessTree::threads() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.ProcessTree.threads)
  return _internal_threads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>&
ProcessTree::_internal_threads() const {
  return _impl_.threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::ProcessTree_Thread>*
ProcessTree::_internal_mutable_threads() {
  return &_impl_.threads_;
}

// optional uint64 collection_end_timestamp = 3;
inline bool ProcessTree::has_collection_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProcessTree::clear_collection_end_timestamp() {
  _impl_.collection_end_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ProcessTree::collection_end_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ProcessTree.collection_end_timestamp)
  return _internal_collection_end_timestamp();
}
inline void ProcessTree::set_collection_end_timestamp(::uint64_t value) {
  _internal_set_collection_end_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ProcessTree.collection_end_timestamp)
}
inline ::uint64_t ProcessTree::_internal_collection_end_timestamp() const {
  return _impl_.collection_end_timestamp_;
}
inline void ProcessTree::_internal_set_collection_end_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.collection_end_timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fps_2fprocess_5ftree_2eproto_2epb_2eh
