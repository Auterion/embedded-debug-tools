// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ps/process_stats.proto

#include "protos/perfetto/trace/ps/process_stats.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR ProcessStats_Thread::ProcessStats_Thread(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tid_)*/ 0
} {}
struct ProcessStats_ThreadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStats_ThreadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStats_ThreadDefaultTypeInternal() {}
  union {
    ProcessStats_Thread _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStats_ThreadDefaultTypeInternal _ProcessStats_Thread_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProcessStats_FDInfo::ProcessStats_FDInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fd_)*/ ::uint64_t{0u}
} {}
struct ProcessStats_FDInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStats_FDInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStats_FDInfoDefaultTypeInternal() {}
  union {
    ProcessStats_FDInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStats_FDInfoDefaultTypeInternal _ProcessStats_FDInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProcessStats_Process::ProcessStats_Process(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threads_)*/{}
  , /*decltype(_impl_.fds_)*/{}
  , /*decltype(_impl_.vm_size_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.vm_rss_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.rss_anon_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.rss_file_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.rss_shmem_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.is_peak_rss_resettable_)*/ false

  , /*decltype(_impl_.vm_swap_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.vm_locked_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.vm_hwm_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.oom_score_adj_)*/ ::int64_t{0}

  , /*decltype(_impl_.chrome_private_footprint_kb_)*/ 0u

  , /*decltype(_impl_.chrome_peak_resident_set_kb_)*/ 0u

  , /*decltype(_impl_.smr_rss_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.smr_pss_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.smr_pss_anon_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.smr_pss_file_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.smr_pss_shmem_kb_)*/ ::uint64_t{0u}
} {}
struct ProcessStats_ProcessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStats_ProcessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStats_ProcessDefaultTypeInternal() {}
  union {
    ProcessStats_Process _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStats_ProcessDefaultTypeInternal _ProcessStats_Process_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProcessStats::ProcessStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.processes_)*/{}
  , /*decltype(_impl_.collection_end_timestamp_)*/ ::uint64_t{0u}
} {}
struct ProcessStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStatsDefaultTypeInternal() {}
  union {
    ProcessStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStatsDefaultTypeInternal _ProcessStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Thread, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Thread, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Thread, _impl_.tid_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_FDInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_FDInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_FDInfo, _impl_.fd_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_FDInfo, _impl_.path_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.vm_size_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.vm_rss_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.rss_anon_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.rss_file_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.rss_shmem_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.vm_swap_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.vm_locked_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.vm_hwm_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.oom_score_adj_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.threads_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.is_peak_rss_resettable_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.chrome_private_footprint_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.chrome_peak_resident_set_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.fds_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.smr_rss_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.smr_pss_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.smr_pss_anon_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.smr_pss_file_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats_Process, _impl_.smr_pss_shmem_kb_),
    5,
    0,
    1,
    2,
    3,
    4,
    7,
    8,
    9,
    10,
    ~0u,
    6,
    11,
    12,
    ~0u,
    13,
    14,
    15,
    16,
    17,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats, _impl_.processes_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::ProcessStats, _impl_.collection_end_timestamp_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::perfetto::protos::ProcessStats_Thread)},
        { 10, 20, -1, sizeof(::perfetto::protos::ProcessStats_FDInfo)},
        { 22, 50, -1, sizeof(::perfetto::protos::ProcessStats_Process)},
        { 70, 80, -1, sizeof(::perfetto::protos::ProcessStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_ProcessStats_Thread_default_instance_._instance,
    &::perfetto::protos::_ProcessStats_FDInfo_default_instance_._instance,
    &::perfetto::protos::_ProcessStats_Process_default_instance_._instance,
    &::perfetto::protos::_ProcessStats_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,protos/perfetto/trace/ps/process_stats"
    ".proto\022\017perfetto.protos\"\323\005\n\014ProcessStats"
    "\0228\n\tprocesses\030\001 \003(\0132%.perfetto.protos.Pr"
    "ocessStats.Process\022 \n\030collection_end_tim"
    "estamp\030\002 \001(\004\032\'\n\006Thread\022\013\n\003tid\030\001 \001(\005J\004\010\002\020"
    "\003J\004\010\003\020\004J\004\010\004\020\005\032\"\n\006FDInfo\022\n\n\002fd\030\001 \001(\004\022\014\n\004p"
    "ath\030\002 \001(\t\032\231\004\n\007Process\022\013\n\003pid\030\001 \001(\005\022\022\n\nvm"
    "_size_kb\030\002 \001(\004\022\021\n\tvm_rss_kb\030\003 \001(\004\022\023\n\013rss"
    "_anon_kb\030\004 \001(\004\022\023\n\013rss_file_kb\030\005 \001(\004\022\024\n\014r"
    "ss_shmem_kb\030\006 \001(\004\022\022\n\nvm_swap_kb\030\007 \001(\004\022\024\n"
    "\014vm_locked_kb\030\010 \001(\004\022\021\n\tvm_hwm_kb\030\t \001(\004\022\025"
    "\n\room_score_adj\030\n \001(\003\0225\n\007threads\030\013 \003(\0132$"
    ".perfetto.protos.ProcessStats.Thread\022\036\n\026"
    "is_peak_rss_resettable\030\014 \001(\010\022#\n\033chrome_p"
    "rivate_footprint_kb\030\r \001(\r\022#\n\033chrome_peak"
    "_resident_set_kb\030\016 \001(\r\0221\n\003fds\030\017 \003(\0132$.pe"
    "rfetto.protos.ProcessStats.FDInfo\022\022\n\nsmr"
    "_rss_kb\030\020 \001(\004\022\022\n\nsmr_pss_kb\030\021 \001(\004\022\027\n\017smr"
    "_pss_anon_kb\030\022 \001(\004\022\027\n\017smr_pss_file_kb\030\023 "
    "\001(\004\022\030\n\020smr_pss_shmem_kb\030\024 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto = {
    false,
    false,
    789,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto,
    "protos/perfetto/trace/ps/process_stats.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class ProcessStats_Thread::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats_Thread>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessStats_Thread, _impl_._has_bits_);
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStats_Thread::ProcessStats_Thread(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats.Thread)
}
ProcessStats_Thread::ProcessStats_Thread(const ProcessStats_Thread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats.Thread)
}

inline void ProcessStats_Thread::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tid_) { 0 }

  };
}

ProcessStats_Thread::~ProcessStats_Thread() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats.Thread)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats_Thread::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessStats_Thread::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats_Thread::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats.Thread)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStats_Thread::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_tid(&has_bits);
          _impl_.tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessStats_Thread::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats.Thread)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats.Thread)
  return target;
}

::size_t ProcessStats_Thread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats.Thread)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 tid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStats_Thread::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStats_Thread::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStats_Thread::GetClassData() const { return &_class_data_; }


void ProcessStats_Thread::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStats_Thread*>(&to_msg);
  auto& from = static_cast<const ProcessStats_Thread&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats.Thread)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_tid(from._internal_tid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStats_Thread::CopyFrom(const ProcessStats_Thread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats.Thread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats_Thread::IsInitialized() const {
  return true;
}

void ProcessStats_Thread::InternalSwap(ProcessStats_Thread* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.tid_, other->_impl_.tid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStats_Thread::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto[0]);
}
// ===================================================================

class ProcessStats_FDInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats_FDInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessStats_FDInfo, _impl_._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStats_FDInfo::ProcessStats_FDInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats.FDInfo)
}
ProcessStats_FDInfo::ProcessStats_FDInfo(const ProcessStats_FDInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessStats_FDInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.fd_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _this->_impl_.fd_ = from._impl_.fd_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats.FDInfo)
}

inline void ProcessStats_FDInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.fd_) { ::uint64_t{0u} }

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessStats_FDInfo::~ProcessStats_FDInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats.FDInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats_FDInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void ProcessStats_FDInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats_FDInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats.FDInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_.ClearNonDefaultToEmpty();
  }
  _impl_.fd_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStats_FDInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_fd(&has_bits);
          _impl_.fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.ProcessStats.FDInfo.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessStats_FDInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats.FDInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 fd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_fd(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.ProcessStats.FDInfo.path");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats.FDInfo)
  return target;
}

::size_t ProcessStats_FDInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats.FDInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional uint64 fd = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_fd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStats_FDInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStats_FDInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStats_FDInfo::GetClassData() const { return &_class_data_; }


void ProcessStats_FDInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStats_FDInfo*>(&to_msg);
  auto& from = static_cast<const ProcessStats_FDInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats.FDInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fd_ = from._impl_.fd_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStats_FDInfo::CopyFrom(const ProcessStats_FDInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats.FDInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats_FDInfo::IsInitialized() const {
  return true;
}

void ProcessStats_FDInfo::InternalSwap(ProcessStats_FDInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);

  swap(_impl_.fd_, other->_impl_.fd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStats_FDInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto[1]);
}
// ===================================================================

class ProcessStats_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats_Process>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessStats_Process, _impl_._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vm_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vm_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rss_anon_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rss_file_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rss_shmem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vm_swap_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vm_locked_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vm_hwm_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_oom_score_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_peak_rss_resettable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chrome_private_footprint_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chrome_peak_resident_set_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_smr_rss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_smr_pss_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_smr_pss_anon_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_smr_pss_file_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_smr_pss_shmem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

ProcessStats_Process::ProcessStats_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats.Process)
}
ProcessStats_Process::ProcessStats_Process(const ProcessStats_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessStats_Process* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){from._impl_.threads_}
    , decltype(_impl_.fds_){from._impl_.fds_}
    , decltype(_impl_.vm_size_kb_) {}

    , decltype(_impl_.vm_rss_kb_) {}

    , decltype(_impl_.rss_anon_kb_) {}

    , decltype(_impl_.rss_file_kb_) {}

    , decltype(_impl_.rss_shmem_kb_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.is_peak_rss_resettable_) {}

    , decltype(_impl_.vm_swap_kb_) {}

    , decltype(_impl_.vm_locked_kb_) {}

    , decltype(_impl_.vm_hwm_kb_) {}

    , decltype(_impl_.oom_score_adj_) {}

    , decltype(_impl_.chrome_private_footprint_kb_) {}

    , decltype(_impl_.chrome_peak_resident_set_kb_) {}

    , decltype(_impl_.smr_rss_kb_) {}

    , decltype(_impl_.smr_pss_kb_) {}

    , decltype(_impl_.smr_pss_anon_kb_) {}

    , decltype(_impl_.smr_pss_file_kb_) {}

    , decltype(_impl_.smr_pss_shmem_kb_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vm_size_kb_, &from._impl_.vm_size_kb_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.smr_pss_shmem_kb_) -
    reinterpret_cast<char*>(&_impl_.vm_size_kb_)) + sizeof(_impl_.smr_pss_shmem_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats.Process)
}

inline void ProcessStats_Process::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threads_){arena}
    , decltype(_impl_.fds_){arena}
    , decltype(_impl_.vm_size_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.vm_rss_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.rss_anon_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.rss_file_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.rss_shmem_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.is_peak_rss_resettable_) { false }

    , decltype(_impl_.vm_swap_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.vm_locked_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.vm_hwm_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.oom_score_adj_) { ::int64_t{0} }

    , decltype(_impl_.chrome_private_footprint_kb_) { 0u }

    , decltype(_impl_.chrome_peak_resident_set_kb_) { 0u }

    , decltype(_impl_.smr_rss_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.smr_pss_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.smr_pss_anon_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.smr_pss_file_kb_) { ::uint64_t{0u} }

    , decltype(_impl_.smr_pss_shmem_kb_) { ::uint64_t{0u} }

  };
}

ProcessStats_Process::~ProcessStats_Process() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats.Process)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats_Process::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_threads()->~RepeatedPtrField();
  _internal_mutable_fds()->~RepeatedPtrField();
}

void ProcessStats_Process::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats.Process)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_threads()->Clear();
  _internal_mutable_fds()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.vm_size_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vm_swap_kb_) -
        reinterpret_cast<char*>(&_impl_.vm_size_kb_)) + sizeof(_impl_.vm_swap_kb_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.vm_locked_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.smr_pss_anon_kb_) -
        reinterpret_cast<char*>(&_impl_.vm_locked_kb_)) + sizeof(_impl_.smr_pss_anon_kb_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.smr_pss_file_kb_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.smr_pss_shmem_kb_) -
        reinterpret_cast<char*>(&_impl_.smr_pss_file_kb_)) + sizeof(_impl_.smr_pss_shmem_kb_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStats_Process::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 vm_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_vm_size_kb(&has_bits);
          _impl_.vm_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 vm_rss_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_vm_rss_kb(&has_bits);
          _impl_.vm_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 rss_anon_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_rss_anon_kb(&has_bits);
          _impl_.rss_anon_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 rss_file_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_rss_file_kb(&has_bits);
          _impl_.rss_file_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 rss_shmem_kb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_rss_shmem_kb(&has_bits);
          _impl_.rss_shmem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 vm_swap_kb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_vm_swap_kb(&has_bits);
          _impl_.vm_swap_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 vm_locked_kb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_vm_locked_kb(&has_bits);
          _impl_.vm_locked_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 vm_hwm_kb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_vm_hwm_kb(&has_bits);
          _impl_.vm_hwm_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 oom_score_adj = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_oom_score_adj(&has_bits);
          _impl_.oom_score_adj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool is_peak_rss_resettable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_is_peak_rss_resettable(&has_bits);
          _impl_.is_peak_rss_resettable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 chrome_private_footprint_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_chrome_private_footprint_kb(&has_bits);
          _impl_.chrome_private_footprint_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 chrome_peak_resident_set_kb = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_chrome_peak_resident_set_kb(&has_bits);
          _impl_.chrome_peak_resident_set_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 smr_rss_kb = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_smr_rss_kb(&has_bits);
          _impl_.smr_rss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 smr_pss_kb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_smr_pss_kb(&has_bits);
          _impl_.smr_pss_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 smr_pss_anon_kb = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_smr_pss_anon_kb(&has_bits);
          _impl_.smr_pss_anon_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 smr_pss_file_kb = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_smr_pss_file_kb(&has_bits);
          _impl_.smr_pss_file_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 smr_pss_shmem_kb = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _Internal::set_has_smr_pss_shmem_kb(&has_bits);
          _impl_.smr_pss_shmem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessStats_Process::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats.Process)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_pid(), target);
  }

  // optional uint64 vm_size_kb = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_vm_size_kb(), target);
  }

  // optional uint64 vm_rss_kb = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_vm_rss_kb(), target);
  }

  // optional uint64 rss_anon_kb = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_rss_anon_kb(), target);
  }

  // optional uint64 rss_file_kb = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_rss_file_kb(), target);
  }

  // optional uint64 rss_shmem_kb = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_rss_shmem_kb(), target);
  }

  // optional uint64 vm_swap_kb = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_vm_swap_kb(), target);
  }

  // optional uint64 vm_locked_kb = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_vm_locked_kb(), target);
  }

  // optional uint64 vm_hwm_kb = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_vm_hwm_kb(), target);
  }

  // optional int64 oom_score_adj = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_oom_score_adj(), target);
  }

  // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threads_size()); i < n; i++) {
    const auto& repfield = this->_internal_threads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_peak_rss_resettable = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_is_peak_rss_resettable(), target);
  }

  // optional uint32 chrome_private_footprint_kb = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_chrome_private_footprint_kb(), target);
  }

  // optional uint32 chrome_peak_resident_set_kb = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_chrome_peak_resident_set_kb(), target);
  }

  // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fds_size()); i < n; i++) {
    const auto& repfield = this->_internal_fds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 smr_rss_kb = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        16, this->_internal_smr_rss_kb(), target);
  }

  // optional uint64 smr_pss_kb = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_smr_pss_kb(), target);
  }

  // optional uint64 smr_pss_anon_kb = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        18, this->_internal_smr_pss_anon_kb(), target);
  }

  // optional uint64 smr_pss_file_kb = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        19, this->_internal_smr_pss_file_kb(), target);
  }

  // optional uint64 smr_pss_shmem_kb = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        20, this->_internal_smr_pss_shmem_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats.Process)
  return target;
}

::size_t ProcessStats_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats.Process)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStats.Thread threads = 11;
  total_size += 1UL * this->_internal_threads_size();
  for (const auto& msg : this->_internal_threads()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProcessStats.FDInfo fds = 15;
  total_size += 1UL * this->_internal_fds_size();
  for (const auto& msg : this->_internal_fds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 vm_size_kb = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_vm_size_kb());
    }

    // optional uint64 vm_rss_kb = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_vm_rss_kb());
    }

    // optional uint64 rss_anon_kb = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_rss_anon_kb());
    }

    // optional uint64 rss_file_kb = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_rss_file_kb());
    }

    // optional uint64 rss_shmem_kb = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_rss_shmem_kb());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional bool is_peak_rss_resettable = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional uint64 vm_swap_kb = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_vm_swap_kb());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 vm_locked_kb = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_vm_locked_kb());
    }

    // optional uint64 vm_hwm_kb = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_vm_hwm_kb());
    }

    // optional int64 oom_score_adj = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_oom_score_adj());
    }

    // optional uint32 chrome_private_footprint_kb = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chrome_private_footprint_kb());
    }

    // optional uint32 chrome_peak_resident_set_kb = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chrome_peak_resident_set_kb());
    }

    // optional uint64 smr_rss_kb = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_smr_rss_kb());
    }

    // optional uint64 smr_pss_kb = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_smr_pss_kb());
    }

    // optional uint64 smr_pss_anon_kb = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_smr_pss_anon_kb());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint64 smr_pss_file_kb = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_smr_pss_file_kb());
    }

    // optional uint64 smr_pss_shmem_kb = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_smr_pss_shmem_kb());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStats_Process::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStats_Process::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStats_Process::GetClassData() const { return &_class_data_; }


void ProcessStats_Process::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStats_Process*>(&to_msg);
  auto& from = static_cast<const ProcessStats_Process&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats.Process)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_threads()->MergeFrom(from._internal_threads());
  _this->_internal_mutable_fds()->MergeFrom(from._internal_fds());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.vm_size_kb_ = from._impl_.vm_size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vm_rss_kb_ = from._impl_.vm_rss_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rss_anon_kb_ = from._impl_.rss_anon_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rss_file_kb_ = from._impl_.rss_file_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rss_shmem_kb_ = from._impl_.rss_shmem_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_peak_rss_resettable_ = from._impl_.is_peak_rss_resettable_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.vm_swap_kb_ = from._impl_.vm_swap_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.vm_locked_kb_ = from._impl_.vm_locked_kb_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.vm_hwm_kb_ = from._impl_.vm_hwm_kb_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.oom_score_adj_ = from._impl_.oom_score_adj_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.chrome_private_footprint_kb_ = from._impl_.chrome_private_footprint_kb_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.chrome_peak_resident_set_kb_ = from._impl_.chrome_peak_resident_set_kb_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.smr_rss_kb_ = from._impl_.smr_rss_kb_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.smr_pss_kb_ = from._impl_.smr_pss_kb_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.smr_pss_anon_kb_ = from._impl_.smr_pss_anon_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.smr_pss_file_kb_ = from._impl_.smr_pss_file_kb_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.smr_pss_shmem_kb_ = from._impl_.smr_pss_shmem_kb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStats_Process::CopyFrom(const ProcessStats_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats_Process::IsInitialized() const {
  return true;
}

void ProcessStats_Process::InternalSwap(ProcessStats_Process* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_threads()->InternalSwap(other->_internal_mutable_threads());
  _internal_mutable_fds()->InternalSwap(other->_internal_mutable_fds());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessStats_Process, _impl_.smr_pss_shmem_kb_)
      + sizeof(ProcessStats_Process::_impl_.smr_pss_shmem_kb_)
      - PROTOBUF_FIELD_OFFSET(ProcessStats_Process, _impl_.vm_size_kb_)>(
          reinterpret_cast<char*>(&_impl_.vm_size_kb_),
          reinterpret_cast<char*>(&other->_impl_.vm_size_kb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStats_Process::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto[2]);
}
// ===================================================================

class ProcessStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProcessStats, _impl_._has_bits_);
  static void set_has_collection_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProcessStats::ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProcessStats)
}
ProcessStats::ProcessStats(const ProcessStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.processes_){from._impl_.processes_}
    , decltype(_impl_.collection_end_timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.collection_end_timestamp_ = from._impl_.collection_end_timestamp_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProcessStats)
}

inline void ProcessStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.processes_){arena}
    , decltype(_impl_.collection_end_timestamp_) { ::uint64_t{0u} }

  };
}

ProcessStats::~ProcessStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProcessStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_processes()->~RepeatedPtrField();
}

void ProcessStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProcessStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_processes()->Clear();
  _impl_.collection_end_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProcessStats.Process processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 collection_end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_collection_end_timestamp(&has_bits);
          _impl_.collection_end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProcessStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProcessStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStats.Process processes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 collection_end_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_collection_end_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProcessStats)
  return target;
}

::size_t ProcessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProcessStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProcessStats.Process processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->_internal_processes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 collection_end_timestamp = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_collection_end_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStats::GetClassData() const { return &_class_data_; }


void ProcessStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStats*>(&to_msg);
  auto& from = static_cast<const ProcessStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProcessStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_processes()->MergeFrom(from._internal_processes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_collection_end_timestamp(from._internal_collection_end_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStats::CopyFrom(const ProcessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStats::IsInitialized() const {
  return true;
}

void ProcessStats::InternalSwap(ProcessStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_processes()->InternalSwap(other->_internal_mutable_processes());

  swap(_impl_.collection_end_timestamp_, other->_impl_.collection_end_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fps_2fprocess_5fstats_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats_Thread*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats_Thread >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats_Thread >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats_FDInfo*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats_FDInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats_FDInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats_Process*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats_Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProcessStats*
Arena::CreateMaybeMessage< ::perfetto::protos::ProcessStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProcessStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
