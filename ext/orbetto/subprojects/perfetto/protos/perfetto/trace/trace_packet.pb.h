// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/trace_packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/common/trace_stats.pb.h"
#include "protos/perfetto/config/trace_config.pb.h"
#include "protos/perfetto/trace/extension_descriptor.pb.h"
#include "protos/perfetto/trace/android/android_game_intervention_list.pb.h"
#include "protos/perfetto/trace/android/android_log.pb.h"
#include "protos/perfetto/trace/android/android_system_property.pb.h"
#include "protos/perfetto/trace/android/camera_event.pb.h"
#include "protos/perfetto/trace/android/frame_timeline_event.pb.h"
#include "protos/perfetto/trace/android/gpu_mem_event.pb.h"
#include "protos/perfetto/trace/android/graphics_frame_event.pb.h"
#include "protos/perfetto/trace/android/initial_display_state.pb.h"
#include "protos/perfetto/trace/android/network_trace.pb.h"
#include "protos/perfetto/trace/android/packages_list.pb.h"
#include "protos/perfetto/trace/chrome/chrome_benchmark_metadata.pb.h"
#include "protos/perfetto/trace/chrome/chrome_metadata.pb.h"
#include "protos/perfetto/trace/chrome/chrome_trace_event.pb.h"
#include "protos/perfetto/trace/clock_snapshot.pb.h"
#include "protos/perfetto/trace/filesystem/inode_file_map.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace_stats.pb.h"
#include "protos/perfetto/trace/gpu/gpu_counter_event.pb.h"
#include "protos/perfetto/trace/gpu/gpu_log.pb.h"
#include "protos/perfetto/trace/gpu/gpu_render_stage_event.pb.h"
#include "protos/perfetto/trace/gpu/vulkan_memory_event.pb.h"
#include "protos/perfetto/trace/gpu/vulkan_api_event.pb.h"
#include "protos/perfetto/trace/interned_data/interned_data.pb.h"
#include "protos/perfetto/trace/memory_graph.pb.h"
#include "protos/perfetto/trace/perfetto/perfetto_metatrace.pb.h"
#include "protos/perfetto/trace/perfetto/tracing_service_event.pb.h"
#include "protos/perfetto/trace/power/android_energy_estimation_breakdown.pb.h"
#include "protos/perfetto/trace/power/android_entity_state_residency.pb.h"
#include "protos/perfetto/trace/power/battery_counters.pb.h"
#include "protos/perfetto/trace/power/power_rails.pb.h"
#include "protos/perfetto/trace/statsd/statsd_atom.pb.h"
#include "protos/perfetto/trace/profiling/deobfuscation.pb.h"
#include "protos/perfetto/trace/profiling/heap_graph.pb.h"
#include "protos/perfetto/trace/profiling/profile_common.pb.h"
#include "protos/perfetto/trace/profiling/profile_packet.pb.h"
#include "protos/perfetto/trace/profiling/smaps.pb.h"
#include "protos/perfetto/trace/ps/process_stats.pb.h"
#include "protos/perfetto/trace/ps/process_tree.pb.h"
#include "protos/perfetto/trace/sys_stats/sys_stats.pb.h"
#include "protos/perfetto/trace/system_info.pb.h"
#include "protos/perfetto/trace/system_info/cpu_info.pb.h"
#include "protos/perfetto/trace/trace_packet_defaults.pb.h"
#include "protos/perfetto/trace/track_event/process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/range_of_interest.pb.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/track_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/track_event.pb.h"
#include "protos/perfetto/trace/translation/translation_table.pb.h"
#include "protos/perfetto/trace/trace_uuid.pb.h"
#include "protos/perfetto/trace/trigger.pb.h"
#include "protos/perfetto/trace/test_event.pb.h"
#include "protos/perfetto/trace/ui_state.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto;
namespace perfetto {
namespace protos {
class TracePacket;
struct TracePacketDefaultTypeInternal;
extern TracePacketDefaultTypeInternal _TracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::TracePacket* Arena::CreateMaybeMessage<::perfetto::protos::TracePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum TracePacket_SequenceFlags : int {
  TracePacket_SequenceFlags_SEQ_UNSPECIFIED = 0,
  TracePacket_SequenceFlags_SEQ_INCREMENTAL_STATE_CLEARED = 1,
  TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE = 2,
};

bool TracePacket_SequenceFlags_IsValid(int value);
constexpr TracePacket_SequenceFlags TracePacket_SequenceFlags_SequenceFlags_MIN = static_cast<TracePacket_SequenceFlags>(0);
constexpr TracePacket_SequenceFlags TracePacket_SequenceFlags_SequenceFlags_MAX = static_cast<TracePacket_SequenceFlags>(2);
constexpr int TracePacket_SequenceFlags_SequenceFlags_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TracePacket_SequenceFlags_descriptor();
template <typename T>
const std::string& TracePacket_SequenceFlags_Name(T value) {
  static_assert(std::is_same<T, TracePacket_SequenceFlags>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SequenceFlags_Name().");
  return TracePacket_SequenceFlags_Name(static_cast<TracePacket_SequenceFlags>(value));
}
template <>
inline const std::string& TracePacket_SequenceFlags_Name(TracePacket_SequenceFlags value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TracePacket_SequenceFlags_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TracePacket_SequenceFlags_Parse(absl::string_view name, TracePacket_SequenceFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TracePacket_SequenceFlags>(
      TracePacket_SequenceFlags_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TracePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TracePacket) */ {
 public:
  inline TracePacket() : TracePacket(nullptr) {}
  ~TracePacket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TracePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TracePacket(const TracePacket& from);
  TracePacket(TracePacket&& from) noexcept
    : TracePacket() {
    *this = ::std::move(from);
  }

  inline TracePacket& operator=(const TracePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracePacket& operator=(TracePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TracePacket& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kProcessTree = 2,
    kProcessStats = 9,
    kInodeFileMap = 4,
    kChromeEvents = 5,
    kClockSnapshot = 6,
    kSysStats = 7,
    kTrackEvent = 11,
    kTraceUuid = 89,
    kTraceConfig = 33,
    kFtraceStats = 34,
    kTraceStats = 35,
    kProfilePacket = 37,
    kStreamingAllocation = 74,
    kStreamingFree = 75,
    kBattery = 38,
    kPowerRails = 40,
    kAndroidLog = 39,
    kSystemInfo = 45,
    kTrigger = 46,
    kPackagesList = 47,
    kChromeBenchmarkMetadata = 48,
    kPerfettoMetatrace = 49,
    kChromeMetadata = 51,
    kGpuCounterEvent = 52,
    kGpuRenderStageEvent = 53,
    kStreamingProfilePacket = 54,
    kHeapGraph = 56,
    kGraphicsFrameEvent = 57,
    kVulkanMemoryEvent = 62,
    kGpuLog = 63,
    kVulkanApiEvent = 65,
    kPerfSample = 66,
    kCpuInfo = 67,
    kSmapsPacket = 68,
    kServiceEvent = 69,
    kInitialDisplayState = 70,
    kGpuMemTotalEvent = 71,
    kMemoryTrackerSnapshot = 73,
    kFrameTimelineEvent = 76,
    kAndroidEnergyEstimationBreakdown = 77,
    kUiState = 78,
    kAndroidCameraFrameEvent = 80,
    kAndroidCameraSessionStats = 81,
    kTranslationTable = 82,
    kAndroidGameInterventionList = 83,
    kStatsdAtom = 84,
    kAndroidSystemProperty = 86,
    kEntityStateResidency = 91,
    kProfiledFrameSymbols = 55,
    kModuleSymbols = 61,
    kDeobfuscationMapping = 64,
    kTrackDescriptor = 60,
    kProcessDescriptor = 43,
    kThreadDescriptor = 44,
    kFtraceEvents = 1,
    kSynchronizationMarker = 36,
    kCompressedPackets = 50,
    kExtensionDescriptor = 72,
    kNetworkPacket = 88,
    kNetworkPacketBundle = 92,
    kTrackEventRangeOfInterest = 90,
    kForTesting = 900,
    DATA_NOT_SET = 0,
  };

  enum OptionalTrustedUidCase {
    kTrustedUid = 3,
    OPTIONAL_TRUSTED_UID_NOT_SET = 0,
  };

  enum OptionalTrustedPacketSequenceIdCase {
    kTrustedPacketSequenceId = 10,
    OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET = 0,
  };

  static inline const TracePacket* internal_default_instance() {
    return reinterpret_cast<const TracePacket*>(
               &_TracePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TracePacket& a, TracePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TracePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracePacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TracePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TracePacket& from) {
    TracePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TracePacket";
  }
  protected:
  explicit TracePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SequenceFlags = TracePacket_SequenceFlags;
  static constexpr SequenceFlags SEQ_UNSPECIFIED = TracePacket_SequenceFlags_SEQ_UNSPECIFIED;
  static constexpr SequenceFlags SEQ_INCREMENTAL_STATE_CLEARED = TracePacket_SequenceFlags_SEQ_INCREMENTAL_STATE_CLEARED;
  static constexpr SequenceFlags SEQ_NEEDS_INCREMENTAL_STATE = TracePacket_SequenceFlags_SEQ_NEEDS_INCREMENTAL_STATE;
  static inline bool SequenceFlags_IsValid(int value) {
    return TracePacket_SequenceFlags_IsValid(value);
  }
  static constexpr SequenceFlags SequenceFlags_MIN = TracePacket_SequenceFlags_SequenceFlags_MIN;
  static constexpr SequenceFlags SequenceFlags_MAX = TracePacket_SequenceFlags_SequenceFlags_MAX;
  static constexpr int SequenceFlags_ARRAYSIZE = TracePacket_SequenceFlags_SequenceFlags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceFlags_descriptor() {
    return TracePacket_SequenceFlags_descriptor();
  }
  template <typename T>
  static inline const std::string& SequenceFlags_Name(T value) {
    return TracePacket_SequenceFlags_Name(value);
  }
  static inline bool SequenceFlags_Parse(absl::string_view name, SequenceFlags* value) {
    return TracePacket_SequenceFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInternedDataFieldNumber = 12,
    kTracePacketDefaultsFieldNumber = 59,
    kTimestampFieldNumber = 8,
    kSequenceFlagsFieldNumber = 13,
    kIncrementalStateClearedFieldNumber = 41,
    kPreviousPacketDroppedFieldNumber = 42,
    kFirstPacketOnSequenceFieldNumber = 87,
    kTimestampClockIdFieldNumber = 58,
    kTrustedPidFieldNumber = 79,
    kProcessTreeFieldNumber = 2,
    kProcessStatsFieldNumber = 9,
    kInodeFileMapFieldNumber = 4,
    kChromeEventsFieldNumber = 5,
    kClockSnapshotFieldNumber = 6,
    kSysStatsFieldNumber = 7,
    kTrackEventFieldNumber = 11,
    kTraceUuidFieldNumber = 89,
    kTraceConfigFieldNumber = 33,
    kFtraceStatsFieldNumber = 34,
    kTraceStatsFieldNumber = 35,
    kProfilePacketFieldNumber = 37,
    kStreamingAllocationFieldNumber = 74,
    kStreamingFreeFieldNumber = 75,
    kBatteryFieldNumber = 38,
    kPowerRailsFieldNumber = 40,
    kAndroidLogFieldNumber = 39,
    kSystemInfoFieldNumber = 45,
    kTriggerFieldNumber = 46,
    kPackagesListFieldNumber = 47,
    kChromeBenchmarkMetadataFieldNumber = 48,
    kPerfettoMetatraceFieldNumber = 49,
    kChromeMetadataFieldNumber = 51,
    kGpuCounterEventFieldNumber = 52,
    kGpuRenderStageEventFieldNumber = 53,
    kStreamingProfilePacketFieldNumber = 54,
    kHeapGraphFieldNumber = 56,
    kGraphicsFrameEventFieldNumber = 57,
    kVulkanMemoryEventFieldNumber = 62,
    kGpuLogFieldNumber = 63,
    kVulkanApiEventFieldNumber = 65,
    kPerfSampleFieldNumber = 66,
    kCpuInfoFieldNumber = 67,
    kSmapsPacketFieldNumber = 68,
    kServiceEventFieldNumber = 69,
    kInitialDisplayStateFieldNumber = 70,
    kGpuMemTotalEventFieldNumber = 71,
    kMemoryTrackerSnapshotFieldNumber = 73,
    kFrameTimelineEventFieldNumber = 76,
    kAndroidEnergyEstimationBreakdownFieldNumber = 77,
    kUiStateFieldNumber = 78,
    kAndroidCameraFrameEventFieldNumber = 80,
    kAndroidCameraSessionStatsFieldNumber = 81,
    kTranslationTableFieldNumber = 82,
    kAndroidGameInterventionListFieldNumber = 83,
    kStatsdAtomFieldNumber = 84,
    kAndroidSystemPropertyFieldNumber = 86,
    kEntityStateResidencyFieldNumber = 91,
    kProfiledFrameSymbolsFieldNumber = 55,
    kModuleSymbolsFieldNumber = 61,
    kDeobfuscationMappingFieldNumber = 64,
    kTrackDescriptorFieldNumber = 60,
    kProcessDescriptorFieldNumber = 43,
    kThreadDescriptorFieldNumber = 44,
    kFtraceEventsFieldNumber = 1,
    kSynchronizationMarkerFieldNumber = 36,
    kCompressedPacketsFieldNumber = 50,
    kExtensionDescriptorFieldNumber = 72,
    kNetworkPacketFieldNumber = 88,
    kNetworkPacketBundleFieldNumber = 92,
    kTrackEventRangeOfInterestFieldNumber = 90,
    kForTestingFieldNumber = 900,
    kTrustedUidFieldNumber = 3,
    kTrustedPacketSequenceIdFieldNumber = 10,
  };
  // optional .perfetto.protos.InternedData interned_data = 12;
  bool has_interned_data() const;
  void clear_interned_data() ;
  const ::perfetto::protos::InternedData& interned_data() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InternedData* release_interned_data();
  ::perfetto::protos::InternedData* mutable_interned_data();
  void set_allocated_interned_data(::perfetto::protos::InternedData* interned_data);
  private:
  const ::perfetto::protos::InternedData& _internal_interned_data() const;
  ::perfetto::protos::InternedData* _internal_mutable_interned_data();
  public:
  void unsafe_arena_set_allocated_interned_data(
      ::perfetto::protos::InternedData* interned_data);
  ::perfetto::protos::InternedData* unsafe_arena_release_interned_data();
  // optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
  bool has_trace_packet_defaults() const;
  void clear_trace_packet_defaults() ;
  const ::perfetto::protos::TracePacketDefaults& trace_packet_defaults() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TracePacketDefaults* release_trace_packet_defaults();
  ::perfetto::protos::TracePacketDefaults* mutable_trace_packet_defaults();
  void set_allocated_trace_packet_defaults(::perfetto::protos::TracePacketDefaults* trace_packet_defaults);
  private:
  const ::perfetto::protos::TracePacketDefaults& _internal_trace_packet_defaults() const;
  ::perfetto::protos::TracePacketDefaults* _internal_mutable_trace_packet_defaults();
  public:
  void unsafe_arena_set_allocated_trace_packet_defaults(
      ::perfetto::protos::TracePacketDefaults* trace_packet_defaults);
  ::perfetto::protos::TracePacketDefaults* unsafe_arena_release_trace_packet_defaults();
  // optional uint64 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional uint32 sequence_flags = 13;
  bool has_sequence_flags() const;
  void clear_sequence_flags() ;
  ::uint32_t sequence_flags() const;
  void set_sequence_flags(::uint32_t value);

  private:
  ::uint32_t _internal_sequence_flags() const;
  void _internal_set_sequence_flags(::uint32_t value);

  public:
  // optional bool incremental_state_cleared = 41;
  bool has_incremental_state_cleared() const;
  void clear_incremental_state_cleared() ;
  bool incremental_state_cleared() const;
  void set_incremental_state_cleared(bool value);

  private:
  bool _internal_incremental_state_cleared() const;
  void _internal_set_incremental_state_cleared(bool value);

  public:
  // optional bool previous_packet_dropped = 42;
  bool has_previous_packet_dropped() const;
  void clear_previous_packet_dropped() ;
  bool previous_packet_dropped() const;
  void set_previous_packet_dropped(bool value);

  private:
  bool _internal_previous_packet_dropped() const;
  void _internal_set_previous_packet_dropped(bool value);

  public:
  // optional bool first_packet_on_sequence = 87;
  bool has_first_packet_on_sequence() const;
  void clear_first_packet_on_sequence() ;
  bool first_packet_on_sequence() const;
  void set_first_packet_on_sequence(bool value);

  private:
  bool _internal_first_packet_on_sequence() const;
  void _internal_set_first_packet_on_sequence(bool value);

  public:
  // optional uint32 timestamp_clock_id = 58;
  bool has_timestamp_clock_id() const;
  void clear_timestamp_clock_id() ;
  ::uint32_t timestamp_clock_id() const;
  void set_timestamp_clock_id(::uint32_t value);

  private:
  ::uint32_t _internal_timestamp_clock_id() const;
  void _internal_set_timestamp_clock_id(::uint32_t value);

  public:
  // optional int32 trusted_pid = 79;
  bool has_trusted_pid() const;
  void clear_trusted_pid() ;
  ::int32_t trusted_pid() const;
  void set_trusted_pid(::int32_t value);

  private:
  ::int32_t _internal_trusted_pid() const;
  void _internal_set_trusted_pid(::int32_t value);

  public:
  // .perfetto.protos.ProcessTree process_tree = 2;
  bool has_process_tree() const;
  private:
  bool _internal_has_process_tree() const;

  public:
  void clear_process_tree() ;
  const ::perfetto::protos::ProcessTree& process_tree() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProcessTree* release_process_tree();
  ::perfetto::protos::ProcessTree* mutable_process_tree();
  void set_allocated_process_tree(::perfetto::protos::ProcessTree* process_tree);
  private:
  const ::perfetto::protos::ProcessTree& _internal_process_tree() const;
  ::perfetto::protos::ProcessTree* _internal_mutable_process_tree();
  public:
  void unsafe_arena_set_allocated_process_tree(
      ::perfetto::protos::ProcessTree* process_tree);
  ::perfetto::protos::ProcessTree* unsafe_arena_release_process_tree();
  // .perfetto.protos.ProcessStats process_stats = 9;
  bool has_process_stats() const;
  private:
  bool _internal_has_process_stats() const;

  public:
  void clear_process_stats() ;
  const ::perfetto::protos::ProcessStats& process_stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProcessStats* release_process_stats();
  ::perfetto::protos::ProcessStats* mutable_process_stats();
  void set_allocated_process_stats(::perfetto::protos::ProcessStats* process_stats);
  private:
  const ::perfetto::protos::ProcessStats& _internal_process_stats() const;
  ::perfetto::protos::ProcessStats* _internal_mutable_process_stats();
  public:
  void unsafe_arena_set_allocated_process_stats(
      ::perfetto::protos::ProcessStats* process_stats);
  ::perfetto::protos::ProcessStats* unsafe_arena_release_process_stats();
  // .perfetto.protos.InodeFileMap inode_file_map = 4;
  bool has_inode_file_map() const;
  private:
  bool _internal_has_inode_file_map() const;

  public:
  void clear_inode_file_map() ;
  const ::perfetto::protos::InodeFileMap& inode_file_map() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InodeFileMap* release_inode_file_map();
  ::perfetto::protos::InodeFileMap* mutable_inode_file_map();
  void set_allocated_inode_file_map(::perfetto::protos::InodeFileMap* inode_file_map);
  private:
  const ::perfetto::protos::InodeFileMap& _internal_inode_file_map() const;
  ::perfetto::protos::InodeFileMap* _internal_mutable_inode_file_map();
  public:
  void unsafe_arena_set_allocated_inode_file_map(
      ::perfetto::protos::InodeFileMap* inode_file_map);
  ::perfetto::protos::InodeFileMap* unsafe_arena_release_inode_file_map();
  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  bool has_chrome_events() const;
  private:
  bool _internal_has_chrome_events() const;

  public:
  void clear_chrome_events() ;
  const ::perfetto::protos::ChromeEventBundle& chrome_events() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeEventBundle* release_chrome_events();
  ::perfetto::protos::ChromeEventBundle* mutable_chrome_events();
  void set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events);
  private:
  const ::perfetto::protos::ChromeEventBundle& _internal_chrome_events() const;
  ::perfetto::protos::ChromeEventBundle* _internal_mutable_chrome_events();
  public:
  void unsafe_arena_set_allocated_chrome_events(
      ::perfetto::protos::ChromeEventBundle* chrome_events);
  ::perfetto::protos::ChromeEventBundle* unsafe_arena_release_chrome_events();
  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  bool has_clock_snapshot() const;
  private:
  bool _internal_has_clock_snapshot() const;

  public:
  void clear_clock_snapshot() ;
  const ::perfetto::protos::ClockSnapshot& clock_snapshot() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClockSnapshot* release_clock_snapshot();
  ::perfetto::protos::ClockSnapshot* mutable_clock_snapshot();
  void set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot);
  private:
  const ::perfetto::protos::ClockSnapshot& _internal_clock_snapshot() const;
  ::perfetto::protos::ClockSnapshot* _internal_mutable_clock_snapshot();
  public:
  void unsafe_arena_set_allocated_clock_snapshot(
      ::perfetto::protos::ClockSnapshot* clock_snapshot);
  ::perfetto::protos::ClockSnapshot* unsafe_arena_release_clock_snapshot();
  // .perfetto.protos.SysStats sys_stats = 7;
  bool has_sys_stats() const;
  private:
  bool _internal_has_sys_stats() const;

  public:
  void clear_sys_stats() ;
  const ::perfetto::protos::SysStats& sys_stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SysStats* release_sys_stats();
  ::perfetto::protos::SysStats* mutable_sys_stats();
  void set_allocated_sys_stats(::perfetto::protos::SysStats* sys_stats);
  private:
  const ::perfetto::protos::SysStats& _internal_sys_stats() const;
  ::perfetto::protos::SysStats* _internal_mutable_sys_stats();
  public:
  void unsafe_arena_set_allocated_sys_stats(
      ::perfetto::protos::SysStats* sys_stats);
  ::perfetto::protos::SysStats* unsafe_arena_release_sys_stats();
  // .perfetto.protos.TrackEvent track_event = 11;
  bool has_track_event() const;
  private:
  bool _internal_has_track_event() const;

  public:
  void clear_track_event() ;
  const ::perfetto::protos::TrackEvent& track_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrackEvent* release_track_event();
  ::perfetto::protos::TrackEvent* mutable_track_event();
  void set_allocated_track_event(::perfetto::protos::TrackEvent* track_event);
  private:
  const ::perfetto::protos::TrackEvent& _internal_track_event() const;
  ::perfetto::protos::TrackEvent* _internal_mutable_track_event();
  public:
  void unsafe_arena_set_allocated_track_event(
      ::perfetto::protos::TrackEvent* track_event);
  ::perfetto::protos::TrackEvent* unsafe_arena_release_track_event();
  // .perfetto.protos.TraceUuid trace_uuid = 89;
  bool has_trace_uuid() const;
  private:
  bool _internal_has_trace_uuid() const;

  public:
  void clear_trace_uuid() ;
  const ::perfetto::protos::TraceUuid& trace_uuid() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceUuid* release_trace_uuid();
  ::perfetto::protos::TraceUuid* mutable_trace_uuid();
  void set_allocated_trace_uuid(::perfetto::protos::TraceUuid* trace_uuid);
  private:
  const ::perfetto::protos::TraceUuid& _internal_trace_uuid() const;
  ::perfetto::protos::TraceUuid* _internal_mutable_trace_uuid();
  public:
  void unsafe_arena_set_allocated_trace_uuid(
      ::perfetto::protos::TraceUuid* trace_uuid);
  ::perfetto::protos::TraceUuid* unsafe_arena_release_trace_uuid();
  // .perfetto.protos.TraceConfig trace_config = 33;
  bool has_trace_config() const;
  private:
  bool _internal_has_trace_config() const;

  public:
  void clear_trace_config() ;
  const ::perfetto::protos::TraceConfig& trace_config() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceConfig* release_trace_config();
  ::perfetto::protos::TraceConfig* mutable_trace_config();
  void set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config);
  private:
  const ::perfetto::protos::TraceConfig& _internal_trace_config() const;
  ::perfetto::protos::TraceConfig* _internal_mutable_trace_config();
  public:
  void unsafe_arena_set_allocated_trace_config(
      ::perfetto::protos::TraceConfig* trace_config);
  ::perfetto::protos::TraceConfig* unsafe_arena_release_trace_config();
  // .perfetto.protos.FtraceStats ftrace_stats = 34;
  bool has_ftrace_stats() const;
  private:
  bool _internal_has_ftrace_stats() const;

  public:
  void clear_ftrace_stats() ;
  const ::perfetto::protos::FtraceStats& ftrace_stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceStats* release_ftrace_stats();
  ::perfetto::protos::FtraceStats* mutable_ftrace_stats();
  void set_allocated_ftrace_stats(::perfetto::protos::FtraceStats* ftrace_stats);
  private:
  const ::perfetto::protos::FtraceStats& _internal_ftrace_stats() const;
  ::perfetto::protos::FtraceStats* _internal_mutable_ftrace_stats();
  public:
  void unsafe_arena_set_allocated_ftrace_stats(
      ::perfetto::protos::FtraceStats* ftrace_stats);
  ::perfetto::protos::FtraceStats* unsafe_arena_release_ftrace_stats();
  // .perfetto.protos.TraceStats trace_stats = 35;
  bool has_trace_stats() const;
  private:
  bool _internal_has_trace_stats() const;

  public:
  void clear_trace_stats() ;
  const ::perfetto::protos::TraceStats& trace_stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TraceStats* release_trace_stats();
  ::perfetto::protos::TraceStats* mutable_trace_stats();
  void set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats);
  private:
  const ::perfetto::protos::TraceStats& _internal_trace_stats() const;
  ::perfetto::protos::TraceStats* _internal_mutable_trace_stats();
  public:
  void unsafe_arena_set_allocated_trace_stats(
      ::perfetto::protos::TraceStats* trace_stats);
  ::perfetto::protos::TraceStats* unsafe_arena_release_trace_stats();
  // .perfetto.protos.ProfilePacket profile_packet = 37;
  bool has_profile_packet() const;
  private:
  bool _internal_has_profile_packet() const;

  public:
  void clear_profile_packet() ;
  const ::perfetto::protos::ProfilePacket& profile_packet() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProfilePacket* release_profile_packet();
  ::perfetto::protos::ProfilePacket* mutable_profile_packet();
  void set_allocated_profile_packet(::perfetto::protos::ProfilePacket* profile_packet);
  private:
  const ::perfetto::protos::ProfilePacket& _internal_profile_packet() const;
  ::perfetto::protos::ProfilePacket* _internal_mutable_profile_packet();
  public:
  void unsafe_arena_set_allocated_profile_packet(
      ::perfetto::protos::ProfilePacket* profile_packet);
  ::perfetto::protos::ProfilePacket* unsafe_arena_release_profile_packet();
  // .perfetto.protos.StreamingAllocation streaming_allocation = 74;
  bool has_streaming_allocation() const;
  private:
  bool _internal_has_streaming_allocation() const;

  public:
  void clear_streaming_allocation() ;
  const ::perfetto::protos::StreamingAllocation& streaming_allocation() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StreamingAllocation* release_streaming_allocation();
  ::perfetto::protos::StreamingAllocation* mutable_streaming_allocation();
  void set_allocated_streaming_allocation(::perfetto::protos::StreamingAllocation* streaming_allocation);
  private:
  const ::perfetto::protos::StreamingAllocation& _internal_streaming_allocation() const;
  ::perfetto::protos::StreamingAllocation* _internal_mutable_streaming_allocation();
  public:
  void unsafe_arena_set_allocated_streaming_allocation(
      ::perfetto::protos::StreamingAllocation* streaming_allocation);
  ::perfetto::protos::StreamingAllocation* unsafe_arena_release_streaming_allocation();
  // .perfetto.protos.StreamingFree streaming_free = 75;
  bool has_streaming_free() const;
  private:
  bool _internal_has_streaming_free() const;

  public:
  void clear_streaming_free() ;
  const ::perfetto::protos::StreamingFree& streaming_free() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StreamingFree* release_streaming_free();
  ::perfetto::protos::StreamingFree* mutable_streaming_free();
  void set_allocated_streaming_free(::perfetto::protos::StreamingFree* streaming_free);
  private:
  const ::perfetto::protos::StreamingFree& _internal_streaming_free() const;
  ::perfetto::protos::StreamingFree* _internal_mutable_streaming_free();
  public:
  void unsafe_arena_set_allocated_streaming_free(
      ::perfetto::protos::StreamingFree* streaming_free);
  ::perfetto::protos::StreamingFree* unsafe_arena_release_streaming_free();
  // .perfetto.protos.BatteryCounters battery = 38;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;

  public:
  void clear_battery() ;
  const ::perfetto::protos::BatteryCounters& battery() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BatteryCounters* release_battery();
  ::perfetto::protos::BatteryCounters* mutable_battery();
  void set_allocated_battery(::perfetto::protos::BatteryCounters* battery);
  private:
  const ::perfetto::protos::BatteryCounters& _internal_battery() const;
  ::perfetto::protos::BatteryCounters* _internal_mutable_battery();
  public:
  void unsafe_arena_set_allocated_battery(
      ::perfetto::protos::BatteryCounters* battery);
  ::perfetto::protos::BatteryCounters* unsafe_arena_release_battery();
  // .perfetto.protos.PowerRails power_rails = 40;
  bool has_power_rails() const;
  private:
  bool _internal_has_power_rails() const;

  public:
  void clear_power_rails() ;
  const ::perfetto::protos::PowerRails& power_rails() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PowerRails* release_power_rails();
  ::perfetto::protos::PowerRails* mutable_power_rails();
  void set_allocated_power_rails(::perfetto::protos::PowerRails* power_rails);
  private:
  const ::perfetto::protos::PowerRails& _internal_power_rails() const;
  ::perfetto::protos::PowerRails* _internal_mutable_power_rails();
  public:
  void unsafe_arena_set_allocated_power_rails(
      ::perfetto::protos::PowerRails* power_rails);
  ::perfetto::protos::PowerRails* unsafe_arena_release_power_rails();
  // .perfetto.protos.AndroidLogPacket android_log = 39;
  bool has_android_log() const;
  private:
  bool _internal_has_android_log() const;

  public:
  void clear_android_log() ;
  const ::perfetto::protos::AndroidLogPacket& android_log() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidLogPacket* release_android_log();
  ::perfetto::protos::AndroidLogPacket* mutable_android_log();
  void set_allocated_android_log(::perfetto::protos::AndroidLogPacket* android_log);
  private:
  const ::perfetto::protos::AndroidLogPacket& _internal_android_log() const;
  ::perfetto::protos::AndroidLogPacket* _internal_mutable_android_log();
  public:
  void unsafe_arena_set_allocated_android_log(
      ::perfetto::protos::AndroidLogPacket* android_log);
  ::perfetto::protos::AndroidLogPacket* unsafe_arena_release_android_log();
  // .perfetto.protos.SystemInfo system_info = 45;
  bool has_system_info() const;
  private:
  bool _internal_has_system_info() const;

  public:
  void clear_system_info() ;
  const ::perfetto::protos::SystemInfo& system_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SystemInfo* release_system_info();
  ::perfetto::protos::SystemInfo* mutable_system_info();
  void set_allocated_system_info(::perfetto::protos::SystemInfo* system_info);
  private:
  const ::perfetto::protos::SystemInfo& _internal_system_info() const;
  ::perfetto::protos::SystemInfo* _internal_mutable_system_info();
  public:
  void unsafe_arena_set_allocated_system_info(
      ::perfetto::protos::SystemInfo* system_info);
  ::perfetto::protos::SystemInfo* unsafe_arena_release_system_info();
  // .perfetto.protos.Trigger trigger = 46;
  bool has_trigger() const;
  private:
  bool _internal_has_trigger() const;

  public:
  void clear_trigger() ;
  const ::perfetto::protos::Trigger& trigger() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Trigger* release_trigger();
  ::perfetto::protos::Trigger* mutable_trigger();
  void set_allocated_trigger(::perfetto::protos::Trigger* trigger);
  private:
  const ::perfetto::protos::Trigger& _internal_trigger() const;
  ::perfetto::protos::Trigger* _internal_mutable_trigger();
  public:
  void unsafe_arena_set_allocated_trigger(
      ::perfetto::protos::Trigger* trigger);
  ::perfetto::protos::Trigger* unsafe_arena_release_trigger();
  // .perfetto.protos.PackagesList packages_list = 47;
  bool has_packages_list() const;
  private:
  bool _internal_has_packages_list() const;

  public:
  void clear_packages_list() ;
  const ::perfetto::protos::PackagesList& packages_list() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PackagesList* release_packages_list();
  ::perfetto::protos::PackagesList* mutable_packages_list();
  void set_allocated_packages_list(::perfetto::protos::PackagesList* packages_list);
  private:
  const ::perfetto::protos::PackagesList& _internal_packages_list() const;
  ::perfetto::protos::PackagesList* _internal_mutable_packages_list();
  public:
  void unsafe_arena_set_allocated_packages_list(
      ::perfetto::protos::PackagesList* packages_list);
  ::perfetto::protos::PackagesList* unsafe_arena_release_packages_list();
  // .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
  bool has_chrome_benchmark_metadata() const;
  private:
  bool _internal_has_chrome_benchmark_metadata() const;

  public:
  void clear_chrome_benchmark_metadata() ;
  const ::perfetto::protos::ChromeBenchmarkMetadata& chrome_benchmark_metadata() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeBenchmarkMetadata* release_chrome_benchmark_metadata();
  ::perfetto::protos::ChromeBenchmarkMetadata* mutable_chrome_benchmark_metadata();
  void set_allocated_chrome_benchmark_metadata(::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata);
  private:
  const ::perfetto::protos::ChromeBenchmarkMetadata& _internal_chrome_benchmark_metadata() const;
  ::perfetto::protos::ChromeBenchmarkMetadata* _internal_mutable_chrome_benchmark_metadata();
  public:
  void unsafe_arena_set_allocated_chrome_benchmark_metadata(
      ::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata);
  ::perfetto::protos::ChromeBenchmarkMetadata* unsafe_arena_release_chrome_benchmark_metadata();
  // .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
  bool has_perfetto_metatrace() const;
  private:
  bool _internal_has_perfetto_metatrace() const;

  public:
  void clear_perfetto_metatrace() ;
  const ::perfetto::protos::PerfettoMetatrace& perfetto_metatrace() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfettoMetatrace* release_perfetto_metatrace();
  ::perfetto::protos::PerfettoMetatrace* mutable_perfetto_metatrace();
  void set_allocated_perfetto_metatrace(::perfetto::protos::PerfettoMetatrace* perfetto_metatrace);
  private:
  const ::perfetto::protos::PerfettoMetatrace& _internal_perfetto_metatrace() const;
  ::perfetto::protos::PerfettoMetatrace* _internal_mutable_perfetto_metatrace();
  public:
  void unsafe_arena_set_allocated_perfetto_metatrace(
      ::perfetto::protos::PerfettoMetatrace* perfetto_metatrace);
  ::perfetto::protos::PerfettoMetatrace* unsafe_arena_release_perfetto_metatrace();
  // .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
  bool has_chrome_metadata() const;
  private:
  bool _internal_has_chrome_metadata() const;

  public:
  void clear_chrome_metadata() ;
  const ::perfetto::protos::ChromeMetadataPacket& chrome_metadata() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ChromeMetadataPacket* release_chrome_metadata();
  ::perfetto::protos::ChromeMetadataPacket* mutable_chrome_metadata();
  void set_allocated_chrome_metadata(::perfetto::protos::ChromeMetadataPacket* chrome_metadata);
  private:
  const ::perfetto::protos::ChromeMetadataPacket& _internal_chrome_metadata() const;
  ::perfetto::protos::ChromeMetadataPacket* _internal_mutable_chrome_metadata();
  public:
  void unsafe_arena_set_allocated_chrome_metadata(
      ::perfetto::protos::ChromeMetadataPacket* chrome_metadata);
  ::perfetto::protos::ChromeMetadataPacket* unsafe_arena_release_chrome_metadata();
  // .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
  bool has_gpu_counter_event() const;
  private:
  bool _internal_has_gpu_counter_event() const;

  public:
  void clear_gpu_counter_event() ;
  const ::perfetto::protos::GpuCounterEvent& gpu_counter_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuCounterEvent* release_gpu_counter_event();
  ::perfetto::protos::GpuCounterEvent* mutable_gpu_counter_event();
  void set_allocated_gpu_counter_event(::perfetto::protos::GpuCounterEvent* gpu_counter_event);
  private:
  const ::perfetto::protos::GpuCounterEvent& _internal_gpu_counter_event() const;
  ::perfetto::protos::GpuCounterEvent* _internal_mutable_gpu_counter_event();
  public:
  void unsafe_arena_set_allocated_gpu_counter_event(
      ::perfetto::protos::GpuCounterEvent* gpu_counter_event);
  ::perfetto::protos::GpuCounterEvent* unsafe_arena_release_gpu_counter_event();
  // .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
  bool has_gpu_render_stage_event() const;
  private:
  bool _internal_has_gpu_render_stage_event() const;

  public:
  void clear_gpu_render_stage_event() ;
  const ::perfetto::protos::GpuRenderStageEvent& gpu_render_stage_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuRenderStageEvent* release_gpu_render_stage_event();
  ::perfetto::protos::GpuRenderStageEvent* mutable_gpu_render_stage_event();
  void set_allocated_gpu_render_stage_event(::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event);
  private:
  const ::perfetto::protos::GpuRenderStageEvent& _internal_gpu_render_stage_event() const;
  ::perfetto::protos::GpuRenderStageEvent* _internal_mutable_gpu_render_stage_event();
  public:
  void unsafe_arena_set_allocated_gpu_render_stage_event(
      ::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event);
  ::perfetto::protos::GpuRenderStageEvent* unsafe_arena_release_gpu_render_stage_event();
  // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
  bool has_streaming_profile_packet() const;
  private:
  bool _internal_has_streaming_profile_packet() const;

  public:
  void clear_streaming_profile_packet() ;
  const ::perfetto::protos::StreamingProfilePacket& streaming_profile_packet() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StreamingProfilePacket* release_streaming_profile_packet();
  ::perfetto::protos::StreamingProfilePacket* mutable_streaming_profile_packet();
  void set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet);
  private:
  const ::perfetto::protos::StreamingProfilePacket& _internal_streaming_profile_packet() const;
  ::perfetto::protos::StreamingProfilePacket* _internal_mutable_streaming_profile_packet();
  public:
  void unsafe_arena_set_allocated_streaming_profile_packet(
      ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet);
  ::perfetto::protos::StreamingProfilePacket* unsafe_arena_release_streaming_profile_packet();
  // .perfetto.protos.HeapGraph heap_graph = 56;
  bool has_heap_graph() const;
  private:
  bool _internal_has_heap_graph() const;

  public:
  void clear_heap_graph() ;
  const ::perfetto::protos::HeapGraph& heap_graph() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HeapGraph* release_heap_graph();
  ::perfetto::protos::HeapGraph* mutable_heap_graph();
  void set_allocated_heap_graph(::perfetto::protos::HeapGraph* heap_graph);
  private:
  const ::perfetto::protos::HeapGraph& _internal_heap_graph() const;
  ::perfetto::protos::HeapGraph* _internal_mutable_heap_graph();
  public:
  void unsafe_arena_set_allocated_heap_graph(
      ::perfetto::protos::HeapGraph* heap_graph);
  ::perfetto::protos::HeapGraph* unsafe_arena_release_heap_graph();
  // .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
  bool has_graphics_frame_event() const;
  private:
  bool _internal_has_graphics_frame_event() const;

  public:
  void clear_graphics_frame_event() ;
  const ::perfetto::protos::GraphicsFrameEvent& graphics_frame_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GraphicsFrameEvent* release_graphics_frame_event();
  ::perfetto::protos::GraphicsFrameEvent* mutable_graphics_frame_event();
  void set_allocated_graphics_frame_event(::perfetto::protos::GraphicsFrameEvent* graphics_frame_event);
  private:
  const ::perfetto::protos::GraphicsFrameEvent& _internal_graphics_frame_event() const;
  ::perfetto::protos::GraphicsFrameEvent* _internal_mutable_graphics_frame_event();
  public:
  void unsafe_arena_set_allocated_graphics_frame_event(
      ::perfetto::protos::GraphicsFrameEvent* graphics_frame_event);
  ::perfetto::protos::GraphicsFrameEvent* unsafe_arena_release_graphics_frame_event();
  // .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
  bool has_vulkan_memory_event() const;
  private:
  bool _internal_has_vulkan_memory_event() const;

  public:
  void clear_vulkan_memory_event() ;
  const ::perfetto::protos::VulkanMemoryEvent& vulkan_memory_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VulkanMemoryEvent* release_vulkan_memory_event();
  ::perfetto::protos::VulkanMemoryEvent* mutable_vulkan_memory_event();
  void set_allocated_vulkan_memory_event(::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event);
  private:
  const ::perfetto::protos::VulkanMemoryEvent& _internal_vulkan_memory_event() const;
  ::perfetto::protos::VulkanMemoryEvent* _internal_mutable_vulkan_memory_event();
  public:
  void unsafe_arena_set_allocated_vulkan_memory_event(
      ::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event);
  ::perfetto::protos::VulkanMemoryEvent* unsafe_arena_release_vulkan_memory_event();
  // .perfetto.protos.GpuLog gpu_log = 63;
  bool has_gpu_log() const;
  private:
  bool _internal_has_gpu_log() const;

  public:
  void clear_gpu_log() ;
  const ::perfetto::protos::GpuLog& gpu_log() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuLog* release_gpu_log();
  ::perfetto::protos::GpuLog* mutable_gpu_log();
  void set_allocated_gpu_log(::perfetto::protos::GpuLog* gpu_log);
  private:
  const ::perfetto::protos::GpuLog& _internal_gpu_log() const;
  ::perfetto::protos::GpuLog* _internal_mutable_gpu_log();
  public:
  void unsafe_arena_set_allocated_gpu_log(
      ::perfetto::protos::GpuLog* gpu_log);
  ::perfetto::protos::GpuLog* unsafe_arena_release_gpu_log();
  // .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
  bool has_vulkan_api_event() const;
  private:
  bool _internal_has_vulkan_api_event() const;

  public:
  void clear_vulkan_api_event() ;
  const ::perfetto::protos::VulkanApiEvent& vulkan_api_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VulkanApiEvent* release_vulkan_api_event();
  ::perfetto::protos::VulkanApiEvent* mutable_vulkan_api_event();
  void set_allocated_vulkan_api_event(::perfetto::protos::VulkanApiEvent* vulkan_api_event);
  private:
  const ::perfetto::protos::VulkanApiEvent& _internal_vulkan_api_event() const;
  ::perfetto::protos::VulkanApiEvent* _internal_mutable_vulkan_api_event();
  public:
  void unsafe_arena_set_allocated_vulkan_api_event(
      ::perfetto::protos::VulkanApiEvent* vulkan_api_event);
  ::perfetto::protos::VulkanApiEvent* unsafe_arena_release_vulkan_api_event();
  // .perfetto.protos.PerfSample perf_sample = 66;
  bool has_perf_sample() const;
  private:
  bool _internal_has_perf_sample() const;

  public:
  void clear_perf_sample() ;
  const ::perfetto::protos::PerfSample& perf_sample() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PerfSample* release_perf_sample();
  ::perfetto::protos::PerfSample* mutable_perf_sample();
  void set_allocated_perf_sample(::perfetto::protos::PerfSample* perf_sample);
  private:
  const ::perfetto::protos::PerfSample& _internal_perf_sample() const;
  ::perfetto::protos::PerfSample* _internal_mutable_perf_sample();
  public:
  void unsafe_arena_set_allocated_perf_sample(
      ::perfetto::protos::PerfSample* perf_sample);
  ::perfetto::protos::PerfSample* unsafe_arena_release_perf_sample();
  // .perfetto.protos.CpuInfo cpu_info = 67;
  bool has_cpu_info() const;
  private:
  bool _internal_has_cpu_info() const;

  public:
  void clear_cpu_info() ;
  const ::perfetto::protos::CpuInfo& cpu_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuInfo* release_cpu_info();
  ::perfetto::protos::CpuInfo* mutable_cpu_info();
  void set_allocated_cpu_info(::perfetto::protos::CpuInfo* cpu_info);
  private:
  const ::perfetto::protos::CpuInfo& _internal_cpu_info() const;
  ::perfetto::protos::CpuInfo* _internal_mutable_cpu_info();
  public:
  void unsafe_arena_set_allocated_cpu_info(
      ::perfetto::protos::CpuInfo* cpu_info);
  ::perfetto::protos::CpuInfo* unsafe_arena_release_cpu_info();
  // .perfetto.protos.SmapsPacket smaps_packet = 68;
  bool has_smaps_packet() const;
  private:
  bool _internal_has_smaps_packet() const;

  public:
  void clear_smaps_packet() ;
  const ::perfetto::protos::SmapsPacket& smaps_packet() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SmapsPacket* release_smaps_packet();
  ::perfetto::protos::SmapsPacket* mutable_smaps_packet();
  void set_allocated_smaps_packet(::perfetto::protos::SmapsPacket* smaps_packet);
  private:
  const ::perfetto::protos::SmapsPacket& _internal_smaps_packet() const;
  ::perfetto::protos::SmapsPacket* _internal_mutable_smaps_packet();
  public:
  void unsafe_arena_set_allocated_smaps_packet(
      ::perfetto::protos::SmapsPacket* smaps_packet);
  ::perfetto::protos::SmapsPacket* unsafe_arena_release_smaps_packet();
  // .perfetto.protos.TracingServiceEvent service_event = 69;
  bool has_service_event() const;
  private:
  bool _internal_has_service_event() const;

  public:
  void clear_service_event() ;
  const ::perfetto::protos::TracingServiceEvent& service_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TracingServiceEvent* release_service_event();
  ::perfetto::protos::TracingServiceEvent* mutable_service_event();
  void set_allocated_service_event(::perfetto::protos::TracingServiceEvent* service_event);
  private:
  const ::perfetto::protos::TracingServiceEvent& _internal_service_event() const;
  ::perfetto::protos::TracingServiceEvent* _internal_mutable_service_event();
  public:
  void unsafe_arena_set_allocated_service_event(
      ::perfetto::protos::TracingServiceEvent* service_event);
  ::perfetto::protos::TracingServiceEvent* unsafe_arena_release_service_event();
  // .perfetto.protos.InitialDisplayState initial_display_state = 70;
  bool has_initial_display_state() const;
  private:
  bool _internal_has_initial_display_state() const;

  public:
  void clear_initial_display_state() ;
  const ::perfetto::protos::InitialDisplayState& initial_display_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InitialDisplayState* release_initial_display_state();
  ::perfetto::protos::InitialDisplayState* mutable_initial_display_state();
  void set_allocated_initial_display_state(::perfetto::protos::InitialDisplayState* initial_display_state);
  private:
  const ::perfetto::protos::InitialDisplayState& _internal_initial_display_state() const;
  ::perfetto::protos::InitialDisplayState* _internal_mutable_initial_display_state();
  public:
  void unsafe_arena_set_allocated_initial_display_state(
      ::perfetto::protos::InitialDisplayState* initial_display_state);
  ::perfetto::protos::InitialDisplayState* unsafe_arena_release_initial_display_state();
  // .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
  bool has_gpu_mem_total_event() const;
  private:
  bool _internal_has_gpu_mem_total_event() const;

  public:
  void clear_gpu_mem_total_event() ;
  const ::perfetto::protos::GpuMemTotalEvent& gpu_mem_total_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuMemTotalEvent* release_gpu_mem_total_event();
  ::perfetto::protos::GpuMemTotalEvent* mutable_gpu_mem_total_event();
  void set_allocated_gpu_mem_total_event(::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event);
  private:
  const ::perfetto::protos::GpuMemTotalEvent& _internal_gpu_mem_total_event() const;
  ::perfetto::protos::GpuMemTotalEvent* _internal_mutable_gpu_mem_total_event();
  public:
  void unsafe_arena_set_allocated_gpu_mem_total_event(
      ::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event);
  ::perfetto::protos::GpuMemTotalEvent* unsafe_arena_release_gpu_mem_total_event();
  // .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
  bool has_memory_tracker_snapshot() const;
  private:
  bool _internal_has_memory_tracker_snapshot() const;

  public:
  void clear_memory_tracker_snapshot() ;
  const ::perfetto::protos::MemoryTrackerSnapshot& memory_tracker_snapshot() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MemoryTrackerSnapshot* release_memory_tracker_snapshot();
  ::perfetto::protos::MemoryTrackerSnapshot* mutable_memory_tracker_snapshot();
  void set_allocated_memory_tracker_snapshot(::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot);
  private:
  const ::perfetto::protos::MemoryTrackerSnapshot& _internal_memory_tracker_snapshot() const;
  ::perfetto::protos::MemoryTrackerSnapshot* _internal_mutable_memory_tracker_snapshot();
  public:
  void unsafe_arena_set_allocated_memory_tracker_snapshot(
      ::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot);
  ::perfetto::protos::MemoryTrackerSnapshot* unsafe_arena_release_memory_tracker_snapshot();
  // .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
  bool has_frame_timeline_event() const;
  private:
  bool _internal_has_frame_timeline_event() const;

  public:
  void clear_frame_timeline_event() ;
  const ::perfetto::protos::FrameTimelineEvent& frame_timeline_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FrameTimelineEvent* release_frame_timeline_event();
  ::perfetto::protos::FrameTimelineEvent* mutable_frame_timeline_event();
  void set_allocated_frame_timeline_event(::perfetto::protos::FrameTimelineEvent* frame_timeline_event);
  private:
  const ::perfetto::protos::FrameTimelineEvent& _internal_frame_timeline_event() const;
  ::perfetto::protos::FrameTimelineEvent* _internal_mutable_frame_timeline_event();
  public:
  void unsafe_arena_set_allocated_frame_timeline_event(
      ::perfetto::protos::FrameTimelineEvent* frame_timeline_event);
  ::perfetto::protos::FrameTimelineEvent* unsafe_arena_release_frame_timeline_event();
  // .perfetto.protos.AndroidEnergyEstimationBreakdown android_energy_estimation_breakdown = 77;
  bool has_android_energy_estimation_breakdown() const;
  private:
  bool _internal_has_android_energy_estimation_breakdown() const;

  public:
  void clear_android_energy_estimation_breakdown() ;
  const ::perfetto::protos::AndroidEnergyEstimationBreakdown& android_energy_estimation_breakdown() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidEnergyEstimationBreakdown* release_android_energy_estimation_breakdown();
  ::perfetto::protos::AndroidEnergyEstimationBreakdown* mutable_android_energy_estimation_breakdown();
  void set_allocated_android_energy_estimation_breakdown(::perfetto::protos::AndroidEnergyEstimationBreakdown* android_energy_estimation_breakdown);
  private:
  const ::perfetto::protos::AndroidEnergyEstimationBreakdown& _internal_android_energy_estimation_breakdown() const;
  ::perfetto::protos::AndroidEnergyEstimationBreakdown* _internal_mutable_android_energy_estimation_breakdown();
  public:
  void unsafe_arena_set_allocated_android_energy_estimation_breakdown(
      ::perfetto::protos::AndroidEnergyEstimationBreakdown* android_energy_estimation_breakdown);
  ::perfetto::protos::AndroidEnergyEstimationBreakdown* unsafe_arena_release_android_energy_estimation_breakdown();
  // .perfetto.protos.UiState ui_state = 78;
  bool has_ui_state() const;
  private:
  bool _internal_has_ui_state() const;

  public:
  void clear_ui_state() ;
  const ::perfetto::protos::UiState& ui_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::UiState* release_ui_state();
  ::perfetto::protos::UiState* mutable_ui_state();
  void set_allocated_ui_state(::perfetto::protos::UiState* ui_state);
  private:
  const ::perfetto::protos::UiState& _internal_ui_state() const;
  ::perfetto::protos::UiState* _internal_mutable_ui_state();
  public:
  void unsafe_arena_set_allocated_ui_state(
      ::perfetto::protos::UiState* ui_state);
  ::perfetto::protos::UiState* unsafe_arena_release_ui_state();
  // .perfetto.protos.AndroidCameraFrameEvent android_camera_frame_event = 80;
  bool has_android_camera_frame_event() const;
  private:
  bool _internal_has_android_camera_frame_event() const;

  public:
  void clear_android_camera_frame_event() ;
  const ::perfetto::protos::AndroidCameraFrameEvent& android_camera_frame_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidCameraFrameEvent* release_android_camera_frame_event();
  ::perfetto::protos::AndroidCameraFrameEvent* mutable_android_camera_frame_event();
  void set_allocated_android_camera_frame_event(::perfetto::protos::AndroidCameraFrameEvent* android_camera_frame_event);
  private:
  const ::perfetto::protos::AndroidCameraFrameEvent& _internal_android_camera_frame_event() const;
  ::perfetto::protos::AndroidCameraFrameEvent* _internal_mutable_android_camera_frame_event();
  public:
  void unsafe_arena_set_allocated_android_camera_frame_event(
      ::perfetto::protos::AndroidCameraFrameEvent* android_camera_frame_event);
  ::perfetto::protos::AndroidCameraFrameEvent* unsafe_arena_release_android_camera_frame_event();
  // .perfetto.protos.AndroidCameraSessionStats android_camera_session_stats = 81;
  bool has_android_camera_session_stats() const;
  private:
  bool _internal_has_android_camera_session_stats() const;

  public:
  void clear_android_camera_session_stats() ;
  const ::perfetto::protos::AndroidCameraSessionStats& android_camera_session_stats() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidCameraSessionStats* release_android_camera_session_stats();
  ::perfetto::protos::AndroidCameraSessionStats* mutable_android_camera_session_stats();
  void set_allocated_android_camera_session_stats(::perfetto::protos::AndroidCameraSessionStats* android_camera_session_stats);
  private:
  const ::perfetto::protos::AndroidCameraSessionStats& _internal_android_camera_session_stats() const;
  ::perfetto::protos::AndroidCameraSessionStats* _internal_mutable_android_camera_session_stats();
  public:
  void unsafe_arena_set_allocated_android_camera_session_stats(
      ::perfetto::protos::AndroidCameraSessionStats* android_camera_session_stats);
  ::perfetto::protos::AndroidCameraSessionStats* unsafe_arena_release_android_camera_session_stats();
  // .perfetto.protos.TranslationTable translation_table = 82;
  bool has_translation_table() const;
  private:
  bool _internal_has_translation_table() const;

  public:
  void clear_translation_table() ;
  const ::perfetto::protos::TranslationTable& translation_table() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TranslationTable* release_translation_table();
  ::perfetto::protos::TranslationTable* mutable_translation_table();
  void set_allocated_translation_table(::perfetto::protos::TranslationTable* translation_table);
  private:
  const ::perfetto::protos::TranslationTable& _internal_translation_table() const;
  ::perfetto::protos::TranslationTable* _internal_mutable_translation_table();
  public:
  void unsafe_arena_set_allocated_translation_table(
      ::perfetto::protos::TranslationTable* translation_table);
  ::perfetto::protos::TranslationTable* unsafe_arena_release_translation_table();
  // .perfetto.protos.AndroidGameInterventionList android_game_intervention_list = 83;
  bool has_android_game_intervention_list() const;
  private:
  bool _internal_has_android_game_intervention_list() const;

  public:
  void clear_android_game_intervention_list() ;
  const ::perfetto::protos::AndroidGameInterventionList& android_game_intervention_list() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidGameInterventionList* release_android_game_intervention_list();
  ::perfetto::protos::AndroidGameInterventionList* mutable_android_game_intervention_list();
  void set_allocated_android_game_intervention_list(::perfetto::protos::AndroidGameInterventionList* android_game_intervention_list);
  private:
  const ::perfetto::protos::AndroidGameInterventionList& _internal_android_game_intervention_list() const;
  ::perfetto::protos::AndroidGameInterventionList* _internal_mutable_android_game_intervention_list();
  public:
  void unsafe_arena_set_allocated_android_game_intervention_list(
      ::perfetto::protos::AndroidGameInterventionList* android_game_intervention_list);
  ::perfetto::protos::AndroidGameInterventionList* unsafe_arena_release_android_game_intervention_list();
  // .perfetto.protos.StatsdAtom statsd_atom = 84;
  bool has_statsd_atom() const;
  private:
  bool _internal_has_statsd_atom() const;

  public:
  void clear_statsd_atom() ;
  const ::perfetto::protos::StatsdAtom& statsd_atom() const;
  PROTOBUF_NODISCARD ::perfetto::protos::StatsdAtom* release_statsd_atom();
  ::perfetto::protos::StatsdAtom* mutable_statsd_atom();
  void set_allocated_statsd_atom(::perfetto::protos::StatsdAtom* statsd_atom);
  private:
  const ::perfetto::protos::StatsdAtom& _internal_statsd_atom() const;
  ::perfetto::protos::StatsdAtom* _internal_mutable_statsd_atom();
  public:
  void unsafe_arena_set_allocated_statsd_atom(
      ::perfetto::protos::StatsdAtom* statsd_atom);
  ::perfetto::protos::StatsdAtom* unsafe_arena_release_statsd_atom();
  // .perfetto.protos.AndroidSystemProperty android_system_property = 86;
  bool has_android_system_property() const;
  private:
  bool _internal_has_android_system_property() const;

  public:
  void clear_android_system_property() ;
  const ::perfetto::protos::AndroidSystemProperty& android_system_property() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidSystemProperty* release_android_system_property();
  ::perfetto::protos::AndroidSystemProperty* mutable_android_system_property();
  void set_allocated_android_system_property(::perfetto::protos::AndroidSystemProperty* android_system_property);
  private:
  const ::perfetto::protos::AndroidSystemProperty& _internal_android_system_property() const;
  ::perfetto::protos::AndroidSystemProperty* _internal_mutable_android_system_property();
  public:
  void unsafe_arena_set_allocated_android_system_property(
      ::perfetto::protos::AndroidSystemProperty* android_system_property);
  ::perfetto::protos::AndroidSystemProperty* unsafe_arena_release_android_system_property();
  // .perfetto.protos.EntityStateResidency entity_state_residency = 91;
  bool has_entity_state_residency() const;
  private:
  bool _internal_has_entity_state_residency() const;

  public:
  void clear_entity_state_residency() ;
  const ::perfetto::protos::EntityStateResidency& entity_state_residency() const;
  PROTOBUF_NODISCARD ::perfetto::protos::EntityStateResidency* release_entity_state_residency();
  ::perfetto::protos::EntityStateResidency* mutable_entity_state_residency();
  void set_allocated_entity_state_residency(::perfetto::protos::EntityStateResidency* entity_state_residency);
  private:
  const ::perfetto::protos::EntityStateResidency& _internal_entity_state_residency() const;
  ::perfetto::protos::EntityStateResidency* _internal_mutable_entity_state_residency();
  public:
  void unsafe_arena_set_allocated_entity_state_residency(
      ::perfetto::protos::EntityStateResidency* entity_state_residency);
  ::perfetto::protos::EntityStateResidency* unsafe_arena_release_entity_state_residency();
  // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
  bool has_profiled_frame_symbols() const;
  private:
  bool _internal_has_profiled_frame_symbols() const;

  public:
  void clear_profiled_frame_symbols() ;
  const ::perfetto::protos::ProfiledFrameSymbols& profiled_frame_symbols() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProfiledFrameSymbols* release_profiled_frame_symbols();
  ::perfetto::protos::ProfiledFrameSymbols* mutable_profiled_frame_symbols();
  void set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols);
  private:
  const ::perfetto::protos::ProfiledFrameSymbols& _internal_profiled_frame_symbols() const;
  ::perfetto::protos::ProfiledFrameSymbols* _internal_mutable_profiled_frame_symbols();
  public:
  void unsafe_arena_set_allocated_profiled_frame_symbols(
      ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols);
  ::perfetto::protos::ProfiledFrameSymbols* unsafe_arena_release_profiled_frame_symbols();
  // .perfetto.protos.ModuleSymbols module_symbols = 61;
  bool has_module_symbols() const;
  private:
  bool _internal_has_module_symbols() const;

  public:
  void clear_module_symbols() ;
  const ::perfetto::protos::ModuleSymbols& module_symbols() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ModuleSymbols* release_module_symbols();
  ::perfetto::protos::ModuleSymbols* mutable_module_symbols();
  void set_allocated_module_symbols(::perfetto::protos::ModuleSymbols* module_symbols);
  private:
  const ::perfetto::protos::ModuleSymbols& _internal_module_symbols() const;
  ::perfetto::protos::ModuleSymbols* _internal_mutable_module_symbols();
  public:
  void unsafe_arena_set_allocated_module_symbols(
      ::perfetto::protos::ModuleSymbols* module_symbols);
  ::perfetto::protos::ModuleSymbols* unsafe_arena_release_module_symbols();
  // .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
  bool has_deobfuscation_mapping() const;
  private:
  bool _internal_has_deobfuscation_mapping() const;

  public:
  void clear_deobfuscation_mapping() ;
  const ::perfetto::protos::DeobfuscationMapping& deobfuscation_mapping() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DeobfuscationMapping* release_deobfuscation_mapping();
  ::perfetto::protos::DeobfuscationMapping* mutable_deobfuscation_mapping();
  void set_allocated_deobfuscation_mapping(::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping);
  private:
  const ::perfetto::protos::DeobfuscationMapping& _internal_deobfuscation_mapping() const;
  ::perfetto::protos::DeobfuscationMapping* _internal_mutable_deobfuscation_mapping();
  public:
  void unsafe_arena_set_allocated_deobfuscation_mapping(
      ::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping);
  ::perfetto::protos::DeobfuscationMapping* unsafe_arena_release_deobfuscation_mapping();
  // .perfetto.protos.TrackDescriptor track_descriptor = 60;
  bool has_track_descriptor() const;
  private:
  bool _internal_has_track_descriptor() const;

  public:
  void clear_track_descriptor() ;
  const ::perfetto::protos::TrackDescriptor& track_descriptor() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrackDescriptor* release_track_descriptor();
  ::perfetto::protos::TrackDescriptor* mutable_track_descriptor();
  void set_allocated_track_descriptor(::perfetto::protos::TrackDescriptor* track_descriptor);
  private:
  const ::perfetto::protos::TrackDescriptor& _internal_track_descriptor() const;
  ::perfetto::protos::TrackDescriptor* _internal_mutable_track_descriptor();
  public:
  void unsafe_arena_set_allocated_track_descriptor(
      ::perfetto::protos::TrackDescriptor* track_descriptor);
  ::perfetto::protos::TrackDescriptor* unsafe_arena_release_track_descriptor();
  // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
  bool has_process_descriptor() const;
  private:
  bool _internal_has_process_descriptor() const;

  public:
  void clear_process_descriptor() ;
  const ::perfetto::protos::ProcessDescriptor& process_descriptor() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ProcessDescriptor* release_process_descriptor();
  ::perfetto::protos::ProcessDescriptor* mutable_process_descriptor();
  void set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor);
  private:
  const ::perfetto::protos::ProcessDescriptor& _internal_process_descriptor() const;
  ::perfetto::protos::ProcessDescriptor* _internal_mutable_process_descriptor();
  public:
  void unsafe_arena_set_allocated_process_descriptor(
      ::perfetto::protos::ProcessDescriptor* process_descriptor);
  ::perfetto::protos::ProcessDescriptor* unsafe_arena_release_process_descriptor();
  // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
  bool has_thread_descriptor() const;
  private:
  bool _internal_has_thread_descriptor() const;

  public:
  void clear_thread_descriptor() ;
  const ::perfetto::protos::ThreadDescriptor& thread_descriptor() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ThreadDescriptor* release_thread_descriptor();
  ::perfetto::protos::ThreadDescriptor* mutable_thread_descriptor();
  void set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor);
  private:
  const ::perfetto::protos::ThreadDescriptor& _internal_thread_descriptor() const;
  ::perfetto::protos::ThreadDescriptor* _internal_mutable_thread_descriptor();
  public:
  void unsafe_arena_set_allocated_thread_descriptor(
      ::perfetto::protos::ThreadDescriptor* thread_descriptor);
  ::perfetto::protos::ThreadDescriptor* unsafe_arena_release_thread_descriptor();
  // .perfetto.protos.FtraceEventBundle ftrace_events = 1;
  bool has_ftrace_events() const;
  private:
  bool _internal_has_ftrace_events() const;

  public:
  void clear_ftrace_events() ;
  const ::perfetto::protos::FtraceEventBundle& ftrace_events() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceEventBundle* release_ftrace_events();
  ::perfetto::protos::FtraceEventBundle* mutable_ftrace_events();
  void set_allocated_ftrace_events(::perfetto::protos::FtraceEventBundle* ftrace_events);
  private:
  const ::perfetto::protos::FtraceEventBundle& _internal_ftrace_events() const;
  ::perfetto::protos::FtraceEventBundle* _internal_mutable_ftrace_events();
  public:
  void unsafe_arena_set_allocated_ftrace_events(
      ::perfetto::protos::FtraceEventBundle* ftrace_events);
  ::perfetto::protos::FtraceEventBundle* unsafe_arena_release_ftrace_events();
  // bytes synchronization_marker = 36;
  bool has_synchronization_marker() const;
  void clear_synchronization_marker() ;
  const std::string& synchronization_marker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_synchronization_marker(Arg_&& arg, Args_... args);
  std::string* mutable_synchronization_marker();
  PROTOBUF_NODISCARD std::string* release_synchronization_marker();
  void set_allocated_synchronization_marker(std::string* ptr);

  private:
  const std::string& _internal_synchronization_marker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_synchronization_marker(
      const std::string& value);
  std::string* _internal_mutable_synchronization_marker();

  public:
  // bytes compressed_packets = 50;
  bool has_compressed_packets() const;
  void clear_compressed_packets() ;
  const std::string& compressed_packets() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_compressed_packets(Arg_&& arg, Args_... args);
  std::string* mutable_compressed_packets();
  PROTOBUF_NODISCARD std::string* release_compressed_packets();
  void set_allocated_compressed_packets(std::string* ptr);

  private:
  const std::string& _internal_compressed_packets() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressed_packets(
      const std::string& value);
  std::string* _internal_mutable_compressed_packets();

  public:
  // .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
  bool has_extension_descriptor() const;
  private:
  bool _internal_has_extension_descriptor() const;

  public:
  void clear_extension_descriptor() ;
  const ::perfetto::protos::ExtensionDescriptor& extension_descriptor() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ExtensionDescriptor* release_extension_descriptor();
  ::perfetto::protos::ExtensionDescriptor* mutable_extension_descriptor();
  void set_allocated_extension_descriptor(::perfetto::protos::ExtensionDescriptor* extension_descriptor);
  private:
  const ::perfetto::protos::ExtensionDescriptor& _internal_extension_descriptor() const;
  ::perfetto::protos::ExtensionDescriptor* _internal_mutable_extension_descriptor();
  public:
  void unsafe_arena_set_allocated_extension_descriptor(
      ::perfetto::protos::ExtensionDescriptor* extension_descriptor);
  ::perfetto::protos::ExtensionDescriptor* unsafe_arena_release_extension_descriptor();
  // .perfetto.protos.NetworkPacketEvent network_packet = 88;
  bool has_network_packet() const;
  private:
  bool _internal_has_network_packet() const;

  public:
  void clear_network_packet() ;
  const ::perfetto::protos::NetworkPacketEvent& network_packet() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetworkPacketEvent* release_network_packet();
  ::perfetto::protos::NetworkPacketEvent* mutable_network_packet();
  void set_allocated_network_packet(::perfetto::protos::NetworkPacketEvent* network_packet);
  private:
  const ::perfetto::protos::NetworkPacketEvent& _internal_network_packet() const;
  ::perfetto::protos::NetworkPacketEvent* _internal_mutable_network_packet();
  public:
  void unsafe_arena_set_allocated_network_packet(
      ::perfetto::protos::NetworkPacketEvent* network_packet);
  ::perfetto::protos::NetworkPacketEvent* unsafe_arena_release_network_packet();
  // .perfetto.protos.NetworkPacketBundle network_packet_bundle = 92;
  bool has_network_packet_bundle() const;
  private:
  bool _internal_has_network_packet_bundle() const;

  public:
  void clear_network_packet_bundle() ;
  const ::perfetto::protos::NetworkPacketBundle& network_packet_bundle() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetworkPacketBundle* release_network_packet_bundle();
  ::perfetto::protos::NetworkPacketBundle* mutable_network_packet_bundle();
  void set_allocated_network_packet_bundle(::perfetto::protos::NetworkPacketBundle* network_packet_bundle);
  private:
  const ::perfetto::protos::NetworkPacketBundle& _internal_network_packet_bundle() const;
  ::perfetto::protos::NetworkPacketBundle* _internal_mutable_network_packet_bundle();
  public:
  void unsafe_arena_set_allocated_network_packet_bundle(
      ::perfetto::protos::NetworkPacketBundle* network_packet_bundle);
  ::perfetto::protos::NetworkPacketBundle* unsafe_arena_release_network_packet_bundle();
  // .perfetto.protos.TrackEventRangeOfInterest track_event_range_of_interest = 90;
  bool has_track_event_range_of_interest() const;
  private:
  bool _internal_has_track_event_range_of_interest() const;

  public:
  void clear_track_event_range_of_interest() ;
  const ::perfetto::protos::TrackEventRangeOfInterest& track_event_range_of_interest() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrackEventRangeOfInterest* release_track_event_range_of_interest();
  ::perfetto::protos::TrackEventRangeOfInterest* mutable_track_event_range_of_interest();
  void set_allocated_track_event_range_of_interest(::perfetto::protos::TrackEventRangeOfInterest* track_event_range_of_interest);
  private:
  const ::perfetto::protos::TrackEventRangeOfInterest& _internal_track_event_range_of_interest() const;
  ::perfetto::protos::TrackEventRangeOfInterest* _internal_mutable_track_event_range_of_interest();
  public:
  void unsafe_arena_set_allocated_track_event_range_of_interest(
      ::perfetto::protos::TrackEventRangeOfInterest* track_event_range_of_interest);
  ::perfetto::protos::TrackEventRangeOfInterest* unsafe_arena_release_track_event_range_of_interest();
  // .perfetto.protos.TestEvent for_testing = 900;
  bool has_for_testing() const;
  private:
  bool _internal_has_for_testing() const;

  public:
  void clear_for_testing() ;
  const ::perfetto::protos::TestEvent& for_testing() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TestEvent* release_for_testing();
  ::perfetto::protos::TestEvent* mutable_for_testing();
  void set_allocated_for_testing(::perfetto::protos::TestEvent* for_testing);
  private:
  const ::perfetto::protos::TestEvent& _internal_for_testing() const;
  ::perfetto::protos::TestEvent* _internal_mutable_for_testing();
  public:
  void unsafe_arena_set_allocated_for_testing(
      ::perfetto::protos::TestEvent* for_testing);
  ::perfetto::protos::TestEvent* unsafe_arena_release_for_testing();
  // int32 trusted_uid = 3;
  bool has_trusted_uid() const;
  void clear_trusted_uid() ;
  ::int32_t trusted_uid() const;
  void set_trusted_uid(::int32_t value);

  private:
  ::int32_t _internal_trusted_uid() const;
  void _internal_set_trusted_uid(::int32_t value);

  public:
  // uint32 trusted_packet_sequence_id = 10;
  bool has_trusted_packet_sequence_id() const;
  void clear_trusted_packet_sequence_id() ;
  ::uint32_t trusted_packet_sequence_id() const;
  void set_trusted_packet_sequence_id(::uint32_t value);

  private:
  ::uint32_t _internal_trusted_packet_sequence_id() const;
  void _internal_set_trusted_packet_sequence_id(::uint32_t value);

  public:
  void clear_data();
  DataCase data_case() const;
  void clear_optional_trusted_uid();
  OptionalTrustedUidCase optional_trusted_uid_case() const;
  void clear_optional_trusted_packet_sequence_id();
  OptionalTrustedPacketSequenceIdCase optional_trusted_packet_sequence_id_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.TracePacket)
 private:
  class _Internal;
  void set_has_process_tree();
  void set_has_process_stats();
  void set_has_inode_file_map();
  void set_has_chrome_events();
  void set_has_clock_snapshot();
  void set_has_sys_stats();
  void set_has_track_event();
  void set_has_trace_uuid();
  void set_has_trace_config();
  void set_has_ftrace_stats();
  void set_has_trace_stats();
  void set_has_profile_packet();
  void set_has_streaming_allocation();
  void set_has_streaming_free();
  void set_has_battery();
  void set_has_power_rails();
  void set_has_android_log();
  void set_has_system_info();
  void set_has_trigger();
  void set_has_packages_list();
  void set_has_chrome_benchmark_metadata();
  void set_has_perfetto_metatrace();
  void set_has_chrome_metadata();
  void set_has_gpu_counter_event();
  void set_has_gpu_render_stage_event();
  void set_has_streaming_profile_packet();
  void set_has_heap_graph();
  void set_has_graphics_frame_event();
  void set_has_vulkan_memory_event();
  void set_has_gpu_log();
  void set_has_vulkan_api_event();
  void set_has_perf_sample();
  void set_has_cpu_info();
  void set_has_smaps_packet();
  void set_has_service_event();
  void set_has_initial_display_state();
  void set_has_gpu_mem_total_event();
  void set_has_memory_tracker_snapshot();
  void set_has_frame_timeline_event();
  void set_has_android_energy_estimation_breakdown();
  void set_has_ui_state();
  void set_has_android_camera_frame_event();
  void set_has_android_camera_session_stats();
  void set_has_translation_table();
  void set_has_android_game_intervention_list();
  void set_has_statsd_atom();
  void set_has_android_system_property();
  void set_has_entity_state_residency();
  void set_has_profiled_frame_symbols();
  void set_has_module_symbols();
  void set_has_deobfuscation_mapping();
  void set_has_track_descriptor();
  void set_has_process_descriptor();
  void set_has_thread_descriptor();
  void set_has_ftrace_events();
  void set_has_synchronization_marker();
  void set_has_compressed_packets();
  void set_has_extension_descriptor();
  void set_has_network_packet();
  void set_has_network_packet_bundle();
  void set_has_track_event_range_of_interest();
  void set_has_for_testing();
  void set_has_trusted_uid();
  void set_has_trusted_packet_sequence_id();

  inline bool has_data() const;
  inline void clear_has_data();

  inline bool has_optional_trusted_uid() const;
  inline void clear_has_optional_trusted_uid();

  inline bool has_optional_trusted_packet_sequence_id() const;
  inline void clear_has_optional_trusted_packet_sequence_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::perfetto::protos::InternedData* interned_data_;
    ::perfetto::protos::TracePacketDefaults* trace_packet_defaults_;
    ::uint64_t timestamp_;
    ::uint32_t sequence_flags_;
    bool incremental_state_cleared_;
    bool previous_packet_dropped_;
    bool first_packet_on_sequence_;
    ::uint32_t timestamp_clock_id_;
    ::int32_t trusted_pid_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::ProcessTree* process_tree_;
      ::perfetto::protos::ProcessStats* process_stats_;
      ::perfetto::protos::InodeFileMap* inode_file_map_;
      ::perfetto::protos::ChromeEventBundle* chrome_events_;
      ::perfetto::protos::ClockSnapshot* clock_snapshot_;
      ::perfetto::protos::SysStats* sys_stats_;
      ::perfetto::protos::TrackEvent* track_event_;
      ::perfetto::protos::TraceUuid* trace_uuid_;
      ::perfetto::protos::TraceConfig* trace_config_;
      ::perfetto::protos::FtraceStats* ftrace_stats_;
      ::perfetto::protos::TraceStats* trace_stats_;
      ::perfetto::protos::ProfilePacket* profile_packet_;
      ::perfetto::protos::StreamingAllocation* streaming_allocation_;
      ::perfetto::protos::StreamingFree* streaming_free_;
      ::perfetto::protos::BatteryCounters* battery_;
      ::perfetto::protos::PowerRails* power_rails_;
      ::perfetto::protos::AndroidLogPacket* android_log_;
      ::perfetto::protos::SystemInfo* system_info_;
      ::perfetto::protos::Trigger* trigger_;
      ::perfetto::protos::PackagesList* packages_list_;
      ::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata_;
      ::perfetto::protos::PerfettoMetatrace* perfetto_metatrace_;
      ::perfetto::protos::ChromeMetadataPacket* chrome_metadata_;
      ::perfetto::protos::GpuCounterEvent* gpu_counter_event_;
      ::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event_;
      ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet_;
      ::perfetto::protos::HeapGraph* heap_graph_;
      ::perfetto::protos::GraphicsFrameEvent* graphics_frame_event_;
      ::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event_;
      ::perfetto::protos::GpuLog* gpu_log_;
      ::perfetto::protos::VulkanApiEvent* vulkan_api_event_;
      ::perfetto::protos::PerfSample* perf_sample_;
      ::perfetto::protos::CpuInfo* cpu_info_;
      ::perfetto::protos::SmapsPacket* smaps_packet_;
      ::perfetto::protos::TracingServiceEvent* service_event_;
      ::perfetto::protos::InitialDisplayState* initial_display_state_;
      ::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event_;
      ::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot_;
      ::perfetto::protos::FrameTimelineEvent* frame_timeline_event_;
      ::perfetto::protos::AndroidEnergyEstimationBreakdown* android_energy_estimation_breakdown_;
      ::perfetto::protos::UiState* ui_state_;
      ::perfetto::protos::AndroidCameraFrameEvent* android_camera_frame_event_;
      ::perfetto::protos::AndroidCameraSessionStats* android_camera_session_stats_;
      ::perfetto::protos::TranslationTable* translation_table_;
      ::perfetto::protos::AndroidGameInterventionList* android_game_intervention_list_;
      ::perfetto::protos::StatsdAtom* statsd_atom_;
      ::perfetto::protos::AndroidSystemProperty* android_system_property_;
      ::perfetto::protos::EntityStateResidency* entity_state_residency_;
      ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols_;
      ::perfetto::protos::ModuleSymbols* module_symbols_;
      ::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping_;
      ::perfetto::protos::TrackDescriptor* track_descriptor_;
      ::perfetto::protos::ProcessDescriptor* process_descriptor_;
      ::perfetto::protos::ThreadDescriptor* thread_descriptor_;
      ::perfetto::protos::FtraceEventBundle* ftrace_events_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronization_marker_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_packets_;
      ::perfetto::protos::ExtensionDescriptor* extension_descriptor_;
      ::perfetto::protos::NetworkPacketEvent* network_packet_;
      ::perfetto::protos::NetworkPacketBundle* network_packet_bundle_;
      ::perfetto::protos::TrackEventRangeOfInterest* track_event_range_of_interest_;
      ::perfetto::protos::TestEvent* for_testing_;
    } data_;
    union OptionalTrustedUidUnion {
      constexpr OptionalTrustedUidUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::int32_t trusted_uid_;
    } optional_trusted_uid_;
    union OptionalTrustedPacketSequenceIdUnion {
      constexpr OptionalTrustedPacketSequenceIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint32_t trusted_packet_sequence_id_;
    } optional_trusted_packet_sequence_id_;
    ::uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TracePacket

// optional uint64 timestamp = 8;
inline bool TracePacket::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TracePacket::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t TracePacket::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.timestamp)
  return _internal_timestamp();
}
inline void TracePacket::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.timestamp)
}
inline ::uint64_t TracePacket::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void TracePacket::_internal_set_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}

// optional uint32 timestamp_clock_id = 58;
inline bool TracePacket::has_timestamp_clock_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void TracePacket::clear_timestamp_clock_id() {
  _impl_.timestamp_clock_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t TracePacket::timestamp_clock_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.timestamp_clock_id)
  return _internal_timestamp_clock_id();
}
inline void TracePacket::set_timestamp_clock_id(::uint32_t value) {
  _internal_set_timestamp_clock_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.timestamp_clock_id)
}
inline ::uint32_t TracePacket::_internal_timestamp_clock_id() const {
  return _impl_.timestamp_clock_id_;
}
inline void TracePacket::_internal_set_timestamp_clock_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timestamp_clock_id_ = value;
}

// .perfetto.protos.ProcessTree process_tree = 2;
inline bool TracePacket::has_process_tree() const {
  return data_case() == kProcessTree;
}
inline bool TracePacket::_internal_has_process_tree() const {
  return data_case() == kProcessTree;
}
inline void TracePacket::set_has_process_tree() {
  _impl_._oneof_case_[0] = kProcessTree;
}
inline ::perfetto::protos::ProcessTree* TracePacket::release_process_tree() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.process_tree)
  if (data_case() == kProcessTree) {
    clear_has_data();
    ::perfetto::protos::ProcessTree* temp = _impl_.data_.process_tree_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.process_tree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProcessTree& TracePacket::_internal_process_tree() const {
  return data_case() == kProcessTree
      ? *_impl_.data_.process_tree_
      : reinterpret_cast<::perfetto::protos::ProcessTree&>(::perfetto::protos::_ProcessTree_default_instance_);
}
inline const ::perfetto::protos::ProcessTree& TracePacket::process_tree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.process_tree)
  return _internal_process_tree();
}
inline ::perfetto::protos::ProcessTree* TracePacket::unsafe_arena_release_process_tree() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.process_tree)
  if (data_case() == kProcessTree) {
    clear_has_data();
    ::perfetto::protos::ProcessTree* temp = _impl_.data_.process_tree_;
    _impl_.data_.process_tree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_process_tree(::perfetto::protos::ProcessTree* process_tree) {
  clear_data();
  if (process_tree) {
    set_has_process_tree();
    _impl_.data_.process_tree_ = process_tree;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.process_tree)
}
inline ::perfetto::protos::ProcessTree* TracePacket::_internal_mutable_process_tree() {
  if (data_case() != kProcessTree) {
    clear_data();
    set_has_process_tree();
    _impl_.data_.process_tree_ = CreateMaybeMessage< ::perfetto::protos::ProcessTree >(GetArenaForAllocation());
  }
  return _impl_.data_.process_tree_;
}
inline ::perfetto::protos::ProcessTree* TracePacket::mutable_process_tree() {
  ::perfetto::protos::ProcessTree* _msg = _internal_mutable_process_tree();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.process_tree)
  return _msg;
}

// .perfetto.protos.ProcessStats process_stats = 9;
inline bool TracePacket::has_process_stats() const {
  return data_case() == kProcessStats;
}
inline bool TracePacket::_internal_has_process_stats() const {
  return data_case() == kProcessStats;
}
inline void TracePacket::set_has_process_stats() {
  _impl_._oneof_case_[0] = kProcessStats;
}
inline ::perfetto::protos::ProcessStats* TracePacket::release_process_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.process_stats)
  if (data_case() == kProcessStats) {
    clear_has_data();
    ::perfetto::protos::ProcessStats* temp = _impl_.data_.process_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.process_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProcessStats& TracePacket::_internal_process_stats() const {
  return data_case() == kProcessStats
      ? *_impl_.data_.process_stats_
      : reinterpret_cast<::perfetto::protos::ProcessStats&>(::perfetto::protos::_ProcessStats_default_instance_);
}
inline const ::perfetto::protos::ProcessStats& TracePacket::process_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.process_stats)
  return _internal_process_stats();
}
inline ::perfetto::protos::ProcessStats* TracePacket::unsafe_arena_release_process_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.process_stats)
  if (data_case() == kProcessStats) {
    clear_has_data();
    ::perfetto::protos::ProcessStats* temp = _impl_.data_.process_stats_;
    _impl_.data_.process_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_process_stats(::perfetto::protos::ProcessStats* process_stats) {
  clear_data();
  if (process_stats) {
    set_has_process_stats();
    _impl_.data_.process_stats_ = process_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.process_stats)
}
inline ::perfetto::protos::ProcessStats* TracePacket::_internal_mutable_process_stats() {
  if (data_case() != kProcessStats) {
    clear_data();
    set_has_process_stats();
    _impl_.data_.process_stats_ = CreateMaybeMessage< ::perfetto::protos::ProcessStats >(GetArenaForAllocation());
  }
  return _impl_.data_.process_stats_;
}
inline ::perfetto::protos::ProcessStats* TracePacket::mutable_process_stats() {
  ::perfetto::protos::ProcessStats* _msg = _internal_mutable_process_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.process_stats)
  return _msg;
}

// .perfetto.protos.InodeFileMap inode_file_map = 4;
inline bool TracePacket::has_inode_file_map() const {
  return data_case() == kInodeFileMap;
}
inline bool TracePacket::_internal_has_inode_file_map() const {
  return data_case() == kInodeFileMap;
}
inline void TracePacket::set_has_inode_file_map() {
  _impl_._oneof_case_[0] = kInodeFileMap;
}
inline ::perfetto::protos::InodeFileMap* TracePacket::release_inode_file_map() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.inode_file_map)
  if (data_case() == kInodeFileMap) {
    clear_has_data();
    ::perfetto::protos::InodeFileMap* temp = _impl_.data_.inode_file_map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.inode_file_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::InodeFileMap& TracePacket::_internal_inode_file_map() const {
  return data_case() == kInodeFileMap
      ? *_impl_.data_.inode_file_map_
      : reinterpret_cast<::perfetto::protos::InodeFileMap&>(::perfetto::protos::_InodeFileMap_default_instance_);
}
inline const ::perfetto::protos::InodeFileMap& TracePacket::inode_file_map() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.inode_file_map)
  return _internal_inode_file_map();
}
inline ::perfetto::protos::InodeFileMap* TracePacket::unsafe_arena_release_inode_file_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.inode_file_map)
  if (data_case() == kInodeFileMap) {
    clear_has_data();
    ::perfetto::protos::InodeFileMap* temp = _impl_.data_.inode_file_map_;
    _impl_.data_.inode_file_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_inode_file_map(::perfetto::protos::InodeFileMap* inode_file_map) {
  clear_data();
  if (inode_file_map) {
    set_has_inode_file_map();
    _impl_.data_.inode_file_map_ = inode_file_map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.inode_file_map)
}
inline ::perfetto::protos::InodeFileMap* TracePacket::_internal_mutable_inode_file_map() {
  if (data_case() != kInodeFileMap) {
    clear_data();
    set_has_inode_file_map();
    _impl_.data_.inode_file_map_ = CreateMaybeMessage< ::perfetto::protos::InodeFileMap >(GetArenaForAllocation());
  }
  return _impl_.data_.inode_file_map_;
}
inline ::perfetto::protos::InodeFileMap* TracePacket::mutable_inode_file_map() {
  ::perfetto::protos::InodeFileMap* _msg = _internal_mutable_inode_file_map();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.inode_file_map)
  return _msg;
}

// .perfetto.protos.ChromeEventBundle chrome_events = 5;
inline bool TracePacket::has_chrome_events() const {
  return data_case() == kChromeEvents;
}
inline bool TracePacket::_internal_has_chrome_events() const {
  return data_case() == kChromeEvents;
}
inline void TracePacket::set_has_chrome_events() {
  _impl_._oneof_case_[0] = kChromeEvents;
}
inline ::perfetto::protos::ChromeEventBundle* TracePacket::release_chrome_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.chrome_events)
  if (data_case() == kChromeEvents) {
    clear_has_data();
    ::perfetto::protos::ChromeEventBundle* temp = _impl_.data_.chrome_events_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.chrome_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeEventBundle& TracePacket::_internal_chrome_events() const {
  return data_case() == kChromeEvents
      ? *_impl_.data_.chrome_events_
      : reinterpret_cast<::perfetto::protos::ChromeEventBundle&>(::perfetto::protos::_ChromeEventBundle_default_instance_);
}
inline const ::perfetto::protos::ChromeEventBundle& TracePacket::chrome_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.chrome_events)
  return _internal_chrome_events();
}
inline ::perfetto::protos::ChromeEventBundle* TracePacket::unsafe_arena_release_chrome_events() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.chrome_events)
  if (data_case() == kChromeEvents) {
    clear_has_data();
    ::perfetto::protos::ChromeEventBundle* temp = _impl_.data_.chrome_events_;
    _impl_.data_.chrome_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events) {
  clear_data();
  if (chrome_events) {
    set_has_chrome_events();
    _impl_.data_.chrome_events_ = chrome_events;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.chrome_events)
}
inline ::perfetto::protos::ChromeEventBundle* TracePacket::_internal_mutable_chrome_events() {
  if (data_case() != kChromeEvents) {
    clear_data();
    set_has_chrome_events();
    _impl_.data_.chrome_events_ = CreateMaybeMessage< ::perfetto::protos::ChromeEventBundle >(GetArenaForAllocation());
  }
  return _impl_.data_.chrome_events_;
}
inline ::perfetto::protos::ChromeEventBundle* TracePacket::mutable_chrome_events() {
  ::perfetto::protos::ChromeEventBundle* _msg = _internal_mutable_chrome_events();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.chrome_events)
  return _msg;
}

// .perfetto.protos.ClockSnapshot clock_snapshot = 6;
inline bool TracePacket::has_clock_snapshot() const {
  return data_case() == kClockSnapshot;
}
inline bool TracePacket::_internal_has_clock_snapshot() const {
  return data_case() == kClockSnapshot;
}
inline void TracePacket::set_has_clock_snapshot() {
  _impl_._oneof_case_[0] = kClockSnapshot;
}
inline ::perfetto::protos::ClockSnapshot* TracePacket::release_clock_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.clock_snapshot)
  if (data_case() == kClockSnapshot) {
    clear_has_data();
    ::perfetto::protos::ClockSnapshot* temp = _impl_.data_.clock_snapshot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.clock_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockSnapshot& TracePacket::_internal_clock_snapshot() const {
  return data_case() == kClockSnapshot
      ? *_impl_.data_.clock_snapshot_
      : reinterpret_cast<::perfetto::protos::ClockSnapshot&>(::perfetto::protos::_ClockSnapshot_default_instance_);
}
inline const ::perfetto::protos::ClockSnapshot& TracePacket::clock_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.clock_snapshot)
  return _internal_clock_snapshot();
}
inline ::perfetto::protos::ClockSnapshot* TracePacket::unsafe_arena_release_clock_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.clock_snapshot)
  if (data_case() == kClockSnapshot) {
    clear_has_data();
    ::perfetto::protos::ClockSnapshot* temp = _impl_.data_.clock_snapshot_;
    _impl_.data_.clock_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot) {
  clear_data();
  if (clock_snapshot) {
    set_has_clock_snapshot();
    _impl_.data_.clock_snapshot_ = clock_snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.clock_snapshot)
}
inline ::perfetto::protos::ClockSnapshot* TracePacket::_internal_mutable_clock_snapshot() {
  if (data_case() != kClockSnapshot) {
    clear_data();
    set_has_clock_snapshot();
    _impl_.data_.clock_snapshot_ = CreateMaybeMessage< ::perfetto::protos::ClockSnapshot >(GetArenaForAllocation());
  }
  return _impl_.data_.clock_snapshot_;
}
inline ::perfetto::protos::ClockSnapshot* TracePacket::mutable_clock_snapshot() {
  ::perfetto::protos::ClockSnapshot* _msg = _internal_mutable_clock_snapshot();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.clock_snapshot)
  return _msg;
}

// .perfetto.protos.SysStats sys_stats = 7;
inline bool TracePacket::has_sys_stats() const {
  return data_case() == kSysStats;
}
inline bool TracePacket::_internal_has_sys_stats() const {
  return data_case() == kSysStats;
}
inline void TracePacket::set_has_sys_stats() {
  _impl_._oneof_case_[0] = kSysStats;
}
inline ::perfetto::protos::SysStats* TracePacket::release_sys_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.sys_stats)
  if (data_case() == kSysStats) {
    clear_has_data();
    ::perfetto::protos::SysStats* temp = _impl_.data_.sys_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.sys_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SysStats& TracePacket::_internal_sys_stats() const {
  return data_case() == kSysStats
      ? *_impl_.data_.sys_stats_
      : reinterpret_cast<::perfetto::protos::SysStats&>(::perfetto::protos::_SysStats_default_instance_);
}
inline const ::perfetto::protos::SysStats& TracePacket::sys_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.sys_stats)
  return _internal_sys_stats();
}
inline ::perfetto::protos::SysStats* TracePacket::unsafe_arena_release_sys_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.sys_stats)
  if (data_case() == kSysStats) {
    clear_has_data();
    ::perfetto::protos::SysStats* temp = _impl_.data_.sys_stats_;
    _impl_.data_.sys_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_sys_stats(::perfetto::protos::SysStats* sys_stats) {
  clear_data();
  if (sys_stats) {
    set_has_sys_stats();
    _impl_.data_.sys_stats_ = sys_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.sys_stats)
}
inline ::perfetto::protos::SysStats* TracePacket::_internal_mutable_sys_stats() {
  if (data_case() != kSysStats) {
    clear_data();
    set_has_sys_stats();
    _impl_.data_.sys_stats_ = CreateMaybeMessage< ::perfetto::protos::SysStats >(GetArenaForAllocation());
  }
  return _impl_.data_.sys_stats_;
}
inline ::perfetto::protos::SysStats* TracePacket::mutable_sys_stats() {
  ::perfetto::protos::SysStats* _msg = _internal_mutable_sys_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.sys_stats)
  return _msg;
}

// .perfetto.protos.TrackEvent track_event = 11;
inline bool TracePacket::has_track_event() const {
  return data_case() == kTrackEvent;
}
inline bool TracePacket::_internal_has_track_event() const {
  return data_case() == kTrackEvent;
}
inline void TracePacket::set_has_track_event() {
  _impl_._oneof_case_[0] = kTrackEvent;
}
inline ::perfetto::protos::TrackEvent* TracePacket::release_track_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.track_event)
  if (data_case() == kTrackEvent) {
    clear_has_data();
    ::perfetto::protos::TrackEvent* temp = _impl_.data_.track_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrackEvent& TracePacket::_internal_track_event() const {
  return data_case() == kTrackEvent
      ? *_impl_.data_.track_event_
      : reinterpret_cast<::perfetto::protos::TrackEvent&>(::perfetto::protos::_TrackEvent_default_instance_);
}
inline const ::perfetto::protos::TrackEvent& TracePacket::track_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.track_event)
  return _internal_track_event();
}
inline ::perfetto::protos::TrackEvent* TracePacket::unsafe_arena_release_track_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.track_event)
  if (data_case() == kTrackEvent) {
    clear_has_data();
    ::perfetto::protos::TrackEvent* temp = _impl_.data_.track_event_;
    _impl_.data_.track_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_track_event(::perfetto::protos::TrackEvent* track_event) {
  clear_data();
  if (track_event) {
    set_has_track_event();
    _impl_.data_.track_event_ = track_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.track_event)
}
inline ::perfetto::protos::TrackEvent* TracePacket::_internal_mutable_track_event() {
  if (data_case() != kTrackEvent) {
    clear_data();
    set_has_track_event();
    _impl_.data_.track_event_ = CreateMaybeMessage< ::perfetto::protos::TrackEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.track_event_;
}
inline ::perfetto::protos::TrackEvent* TracePacket::mutable_track_event() {
  ::perfetto::protos::TrackEvent* _msg = _internal_mutable_track_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.track_event)
  return _msg;
}

// .perfetto.protos.TraceUuid trace_uuid = 89;
inline bool TracePacket::has_trace_uuid() const {
  return data_case() == kTraceUuid;
}
inline bool TracePacket::_internal_has_trace_uuid() const {
  return data_case() == kTraceUuid;
}
inline void TracePacket::set_has_trace_uuid() {
  _impl_._oneof_case_[0] = kTraceUuid;
}
inline ::perfetto::protos::TraceUuid* TracePacket::release_trace_uuid() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_uuid)
  if (data_case() == kTraceUuid) {
    clear_has_data();
    ::perfetto::protos::TraceUuid* temp = _impl_.data_.trace_uuid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.trace_uuid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TraceUuid& TracePacket::_internal_trace_uuid() const {
  return data_case() == kTraceUuid
      ? *_impl_.data_.trace_uuid_
      : reinterpret_cast<::perfetto::protos::TraceUuid&>(::perfetto::protos::_TraceUuid_default_instance_);
}
inline const ::perfetto::protos::TraceUuid& TracePacket::trace_uuid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_uuid)
  return _internal_trace_uuid();
}
inline ::perfetto::protos::TraceUuid* TracePacket::unsafe_arena_release_trace_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.trace_uuid)
  if (data_case() == kTraceUuid) {
    clear_has_data();
    ::perfetto::protos::TraceUuid* temp = _impl_.data_.trace_uuid_;
    _impl_.data_.trace_uuid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_trace_uuid(::perfetto::protos::TraceUuid* trace_uuid) {
  clear_data();
  if (trace_uuid) {
    set_has_trace_uuid();
    _impl_.data_.trace_uuid_ = trace_uuid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.trace_uuid)
}
inline ::perfetto::protos::TraceUuid* TracePacket::_internal_mutable_trace_uuid() {
  if (data_case() != kTraceUuid) {
    clear_data();
    set_has_trace_uuid();
    _impl_.data_.trace_uuid_ = CreateMaybeMessage< ::perfetto::protos::TraceUuid >(GetArenaForAllocation());
  }
  return _impl_.data_.trace_uuid_;
}
inline ::perfetto::protos::TraceUuid* TracePacket::mutable_trace_uuid() {
  ::perfetto::protos::TraceUuid* _msg = _internal_mutable_trace_uuid();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_uuid)
  return _msg;
}

// .perfetto.protos.TraceConfig trace_config = 33;
inline bool TracePacket::has_trace_config() const {
  return data_case() == kTraceConfig;
}
inline bool TracePacket::_internal_has_trace_config() const {
  return data_case() == kTraceConfig;
}
inline void TracePacket::set_has_trace_config() {
  _impl_._oneof_case_[0] = kTraceConfig;
}
inline ::perfetto::protos::TraceConfig* TracePacket::release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_config)
  if (data_case() == kTraceConfig) {
    clear_has_data();
    ::perfetto::protos::TraceConfig* temp = _impl_.data_.trace_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.trace_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TraceConfig& TracePacket::_internal_trace_config() const {
  return data_case() == kTraceConfig
      ? *_impl_.data_.trace_config_
      : reinterpret_cast<::perfetto::protos::TraceConfig&>(::perfetto::protos::_TraceConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig& TracePacket::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_config)
  return _internal_trace_config();
}
inline ::perfetto::protos::TraceConfig* TracePacket::unsafe_arena_release_trace_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.trace_config)
  if (data_case() == kTraceConfig) {
    clear_has_data();
    ::perfetto::protos::TraceConfig* temp = _impl_.data_.trace_config_;
    _impl_.data_.trace_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  clear_data();
  if (trace_config) {
    set_has_trace_config();
    _impl_.data_.trace_config_ = trace_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.trace_config)
}
inline ::perfetto::protos::TraceConfig* TracePacket::_internal_mutable_trace_config() {
  if (data_case() != kTraceConfig) {
    clear_data();
    set_has_trace_config();
    _impl_.data_.trace_config_ = CreateMaybeMessage< ::perfetto::protos::TraceConfig >(GetArenaForAllocation());
  }
  return _impl_.data_.trace_config_;
}
inline ::perfetto::protos::TraceConfig* TracePacket::mutable_trace_config() {
  ::perfetto::protos::TraceConfig* _msg = _internal_mutable_trace_config();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_config)
  return _msg;
}

// .perfetto.protos.FtraceStats ftrace_stats = 34;
inline bool TracePacket::has_ftrace_stats() const {
  return data_case() == kFtraceStats;
}
inline bool TracePacket::_internal_has_ftrace_stats() const {
  return data_case() == kFtraceStats;
}
inline void TracePacket::set_has_ftrace_stats() {
  _impl_._oneof_case_[0] = kFtraceStats;
}
inline ::perfetto::protos::FtraceStats* TracePacket::release_ftrace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.ftrace_stats)
  if (data_case() == kFtraceStats) {
    clear_has_data();
    ::perfetto::protos::FtraceStats* temp = _impl_.data_.ftrace_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.ftrace_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FtraceStats& TracePacket::_internal_ftrace_stats() const {
  return data_case() == kFtraceStats
      ? *_impl_.data_.ftrace_stats_
      : reinterpret_cast<::perfetto::protos::FtraceStats&>(::perfetto::protos::_FtraceStats_default_instance_);
}
inline const ::perfetto::protos::FtraceStats& TracePacket::ftrace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.ftrace_stats)
  return _internal_ftrace_stats();
}
inline ::perfetto::protos::FtraceStats* TracePacket::unsafe_arena_release_ftrace_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.ftrace_stats)
  if (data_case() == kFtraceStats) {
    clear_has_data();
    ::perfetto::protos::FtraceStats* temp = _impl_.data_.ftrace_stats_;
    _impl_.data_.ftrace_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_ftrace_stats(::perfetto::protos::FtraceStats* ftrace_stats) {
  clear_data();
  if (ftrace_stats) {
    set_has_ftrace_stats();
    _impl_.data_.ftrace_stats_ = ftrace_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.ftrace_stats)
}
inline ::perfetto::protos::FtraceStats* TracePacket::_internal_mutable_ftrace_stats() {
  if (data_case() != kFtraceStats) {
    clear_data();
    set_has_ftrace_stats();
    _impl_.data_.ftrace_stats_ = CreateMaybeMessage< ::perfetto::protos::FtraceStats >(GetArenaForAllocation());
  }
  return _impl_.data_.ftrace_stats_;
}
inline ::perfetto::protos::FtraceStats* TracePacket::mutable_ftrace_stats() {
  ::perfetto::protos::FtraceStats* _msg = _internal_mutable_ftrace_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.ftrace_stats)
  return _msg;
}

// .perfetto.protos.TraceStats trace_stats = 35;
inline bool TracePacket::has_trace_stats() const {
  return data_case() == kTraceStats;
}
inline bool TracePacket::_internal_has_trace_stats() const {
  return data_case() == kTraceStats;
}
inline void TracePacket::set_has_trace_stats() {
  _impl_._oneof_case_[0] = kTraceStats;
}
inline ::perfetto::protos::TraceStats* TracePacket::release_trace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_stats)
  if (data_case() == kTraceStats) {
    clear_has_data();
    ::perfetto::protos::TraceStats* temp = _impl_.data_.trace_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.trace_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TraceStats& TracePacket::_internal_trace_stats() const {
  return data_case() == kTraceStats
      ? *_impl_.data_.trace_stats_
      : reinterpret_cast<::perfetto::protos::TraceStats&>(::perfetto::protos::_TraceStats_default_instance_);
}
inline const ::perfetto::protos::TraceStats& TracePacket::trace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_stats)
  return _internal_trace_stats();
}
inline ::perfetto::protos::TraceStats* TracePacket::unsafe_arena_release_trace_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.trace_stats)
  if (data_case() == kTraceStats) {
    clear_has_data();
    ::perfetto::protos::TraceStats* temp = _impl_.data_.trace_stats_;
    _impl_.data_.trace_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats) {
  clear_data();
  if (trace_stats) {
    set_has_trace_stats();
    _impl_.data_.trace_stats_ = trace_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.trace_stats)
}
inline ::perfetto::protos::TraceStats* TracePacket::_internal_mutable_trace_stats() {
  if (data_case() != kTraceStats) {
    clear_data();
    set_has_trace_stats();
    _impl_.data_.trace_stats_ = CreateMaybeMessage< ::perfetto::protos::TraceStats >(GetArenaForAllocation());
  }
  return _impl_.data_.trace_stats_;
}
inline ::perfetto::protos::TraceStats* TracePacket::mutable_trace_stats() {
  ::perfetto::protos::TraceStats* _msg = _internal_mutable_trace_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_stats)
  return _msg;
}

// .perfetto.protos.ProfilePacket profile_packet = 37;
inline bool TracePacket::has_profile_packet() const {
  return data_case() == kProfilePacket;
}
inline bool TracePacket::_internal_has_profile_packet() const {
  return data_case() == kProfilePacket;
}
inline void TracePacket::set_has_profile_packet() {
  _impl_._oneof_case_[0] = kProfilePacket;
}
inline ::perfetto::protos::ProfilePacket* TracePacket::release_profile_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.profile_packet)
  if (data_case() == kProfilePacket) {
    clear_has_data();
    ::perfetto::protos::ProfilePacket* temp = _impl_.data_.profile_packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.profile_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProfilePacket& TracePacket::_internal_profile_packet() const {
  return data_case() == kProfilePacket
      ? *_impl_.data_.profile_packet_
      : reinterpret_cast<::perfetto::protos::ProfilePacket&>(::perfetto::protos::_ProfilePacket_default_instance_);
}
inline const ::perfetto::protos::ProfilePacket& TracePacket::profile_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.profile_packet)
  return _internal_profile_packet();
}
inline ::perfetto::protos::ProfilePacket* TracePacket::unsafe_arena_release_profile_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.profile_packet)
  if (data_case() == kProfilePacket) {
    clear_has_data();
    ::perfetto::protos::ProfilePacket* temp = _impl_.data_.profile_packet_;
    _impl_.data_.profile_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_profile_packet(::perfetto::protos::ProfilePacket* profile_packet) {
  clear_data();
  if (profile_packet) {
    set_has_profile_packet();
    _impl_.data_.profile_packet_ = profile_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.profile_packet)
}
inline ::perfetto::protos::ProfilePacket* TracePacket::_internal_mutable_profile_packet() {
  if (data_case() != kProfilePacket) {
    clear_data();
    set_has_profile_packet();
    _impl_.data_.profile_packet_ = CreateMaybeMessage< ::perfetto::protos::ProfilePacket >(GetArenaForAllocation());
  }
  return _impl_.data_.profile_packet_;
}
inline ::perfetto::protos::ProfilePacket* TracePacket::mutable_profile_packet() {
  ::perfetto::protos::ProfilePacket* _msg = _internal_mutable_profile_packet();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.profile_packet)
  return _msg;
}

// .perfetto.protos.StreamingAllocation streaming_allocation = 74;
inline bool TracePacket::has_streaming_allocation() const {
  return data_case() == kStreamingAllocation;
}
inline bool TracePacket::_internal_has_streaming_allocation() const {
  return data_case() == kStreamingAllocation;
}
inline void TracePacket::set_has_streaming_allocation() {
  _impl_._oneof_case_[0] = kStreamingAllocation;
}
inline ::perfetto::protos::StreamingAllocation* TracePacket::release_streaming_allocation() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.streaming_allocation)
  if (data_case() == kStreamingAllocation) {
    clear_has_data();
    ::perfetto::protos::StreamingAllocation* temp = _impl_.data_.streaming_allocation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.streaming_allocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StreamingAllocation& TracePacket::_internal_streaming_allocation() const {
  return data_case() == kStreamingAllocation
      ? *_impl_.data_.streaming_allocation_
      : reinterpret_cast<::perfetto::protos::StreamingAllocation&>(::perfetto::protos::_StreamingAllocation_default_instance_);
}
inline const ::perfetto::protos::StreamingAllocation& TracePacket::streaming_allocation() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.streaming_allocation)
  return _internal_streaming_allocation();
}
inline ::perfetto::protos::StreamingAllocation* TracePacket::unsafe_arena_release_streaming_allocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.streaming_allocation)
  if (data_case() == kStreamingAllocation) {
    clear_has_data();
    ::perfetto::protos::StreamingAllocation* temp = _impl_.data_.streaming_allocation_;
    _impl_.data_.streaming_allocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_streaming_allocation(::perfetto::protos::StreamingAllocation* streaming_allocation) {
  clear_data();
  if (streaming_allocation) {
    set_has_streaming_allocation();
    _impl_.data_.streaming_allocation_ = streaming_allocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.streaming_allocation)
}
inline ::perfetto::protos::StreamingAllocation* TracePacket::_internal_mutable_streaming_allocation() {
  if (data_case() != kStreamingAllocation) {
    clear_data();
    set_has_streaming_allocation();
    _impl_.data_.streaming_allocation_ = CreateMaybeMessage< ::perfetto::protos::StreamingAllocation >(GetArenaForAllocation());
  }
  return _impl_.data_.streaming_allocation_;
}
inline ::perfetto::protos::StreamingAllocation* TracePacket::mutable_streaming_allocation() {
  ::perfetto::protos::StreamingAllocation* _msg = _internal_mutable_streaming_allocation();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.streaming_allocation)
  return _msg;
}

// .perfetto.protos.StreamingFree streaming_free = 75;
inline bool TracePacket::has_streaming_free() const {
  return data_case() == kStreamingFree;
}
inline bool TracePacket::_internal_has_streaming_free() const {
  return data_case() == kStreamingFree;
}
inline void TracePacket::set_has_streaming_free() {
  _impl_._oneof_case_[0] = kStreamingFree;
}
inline ::perfetto::protos::StreamingFree* TracePacket::release_streaming_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.streaming_free)
  if (data_case() == kStreamingFree) {
    clear_has_data();
    ::perfetto::protos::StreamingFree* temp = _impl_.data_.streaming_free_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.streaming_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StreamingFree& TracePacket::_internal_streaming_free() const {
  return data_case() == kStreamingFree
      ? *_impl_.data_.streaming_free_
      : reinterpret_cast<::perfetto::protos::StreamingFree&>(::perfetto::protos::_StreamingFree_default_instance_);
}
inline const ::perfetto::protos::StreamingFree& TracePacket::streaming_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.streaming_free)
  return _internal_streaming_free();
}
inline ::perfetto::protos::StreamingFree* TracePacket::unsafe_arena_release_streaming_free() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.streaming_free)
  if (data_case() == kStreamingFree) {
    clear_has_data();
    ::perfetto::protos::StreamingFree* temp = _impl_.data_.streaming_free_;
    _impl_.data_.streaming_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_streaming_free(::perfetto::protos::StreamingFree* streaming_free) {
  clear_data();
  if (streaming_free) {
    set_has_streaming_free();
    _impl_.data_.streaming_free_ = streaming_free;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.streaming_free)
}
inline ::perfetto::protos::StreamingFree* TracePacket::_internal_mutable_streaming_free() {
  if (data_case() != kStreamingFree) {
    clear_data();
    set_has_streaming_free();
    _impl_.data_.streaming_free_ = CreateMaybeMessage< ::perfetto::protos::StreamingFree >(GetArenaForAllocation());
  }
  return _impl_.data_.streaming_free_;
}
inline ::perfetto::protos::StreamingFree* TracePacket::mutable_streaming_free() {
  ::perfetto::protos::StreamingFree* _msg = _internal_mutable_streaming_free();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.streaming_free)
  return _msg;
}

// .perfetto.protos.BatteryCounters battery = 38;
inline bool TracePacket::has_battery() const {
  return data_case() == kBattery;
}
inline bool TracePacket::_internal_has_battery() const {
  return data_case() == kBattery;
}
inline void TracePacket::set_has_battery() {
  _impl_._oneof_case_[0] = kBattery;
}
inline ::perfetto::protos::BatteryCounters* TracePacket::release_battery() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.battery)
  if (data_case() == kBattery) {
    clear_has_data();
    ::perfetto::protos::BatteryCounters* temp = _impl_.data_.battery_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.battery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BatteryCounters& TracePacket::_internal_battery() const {
  return data_case() == kBattery
      ? *_impl_.data_.battery_
      : reinterpret_cast<::perfetto::protos::BatteryCounters&>(::perfetto::protos::_BatteryCounters_default_instance_);
}
inline const ::perfetto::protos::BatteryCounters& TracePacket::battery() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.battery)
  return _internal_battery();
}
inline ::perfetto::protos::BatteryCounters* TracePacket::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.battery)
  if (data_case() == kBattery) {
    clear_has_data();
    ::perfetto::protos::BatteryCounters* temp = _impl_.data_.battery_;
    _impl_.data_.battery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_battery(::perfetto::protos::BatteryCounters* battery) {
  clear_data();
  if (battery) {
    set_has_battery();
    _impl_.data_.battery_ = battery;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.battery)
}
inline ::perfetto::protos::BatteryCounters* TracePacket::_internal_mutable_battery() {
  if (data_case() != kBattery) {
    clear_data();
    set_has_battery();
    _impl_.data_.battery_ = CreateMaybeMessage< ::perfetto::protos::BatteryCounters >(GetArenaForAllocation());
  }
  return _impl_.data_.battery_;
}
inline ::perfetto::protos::BatteryCounters* TracePacket::mutable_battery() {
  ::perfetto::protos::BatteryCounters* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.battery)
  return _msg;
}

// .perfetto.protos.PowerRails power_rails = 40;
inline bool TracePacket::has_power_rails() const {
  return data_case() == kPowerRails;
}
inline bool TracePacket::_internal_has_power_rails() const {
  return data_case() == kPowerRails;
}
inline void TracePacket::set_has_power_rails() {
  _impl_._oneof_case_[0] = kPowerRails;
}
inline ::perfetto::protos::PowerRails* TracePacket::release_power_rails() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.power_rails)
  if (data_case() == kPowerRails) {
    clear_has_data();
    ::perfetto::protos::PowerRails* temp = _impl_.data_.power_rails_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.power_rails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PowerRails& TracePacket::_internal_power_rails() const {
  return data_case() == kPowerRails
      ? *_impl_.data_.power_rails_
      : reinterpret_cast<::perfetto::protos::PowerRails&>(::perfetto::protos::_PowerRails_default_instance_);
}
inline const ::perfetto::protos::PowerRails& TracePacket::power_rails() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.power_rails)
  return _internal_power_rails();
}
inline ::perfetto::protos::PowerRails* TracePacket::unsafe_arena_release_power_rails() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.power_rails)
  if (data_case() == kPowerRails) {
    clear_has_data();
    ::perfetto::protos::PowerRails* temp = _impl_.data_.power_rails_;
    _impl_.data_.power_rails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_power_rails(::perfetto::protos::PowerRails* power_rails) {
  clear_data();
  if (power_rails) {
    set_has_power_rails();
    _impl_.data_.power_rails_ = power_rails;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.power_rails)
}
inline ::perfetto::protos::PowerRails* TracePacket::_internal_mutable_power_rails() {
  if (data_case() != kPowerRails) {
    clear_data();
    set_has_power_rails();
    _impl_.data_.power_rails_ = CreateMaybeMessage< ::perfetto::protos::PowerRails >(GetArenaForAllocation());
  }
  return _impl_.data_.power_rails_;
}
inline ::perfetto::protos::PowerRails* TracePacket::mutable_power_rails() {
  ::perfetto::protos::PowerRails* _msg = _internal_mutable_power_rails();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.power_rails)
  return _msg;
}

// .perfetto.protos.AndroidLogPacket android_log = 39;
inline bool TracePacket::has_android_log() const {
  return data_case() == kAndroidLog;
}
inline bool TracePacket::_internal_has_android_log() const {
  return data_case() == kAndroidLog;
}
inline void TracePacket::set_has_android_log() {
  _impl_._oneof_case_[0] = kAndroidLog;
}
inline ::perfetto::protos::AndroidLogPacket* TracePacket::release_android_log() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_log)
  if (data_case() == kAndroidLog) {
    clear_has_data();
    ::perfetto::protos::AndroidLogPacket* temp = _impl_.data_.android_log_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.android_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidLogPacket& TracePacket::_internal_android_log() const {
  return data_case() == kAndroidLog
      ? *_impl_.data_.android_log_
      : reinterpret_cast<::perfetto::protos::AndroidLogPacket&>(::perfetto::protos::_AndroidLogPacket_default_instance_);
}
inline const ::perfetto::protos::AndroidLogPacket& TracePacket::android_log() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_log)
  return _internal_android_log();
}
inline ::perfetto::protos::AndroidLogPacket* TracePacket::unsafe_arena_release_android_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.android_log)
  if (data_case() == kAndroidLog) {
    clear_has_data();
    ::perfetto::protos::AndroidLogPacket* temp = _impl_.data_.android_log_;
    _impl_.data_.android_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_android_log(::perfetto::protos::AndroidLogPacket* android_log) {
  clear_data();
  if (android_log) {
    set_has_android_log();
    _impl_.data_.android_log_ = android_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.android_log)
}
inline ::perfetto::protos::AndroidLogPacket* TracePacket::_internal_mutable_android_log() {
  if (data_case() != kAndroidLog) {
    clear_data();
    set_has_android_log();
    _impl_.data_.android_log_ = CreateMaybeMessage< ::perfetto::protos::AndroidLogPacket >(GetArenaForAllocation());
  }
  return _impl_.data_.android_log_;
}
inline ::perfetto::protos::AndroidLogPacket* TracePacket::mutable_android_log() {
  ::perfetto::protos::AndroidLogPacket* _msg = _internal_mutable_android_log();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_log)
  return _msg;
}

// .perfetto.protos.SystemInfo system_info = 45;
inline bool TracePacket::has_system_info() const {
  return data_case() == kSystemInfo;
}
inline bool TracePacket::_internal_has_system_info() const {
  return data_case() == kSystemInfo;
}
inline void TracePacket::set_has_system_info() {
  _impl_._oneof_case_[0] = kSystemInfo;
}
inline ::perfetto::protos::SystemInfo* TracePacket::release_system_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.system_info)
  if (data_case() == kSystemInfo) {
    clear_has_data();
    ::perfetto::protos::SystemInfo* temp = _impl_.data_.system_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.system_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SystemInfo& TracePacket::_internal_system_info() const {
  return data_case() == kSystemInfo
      ? *_impl_.data_.system_info_
      : reinterpret_cast<::perfetto::protos::SystemInfo&>(::perfetto::protos::_SystemInfo_default_instance_);
}
inline const ::perfetto::protos::SystemInfo& TracePacket::system_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.system_info)
  return _internal_system_info();
}
inline ::perfetto::protos::SystemInfo* TracePacket::unsafe_arena_release_system_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.system_info)
  if (data_case() == kSystemInfo) {
    clear_has_data();
    ::perfetto::protos::SystemInfo* temp = _impl_.data_.system_info_;
    _impl_.data_.system_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_system_info(::perfetto::protos::SystemInfo* system_info) {
  clear_data();
  if (system_info) {
    set_has_system_info();
    _impl_.data_.system_info_ = system_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.system_info)
}
inline ::perfetto::protos::SystemInfo* TracePacket::_internal_mutable_system_info() {
  if (data_case() != kSystemInfo) {
    clear_data();
    set_has_system_info();
    _impl_.data_.system_info_ = CreateMaybeMessage< ::perfetto::protos::SystemInfo >(GetArenaForAllocation());
  }
  return _impl_.data_.system_info_;
}
inline ::perfetto::protos::SystemInfo* TracePacket::mutable_system_info() {
  ::perfetto::protos::SystemInfo* _msg = _internal_mutable_system_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.system_info)
  return _msg;
}

// .perfetto.protos.Trigger trigger = 46;
inline bool TracePacket::has_trigger() const {
  return data_case() == kTrigger;
}
inline bool TracePacket::_internal_has_trigger() const {
  return data_case() == kTrigger;
}
inline void TracePacket::set_has_trigger() {
  _impl_._oneof_case_[0] = kTrigger;
}
inline ::perfetto::protos::Trigger* TracePacket::release_trigger() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trigger)
  if (data_case() == kTrigger) {
    clear_has_data();
    ::perfetto::protos::Trigger* temp = _impl_.data_.trigger_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Trigger& TracePacket::_internal_trigger() const {
  return data_case() == kTrigger
      ? *_impl_.data_.trigger_
      : reinterpret_cast<::perfetto::protos::Trigger&>(::perfetto::protos::_Trigger_default_instance_);
}
inline const ::perfetto::protos::Trigger& TracePacket::trigger() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trigger)
  return _internal_trigger();
}
inline ::perfetto::protos::Trigger* TracePacket::unsafe_arena_release_trigger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.trigger)
  if (data_case() == kTrigger) {
    clear_has_data();
    ::perfetto::protos::Trigger* temp = _impl_.data_.trigger_;
    _impl_.data_.trigger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_trigger(::perfetto::protos::Trigger* trigger) {
  clear_data();
  if (trigger) {
    set_has_trigger();
    _impl_.data_.trigger_ = trigger;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.trigger)
}
inline ::perfetto::protos::Trigger* TracePacket::_internal_mutable_trigger() {
  if (data_case() != kTrigger) {
    clear_data();
    set_has_trigger();
    _impl_.data_.trigger_ = CreateMaybeMessage< ::perfetto::protos::Trigger >(GetArenaForAllocation());
  }
  return _impl_.data_.trigger_;
}
inline ::perfetto::protos::Trigger* TracePacket::mutable_trigger() {
  ::perfetto::protos::Trigger* _msg = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trigger)
  return _msg;
}

// .perfetto.protos.PackagesList packages_list = 47;
inline bool TracePacket::has_packages_list() const {
  return data_case() == kPackagesList;
}
inline bool TracePacket::_internal_has_packages_list() const {
  return data_case() == kPackagesList;
}
inline void TracePacket::set_has_packages_list() {
  _impl_._oneof_case_[0] = kPackagesList;
}
inline ::perfetto::protos::PackagesList* TracePacket::release_packages_list() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.packages_list)
  if (data_case() == kPackagesList) {
    clear_has_data();
    ::perfetto::protos::PackagesList* temp = _impl_.data_.packages_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.packages_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PackagesList& TracePacket::_internal_packages_list() const {
  return data_case() == kPackagesList
      ? *_impl_.data_.packages_list_
      : reinterpret_cast<::perfetto::protos::PackagesList&>(::perfetto::protos::_PackagesList_default_instance_);
}
inline const ::perfetto::protos::PackagesList& TracePacket::packages_list() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.packages_list)
  return _internal_packages_list();
}
inline ::perfetto::protos::PackagesList* TracePacket::unsafe_arena_release_packages_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.packages_list)
  if (data_case() == kPackagesList) {
    clear_has_data();
    ::perfetto::protos::PackagesList* temp = _impl_.data_.packages_list_;
    _impl_.data_.packages_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_packages_list(::perfetto::protos::PackagesList* packages_list) {
  clear_data();
  if (packages_list) {
    set_has_packages_list();
    _impl_.data_.packages_list_ = packages_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.packages_list)
}
inline ::perfetto::protos::PackagesList* TracePacket::_internal_mutable_packages_list() {
  if (data_case() != kPackagesList) {
    clear_data();
    set_has_packages_list();
    _impl_.data_.packages_list_ = CreateMaybeMessage< ::perfetto::protos::PackagesList >(GetArenaForAllocation());
  }
  return _impl_.data_.packages_list_;
}
inline ::perfetto::protos::PackagesList* TracePacket::mutable_packages_list() {
  ::perfetto::protos::PackagesList* _msg = _internal_mutable_packages_list();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.packages_list)
  return _msg;
}

// .perfetto.protos.ChromeBenchmarkMetadata chrome_benchmark_metadata = 48;
inline bool TracePacket::has_chrome_benchmark_metadata() const {
  return data_case() == kChromeBenchmarkMetadata;
}
inline bool TracePacket::_internal_has_chrome_benchmark_metadata() const {
  return data_case() == kChromeBenchmarkMetadata;
}
inline void TracePacket::set_has_chrome_benchmark_metadata() {
  _impl_._oneof_case_[0] = kChromeBenchmarkMetadata;
}
inline ::perfetto::protos::ChromeBenchmarkMetadata* TracePacket::release_chrome_benchmark_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  if (data_case() == kChromeBenchmarkMetadata) {
    clear_has_data();
    ::perfetto::protos::ChromeBenchmarkMetadata* temp = _impl_.data_.chrome_benchmark_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.chrome_benchmark_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeBenchmarkMetadata& TracePacket::_internal_chrome_benchmark_metadata() const {
  return data_case() == kChromeBenchmarkMetadata
      ? *_impl_.data_.chrome_benchmark_metadata_
      : reinterpret_cast<::perfetto::protos::ChromeBenchmarkMetadata&>(::perfetto::protos::_ChromeBenchmarkMetadata_default_instance_);
}
inline const ::perfetto::protos::ChromeBenchmarkMetadata& TracePacket::chrome_benchmark_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  return _internal_chrome_benchmark_metadata();
}
inline ::perfetto::protos::ChromeBenchmarkMetadata* TracePacket::unsafe_arena_release_chrome_benchmark_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  if (data_case() == kChromeBenchmarkMetadata) {
    clear_has_data();
    ::perfetto::protos::ChromeBenchmarkMetadata* temp = _impl_.data_.chrome_benchmark_metadata_;
    _impl_.data_.chrome_benchmark_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_chrome_benchmark_metadata(::perfetto::protos::ChromeBenchmarkMetadata* chrome_benchmark_metadata) {
  clear_data();
  if (chrome_benchmark_metadata) {
    set_has_chrome_benchmark_metadata();
    _impl_.data_.chrome_benchmark_metadata_ = chrome_benchmark_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.chrome_benchmark_metadata)
}
inline ::perfetto::protos::ChromeBenchmarkMetadata* TracePacket::_internal_mutable_chrome_benchmark_metadata() {
  if (data_case() != kChromeBenchmarkMetadata) {
    clear_data();
    set_has_chrome_benchmark_metadata();
    _impl_.data_.chrome_benchmark_metadata_ = CreateMaybeMessage< ::perfetto::protos::ChromeBenchmarkMetadata >(GetArenaForAllocation());
  }
  return _impl_.data_.chrome_benchmark_metadata_;
}
inline ::perfetto::protos::ChromeBenchmarkMetadata* TracePacket::mutable_chrome_benchmark_metadata() {
  ::perfetto::protos::ChromeBenchmarkMetadata* _msg = _internal_mutable_chrome_benchmark_metadata();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.chrome_benchmark_metadata)
  return _msg;
}

// .perfetto.protos.PerfettoMetatrace perfetto_metatrace = 49;
inline bool TracePacket::has_perfetto_metatrace() const {
  return data_case() == kPerfettoMetatrace;
}
inline bool TracePacket::_internal_has_perfetto_metatrace() const {
  return data_case() == kPerfettoMetatrace;
}
inline void TracePacket::set_has_perfetto_metatrace() {
  _impl_._oneof_case_[0] = kPerfettoMetatrace;
}
inline ::perfetto::protos::PerfettoMetatrace* TracePacket::release_perfetto_metatrace() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.perfetto_metatrace)
  if (data_case() == kPerfettoMetatrace) {
    clear_has_data();
    ::perfetto::protos::PerfettoMetatrace* temp = _impl_.data_.perfetto_metatrace_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.perfetto_metatrace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PerfettoMetatrace& TracePacket::_internal_perfetto_metatrace() const {
  return data_case() == kPerfettoMetatrace
      ? *_impl_.data_.perfetto_metatrace_
      : reinterpret_cast<::perfetto::protos::PerfettoMetatrace&>(::perfetto::protos::_PerfettoMetatrace_default_instance_);
}
inline const ::perfetto::protos::PerfettoMetatrace& TracePacket::perfetto_metatrace() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.perfetto_metatrace)
  return _internal_perfetto_metatrace();
}
inline ::perfetto::protos::PerfettoMetatrace* TracePacket::unsafe_arena_release_perfetto_metatrace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.perfetto_metatrace)
  if (data_case() == kPerfettoMetatrace) {
    clear_has_data();
    ::perfetto::protos::PerfettoMetatrace* temp = _impl_.data_.perfetto_metatrace_;
    _impl_.data_.perfetto_metatrace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_perfetto_metatrace(::perfetto::protos::PerfettoMetatrace* perfetto_metatrace) {
  clear_data();
  if (perfetto_metatrace) {
    set_has_perfetto_metatrace();
    _impl_.data_.perfetto_metatrace_ = perfetto_metatrace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.perfetto_metatrace)
}
inline ::perfetto::protos::PerfettoMetatrace* TracePacket::_internal_mutable_perfetto_metatrace() {
  if (data_case() != kPerfettoMetatrace) {
    clear_data();
    set_has_perfetto_metatrace();
    _impl_.data_.perfetto_metatrace_ = CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace >(GetArenaForAllocation());
  }
  return _impl_.data_.perfetto_metatrace_;
}
inline ::perfetto::protos::PerfettoMetatrace* TracePacket::mutable_perfetto_metatrace() {
  ::perfetto::protos::PerfettoMetatrace* _msg = _internal_mutable_perfetto_metatrace();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.perfetto_metatrace)
  return _msg;
}

// .perfetto.protos.ChromeMetadataPacket chrome_metadata = 51;
inline bool TracePacket::has_chrome_metadata() const {
  return data_case() == kChromeMetadata;
}
inline bool TracePacket::_internal_has_chrome_metadata() const {
  return data_case() == kChromeMetadata;
}
inline void TracePacket::set_has_chrome_metadata() {
  _impl_._oneof_case_[0] = kChromeMetadata;
}
inline ::perfetto::protos::ChromeMetadataPacket* TracePacket::release_chrome_metadata() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.chrome_metadata)
  if (data_case() == kChromeMetadata) {
    clear_has_data();
    ::perfetto::protos::ChromeMetadataPacket* temp = _impl_.data_.chrome_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.chrome_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ChromeMetadataPacket& TracePacket::_internal_chrome_metadata() const {
  return data_case() == kChromeMetadata
      ? *_impl_.data_.chrome_metadata_
      : reinterpret_cast<::perfetto::protos::ChromeMetadataPacket&>(::perfetto::protos::_ChromeMetadataPacket_default_instance_);
}
inline const ::perfetto::protos::ChromeMetadataPacket& TracePacket::chrome_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.chrome_metadata)
  return _internal_chrome_metadata();
}
inline ::perfetto::protos::ChromeMetadataPacket* TracePacket::unsafe_arena_release_chrome_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.chrome_metadata)
  if (data_case() == kChromeMetadata) {
    clear_has_data();
    ::perfetto::protos::ChromeMetadataPacket* temp = _impl_.data_.chrome_metadata_;
    _impl_.data_.chrome_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_chrome_metadata(::perfetto::protos::ChromeMetadataPacket* chrome_metadata) {
  clear_data();
  if (chrome_metadata) {
    set_has_chrome_metadata();
    _impl_.data_.chrome_metadata_ = chrome_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.chrome_metadata)
}
inline ::perfetto::protos::ChromeMetadataPacket* TracePacket::_internal_mutable_chrome_metadata() {
  if (data_case() != kChromeMetadata) {
    clear_data();
    set_has_chrome_metadata();
    _impl_.data_.chrome_metadata_ = CreateMaybeMessage< ::perfetto::protos::ChromeMetadataPacket >(GetArenaForAllocation());
  }
  return _impl_.data_.chrome_metadata_;
}
inline ::perfetto::protos::ChromeMetadataPacket* TracePacket::mutable_chrome_metadata() {
  ::perfetto::protos::ChromeMetadataPacket* _msg = _internal_mutable_chrome_metadata();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.chrome_metadata)
  return _msg;
}

// .perfetto.protos.GpuCounterEvent gpu_counter_event = 52;
inline bool TracePacket::has_gpu_counter_event() const {
  return data_case() == kGpuCounterEvent;
}
inline bool TracePacket::_internal_has_gpu_counter_event() const {
  return data_case() == kGpuCounterEvent;
}
inline void TracePacket::set_has_gpu_counter_event() {
  _impl_._oneof_case_[0] = kGpuCounterEvent;
}
inline ::perfetto::protos::GpuCounterEvent* TracePacket::release_gpu_counter_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_counter_event)
  if (data_case() == kGpuCounterEvent) {
    clear_has_data();
    ::perfetto::protos::GpuCounterEvent* temp = _impl_.data_.gpu_counter_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.gpu_counter_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuCounterEvent& TracePacket::_internal_gpu_counter_event() const {
  return data_case() == kGpuCounterEvent
      ? *_impl_.data_.gpu_counter_event_
      : reinterpret_cast<::perfetto::protos::GpuCounterEvent&>(::perfetto::protos::_GpuCounterEvent_default_instance_);
}
inline const ::perfetto::protos::GpuCounterEvent& TracePacket::gpu_counter_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_counter_event)
  return _internal_gpu_counter_event();
}
inline ::perfetto::protos::GpuCounterEvent* TracePacket::unsafe_arena_release_gpu_counter_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.gpu_counter_event)
  if (data_case() == kGpuCounterEvent) {
    clear_has_data();
    ::perfetto::protos::GpuCounterEvent* temp = _impl_.data_.gpu_counter_event_;
    _impl_.data_.gpu_counter_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_gpu_counter_event(::perfetto::protos::GpuCounterEvent* gpu_counter_event) {
  clear_data();
  if (gpu_counter_event) {
    set_has_gpu_counter_event();
    _impl_.data_.gpu_counter_event_ = gpu_counter_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.gpu_counter_event)
}
inline ::perfetto::protos::GpuCounterEvent* TracePacket::_internal_mutable_gpu_counter_event() {
  if (data_case() != kGpuCounterEvent) {
    clear_data();
    set_has_gpu_counter_event();
    _impl_.data_.gpu_counter_event_ = CreateMaybeMessage< ::perfetto::protos::GpuCounterEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.gpu_counter_event_;
}
inline ::perfetto::protos::GpuCounterEvent* TracePacket::mutable_gpu_counter_event() {
  ::perfetto::protos::GpuCounterEvent* _msg = _internal_mutable_gpu_counter_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_counter_event)
  return _msg;
}

// .perfetto.protos.GpuRenderStageEvent gpu_render_stage_event = 53;
inline bool TracePacket::has_gpu_render_stage_event() const {
  return data_case() == kGpuRenderStageEvent;
}
inline bool TracePacket::_internal_has_gpu_render_stage_event() const {
  return data_case() == kGpuRenderStageEvent;
}
inline void TracePacket::set_has_gpu_render_stage_event() {
  _impl_._oneof_case_[0] = kGpuRenderStageEvent;
}
inline ::perfetto::protos::GpuRenderStageEvent* TracePacket::release_gpu_render_stage_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_render_stage_event)
  if (data_case() == kGpuRenderStageEvent) {
    clear_has_data();
    ::perfetto::protos::GpuRenderStageEvent* temp = _impl_.data_.gpu_render_stage_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.gpu_render_stage_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuRenderStageEvent& TracePacket::_internal_gpu_render_stage_event() const {
  return data_case() == kGpuRenderStageEvent
      ? *_impl_.data_.gpu_render_stage_event_
      : reinterpret_cast<::perfetto::protos::GpuRenderStageEvent&>(::perfetto::protos::_GpuRenderStageEvent_default_instance_);
}
inline const ::perfetto::protos::GpuRenderStageEvent& TracePacket::gpu_render_stage_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_render_stage_event)
  return _internal_gpu_render_stage_event();
}
inline ::perfetto::protos::GpuRenderStageEvent* TracePacket::unsafe_arena_release_gpu_render_stage_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.gpu_render_stage_event)
  if (data_case() == kGpuRenderStageEvent) {
    clear_has_data();
    ::perfetto::protos::GpuRenderStageEvent* temp = _impl_.data_.gpu_render_stage_event_;
    _impl_.data_.gpu_render_stage_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_gpu_render_stage_event(::perfetto::protos::GpuRenderStageEvent* gpu_render_stage_event) {
  clear_data();
  if (gpu_render_stage_event) {
    set_has_gpu_render_stage_event();
    _impl_.data_.gpu_render_stage_event_ = gpu_render_stage_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.gpu_render_stage_event)
}
inline ::perfetto::protos::GpuRenderStageEvent* TracePacket::_internal_mutable_gpu_render_stage_event() {
  if (data_case() != kGpuRenderStageEvent) {
    clear_data();
    set_has_gpu_render_stage_event();
    _impl_.data_.gpu_render_stage_event_ = CreateMaybeMessage< ::perfetto::protos::GpuRenderStageEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.gpu_render_stage_event_;
}
inline ::perfetto::protos::GpuRenderStageEvent* TracePacket::mutable_gpu_render_stage_event() {
  ::perfetto::protos::GpuRenderStageEvent* _msg = _internal_mutable_gpu_render_stage_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_render_stage_event)
  return _msg;
}

// .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
inline bool TracePacket::has_streaming_profile_packet() const {
  return data_case() == kStreamingProfilePacket;
}
inline bool TracePacket::_internal_has_streaming_profile_packet() const {
  return data_case() == kStreamingProfilePacket;
}
inline void TracePacket::set_has_streaming_profile_packet() {
  _impl_._oneof_case_[0] = kStreamingProfilePacket;
}
inline ::perfetto::protos::StreamingProfilePacket* TracePacket::release_streaming_profile_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.streaming_profile_packet)
  if (data_case() == kStreamingProfilePacket) {
    clear_has_data();
    ::perfetto::protos::StreamingProfilePacket* temp = _impl_.data_.streaming_profile_packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.streaming_profile_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StreamingProfilePacket& TracePacket::_internal_streaming_profile_packet() const {
  return data_case() == kStreamingProfilePacket
      ? *_impl_.data_.streaming_profile_packet_
      : reinterpret_cast<::perfetto::protos::StreamingProfilePacket&>(::perfetto::protos::_StreamingProfilePacket_default_instance_);
}
inline const ::perfetto::protos::StreamingProfilePacket& TracePacket::streaming_profile_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.streaming_profile_packet)
  return _internal_streaming_profile_packet();
}
inline ::perfetto::protos::StreamingProfilePacket* TracePacket::unsafe_arena_release_streaming_profile_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.streaming_profile_packet)
  if (data_case() == kStreamingProfilePacket) {
    clear_has_data();
    ::perfetto::protos::StreamingProfilePacket* temp = _impl_.data_.streaming_profile_packet_;
    _impl_.data_.streaming_profile_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet) {
  clear_data();
  if (streaming_profile_packet) {
    set_has_streaming_profile_packet();
    _impl_.data_.streaming_profile_packet_ = streaming_profile_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.streaming_profile_packet)
}
inline ::perfetto::protos::StreamingProfilePacket* TracePacket::_internal_mutable_streaming_profile_packet() {
  if (data_case() != kStreamingProfilePacket) {
    clear_data();
    set_has_streaming_profile_packet();
    _impl_.data_.streaming_profile_packet_ = CreateMaybeMessage< ::perfetto::protos::StreamingProfilePacket >(GetArenaForAllocation());
  }
  return _impl_.data_.streaming_profile_packet_;
}
inline ::perfetto::protos::StreamingProfilePacket* TracePacket::mutable_streaming_profile_packet() {
  ::perfetto::protos::StreamingProfilePacket* _msg = _internal_mutable_streaming_profile_packet();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.streaming_profile_packet)
  return _msg;
}

// .perfetto.protos.HeapGraph heap_graph = 56;
inline bool TracePacket::has_heap_graph() const {
  return data_case() == kHeapGraph;
}
inline bool TracePacket::_internal_has_heap_graph() const {
  return data_case() == kHeapGraph;
}
inline void TracePacket::set_has_heap_graph() {
  _impl_._oneof_case_[0] = kHeapGraph;
}
inline ::perfetto::protos::HeapGraph* TracePacket::release_heap_graph() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.heap_graph)
  if (data_case() == kHeapGraph) {
    clear_has_data();
    ::perfetto::protos::HeapGraph* temp = _impl_.data_.heap_graph_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.heap_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HeapGraph& TracePacket::_internal_heap_graph() const {
  return data_case() == kHeapGraph
      ? *_impl_.data_.heap_graph_
      : reinterpret_cast<::perfetto::protos::HeapGraph&>(::perfetto::protos::_HeapGraph_default_instance_);
}
inline const ::perfetto::protos::HeapGraph& TracePacket::heap_graph() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.heap_graph)
  return _internal_heap_graph();
}
inline ::perfetto::protos::HeapGraph* TracePacket::unsafe_arena_release_heap_graph() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.heap_graph)
  if (data_case() == kHeapGraph) {
    clear_has_data();
    ::perfetto::protos::HeapGraph* temp = _impl_.data_.heap_graph_;
    _impl_.data_.heap_graph_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_heap_graph(::perfetto::protos::HeapGraph* heap_graph) {
  clear_data();
  if (heap_graph) {
    set_has_heap_graph();
    _impl_.data_.heap_graph_ = heap_graph;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.heap_graph)
}
inline ::perfetto::protos::HeapGraph* TracePacket::_internal_mutable_heap_graph() {
  if (data_case() != kHeapGraph) {
    clear_data();
    set_has_heap_graph();
    _impl_.data_.heap_graph_ = CreateMaybeMessage< ::perfetto::protos::HeapGraph >(GetArenaForAllocation());
  }
  return _impl_.data_.heap_graph_;
}
inline ::perfetto::protos::HeapGraph* TracePacket::mutable_heap_graph() {
  ::perfetto::protos::HeapGraph* _msg = _internal_mutable_heap_graph();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.heap_graph)
  return _msg;
}

// .perfetto.protos.GraphicsFrameEvent graphics_frame_event = 57;
inline bool TracePacket::has_graphics_frame_event() const {
  return data_case() == kGraphicsFrameEvent;
}
inline bool TracePacket::_internal_has_graphics_frame_event() const {
  return data_case() == kGraphicsFrameEvent;
}
inline void TracePacket::set_has_graphics_frame_event() {
  _impl_._oneof_case_[0] = kGraphicsFrameEvent;
}
inline ::perfetto::protos::GraphicsFrameEvent* TracePacket::release_graphics_frame_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.graphics_frame_event)
  if (data_case() == kGraphicsFrameEvent) {
    clear_has_data();
    ::perfetto::protos::GraphicsFrameEvent* temp = _impl_.data_.graphics_frame_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.graphics_frame_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GraphicsFrameEvent& TracePacket::_internal_graphics_frame_event() const {
  return data_case() == kGraphicsFrameEvent
      ? *_impl_.data_.graphics_frame_event_
      : reinterpret_cast<::perfetto::protos::GraphicsFrameEvent&>(::perfetto::protos::_GraphicsFrameEvent_default_instance_);
}
inline const ::perfetto::protos::GraphicsFrameEvent& TracePacket::graphics_frame_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.graphics_frame_event)
  return _internal_graphics_frame_event();
}
inline ::perfetto::protos::GraphicsFrameEvent* TracePacket::unsafe_arena_release_graphics_frame_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.graphics_frame_event)
  if (data_case() == kGraphicsFrameEvent) {
    clear_has_data();
    ::perfetto::protos::GraphicsFrameEvent* temp = _impl_.data_.graphics_frame_event_;
    _impl_.data_.graphics_frame_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_graphics_frame_event(::perfetto::protos::GraphicsFrameEvent* graphics_frame_event) {
  clear_data();
  if (graphics_frame_event) {
    set_has_graphics_frame_event();
    _impl_.data_.graphics_frame_event_ = graphics_frame_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.graphics_frame_event)
}
inline ::perfetto::protos::GraphicsFrameEvent* TracePacket::_internal_mutable_graphics_frame_event() {
  if (data_case() != kGraphicsFrameEvent) {
    clear_data();
    set_has_graphics_frame_event();
    _impl_.data_.graphics_frame_event_ = CreateMaybeMessage< ::perfetto::protos::GraphicsFrameEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.graphics_frame_event_;
}
inline ::perfetto::protos::GraphicsFrameEvent* TracePacket::mutable_graphics_frame_event() {
  ::perfetto::protos::GraphicsFrameEvent* _msg = _internal_mutable_graphics_frame_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.graphics_frame_event)
  return _msg;
}

// .perfetto.protos.VulkanMemoryEvent vulkan_memory_event = 62;
inline bool TracePacket::has_vulkan_memory_event() const {
  return data_case() == kVulkanMemoryEvent;
}
inline bool TracePacket::_internal_has_vulkan_memory_event() const {
  return data_case() == kVulkanMemoryEvent;
}
inline void TracePacket::set_has_vulkan_memory_event() {
  _impl_._oneof_case_[0] = kVulkanMemoryEvent;
}
inline ::perfetto::protos::VulkanMemoryEvent* TracePacket::release_vulkan_memory_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.vulkan_memory_event)
  if (data_case() == kVulkanMemoryEvent) {
    clear_has_data();
    ::perfetto::protos::VulkanMemoryEvent* temp = _impl_.data_.vulkan_memory_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.vulkan_memory_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VulkanMemoryEvent& TracePacket::_internal_vulkan_memory_event() const {
  return data_case() == kVulkanMemoryEvent
      ? *_impl_.data_.vulkan_memory_event_
      : reinterpret_cast<::perfetto::protos::VulkanMemoryEvent&>(::perfetto::protos::_VulkanMemoryEvent_default_instance_);
}
inline const ::perfetto::protos::VulkanMemoryEvent& TracePacket::vulkan_memory_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.vulkan_memory_event)
  return _internal_vulkan_memory_event();
}
inline ::perfetto::protos::VulkanMemoryEvent* TracePacket::unsafe_arena_release_vulkan_memory_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.vulkan_memory_event)
  if (data_case() == kVulkanMemoryEvent) {
    clear_has_data();
    ::perfetto::protos::VulkanMemoryEvent* temp = _impl_.data_.vulkan_memory_event_;
    _impl_.data_.vulkan_memory_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_vulkan_memory_event(::perfetto::protos::VulkanMemoryEvent* vulkan_memory_event) {
  clear_data();
  if (vulkan_memory_event) {
    set_has_vulkan_memory_event();
    _impl_.data_.vulkan_memory_event_ = vulkan_memory_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.vulkan_memory_event)
}
inline ::perfetto::protos::VulkanMemoryEvent* TracePacket::_internal_mutable_vulkan_memory_event() {
  if (data_case() != kVulkanMemoryEvent) {
    clear_data();
    set_has_vulkan_memory_event();
    _impl_.data_.vulkan_memory_event_ = CreateMaybeMessage< ::perfetto::protos::VulkanMemoryEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.vulkan_memory_event_;
}
inline ::perfetto::protos::VulkanMemoryEvent* TracePacket::mutable_vulkan_memory_event() {
  ::perfetto::protos::VulkanMemoryEvent* _msg = _internal_mutable_vulkan_memory_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.vulkan_memory_event)
  return _msg;
}

// .perfetto.protos.GpuLog gpu_log = 63;
inline bool TracePacket::has_gpu_log() const {
  return data_case() == kGpuLog;
}
inline bool TracePacket::_internal_has_gpu_log() const {
  return data_case() == kGpuLog;
}
inline void TracePacket::set_has_gpu_log() {
  _impl_._oneof_case_[0] = kGpuLog;
}
inline ::perfetto::protos::GpuLog* TracePacket::release_gpu_log() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_log)
  if (data_case() == kGpuLog) {
    clear_has_data();
    ::perfetto::protos::GpuLog* temp = _impl_.data_.gpu_log_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.gpu_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuLog& TracePacket::_internal_gpu_log() const {
  return data_case() == kGpuLog
      ? *_impl_.data_.gpu_log_
      : reinterpret_cast<::perfetto::protos::GpuLog&>(::perfetto::protos::_GpuLog_default_instance_);
}
inline const ::perfetto::protos::GpuLog& TracePacket::gpu_log() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_log)
  return _internal_gpu_log();
}
inline ::perfetto::protos::GpuLog* TracePacket::unsafe_arena_release_gpu_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.gpu_log)
  if (data_case() == kGpuLog) {
    clear_has_data();
    ::perfetto::protos::GpuLog* temp = _impl_.data_.gpu_log_;
    _impl_.data_.gpu_log_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_gpu_log(::perfetto::protos::GpuLog* gpu_log) {
  clear_data();
  if (gpu_log) {
    set_has_gpu_log();
    _impl_.data_.gpu_log_ = gpu_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.gpu_log)
}
inline ::perfetto::protos::GpuLog* TracePacket::_internal_mutable_gpu_log() {
  if (data_case() != kGpuLog) {
    clear_data();
    set_has_gpu_log();
    _impl_.data_.gpu_log_ = CreateMaybeMessage< ::perfetto::protos::GpuLog >(GetArenaForAllocation());
  }
  return _impl_.data_.gpu_log_;
}
inline ::perfetto::protos::GpuLog* TracePacket::mutable_gpu_log() {
  ::perfetto::protos::GpuLog* _msg = _internal_mutable_gpu_log();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_log)
  return _msg;
}

// .perfetto.protos.VulkanApiEvent vulkan_api_event = 65;
inline bool TracePacket::has_vulkan_api_event() const {
  return data_case() == kVulkanApiEvent;
}
inline bool TracePacket::_internal_has_vulkan_api_event() const {
  return data_case() == kVulkanApiEvent;
}
inline void TracePacket::set_has_vulkan_api_event() {
  _impl_._oneof_case_[0] = kVulkanApiEvent;
}
inline ::perfetto::protos::VulkanApiEvent* TracePacket::release_vulkan_api_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.vulkan_api_event)
  if (data_case() == kVulkanApiEvent) {
    clear_has_data();
    ::perfetto::protos::VulkanApiEvent* temp = _impl_.data_.vulkan_api_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.vulkan_api_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VulkanApiEvent& TracePacket::_internal_vulkan_api_event() const {
  return data_case() == kVulkanApiEvent
      ? *_impl_.data_.vulkan_api_event_
      : reinterpret_cast<::perfetto::protos::VulkanApiEvent&>(::perfetto::protos::_VulkanApiEvent_default_instance_);
}
inline const ::perfetto::protos::VulkanApiEvent& TracePacket::vulkan_api_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.vulkan_api_event)
  return _internal_vulkan_api_event();
}
inline ::perfetto::protos::VulkanApiEvent* TracePacket::unsafe_arena_release_vulkan_api_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.vulkan_api_event)
  if (data_case() == kVulkanApiEvent) {
    clear_has_data();
    ::perfetto::protos::VulkanApiEvent* temp = _impl_.data_.vulkan_api_event_;
    _impl_.data_.vulkan_api_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_vulkan_api_event(::perfetto::protos::VulkanApiEvent* vulkan_api_event) {
  clear_data();
  if (vulkan_api_event) {
    set_has_vulkan_api_event();
    _impl_.data_.vulkan_api_event_ = vulkan_api_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.vulkan_api_event)
}
inline ::perfetto::protos::VulkanApiEvent* TracePacket::_internal_mutable_vulkan_api_event() {
  if (data_case() != kVulkanApiEvent) {
    clear_data();
    set_has_vulkan_api_event();
    _impl_.data_.vulkan_api_event_ = CreateMaybeMessage< ::perfetto::protos::VulkanApiEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.vulkan_api_event_;
}
inline ::perfetto::protos::VulkanApiEvent* TracePacket::mutable_vulkan_api_event() {
  ::perfetto::protos::VulkanApiEvent* _msg = _internal_mutable_vulkan_api_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.vulkan_api_event)
  return _msg;
}

// .perfetto.protos.PerfSample perf_sample = 66;
inline bool TracePacket::has_perf_sample() const {
  return data_case() == kPerfSample;
}
inline bool TracePacket::_internal_has_perf_sample() const {
  return data_case() == kPerfSample;
}
inline void TracePacket::set_has_perf_sample() {
  _impl_._oneof_case_[0] = kPerfSample;
}
inline ::perfetto::protos::PerfSample* TracePacket::release_perf_sample() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.perf_sample)
  if (data_case() == kPerfSample) {
    clear_has_data();
    ::perfetto::protos::PerfSample* temp = _impl_.data_.perf_sample_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.perf_sample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PerfSample& TracePacket::_internal_perf_sample() const {
  return data_case() == kPerfSample
      ? *_impl_.data_.perf_sample_
      : reinterpret_cast<::perfetto::protos::PerfSample&>(::perfetto::protos::_PerfSample_default_instance_);
}
inline const ::perfetto::protos::PerfSample& TracePacket::perf_sample() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.perf_sample)
  return _internal_perf_sample();
}
inline ::perfetto::protos::PerfSample* TracePacket::unsafe_arena_release_perf_sample() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.perf_sample)
  if (data_case() == kPerfSample) {
    clear_has_data();
    ::perfetto::protos::PerfSample* temp = _impl_.data_.perf_sample_;
    _impl_.data_.perf_sample_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_perf_sample(::perfetto::protos::PerfSample* perf_sample) {
  clear_data();
  if (perf_sample) {
    set_has_perf_sample();
    _impl_.data_.perf_sample_ = perf_sample;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.perf_sample)
}
inline ::perfetto::protos::PerfSample* TracePacket::_internal_mutable_perf_sample() {
  if (data_case() != kPerfSample) {
    clear_data();
    set_has_perf_sample();
    _impl_.data_.perf_sample_ = CreateMaybeMessage< ::perfetto::protos::PerfSample >(GetArenaForAllocation());
  }
  return _impl_.data_.perf_sample_;
}
inline ::perfetto::protos::PerfSample* TracePacket::mutable_perf_sample() {
  ::perfetto::protos::PerfSample* _msg = _internal_mutable_perf_sample();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.perf_sample)
  return _msg;
}

// .perfetto.protos.CpuInfo cpu_info = 67;
inline bool TracePacket::has_cpu_info() const {
  return data_case() == kCpuInfo;
}
inline bool TracePacket::_internal_has_cpu_info() const {
  return data_case() == kCpuInfo;
}
inline void TracePacket::set_has_cpu_info() {
  _impl_._oneof_case_[0] = kCpuInfo;
}
inline ::perfetto::protos::CpuInfo* TracePacket::release_cpu_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.cpu_info)
  if (data_case() == kCpuInfo) {
    clear_has_data();
    ::perfetto::protos::CpuInfo* temp = _impl_.data_.cpu_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.cpu_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuInfo& TracePacket::_internal_cpu_info() const {
  return data_case() == kCpuInfo
      ? *_impl_.data_.cpu_info_
      : reinterpret_cast<::perfetto::protos::CpuInfo&>(::perfetto::protos::_CpuInfo_default_instance_);
}
inline const ::perfetto::protos::CpuInfo& TracePacket::cpu_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.cpu_info)
  return _internal_cpu_info();
}
inline ::perfetto::protos::CpuInfo* TracePacket::unsafe_arena_release_cpu_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.cpu_info)
  if (data_case() == kCpuInfo) {
    clear_has_data();
    ::perfetto::protos::CpuInfo* temp = _impl_.data_.cpu_info_;
    _impl_.data_.cpu_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_cpu_info(::perfetto::protos::CpuInfo* cpu_info) {
  clear_data();
  if (cpu_info) {
    set_has_cpu_info();
    _impl_.data_.cpu_info_ = cpu_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.cpu_info)
}
inline ::perfetto::protos::CpuInfo* TracePacket::_internal_mutable_cpu_info() {
  if (data_case() != kCpuInfo) {
    clear_data();
    set_has_cpu_info();
    _impl_.data_.cpu_info_ = CreateMaybeMessage< ::perfetto::protos::CpuInfo >(GetArenaForAllocation());
  }
  return _impl_.data_.cpu_info_;
}
inline ::perfetto::protos::CpuInfo* TracePacket::mutable_cpu_info() {
  ::perfetto::protos::CpuInfo* _msg = _internal_mutable_cpu_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.cpu_info)
  return _msg;
}

// .perfetto.protos.SmapsPacket smaps_packet = 68;
inline bool TracePacket::has_smaps_packet() const {
  return data_case() == kSmapsPacket;
}
inline bool TracePacket::_internal_has_smaps_packet() const {
  return data_case() == kSmapsPacket;
}
inline void TracePacket::set_has_smaps_packet() {
  _impl_._oneof_case_[0] = kSmapsPacket;
}
inline ::perfetto::protos::SmapsPacket* TracePacket::release_smaps_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.smaps_packet)
  if (data_case() == kSmapsPacket) {
    clear_has_data();
    ::perfetto::protos::SmapsPacket* temp = _impl_.data_.smaps_packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.smaps_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmapsPacket& TracePacket::_internal_smaps_packet() const {
  return data_case() == kSmapsPacket
      ? *_impl_.data_.smaps_packet_
      : reinterpret_cast<::perfetto::protos::SmapsPacket&>(::perfetto::protos::_SmapsPacket_default_instance_);
}
inline const ::perfetto::protos::SmapsPacket& TracePacket::smaps_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.smaps_packet)
  return _internal_smaps_packet();
}
inline ::perfetto::protos::SmapsPacket* TracePacket::unsafe_arena_release_smaps_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.smaps_packet)
  if (data_case() == kSmapsPacket) {
    clear_has_data();
    ::perfetto::protos::SmapsPacket* temp = _impl_.data_.smaps_packet_;
    _impl_.data_.smaps_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_smaps_packet(::perfetto::protos::SmapsPacket* smaps_packet) {
  clear_data();
  if (smaps_packet) {
    set_has_smaps_packet();
    _impl_.data_.smaps_packet_ = smaps_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.smaps_packet)
}
inline ::perfetto::protos::SmapsPacket* TracePacket::_internal_mutable_smaps_packet() {
  if (data_case() != kSmapsPacket) {
    clear_data();
    set_has_smaps_packet();
    _impl_.data_.smaps_packet_ = CreateMaybeMessage< ::perfetto::protos::SmapsPacket >(GetArenaForAllocation());
  }
  return _impl_.data_.smaps_packet_;
}
inline ::perfetto::protos::SmapsPacket* TracePacket::mutable_smaps_packet() {
  ::perfetto::protos::SmapsPacket* _msg = _internal_mutable_smaps_packet();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.smaps_packet)
  return _msg;
}

// .perfetto.protos.TracingServiceEvent service_event = 69;
inline bool TracePacket::has_service_event() const {
  return data_case() == kServiceEvent;
}
inline bool TracePacket::_internal_has_service_event() const {
  return data_case() == kServiceEvent;
}
inline void TracePacket::set_has_service_event() {
  _impl_._oneof_case_[0] = kServiceEvent;
}
inline ::perfetto::protos::TracingServiceEvent* TracePacket::release_service_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.service_event)
  if (data_case() == kServiceEvent) {
    clear_has_data();
    ::perfetto::protos::TracingServiceEvent* temp = _impl_.data_.service_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.service_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TracingServiceEvent& TracePacket::_internal_service_event() const {
  return data_case() == kServiceEvent
      ? *_impl_.data_.service_event_
      : reinterpret_cast<::perfetto::protos::TracingServiceEvent&>(::perfetto::protos::_TracingServiceEvent_default_instance_);
}
inline const ::perfetto::protos::TracingServiceEvent& TracePacket::service_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.service_event)
  return _internal_service_event();
}
inline ::perfetto::protos::TracingServiceEvent* TracePacket::unsafe_arena_release_service_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.service_event)
  if (data_case() == kServiceEvent) {
    clear_has_data();
    ::perfetto::protos::TracingServiceEvent* temp = _impl_.data_.service_event_;
    _impl_.data_.service_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_service_event(::perfetto::protos::TracingServiceEvent* service_event) {
  clear_data();
  if (service_event) {
    set_has_service_event();
    _impl_.data_.service_event_ = service_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.service_event)
}
inline ::perfetto::protos::TracingServiceEvent* TracePacket::_internal_mutable_service_event() {
  if (data_case() != kServiceEvent) {
    clear_data();
    set_has_service_event();
    _impl_.data_.service_event_ = CreateMaybeMessage< ::perfetto::protos::TracingServiceEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.service_event_;
}
inline ::perfetto::protos::TracingServiceEvent* TracePacket::mutable_service_event() {
  ::perfetto::protos::TracingServiceEvent* _msg = _internal_mutable_service_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.service_event)
  return _msg;
}

// .perfetto.protos.InitialDisplayState initial_display_state = 70;
inline bool TracePacket::has_initial_display_state() const {
  return data_case() == kInitialDisplayState;
}
inline bool TracePacket::_internal_has_initial_display_state() const {
  return data_case() == kInitialDisplayState;
}
inline void TracePacket::set_has_initial_display_state() {
  _impl_._oneof_case_[0] = kInitialDisplayState;
}
inline ::perfetto::protos::InitialDisplayState* TracePacket::release_initial_display_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.initial_display_state)
  if (data_case() == kInitialDisplayState) {
    clear_has_data();
    ::perfetto::protos::InitialDisplayState* temp = _impl_.data_.initial_display_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.initial_display_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::InitialDisplayState& TracePacket::_internal_initial_display_state() const {
  return data_case() == kInitialDisplayState
      ? *_impl_.data_.initial_display_state_
      : reinterpret_cast<::perfetto::protos::InitialDisplayState&>(::perfetto::protos::_InitialDisplayState_default_instance_);
}
inline const ::perfetto::protos::InitialDisplayState& TracePacket::initial_display_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.initial_display_state)
  return _internal_initial_display_state();
}
inline ::perfetto::protos::InitialDisplayState* TracePacket::unsafe_arena_release_initial_display_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.initial_display_state)
  if (data_case() == kInitialDisplayState) {
    clear_has_data();
    ::perfetto::protos::InitialDisplayState* temp = _impl_.data_.initial_display_state_;
    _impl_.data_.initial_display_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_initial_display_state(::perfetto::protos::InitialDisplayState* initial_display_state) {
  clear_data();
  if (initial_display_state) {
    set_has_initial_display_state();
    _impl_.data_.initial_display_state_ = initial_display_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.initial_display_state)
}
inline ::perfetto::protos::InitialDisplayState* TracePacket::_internal_mutable_initial_display_state() {
  if (data_case() != kInitialDisplayState) {
    clear_data();
    set_has_initial_display_state();
    _impl_.data_.initial_display_state_ = CreateMaybeMessage< ::perfetto::protos::InitialDisplayState >(GetArenaForAllocation());
  }
  return _impl_.data_.initial_display_state_;
}
inline ::perfetto::protos::InitialDisplayState* TracePacket::mutable_initial_display_state() {
  ::perfetto::protos::InitialDisplayState* _msg = _internal_mutable_initial_display_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.initial_display_state)
  return _msg;
}

// .perfetto.protos.GpuMemTotalEvent gpu_mem_total_event = 71;
inline bool TracePacket::has_gpu_mem_total_event() const {
  return data_case() == kGpuMemTotalEvent;
}
inline bool TracePacket::_internal_has_gpu_mem_total_event() const {
  return data_case() == kGpuMemTotalEvent;
}
inline void TracePacket::set_has_gpu_mem_total_event() {
  _impl_._oneof_case_[0] = kGpuMemTotalEvent;
}
inline ::perfetto::protos::GpuMemTotalEvent* TracePacket::release_gpu_mem_total_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.gpu_mem_total_event)
  if (data_case() == kGpuMemTotalEvent) {
    clear_has_data();
    ::perfetto::protos::GpuMemTotalEvent* temp = _impl_.data_.gpu_mem_total_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.gpu_mem_total_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuMemTotalEvent& TracePacket::_internal_gpu_mem_total_event() const {
  return data_case() == kGpuMemTotalEvent
      ? *_impl_.data_.gpu_mem_total_event_
      : reinterpret_cast<::perfetto::protos::GpuMemTotalEvent&>(::perfetto::protos::_GpuMemTotalEvent_default_instance_);
}
inline const ::perfetto::protos::GpuMemTotalEvent& TracePacket::gpu_mem_total_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.gpu_mem_total_event)
  return _internal_gpu_mem_total_event();
}
inline ::perfetto::protos::GpuMemTotalEvent* TracePacket::unsafe_arena_release_gpu_mem_total_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.gpu_mem_total_event)
  if (data_case() == kGpuMemTotalEvent) {
    clear_has_data();
    ::perfetto::protos::GpuMemTotalEvent* temp = _impl_.data_.gpu_mem_total_event_;
    _impl_.data_.gpu_mem_total_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_gpu_mem_total_event(::perfetto::protos::GpuMemTotalEvent* gpu_mem_total_event) {
  clear_data();
  if (gpu_mem_total_event) {
    set_has_gpu_mem_total_event();
    _impl_.data_.gpu_mem_total_event_ = gpu_mem_total_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.gpu_mem_total_event)
}
inline ::perfetto::protos::GpuMemTotalEvent* TracePacket::_internal_mutable_gpu_mem_total_event() {
  if (data_case() != kGpuMemTotalEvent) {
    clear_data();
    set_has_gpu_mem_total_event();
    _impl_.data_.gpu_mem_total_event_ = CreateMaybeMessage< ::perfetto::protos::GpuMemTotalEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.gpu_mem_total_event_;
}
inline ::perfetto::protos::GpuMemTotalEvent* TracePacket::mutable_gpu_mem_total_event() {
  ::perfetto::protos::GpuMemTotalEvent* _msg = _internal_mutable_gpu_mem_total_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.gpu_mem_total_event)
  return _msg;
}

// .perfetto.protos.MemoryTrackerSnapshot memory_tracker_snapshot = 73;
inline bool TracePacket::has_memory_tracker_snapshot() const {
  return data_case() == kMemoryTrackerSnapshot;
}
inline bool TracePacket::_internal_has_memory_tracker_snapshot() const {
  return data_case() == kMemoryTrackerSnapshot;
}
inline void TracePacket::set_has_memory_tracker_snapshot() {
  _impl_._oneof_case_[0] = kMemoryTrackerSnapshot;
}
inline ::perfetto::protos::MemoryTrackerSnapshot* TracePacket::release_memory_tracker_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.memory_tracker_snapshot)
  if (data_case() == kMemoryTrackerSnapshot) {
    clear_has_data();
    ::perfetto::protos::MemoryTrackerSnapshot* temp = _impl_.data_.memory_tracker_snapshot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.memory_tracker_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MemoryTrackerSnapshot& TracePacket::_internal_memory_tracker_snapshot() const {
  return data_case() == kMemoryTrackerSnapshot
      ? *_impl_.data_.memory_tracker_snapshot_
      : reinterpret_cast<::perfetto::protos::MemoryTrackerSnapshot&>(::perfetto::protos::_MemoryTrackerSnapshot_default_instance_);
}
inline const ::perfetto::protos::MemoryTrackerSnapshot& TracePacket::memory_tracker_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.memory_tracker_snapshot)
  return _internal_memory_tracker_snapshot();
}
inline ::perfetto::protos::MemoryTrackerSnapshot* TracePacket::unsafe_arena_release_memory_tracker_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.memory_tracker_snapshot)
  if (data_case() == kMemoryTrackerSnapshot) {
    clear_has_data();
    ::perfetto::protos::MemoryTrackerSnapshot* temp = _impl_.data_.memory_tracker_snapshot_;
    _impl_.data_.memory_tracker_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_memory_tracker_snapshot(::perfetto::protos::MemoryTrackerSnapshot* memory_tracker_snapshot) {
  clear_data();
  if (memory_tracker_snapshot) {
    set_has_memory_tracker_snapshot();
    _impl_.data_.memory_tracker_snapshot_ = memory_tracker_snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.memory_tracker_snapshot)
}
inline ::perfetto::protos::MemoryTrackerSnapshot* TracePacket::_internal_mutable_memory_tracker_snapshot() {
  if (data_case() != kMemoryTrackerSnapshot) {
    clear_data();
    set_has_memory_tracker_snapshot();
    _impl_.data_.memory_tracker_snapshot_ = CreateMaybeMessage< ::perfetto::protos::MemoryTrackerSnapshot >(GetArenaForAllocation());
  }
  return _impl_.data_.memory_tracker_snapshot_;
}
inline ::perfetto::protos::MemoryTrackerSnapshot* TracePacket::mutable_memory_tracker_snapshot() {
  ::perfetto::protos::MemoryTrackerSnapshot* _msg = _internal_mutable_memory_tracker_snapshot();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.memory_tracker_snapshot)
  return _msg;
}

// .perfetto.protos.FrameTimelineEvent frame_timeline_event = 76;
inline bool TracePacket::has_frame_timeline_event() const {
  return data_case() == kFrameTimelineEvent;
}
inline bool TracePacket::_internal_has_frame_timeline_event() const {
  return data_case() == kFrameTimelineEvent;
}
inline void TracePacket::set_has_frame_timeline_event() {
  _impl_._oneof_case_[0] = kFrameTimelineEvent;
}
inline ::perfetto::protos::FrameTimelineEvent* TracePacket::release_frame_timeline_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.frame_timeline_event)
  if (data_case() == kFrameTimelineEvent) {
    clear_has_data();
    ::perfetto::protos::FrameTimelineEvent* temp = _impl_.data_.frame_timeline_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.frame_timeline_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FrameTimelineEvent& TracePacket::_internal_frame_timeline_event() const {
  return data_case() == kFrameTimelineEvent
      ? *_impl_.data_.frame_timeline_event_
      : reinterpret_cast<::perfetto::protos::FrameTimelineEvent&>(::perfetto::protos::_FrameTimelineEvent_default_instance_);
}
inline const ::perfetto::protos::FrameTimelineEvent& TracePacket::frame_timeline_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.frame_timeline_event)
  return _internal_frame_timeline_event();
}
inline ::perfetto::protos::FrameTimelineEvent* TracePacket::unsafe_arena_release_frame_timeline_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.frame_timeline_event)
  if (data_case() == kFrameTimelineEvent) {
    clear_has_data();
    ::perfetto::protos::FrameTimelineEvent* temp = _impl_.data_.frame_timeline_event_;
    _impl_.data_.frame_timeline_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_frame_timeline_event(::perfetto::protos::FrameTimelineEvent* frame_timeline_event) {
  clear_data();
  if (frame_timeline_event) {
    set_has_frame_timeline_event();
    _impl_.data_.frame_timeline_event_ = frame_timeline_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.frame_timeline_event)
}
inline ::perfetto::protos::FrameTimelineEvent* TracePacket::_internal_mutable_frame_timeline_event() {
  if (data_case() != kFrameTimelineEvent) {
    clear_data();
    set_has_frame_timeline_event();
    _impl_.data_.frame_timeline_event_ = CreateMaybeMessage< ::perfetto::protos::FrameTimelineEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.frame_timeline_event_;
}
inline ::perfetto::protos::FrameTimelineEvent* TracePacket::mutable_frame_timeline_event() {
  ::perfetto::protos::FrameTimelineEvent* _msg = _internal_mutable_frame_timeline_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.frame_timeline_event)
  return _msg;
}

// .perfetto.protos.AndroidEnergyEstimationBreakdown android_energy_estimation_breakdown = 77;
inline bool TracePacket::has_android_energy_estimation_breakdown() const {
  return data_case() == kAndroidEnergyEstimationBreakdown;
}
inline bool TracePacket::_internal_has_android_energy_estimation_breakdown() const {
  return data_case() == kAndroidEnergyEstimationBreakdown;
}
inline void TracePacket::set_has_android_energy_estimation_breakdown() {
  _impl_._oneof_case_[0] = kAndroidEnergyEstimationBreakdown;
}
inline ::perfetto::protos::AndroidEnergyEstimationBreakdown* TracePacket::release_android_energy_estimation_breakdown() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_energy_estimation_breakdown)
  if (data_case() == kAndroidEnergyEstimationBreakdown) {
    clear_has_data();
    ::perfetto::protos::AndroidEnergyEstimationBreakdown* temp = _impl_.data_.android_energy_estimation_breakdown_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.android_energy_estimation_breakdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidEnergyEstimationBreakdown& TracePacket::_internal_android_energy_estimation_breakdown() const {
  return data_case() == kAndroidEnergyEstimationBreakdown
      ? *_impl_.data_.android_energy_estimation_breakdown_
      : reinterpret_cast<::perfetto::protos::AndroidEnergyEstimationBreakdown&>(::perfetto::protos::_AndroidEnergyEstimationBreakdown_default_instance_);
}
inline const ::perfetto::protos::AndroidEnergyEstimationBreakdown& TracePacket::android_energy_estimation_breakdown() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_energy_estimation_breakdown)
  return _internal_android_energy_estimation_breakdown();
}
inline ::perfetto::protos::AndroidEnergyEstimationBreakdown* TracePacket::unsafe_arena_release_android_energy_estimation_breakdown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.android_energy_estimation_breakdown)
  if (data_case() == kAndroidEnergyEstimationBreakdown) {
    clear_has_data();
    ::perfetto::protos::AndroidEnergyEstimationBreakdown* temp = _impl_.data_.android_energy_estimation_breakdown_;
    _impl_.data_.android_energy_estimation_breakdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_android_energy_estimation_breakdown(::perfetto::protos::AndroidEnergyEstimationBreakdown* android_energy_estimation_breakdown) {
  clear_data();
  if (android_energy_estimation_breakdown) {
    set_has_android_energy_estimation_breakdown();
    _impl_.data_.android_energy_estimation_breakdown_ = android_energy_estimation_breakdown;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.android_energy_estimation_breakdown)
}
inline ::perfetto::protos::AndroidEnergyEstimationBreakdown* TracePacket::_internal_mutable_android_energy_estimation_breakdown() {
  if (data_case() != kAndroidEnergyEstimationBreakdown) {
    clear_data();
    set_has_android_energy_estimation_breakdown();
    _impl_.data_.android_energy_estimation_breakdown_ = CreateMaybeMessage< ::perfetto::protos::AndroidEnergyEstimationBreakdown >(GetArenaForAllocation());
  }
  return _impl_.data_.android_energy_estimation_breakdown_;
}
inline ::perfetto::protos::AndroidEnergyEstimationBreakdown* TracePacket::mutable_android_energy_estimation_breakdown() {
  ::perfetto::protos::AndroidEnergyEstimationBreakdown* _msg = _internal_mutable_android_energy_estimation_breakdown();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_energy_estimation_breakdown)
  return _msg;
}

// .perfetto.protos.UiState ui_state = 78;
inline bool TracePacket::has_ui_state() const {
  return data_case() == kUiState;
}
inline bool TracePacket::_internal_has_ui_state() const {
  return data_case() == kUiState;
}
inline void TracePacket::set_has_ui_state() {
  _impl_._oneof_case_[0] = kUiState;
}
inline ::perfetto::protos::UiState* TracePacket::release_ui_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.ui_state)
  if (data_case() == kUiState) {
    clear_has_data();
    ::perfetto::protos::UiState* temp = _impl_.data_.ui_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.ui_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::UiState& TracePacket::_internal_ui_state() const {
  return data_case() == kUiState
      ? *_impl_.data_.ui_state_
      : reinterpret_cast<::perfetto::protos::UiState&>(::perfetto::protos::_UiState_default_instance_);
}
inline const ::perfetto::protos::UiState& TracePacket::ui_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.ui_state)
  return _internal_ui_state();
}
inline ::perfetto::protos::UiState* TracePacket::unsafe_arena_release_ui_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.ui_state)
  if (data_case() == kUiState) {
    clear_has_data();
    ::perfetto::protos::UiState* temp = _impl_.data_.ui_state_;
    _impl_.data_.ui_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_ui_state(::perfetto::protos::UiState* ui_state) {
  clear_data();
  if (ui_state) {
    set_has_ui_state();
    _impl_.data_.ui_state_ = ui_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.ui_state)
}
inline ::perfetto::protos::UiState* TracePacket::_internal_mutable_ui_state() {
  if (data_case() != kUiState) {
    clear_data();
    set_has_ui_state();
    _impl_.data_.ui_state_ = CreateMaybeMessage< ::perfetto::protos::UiState >(GetArenaForAllocation());
  }
  return _impl_.data_.ui_state_;
}
inline ::perfetto::protos::UiState* TracePacket::mutable_ui_state() {
  ::perfetto::protos::UiState* _msg = _internal_mutable_ui_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.ui_state)
  return _msg;
}

// .perfetto.protos.AndroidCameraFrameEvent android_camera_frame_event = 80;
inline bool TracePacket::has_android_camera_frame_event() const {
  return data_case() == kAndroidCameraFrameEvent;
}
inline bool TracePacket::_internal_has_android_camera_frame_event() const {
  return data_case() == kAndroidCameraFrameEvent;
}
inline void TracePacket::set_has_android_camera_frame_event() {
  _impl_._oneof_case_[0] = kAndroidCameraFrameEvent;
}
inline ::perfetto::protos::AndroidCameraFrameEvent* TracePacket::release_android_camera_frame_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_camera_frame_event)
  if (data_case() == kAndroidCameraFrameEvent) {
    clear_has_data();
    ::perfetto::protos::AndroidCameraFrameEvent* temp = _impl_.data_.android_camera_frame_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.android_camera_frame_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidCameraFrameEvent& TracePacket::_internal_android_camera_frame_event() const {
  return data_case() == kAndroidCameraFrameEvent
      ? *_impl_.data_.android_camera_frame_event_
      : reinterpret_cast<::perfetto::protos::AndroidCameraFrameEvent&>(::perfetto::protos::_AndroidCameraFrameEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidCameraFrameEvent& TracePacket::android_camera_frame_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_camera_frame_event)
  return _internal_android_camera_frame_event();
}
inline ::perfetto::protos::AndroidCameraFrameEvent* TracePacket::unsafe_arena_release_android_camera_frame_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.android_camera_frame_event)
  if (data_case() == kAndroidCameraFrameEvent) {
    clear_has_data();
    ::perfetto::protos::AndroidCameraFrameEvent* temp = _impl_.data_.android_camera_frame_event_;
    _impl_.data_.android_camera_frame_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_android_camera_frame_event(::perfetto::protos::AndroidCameraFrameEvent* android_camera_frame_event) {
  clear_data();
  if (android_camera_frame_event) {
    set_has_android_camera_frame_event();
    _impl_.data_.android_camera_frame_event_ = android_camera_frame_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.android_camera_frame_event)
}
inline ::perfetto::protos::AndroidCameraFrameEvent* TracePacket::_internal_mutable_android_camera_frame_event() {
  if (data_case() != kAndroidCameraFrameEvent) {
    clear_data();
    set_has_android_camera_frame_event();
    _impl_.data_.android_camera_frame_event_ = CreateMaybeMessage< ::perfetto::protos::AndroidCameraFrameEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.android_camera_frame_event_;
}
inline ::perfetto::protos::AndroidCameraFrameEvent* TracePacket::mutable_android_camera_frame_event() {
  ::perfetto::protos::AndroidCameraFrameEvent* _msg = _internal_mutable_android_camera_frame_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_camera_frame_event)
  return _msg;
}

// .perfetto.protos.AndroidCameraSessionStats android_camera_session_stats = 81;
inline bool TracePacket::has_android_camera_session_stats() const {
  return data_case() == kAndroidCameraSessionStats;
}
inline bool TracePacket::_internal_has_android_camera_session_stats() const {
  return data_case() == kAndroidCameraSessionStats;
}
inline void TracePacket::set_has_android_camera_session_stats() {
  _impl_._oneof_case_[0] = kAndroidCameraSessionStats;
}
inline ::perfetto::protos::AndroidCameraSessionStats* TracePacket::release_android_camera_session_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_camera_session_stats)
  if (data_case() == kAndroidCameraSessionStats) {
    clear_has_data();
    ::perfetto::protos::AndroidCameraSessionStats* temp = _impl_.data_.android_camera_session_stats_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.android_camera_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidCameraSessionStats& TracePacket::_internal_android_camera_session_stats() const {
  return data_case() == kAndroidCameraSessionStats
      ? *_impl_.data_.android_camera_session_stats_
      : reinterpret_cast<::perfetto::protos::AndroidCameraSessionStats&>(::perfetto::protos::_AndroidCameraSessionStats_default_instance_);
}
inline const ::perfetto::protos::AndroidCameraSessionStats& TracePacket::android_camera_session_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_camera_session_stats)
  return _internal_android_camera_session_stats();
}
inline ::perfetto::protos::AndroidCameraSessionStats* TracePacket::unsafe_arena_release_android_camera_session_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.android_camera_session_stats)
  if (data_case() == kAndroidCameraSessionStats) {
    clear_has_data();
    ::perfetto::protos::AndroidCameraSessionStats* temp = _impl_.data_.android_camera_session_stats_;
    _impl_.data_.android_camera_session_stats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_android_camera_session_stats(::perfetto::protos::AndroidCameraSessionStats* android_camera_session_stats) {
  clear_data();
  if (android_camera_session_stats) {
    set_has_android_camera_session_stats();
    _impl_.data_.android_camera_session_stats_ = android_camera_session_stats;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.android_camera_session_stats)
}
inline ::perfetto::protos::AndroidCameraSessionStats* TracePacket::_internal_mutable_android_camera_session_stats() {
  if (data_case() != kAndroidCameraSessionStats) {
    clear_data();
    set_has_android_camera_session_stats();
    _impl_.data_.android_camera_session_stats_ = CreateMaybeMessage< ::perfetto::protos::AndroidCameraSessionStats >(GetArenaForAllocation());
  }
  return _impl_.data_.android_camera_session_stats_;
}
inline ::perfetto::protos::AndroidCameraSessionStats* TracePacket::mutable_android_camera_session_stats() {
  ::perfetto::protos::AndroidCameraSessionStats* _msg = _internal_mutable_android_camera_session_stats();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_camera_session_stats)
  return _msg;
}

// .perfetto.protos.TranslationTable translation_table = 82;
inline bool TracePacket::has_translation_table() const {
  return data_case() == kTranslationTable;
}
inline bool TracePacket::_internal_has_translation_table() const {
  return data_case() == kTranslationTable;
}
inline void TracePacket::set_has_translation_table() {
  _impl_._oneof_case_[0] = kTranslationTable;
}
inline ::perfetto::protos::TranslationTable* TracePacket::release_translation_table() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.translation_table)
  if (data_case() == kTranslationTable) {
    clear_has_data();
    ::perfetto::protos::TranslationTable* temp = _impl_.data_.translation_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.translation_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TranslationTable& TracePacket::_internal_translation_table() const {
  return data_case() == kTranslationTable
      ? *_impl_.data_.translation_table_
      : reinterpret_cast<::perfetto::protos::TranslationTable&>(::perfetto::protos::_TranslationTable_default_instance_);
}
inline const ::perfetto::protos::TranslationTable& TracePacket::translation_table() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.translation_table)
  return _internal_translation_table();
}
inline ::perfetto::protos::TranslationTable* TracePacket::unsafe_arena_release_translation_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.translation_table)
  if (data_case() == kTranslationTable) {
    clear_has_data();
    ::perfetto::protos::TranslationTable* temp = _impl_.data_.translation_table_;
    _impl_.data_.translation_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_translation_table(::perfetto::protos::TranslationTable* translation_table) {
  clear_data();
  if (translation_table) {
    set_has_translation_table();
    _impl_.data_.translation_table_ = translation_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.translation_table)
}
inline ::perfetto::protos::TranslationTable* TracePacket::_internal_mutable_translation_table() {
  if (data_case() != kTranslationTable) {
    clear_data();
    set_has_translation_table();
    _impl_.data_.translation_table_ = CreateMaybeMessage< ::perfetto::protos::TranslationTable >(GetArenaForAllocation());
  }
  return _impl_.data_.translation_table_;
}
inline ::perfetto::protos::TranslationTable* TracePacket::mutable_translation_table() {
  ::perfetto::protos::TranslationTable* _msg = _internal_mutable_translation_table();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.translation_table)
  return _msg;
}

// .perfetto.protos.AndroidGameInterventionList android_game_intervention_list = 83;
inline bool TracePacket::has_android_game_intervention_list() const {
  return data_case() == kAndroidGameInterventionList;
}
inline bool TracePacket::_internal_has_android_game_intervention_list() const {
  return data_case() == kAndroidGameInterventionList;
}
inline void TracePacket::set_has_android_game_intervention_list() {
  _impl_._oneof_case_[0] = kAndroidGameInterventionList;
}
inline ::perfetto::protos::AndroidGameInterventionList* TracePacket::release_android_game_intervention_list() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_game_intervention_list)
  if (data_case() == kAndroidGameInterventionList) {
    clear_has_data();
    ::perfetto::protos::AndroidGameInterventionList* temp = _impl_.data_.android_game_intervention_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.android_game_intervention_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidGameInterventionList& TracePacket::_internal_android_game_intervention_list() const {
  return data_case() == kAndroidGameInterventionList
      ? *_impl_.data_.android_game_intervention_list_
      : reinterpret_cast<::perfetto::protos::AndroidGameInterventionList&>(::perfetto::protos::_AndroidGameInterventionList_default_instance_);
}
inline const ::perfetto::protos::AndroidGameInterventionList& TracePacket::android_game_intervention_list() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_game_intervention_list)
  return _internal_android_game_intervention_list();
}
inline ::perfetto::protos::AndroidGameInterventionList* TracePacket::unsafe_arena_release_android_game_intervention_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.android_game_intervention_list)
  if (data_case() == kAndroidGameInterventionList) {
    clear_has_data();
    ::perfetto::protos::AndroidGameInterventionList* temp = _impl_.data_.android_game_intervention_list_;
    _impl_.data_.android_game_intervention_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_android_game_intervention_list(::perfetto::protos::AndroidGameInterventionList* android_game_intervention_list) {
  clear_data();
  if (android_game_intervention_list) {
    set_has_android_game_intervention_list();
    _impl_.data_.android_game_intervention_list_ = android_game_intervention_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.android_game_intervention_list)
}
inline ::perfetto::protos::AndroidGameInterventionList* TracePacket::_internal_mutable_android_game_intervention_list() {
  if (data_case() != kAndroidGameInterventionList) {
    clear_data();
    set_has_android_game_intervention_list();
    _impl_.data_.android_game_intervention_list_ = CreateMaybeMessage< ::perfetto::protos::AndroidGameInterventionList >(GetArenaForAllocation());
  }
  return _impl_.data_.android_game_intervention_list_;
}
inline ::perfetto::protos::AndroidGameInterventionList* TracePacket::mutable_android_game_intervention_list() {
  ::perfetto::protos::AndroidGameInterventionList* _msg = _internal_mutable_android_game_intervention_list();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_game_intervention_list)
  return _msg;
}

// .perfetto.protos.StatsdAtom statsd_atom = 84;
inline bool TracePacket::has_statsd_atom() const {
  return data_case() == kStatsdAtom;
}
inline bool TracePacket::_internal_has_statsd_atom() const {
  return data_case() == kStatsdAtom;
}
inline void TracePacket::set_has_statsd_atom() {
  _impl_._oneof_case_[0] = kStatsdAtom;
}
inline ::perfetto::protos::StatsdAtom* TracePacket::release_statsd_atom() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.statsd_atom)
  if (data_case() == kStatsdAtom) {
    clear_has_data();
    ::perfetto::protos::StatsdAtom* temp = _impl_.data_.statsd_atom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.statsd_atom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::StatsdAtom& TracePacket::_internal_statsd_atom() const {
  return data_case() == kStatsdAtom
      ? *_impl_.data_.statsd_atom_
      : reinterpret_cast<::perfetto::protos::StatsdAtom&>(::perfetto::protos::_StatsdAtom_default_instance_);
}
inline const ::perfetto::protos::StatsdAtom& TracePacket::statsd_atom() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.statsd_atom)
  return _internal_statsd_atom();
}
inline ::perfetto::protos::StatsdAtom* TracePacket::unsafe_arena_release_statsd_atom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.statsd_atom)
  if (data_case() == kStatsdAtom) {
    clear_has_data();
    ::perfetto::protos::StatsdAtom* temp = _impl_.data_.statsd_atom_;
    _impl_.data_.statsd_atom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_statsd_atom(::perfetto::protos::StatsdAtom* statsd_atom) {
  clear_data();
  if (statsd_atom) {
    set_has_statsd_atom();
    _impl_.data_.statsd_atom_ = statsd_atom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.statsd_atom)
}
inline ::perfetto::protos::StatsdAtom* TracePacket::_internal_mutable_statsd_atom() {
  if (data_case() != kStatsdAtom) {
    clear_data();
    set_has_statsd_atom();
    _impl_.data_.statsd_atom_ = CreateMaybeMessage< ::perfetto::protos::StatsdAtom >(GetArenaForAllocation());
  }
  return _impl_.data_.statsd_atom_;
}
inline ::perfetto::protos::StatsdAtom* TracePacket::mutable_statsd_atom() {
  ::perfetto::protos::StatsdAtom* _msg = _internal_mutable_statsd_atom();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.statsd_atom)
  return _msg;
}

// .perfetto.protos.AndroidSystemProperty android_system_property = 86;
inline bool TracePacket::has_android_system_property() const {
  return data_case() == kAndroidSystemProperty;
}
inline bool TracePacket::_internal_has_android_system_property() const {
  return data_case() == kAndroidSystemProperty;
}
inline void TracePacket::set_has_android_system_property() {
  _impl_._oneof_case_[0] = kAndroidSystemProperty;
}
inline ::perfetto::protos::AndroidSystemProperty* TracePacket::release_android_system_property() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.android_system_property)
  if (data_case() == kAndroidSystemProperty) {
    clear_has_data();
    ::perfetto::protos::AndroidSystemProperty* temp = _impl_.data_.android_system_property_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.android_system_property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidSystemProperty& TracePacket::_internal_android_system_property() const {
  return data_case() == kAndroidSystemProperty
      ? *_impl_.data_.android_system_property_
      : reinterpret_cast<::perfetto::protos::AndroidSystemProperty&>(::perfetto::protos::_AndroidSystemProperty_default_instance_);
}
inline const ::perfetto::protos::AndroidSystemProperty& TracePacket::android_system_property() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.android_system_property)
  return _internal_android_system_property();
}
inline ::perfetto::protos::AndroidSystemProperty* TracePacket::unsafe_arena_release_android_system_property() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.android_system_property)
  if (data_case() == kAndroidSystemProperty) {
    clear_has_data();
    ::perfetto::protos::AndroidSystemProperty* temp = _impl_.data_.android_system_property_;
    _impl_.data_.android_system_property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_android_system_property(::perfetto::protos::AndroidSystemProperty* android_system_property) {
  clear_data();
  if (android_system_property) {
    set_has_android_system_property();
    _impl_.data_.android_system_property_ = android_system_property;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.android_system_property)
}
inline ::perfetto::protos::AndroidSystemProperty* TracePacket::_internal_mutable_android_system_property() {
  if (data_case() != kAndroidSystemProperty) {
    clear_data();
    set_has_android_system_property();
    _impl_.data_.android_system_property_ = CreateMaybeMessage< ::perfetto::protos::AndroidSystemProperty >(GetArenaForAllocation());
  }
  return _impl_.data_.android_system_property_;
}
inline ::perfetto::protos::AndroidSystemProperty* TracePacket::mutable_android_system_property() {
  ::perfetto::protos::AndroidSystemProperty* _msg = _internal_mutable_android_system_property();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.android_system_property)
  return _msg;
}

// .perfetto.protos.EntityStateResidency entity_state_residency = 91;
inline bool TracePacket::has_entity_state_residency() const {
  return data_case() == kEntityStateResidency;
}
inline bool TracePacket::_internal_has_entity_state_residency() const {
  return data_case() == kEntityStateResidency;
}
inline void TracePacket::set_has_entity_state_residency() {
  _impl_._oneof_case_[0] = kEntityStateResidency;
}
inline ::perfetto::protos::EntityStateResidency* TracePacket::release_entity_state_residency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.entity_state_residency)
  if (data_case() == kEntityStateResidency) {
    clear_has_data();
    ::perfetto::protos::EntityStateResidency* temp = _impl_.data_.entity_state_residency_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.entity_state_residency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::EntityStateResidency& TracePacket::_internal_entity_state_residency() const {
  return data_case() == kEntityStateResidency
      ? *_impl_.data_.entity_state_residency_
      : reinterpret_cast<::perfetto::protos::EntityStateResidency&>(::perfetto::protos::_EntityStateResidency_default_instance_);
}
inline const ::perfetto::protos::EntityStateResidency& TracePacket::entity_state_residency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.entity_state_residency)
  return _internal_entity_state_residency();
}
inline ::perfetto::protos::EntityStateResidency* TracePacket::unsafe_arena_release_entity_state_residency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.entity_state_residency)
  if (data_case() == kEntityStateResidency) {
    clear_has_data();
    ::perfetto::protos::EntityStateResidency* temp = _impl_.data_.entity_state_residency_;
    _impl_.data_.entity_state_residency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_entity_state_residency(::perfetto::protos::EntityStateResidency* entity_state_residency) {
  clear_data();
  if (entity_state_residency) {
    set_has_entity_state_residency();
    _impl_.data_.entity_state_residency_ = entity_state_residency;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.entity_state_residency)
}
inline ::perfetto::protos::EntityStateResidency* TracePacket::_internal_mutable_entity_state_residency() {
  if (data_case() != kEntityStateResidency) {
    clear_data();
    set_has_entity_state_residency();
    _impl_.data_.entity_state_residency_ = CreateMaybeMessage< ::perfetto::protos::EntityStateResidency >(GetArenaForAllocation());
  }
  return _impl_.data_.entity_state_residency_;
}
inline ::perfetto::protos::EntityStateResidency* TracePacket::mutable_entity_state_residency() {
  ::perfetto::protos::EntityStateResidency* _msg = _internal_mutable_entity_state_residency();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.entity_state_residency)
  return _msg;
}

// .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
inline bool TracePacket::has_profiled_frame_symbols() const {
  return data_case() == kProfiledFrameSymbols;
}
inline bool TracePacket::_internal_has_profiled_frame_symbols() const {
  return data_case() == kProfiledFrameSymbols;
}
inline void TracePacket::set_has_profiled_frame_symbols() {
  _impl_._oneof_case_[0] = kProfiledFrameSymbols;
}
inline ::perfetto::protos::ProfiledFrameSymbols* TracePacket::release_profiled_frame_symbols() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.profiled_frame_symbols)
  if (data_case() == kProfiledFrameSymbols) {
    clear_has_data();
    ::perfetto::protos::ProfiledFrameSymbols* temp = _impl_.data_.profiled_frame_symbols_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.profiled_frame_symbols_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProfiledFrameSymbols& TracePacket::_internal_profiled_frame_symbols() const {
  return data_case() == kProfiledFrameSymbols
      ? *_impl_.data_.profiled_frame_symbols_
      : reinterpret_cast<::perfetto::protos::ProfiledFrameSymbols&>(::perfetto::protos::_ProfiledFrameSymbols_default_instance_);
}
inline const ::perfetto::protos::ProfiledFrameSymbols& TracePacket::profiled_frame_symbols() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.profiled_frame_symbols)
  return _internal_profiled_frame_symbols();
}
inline ::perfetto::protos::ProfiledFrameSymbols* TracePacket::unsafe_arena_release_profiled_frame_symbols() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.profiled_frame_symbols)
  if (data_case() == kProfiledFrameSymbols) {
    clear_has_data();
    ::perfetto::protos::ProfiledFrameSymbols* temp = _impl_.data_.profiled_frame_symbols_;
    _impl_.data_.profiled_frame_symbols_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols) {
  clear_data();
  if (profiled_frame_symbols) {
    set_has_profiled_frame_symbols();
    _impl_.data_.profiled_frame_symbols_ = profiled_frame_symbols;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.profiled_frame_symbols)
}
inline ::perfetto::protos::ProfiledFrameSymbols* TracePacket::_internal_mutable_profiled_frame_symbols() {
  if (data_case() != kProfiledFrameSymbols) {
    clear_data();
    set_has_profiled_frame_symbols();
    _impl_.data_.profiled_frame_symbols_ = CreateMaybeMessage< ::perfetto::protos::ProfiledFrameSymbols >(GetArenaForAllocation());
  }
  return _impl_.data_.profiled_frame_symbols_;
}
inline ::perfetto::protos::ProfiledFrameSymbols* TracePacket::mutable_profiled_frame_symbols() {
  ::perfetto::protos::ProfiledFrameSymbols* _msg = _internal_mutable_profiled_frame_symbols();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.profiled_frame_symbols)
  return _msg;
}

// .perfetto.protos.ModuleSymbols module_symbols = 61;
inline bool TracePacket::has_module_symbols() const {
  return data_case() == kModuleSymbols;
}
inline bool TracePacket::_internal_has_module_symbols() const {
  return data_case() == kModuleSymbols;
}
inline void TracePacket::set_has_module_symbols() {
  _impl_._oneof_case_[0] = kModuleSymbols;
}
inline ::perfetto::protos::ModuleSymbols* TracePacket::release_module_symbols() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.module_symbols)
  if (data_case() == kModuleSymbols) {
    clear_has_data();
    ::perfetto::protos::ModuleSymbols* temp = _impl_.data_.module_symbols_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.module_symbols_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ModuleSymbols& TracePacket::_internal_module_symbols() const {
  return data_case() == kModuleSymbols
      ? *_impl_.data_.module_symbols_
      : reinterpret_cast<::perfetto::protos::ModuleSymbols&>(::perfetto::protos::_ModuleSymbols_default_instance_);
}
inline const ::perfetto::protos::ModuleSymbols& TracePacket::module_symbols() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.module_symbols)
  return _internal_module_symbols();
}
inline ::perfetto::protos::ModuleSymbols* TracePacket::unsafe_arena_release_module_symbols() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.module_symbols)
  if (data_case() == kModuleSymbols) {
    clear_has_data();
    ::perfetto::protos::ModuleSymbols* temp = _impl_.data_.module_symbols_;
    _impl_.data_.module_symbols_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_module_symbols(::perfetto::protos::ModuleSymbols* module_symbols) {
  clear_data();
  if (module_symbols) {
    set_has_module_symbols();
    _impl_.data_.module_symbols_ = module_symbols;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.module_symbols)
}
inline ::perfetto::protos::ModuleSymbols* TracePacket::_internal_mutable_module_symbols() {
  if (data_case() != kModuleSymbols) {
    clear_data();
    set_has_module_symbols();
    _impl_.data_.module_symbols_ = CreateMaybeMessage< ::perfetto::protos::ModuleSymbols >(GetArenaForAllocation());
  }
  return _impl_.data_.module_symbols_;
}
inline ::perfetto::protos::ModuleSymbols* TracePacket::mutable_module_symbols() {
  ::perfetto::protos::ModuleSymbols* _msg = _internal_mutable_module_symbols();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.module_symbols)
  return _msg;
}

// .perfetto.protos.DeobfuscationMapping deobfuscation_mapping = 64;
inline bool TracePacket::has_deobfuscation_mapping() const {
  return data_case() == kDeobfuscationMapping;
}
inline bool TracePacket::_internal_has_deobfuscation_mapping() const {
  return data_case() == kDeobfuscationMapping;
}
inline void TracePacket::set_has_deobfuscation_mapping() {
  _impl_._oneof_case_[0] = kDeobfuscationMapping;
}
inline ::perfetto::protos::DeobfuscationMapping* TracePacket::release_deobfuscation_mapping() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.deobfuscation_mapping)
  if (data_case() == kDeobfuscationMapping) {
    clear_has_data();
    ::perfetto::protos::DeobfuscationMapping* temp = _impl_.data_.deobfuscation_mapping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.deobfuscation_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DeobfuscationMapping& TracePacket::_internal_deobfuscation_mapping() const {
  return data_case() == kDeobfuscationMapping
      ? *_impl_.data_.deobfuscation_mapping_
      : reinterpret_cast<::perfetto::protos::DeobfuscationMapping&>(::perfetto::protos::_DeobfuscationMapping_default_instance_);
}
inline const ::perfetto::protos::DeobfuscationMapping& TracePacket::deobfuscation_mapping() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.deobfuscation_mapping)
  return _internal_deobfuscation_mapping();
}
inline ::perfetto::protos::DeobfuscationMapping* TracePacket::unsafe_arena_release_deobfuscation_mapping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.deobfuscation_mapping)
  if (data_case() == kDeobfuscationMapping) {
    clear_has_data();
    ::perfetto::protos::DeobfuscationMapping* temp = _impl_.data_.deobfuscation_mapping_;
    _impl_.data_.deobfuscation_mapping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_deobfuscation_mapping(::perfetto::protos::DeobfuscationMapping* deobfuscation_mapping) {
  clear_data();
  if (deobfuscation_mapping) {
    set_has_deobfuscation_mapping();
    _impl_.data_.deobfuscation_mapping_ = deobfuscation_mapping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.deobfuscation_mapping)
}
inline ::perfetto::protos::DeobfuscationMapping* TracePacket::_internal_mutable_deobfuscation_mapping() {
  if (data_case() != kDeobfuscationMapping) {
    clear_data();
    set_has_deobfuscation_mapping();
    _impl_.data_.deobfuscation_mapping_ = CreateMaybeMessage< ::perfetto::protos::DeobfuscationMapping >(GetArenaForAllocation());
  }
  return _impl_.data_.deobfuscation_mapping_;
}
inline ::perfetto::protos::DeobfuscationMapping* TracePacket::mutable_deobfuscation_mapping() {
  ::perfetto::protos::DeobfuscationMapping* _msg = _internal_mutable_deobfuscation_mapping();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.deobfuscation_mapping)
  return _msg;
}

// .perfetto.protos.TrackDescriptor track_descriptor = 60;
inline bool TracePacket::has_track_descriptor() const {
  return data_case() == kTrackDescriptor;
}
inline bool TracePacket::_internal_has_track_descriptor() const {
  return data_case() == kTrackDescriptor;
}
inline void TracePacket::set_has_track_descriptor() {
  _impl_._oneof_case_[0] = kTrackDescriptor;
}
inline ::perfetto::protos::TrackDescriptor* TracePacket::release_track_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.track_descriptor)
  if (data_case() == kTrackDescriptor) {
    clear_has_data();
    ::perfetto::protos::TrackDescriptor* temp = _impl_.data_.track_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.track_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrackDescriptor& TracePacket::_internal_track_descriptor() const {
  return data_case() == kTrackDescriptor
      ? *_impl_.data_.track_descriptor_
      : reinterpret_cast<::perfetto::protos::TrackDescriptor&>(::perfetto::protos::_TrackDescriptor_default_instance_);
}
inline const ::perfetto::protos::TrackDescriptor& TracePacket::track_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.track_descriptor)
  return _internal_track_descriptor();
}
inline ::perfetto::protos::TrackDescriptor* TracePacket::unsafe_arena_release_track_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.track_descriptor)
  if (data_case() == kTrackDescriptor) {
    clear_has_data();
    ::perfetto::protos::TrackDescriptor* temp = _impl_.data_.track_descriptor_;
    _impl_.data_.track_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_track_descriptor(::perfetto::protos::TrackDescriptor* track_descriptor) {
  clear_data();
  if (track_descriptor) {
    set_has_track_descriptor();
    _impl_.data_.track_descriptor_ = track_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.track_descriptor)
}
inline ::perfetto::protos::TrackDescriptor* TracePacket::_internal_mutable_track_descriptor() {
  if (data_case() != kTrackDescriptor) {
    clear_data();
    set_has_track_descriptor();
    _impl_.data_.track_descriptor_ = CreateMaybeMessage< ::perfetto::protos::TrackDescriptor >(GetArenaForAllocation());
  }
  return _impl_.data_.track_descriptor_;
}
inline ::perfetto::protos::TrackDescriptor* TracePacket::mutable_track_descriptor() {
  ::perfetto::protos::TrackDescriptor* _msg = _internal_mutable_track_descriptor();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.track_descriptor)
  return _msg;
}

// .perfetto.protos.ProcessDescriptor process_descriptor = 43;
inline bool TracePacket::has_process_descriptor() const {
  return data_case() == kProcessDescriptor;
}
inline bool TracePacket::_internal_has_process_descriptor() const {
  return data_case() == kProcessDescriptor;
}
inline void TracePacket::set_has_process_descriptor() {
  _impl_._oneof_case_[0] = kProcessDescriptor;
}
inline ::perfetto::protos::ProcessDescriptor* TracePacket::release_process_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.process_descriptor)
  if (data_case() == kProcessDescriptor) {
    clear_has_data();
    ::perfetto::protos::ProcessDescriptor* temp = _impl_.data_.process_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.process_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ProcessDescriptor& TracePacket::_internal_process_descriptor() const {
  return data_case() == kProcessDescriptor
      ? *_impl_.data_.process_descriptor_
      : reinterpret_cast<::perfetto::protos::ProcessDescriptor&>(::perfetto::protos::_ProcessDescriptor_default_instance_);
}
inline const ::perfetto::protos::ProcessDescriptor& TracePacket::process_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.process_descriptor)
  return _internal_process_descriptor();
}
inline ::perfetto::protos::ProcessDescriptor* TracePacket::unsafe_arena_release_process_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.process_descriptor)
  if (data_case() == kProcessDescriptor) {
    clear_has_data();
    ::perfetto::protos::ProcessDescriptor* temp = _impl_.data_.process_descriptor_;
    _impl_.data_.process_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor) {
  clear_data();
  if (process_descriptor) {
    set_has_process_descriptor();
    _impl_.data_.process_descriptor_ = process_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.process_descriptor)
}
inline ::perfetto::protos::ProcessDescriptor* TracePacket::_internal_mutable_process_descriptor() {
  if (data_case() != kProcessDescriptor) {
    clear_data();
    set_has_process_descriptor();
    _impl_.data_.process_descriptor_ = CreateMaybeMessage< ::perfetto::protos::ProcessDescriptor >(GetArenaForAllocation());
  }
  return _impl_.data_.process_descriptor_;
}
inline ::perfetto::protos::ProcessDescriptor* TracePacket::mutable_process_descriptor() {
  ::perfetto::protos::ProcessDescriptor* _msg = _internal_mutable_process_descriptor();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.process_descriptor)
  return _msg;
}

// .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
inline bool TracePacket::has_thread_descriptor() const {
  return data_case() == kThreadDescriptor;
}
inline bool TracePacket::_internal_has_thread_descriptor() const {
  return data_case() == kThreadDescriptor;
}
inline void TracePacket::set_has_thread_descriptor() {
  _impl_._oneof_case_[0] = kThreadDescriptor;
}
inline ::perfetto::protos::ThreadDescriptor* TracePacket::release_thread_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.thread_descriptor)
  if (data_case() == kThreadDescriptor) {
    clear_has_data();
    ::perfetto::protos::ThreadDescriptor* temp = _impl_.data_.thread_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.thread_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ThreadDescriptor& TracePacket::_internal_thread_descriptor() const {
  return data_case() == kThreadDescriptor
      ? *_impl_.data_.thread_descriptor_
      : reinterpret_cast<::perfetto::protos::ThreadDescriptor&>(::perfetto::protos::_ThreadDescriptor_default_instance_);
}
inline const ::perfetto::protos::ThreadDescriptor& TracePacket::thread_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.thread_descriptor)
  return _internal_thread_descriptor();
}
inline ::perfetto::protos::ThreadDescriptor* TracePacket::unsafe_arena_release_thread_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.thread_descriptor)
  if (data_case() == kThreadDescriptor) {
    clear_has_data();
    ::perfetto::protos::ThreadDescriptor* temp = _impl_.data_.thread_descriptor_;
    _impl_.data_.thread_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor) {
  clear_data();
  if (thread_descriptor) {
    set_has_thread_descriptor();
    _impl_.data_.thread_descriptor_ = thread_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.thread_descriptor)
}
inline ::perfetto::protos::ThreadDescriptor* TracePacket::_internal_mutable_thread_descriptor() {
  if (data_case() != kThreadDescriptor) {
    clear_data();
    set_has_thread_descriptor();
    _impl_.data_.thread_descriptor_ = CreateMaybeMessage< ::perfetto::protos::ThreadDescriptor >(GetArenaForAllocation());
  }
  return _impl_.data_.thread_descriptor_;
}
inline ::perfetto::protos::ThreadDescriptor* TracePacket::mutable_thread_descriptor() {
  ::perfetto::protos::ThreadDescriptor* _msg = _internal_mutable_thread_descriptor();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.thread_descriptor)
  return _msg;
}

// .perfetto.protos.FtraceEventBundle ftrace_events = 1;
inline bool TracePacket::has_ftrace_events() const {
  return data_case() == kFtraceEvents;
}
inline bool TracePacket::_internal_has_ftrace_events() const {
  return data_case() == kFtraceEvents;
}
inline void TracePacket::set_has_ftrace_events() {
  _impl_._oneof_case_[0] = kFtraceEvents;
}
inline ::perfetto::protos::FtraceEventBundle* TracePacket::release_ftrace_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.ftrace_events)
  if (data_case() == kFtraceEvents) {
    clear_has_data();
    ::perfetto::protos::FtraceEventBundle* temp = _impl_.data_.ftrace_events_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.ftrace_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FtraceEventBundle& TracePacket::_internal_ftrace_events() const {
  return data_case() == kFtraceEvents
      ? *_impl_.data_.ftrace_events_
      : reinterpret_cast<::perfetto::protos::FtraceEventBundle&>(::perfetto::protos::_FtraceEventBundle_default_instance_);
}
inline const ::perfetto::protos::FtraceEventBundle& TracePacket::ftrace_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.ftrace_events)
  return _internal_ftrace_events();
}
inline ::perfetto::protos::FtraceEventBundle* TracePacket::unsafe_arena_release_ftrace_events() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.ftrace_events)
  if (data_case() == kFtraceEvents) {
    clear_has_data();
    ::perfetto::protos::FtraceEventBundle* temp = _impl_.data_.ftrace_events_;
    _impl_.data_.ftrace_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_ftrace_events(::perfetto::protos::FtraceEventBundle* ftrace_events) {
  clear_data();
  if (ftrace_events) {
    set_has_ftrace_events();
    _impl_.data_.ftrace_events_ = ftrace_events;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.ftrace_events)
}
inline ::perfetto::protos::FtraceEventBundle* TracePacket::_internal_mutable_ftrace_events() {
  if (data_case() != kFtraceEvents) {
    clear_data();
    set_has_ftrace_events();
    _impl_.data_.ftrace_events_ = CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle >(GetArenaForAllocation());
  }
  return _impl_.data_.ftrace_events_;
}
inline ::perfetto::protos::FtraceEventBundle* TracePacket::mutable_ftrace_events() {
  ::perfetto::protos::FtraceEventBundle* _msg = _internal_mutable_ftrace_events();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.ftrace_events)
  return _msg;
}

// bytes synchronization_marker = 36;
inline bool TracePacket::has_synchronization_marker() const {
  return data_case() == kSynchronizationMarker;
}
inline void TracePacket::set_has_synchronization_marker() {
  _impl_._oneof_case_[0] = kSynchronizationMarker;
}
inline void TracePacket::clear_synchronization_marker() {
  if (data_case() == kSynchronizationMarker) {
    _impl_.data_.synchronization_marker_.Destroy();
    clear_has_data();
  }
}
inline const std::string& TracePacket::synchronization_marker() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.synchronization_marker)
  return _internal_synchronization_marker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TracePacket::set_synchronization_marker(Arg_&& arg,
                                                     Args_... args) {
  if (data_case() != kSynchronizationMarker) {
    clear_data();

    set_has_synchronization_marker();
    _impl_.data_.synchronization_marker_.InitDefault();
  }
  _impl_.data_.synchronization_marker_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.synchronization_marker)
}
inline std::string* TracePacket::mutable_synchronization_marker() {
  std::string* _s = _internal_mutable_synchronization_marker();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.synchronization_marker)
  return _s;
}
inline const std::string& TracePacket::_internal_synchronization_marker() const {
  if (data_case() != kSynchronizationMarker) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.synchronization_marker_.Get();
}
inline void TracePacket::_internal_set_synchronization_marker(const std::string& value) {
  if (data_case() != kSynchronizationMarker) {
    clear_data();

    set_has_synchronization_marker();
    _impl_.data_.synchronization_marker_.InitDefault();
  }


  _impl_.data_.synchronization_marker_.Set(value, GetArenaForAllocation());
}
inline std::string* TracePacket::_internal_mutable_synchronization_marker() {
  if (data_case() != kSynchronizationMarker) {
    clear_data();

    set_has_synchronization_marker();
    _impl_.data_.synchronization_marker_.InitDefault();
  }
  return _impl_.data_.synchronization_marker_.Mutable( GetArenaForAllocation());
}
inline std::string* TracePacket::release_synchronization_marker() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.synchronization_marker)
  if (data_case() != kSynchronizationMarker) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.synchronization_marker_.Release();
}
inline void TracePacket::set_allocated_synchronization_marker(std::string* value) {
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_synchronization_marker();
    _impl_.data_.synchronization_marker_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.synchronization_marker)
}

// bytes compressed_packets = 50;
inline bool TracePacket::has_compressed_packets() const {
  return data_case() == kCompressedPackets;
}
inline void TracePacket::set_has_compressed_packets() {
  _impl_._oneof_case_[0] = kCompressedPackets;
}
inline void TracePacket::clear_compressed_packets() {
  if (data_case() == kCompressedPackets) {
    _impl_.data_.compressed_packets_.Destroy();
    clear_has_data();
  }
}
inline const std::string& TracePacket::compressed_packets() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.compressed_packets)
  return _internal_compressed_packets();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TracePacket::set_compressed_packets(Arg_&& arg,
                                                     Args_... args) {
  if (data_case() != kCompressedPackets) {
    clear_data();

    set_has_compressed_packets();
    _impl_.data_.compressed_packets_.InitDefault();
  }
  _impl_.data_.compressed_packets_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.compressed_packets)
}
inline std::string* TracePacket::mutable_compressed_packets() {
  std::string* _s = _internal_mutable_compressed_packets();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.compressed_packets)
  return _s;
}
inline const std::string& TracePacket::_internal_compressed_packets() const {
  if (data_case() != kCompressedPackets) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.compressed_packets_.Get();
}
inline void TracePacket::_internal_set_compressed_packets(const std::string& value) {
  if (data_case() != kCompressedPackets) {
    clear_data();

    set_has_compressed_packets();
    _impl_.data_.compressed_packets_.InitDefault();
  }


  _impl_.data_.compressed_packets_.Set(value, GetArenaForAllocation());
}
inline std::string* TracePacket::_internal_mutable_compressed_packets() {
  if (data_case() != kCompressedPackets) {
    clear_data();

    set_has_compressed_packets();
    _impl_.data_.compressed_packets_.InitDefault();
  }
  return _impl_.data_.compressed_packets_.Mutable( GetArenaForAllocation());
}
inline std::string* TracePacket::release_compressed_packets() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.compressed_packets)
  if (data_case() != kCompressedPackets) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.compressed_packets_.Release();
}
inline void TracePacket::set_allocated_compressed_packets(std::string* value) {
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_compressed_packets();
    _impl_.data_.compressed_packets_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.compressed_packets)
}

// .perfetto.protos.ExtensionDescriptor extension_descriptor = 72;
inline bool TracePacket::has_extension_descriptor() const {
  return data_case() == kExtensionDescriptor;
}
inline bool TracePacket::_internal_has_extension_descriptor() const {
  return data_case() == kExtensionDescriptor;
}
inline void TracePacket::set_has_extension_descriptor() {
  _impl_._oneof_case_[0] = kExtensionDescriptor;
}
inline ::perfetto::protos::ExtensionDescriptor* TracePacket::release_extension_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.extension_descriptor)
  if (data_case() == kExtensionDescriptor) {
    clear_has_data();
    ::perfetto::protos::ExtensionDescriptor* temp = _impl_.data_.extension_descriptor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.extension_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ExtensionDescriptor& TracePacket::_internal_extension_descriptor() const {
  return data_case() == kExtensionDescriptor
      ? *_impl_.data_.extension_descriptor_
      : reinterpret_cast<::perfetto::protos::ExtensionDescriptor&>(::perfetto::protos::_ExtensionDescriptor_default_instance_);
}
inline const ::perfetto::protos::ExtensionDescriptor& TracePacket::extension_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.extension_descriptor)
  return _internal_extension_descriptor();
}
inline ::perfetto::protos::ExtensionDescriptor* TracePacket::unsafe_arena_release_extension_descriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.extension_descriptor)
  if (data_case() == kExtensionDescriptor) {
    clear_has_data();
    ::perfetto::protos::ExtensionDescriptor* temp = _impl_.data_.extension_descriptor_;
    _impl_.data_.extension_descriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_extension_descriptor(::perfetto::protos::ExtensionDescriptor* extension_descriptor) {
  clear_data();
  if (extension_descriptor) {
    set_has_extension_descriptor();
    _impl_.data_.extension_descriptor_ = extension_descriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.extension_descriptor)
}
inline ::perfetto::protos::ExtensionDescriptor* TracePacket::_internal_mutable_extension_descriptor() {
  if (data_case() != kExtensionDescriptor) {
    clear_data();
    set_has_extension_descriptor();
    _impl_.data_.extension_descriptor_ = CreateMaybeMessage< ::perfetto::protos::ExtensionDescriptor >(GetArenaForAllocation());
  }
  return _impl_.data_.extension_descriptor_;
}
inline ::perfetto::protos::ExtensionDescriptor* TracePacket::mutable_extension_descriptor() {
  ::perfetto::protos::ExtensionDescriptor* _msg = _internal_mutable_extension_descriptor();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.extension_descriptor)
  return _msg;
}

// .perfetto.protos.NetworkPacketEvent network_packet = 88;
inline bool TracePacket::has_network_packet() const {
  return data_case() == kNetworkPacket;
}
inline bool TracePacket::_internal_has_network_packet() const {
  return data_case() == kNetworkPacket;
}
inline void TracePacket::set_has_network_packet() {
  _impl_._oneof_case_[0] = kNetworkPacket;
}
inline ::perfetto::protos::NetworkPacketEvent* TracePacket::release_network_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.network_packet)
  if (data_case() == kNetworkPacket) {
    clear_has_data();
    ::perfetto::protos::NetworkPacketEvent* temp = _impl_.data_.network_packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.network_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NetworkPacketEvent& TracePacket::_internal_network_packet() const {
  return data_case() == kNetworkPacket
      ? *_impl_.data_.network_packet_
      : reinterpret_cast<::perfetto::protos::NetworkPacketEvent&>(::perfetto::protos::_NetworkPacketEvent_default_instance_);
}
inline const ::perfetto::protos::NetworkPacketEvent& TracePacket::network_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.network_packet)
  return _internal_network_packet();
}
inline ::perfetto::protos::NetworkPacketEvent* TracePacket::unsafe_arena_release_network_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.network_packet)
  if (data_case() == kNetworkPacket) {
    clear_has_data();
    ::perfetto::protos::NetworkPacketEvent* temp = _impl_.data_.network_packet_;
    _impl_.data_.network_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_network_packet(::perfetto::protos::NetworkPacketEvent* network_packet) {
  clear_data();
  if (network_packet) {
    set_has_network_packet();
    _impl_.data_.network_packet_ = network_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.network_packet)
}
inline ::perfetto::protos::NetworkPacketEvent* TracePacket::_internal_mutable_network_packet() {
  if (data_case() != kNetworkPacket) {
    clear_data();
    set_has_network_packet();
    _impl_.data_.network_packet_ = CreateMaybeMessage< ::perfetto::protos::NetworkPacketEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.network_packet_;
}
inline ::perfetto::protos::NetworkPacketEvent* TracePacket::mutable_network_packet() {
  ::perfetto::protos::NetworkPacketEvent* _msg = _internal_mutable_network_packet();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.network_packet)
  return _msg;
}

// .perfetto.protos.NetworkPacketBundle network_packet_bundle = 92;
inline bool TracePacket::has_network_packet_bundle() const {
  return data_case() == kNetworkPacketBundle;
}
inline bool TracePacket::_internal_has_network_packet_bundle() const {
  return data_case() == kNetworkPacketBundle;
}
inline void TracePacket::set_has_network_packet_bundle() {
  _impl_._oneof_case_[0] = kNetworkPacketBundle;
}
inline ::perfetto::protos::NetworkPacketBundle* TracePacket::release_network_packet_bundle() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.network_packet_bundle)
  if (data_case() == kNetworkPacketBundle) {
    clear_has_data();
    ::perfetto::protos::NetworkPacketBundle* temp = _impl_.data_.network_packet_bundle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.network_packet_bundle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NetworkPacketBundle& TracePacket::_internal_network_packet_bundle() const {
  return data_case() == kNetworkPacketBundle
      ? *_impl_.data_.network_packet_bundle_
      : reinterpret_cast<::perfetto::protos::NetworkPacketBundle&>(::perfetto::protos::_NetworkPacketBundle_default_instance_);
}
inline const ::perfetto::protos::NetworkPacketBundle& TracePacket::network_packet_bundle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.network_packet_bundle)
  return _internal_network_packet_bundle();
}
inline ::perfetto::protos::NetworkPacketBundle* TracePacket::unsafe_arena_release_network_packet_bundle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.network_packet_bundle)
  if (data_case() == kNetworkPacketBundle) {
    clear_has_data();
    ::perfetto::protos::NetworkPacketBundle* temp = _impl_.data_.network_packet_bundle_;
    _impl_.data_.network_packet_bundle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_network_packet_bundle(::perfetto::protos::NetworkPacketBundle* network_packet_bundle) {
  clear_data();
  if (network_packet_bundle) {
    set_has_network_packet_bundle();
    _impl_.data_.network_packet_bundle_ = network_packet_bundle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.network_packet_bundle)
}
inline ::perfetto::protos::NetworkPacketBundle* TracePacket::_internal_mutable_network_packet_bundle() {
  if (data_case() != kNetworkPacketBundle) {
    clear_data();
    set_has_network_packet_bundle();
    _impl_.data_.network_packet_bundle_ = CreateMaybeMessage< ::perfetto::protos::NetworkPacketBundle >(GetArenaForAllocation());
  }
  return _impl_.data_.network_packet_bundle_;
}
inline ::perfetto::protos::NetworkPacketBundle* TracePacket::mutable_network_packet_bundle() {
  ::perfetto::protos::NetworkPacketBundle* _msg = _internal_mutable_network_packet_bundle();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.network_packet_bundle)
  return _msg;
}

// .perfetto.protos.TrackEventRangeOfInterest track_event_range_of_interest = 90;
inline bool TracePacket::has_track_event_range_of_interest() const {
  return data_case() == kTrackEventRangeOfInterest;
}
inline bool TracePacket::_internal_has_track_event_range_of_interest() const {
  return data_case() == kTrackEventRangeOfInterest;
}
inline void TracePacket::set_has_track_event_range_of_interest() {
  _impl_._oneof_case_[0] = kTrackEventRangeOfInterest;
}
inline ::perfetto::protos::TrackEventRangeOfInterest* TracePacket::release_track_event_range_of_interest() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.track_event_range_of_interest)
  if (data_case() == kTrackEventRangeOfInterest) {
    clear_has_data();
    ::perfetto::protos::TrackEventRangeOfInterest* temp = _impl_.data_.track_event_range_of_interest_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.track_event_range_of_interest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrackEventRangeOfInterest& TracePacket::_internal_track_event_range_of_interest() const {
  return data_case() == kTrackEventRangeOfInterest
      ? *_impl_.data_.track_event_range_of_interest_
      : reinterpret_cast<::perfetto::protos::TrackEventRangeOfInterest&>(::perfetto::protos::_TrackEventRangeOfInterest_default_instance_);
}
inline const ::perfetto::protos::TrackEventRangeOfInterest& TracePacket::track_event_range_of_interest() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.track_event_range_of_interest)
  return _internal_track_event_range_of_interest();
}
inline ::perfetto::protos::TrackEventRangeOfInterest* TracePacket::unsafe_arena_release_track_event_range_of_interest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.track_event_range_of_interest)
  if (data_case() == kTrackEventRangeOfInterest) {
    clear_has_data();
    ::perfetto::protos::TrackEventRangeOfInterest* temp = _impl_.data_.track_event_range_of_interest_;
    _impl_.data_.track_event_range_of_interest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_track_event_range_of_interest(::perfetto::protos::TrackEventRangeOfInterest* track_event_range_of_interest) {
  clear_data();
  if (track_event_range_of_interest) {
    set_has_track_event_range_of_interest();
    _impl_.data_.track_event_range_of_interest_ = track_event_range_of_interest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.track_event_range_of_interest)
}
inline ::perfetto::protos::TrackEventRangeOfInterest* TracePacket::_internal_mutable_track_event_range_of_interest() {
  if (data_case() != kTrackEventRangeOfInterest) {
    clear_data();
    set_has_track_event_range_of_interest();
    _impl_.data_.track_event_range_of_interest_ = CreateMaybeMessage< ::perfetto::protos::TrackEventRangeOfInterest >(GetArenaForAllocation());
  }
  return _impl_.data_.track_event_range_of_interest_;
}
inline ::perfetto::protos::TrackEventRangeOfInterest* TracePacket::mutable_track_event_range_of_interest() {
  ::perfetto::protos::TrackEventRangeOfInterest* _msg = _internal_mutable_track_event_range_of_interest();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.track_event_range_of_interest)
  return _msg;
}

// .perfetto.protos.TestEvent for_testing = 900;
inline bool TracePacket::has_for_testing() const {
  return data_case() == kForTesting;
}
inline bool TracePacket::_internal_has_for_testing() const {
  return data_case() == kForTesting;
}
inline void TracePacket::set_has_for_testing() {
  _impl_._oneof_case_[0] = kForTesting;
}
inline ::perfetto::protos::TestEvent* TracePacket::release_for_testing() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.for_testing)
  if (data_case() == kForTesting) {
    clear_has_data();
    ::perfetto::protos::TestEvent* temp = _impl_.data_.for_testing_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.for_testing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TestEvent& TracePacket::_internal_for_testing() const {
  return data_case() == kForTesting
      ? *_impl_.data_.for_testing_
      : reinterpret_cast<::perfetto::protos::TestEvent&>(::perfetto::protos::_TestEvent_default_instance_);
}
inline const ::perfetto::protos::TestEvent& TracePacket::for_testing() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.for_testing)
  return _internal_for_testing();
}
inline ::perfetto::protos::TestEvent* TracePacket::unsafe_arena_release_for_testing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.TracePacket.for_testing)
  if (data_case() == kForTesting) {
    clear_has_data();
    ::perfetto::protos::TestEvent* temp = _impl_.data_.for_testing_;
    _impl_.data_.for_testing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TracePacket::unsafe_arena_set_allocated_for_testing(::perfetto::protos::TestEvent* for_testing) {
  clear_data();
  if (for_testing) {
    set_has_for_testing();
    _impl_.data_.for_testing_ = for_testing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.for_testing)
}
inline ::perfetto::protos::TestEvent* TracePacket::_internal_mutable_for_testing() {
  if (data_case() != kForTesting) {
    clear_data();
    set_has_for_testing();
    _impl_.data_.for_testing_ = CreateMaybeMessage< ::perfetto::protos::TestEvent >(GetArenaForAllocation());
  }
  return _impl_.data_.for_testing_;
}
inline ::perfetto::protos::TestEvent* TracePacket::mutable_for_testing() {
  ::perfetto::protos::TestEvent* _msg = _internal_mutable_for_testing();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.for_testing)
  return _msg;
}

// int32 trusted_uid = 3;
inline bool TracePacket::has_trusted_uid() const {
  return optional_trusted_uid_case() == kTrustedUid;
}
inline void TracePacket::set_has_trusted_uid() {
  _impl_._oneof_case_[1] = kTrustedUid;
}
inline void TracePacket::clear_trusted_uid() {
  if (optional_trusted_uid_case() == kTrustedUid) {
    _impl_.optional_trusted_uid_.trusted_uid_ = 0;
    clear_has_optional_trusted_uid();
  }
}
inline ::int32_t TracePacket::trusted_uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trusted_uid)
  return _internal_trusted_uid();
}
inline void TracePacket::set_trusted_uid(::int32_t value) {
  _internal_set_trusted_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.trusted_uid)
}
inline ::int32_t TracePacket::_internal_trusted_uid() const {
  if (optional_trusted_uid_case() == kTrustedUid) {
    return _impl_.optional_trusted_uid_.trusted_uid_;
  }
  return 0;
}
inline void TracePacket::_internal_set_trusted_uid(::int32_t value) {
  if (optional_trusted_uid_case() != kTrustedUid) {
    clear_optional_trusted_uid();
    set_has_trusted_uid();
  }
  _impl_.optional_trusted_uid_.trusted_uid_ = value;
}

// uint32 trusted_packet_sequence_id = 10;
inline bool TracePacket::has_trusted_packet_sequence_id() const {
  return optional_trusted_packet_sequence_id_case() == kTrustedPacketSequenceId;
}
inline void TracePacket::set_has_trusted_packet_sequence_id() {
  _impl_._oneof_case_[2] = kTrustedPacketSequenceId;
}
inline void TracePacket::clear_trusted_packet_sequence_id() {
  if (optional_trusted_packet_sequence_id_case() == kTrustedPacketSequenceId) {
    _impl_.optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_ = 0u;
    clear_has_optional_trusted_packet_sequence_id();
  }
}
inline ::uint32_t TracePacket::trusted_packet_sequence_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trusted_packet_sequence_id)
  return _internal_trusted_packet_sequence_id();
}
inline void TracePacket::set_trusted_packet_sequence_id(::uint32_t value) {
  _internal_set_trusted_packet_sequence_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.trusted_packet_sequence_id)
}
inline ::uint32_t TracePacket::_internal_trusted_packet_sequence_id() const {
  if (optional_trusted_packet_sequence_id_case() == kTrustedPacketSequenceId) {
    return _impl_.optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_;
  }
  return 0u;
}
inline void TracePacket::_internal_set_trusted_packet_sequence_id(::uint32_t value) {
  if (optional_trusted_packet_sequence_id_case() != kTrustedPacketSequenceId) {
    clear_optional_trusted_packet_sequence_id();
    set_has_trusted_packet_sequence_id();
  }
  _impl_.optional_trusted_packet_sequence_id_.trusted_packet_sequence_id_ = value;
}

// optional int32 trusted_pid = 79;
inline bool TracePacket::has_trusted_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void TracePacket::clear_trusted_pid() {
  _impl_.trusted_pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t TracePacket::trusted_pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trusted_pid)
  return _internal_trusted_pid();
}
inline void TracePacket::set_trusted_pid(::int32_t value) {
  _internal_set_trusted_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.trusted_pid)
}
inline ::int32_t TracePacket::_internal_trusted_pid() const {
  return _impl_.trusted_pid_;
}
inline void TracePacket::_internal_set_trusted_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.trusted_pid_ = value;
}

// optional .perfetto.protos.InternedData interned_data = 12;
inline bool TracePacket::has_interned_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.interned_data_ != nullptr);
  return value;
}
inline const ::perfetto::protos::InternedData& TracePacket::_internal_interned_data() const {
  const ::perfetto::protos::InternedData* p = _impl_.interned_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::InternedData&>(
      ::perfetto::protos::_InternedData_default_instance_);
}
inline const ::perfetto::protos::InternedData& TracePacket::interned_data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.interned_data)
  return _internal_interned_data();
}
inline void TracePacket::unsafe_arena_set_allocated_interned_data(
    ::perfetto::protos::InternedData* interned_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interned_data_);
  }
  _impl_.interned_data_ = interned_data;
  if (interned_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.interned_data)
}
inline ::perfetto::protos::InternedData* TracePacket::release_interned_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::InternedData* temp = _impl_.interned_data_;
  _impl_.interned_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::InternedData* TracePacket::unsafe_arena_release_interned_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.interned_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::InternedData* temp = _impl_.interned_data_;
  _impl_.interned_data_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InternedData* TracePacket::_internal_mutable_interned_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.interned_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InternedData>(GetArenaForAllocation());
    _impl_.interned_data_ = p;
  }
  return _impl_.interned_data_;
}
inline ::perfetto::protos::InternedData* TracePacket::mutable_interned_data() {
  ::perfetto::protos::InternedData* _msg = _internal_mutable_interned_data();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.interned_data)
  return _msg;
}
inline void TracePacket::set_allocated_interned_data(::perfetto::protos::InternedData* interned_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interned_data_);
  }
  if (interned_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interned_data));
    if (message_arena != submessage_arena) {
      interned_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interned_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.interned_data_ = interned_data;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.interned_data)
}

// optional uint32 sequence_flags = 13;
inline bool TracePacket::has_sequence_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TracePacket::clear_sequence_flags() {
  _impl_.sequence_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t TracePacket::sequence_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.sequence_flags)
  return _internal_sequence_flags();
}
inline void TracePacket::set_sequence_flags(::uint32_t value) {
  _internal_set_sequence_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.sequence_flags)
}
inline ::uint32_t TracePacket::_internal_sequence_flags() const {
  return _impl_.sequence_flags_;
}
inline void TracePacket::_internal_set_sequence_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sequence_flags_ = value;
}

// optional bool incremental_state_cleared = 41;
inline bool TracePacket::has_incremental_state_cleared() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TracePacket::clear_incremental_state_cleared() {
  _impl_.incremental_state_cleared_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TracePacket::incremental_state_cleared() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.incremental_state_cleared)
  return _internal_incremental_state_cleared();
}
inline void TracePacket::set_incremental_state_cleared(bool value) {
  _internal_set_incremental_state_cleared(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.incremental_state_cleared)
}
inline bool TracePacket::_internal_incremental_state_cleared() const {
  return _impl_.incremental_state_cleared_;
}
inline void TracePacket::_internal_set_incremental_state_cleared(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.incremental_state_cleared_ = value;
}

// optional .perfetto.protos.TracePacketDefaults trace_packet_defaults = 59;
inline bool TracePacket::has_trace_packet_defaults() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trace_packet_defaults_ != nullptr);
  return value;
}
inline const ::perfetto::protos::TracePacketDefaults& TracePacket::_internal_trace_packet_defaults() const {
  const ::perfetto::protos::TracePacketDefaults* p = _impl_.trace_packet_defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TracePacketDefaults&>(
      ::perfetto::protos::_TracePacketDefaults_default_instance_);
}
inline const ::perfetto::protos::TracePacketDefaults& TracePacket::trace_packet_defaults() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.trace_packet_defaults)
  return _internal_trace_packet_defaults();
}
inline void TracePacket::unsafe_arena_set_allocated_trace_packet_defaults(
    ::perfetto::protos::TracePacketDefaults* trace_packet_defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trace_packet_defaults_);
  }
  _impl_.trace_packet_defaults_ = trace_packet_defaults;
  if (trace_packet_defaults) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.TracePacket.trace_packet_defaults)
}
inline ::perfetto::protos::TracePacketDefaults* TracePacket::release_trace_packet_defaults() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TracePacketDefaults* temp = _impl_.trace_packet_defaults_;
  _impl_.trace_packet_defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::TracePacketDefaults* TracePacket::unsafe_arena_release_trace_packet_defaults() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracePacket.trace_packet_defaults)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::perfetto::protos::TracePacketDefaults* temp = _impl_.trace_packet_defaults_;
  _impl_.trace_packet_defaults_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TracePacketDefaults* TracePacket::_internal_mutable_trace_packet_defaults() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.trace_packet_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TracePacketDefaults>(GetArenaForAllocation());
    _impl_.trace_packet_defaults_ = p;
  }
  return _impl_.trace_packet_defaults_;
}
inline ::perfetto::protos::TracePacketDefaults* TracePacket::mutable_trace_packet_defaults() {
  ::perfetto::protos::TracePacketDefaults* _msg = _internal_mutable_trace_packet_defaults();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracePacket.trace_packet_defaults)
  return _msg;
}
inline void TracePacket::set_allocated_trace_packet_defaults(::perfetto::protos::TracePacketDefaults* trace_packet_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trace_packet_defaults_);
  }
  if (trace_packet_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_packet_defaults));
    if (message_arena != submessage_arena) {
      trace_packet_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_packet_defaults, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trace_packet_defaults_ = trace_packet_defaults;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracePacket.trace_packet_defaults)
}

// optional bool previous_packet_dropped = 42;
inline bool TracePacket::has_previous_packet_dropped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TracePacket::clear_previous_packet_dropped() {
  _impl_.previous_packet_dropped_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TracePacket::previous_packet_dropped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.previous_packet_dropped)
  return _internal_previous_packet_dropped();
}
inline void TracePacket::set_previous_packet_dropped(bool value) {
  _internal_set_previous_packet_dropped(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.previous_packet_dropped)
}
inline bool TracePacket::_internal_previous_packet_dropped() const {
  return _impl_.previous_packet_dropped_;
}
inline void TracePacket::_internal_set_previous_packet_dropped(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.previous_packet_dropped_ = value;
}

// optional bool first_packet_on_sequence = 87;
inline bool TracePacket::has_first_packet_on_sequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void TracePacket::clear_first_packet_on_sequence() {
  _impl_.first_packet_on_sequence_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool TracePacket::first_packet_on_sequence() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracePacket.first_packet_on_sequence)
  return _internal_first_packet_on_sequence();
}
inline void TracePacket::set_first_packet_on_sequence(bool value) {
  _internal_set_first_packet_on_sequence(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracePacket.first_packet_on_sequence)
}
inline bool TracePacket::_internal_first_packet_on_sequence() const {
  return _impl_.first_packet_on_sequence_;
}
inline void TracePacket::_internal_set_first_packet_on_sequence(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.first_packet_on_sequence_ = value;
}

inline bool TracePacket::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TracePacket::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline bool TracePacket::has_optional_trusted_uid() const {
  return optional_trusted_uid_case() != OPTIONAL_TRUSTED_UID_NOT_SET;
}
inline void TracePacket::clear_has_optional_trusted_uid() {
  _impl_._oneof_case_[1] = OPTIONAL_TRUSTED_UID_NOT_SET;
}
inline bool TracePacket::has_optional_trusted_packet_sequence_id() const {
  return optional_trusted_packet_sequence_id_case() != OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}
inline void TracePacket::clear_has_optional_trusted_packet_sequence_id() {
  _impl_._oneof_case_[2] = OPTIONAL_TRUSTED_PACKET_SEQUENCE_ID_NOT_SET;
}
inline TracePacket::DataCase TracePacket::data_case() const {
  return TracePacket::DataCase(_impl_._oneof_case_[0]);
}
inline TracePacket::OptionalTrustedUidCase TracePacket::optional_trusted_uid_case() const {
  return TracePacket::OptionalTrustedUidCase(_impl_._oneof_case_[1]);
}
inline TracePacket::OptionalTrustedPacketSequenceIdCase TracePacket::optional_trusted_packet_sequence_id_case() const {
  return TracePacket::OptionalTrustedPacketSequenceIdCase(_impl_._oneof_case_[2]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::TracePacket_SequenceFlags> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::TracePacket_SequenceFlags>() {
  return ::perfetto::protos::TracePacket_SequenceFlags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2ftrace_5fpacket_2eproto_2epb_2eh
