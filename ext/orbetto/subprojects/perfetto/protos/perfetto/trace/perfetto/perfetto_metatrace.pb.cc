// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/perfetto_metatrace.proto

#include "protos/perfetto/trace/perfetto/perfetto_metatrace.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR PerfettoMetatrace_Arg::PerfettoMetatrace_Arg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_or_interned_key_)*/{}
  , /*decltype(_impl_.value_or_interned_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfettoMetatrace_ArgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfettoMetatrace_ArgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfettoMetatrace_ArgDefaultTypeInternal() {}
  union {
    PerfettoMetatrace_Arg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfettoMetatrace_ArgDefaultTypeInternal _PerfettoMetatrace_Arg_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfettoMetatrace_InternedString::PerfettoMetatrace_InternedString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iid_)*/ ::uint64_t{0u}
} {}
struct PerfettoMetatrace_InternedStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfettoMetatrace_InternedStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfettoMetatrace_InternedStringDefaultTypeInternal() {}
  union {
    PerfettoMetatrace_InternedString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfettoMetatrace_InternedStringDefaultTypeInternal _PerfettoMetatrace_InternedString_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerfettoMetatrace::PerfettoMetatrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.interned_strings_)*/{}
  , /*decltype(_impl_.event_duration_ns_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.counter_value_)*/ 0

  , /*decltype(_impl_.thread_id_)*/ 0u

  , /*decltype(_impl_.has_overruns_)*/ false

  , /*decltype(_impl_.record_type_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PerfettoMetatraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfettoMetatraceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfettoMetatraceDefaultTypeInternal() {}
  union {
    PerfettoMetatrace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfettoMetatraceDefaultTypeInternal _PerfettoMetatrace_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_Arg, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_Arg, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_Arg, _impl_.key_or_interned_key_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_Arg, _impl_.value_or_interned_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_InternedString, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_InternedString, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_InternedString, _impl_.iid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_InternedString, _impl_.value_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.event_duration_ns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.counter_value_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.thread_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.has_overruns_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.args_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.interned_strings_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_.record_type_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::perfetto::protos::PerfettoMetatrace_Arg)},
        { 14, 24, -1, sizeof(::perfetto::protos::PerfettoMetatrace_InternedString)},
        { 26, 46, -1, sizeof(::perfetto::protos::PerfettoMetatrace)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_PerfettoMetatrace_Arg_default_instance_._instance,
    &::perfetto::protos::_PerfettoMetatrace_InternedString_default_instance_._instance,
    &::perfetto::protos::_PerfettoMetatrace_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n7protos/perfetto/trace/perfetto/perfett"
    "o_metatrace.proto\022\017perfetto.protos\"\241\004\n\021P"
    "erfettoMetatrace\022\022\n\010event_id\030\001 \001(\rH\000\022\024\n\n"
    "counter_id\030\002 \001(\rH\000\022\024\n\nevent_name\030\010 \001(\tH\000"
    "\022\030\n\016event_name_iid\030\013 \001(\004H\000\022\026\n\014counter_na"
    "me\030\t \001(\tH\000\022\031\n\021event_duration_ns\030\003 \001(\004\022\025\n"
    "\rcounter_value\030\004 \001(\005\022\021\n\tthread_id\030\005 \001(\r\022"
    "\024\n\014has_overruns\030\006 \001(\010\0224\n\004args\030\007 \003(\0132&.pe"
    "rfetto.protos.PerfettoMetatrace.Arg\022K\n\020i"
    "nterned_strings\030\n \003(\01321.perfetto.protos."
    "PerfettoMetatrace.InternedString\032\177\n\003Arg\022"
    "\r\n\003key\030\001 \001(\tH\000\022\021\n\007key_iid\030\003 \001(\004H\000\022\017\n\005val"
    "ue\030\002 \001(\tH\001\022\023\n\tvalue_iid\030\004 \001(\004H\001B\025\n\023key_o"
    "r_interned_keyB\031\n\027value_or_interned_valu"
    "e\032,\n\016InternedString\022\013\n\003iid\030\001 \001(\004\022\r\n\005valu"
    "e\030\002 \001(\tB\r\n\013record_type"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto = {
    false,
    false,
    622,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto,
    "protos/perfetto/trace/perfetto/perfetto_metatrace.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class PerfettoMetatrace_Arg::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace_Arg, _impl_._oneof_case_);
};

PerfettoMetatrace_Arg::PerfettoMetatrace_Arg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfettoMetatrace.Arg)
}
PerfettoMetatrace_Arg::PerfettoMetatrace_Arg(const PerfettoMetatrace_Arg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfettoMetatrace_Arg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_or_interned_key_){}
    , decltype(_impl_.value_or_interned_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_key_or_interned_key();
  switch (from.key_or_interned_key_case()) {
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case kKeyIid: {
      _this->_internal_set_key_iid(from._internal_key_iid());
      break;
    }
    case KEY_OR_INTERNED_KEY_NOT_SET: {
      break;
    }
  }
  clear_has_value_or_interned_value();
  switch (from.value_or_interned_value_case()) {
    case kValue: {
      _this->_internal_set_value(from._internal_value());
      break;
    }
    case kValueIid: {
      _this->_internal_set_value_iid(from._internal_value_iid());
      break;
    }
    case VALUE_OR_INTERNED_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfettoMetatrace.Arg)
}

inline void PerfettoMetatrace_Arg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_or_interned_key_){}
    , decltype(_impl_.value_or_interned_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_key_or_interned_key();
  clear_has_value_or_interned_value();
}

PerfettoMetatrace_Arg::~PerfettoMetatrace_Arg() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfettoMetatrace.Arg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfettoMetatrace_Arg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_key_or_interned_key()) {
    clear_key_or_interned_key();
  }
  if (has_value_or_interned_value()) {
    clear_value_or_interned_value();
  }
}

void PerfettoMetatrace_Arg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfettoMetatrace_Arg::clear_key_or_interned_key() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfettoMetatrace.Arg)
  switch (key_or_interned_key_case()) {
    case kKey: {
      _impl_.key_or_interned_key_.key_.Destroy();
      break;
    }
    case kKeyIid: {
      // No need to clear
      break;
    }
    case KEY_OR_INTERNED_KEY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KEY_OR_INTERNED_KEY_NOT_SET;
}

void PerfettoMetatrace_Arg::clear_value_or_interned_value() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfettoMetatrace.Arg)
  switch (value_or_interned_value_case()) {
    case kValue: {
      _impl_.value_or_interned_value_.value_.Destroy();
      break;
    }
    case kValueIid: {
      // No need to clear
      break;
    }
    case VALUE_OR_INTERNED_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = VALUE_OR_INTERNED_VALUE_NOT_SET;
}


void PerfettoMetatrace_Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfettoMetatrace.Arg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_key_or_interned_key();
  clear_value_or_interned_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfettoMetatrace_Arg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfettoMetatrace.Arg.key");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfettoMetatrace.Arg.value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 key_iid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_key_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 value_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_value_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfettoMetatrace_Arg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfettoMetatrace.Arg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (key_or_interned_key_case() == kKey) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PerfettoMetatrace.Arg.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (value_or_interned_value_case() == kValue) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PerfettoMetatrace.Arg.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 key_iid = 3;
  if (key_or_interned_key_case() == kKeyIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_key_iid(), target);
  }

  // uint64 value_iid = 4;
  if (value_or_interned_value_case() == kValueIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_value_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfettoMetatrace.Arg)
  return target;
}

::size_t PerfettoMetatrace_Arg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfettoMetatrace.Arg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (key_or_interned_key_case()) {
    // string key = 1;
    case kKey: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_key());
      break;
    }
    // uint64 key_iid = 3;
    case kKeyIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_key_iid());
      break;
    }
    case KEY_OR_INTERNED_KEY_NOT_SET: {
      break;
    }
  }
  switch (value_or_interned_value_case()) {
    // string value = 2;
    case kValue: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
      break;
    }
    // uint64 value_iid = 4;
    case kValueIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_value_iid());
      break;
    }
    case VALUE_OR_INTERNED_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfettoMetatrace_Arg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfettoMetatrace_Arg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfettoMetatrace_Arg::GetClassData() const { return &_class_data_; }


void PerfettoMetatrace_Arg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfettoMetatrace_Arg*>(&to_msg);
  auto& from = static_cast<const PerfettoMetatrace_Arg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfettoMetatrace.Arg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.key_or_interned_key_case()) {
    case kKey: {
      _this->_internal_set_key(from._internal_key());
      break;
    }
    case kKeyIid: {
      _this->_internal_set_key_iid(from._internal_key_iid());
      break;
    }
    case KEY_OR_INTERNED_KEY_NOT_SET: {
      break;
    }
  }
  switch (from.value_or_interned_value_case()) {
    case kValue: {
      _this->_internal_set_value(from._internal_value());
      break;
    }
    case kValueIid: {
      _this->_internal_set_value_iid(from._internal_value_iid());
      break;
    }
    case VALUE_OR_INTERNED_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfettoMetatrace_Arg::CopyFrom(const PerfettoMetatrace_Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfettoMetatrace.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfettoMetatrace_Arg::IsInitialized() const {
  return true;
}

void PerfettoMetatrace_Arg::InternalSwap(PerfettoMetatrace_Arg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.key_or_interned_key_, other->_impl_.key_or_interned_key_);
  swap(_impl_.value_or_interned_value_, other->_impl_.value_or_interned_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfettoMetatrace_Arg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto[0]);
}
// ===================================================================

class PerfettoMetatrace_InternedString::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfettoMetatrace_InternedString>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfettoMetatrace_InternedString, _impl_._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfettoMetatrace_InternedString::PerfettoMetatrace_InternedString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfettoMetatrace.InternedString)
}
PerfettoMetatrace_InternedString::PerfettoMetatrace_InternedString(const PerfettoMetatrace_InternedString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfettoMetatrace_InternedString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.iid_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _this->_impl_.iid_ = from._impl_.iid_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfettoMetatrace.InternedString)
}

inline void PerfettoMetatrace_InternedString::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_) {}

    , decltype(_impl_.iid_) { ::uint64_t{0u} }

  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerfettoMetatrace_InternedString::~PerfettoMetatrace_InternedString() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfettoMetatrace.InternedString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfettoMetatrace_InternedString::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void PerfettoMetatrace_InternedString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfettoMetatrace_InternedString::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfettoMetatrace.InternedString)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfettoMetatrace_InternedString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iid(&has_bits);
          _impl_.iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfettoMetatrace.InternedString.value");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfettoMetatrace_InternedString::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfettoMetatrace.InternedString)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 iid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_iid(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.PerfettoMetatrace.InternedString.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfettoMetatrace.InternedString)
  return target;
}

::size_t PerfettoMetatrace_InternedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfettoMetatrace.InternedString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
    }

    // optional uint64 iid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_iid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfettoMetatrace_InternedString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfettoMetatrace_InternedString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfettoMetatrace_InternedString::GetClassData() const { return &_class_data_; }


void PerfettoMetatrace_InternedString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfettoMetatrace_InternedString*>(&to_msg);
  auto& from = static_cast<const PerfettoMetatrace_InternedString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfettoMetatrace.InternedString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iid_ = from._impl_.iid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfettoMetatrace_InternedString::CopyFrom(const PerfettoMetatrace_InternedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfettoMetatrace.InternedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfettoMetatrace_InternedString::IsInitialized() const {
  return true;
}

void PerfettoMetatrace_InternedString::InternalSwap(PerfettoMetatrace_InternedString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);

  swap(_impl_.iid_, other->_impl_.iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfettoMetatrace_InternedString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto[1]);
}
// ===================================================================

class PerfettoMetatrace::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfettoMetatrace>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PerfettoMetatrace, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::PerfettoMetatrace, _impl_._oneof_case_);
  static void set_has_event_duration_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_counter_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_overruns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PerfettoMetatrace::PerfettoMetatrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfettoMetatrace)
}
PerfettoMetatrace::PerfettoMetatrace(const PerfettoMetatrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerfettoMetatrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.interned_strings_){from._impl_.interned_strings_}
    , decltype(_impl_.event_duration_ns_) {}

    , decltype(_impl_.counter_value_) {}

    , decltype(_impl_.thread_id_) {}

    , decltype(_impl_.has_overruns_) {}

    , decltype(_impl_.record_type_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_duration_ns_, &from._impl_.event_duration_ns_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.has_overruns_) -
    reinterpret_cast<char*>(&_impl_.event_duration_ns_)) + sizeof(_impl_.has_overruns_));
  clear_has_record_type();
  switch (from.record_type_case()) {
    case kEventId: {
      _this->_internal_set_event_id(from._internal_event_id());
      break;
    }
    case kCounterId: {
      _this->_internal_set_counter_id(from._internal_counter_id());
      break;
    }
    case kEventName: {
      _this->_internal_set_event_name(from._internal_event_name());
      break;
    }
    case kEventNameIid: {
      _this->_internal_set_event_name_iid(from._internal_event_name_iid());
      break;
    }
    case kCounterName: {
      _this->_internal_set_counter_name(from._internal_counter_name());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfettoMetatrace)
}

inline void PerfettoMetatrace::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_){arena}
    , decltype(_impl_.interned_strings_){arena}
    , decltype(_impl_.event_duration_ns_) { ::uint64_t{0u} }

    , decltype(_impl_.counter_value_) { 0 }

    , decltype(_impl_.thread_id_) { 0u }

    , decltype(_impl_.has_overruns_) { false }

    , decltype(_impl_.record_type_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_record_type();
}

PerfettoMetatrace::~PerfettoMetatrace() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfettoMetatrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerfettoMetatrace::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_args()->~RepeatedPtrField();
  _internal_mutable_interned_strings()->~RepeatedPtrField();
  if (has_record_type()) {
    clear_record_type();
  }
}

void PerfettoMetatrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerfettoMetatrace::clear_record_type() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfettoMetatrace)
  switch (record_type_case()) {
    case kEventId: {
      // No need to clear
      break;
    }
    case kCounterId: {
      // No need to clear
      break;
    }
    case kEventName: {
      _impl_.record_type_.event_name_.Destroy();
      break;
    }
    case kEventNameIid: {
      // No need to clear
      break;
    }
    case kCounterName: {
      _impl_.record_type_.counter_name_.Destroy();
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RECORD_TYPE_NOT_SET;
}


void PerfettoMetatrace::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfettoMetatrace)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_args()->Clear();
  _internal_mutable_interned_strings()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.event_duration_ns_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.has_overruns_) -
        reinterpret_cast<char*>(&_impl_.event_duration_ns_)) + sizeof(_impl_.has_overruns_));
  }
  clear_record_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfettoMetatrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 counter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_counter_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 event_duration_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_event_duration_ns(&has_bits);
          _impl_.event_duration_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 counter_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_counter_value(&has_bits);
          _impl_.counter_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 thread_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_thread_id(&has_bits);
          _impl_.thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool has_overruns = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_has_overruns(&has_bits);
          _impl_.has_overruns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string event_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfettoMetatrace.event_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // string counter_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_counter_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.PerfettoMetatrace.counter_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.PerfettoMetatrace.InternedString interned_strings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interned_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_name_iid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _internal_set_event_name_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerfettoMetatrace::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfettoMetatrace)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (record_type_case()) {
    case kEventId: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this->_internal_event_id(), target);
      break;
    }
    case kCounterId: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this->_internal_counter_id(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 event_duration_ns = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_event_duration_ns(), target);
  }

  // optional int32 counter_value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_counter_value(), target);
  }

  // optional uint32 thread_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_thread_id(), target);
  }

  // optional bool has_overruns = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_has_overruns(), target);
  }

  // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  switch (record_type_case()) {
    case kEventName: {
      const std::string& _s = this->_internal_event_name();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.PerfettoMetatrace.event_name");
      target = stream->WriteStringMaybeAliased(8, _s, target);
      break;
    }
    case kCounterName: {
      const std::string& _s = this->_internal_counter_name();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                  "perfetto.protos.PerfettoMetatrace.counter_name");
      target = stream->WriteStringMaybeAliased(9, _s, target);
      break;
    }
    default: ;
  }
  // repeated .perfetto.protos.PerfettoMetatrace.InternedString interned_strings = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interned_strings_size()); i < n; i++) {
    const auto& repfield = this->_internal_interned_strings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 event_name_iid = 11;
  if (record_type_case() == kEventNameIid) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_event_name_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfettoMetatrace)
  return target;
}

::size_t PerfettoMetatrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfettoMetatrace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_internal_args()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.PerfettoMetatrace.InternedString interned_strings = 10;
  total_size += 1UL * this->_internal_interned_strings_size();
  for (const auto& msg : this->_internal_interned_strings()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 event_duration_ns = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_event_duration_ns());
    }

    // optional int32 counter_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_counter_value());
    }

    // optional uint32 thread_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_thread_id());
    }

    // optional bool has_overruns = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  switch (record_type_case()) {
    // uint32 event_id = 1;
    case kEventId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_event_id());
      break;
    }
    // uint32 counter_id = 2;
    case kCounterId: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_counter_id());
      break;
    }
    // string event_name = 8;
    case kEventName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_event_name());
      break;
    }
    // uint64 event_name_iid = 11;
    case kEventNameIid: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_event_name_iid());
      break;
    }
    // string counter_name = 9;
    case kCounterName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_counter_name());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerfettoMetatrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerfettoMetatrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerfettoMetatrace::GetClassData() const { return &_class_data_; }


void PerfettoMetatrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerfettoMetatrace*>(&to_msg);
  auto& from = static_cast<const PerfettoMetatrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfettoMetatrace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_args()->MergeFrom(from._internal_args());
  _this->_internal_mutable_interned_strings()->MergeFrom(from._internal_interned_strings());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_duration_ns_ = from._impl_.event_duration_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.counter_value_ = from._impl_.counter_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.thread_id_ = from._impl_.thread_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.has_overruns_ = from._impl_.has_overruns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.record_type_case()) {
    case kEventId: {
      _this->_internal_set_event_id(from._internal_event_id());
      break;
    }
    case kCounterId: {
      _this->_internal_set_counter_id(from._internal_counter_id());
      break;
    }
    case kEventName: {
      _this->_internal_set_event_name(from._internal_event_name());
      break;
    }
    case kEventNameIid: {
      _this->_internal_set_event_name_iid(from._internal_event_name_iid());
      break;
    }
    case kCounterName: {
      _this->_internal_set_counter_name(from._internal_counter_name());
      break;
    }
    case RECORD_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerfettoMetatrace::CopyFrom(const PerfettoMetatrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfettoMetatrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfettoMetatrace::IsInitialized() const {
  return true;
}

void PerfettoMetatrace::InternalSwap(PerfettoMetatrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_args()->InternalSwap(other->_internal_mutable_args());
  _internal_mutable_interned_strings()->InternalSwap(other->_internal_mutable_interned_strings());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfettoMetatrace, _impl_.has_overruns_)
      + sizeof(PerfettoMetatrace::_impl_.has_overruns_)
      - PROTOBUF_FIELD_OFFSET(PerfettoMetatrace, _impl_.event_duration_ns_)>(
          reinterpret_cast<char*>(&_impl_.event_duration_ns_),
          reinterpret_cast<char*>(&other->_impl_.event_duration_ns_));
  swap(_impl_.record_type_, other->_impl_.record_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfettoMetatrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfettoMetatrace_Arg*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace_Arg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfettoMetatrace_Arg >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfettoMetatrace_InternedString*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace_InternedString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfettoMetatrace_InternedString >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfettoMetatrace*
Arena::CreateMaybeMessage< ::perfetto::protos::PerfettoMetatrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfettoMetatrace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
