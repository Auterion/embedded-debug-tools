// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/perfetto/perfetto_metatrace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
namespace perfetto {
namespace protos {
class PerfettoMetatrace;
struct PerfettoMetatraceDefaultTypeInternal;
extern PerfettoMetatraceDefaultTypeInternal _PerfettoMetatrace_default_instance_;
class PerfettoMetatrace_Arg;
struct PerfettoMetatrace_ArgDefaultTypeInternal;
extern PerfettoMetatrace_ArgDefaultTypeInternal _PerfettoMetatrace_Arg_default_instance_;
class PerfettoMetatrace_InternedString;
struct PerfettoMetatrace_InternedStringDefaultTypeInternal;
extern PerfettoMetatrace_InternedStringDefaultTypeInternal _PerfettoMetatrace_InternedString_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::PerfettoMetatrace* Arena::CreateMaybeMessage<::perfetto::protos::PerfettoMetatrace>(Arena*);
template <>
::perfetto::protos::PerfettoMetatrace_Arg* Arena::CreateMaybeMessage<::perfetto::protos::PerfettoMetatrace_Arg>(Arena*);
template <>
::perfetto::protos::PerfettoMetatrace_InternedString* Arena::CreateMaybeMessage<::perfetto::protos::PerfettoMetatrace_InternedString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class PerfettoMetatrace_Arg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfettoMetatrace.Arg) */ {
 public:
  inline PerfettoMetatrace_Arg() : PerfettoMetatrace_Arg(nullptr) {}
  ~PerfettoMetatrace_Arg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfettoMetatrace_Arg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfettoMetatrace_Arg(const PerfettoMetatrace_Arg& from);
  PerfettoMetatrace_Arg(PerfettoMetatrace_Arg&& from) noexcept
    : PerfettoMetatrace_Arg() {
    *this = ::std::move(from);
  }

  inline PerfettoMetatrace_Arg& operator=(const PerfettoMetatrace_Arg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfettoMetatrace_Arg& operator=(PerfettoMetatrace_Arg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfettoMetatrace_Arg& default_instance() {
    return *internal_default_instance();
  }
  enum KeyOrInternedKeyCase {
    kKey = 1,
    kKeyIid = 3,
    KEY_OR_INTERNED_KEY_NOT_SET = 0,
  };

  enum ValueOrInternedValueCase {
    kValue = 2,
    kValueIid = 4,
    VALUE_OR_INTERNED_VALUE_NOT_SET = 0,
  };

  static inline const PerfettoMetatrace_Arg* internal_default_instance() {
    return reinterpret_cast<const PerfettoMetatrace_Arg*>(
               &_PerfettoMetatrace_Arg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfettoMetatrace_Arg& a, PerfettoMetatrace_Arg& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfettoMetatrace_Arg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfettoMetatrace_Arg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfettoMetatrace_Arg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfettoMetatrace_Arg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfettoMetatrace_Arg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfettoMetatrace_Arg& from) {
    PerfettoMetatrace_Arg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfettoMetatrace_Arg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfettoMetatrace.Arg";
  }
  protected:
  explicit PerfettoMetatrace_Arg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kKeyIidFieldNumber = 3,
    kValueFieldNumber = 2,
    kValueIidFieldNumber = 4,
  };
  // string key = 1;
  bool has_key() const;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // uint64 key_iid = 3;
  bool has_key_iid() const;
  void clear_key_iid() ;
  ::uint64_t key_iid() const;
  void set_key_iid(::uint64_t value);

  private:
  ::uint64_t _internal_key_iid() const;
  void _internal_set_key_iid(::uint64_t value);

  public:
  // string value = 2;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // uint64 value_iid = 4;
  bool has_value_iid() const;
  void clear_value_iid() ;
  ::uint64_t value_iid() const;
  void set_value_iid(::uint64_t value);

  private:
  ::uint64_t _internal_value_iid() const;
  void _internal_set_value_iid(::uint64_t value);

  public:
  void clear_key_or_interned_key();
  KeyOrInternedKeyCase key_or_interned_key_case() const;
  void clear_value_or_interned_value();
  ValueOrInternedValueCase value_or_interned_value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfettoMetatrace.Arg)
 private:
  class _Internal;
  void set_has_key();
  void set_has_key_iid();
  void set_has_value();
  void set_has_value_iid();

  inline bool has_key_or_interned_key() const;
  inline void clear_has_key_or_interned_key();

  inline bool has_value_or_interned_value() const;
  inline void clear_has_value_or_interned_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KeyOrInternedKeyUnion {
      constexpr KeyOrInternedKeyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
      ::uint64_t key_iid_;
    } key_or_interned_key_;
    union ValueOrInternedValueUnion {
      constexpr ValueOrInternedValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
      ::uint64_t value_iid_;
    } value_or_interned_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
};// -------------------------------------------------------------------

class PerfettoMetatrace_InternedString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfettoMetatrace.InternedString) */ {
 public:
  inline PerfettoMetatrace_InternedString() : PerfettoMetatrace_InternedString(nullptr) {}
  ~PerfettoMetatrace_InternedString() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfettoMetatrace_InternedString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfettoMetatrace_InternedString(const PerfettoMetatrace_InternedString& from);
  PerfettoMetatrace_InternedString(PerfettoMetatrace_InternedString&& from) noexcept
    : PerfettoMetatrace_InternedString() {
    *this = ::std::move(from);
  }

  inline PerfettoMetatrace_InternedString& operator=(const PerfettoMetatrace_InternedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfettoMetatrace_InternedString& operator=(PerfettoMetatrace_InternedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfettoMetatrace_InternedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerfettoMetatrace_InternedString* internal_default_instance() {
    return reinterpret_cast<const PerfettoMetatrace_InternedString*>(
               &_PerfettoMetatrace_InternedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfettoMetatrace_InternedString& a, PerfettoMetatrace_InternedString& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfettoMetatrace_InternedString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfettoMetatrace_InternedString* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfettoMetatrace_InternedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfettoMetatrace_InternedString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfettoMetatrace_InternedString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfettoMetatrace_InternedString& from) {
    PerfettoMetatrace_InternedString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfettoMetatrace_InternedString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfettoMetatrace.InternedString";
  }
  protected:
  explicit PerfettoMetatrace_InternedString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIidFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // optional uint64 iid = 1;
  bool has_iid() const;
  void clear_iid() ;
  ::uint64_t iid() const;
  void set_iid(::uint64_t value);

  private:
  ::uint64_t _internal_iid() const;
  void _internal_set_iid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfettoMetatrace.InternedString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::uint64_t iid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
};// -------------------------------------------------------------------

class PerfettoMetatrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.PerfettoMetatrace) */ {
 public:
  inline PerfettoMetatrace() : PerfettoMetatrace(nullptr) {}
  ~PerfettoMetatrace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerfettoMetatrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerfettoMetatrace(const PerfettoMetatrace& from);
  PerfettoMetatrace(PerfettoMetatrace&& from) noexcept
    : PerfettoMetatrace() {
    *this = ::std::move(from);
  }

  inline PerfettoMetatrace& operator=(const PerfettoMetatrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfettoMetatrace& operator=(PerfettoMetatrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerfettoMetatrace& default_instance() {
    return *internal_default_instance();
  }
  enum RecordTypeCase {
    kEventId = 1,
    kCounterId = 2,
    kEventName = 8,
    kEventNameIid = 11,
    kCounterName = 9,
    RECORD_TYPE_NOT_SET = 0,
  };

  static inline const PerfettoMetatrace* internal_default_instance() {
    return reinterpret_cast<const PerfettoMetatrace*>(
               &_PerfettoMetatrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerfettoMetatrace& a, PerfettoMetatrace& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfettoMetatrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfettoMetatrace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerfettoMetatrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerfettoMetatrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerfettoMetatrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerfettoMetatrace& from) {
    PerfettoMetatrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfettoMetatrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.PerfettoMetatrace";
  }
  protected:
  explicit PerfettoMetatrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PerfettoMetatrace_Arg Arg;
  typedef PerfettoMetatrace_InternedString InternedString;

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 7,
    kInternedStringsFieldNumber = 10,
    kEventDurationNsFieldNumber = 3,
    kCounterValueFieldNumber = 4,
    kThreadIdFieldNumber = 5,
    kHasOverrunsFieldNumber = 6,
    kEventIdFieldNumber = 1,
    kCounterIdFieldNumber = 2,
    kEventNameFieldNumber = 8,
    kEventNameIidFieldNumber = 11,
    kCounterNameFieldNumber = 9,
  };
  // repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
  int args_size() const;
  private:
  int _internal_args_size() const;

  public:
  void clear_args() ;
  ::perfetto::protos::PerfettoMetatrace_Arg* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >*
      mutable_args();
  private:
  const ::perfetto::protos::PerfettoMetatrace_Arg& _internal_args(int index) const;
  ::perfetto::protos::PerfettoMetatrace_Arg* _internal_add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_Arg>& _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_Arg>* _internal_mutable_args();
  public:
  const ::perfetto::protos::PerfettoMetatrace_Arg& args(int index) const;
  ::perfetto::protos::PerfettoMetatrace_Arg* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >&
      args() const;
  // repeated .perfetto.protos.PerfettoMetatrace.InternedString interned_strings = 10;
  int interned_strings_size() const;
  private:
  int _internal_interned_strings_size() const;

  public:
  void clear_interned_strings() ;
  ::perfetto::protos::PerfettoMetatrace_InternedString* mutable_interned_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_InternedString >*
      mutable_interned_strings();
  private:
  const ::perfetto::protos::PerfettoMetatrace_InternedString& _internal_interned_strings(int index) const;
  ::perfetto::protos::PerfettoMetatrace_InternedString* _internal_add_interned_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_InternedString>& _internal_interned_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_InternedString>* _internal_mutable_interned_strings();
  public:
  const ::perfetto::protos::PerfettoMetatrace_InternedString& interned_strings(int index) const;
  ::perfetto::protos::PerfettoMetatrace_InternedString* add_interned_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_InternedString >&
      interned_strings() const;
  // optional uint64 event_duration_ns = 3;
  bool has_event_duration_ns() const;
  void clear_event_duration_ns() ;
  ::uint64_t event_duration_ns() const;
  void set_event_duration_ns(::uint64_t value);

  private:
  ::uint64_t _internal_event_duration_ns() const;
  void _internal_set_event_duration_ns(::uint64_t value);

  public:
  // optional int32 counter_value = 4;
  bool has_counter_value() const;
  void clear_counter_value() ;
  ::int32_t counter_value() const;
  void set_counter_value(::int32_t value);

  private:
  ::int32_t _internal_counter_value() const;
  void _internal_set_counter_value(::int32_t value);

  public:
  // optional uint32 thread_id = 5;
  bool has_thread_id() const;
  void clear_thread_id() ;
  ::uint32_t thread_id() const;
  void set_thread_id(::uint32_t value);

  private:
  ::uint32_t _internal_thread_id() const;
  void _internal_set_thread_id(::uint32_t value);

  public:
  // optional bool has_overruns = 6;
  bool has_has_overruns() const;
  void clear_has_overruns() ;
  bool has_overruns() const;
  void set_has_overruns(bool value);

  private:
  bool _internal_has_overruns() const;
  void _internal_set_has_overruns(bool value);

  public:
  // uint32 event_id = 1;
  bool has_event_id() const;
  void clear_event_id() ;
  ::uint32_t event_id() const;
  void set_event_id(::uint32_t value);

  private:
  ::uint32_t _internal_event_id() const;
  void _internal_set_event_id(::uint32_t value);

  public:
  // uint32 counter_id = 2;
  bool has_counter_id() const;
  void clear_counter_id() ;
  ::uint32_t counter_id() const;
  void set_counter_id(::uint32_t value);

  private:
  ::uint32_t _internal_counter_id() const;
  void _internal_set_counter_id(::uint32_t value);

  public:
  // string event_name = 8;
  bool has_event_name() const;
  void clear_event_name() ;
  const std::string& event_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_name(Arg_&& arg, Args_... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* ptr);

  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(
      const std::string& value);
  std::string* _internal_mutable_event_name();

  public:
  // uint64 event_name_iid = 11;
  bool has_event_name_iid() const;
  void clear_event_name_iid() ;
  ::uint64_t event_name_iid() const;
  void set_event_name_iid(::uint64_t value);

  private:
  ::uint64_t _internal_event_name_iid() const;
  void _internal_set_event_name_iid(::uint64_t value);

  public:
  // string counter_name = 9;
  bool has_counter_name() const;
  void clear_counter_name() ;
  const std::string& counter_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_counter_name(Arg_&& arg, Args_... args);
  std::string* mutable_counter_name();
  PROTOBUF_NODISCARD std::string* release_counter_name();
  void set_allocated_counter_name(std::string* ptr);

  private:
  const std::string& _internal_counter_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_name(
      const std::string& value);
  std::string* _internal_mutable_counter_name();

  public:
  void clear_record_type();
  RecordTypeCase record_type_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.PerfettoMetatrace)
 private:
  class _Internal;
  void set_has_event_id();
  void set_has_counter_id();
  void set_has_event_name();
  void set_has_event_name_iid();
  void set_has_counter_name();

  inline bool has_record_type() const;
  inline void clear_has_record_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg > args_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_InternedString > interned_strings_;
    ::uint64_t event_duration_ns_;
    ::int32_t counter_value_;
    ::uint32_t thread_id_;
    bool has_overruns_;
    union RecordTypeUnion {
      constexpr RecordTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint32_t event_id_;
      ::uint32_t counter_id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
      ::uint64_t event_name_iid_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_name_;
    } record_type_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PerfettoMetatrace_Arg

// string key = 1;
inline bool PerfettoMetatrace_Arg::has_key() const {
  return key_or_interned_key_case() == kKey;
}
inline void PerfettoMetatrace_Arg::set_has_key() {
  _impl_._oneof_case_[0] = kKey;
}
inline void PerfettoMetatrace_Arg::clear_key() {
  if (key_or_interned_key_case() == kKey) {
    _impl_.key_or_interned_key_.key_.Destroy();
    clear_has_key_or_interned_key();
  }
}
inline const std::string& PerfettoMetatrace_Arg::key() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.Arg.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerfettoMetatrace_Arg::set_key(Arg_&& arg,
                                                     Args_... args) {
  if (key_or_interned_key_case() != kKey) {
    clear_key_or_interned_key();

    set_has_key();
    _impl_.key_or_interned_key_.key_.InitDefault();
  }
  _impl_.key_or_interned_key_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.Arg.key)
}
inline std::string* PerfettoMetatrace_Arg::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.Arg.key)
  return _s;
}
inline const std::string& PerfettoMetatrace_Arg::_internal_key() const {
  if (key_or_interned_key_case() != kKey) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.key_or_interned_key_.key_.Get();
}
inline void PerfettoMetatrace_Arg::_internal_set_key(const std::string& value) {
  if (key_or_interned_key_case() != kKey) {
    clear_key_or_interned_key();

    set_has_key();
    _impl_.key_or_interned_key_.key_.InitDefault();
  }


  _impl_.key_or_interned_key_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace_Arg::_internal_mutable_key() {
  if (key_or_interned_key_case() != kKey) {
    clear_key_or_interned_key();

    set_has_key();
    _impl_.key_or_interned_key_.key_.InitDefault();
  }
  return _impl_.key_or_interned_key_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace_Arg::release_key() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.Arg.key)
  if (key_or_interned_key_case() != kKey) {
    return nullptr;
  }
  clear_has_key_or_interned_key();
  return _impl_.key_or_interned_key_.key_.Release();
}
inline void PerfettoMetatrace_Arg::set_allocated_key(std::string* value) {
  if (has_key_or_interned_key()) {
    clear_key_or_interned_key();
  }
  if (value != nullptr) {
    set_has_key();
    _impl_.key_or_interned_key_.key_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.Arg.key)
}

// uint64 key_iid = 3;
inline bool PerfettoMetatrace_Arg::has_key_iid() const {
  return key_or_interned_key_case() == kKeyIid;
}
inline void PerfettoMetatrace_Arg::set_has_key_iid() {
  _impl_._oneof_case_[0] = kKeyIid;
}
inline void PerfettoMetatrace_Arg::clear_key_iid() {
  if (key_or_interned_key_case() == kKeyIid) {
    _impl_.key_or_interned_key_.key_iid_ = ::uint64_t{0u};
    clear_has_key_or_interned_key();
  }
}
inline ::uint64_t PerfettoMetatrace_Arg::key_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.Arg.key_iid)
  return _internal_key_iid();
}
inline void PerfettoMetatrace_Arg::set_key_iid(::uint64_t value) {
  _internal_set_key_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.Arg.key_iid)
}
inline ::uint64_t PerfettoMetatrace_Arg::_internal_key_iid() const {
  if (key_or_interned_key_case() == kKeyIid) {
    return _impl_.key_or_interned_key_.key_iid_;
  }
  return ::uint64_t{0u};
}
inline void PerfettoMetatrace_Arg::_internal_set_key_iid(::uint64_t value) {
  if (key_or_interned_key_case() != kKeyIid) {
    clear_key_or_interned_key();
    set_has_key_iid();
  }
  _impl_.key_or_interned_key_.key_iid_ = value;
}

// string value = 2;
inline bool PerfettoMetatrace_Arg::has_value() const {
  return value_or_interned_value_case() == kValue;
}
inline void PerfettoMetatrace_Arg::set_has_value() {
  _impl_._oneof_case_[1] = kValue;
}
inline void PerfettoMetatrace_Arg::clear_value() {
  if (value_or_interned_value_case() == kValue) {
    _impl_.value_or_interned_value_.value_.Destroy();
    clear_has_value_or_interned_value();
  }
}
inline const std::string& PerfettoMetatrace_Arg::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.Arg.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerfettoMetatrace_Arg::set_value(Arg_&& arg,
                                                     Args_... args) {
  if (value_or_interned_value_case() != kValue) {
    clear_value_or_interned_value();

    set_has_value();
    _impl_.value_or_interned_value_.value_.InitDefault();
  }
  _impl_.value_or_interned_value_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.Arg.value)
}
inline std::string* PerfettoMetatrace_Arg::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.Arg.value)
  return _s;
}
inline const std::string& PerfettoMetatrace_Arg::_internal_value() const {
  if (value_or_interned_value_case() != kValue) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_or_interned_value_.value_.Get();
}
inline void PerfettoMetatrace_Arg::_internal_set_value(const std::string& value) {
  if (value_or_interned_value_case() != kValue) {
    clear_value_or_interned_value();

    set_has_value();
    _impl_.value_or_interned_value_.value_.InitDefault();
  }


  _impl_.value_or_interned_value_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace_Arg::_internal_mutable_value() {
  if (value_or_interned_value_case() != kValue) {
    clear_value_or_interned_value();

    set_has_value();
    _impl_.value_or_interned_value_.value_.InitDefault();
  }
  return _impl_.value_or_interned_value_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace_Arg::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.Arg.value)
  if (value_or_interned_value_case() != kValue) {
    return nullptr;
  }
  clear_has_value_or_interned_value();
  return _impl_.value_or_interned_value_.value_.Release();
}
inline void PerfettoMetatrace_Arg::set_allocated_value(std::string* value) {
  if (has_value_or_interned_value()) {
    clear_value_or_interned_value();
  }
  if (value != nullptr) {
    set_has_value();
    _impl_.value_or_interned_value_.value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.Arg.value)
}

// uint64 value_iid = 4;
inline bool PerfettoMetatrace_Arg::has_value_iid() const {
  return value_or_interned_value_case() == kValueIid;
}
inline void PerfettoMetatrace_Arg::set_has_value_iid() {
  _impl_._oneof_case_[1] = kValueIid;
}
inline void PerfettoMetatrace_Arg::clear_value_iid() {
  if (value_or_interned_value_case() == kValueIid) {
    _impl_.value_or_interned_value_.value_iid_ = ::uint64_t{0u};
    clear_has_value_or_interned_value();
  }
}
inline ::uint64_t PerfettoMetatrace_Arg::value_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.Arg.value_iid)
  return _internal_value_iid();
}
inline void PerfettoMetatrace_Arg::set_value_iid(::uint64_t value) {
  _internal_set_value_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.Arg.value_iid)
}
inline ::uint64_t PerfettoMetatrace_Arg::_internal_value_iid() const {
  if (value_or_interned_value_case() == kValueIid) {
    return _impl_.value_or_interned_value_.value_iid_;
  }
  return ::uint64_t{0u};
}
inline void PerfettoMetatrace_Arg::_internal_set_value_iid(::uint64_t value) {
  if (value_or_interned_value_case() != kValueIid) {
    clear_value_or_interned_value();
    set_has_value_iid();
  }
  _impl_.value_or_interned_value_.value_iid_ = value;
}

inline bool PerfettoMetatrace_Arg::has_key_or_interned_key() const {
  return key_or_interned_key_case() != KEY_OR_INTERNED_KEY_NOT_SET;
}
inline void PerfettoMetatrace_Arg::clear_has_key_or_interned_key() {
  _impl_._oneof_case_[0] = KEY_OR_INTERNED_KEY_NOT_SET;
}
inline bool PerfettoMetatrace_Arg::has_value_or_interned_value() const {
  return value_or_interned_value_case() != VALUE_OR_INTERNED_VALUE_NOT_SET;
}
inline void PerfettoMetatrace_Arg::clear_has_value_or_interned_value() {
  _impl_._oneof_case_[1] = VALUE_OR_INTERNED_VALUE_NOT_SET;
}
inline PerfettoMetatrace_Arg::KeyOrInternedKeyCase PerfettoMetatrace_Arg::key_or_interned_key_case() const {
  return PerfettoMetatrace_Arg::KeyOrInternedKeyCase(_impl_._oneof_case_[0]);
}
inline PerfettoMetatrace_Arg::ValueOrInternedValueCase PerfettoMetatrace_Arg::value_or_interned_value_case() const {
  return PerfettoMetatrace_Arg::ValueOrInternedValueCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// PerfettoMetatrace_InternedString

// optional uint64 iid = 1;
inline bool PerfettoMetatrace_InternedString::has_iid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PerfettoMetatrace_InternedString::clear_iid() {
  _impl_.iid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t PerfettoMetatrace_InternedString::iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.InternedString.iid)
  return _internal_iid();
}
inline void PerfettoMetatrace_InternedString::set_iid(::uint64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.InternedString.iid)
}
inline ::uint64_t PerfettoMetatrace_InternedString::_internal_iid() const {
  return _impl_.iid_;
}
inline void PerfettoMetatrace_InternedString::_internal_set_iid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iid_ = value;
}

// optional string value = 2;
inline bool PerfettoMetatrace_InternedString::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PerfettoMetatrace_InternedString::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfettoMetatrace_InternedString::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.InternedString.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerfettoMetatrace_InternedString::set_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.InternedString.value)
}
inline std::string* PerfettoMetatrace_InternedString::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.InternedString.value)
  return _s;
}
inline const std::string& PerfettoMetatrace_InternedString::_internal_value() const {
  return _impl_.value_.Get();
}
inline void PerfettoMetatrace_InternedString::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace_InternedString::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace_InternedString::release_value() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.InternedString.value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PerfettoMetatrace_InternedString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.InternedString.value)
}

// -------------------------------------------------------------------

// PerfettoMetatrace

// uint32 event_id = 1;
inline bool PerfettoMetatrace::has_event_id() const {
  return record_type_case() == kEventId;
}
inline void PerfettoMetatrace::set_has_event_id() {
  _impl_._oneof_case_[0] = kEventId;
}
inline void PerfettoMetatrace::clear_event_id() {
  if (record_type_case() == kEventId) {
    _impl_.record_type_.event_id_ = 0u;
    clear_has_record_type();
  }
}
inline ::uint32_t PerfettoMetatrace::event_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_id)
  return _internal_event_id();
}
inline void PerfettoMetatrace::set_event_id(::uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_id)
}
inline ::uint32_t PerfettoMetatrace::_internal_event_id() const {
  if (record_type_case() == kEventId) {
    return _impl_.record_type_.event_id_;
  }
  return 0u;
}
inline void PerfettoMetatrace::_internal_set_event_id(::uint32_t value) {
  if (record_type_case() != kEventId) {
    clear_record_type();
    set_has_event_id();
  }
  _impl_.record_type_.event_id_ = value;
}

// uint32 counter_id = 2;
inline bool PerfettoMetatrace::has_counter_id() const {
  return record_type_case() == kCounterId;
}
inline void PerfettoMetatrace::set_has_counter_id() {
  _impl_._oneof_case_[0] = kCounterId;
}
inline void PerfettoMetatrace::clear_counter_id() {
  if (record_type_case() == kCounterId) {
    _impl_.record_type_.counter_id_ = 0u;
    clear_has_record_type();
  }
}
inline ::uint32_t PerfettoMetatrace::counter_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.counter_id)
  return _internal_counter_id();
}
inline void PerfettoMetatrace::set_counter_id(::uint32_t value) {
  _internal_set_counter_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_id)
}
inline ::uint32_t PerfettoMetatrace::_internal_counter_id() const {
  if (record_type_case() == kCounterId) {
    return _impl_.record_type_.counter_id_;
  }
  return 0u;
}
inline void PerfettoMetatrace::_internal_set_counter_id(::uint32_t value) {
  if (record_type_case() != kCounterId) {
    clear_record_type();
    set_has_counter_id();
  }
  _impl_.record_type_.counter_id_ = value;
}

// string event_name = 8;
inline bool PerfettoMetatrace::has_event_name() const {
  return record_type_case() == kEventName;
}
inline void PerfettoMetatrace::set_has_event_name() {
  _impl_._oneof_case_[0] = kEventName;
}
inline void PerfettoMetatrace::clear_event_name() {
  if (record_type_case() == kEventName) {
    _impl_.record_type_.event_name_.Destroy();
    clear_has_record_type();
  }
}
inline const std::string& PerfettoMetatrace::event_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_name)
  return _internal_event_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerfettoMetatrace::set_event_name(Arg_&& arg,
                                                     Args_... args) {
  if (record_type_case() != kEventName) {
    clear_record_type();

    set_has_event_name();
    _impl_.record_type_.event_name_.InitDefault();
  }
  _impl_.record_type_.event_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_name)
}
inline std::string* PerfettoMetatrace::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.event_name)
  return _s;
}
inline const std::string& PerfettoMetatrace::_internal_event_name() const {
  if (record_type_case() != kEventName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.record_type_.event_name_.Get();
}
inline void PerfettoMetatrace::_internal_set_event_name(const std::string& value) {
  if (record_type_case() != kEventName) {
    clear_record_type();

    set_has_event_name();
    _impl_.record_type_.event_name_.InitDefault();
  }


  _impl_.record_type_.event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace::_internal_mutable_event_name() {
  if (record_type_case() != kEventName) {
    clear_record_type();

    set_has_event_name();
    _impl_.record_type_.event_name_.InitDefault();
  }
  return _impl_.record_type_.event_name_.Mutable( GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace::release_event_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.event_name)
  if (record_type_case() != kEventName) {
    return nullptr;
  }
  clear_has_record_type();
  return _impl_.record_type_.event_name_.Release();
}
inline void PerfettoMetatrace::set_allocated_event_name(std::string* value) {
  if (has_record_type()) {
    clear_record_type();
  }
  if (value != nullptr) {
    set_has_event_name();
    _impl_.record_type_.event_name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.event_name)
}

// uint64 event_name_iid = 11;
inline bool PerfettoMetatrace::has_event_name_iid() const {
  return record_type_case() == kEventNameIid;
}
inline void PerfettoMetatrace::set_has_event_name_iid() {
  _impl_._oneof_case_[0] = kEventNameIid;
}
inline void PerfettoMetatrace::clear_event_name_iid() {
  if (record_type_case() == kEventNameIid) {
    _impl_.record_type_.event_name_iid_ = ::uint64_t{0u};
    clear_has_record_type();
  }
}
inline ::uint64_t PerfettoMetatrace::event_name_iid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_name_iid)
  return _internal_event_name_iid();
}
inline void PerfettoMetatrace::set_event_name_iid(::uint64_t value) {
  _internal_set_event_name_iid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_name_iid)
}
inline ::uint64_t PerfettoMetatrace::_internal_event_name_iid() const {
  if (record_type_case() == kEventNameIid) {
    return _impl_.record_type_.event_name_iid_;
  }
  return ::uint64_t{0u};
}
inline void PerfettoMetatrace::_internal_set_event_name_iid(::uint64_t value) {
  if (record_type_case() != kEventNameIid) {
    clear_record_type();
    set_has_event_name_iid();
  }
  _impl_.record_type_.event_name_iid_ = value;
}

// string counter_name = 9;
inline bool PerfettoMetatrace::has_counter_name() const {
  return record_type_case() == kCounterName;
}
inline void PerfettoMetatrace::set_has_counter_name() {
  _impl_._oneof_case_[0] = kCounterName;
}
inline void PerfettoMetatrace::clear_counter_name() {
  if (record_type_case() == kCounterName) {
    _impl_.record_type_.counter_name_.Destroy();
    clear_has_record_type();
  }
}
inline const std::string& PerfettoMetatrace::counter_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.counter_name)
  return _internal_counter_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerfettoMetatrace::set_counter_name(Arg_&& arg,
                                                     Args_... args) {
  if (record_type_case() != kCounterName) {
    clear_record_type();

    set_has_counter_name();
    _impl_.record_type_.counter_name_.InitDefault();
  }
  _impl_.record_type_.counter_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_name)
}
inline std::string* PerfettoMetatrace::mutable_counter_name() {
  std::string* _s = _internal_mutable_counter_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.counter_name)
  return _s;
}
inline const std::string& PerfettoMetatrace::_internal_counter_name() const {
  if (record_type_case() != kCounterName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.record_type_.counter_name_.Get();
}
inline void PerfettoMetatrace::_internal_set_counter_name(const std::string& value) {
  if (record_type_case() != kCounterName) {
    clear_record_type();

    set_has_counter_name();
    _impl_.record_type_.counter_name_.InitDefault();
  }


  _impl_.record_type_.counter_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace::_internal_mutable_counter_name() {
  if (record_type_case() != kCounterName) {
    clear_record_type();

    set_has_counter_name();
    _impl_.record_type_.counter_name_.InitDefault();
  }
  return _impl_.record_type_.counter_name_.Mutable( GetArenaForAllocation());
}
inline std::string* PerfettoMetatrace::release_counter_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.PerfettoMetatrace.counter_name)
  if (record_type_case() != kCounterName) {
    return nullptr;
  }
  clear_has_record_type();
  return _impl_.record_type_.counter_name_.Release();
}
inline void PerfettoMetatrace::set_allocated_counter_name(std::string* value) {
  if (has_record_type()) {
    clear_record_type();
  }
  if (value != nullptr) {
    set_has_counter_name();
    _impl_.record_type_.counter_name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.PerfettoMetatrace.counter_name)
}

// optional uint64 event_duration_ns = 3;
inline bool PerfettoMetatrace::has_event_duration_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PerfettoMetatrace::clear_event_duration_ns() {
  _impl_.event_duration_ns_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t PerfettoMetatrace::event_duration_ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.event_duration_ns)
  return _internal_event_duration_ns();
}
inline void PerfettoMetatrace::set_event_duration_ns(::uint64_t value) {
  _internal_set_event_duration_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.event_duration_ns)
}
inline ::uint64_t PerfettoMetatrace::_internal_event_duration_ns() const {
  return _impl_.event_duration_ns_;
}
inline void PerfettoMetatrace::_internal_set_event_duration_ns(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_duration_ns_ = value;
}

// optional int32 counter_value = 4;
inline bool PerfettoMetatrace::has_counter_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PerfettoMetatrace::clear_counter_value() {
  _impl_.counter_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PerfettoMetatrace::counter_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.counter_value)
  return _internal_counter_value();
}
inline void PerfettoMetatrace::set_counter_value(::int32_t value) {
  _internal_set_counter_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.counter_value)
}
inline ::int32_t PerfettoMetatrace::_internal_counter_value() const {
  return _impl_.counter_value_;
}
inline void PerfettoMetatrace::_internal_set_counter_value(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.counter_value_ = value;
}

// optional uint32 thread_id = 5;
inline bool PerfettoMetatrace::has_thread_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PerfettoMetatrace::clear_thread_id() {
  _impl_.thread_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PerfettoMetatrace::thread_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.thread_id)
  return _internal_thread_id();
}
inline void PerfettoMetatrace::set_thread_id(::uint32_t value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.thread_id)
}
inline ::uint32_t PerfettoMetatrace::_internal_thread_id() const {
  return _impl_.thread_id_;
}
inline void PerfettoMetatrace::_internal_set_thread_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.thread_id_ = value;
}

// optional bool has_overruns = 6;
inline bool PerfettoMetatrace::has_has_overruns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PerfettoMetatrace::clear_has_overruns() {
  _impl_.has_overruns_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool PerfettoMetatrace::has_overruns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.has_overruns)
  return _internal_has_overruns();
}
inline void PerfettoMetatrace::set_has_overruns(bool value) {
  _internal_set_has_overruns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.PerfettoMetatrace.has_overruns)
}
inline bool PerfettoMetatrace::_internal_has_overruns() const {
  return _impl_.has_overruns_;
}
inline void PerfettoMetatrace::_internal_set_has_overruns(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.has_overruns_ = value;
}

// repeated .perfetto.protos.PerfettoMetatrace.Arg args = 7;
inline int PerfettoMetatrace::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int PerfettoMetatrace::args_size() const {
  return _internal_args_size();
}
inline void PerfettoMetatrace::clear_args() {
  _internal_mutable_args()->Clear();
}
inline ::perfetto::protos::PerfettoMetatrace_Arg* PerfettoMetatrace::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.args)
  return _internal_mutable_args()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >*
PerfettoMetatrace::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfettoMetatrace.args)
  return _internal_mutable_args();
}
inline const ::perfetto::protos::PerfettoMetatrace_Arg& PerfettoMetatrace::_internal_args(int index) const {
  return _internal_args().Get(index);
}
inline const ::perfetto::protos::PerfettoMetatrace_Arg& PerfettoMetatrace::args(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.args)
  return _internal_args(index);
}
inline ::perfetto::protos::PerfettoMetatrace_Arg* PerfettoMetatrace::_internal_add_args() {
  return _internal_mutable_args()->Add();
}
inline ::perfetto::protos::PerfettoMetatrace_Arg* PerfettoMetatrace::add_args() {
  ::perfetto::protos::PerfettoMetatrace_Arg* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfettoMetatrace.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_Arg >&
PerfettoMetatrace::args() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfettoMetatrace.args)
  return _internal_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_Arg>&
PerfettoMetatrace::_internal_args() const {
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_Arg>*
PerfettoMetatrace::_internal_mutable_args() {
  return &_impl_.args_;
}

// repeated .perfetto.protos.PerfettoMetatrace.InternedString interned_strings = 10;
inline int PerfettoMetatrace::_internal_interned_strings_size() const {
  return _impl_.interned_strings_.size();
}
inline int PerfettoMetatrace::interned_strings_size() const {
  return _internal_interned_strings_size();
}
inline void PerfettoMetatrace::clear_interned_strings() {
  _internal_mutable_interned_strings()->Clear();
}
inline ::perfetto::protos::PerfettoMetatrace_InternedString* PerfettoMetatrace::mutable_interned_strings(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.PerfettoMetatrace.interned_strings)
  return _internal_mutable_interned_strings()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_InternedString >*
PerfettoMetatrace::mutable_interned_strings() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.PerfettoMetatrace.interned_strings)
  return _internal_mutable_interned_strings();
}
inline const ::perfetto::protos::PerfettoMetatrace_InternedString& PerfettoMetatrace::_internal_interned_strings(int index) const {
  return _internal_interned_strings().Get(index);
}
inline const ::perfetto::protos::PerfettoMetatrace_InternedString& PerfettoMetatrace::interned_strings(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.PerfettoMetatrace.interned_strings)
  return _internal_interned_strings(index);
}
inline ::perfetto::protos::PerfettoMetatrace_InternedString* PerfettoMetatrace::_internal_add_interned_strings() {
  return _internal_mutable_interned_strings()->Add();
}
inline ::perfetto::protos::PerfettoMetatrace_InternedString* PerfettoMetatrace::add_interned_strings() {
  ::perfetto::protos::PerfettoMetatrace_InternedString* _add = _internal_add_interned_strings();
  // @@protoc_insertion_point(field_add:perfetto.protos.PerfettoMetatrace.interned_strings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::PerfettoMetatrace_InternedString >&
PerfettoMetatrace::interned_strings() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.PerfettoMetatrace.interned_strings)
  return _internal_interned_strings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_InternedString>&
PerfettoMetatrace::_internal_interned_strings() const {
  return _impl_.interned_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::PerfettoMetatrace_InternedString>*
PerfettoMetatrace::_internal_mutable_interned_strings() {
  return &_impl_.interned_strings_;
}

inline bool PerfettoMetatrace::has_record_type() const {
  return record_type_case() != RECORD_TYPE_NOT_SET;
}
inline void PerfettoMetatrace::clear_has_record_type() {
  _impl_._oneof_case_[0] = RECORD_TYPE_NOT_SET;
}
inline PerfettoMetatrace::RecordTypeCase PerfettoMetatrace::record_type_case() const {
  return PerfettoMetatrace::RecordTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fperfetto_2fperfetto_5fmetatrace_2eproto_2epb_2eh
