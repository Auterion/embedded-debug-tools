// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/system_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto;
namespace perfetto {
namespace protos {
class SystemInfo;
struct SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
class Utsname;
struct UtsnameDefaultTypeInternal;
extern UtsnameDefaultTypeInternal _Utsname_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::SystemInfo* Arena::CreateMaybeMessage<::perfetto::protos::SystemInfo>(Arena*);
template <>
::perfetto::protos::Utsname* Arena::CreateMaybeMessage<::perfetto::protos::Utsname>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class Utsname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Utsname) */ {
 public:
  inline Utsname() : Utsname(nullptr) {}
  ~Utsname() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Utsname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Utsname(const Utsname& from);
  Utsname(Utsname&& from) noexcept
    : Utsname() {
    *this = ::std::move(from);
  }

  inline Utsname& operator=(const Utsname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Utsname& operator=(Utsname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Utsname& default_instance() {
    return *internal_default_instance();
  }
  static inline const Utsname* internal_default_instance() {
    return reinterpret_cast<const Utsname*>(
               &_Utsname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Utsname& a, Utsname& b) {
    a.Swap(&b);
  }
  inline void Swap(Utsname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Utsname* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Utsname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Utsname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Utsname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Utsname& from) {
    Utsname::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Utsname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Utsname";
  }
  protected:
  explicit Utsname(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysnameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kReleaseFieldNumber = 3,
    kMachineFieldNumber = 4,
  };
  // optional string sysname = 1;
  bool has_sysname() const;
  void clear_sysname() ;
  const std::string& sysname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sysname(Arg_&& arg, Args_... args);
  std::string* mutable_sysname();
  PROTOBUF_NODISCARD std::string* release_sysname();
  void set_allocated_sysname(std::string* ptr);

  private:
  const std::string& _internal_sysname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sysname(
      const std::string& value);
  std::string* _internal_mutable_sysname();

  public:
  // optional string version = 2;
  bool has_version() const;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // optional string release = 3;
  bool has_release() const;
  void clear_release() ;
  const std::string& release() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_release(Arg_&& arg, Args_... args);
  std::string* mutable_release();
  PROTOBUF_NODISCARD std::string* release_release();
  void set_allocated_release(std::string* ptr);

  private:
  const std::string& _internal_release() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_release(
      const std::string& value);
  std::string* _internal_mutable_release();

  public:
  // optional string machine = 4;
  bool has_machine() const;
  void clear_machine() ;
  const std::string& machine() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_machine(Arg_&& arg, Args_... args);
  std::string* mutable_machine();
  PROTOBUF_NODISCARD std::string* release_machine();
  void set_allocated_machine(std::string* ptr);

  private:
  const std::string& _internal_machine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine(
      const std::string& value);
  std::string* _internal_mutable_machine();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Utsname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sysname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr release_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto;
};// -------------------------------------------------------------------

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  ~SystemInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SystemInfo& from) {
    SystemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAndroidBuildFingerprintFieldNumber = 2,
    kTracingServiceVersionFieldNumber = 4,
    kUtsnameFieldNumber = 1,
    kHzFieldNumber = 3,
    kAndroidSdkVersionFieldNumber = 5,
    kPageSizeFieldNumber = 6,
  };
  // optional string android_build_fingerprint = 2;
  bool has_android_build_fingerprint() const;
  void clear_android_build_fingerprint() ;
  const std::string& android_build_fingerprint() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_android_build_fingerprint(Arg_&& arg, Args_... args);
  std::string* mutable_android_build_fingerprint();
  PROTOBUF_NODISCARD std::string* release_android_build_fingerprint();
  void set_allocated_android_build_fingerprint(std::string* ptr);

  private:
  const std::string& _internal_android_build_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_android_build_fingerprint(
      const std::string& value);
  std::string* _internal_mutable_android_build_fingerprint();

  public:
  // optional string tracing_service_version = 4;
  bool has_tracing_service_version() const;
  void clear_tracing_service_version() ;
  const std::string& tracing_service_version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracing_service_version(Arg_&& arg, Args_... args);
  std::string* mutable_tracing_service_version();
  PROTOBUF_NODISCARD std::string* release_tracing_service_version();
  void set_allocated_tracing_service_version(std::string* ptr);

  private:
  const std::string& _internal_tracing_service_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracing_service_version(
      const std::string& value);
  std::string* _internal_mutable_tracing_service_version();

  public:
  // optional .perfetto.protos.Utsname utsname = 1;
  bool has_utsname() const;
  void clear_utsname() ;
  const ::perfetto::protos::Utsname& utsname() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Utsname* release_utsname();
  ::perfetto::protos::Utsname* mutable_utsname();
  void set_allocated_utsname(::perfetto::protos::Utsname* utsname);
  private:
  const ::perfetto::protos::Utsname& _internal_utsname() const;
  ::perfetto::protos::Utsname* _internal_mutable_utsname();
  public:
  void unsafe_arena_set_allocated_utsname(
      ::perfetto::protos::Utsname* utsname);
  ::perfetto::protos::Utsname* unsafe_arena_release_utsname();
  // optional int64 hz = 3;
  bool has_hz() const;
  void clear_hz() ;
  ::int64_t hz() const;
  void set_hz(::int64_t value);

  private:
  ::int64_t _internal_hz() const;
  void _internal_set_hz(::int64_t value);

  public:
  // optional uint64 android_sdk_version = 5;
  bool has_android_sdk_version() const;
  void clear_android_sdk_version() ;
  ::uint64_t android_sdk_version() const;
  void set_android_sdk_version(::uint64_t value);

  private:
  ::uint64_t _internal_android_sdk_version() const;
  void _internal_set_android_sdk_version(::uint64_t value);

  public:
  // optional uint32 page_size = 6;
  bool has_page_size() const;
  void clear_page_size() ;
  ::uint32_t page_size() const;
  void set_page_size(::uint32_t value);

  private:
  ::uint32_t _internal_page_size() const;
  void _internal_set_page_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr android_build_fingerprint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracing_service_version_;
    ::perfetto::protos::Utsname* utsname_;
    ::int64_t hz_;
    ::uint64_t android_sdk_version_;
    ::uint32_t page_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Utsname

// optional string sysname = 1;
inline bool Utsname::has_sysname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Utsname::clear_sysname() {
  _impl_.sysname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Utsname::sysname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.sysname)
  return _internal_sysname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utsname::set_sysname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sysname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.sysname)
}
inline std::string* Utsname::mutable_sysname() {
  std::string* _s = _internal_mutable_sysname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.sysname)
  return _s;
}
inline const std::string& Utsname::_internal_sysname() const {
  return _impl_.sysname_.Get();
}
inline void Utsname::_internal_set_sysname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.sysname_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_sysname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sysname_.Mutable( GetArenaForAllocation());
}
inline std::string* Utsname::release_sysname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.sysname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sysname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sysname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Utsname::set_allocated_sysname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sysname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sysname_.IsDefault()) {
          _impl_.sysname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.sysname)
}

// optional string version = 2;
inline bool Utsname::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Utsname::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Utsname::version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utsname::set_version(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.version)
}
inline std::string* Utsname::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.version)
  return _s;
}
inline const std::string& Utsname::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Utsname::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* Utsname::release_version() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.version)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.version_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Utsname::set_allocated_version(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.version)
}

// optional string release = 3;
inline bool Utsname::has_release() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Utsname::clear_release() {
  _impl_.release_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Utsname::release() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.release)
  return _internal_release();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utsname::set_release(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.release_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.release)
}
inline std::string* Utsname::mutable_release() {
  std::string* _s = _internal_mutable_release();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.release)
  return _s;
}
inline const std::string& Utsname::_internal_release() const {
  return _impl_.release_.Get();
}
inline void Utsname::_internal_set_release(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.release_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_release() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.release_.Mutable( GetArenaForAllocation());
}
inline std::string* Utsname::release_release() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.release)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.release_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.release_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Utsname::set_allocated_release(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.release_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.release_.IsDefault()) {
          _impl_.release_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.release)
}

// optional string machine = 4;
inline bool Utsname::has_machine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Utsname::clear_machine() {
  _impl_.machine_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Utsname::machine() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Utsname.machine)
  return _internal_machine();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Utsname::set_machine(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.machine_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.Utsname.machine)
}
inline std::string* Utsname::mutable_machine() {
  std::string* _s = _internal_mutable_machine();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.Utsname.machine)
  return _s;
}
inline const std::string& Utsname::_internal_machine() const {
  return _impl_.machine_.Get();
}
inline void Utsname::_internal_set_machine(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.machine_.Set(value, GetArenaForAllocation());
}
inline std::string* Utsname::_internal_mutable_machine() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.machine_.Mutable( GetArenaForAllocation());
}
inline std::string* Utsname::release_machine() {
  // @@protoc_insertion_point(field_release:perfetto.protos.Utsname.machine)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.machine_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.machine_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Utsname::set_allocated_machine(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.machine_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.machine_.IsDefault()) {
          _impl_.machine_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.Utsname.machine)
}

// -------------------------------------------------------------------

// SystemInfo

// optional .perfetto.protos.Utsname utsname = 1;
inline bool SystemInfo::has_utsname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.utsname_ != nullptr);
  return value;
}
inline void SystemInfo::clear_utsname() {
  if (_impl_.utsname_ != nullptr) _impl_.utsname_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::perfetto::protos::Utsname& SystemInfo::_internal_utsname() const {
  const ::perfetto::protos::Utsname* p = _impl_.utsname_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::Utsname&>(
      ::perfetto::protos::_Utsname_default_instance_);
}
inline const ::perfetto::protos::Utsname& SystemInfo::utsname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.utsname)
  return _internal_utsname();
}
inline void SystemInfo::unsafe_arena_set_allocated_utsname(
    ::perfetto::protos::Utsname* utsname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.utsname_);
  }
  _impl_.utsname_ = utsname;
  if (utsname) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.SystemInfo.utsname)
}
inline ::perfetto::protos::Utsname* SystemInfo::release_utsname() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::Utsname* temp = _impl_.utsname_;
  _impl_.utsname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::Utsname* SystemInfo::unsafe_arena_release_utsname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SystemInfo.utsname)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::perfetto::protos::Utsname* temp = _impl_.utsname_;
  _impl_.utsname_ = nullptr;
  return temp;
}
inline ::perfetto::protos::Utsname* SystemInfo::_internal_mutable_utsname() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.utsname_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::Utsname>(GetArenaForAllocation());
    _impl_.utsname_ = p;
  }
  return _impl_.utsname_;
}
inline ::perfetto::protos::Utsname* SystemInfo::mutable_utsname() {
  ::perfetto::protos::Utsname* _msg = _internal_mutable_utsname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SystemInfo.utsname)
  return _msg;
}
inline void SystemInfo::set_allocated_utsname(::perfetto::protos::Utsname* utsname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.utsname_;
  }
  if (utsname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(utsname);
    if (message_arena != submessage_arena) {
      utsname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utsname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.utsname_ = utsname;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SystemInfo.utsname)
}

// optional string android_build_fingerprint = 2;
inline bool SystemInfo::has_android_build_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SystemInfo::clear_android_build_fingerprint() {
  _impl_.android_build_fingerprint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemInfo::android_build_fingerprint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.android_build_fingerprint)
  return _internal_android_build_fingerprint();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemInfo::set_android_build_fingerprint(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.android_build_fingerprint_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.android_build_fingerprint)
}
inline std::string* SystemInfo::mutable_android_build_fingerprint() {
  std::string* _s = _internal_mutable_android_build_fingerprint();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SystemInfo.android_build_fingerprint)
  return _s;
}
inline const std::string& SystemInfo::_internal_android_build_fingerprint() const {
  return _impl_.android_build_fingerprint_.Get();
}
inline void SystemInfo::_internal_set_android_build_fingerprint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.android_build_fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_android_build_fingerprint() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.android_build_fingerprint_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemInfo::release_android_build_fingerprint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SystemInfo.android_build_fingerprint)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.android_build_fingerprint_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.android_build_fingerprint_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SystemInfo::set_allocated_android_build_fingerprint(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.android_build_fingerprint_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.android_build_fingerprint_.IsDefault()) {
          _impl_.android_build_fingerprint_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SystemInfo.android_build_fingerprint)
}

// optional int64 hz = 3;
inline bool SystemInfo::has_hz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SystemInfo::clear_hz() {
  _impl_.hz_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t SystemInfo::hz() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.hz)
  return _internal_hz();
}
inline void SystemInfo::set_hz(::int64_t value) {
  _internal_set_hz(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.hz)
}
inline ::int64_t SystemInfo::_internal_hz() const {
  return _impl_.hz_;
}
inline void SystemInfo::_internal_set_hz(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hz_ = value;
}

// optional string tracing_service_version = 4;
inline bool SystemInfo::has_tracing_service_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SystemInfo::clear_tracing_service_version() {
  _impl_.tracing_service_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SystemInfo::tracing_service_version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.tracing_service_version)
  return _internal_tracing_service_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemInfo::set_tracing_service_version(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tracing_service_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.tracing_service_version)
}
inline std::string* SystemInfo::mutable_tracing_service_version() {
  std::string* _s = _internal_mutable_tracing_service_version();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SystemInfo.tracing_service_version)
  return _s;
}
inline const std::string& SystemInfo::_internal_tracing_service_version() const {
  return _impl_.tracing_service_version_.Get();
}
inline void SystemInfo::_internal_set_tracing_service_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.tracing_service_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_tracing_service_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.tracing_service_version_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemInfo::release_tracing_service_version() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SystemInfo.tracing_service_version)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.tracing_service_version_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tracing_service_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SystemInfo::set_allocated_tracing_service_version(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tracing_service_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tracing_service_version_.IsDefault()) {
          _impl_.tracing_service_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SystemInfo.tracing_service_version)
}

// optional uint64 android_sdk_version = 5;
inline bool SystemInfo::has_android_sdk_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SystemInfo::clear_android_sdk_version() {
  _impl_.android_sdk_version_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t SystemInfo::android_sdk_version() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.android_sdk_version)
  return _internal_android_sdk_version();
}
inline void SystemInfo::set_android_sdk_version(::uint64_t value) {
  _internal_set_android_sdk_version(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.android_sdk_version)
}
inline ::uint64_t SystemInfo::_internal_android_sdk_version() const {
  return _impl_.android_sdk_version_;
}
inline void SystemInfo::_internal_set_android_sdk_version(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.android_sdk_version_ = value;
}

// optional uint32 page_size = 6;
inline bool SystemInfo::has_page_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SystemInfo::clear_page_size() {
  _impl_.page_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SystemInfo::page_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SystemInfo.page_size)
  return _internal_page_size();
}
inline void SystemInfo::set_page_size(::uint32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SystemInfo.page_size)
}
inline ::uint32_t SystemInfo::_internal_page_size() const {
  return _impl_.page_size_;
}
inline void SystemInfo::_internal_set_page_size(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.page_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fsystem_5finfo_2eproto_2epb_2eh
