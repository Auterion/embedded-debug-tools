// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/trusty.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
namespace perfetto {
namespace protos {
class TrustyEnqueueNopFtraceEvent;
struct TrustyEnqueueNopFtraceEventDefaultTypeInternal;
extern TrustyEnqueueNopFtraceEventDefaultTypeInternal _TrustyEnqueueNopFtraceEvent_default_instance_;
class TrustyIpcConnectEndFtraceEvent;
struct TrustyIpcConnectEndFtraceEventDefaultTypeInternal;
extern TrustyIpcConnectEndFtraceEventDefaultTypeInternal _TrustyIpcConnectEndFtraceEvent_default_instance_;
class TrustyIpcConnectFtraceEvent;
struct TrustyIpcConnectFtraceEventDefaultTypeInternal;
extern TrustyIpcConnectFtraceEventDefaultTypeInternal _TrustyIpcConnectFtraceEvent_default_instance_;
class TrustyIpcHandleEventFtraceEvent;
struct TrustyIpcHandleEventFtraceEventDefaultTypeInternal;
extern TrustyIpcHandleEventFtraceEventDefaultTypeInternal _TrustyIpcHandleEventFtraceEvent_default_instance_;
class TrustyIpcPollFtraceEvent;
struct TrustyIpcPollFtraceEventDefaultTypeInternal;
extern TrustyIpcPollFtraceEventDefaultTypeInternal _TrustyIpcPollFtraceEvent_default_instance_;
class TrustyIpcReadEndFtraceEvent;
struct TrustyIpcReadEndFtraceEventDefaultTypeInternal;
extern TrustyIpcReadEndFtraceEventDefaultTypeInternal _TrustyIpcReadEndFtraceEvent_default_instance_;
class TrustyIpcReadFtraceEvent;
struct TrustyIpcReadFtraceEventDefaultTypeInternal;
extern TrustyIpcReadFtraceEventDefaultTypeInternal _TrustyIpcReadFtraceEvent_default_instance_;
class TrustyIpcRxFtraceEvent;
struct TrustyIpcRxFtraceEventDefaultTypeInternal;
extern TrustyIpcRxFtraceEventDefaultTypeInternal _TrustyIpcRxFtraceEvent_default_instance_;
class TrustyIpcWriteFtraceEvent;
struct TrustyIpcWriteFtraceEventDefaultTypeInternal;
extern TrustyIpcWriteFtraceEventDefaultTypeInternal _TrustyIpcWriteFtraceEvent_default_instance_;
class TrustyIrqFtraceEvent;
struct TrustyIrqFtraceEventDefaultTypeInternal;
extern TrustyIrqFtraceEventDefaultTypeInternal _TrustyIrqFtraceEvent_default_instance_;
class TrustyReclaimMemoryDoneFtraceEvent;
struct TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal;
extern TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal _TrustyReclaimMemoryDoneFtraceEvent_default_instance_;
class TrustyReclaimMemoryFtraceEvent;
struct TrustyReclaimMemoryFtraceEventDefaultTypeInternal;
extern TrustyReclaimMemoryFtraceEventDefaultTypeInternal _TrustyReclaimMemoryFtraceEvent_default_instance_;
class TrustyShareMemoryDoneFtraceEvent;
struct TrustyShareMemoryDoneFtraceEventDefaultTypeInternal;
extern TrustyShareMemoryDoneFtraceEventDefaultTypeInternal _TrustyShareMemoryDoneFtraceEvent_default_instance_;
class TrustyShareMemoryFtraceEvent;
struct TrustyShareMemoryFtraceEventDefaultTypeInternal;
extern TrustyShareMemoryFtraceEventDefaultTypeInternal _TrustyShareMemoryFtraceEvent_default_instance_;
class TrustySmcDoneFtraceEvent;
struct TrustySmcDoneFtraceEventDefaultTypeInternal;
extern TrustySmcDoneFtraceEventDefaultTypeInternal _TrustySmcDoneFtraceEvent_default_instance_;
class TrustySmcFtraceEvent;
struct TrustySmcFtraceEventDefaultTypeInternal;
extern TrustySmcFtraceEventDefaultTypeInternal _TrustySmcFtraceEvent_default_instance_;
class TrustyStdCall32DoneFtraceEvent;
struct TrustyStdCall32DoneFtraceEventDefaultTypeInternal;
extern TrustyStdCall32DoneFtraceEventDefaultTypeInternal _TrustyStdCall32DoneFtraceEvent_default_instance_;
class TrustyStdCall32FtraceEvent;
struct TrustyStdCall32FtraceEventDefaultTypeInternal;
extern TrustyStdCall32FtraceEventDefaultTypeInternal _TrustyStdCall32FtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::TrustyEnqueueNopFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyEnqueueNopFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcConnectEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcConnectEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcConnectFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcConnectFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcHandleEventFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcHandleEventFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcPollFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcPollFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcReadEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcReadEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcReadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcReadFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcRxFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcRxFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIpcWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIpcWriteFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyIrqFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyIrqFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyReclaimMemoryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyReclaimMemoryFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyShareMemoryDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyShareMemoryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyShareMemoryFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustySmcDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustySmcDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustySmcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustySmcFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyStdCall32DoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyStdCall32DoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::TrustyStdCall32FtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrustyStdCall32FtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class TrustySmcFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustySmcFtraceEvent) */ {
 public:
  inline TrustySmcFtraceEvent() : TrustySmcFtraceEvent(nullptr) {}
  ~TrustySmcFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustySmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustySmcFtraceEvent(const TrustySmcFtraceEvent& from);
  TrustySmcFtraceEvent(TrustySmcFtraceEvent&& from) noexcept
    : TrustySmcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustySmcFtraceEvent& operator=(const TrustySmcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustySmcFtraceEvent& operator=(TrustySmcFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustySmcFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustySmcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustySmcFtraceEvent*>(
               &_TrustySmcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrustySmcFtraceEvent& a, TrustySmcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustySmcFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustySmcFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustySmcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustySmcFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustySmcFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustySmcFtraceEvent& from) {
    TrustySmcFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustySmcFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustySmcFtraceEvent";
  }
  protected:
  explicit TrustySmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kR0FieldNumber = 1,
    kR1FieldNumber = 2,
    kR2FieldNumber = 3,
    kR3FieldNumber = 4,
  };
  // optional uint64 r0 = 1;
  bool has_r0() const;
  void clear_r0() ;
  ::uint64_t r0() const;
  void set_r0(::uint64_t value);

  private:
  ::uint64_t _internal_r0() const;
  void _internal_set_r0(::uint64_t value);

  public:
  // optional uint64 r1 = 2;
  bool has_r1() const;
  void clear_r1() ;
  ::uint64_t r1() const;
  void set_r1(::uint64_t value);

  private:
  ::uint64_t _internal_r1() const;
  void _internal_set_r1(::uint64_t value);

  public:
  // optional uint64 r2 = 3;
  bool has_r2() const;
  void clear_r2() ;
  ::uint64_t r2() const;
  void set_r2(::uint64_t value);

  private:
  ::uint64_t _internal_r2() const;
  void _internal_set_r2(::uint64_t value);

  public:
  // optional uint64 r3 = 4;
  bool has_r3() const;
  void clear_r3() ;
  ::uint64_t r3() const;
  void set_r3(::uint64_t value);

  private:
  ::uint64_t _internal_r3() const;
  void _internal_set_r3(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustySmcFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t r0_;
    ::uint64_t r1_;
    ::uint64_t r2_;
    ::uint64_t r3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustySmcDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustySmcDoneFtraceEvent) */ {
 public:
  inline TrustySmcDoneFtraceEvent() : TrustySmcDoneFtraceEvent(nullptr) {}
  ~TrustySmcDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustySmcDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustySmcDoneFtraceEvent(const TrustySmcDoneFtraceEvent& from);
  TrustySmcDoneFtraceEvent(TrustySmcDoneFtraceEvent&& from) noexcept
    : TrustySmcDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustySmcDoneFtraceEvent& operator=(const TrustySmcDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustySmcDoneFtraceEvent& operator=(TrustySmcDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustySmcDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustySmcDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustySmcDoneFtraceEvent*>(
               &_TrustySmcDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrustySmcDoneFtraceEvent& a, TrustySmcDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustySmcDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustySmcDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustySmcDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustySmcDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustySmcDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustySmcDoneFtraceEvent& from) {
    TrustySmcDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustySmcDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustySmcDoneFtraceEvent";
  }
  protected:
  explicit TrustySmcDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // optional uint64 ret = 1;
  bool has_ret() const;
  void clear_ret() ;
  ::uint64_t ret() const;
  void set_ret(::uint64_t value);

  private:
  ::uint64_t _internal_ret() const;
  void _internal_set_ret(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustySmcDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyStdCall32FtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyStdCall32FtraceEvent) */ {
 public:
  inline TrustyStdCall32FtraceEvent() : TrustyStdCall32FtraceEvent(nullptr) {}
  ~TrustyStdCall32FtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyStdCall32FtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyStdCall32FtraceEvent(const TrustyStdCall32FtraceEvent& from);
  TrustyStdCall32FtraceEvent(TrustyStdCall32FtraceEvent&& from) noexcept
    : TrustyStdCall32FtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyStdCall32FtraceEvent& operator=(const TrustyStdCall32FtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyStdCall32FtraceEvent& operator=(TrustyStdCall32FtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyStdCall32FtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyStdCall32FtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyStdCall32FtraceEvent*>(
               &_TrustyStdCall32FtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrustyStdCall32FtraceEvent& a, TrustyStdCall32FtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyStdCall32FtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyStdCall32FtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyStdCall32FtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyStdCall32FtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyStdCall32FtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyStdCall32FtraceEvent& from) {
    TrustyStdCall32FtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyStdCall32FtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyStdCall32FtraceEvent";
  }
  protected:
  explicit TrustyStdCall32FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kR0FieldNumber = 1,
    kR1FieldNumber = 2,
    kR2FieldNumber = 3,
    kR3FieldNumber = 4,
  };
  // optional uint64 r0 = 1;
  bool has_r0() const;
  void clear_r0() ;
  ::uint64_t r0() const;
  void set_r0(::uint64_t value);

  private:
  ::uint64_t _internal_r0() const;
  void _internal_set_r0(::uint64_t value);

  public:
  // optional uint64 r1 = 2;
  bool has_r1() const;
  void clear_r1() ;
  ::uint64_t r1() const;
  void set_r1(::uint64_t value);

  private:
  ::uint64_t _internal_r1() const;
  void _internal_set_r1(::uint64_t value);

  public:
  // optional uint64 r2 = 3;
  bool has_r2() const;
  void clear_r2() ;
  ::uint64_t r2() const;
  void set_r2(::uint64_t value);

  private:
  ::uint64_t _internal_r2() const;
  void _internal_set_r2(::uint64_t value);

  public:
  // optional uint64 r3 = 4;
  bool has_r3() const;
  void clear_r3() ;
  ::uint64_t r3() const;
  void set_r3(::uint64_t value);

  private:
  ::uint64_t _internal_r3() const;
  void _internal_set_r3(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyStdCall32FtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t r0_;
    ::uint64_t r1_;
    ::uint64_t r2_;
    ::uint64_t r3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyStdCall32DoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyStdCall32DoneFtraceEvent) */ {
 public:
  inline TrustyStdCall32DoneFtraceEvent() : TrustyStdCall32DoneFtraceEvent(nullptr) {}
  ~TrustyStdCall32DoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyStdCall32DoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyStdCall32DoneFtraceEvent(const TrustyStdCall32DoneFtraceEvent& from);
  TrustyStdCall32DoneFtraceEvent(TrustyStdCall32DoneFtraceEvent&& from) noexcept
    : TrustyStdCall32DoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyStdCall32DoneFtraceEvent& operator=(const TrustyStdCall32DoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyStdCall32DoneFtraceEvent& operator=(TrustyStdCall32DoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyStdCall32DoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyStdCall32DoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyStdCall32DoneFtraceEvent*>(
               &_TrustyStdCall32DoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrustyStdCall32DoneFtraceEvent& a, TrustyStdCall32DoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyStdCall32DoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyStdCall32DoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyStdCall32DoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyStdCall32DoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyStdCall32DoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyStdCall32DoneFtraceEvent& from) {
    TrustyStdCall32DoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyStdCall32DoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyStdCall32DoneFtraceEvent";
  }
  protected:
  explicit TrustyStdCall32DoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // optional int64 ret = 1;
  bool has_ret() const;
  void clear_ret() ;
  ::int64_t ret() const;
  void set_ret(::int64_t value);

  private:
  ::int64_t _internal_ret() const;
  void _internal_set_ret(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyShareMemoryFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyShareMemoryFtraceEvent) */ {
 public:
  inline TrustyShareMemoryFtraceEvent() : TrustyShareMemoryFtraceEvent(nullptr) {}
  ~TrustyShareMemoryFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyShareMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyShareMemoryFtraceEvent(const TrustyShareMemoryFtraceEvent& from);
  TrustyShareMemoryFtraceEvent(TrustyShareMemoryFtraceEvent&& from) noexcept
    : TrustyShareMemoryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyShareMemoryFtraceEvent& operator=(const TrustyShareMemoryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyShareMemoryFtraceEvent& operator=(TrustyShareMemoryFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyShareMemoryFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyShareMemoryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyShareMemoryFtraceEvent*>(
               &_TrustyShareMemoryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrustyShareMemoryFtraceEvent& a, TrustyShareMemoryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyShareMemoryFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyShareMemoryFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyShareMemoryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyShareMemoryFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyShareMemoryFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyShareMemoryFtraceEvent& from) {
    TrustyShareMemoryFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyShareMemoryFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyShareMemoryFtraceEvent";
  }
  protected:
  explicit TrustyShareMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLenFieldNumber = 1,
    kLendFieldNumber = 2,
    kNentsFieldNumber = 3,
  };
  // optional uint64 len = 1;
  bool has_len() const;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // optional uint32 lend = 2;
  bool has_lend() const;
  void clear_lend() ;
  ::uint32_t lend() const;
  void set_lend(::uint32_t value);

  private:
  ::uint32_t _internal_lend() const;
  void _internal_set_lend(::uint32_t value);

  public:
  // optional uint32 nents = 3;
  bool has_nents() const;
  void clear_nents() ;
  ::uint32_t nents() const;
  void set_nents(::uint32_t value);

  private:
  ::uint32_t _internal_nents() const;
  void _internal_set_nents(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyShareMemoryFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t len_;
    ::uint32_t lend_;
    ::uint32_t nents_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyShareMemoryDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyShareMemoryDoneFtraceEvent) */ {
 public:
  inline TrustyShareMemoryDoneFtraceEvent() : TrustyShareMemoryDoneFtraceEvent(nullptr) {}
  ~TrustyShareMemoryDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyShareMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyShareMemoryDoneFtraceEvent(const TrustyShareMemoryDoneFtraceEvent& from);
  TrustyShareMemoryDoneFtraceEvent(TrustyShareMemoryDoneFtraceEvent&& from) noexcept
    : TrustyShareMemoryDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyShareMemoryDoneFtraceEvent& operator=(const TrustyShareMemoryDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyShareMemoryDoneFtraceEvent& operator=(TrustyShareMemoryDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyShareMemoryDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyShareMemoryDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyShareMemoryDoneFtraceEvent*>(
               &_TrustyShareMemoryDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrustyShareMemoryDoneFtraceEvent& a, TrustyShareMemoryDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyShareMemoryDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyShareMemoryDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyShareMemoryDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyShareMemoryDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyShareMemoryDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyShareMemoryDoneFtraceEvent& from) {
    TrustyShareMemoryDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyShareMemoryDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyShareMemoryDoneFtraceEvent";
  }
  protected:
  explicit TrustyShareMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kLenFieldNumber = 2,
    kLendFieldNumber = 3,
    kNentsFieldNumber = 4,
    kRetFieldNumber = 5,
  };
  // optional uint64 handle = 1;
  bool has_handle() const;
  void clear_handle() ;
  ::uint64_t handle() const;
  void set_handle(::uint64_t value);

  private:
  ::uint64_t _internal_handle() const;
  void _internal_set_handle(::uint64_t value);

  public:
  // optional uint64 len = 2;
  bool has_len() const;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // optional uint32 lend = 3;
  bool has_lend() const;
  void clear_lend() ;
  ::uint32_t lend() const;
  void set_lend(::uint32_t value);

  private:
  ::uint32_t _internal_lend() const;
  void _internal_set_lend(::uint32_t value);

  public:
  // optional uint32 nents = 4;
  bool has_nents() const;
  void clear_nents() ;
  ::uint32_t nents() const;
  void set_nents(::uint32_t value);

  private:
  ::uint32_t _internal_nents() const;
  void _internal_set_nents(::uint32_t value);

  public:
  // optional int32 ret = 5;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t handle_;
    ::uint64_t len_;
    ::uint32_t lend_;
    ::uint32_t nents_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyReclaimMemoryFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyReclaimMemoryFtraceEvent) */ {
 public:
  inline TrustyReclaimMemoryFtraceEvent() : TrustyReclaimMemoryFtraceEvent(nullptr) {}
  ~TrustyReclaimMemoryFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyReclaimMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyReclaimMemoryFtraceEvent(const TrustyReclaimMemoryFtraceEvent& from);
  TrustyReclaimMemoryFtraceEvent(TrustyReclaimMemoryFtraceEvent&& from) noexcept
    : TrustyReclaimMemoryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyReclaimMemoryFtraceEvent& operator=(const TrustyReclaimMemoryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyReclaimMemoryFtraceEvent& operator=(TrustyReclaimMemoryFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyReclaimMemoryFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyReclaimMemoryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyReclaimMemoryFtraceEvent*>(
               &_TrustyReclaimMemoryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrustyReclaimMemoryFtraceEvent& a, TrustyReclaimMemoryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyReclaimMemoryFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyReclaimMemoryFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyReclaimMemoryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyReclaimMemoryFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyReclaimMemoryFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyReclaimMemoryFtraceEvent& from) {
    TrustyReclaimMemoryFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyReclaimMemoryFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyReclaimMemoryFtraceEvent";
  }
  protected:
  explicit TrustyReclaimMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyReclaimMemoryDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent) */ {
 public:
  inline TrustyReclaimMemoryDoneFtraceEvent() : TrustyReclaimMemoryDoneFtraceEvent(nullptr) {}
  ~TrustyReclaimMemoryDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyReclaimMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyReclaimMemoryDoneFtraceEvent(const TrustyReclaimMemoryDoneFtraceEvent& from);
  TrustyReclaimMemoryDoneFtraceEvent(TrustyReclaimMemoryDoneFtraceEvent&& from) noexcept
    : TrustyReclaimMemoryDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyReclaimMemoryDoneFtraceEvent& operator=(const TrustyReclaimMemoryDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyReclaimMemoryDoneFtraceEvent& operator=(TrustyReclaimMemoryDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyReclaimMemoryDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyReclaimMemoryDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyReclaimMemoryDoneFtraceEvent*>(
               &_TrustyReclaimMemoryDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrustyReclaimMemoryDoneFtraceEvent& a, TrustyReclaimMemoryDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyReclaimMemoryDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyReclaimMemoryDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyReclaimMemoryDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyReclaimMemoryDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyReclaimMemoryDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyReclaimMemoryDoneFtraceEvent& from) {
    TrustyReclaimMemoryDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyReclaimMemoryDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent";
  }
  protected:
  explicit TrustyReclaimMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t id_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIrqFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIrqFtraceEvent) */ {
 public:
  inline TrustyIrqFtraceEvent() : TrustyIrqFtraceEvent(nullptr) {}
  ~TrustyIrqFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIrqFtraceEvent(const TrustyIrqFtraceEvent& from);
  TrustyIrqFtraceEvent(TrustyIrqFtraceEvent&& from) noexcept
    : TrustyIrqFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIrqFtraceEvent& operator=(const TrustyIrqFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIrqFtraceEvent& operator=(TrustyIrqFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIrqFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIrqFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIrqFtraceEvent*>(
               &_TrustyIrqFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TrustyIrqFtraceEvent& a, TrustyIrqFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIrqFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIrqFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIrqFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIrqFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIrqFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIrqFtraceEvent& from) {
    TrustyIrqFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIrqFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIrqFtraceEvent";
  }
  protected:
  explicit TrustyIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqFieldNumber = 1,
  };
  // optional int32 irq = 1;
  bool has_irq() const;
  void clear_irq() ;
  ::int32_t irq() const;
  void set_irq(::int32_t value);

  private:
  ::int32_t _internal_irq() const;
  void _internal_set_irq(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIrqFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t irq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcHandleEventFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcHandleEventFtraceEvent) */ {
 public:
  inline TrustyIpcHandleEventFtraceEvent() : TrustyIpcHandleEventFtraceEvent(nullptr) {}
  ~TrustyIpcHandleEventFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcHandleEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcHandleEventFtraceEvent(const TrustyIpcHandleEventFtraceEvent& from);
  TrustyIpcHandleEventFtraceEvent(TrustyIpcHandleEventFtraceEvent&& from) noexcept
    : TrustyIpcHandleEventFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcHandleEventFtraceEvent& operator=(const TrustyIpcHandleEventFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcHandleEventFtraceEvent& operator=(TrustyIpcHandleEventFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcHandleEventFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcHandleEventFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcHandleEventFtraceEvent*>(
               &_TrustyIpcHandleEventFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TrustyIpcHandleEventFtraceEvent& a, TrustyIpcHandleEventFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcHandleEventFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcHandleEventFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcHandleEventFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcHandleEventFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcHandleEventFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcHandleEventFtraceEvent& from) {
    TrustyIpcHandleEventFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcHandleEventFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcHandleEventFtraceEvent";
  }
  protected:
  explicit TrustyIpcHandleEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvNameFieldNumber = 3,
    kChanFieldNumber = 1,
    kEventIdFieldNumber = 2,
  };
  // optional string srv_name = 3;
  bool has_srv_name() const;
  void clear_srv_name() ;
  const std::string& srv_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_srv_name(Arg_&& arg, Args_... args);
  std::string* mutable_srv_name();
  PROTOBUF_NODISCARD std::string* release_srv_name();
  void set_allocated_srv_name(std::string* ptr);

  private:
  const std::string& _internal_srv_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv_name(
      const std::string& value);
  std::string* _internal_mutable_srv_name();

  public:
  // optional uint32 chan = 1;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // optional uint32 event_id = 2;
  bool has_event_id() const;
  void clear_event_id() ;
  ::uint32_t event_id() const;
  void set_event_id(::uint32_t value);

  private:
  ::uint32_t _internal_event_id() const;
  void _internal_set_event_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv_name_;
    ::uint32_t chan_;
    ::uint32_t event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcConnectFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcConnectFtraceEvent) */ {
 public:
  inline TrustyIpcConnectFtraceEvent() : TrustyIpcConnectFtraceEvent(nullptr) {}
  ~TrustyIpcConnectFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcConnectFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcConnectFtraceEvent(const TrustyIpcConnectFtraceEvent& from);
  TrustyIpcConnectFtraceEvent(TrustyIpcConnectFtraceEvent&& from) noexcept
    : TrustyIpcConnectFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcConnectFtraceEvent& operator=(const TrustyIpcConnectFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcConnectFtraceEvent& operator=(TrustyIpcConnectFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcConnectFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcConnectFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcConnectFtraceEvent*>(
               &_TrustyIpcConnectFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrustyIpcConnectFtraceEvent& a, TrustyIpcConnectFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcConnectFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcConnectFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcConnectFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcConnectFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcConnectFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcConnectFtraceEvent& from) {
    TrustyIpcConnectFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcConnectFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcConnectFtraceEvent";
  }
  protected:
  explicit TrustyIpcConnectFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 2,
    kChanFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // optional string port = 2;
  bool has_port() const;
  void clear_port() ;
  const std::string& port() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* ptr);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // optional uint32 chan = 1;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // optional int32 state = 3;
  bool has_state() const;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);

  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcConnectFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    ::uint32_t chan_;
    ::int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcConnectEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcConnectEndFtraceEvent) */ {
 public:
  inline TrustyIpcConnectEndFtraceEvent() : TrustyIpcConnectEndFtraceEvent(nullptr) {}
  ~TrustyIpcConnectEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcConnectEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcConnectEndFtraceEvent(const TrustyIpcConnectEndFtraceEvent& from);
  TrustyIpcConnectEndFtraceEvent(TrustyIpcConnectEndFtraceEvent&& from) noexcept
    : TrustyIpcConnectEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcConnectEndFtraceEvent& operator=(const TrustyIpcConnectEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcConnectEndFtraceEvent& operator=(TrustyIpcConnectEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcConnectEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcConnectEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcConnectEndFtraceEvent*>(
               &_TrustyIpcConnectEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TrustyIpcConnectEndFtraceEvent& a, TrustyIpcConnectEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcConnectEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcConnectEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcConnectEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcConnectEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcConnectEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcConnectEndFtraceEvent& from) {
    TrustyIpcConnectEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcConnectEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcConnectEndFtraceEvent";
  }
  protected:
  explicit TrustyIpcConnectEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanFieldNumber = 1,
    kErrFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // optional uint32 chan = 1;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // optional int32 err = 2;
  bool has_err() const;
  void clear_err() ;
  ::int32_t err() const;
  void set_err(::int32_t value);

  private:
  ::int32_t _internal_err() const;
  void _internal_set_err(::int32_t value);

  public:
  // optional int32 state = 3;
  bool has_state() const;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);

  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t chan_;
    ::int32_t err_;
    ::int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcWriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcWriteFtraceEvent) */ {
 public:
  inline TrustyIpcWriteFtraceEvent() : TrustyIpcWriteFtraceEvent(nullptr) {}
  ~TrustyIpcWriteFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcWriteFtraceEvent(const TrustyIpcWriteFtraceEvent& from);
  TrustyIpcWriteFtraceEvent(TrustyIpcWriteFtraceEvent&& from) noexcept
    : TrustyIpcWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcWriteFtraceEvent& operator=(const TrustyIpcWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcWriteFtraceEvent& operator=(TrustyIpcWriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcWriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcWriteFtraceEvent*>(
               &_TrustyIpcWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TrustyIpcWriteFtraceEvent& a, TrustyIpcWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcWriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcWriteFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcWriteFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcWriteFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcWriteFtraceEvent& from) {
    TrustyIpcWriteFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcWriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcWriteFtraceEvent";
  }
  protected:
  explicit TrustyIpcWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvNameFieldNumber = 6,
    kBufIdFieldNumber = 1,
    kChanFieldNumber = 2,
    kKindShmFieldNumber = 3,
    kShmCntFieldNumber = 5,
    kLenOrErrFieldNumber = 4,
  };
  // optional string srv_name = 6;
  bool has_srv_name() const;
  void clear_srv_name() ;
  const std::string& srv_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_srv_name(Arg_&& arg, Args_... args);
  std::string* mutable_srv_name();
  PROTOBUF_NODISCARD std::string* release_srv_name();
  void set_allocated_srv_name(std::string* ptr);

  private:
  const std::string& _internal_srv_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv_name(
      const std::string& value);
  std::string* _internal_mutable_srv_name();

  public:
  // optional uint64 buf_id = 1;
  bool has_buf_id() const;
  void clear_buf_id() ;
  ::uint64_t buf_id() const;
  void set_buf_id(::uint64_t value);

  private:
  ::uint64_t _internal_buf_id() const;
  void _internal_set_buf_id(::uint64_t value);

  public:
  // optional uint32 chan = 2;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // optional int32 kind_shm = 3;
  bool has_kind_shm() const;
  void clear_kind_shm() ;
  ::int32_t kind_shm() const;
  void set_kind_shm(::int32_t value);

  private:
  ::int32_t _internal_kind_shm() const;
  void _internal_set_kind_shm(::int32_t value);

  public:
  // optional uint64 shm_cnt = 5;
  bool has_shm_cnt() const;
  void clear_shm_cnt() ;
  ::uint64_t shm_cnt() const;
  void set_shm_cnt(::uint64_t value);

  private:
  ::uint64_t _internal_shm_cnt() const;
  void _internal_set_shm_cnt(::uint64_t value);

  public:
  // optional int32 len_or_err = 4;
  bool has_len_or_err() const;
  void clear_len_or_err() ;
  ::int32_t len_or_err() const;
  void set_len_or_err(::int32_t value);

  private:
  ::int32_t _internal_len_or_err() const;
  void _internal_set_len_or_err(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcWriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv_name_;
    ::uint64_t buf_id_;
    ::uint32_t chan_;
    ::int32_t kind_shm_;
    ::uint64_t shm_cnt_;
    ::int32_t len_or_err_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcPollFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcPollFtraceEvent) */ {
 public:
  inline TrustyIpcPollFtraceEvent() : TrustyIpcPollFtraceEvent(nullptr) {}
  ~TrustyIpcPollFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcPollFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcPollFtraceEvent(const TrustyIpcPollFtraceEvent& from);
  TrustyIpcPollFtraceEvent(TrustyIpcPollFtraceEvent&& from) noexcept
    : TrustyIpcPollFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcPollFtraceEvent& operator=(const TrustyIpcPollFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcPollFtraceEvent& operator=(TrustyIpcPollFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcPollFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcPollFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcPollFtraceEvent*>(
               &_TrustyIpcPollFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TrustyIpcPollFtraceEvent& a, TrustyIpcPollFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcPollFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcPollFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcPollFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcPollFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcPollFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcPollFtraceEvent& from) {
    TrustyIpcPollFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcPollFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcPollFtraceEvent";
  }
  protected:
  explicit TrustyIpcPollFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvNameFieldNumber = 3,
    kChanFieldNumber = 1,
    kPollMaskFieldNumber = 2,
  };
  // optional string srv_name = 3;
  bool has_srv_name() const;
  void clear_srv_name() ;
  const std::string& srv_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_srv_name(Arg_&& arg, Args_... args);
  std::string* mutable_srv_name();
  PROTOBUF_NODISCARD std::string* release_srv_name();
  void set_allocated_srv_name(std::string* ptr);

  private:
  const std::string& _internal_srv_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv_name(
      const std::string& value);
  std::string* _internal_mutable_srv_name();

  public:
  // optional uint32 chan = 1;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // optional uint32 poll_mask = 2;
  bool has_poll_mask() const;
  void clear_poll_mask() ;
  ::uint32_t poll_mask() const;
  void set_poll_mask(::uint32_t value);

  private:
  ::uint32_t _internal_poll_mask() const;
  void _internal_set_poll_mask(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcPollFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv_name_;
    ::uint32_t chan_;
    ::uint32_t poll_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcReadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcReadFtraceEvent) */ {
 public:
  inline TrustyIpcReadFtraceEvent() : TrustyIpcReadFtraceEvent(nullptr) {}
  ~TrustyIpcReadFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcReadFtraceEvent(const TrustyIpcReadFtraceEvent& from);
  TrustyIpcReadFtraceEvent(TrustyIpcReadFtraceEvent&& from) noexcept
    : TrustyIpcReadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcReadFtraceEvent& operator=(const TrustyIpcReadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcReadFtraceEvent& operator=(TrustyIpcReadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcReadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcReadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcReadFtraceEvent*>(
               &_TrustyIpcReadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TrustyIpcReadFtraceEvent& a, TrustyIpcReadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcReadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcReadFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcReadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcReadFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcReadFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcReadFtraceEvent& from) {
    TrustyIpcReadFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcReadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcReadFtraceEvent";
  }
  protected:
  explicit TrustyIpcReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvNameFieldNumber = 2,
    kChanFieldNumber = 1,
  };
  // optional string srv_name = 2;
  bool has_srv_name() const;
  void clear_srv_name() ;
  const std::string& srv_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_srv_name(Arg_&& arg, Args_... args);
  std::string* mutable_srv_name();
  PROTOBUF_NODISCARD std::string* release_srv_name();
  void set_allocated_srv_name(std::string* ptr);

  private:
  const std::string& _internal_srv_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv_name(
      const std::string& value);
  std::string* _internal_mutable_srv_name();

  public:
  // optional uint32 chan = 1;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcReadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv_name_;
    ::uint32_t chan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcReadEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcReadEndFtraceEvent) */ {
 public:
  inline TrustyIpcReadEndFtraceEvent() : TrustyIpcReadEndFtraceEvent(nullptr) {}
  ~TrustyIpcReadEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcReadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcReadEndFtraceEvent(const TrustyIpcReadEndFtraceEvent& from);
  TrustyIpcReadEndFtraceEvent(TrustyIpcReadEndFtraceEvent&& from) noexcept
    : TrustyIpcReadEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcReadEndFtraceEvent& operator=(const TrustyIpcReadEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcReadEndFtraceEvent& operator=(TrustyIpcReadEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcReadEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcReadEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcReadEndFtraceEvent*>(
               &_TrustyIpcReadEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TrustyIpcReadEndFtraceEvent& a, TrustyIpcReadEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcReadEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcReadEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcReadEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcReadEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcReadEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcReadEndFtraceEvent& from) {
    TrustyIpcReadEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcReadEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcReadEndFtraceEvent";
  }
  protected:
  explicit TrustyIpcReadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvNameFieldNumber = 5,
    kBufIdFieldNumber = 1,
    kChanFieldNumber = 2,
    kLenOrErrFieldNumber = 3,
    kShmCntFieldNumber = 4,
  };
  // optional string srv_name = 5;
  bool has_srv_name() const;
  void clear_srv_name() ;
  const std::string& srv_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_srv_name(Arg_&& arg, Args_... args);
  std::string* mutable_srv_name();
  PROTOBUF_NODISCARD std::string* release_srv_name();
  void set_allocated_srv_name(std::string* ptr);

  private:
  const std::string& _internal_srv_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv_name(
      const std::string& value);
  std::string* _internal_mutable_srv_name();

  public:
  // optional uint64 buf_id = 1;
  bool has_buf_id() const;
  void clear_buf_id() ;
  ::uint64_t buf_id() const;
  void set_buf_id(::uint64_t value);

  private:
  ::uint64_t _internal_buf_id() const;
  void _internal_set_buf_id(::uint64_t value);

  public:
  // optional uint32 chan = 2;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // optional int32 len_or_err = 3;
  bool has_len_or_err() const;
  void clear_len_or_err() ;
  ::int32_t len_or_err() const;
  void set_len_or_err(::int32_t value);

  private:
  ::int32_t _internal_len_or_err() const;
  void _internal_set_len_or_err(::int32_t value);

  public:
  // optional uint64 shm_cnt = 4;
  bool has_shm_cnt() const;
  void clear_shm_cnt() ;
  ::uint64_t shm_cnt() const;
  void set_shm_cnt(::uint64_t value);

  private:
  ::uint64_t _internal_shm_cnt() const;
  void _internal_set_shm_cnt(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcReadEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv_name_;
    ::uint64_t buf_id_;
    ::uint32_t chan_;
    ::int32_t len_or_err_;
    ::uint64_t shm_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyIpcRxFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyIpcRxFtraceEvent) */ {
 public:
  inline TrustyIpcRxFtraceEvent() : TrustyIpcRxFtraceEvent(nullptr) {}
  ~TrustyIpcRxFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyIpcRxFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyIpcRxFtraceEvent(const TrustyIpcRxFtraceEvent& from);
  TrustyIpcRxFtraceEvent(TrustyIpcRxFtraceEvent&& from) noexcept
    : TrustyIpcRxFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyIpcRxFtraceEvent& operator=(const TrustyIpcRxFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyIpcRxFtraceEvent& operator=(TrustyIpcRxFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyIpcRxFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyIpcRxFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyIpcRxFtraceEvent*>(
               &_TrustyIpcRxFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TrustyIpcRxFtraceEvent& a, TrustyIpcRxFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyIpcRxFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyIpcRxFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyIpcRxFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyIpcRxFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyIpcRxFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyIpcRxFtraceEvent& from) {
    TrustyIpcRxFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyIpcRxFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyIpcRxFtraceEvent";
  }
  protected:
  explicit TrustyIpcRxFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrvNameFieldNumber = 3,
    kBufIdFieldNumber = 1,
    kChanFieldNumber = 2,
  };
  // optional string srv_name = 3;
  bool has_srv_name() const;
  void clear_srv_name() ;
  const std::string& srv_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_srv_name(Arg_&& arg, Args_... args);
  std::string* mutable_srv_name();
  PROTOBUF_NODISCARD std::string* release_srv_name();
  void set_allocated_srv_name(std::string* ptr);

  private:
  const std::string& _internal_srv_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srv_name(
      const std::string& value);
  std::string* _internal_mutable_srv_name();

  public:
  // optional uint64 buf_id = 1;
  bool has_buf_id() const;
  void clear_buf_id() ;
  ::uint64_t buf_id() const;
  void set_buf_id(::uint64_t value);

  private:
  ::uint64_t _internal_buf_id() const;
  void _internal_set_buf_id(::uint64_t value);

  public:
  // optional uint32 chan = 2;
  bool has_chan() const;
  void clear_chan() ;
  ::uint32_t chan() const;
  void set_chan(::uint32_t value);

  private:
  ::uint32_t _internal_chan() const;
  void _internal_set_chan(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyIpcRxFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srv_name_;
    ::uint64_t buf_id_;
    ::uint32_t chan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};// -------------------------------------------------------------------

class TrustyEnqueueNopFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrustyEnqueueNopFtraceEvent) */ {
 public:
  inline TrustyEnqueueNopFtraceEvent() : TrustyEnqueueNopFtraceEvent(nullptr) {}
  ~TrustyEnqueueNopFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrustyEnqueueNopFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrustyEnqueueNopFtraceEvent(const TrustyEnqueueNopFtraceEvent& from);
  TrustyEnqueueNopFtraceEvent(TrustyEnqueueNopFtraceEvent&& from) noexcept
    : TrustyEnqueueNopFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrustyEnqueueNopFtraceEvent& operator=(const TrustyEnqueueNopFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustyEnqueueNopFtraceEvent& operator=(TrustyEnqueueNopFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrustyEnqueueNopFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrustyEnqueueNopFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrustyEnqueueNopFtraceEvent*>(
               &_TrustyEnqueueNopFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TrustyEnqueueNopFtraceEvent& a, TrustyEnqueueNopFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustyEnqueueNopFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrustyEnqueueNopFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrustyEnqueueNopFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrustyEnqueueNopFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrustyEnqueueNopFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrustyEnqueueNopFtraceEvent& from) {
    TrustyEnqueueNopFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrustyEnqueueNopFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrustyEnqueueNopFtraceEvent";
  }
  protected:
  explicit TrustyEnqueueNopFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
    kArg3FieldNumber = 3,
  };
  // optional uint32 arg1 = 1;
  bool has_arg1() const;
  void clear_arg1() ;
  ::uint32_t arg1() const;
  void set_arg1(::uint32_t value);

  private:
  ::uint32_t _internal_arg1() const;
  void _internal_set_arg1(::uint32_t value);

  public:
  // optional uint32 arg2 = 2;
  bool has_arg2() const;
  void clear_arg2() ;
  ::uint32_t arg2() const;
  void set_arg2(::uint32_t value);

  private:
  ::uint32_t _internal_arg2() const;
  void _internal_set_arg2(::uint32_t value);

  public:
  // optional uint32 arg3 = 3;
  bool has_arg3() const;
  void clear_arg3() ;
  ::uint32_t arg3() const;
  void set_arg3(::uint32_t value);

  private:
  ::uint32_t _internal_arg3() const;
  void _internal_set_arg3(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrustyEnqueueNopFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t arg1_;
    ::uint32_t arg2_;
    ::uint32_t arg3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TrustySmcFtraceEvent

// optional uint64 r0 = 1;
inline bool TrustySmcFtraceEvent::has_r0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustySmcFtraceEvent::clear_r0() {
  _impl_.r0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustySmcFtraceEvent::r0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustySmcFtraceEvent.r0)
  return _internal_r0();
}
inline void TrustySmcFtraceEvent::set_r0(::uint64_t value) {
  _internal_set_r0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustySmcFtraceEvent.r0)
}
inline ::uint64_t TrustySmcFtraceEvent::_internal_r0() const {
  return _impl_.r0_;
}
inline void TrustySmcFtraceEvent::_internal_set_r0(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.r0_ = value;
}

// optional uint64 r1 = 2;
inline bool TrustySmcFtraceEvent::has_r1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustySmcFtraceEvent::clear_r1() {
  _impl_.r1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TrustySmcFtraceEvent::r1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustySmcFtraceEvent.r1)
  return _internal_r1();
}
inline void TrustySmcFtraceEvent::set_r1(::uint64_t value) {
  _internal_set_r1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustySmcFtraceEvent.r1)
}
inline ::uint64_t TrustySmcFtraceEvent::_internal_r1() const {
  return _impl_.r1_;
}
inline void TrustySmcFtraceEvent::_internal_set_r1(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.r1_ = value;
}

// optional uint64 r2 = 3;
inline bool TrustySmcFtraceEvent::has_r2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustySmcFtraceEvent::clear_r2() {
  _impl_.r2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t TrustySmcFtraceEvent::r2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustySmcFtraceEvent.r2)
  return _internal_r2();
}
inline void TrustySmcFtraceEvent::set_r2(::uint64_t value) {
  _internal_set_r2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustySmcFtraceEvent.r2)
}
inline ::uint64_t TrustySmcFtraceEvent::_internal_r2() const {
  return _impl_.r2_;
}
inline void TrustySmcFtraceEvent::_internal_set_r2(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.r2_ = value;
}

// optional uint64 r3 = 4;
inline bool TrustySmcFtraceEvent::has_r3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrustySmcFtraceEvent::clear_r3() {
  _impl_.r3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t TrustySmcFtraceEvent::r3() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustySmcFtraceEvent.r3)
  return _internal_r3();
}
inline void TrustySmcFtraceEvent::set_r3(::uint64_t value) {
  _internal_set_r3(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustySmcFtraceEvent.r3)
}
inline ::uint64_t TrustySmcFtraceEvent::_internal_r3() const {
  return _impl_.r3_;
}
inline void TrustySmcFtraceEvent::_internal_set_r3(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.r3_ = value;
}

// -------------------------------------------------------------------

// TrustySmcDoneFtraceEvent

// optional uint64 ret = 1;
inline bool TrustySmcDoneFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustySmcDoneFtraceEvent::clear_ret() {
  _impl_.ret_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustySmcDoneFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustySmcDoneFtraceEvent.ret)
  return _internal_ret();
}
inline void TrustySmcDoneFtraceEvent::set_ret(::uint64_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustySmcDoneFtraceEvent.ret)
}
inline ::uint64_t TrustySmcDoneFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void TrustySmcDoneFtraceEvent::_internal_set_ret(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// TrustyStdCall32FtraceEvent

// optional uint64 r0 = 1;
inline bool TrustyStdCall32FtraceEvent::has_r0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyStdCall32FtraceEvent::clear_r0() {
  _impl_.r0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustyStdCall32FtraceEvent::r0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyStdCall32FtraceEvent.r0)
  return _internal_r0();
}
inline void TrustyStdCall32FtraceEvent::set_r0(::uint64_t value) {
  _internal_set_r0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyStdCall32FtraceEvent.r0)
}
inline ::uint64_t TrustyStdCall32FtraceEvent::_internal_r0() const {
  return _impl_.r0_;
}
inline void TrustyStdCall32FtraceEvent::_internal_set_r0(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.r0_ = value;
}

// optional uint64 r1 = 2;
inline bool TrustyStdCall32FtraceEvent::has_r1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyStdCall32FtraceEvent::clear_r1() {
  _impl_.r1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TrustyStdCall32FtraceEvent::r1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyStdCall32FtraceEvent.r1)
  return _internal_r1();
}
inline void TrustyStdCall32FtraceEvent::set_r1(::uint64_t value) {
  _internal_set_r1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyStdCall32FtraceEvent.r1)
}
inline ::uint64_t TrustyStdCall32FtraceEvent::_internal_r1() const {
  return _impl_.r1_;
}
inline void TrustyStdCall32FtraceEvent::_internal_set_r1(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.r1_ = value;
}

// optional uint64 r2 = 3;
inline bool TrustyStdCall32FtraceEvent::has_r2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyStdCall32FtraceEvent::clear_r2() {
  _impl_.r2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t TrustyStdCall32FtraceEvent::r2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyStdCall32FtraceEvent.r2)
  return _internal_r2();
}
inline void TrustyStdCall32FtraceEvent::set_r2(::uint64_t value) {
  _internal_set_r2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyStdCall32FtraceEvent.r2)
}
inline ::uint64_t TrustyStdCall32FtraceEvent::_internal_r2() const {
  return _impl_.r2_;
}
inline void TrustyStdCall32FtraceEvent::_internal_set_r2(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.r2_ = value;
}

// optional uint64 r3 = 4;
inline bool TrustyStdCall32FtraceEvent::has_r3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrustyStdCall32FtraceEvent::clear_r3() {
  _impl_.r3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t TrustyStdCall32FtraceEvent::r3() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyStdCall32FtraceEvent.r3)
  return _internal_r3();
}
inline void TrustyStdCall32FtraceEvent::set_r3(::uint64_t value) {
  _internal_set_r3(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyStdCall32FtraceEvent.r3)
}
inline ::uint64_t TrustyStdCall32FtraceEvent::_internal_r3() const {
  return _impl_.r3_;
}
inline void TrustyStdCall32FtraceEvent::_internal_set_r3(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.r3_ = value;
}

// -------------------------------------------------------------------

// TrustyStdCall32DoneFtraceEvent

// optional int64 ret = 1;
inline bool TrustyStdCall32DoneFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyStdCall32DoneFtraceEvent::clear_ret() {
  _impl_.ret_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t TrustyStdCall32DoneFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyStdCall32DoneFtraceEvent.ret)
  return _internal_ret();
}
inline void TrustyStdCall32DoneFtraceEvent::set_ret(::int64_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyStdCall32DoneFtraceEvent.ret)
}
inline ::int64_t TrustyStdCall32DoneFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void TrustyStdCall32DoneFtraceEvent::_internal_set_ret(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// TrustyShareMemoryFtraceEvent

// optional uint64 len = 1;
inline bool TrustyShareMemoryFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyShareMemoryFtraceEvent::clear_len() {
  _impl_.len_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustyShareMemoryFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryFtraceEvent.len)
  return _internal_len();
}
inline void TrustyShareMemoryFtraceEvent::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryFtraceEvent.len)
}
inline ::uint64_t TrustyShareMemoryFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void TrustyShareMemoryFtraceEvent::_internal_set_len(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.len_ = value;
}

// optional uint32 lend = 2;
inline bool TrustyShareMemoryFtraceEvent::has_lend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyShareMemoryFtraceEvent::clear_lend() {
  _impl_.lend_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrustyShareMemoryFtraceEvent::lend() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryFtraceEvent.lend)
  return _internal_lend();
}
inline void TrustyShareMemoryFtraceEvent::set_lend(::uint32_t value) {
  _internal_set_lend(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryFtraceEvent.lend)
}
inline ::uint32_t TrustyShareMemoryFtraceEvent::_internal_lend() const {
  return _impl_.lend_;
}
inline void TrustyShareMemoryFtraceEvent::_internal_set_lend(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lend_ = value;
}

// optional uint32 nents = 3;
inline bool TrustyShareMemoryFtraceEvent::has_nents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyShareMemoryFtraceEvent::clear_nents() {
  _impl_.nents_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyShareMemoryFtraceEvent::nents() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryFtraceEvent.nents)
  return _internal_nents();
}
inline void TrustyShareMemoryFtraceEvent::set_nents(::uint32_t value) {
  _internal_set_nents(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryFtraceEvent.nents)
}
inline ::uint32_t TrustyShareMemoryFtraceEvent::_internal_nents() const {
  return _impl_.nents_;
}
inline void TrustyShareMemoryFtraceEvent::_internal_set_nents(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nents_ = value;
}

// -------------------------------------------------------------------

// TrustyShareMemoryDoneFtraceEvent

// optional uint64 handle = 1;
inline bool TrustyShareMemoryDoneFtraceEvent::has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyShareMemoryDoneFtraceEvent::clear_handle() {
  _impl_.handle_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustyShareMemoryDoneFtraceEvent::handle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.handle)
  return _internal_handle();
}
inline void TrustyShareMemoryDoneFtraceEvent::set_handle(::uint64_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.handle)
}
inline ::uint64_t TrustyShareMemoryDoneFtraceEvent::_internal_handle() const {
  return _impl_.handle_;
}
inline void TrustyShareMemoryDoneFtraceEvent::_internal_set_handle(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_ = value;
}

// optional uint64 len = 2;
inline bool TrustyShareMemoryDoneFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyShareMemoryDoneFtraceEvent::clear_len() {
  _impl_.len_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TrustyShareMemoryDoneFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.len)
  return _internal_len();
}
inline void TrustyShareMemoryDoneFtraceEvent::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.len)
}
inline ::uint64_t TrustyShareMemoryDoneFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void TrustyShareMemoryDoneFtraceEvent::_internal_set_len(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.len_ = value;
}

// optional uint32 lend = 3;
inline bool TrustyShareMemoryDoneFtraceEvent::has_lend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyShareMemoryDoneFtraceEvent::clear_lend() {
  _impl_.lend_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyShareMemoryDoneFtraceEvent::lend() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.lend)
  return _internal_lend();
}
inline void TrustyShareMemoryDoneFtraceEvent::set_lend(::uint32_t value) {
  _internal_set_lend(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.lend)
}
inline ::uint32_t TrustyShareMemoryDoneFtraceEvent::_internal_lend() const {
  return _impl_.lend_;
}
inline void TrustyShareMemoryDoneFtraceEvent::_internal_set_lend(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lend_ = value;
}

// optional uint32 nents = 4;
inline bool TrustyShareMemoryDoneFtraceEvent::has_nents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrustyShareMemoryDoneFtraceEvent::clear_nents() {
  _impl_.nents_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t TrustyShareMemoryDoneFtraceEvent::nents() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.nents)
  return _internal_nents();
}
inline void TrustyShareMemoryDoneFtraceEvent::set_nents(::uint32_t value) {
  _internal_set_nents(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.nents)
}
inline ::uint32_t TrustyShareMemoryDoneFtraceEvent::_internal_nents() const {
  return _impl_.nents_;
}
inline void TrustyShareMemoryDoneFtraceEvent::_internal_set_nents(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nents_ = value;
}

// optional int32 ret = 5;
inline bool TrustyShareMemoryDoneFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TrustyShareMemoryDoneFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t TrustyShareMemoryDoneFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.ret)
  return _internal_ret();
}
inline void TrustyShareMemoryDoneFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyShareMemoryDoneFtraceEvent.ret)
}
inline ::int32_t TrustyShareMemoryDoneFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void TrustyShareMemoryDoneFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// TrustyReclaimMemoryFtraceEvent

// optional uint64 id = 1;
inline bool TrustyReclaimMemoryFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyReclaimMemoryFtraceEvent::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustyReclaimMemoryFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyReclaimMemoryFtraceEvent.id)
  return _internal_id();
}
inline void TrustyReclaimMemoryFtraceEvent::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyReclaimMemoryFtraceEvent.id)
}
inline ::uint64_t TrustyReclaimMemoryFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void TrustyReclaimMemoryFtraceEvent::_internal_set_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// TrustyReclaimMemoryDoneFtraceEvent

// optional uint64 id = 1;
inline bool TrustyReclaimMemoryDoneFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyReclaimMemoryDoneFtraceEvent::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t TrustyReclaimMemoryDoneFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent.id)
  return _internal_id();
}
inline void TrustyReclaimMemoryDoneFtraceEvent::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent.id)
}
inline ::uint64_t TrustyReclaimMemoryDoneFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void TrustyReclaimMemoryDoneFtraceEvent::_internal_set_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// optional int32 ret = 2;
inline bool TrustyReclaimMemoryDoneFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyReclaimMemoryDoneFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TrustyReclaimMemoryDoneFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent.ret)
  return _internal_ret();
}
inline void TrustyReclaimMemoryDoneFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent.ret)
}
inline ::int32_t TrustyReclaimMemoryDoneFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void TrustyReclaimMemoryDoneFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// TrustyIrqFtraceEvent

// optional int32 irq = 1;
inline bool TrustyIrqFtraceEvent::has_irq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIrqFtraceEvent::clear_irq() {
  _impl_.irq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t TrustyIrqFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIrqFtraceEvent.irq)
  return _internal_irq();
}
inline void TrustyIrqFtraceEvent::set_irq(::int32_t value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIrqFtraceEvent.irq)
}
inline ::int32_t TrustyIrqFtraceEvent::_internal_irq() const {
  return _impl_.irq_;
}
inline void TrustyIrqFtraceEvent::_internal_set_irq(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.irq_ = value;
}

// -------------------------------------------------------------------

// TrustyIpcHandleEventFtraceEvent

// optional uint32 chan = 1;
inline bool TrustyIpcHandleEventFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcHandleEventFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrustyIpcHandleEventFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcHandleEventFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcHandleEventFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcHandleEventFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcHandleEventFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcHandleEventFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chan_ = value;
}

// optional uint32 event_id = 2;
inline bool TrustyIpcHandleEventFtraceEvent::has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcHandleEventFtraceEvent::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyIpcHandleEventFtraceEvent::event_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcHandleEventFtraceEvent.event_id)
  return _internal_event_id();
}
inline void TrustyIpcHandleEventFtraceEvent::set_event_id(::uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcHandleEventFtraceEvent.event_id)
}
inline ::uint32_t TrustyIpcHandleEventFtraceEvent::_internal_event_id() const {
  return _impl_.event_id_;
}
inline void TrustyIpcHandleEventFtraceEvent::_internal_set_event_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.event_id_ = value;
}

// optional string srv_name = 3;
inline bool TrustyIpcHandleEventFtraceEvent::has_srv_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcHandleEventFtraceEvent::clear_srv_name() {
  _impl_.srv_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcHandleEventFtraceEvent::srv_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name)
  return _internal_srv_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcHandleEventFtraceEvent::set_srv_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srv_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name)
}
inline std::string* TrustyIpcHandleEventFtraceEvent::mutable_srv_name() {
  std::string* _s = _internal_mutable_srv_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name)
  return _s;
}
inline const std::string& TrustyIpcHandleEventFtraceEvent::_internal_srv_name() const {
  return _impl_.srv_name_.Get();
}
inline void TrustyIpcHandleEventFtraceEvent::_internal_set_srv_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.srv_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcHandleEventFtraceEvent::_internal_mutable_srv_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.srv_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcHandleEventFtraceEvent::release_srv_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.srv_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcHandleEventFtraceEvent::set_allocated_srv_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.srv_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.srv_name_.IsDefault()) {
          _impl_.srv_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name)
}

// -------------------------------------------------------------------

// TrustyIpcConnectFtraceEvent

// optional uint32 chan = 1;
inline bool TrustyIpcConnectFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcConnectFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrustyIpcConnectFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcConnectFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcConnectFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcConnectFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcConnectFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcConnectFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chan_ = value;
}

// optional string port = 2;
inline bool TrustyIpcConnectFtraceEvent::has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcConnectFtraceEvent::clear_port() {
  _impl_.port_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcConnectFtraceEvent::port() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcConnectFtraceEvent.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcConnectFtraceEvent::set_port(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.port_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcConnectFtraceEvent.port)
}
inline std::string* TrustyIpcConnectFtraceEvent::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcConnectFtraceEvent.port)
  return _s;
}
inline const std::string& TrustyIpcConnectFtraceEvent::_internal_port() const {
  return _impl_.port_.Get();
}
inline void TrustyIpcConnectFtraceEvent::_internal_set_port(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcConnectFtraceEvent::_internal_mutable_port() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.port_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcConnectFtraceEvent::release_port() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcConnectFtraceEvent.port)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.port_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcConnectFtraceEvent::set_allocated_port(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.port_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcConnectFtraceEvent.port)
}

// optional int32 state = 3;
inline bool TrustyIpcConnectFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcConnectFtraceEvent::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TrustyIpcConnectFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcConnectFtraceEvent.state)
  return _internal_state();
}
inline void TrustyIpcConnectFtraceEvent::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcConnectFtraceEvent.state)
}
inline ::int32_t TrustyIpcConnectFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void TrustyIpcConnectFtraceEvent::_internal_set_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// TrustyIpcConnectEndFtraceEvent

// optional uint32 chan = 1;
inline bool TrustyIpcConnectEndFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcConnectEndFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t TrustyIpcConnectEndFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcConnectEndFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcConnectEndFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcConnectEndFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcConnectEndFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcConnectEndFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chan_ = value;
}

// optional int32 err = 2;
inline bool TrustyIpcConnectEndFtraceEvent::has_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcConnectEndFtraceEvent::clear_err() {
  _impl_.err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TrustyIpcConnectEndFtraceEvent::err() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcConnectEndFtraceEvent.err)
  return _internal_err();
}
inline void TrustyIpcConnectEndFtraceEvent::set_err(::int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcConnectEndFtraceEvent.err)
}
inline ::int32_t TrustyIpcConnectEndFtraceEvent::_internal_err() const {
  return _impl_.err_;
}
inline void TrustyIpcConnectEndFtraceEvent::_internal_set_err(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.err_ = value;
}

// optional int32 state = 3;
inline bool TrustyIpcConnectEndFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcConnectEndFtraceEvent::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TrustyIpcConnectEndFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcConnectEndFtraceEvent.state)
  return _internal_state();
}
inline void TrustyIpcConnectEndFtraceEvent::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcConnectEndFtraceEvent.state)
}
inline ::int32_t TrustyIpcConnectEndFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void TrustyIpcConnectEndFtraceEvent::_internal_set_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// TrustyIpcWriteFtraceEvent

// optional uint64 buf_id = 1;
inline bool TrustyIpcWriteFtraceEvent::has_buf_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcWriteFtraceEvent::clear_buf_id() {
  _impl_.buf_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TrustyIpcWriteFtraceEvent::buf_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcWriteFtraceEvent.buf_id)
  return _internal_buf_id();
}
inline void TrustyIpcWriteFtraceEvent::set_buf_id(::uint64_t value) {
  _internal_set_buf_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcWriteFtraceEvent.buf_id)
}
inline ::uint64_t TrustyIpcWriteFtraceEvent::_internal_buf_id() const {
  return _impl_.buf_id_;
}
inline void TrustyIpcWriteFtraceEvent::_internal_set_buf_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buf_id_ = value;
}

// optional uint32 chan = 2;
inline bool TrustyIpcWriteFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcWriteFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyIpcWriteFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcWriteFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcWriteFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcWriteFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcWriteFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcWriteFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chan_ = value;
}

// optional int32 kind_shm = 3;
inline bool TrustyIpcWriteFtraceEvent::has_kind_shm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrustyIpcWriteFtraceEvent::clear_kind_shm() {
  _impl_.kind_shm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t TrustyIpcWriteFtraceEvent::kind_shm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcWriteFtraceEvent.kind_shm)
  return _internal_kind_shm();
}
inline void TrustyIpcWriteFtraceEvent::set_kind_shm(::int32_t value) {
  _internal_set_kind_shm(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcWriteFtraceEvent.kind_shm)
}
inline ::int32_t TrustyIpcWriteFtraceEvent::_internal_kind_shm() const {
  return _impl_.kind_shm_;
}
inline void TrustyIpcWriteFtraceEvent::_internal_set_kind_shm(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kind_shm_ = value;
}

// optional int32 len_or_err = 4;
inline bool TrustyIpcWriteFtraceEvent::has_len_or_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TrustyIpcWriteFtraceEvent::clear_len_or_err() {
  _impl_.len_or_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t TrustyIpcWriteFtraceEvent::len_or_err() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcWriteFtraceEvent.len_or_err)
  return _internal_len_or_err();
}
inline void TrustyIpcWriteFtraceEvent::set_len_or_err(::int32_t value) {
  _internal_set_len_or_err(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcWriteFtraceEvent.len_or_err)
}
inline ::int32_t TrustyIpcWriteFtraceEvent::_internal_len_or_err() const {
  return _impl_.len_or_err_;
}
inline void TrustyIpcWriteFtraceEvent::_internal_set_len_or_err(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.len_or_err_ = value;
}

// optional uint64 shm_cnt = 5;
inline bool TrustyIpcWriteFtraceEvent::has_shm_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TrustyIpcWriteFtraceEvent::clear_shm_cnt() {
  _impl_.shm_cnt_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t TrustyIpcWriteFtraceEvent::shm_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcWriteFtraceEvent.shm_cnt)
  return _internal_shm_cnt();
}
inline void TrustyIpcWriteFtraceEvent::set_shm_cnt(::uint64_t value) {
  _internal_set_shm_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcWriteFtraceEvent.shm_cnt)
}
inline ::uint64_t TrustyIpcWriteFtraceEvent::_internal_shm_cnt() const {
  return _impl_.shm_cnt_;
}
inline void TrustyIpcWriteFtraceEvent::_internal_set_shm_cnt(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.shm_cnt_ = value;
}

// optional string srv_name = 6;
inline bool TrustyIpcWriteFtraceEvent::has_srv_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcWriteFtraceEvent::clear_srv_name() {
  _impl_.srv_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcWriteFtraceEvent::srv_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name)
  return _internal_srv_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcWriteFtraceEvent::set_srv_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srv_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name)
}
inline std::string* TrustyIpcWriteFtraceEvent::mutable_srv_name() {
  std::string* _s = _internal_mutable_srv_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name)
  return _s;
}
inline const std::string& TrustyIpcWriteFtraceEvent::_internal_srv_name() const {
  return _impl_.srv_name_.Get();
}
inline void TrustyIpcWriteFtraceEvent::_internal_set_srv_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.srv_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcWriteFtraceEvent::_internal_mutable_srv_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.srv_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcWriteFtraceEvent::release_srv_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.srv_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcWriteFtraceEvent::set_allocated_srv_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.srv_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.srv_name_.IsDefault()) {
          _impl_.srv_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name)
}

// -------------------------------------------------------------------

// TrustyIpcPollFtraceEvent

// optional uint32 chan = 1;
inline bool TrustyIpcPollFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcPollFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrustyIpcPollFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcPollFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcPollFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcPollFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcPollFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcPollFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chan_ = value;
}

// optional uint32 poll_mask = 2;
inline bool TrustyIpcPollFtraceEvent::has_poll_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcPollFtraceEvent::clear_poll_mask() {
  _impl_.poll_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyIpcPollFtraceEvent::poll_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcPollFtraceEvent.poll_mask)
  return _internal_poll_mask();
}
inline void TrustyIpcPollFtraceEvent::set_poll_mask(::uint32_t value) {
  _internal_set_poll_mask(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcPollFtraceEvent.poll_mask)
}
inline ::uint32_t TrustyIpcPollFtraceEvent::_internal_poll_mask() const {
  return _impl_.poll_mask_;
}
inline void TrustyIpcPollFtraceEvent::_internal_set_poll_mask(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.poll_mask_ = value;
}

// optional string srv_name = 3;
inline bool TrustyIpcPollFtraceEvent::has_srv_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcPollFtraceEvent::clear_srv_name() {
  _impl_.srv_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcPollFtraceEvent::srv_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcPollFtraceEvent.srv_name)
  return _internal_srv_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcPollFtraceEvent::set_srv_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srv_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcPollFtraceEvent.srv_name)
}
inline std::string* TrustyIpcPollFtraceEvent::mutable_srv_name() {
  std::string* _s = _internal_mutable_srv_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcPollFtraceEvent.srv_name)
  return _s;
}
inline const std::string& TrustyIpcPollFtraceEvent::_internal_srv_name() const {
  return _impl_.srv_name_.Get();
}
inline void TrustyIpcPollFtraceEvent::_internal_set_srv_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.srv_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcPollFtraceEvent::_internal_mutable_srv_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.srv_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcPollFtraceEvent::release_srv_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcPollFtraceEvent.srv_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.srv_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcPollFtraceEvent::set_allocated_srv_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.srv_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.srv_name_.IsDefault()) {
          _impl_.srv_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcPollFtraceEvent.srv_name)
}

// -------------------------------------------------------------------

// TrustyIpcReadFtraceEvent

// optional uint32 chan = 1;
inline bool TrustyIpcReadFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcReadFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrustyIpcReadFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcReadFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcReadFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcReadFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chan_ = value;
}

// optional string srv_name = 2;
inline bool TrustyIpcReadFtraceEvent::has_srv_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcReadFtraceEvent::clear_srv_name() {
  _impl_.srv_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcReadFtraceEvent::srv_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadFtraceEvent.srv_name)
  return _internal_srv_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcReadFtraceEvent::set_srv_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srv_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadFtraceEvent.srv_name)
}
inline std::string* TrustyIpcReadFtraceEvent::mutable_srv_name() {
  std::string* _s = _internal_mutable_srv_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcReadFtraceEvent.srv_name)
  return _s;
}
inline const std::string& TrustyIpcReadFtraceEvent::_internal_srv_name() const {
  return _impl_.srv_name_.Get();
}
inline void TrustyIpcReadFtraceEvent::_internal_set_srv_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.srv_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcReadFtraceEvent::_internal_mutable_srv_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.srv_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcReadFtraceEvent::release_srv_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcReadFtraceEvent.srv_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.srv_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcReadFtraceEvent::set_allocated_srv_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.srv_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.srv_name_.IsDefault()) {
          _impl_.srv_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcReadFtraceEvent.srv_name)
}

// -------------------------------------------------------------------

// TrustyIpcReadEndFtraceEvent

// optional uint64 buf_id = 1;
inline bool TrustyIpcReadEndFtraceEvent::has_buf_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcReadEndFtraceEvent::clear_buf_id() {
  _impl_.buf_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TrustyIpcReadEndFtraceEvent::buf_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadEndFtraceEvent.buf_id)
  return _internal_buf_id();
}
inline void TrustyIpcReadEndFtraceEvent::set_buf_id(::uint64_t value) {
  _internal_set_buf_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadEndFtraceEvent.buf_id)
}
inline ::uint64_t TrustyIpcReadEndFtraceEvent::_internal_buf_id() const {
  return _impl_.buf_id_;
}
inline void TrustyIpcReadEndFtraceEvent::_internal_set_buf_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buf_id_ = value;
}

// optional uint32 chan = 2;
inline bool TrustyIpcReadEndFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcReadEndFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyIpcReadEndFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadEndFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcReadEndFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadEndFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcReadEndFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcReadEndFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chan_ = value;
}

// optional int32 len_or_err = 3;
inline bool TrustyIpcReadEndFtraceEvent::has_len_or_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrustyIpcReadEndFtraceEvent::clear_len_or_err() {
  _impl_.len_or_err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t TrustyIpcReadEndFtraceEvent::len_or_err() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadEndFtraceEvent.len_or_err)
  return _internal_len_or_err();
}
inline void TrustyIpcReadEndFtraceEvent::set_len_or_err(::int32_t value) {
  _internal_set_len_or_err(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadEndFtraceEvent.len_or_err)
}
inline ::int32_t TrustyIpcReadEndFtraceEvent::_internal_len_or_err() const {
  return _impl_.len_or_err_;
}
inline void TrustyIpcReadEndFtraceEvent::_internal_set_len_or_err(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_or_err_ = value;
}

// optional uint64 shm_cnt = 4;
inline bool TrustyIpcReadEndFtraceEvent::has_shm_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TrustyIpcReadEndFtraceEvent::clear_shm_cnt() {
  _impl_.shm_cnt_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t TrustyIpcReadEndFtraceEvent::shm_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadEndFtraceEvent.shm_cnt)
  return _internal_shm_cnt();
}
inline void TrustyIpcReadEndFtraceEvent::set_shm_cnt(::uint64_t value) {
  _internal_set_shm_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadEndFtraceEvent.shm_cnt)
}
inline ::uint64_t TrustyIpcReadEndFtraceEvent::_internal_shm_cnt() const {
  return _impl_.shm_cnt_;
}
inline void TrustyIpcReadEndFtraceEvent::_internal_set_shm_cnt(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.shm_cnt_ = value;
}

// optional string srv_name = 5;
inline bool TrustyIpcReadEndFtraceEvent::has_srv_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcReadEndFtraceEvent::clear_srv_name() {
  _impl_.srv_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcReadEndFtraceEvent::srv_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name)
  return _internal_srv_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcReadEndFtraceEvent::set_srv_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srv_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name)
}
inline std::string* TrustyIpcReadEndFtraceEvent::mutable_srv_name() {
  std::string* _s = _internal_mutable_srv_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name)
  return _s;
}
inline const std::string& TrustyIpcReadEndFtraceEvent::_internal_srv_name() const {
  return _impl_.srv_name_.Get();
}
inline void TrustyIpcReadEndFtraceEvent::_internal_set_srv_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.srv_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcReadEndFtraceEvent::_internal_mutable_srv_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.srv_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcReadEndFtraceEvent::release_srv_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.srv_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcReadEndFtraceEvent::set_allocated_srv_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.srv_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.srv_name_.IsDefault()) {
          _impl_.srv_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name)
}

// -------------------------------------------------------------------

// TrustyIpcRxFtraceEvent

// optional uint64 buf_id = 1;
inline bool TrustyIpcRxFtraceEvent::has_buf_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyIpcRxFtraceEvent::clear_buf_id() {
  _impl_.buf_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t TrustyIpcRxFtraceEvent::buf_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcRxFtraceEvent.buf_id)
  return _internal_buf_id();
}
inline void TrustyIpcRxFtraceEvent::set_buf_id(::uint64_t value) {
  _internal_set_buf_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcRxFtraceEvent.buf_id)
}
inline ::uint64_t TrustyIpcRxFtraceEvent::_internal_buf_id() const {
  return _impl_.buf_id_;
}
inline void TrustyIpcRxFtraceEvent::_internal_set_buf_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.buf_id_ = value;
}

// optional uint32 chan = 2;
inline bool TrustyIpcRxFtraceEvent::has_chan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyIpcRxFtraceEvent::clear_chan() {
  _impl_.chan_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyIpcRxFtraceEvent::chan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcRxFtraceEvent.chan)
  return _internal_chan();
}
inline void TrustyIpcRxFtraceEvent::set_chan(::uint32_t value) {
  _internal_set_chan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcRxFtraceEvent.chan)
}
inline ::uint32_t TrustyIpcRxFtraceEvent::_internal_chan() const {
  return _impl_.chan_;
}
inline void TrustyIpcRxFtraceEvent::_internal_set_chan(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chan_ = value;
}

// optional string srv_name = 3;
inline bool TrustyIpcRxFtraceEvent::has_srv_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyIpcRxFtraceEvent::clear_srv_name() {
  _impl_.srv_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustyIpcRxFtraceEvent::srv_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyIpcRxFtraceEvent.srv_name)
  return _internal_srv_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrustyIpcRxFtraceEvent::set_srv_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.srv_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyIpcRxFtraceEvent.srv_name)
}
inline std::string* TrustyIpcRxFtraceEvent::mutable_srv_name() {
  std::string* _s = _internal_mutable_srv_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrustyIpcRxFtraceEvent.srv_name)
  return _s;
}
inline const std::string& TrustyIpcRxFtraceEvent::_internal_srv_name() const {
  return _impl_.srv_name_.Get();
}
inline void TrustyIpcRxFtraceEvent::_internal_set_srv_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.srv_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrustyIpcRxFtraceEvent::_internal_mutable_srv_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.srv_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TrustyIpcRxFtraceEvent::release_srv_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrustyIpcRxFtraceEvent.srv_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.srv_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrustyIpcRxFtraceEvent::set_allocated_srv_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.srv_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.srv_name_.IsDefault()) {
          _impl_.srv_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrustyIpcRxFtraceEvent.srv_name)
}

// -------------------------------------------------------------------

// TrustyEnqueueNopFtraceEvent

// optional uint32 arg1 = 1;
inline bool TrustyEnqueueNopFtraceEvent::has_arg1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrustyEnqueueNopFtraceEvent::clear_arg1() {
  _impl_.arg1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t TrustyEnqueueNopFtraceEvent::arg1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyEnqueueNopFtraceEvent.arg1)
  return _internal_arg1();
}
inline void TrustyEnqueueNopFtraceEvent::set_arg1(::uint32_t value) {
  _internal_set_arg1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyEnqueueNopFtraceEvent.arg1)
}
inline ::uint32_t TrustyEnqueueNopFtraceEvent::_internal_arg1() const {
  return _impl_.arg1_;
}
inline void TrustyEnqueueNopFtraceEvent::_internal_set_arg1(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.arg1_ = value;
}

// optional uint32 arg2 = 2;
inline bool TrustyEnqueueNopFtraceEvent::has_arg2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrustyEnqueueNopFtraceEvent::clear_arg2() {
  _impl_.arg2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrustyEnqueueNopFtraceEvent::arg2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyEnqueueNopFtraceEvent.arg2)
  return _internal_arg2();
}
inline void TrustyEnqueueNopFtraceEvent::set_arg2(::uint32_t value) {
  _internal_set_arg2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyEnqueueNopFtraceEvent.arg2)
}
inline ::uint32_t TrustyEnqueueNopFtraceEvent::_internal_arg2() const {
  return _impl_.arg2_;
}
inline void TrustyEnqueueNopFtraceEvent::_internal_set_arg2(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.arg2_ = value;
}

// optional uint32 arg3 = 3;
inline bool TrustyEnqueueNopFtraceEvent::has_arg3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrustyEnqueueNopFtraceEvent::clear_arg3() {
  _impl_.arg3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TrustyEnqueueNopFtraceEvent::arg3() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrustyEnqueueNopFtraceEvent.arg3)
  return _internal_arg3();
}
inline void TrustyEnqueueNopFtraceEvent::set_arg3(::uint32_t value) {
  _internal_set_arg3(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrustyEnqueueNopFtraceEvent.arg3)
}
inline ::uint32_t TrustyEnqueueNopFtraceEvent::_internal_arg3() const {
  return _impl_.arg3_;
}
inline void TrustyEnqueueNopFtraceEvent::_internal_set_arg3(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.arg3_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_2epb_2eh
