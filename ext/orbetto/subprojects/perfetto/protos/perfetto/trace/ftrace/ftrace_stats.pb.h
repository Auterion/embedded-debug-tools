// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto;
namespace perfetto {
namespace protos {
class FtraceCpuStats;
struct FtraceCpuStatsDefaultTypeInternal;
extern FtraceCpuStatsDefaultTypeInternal _FtraceCpuStats_default_instance_;
class FtraceStats;
struct FtraceStatsDefaultTypeInternal;
extern FtraceStatsDefaultTypeInternal _FtraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::FtraceCpuStats* Arena::CreateMaybeMessage<::perfetto::protos::FtraceCpuStats>(Arena*);
template <>
::perfetto::protos::FtraceStats* Arena::CreateMaybeMessage<::perfetto::protos::FtraceStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum FtraceStats_Phase : int {
  FtraceStats_Phase_UNSPECIFIED = 0,
  FtraceStats_Phase_START_OF_TRACE = 1,
  FtraceStats_Phase_END_OF_TRACE = 2,
};

bool FtraceStats_Phase_IsValid(int value);
constexpr FtraceStats_Phase FtraceStats_Phase_Phase_MIN = static_cast<FtraceStats_Phase>(0);
constexpr FtraceStats_Phase FtraceStats_Phase_Phase_MAX = static_cast<FtraceStats_Phase>(2);
constexpr int FtraceStats_Phase_Phase_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FtraceStats_Phase_descriptor();
template <typename T>
const std::string& FtraceStats_Phase_Name(T value) {
  static_assert(std::is_same<T, FtraceStats_Phase>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Phase_Name().");
  return FtraceStats_Phase_Name(static_cast<FtraceStats_Phase>(value));
}
template <>
inline const std::string& FtraceStats_Phase_Name(FtraceStats_Phase value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FtraceStats_Phase_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool FtraceStats_Phase_Parse(absl::string_view name, FtraceStats_Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FtraceStats_Phase>(
      FtraceStats_Phase_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FtraceCpuStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceCpuStats) */ {
 public:
  inline FtraceCpuStats() : FtraceCpuStats(nullptr) {}
  ~FtraceCpuStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceCpuStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceCpuStats(const FtraceCpuStats& from);
  FtraceCpuStats(FtraceCpuStats&& from) noexcept
    : FtraceCpuStats() {
    *this = ::std::move(from);
  }

  inline FtraceCpuStats& operator=(const FtraceCpuStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceCpuStats& operator=(FtraceCpuStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceCpuStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceCpuStats* internal_default_instance() {
    return reinterpret_cast<const FtraceCpuStats*>(
               &_FtraceCpuStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceCpuStats& a, FtraceCpuStats& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceCpuStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceCpuStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceCpuStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceCpuStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceCpuStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceCpuStats& from) {
    FtraceCpuStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceCpuStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceCpuStats";
  }
  protected:
  explicit FtraceCpuStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kEntriesFieldNumber = 2,
    kOverrunFieldNumber = 3,
    kCommitOverrunFieldNumber = 4,
    kBytesReadFieldNumber = 5,
    kOldestEventTsFieldNumber = 6,
    kNowTsFieldNumber = 7,
    kDroppedEventsFieldNumber = 8,
    kReadEventsFieldNumber = 9,
  };
  // optional uint64 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint64_t cpu() const;
  void set_cpu(::uint64_t value);

  private:
  ::uint64_t _internal_cpu() const;
  void _internal_set_cpu(::uint64_t value);

  public:
  // optional uint64 entries = 2;
  bool has_entries() const;
  void clear_entries() ;
  ::uint64_t entries() const;
  void set_entries(::uint64_t value);

  private:
  ::uint64_t _internal_entries() const;
  void _internal_set_entries(::uint64_t value);

  public:
  // optional uint64 overrun = 3;
  bool has_overrun() const;
  void clear_overrun() ;
  ::uint64_t overrun() const;
  void set_overrun(::uint64_t value);

  private:
  ::uint64_t _internal_overrun() const;
  void _internal_set_overrun(::uint64_t value);

  public:
  // optional uint64 commit_overrun = 4;
  bool has_commit_overrun() const;
  void clear_commit_overrun() ;
  ::uint64_t commit_overrun() const;
  void set_commit_overrun(::uint64_t value);

  private:
  ::uint64_t _internal_commit_overrun() const;
  void _internal_set_commit_overrun(::uint64_t value);

  public:
  // optional uint64 bytes_read = 5;
  bool has_bytes_read() const;
  void clear_bytes_read() ;
  ::uint64_t bytes_read() const;
  void set_bytes_read(::uint64_t value);

  private:
  ::uint64_t _internal_bytes_read() const;
  void _internal_set_bytes_read(::uint64_t value);

  public:
  // optional double oldest_event_ts = 6;
  bool has_oldest_event_ts() const;
  void clear_oldest_event_ts() ;
  double oldest_event_ts() const;
  void set_oldest_event_ts(double value);

  private:
  double _internal_oldest_event_ts() const;
  void _internal_set_oldest_event_ts(double value);

  public:
  // optional double now_ts = 7;
  bool has_now_ts() const;
  void clear_now_ts() ;
  double now_ts() const;
  void set_now_ts(double value);

  private:
  double _internal_now_ts() const;
  void _internal_set_now_ts(double value);

  public:
  // optional uint64 dropped_events = 8;
  bool has_dropped_events() const;
  void clear_dropped_events() ;
  ::uint64_t dropped_events() const;
  void set_dropped_events(::uint64_t value);

  private:
  ::uint64_t _internal_dropped_events() const;
  void _internal_set_dropped_events(::uint64_t value);

  public:
  // optional uint64 read_events = 9;
  bool has_read_events() const;
  void clear_read_events() ;
  ::uint64_t read_events() const;
  void set_read_events(::uint64_t value);

  private:
  ::uint64_t _internal_read_events() const;
  void _internal_set_read_events(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceCpuStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t cpu_;
    ::uint64_t entries_;
    ::uint64_t overrun_;
    ::uint64_t commit_overrun_;
    ::uint64_t bytes_read_;
    double oldest_event_ts_;
    double now_ts_;
    ::uint64_t dropped_events_;
    ::uint64_t read_events_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto;
};// -------------------------------------------------------------------

class FtraceStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceStats) */ {
 public:
  inline FtraceStats() : FtraceStats(nullptr) {}
  ~FtraceStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceStats(const FtraceStats& from);
  FtraceStats(FtraceStats&& from) noexcept
    : FtraceStats() {
    *this = ::std::move(from);
  }

  inline FtraceStats& operator=(const FtraceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceStats& operator=(FtraceStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceStats* internal_default_instance() {
    return reinterpret_cast<const FtraceStats*>(
               &_FtraceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtraceStats& a, FtraceStats& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceStats& from) {
    FtraceStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceStats";
  }
  protected:
  explicit FtraceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Phase = FtraceStats_Phase;
  static constexpr Phase UNSPECIFIED = FtraceStats_Phase_UNSPECIFIED;
  static constexpr Phase START_OF_TRACE = FtraceStats_Phase_START_OF_TRACE;
  static constexpr Phase END_OF_TRACE = FtraceStats_Phase_END_OF_TRACE;
  static inline bool Phase_IsValid(int value) {
    return FtraceStats_Phase_IsValid(value);
  }
  static constexpr Phase Phase_MIN = FtraceStats_Phase_Phase_MIN;
  static constexpr Phase Phase_MAX = FtraceStats_Phase_Phase_MAX;
  static constexpr int Phase_ARRAYSIZE = FtraceStats_Phase_Phase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor() {
    return FtraceStats_Phase_descriptor();
  }
  template <typename T>
  static inline const std::string& Phase_Name(T value) {
    return FtraceStats_Phase_Name(value);
  }
  static inline bool Phase_Parse(absl::string_view name, Phase* value) {
    return FtraceStats_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCpuStatsFieldNumber = 2,
    kUnknownFtraceEventsFieldNumber = 6,
    kFailedFtraceEventsFieldNumber = 7,
    kAtraceErrorsFieldNumber = 5,
    kPhaseFieldNumber = 1,
    kKernelSymbolsParsedFieldNumber = 3,
    kKernelSymbolsMemKbFieldNumber = 4,
    kPreserveFtraceBufferFieldNumber = 8,
  };
  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  int cpu_stats_size() const;
  private:
  int _internal_cpu_stats_size() const;

  public:
  void clear_cpu_stats() ;
  ::perfetto::protos::FtraceCpuStats* mutable_cpu_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceCpuStats >*
      mutable_cpu_stats();
  private:
  const ::perfetto::protos::FtraceCpuStats& _internal_cpu_stats(int index) const;
  ::perfetto::protos::FtraceCpuStats* _internal_add_cpu_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceCpuStats>& _internal_cpu_stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceCpuStats>* _internal_mutable_cpu_stats();
  public:
  const ::perfetto::protos::FtraceCpuStats& cpu_stats(int index) const;
  ::perfetto::protos::FtraceCpuStats* add_cpu_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceCpuStats >&
      cpu_stats() const;
  // repeated string unknown_ftrace_events = 6;
  int unknown_ftrace_events_size() const;
  private:
  int _internal_unknown_ftrace_events_size() const;

  public:
  void clear_unknown_ftrace_events() ;
  const std::string& unknown_ftrace_events(int index) const;
  std::string* mutable_unknown_ftrace_events(int index);
  void set_unknown_ftrace_events(int index, const std::string& value);
  void set_unknown_ftrace_events(int index, std::string&& value);
  void set_unknown_ftrace_events(int index, const char* value);
  void set_unknown_ftrace_events(int index, const char* value, std::size_t size);
  void set_unknown_ftrace_events(int index, absl::string_view value);
  std::string* add_unknown_ftrace_events();
  void add_unknown_ftrace_events(const std::string& value);
  void add_unknown_ftrace_events(std::string&& value);
  void add_unknown_ftrace_events(const char* value);
  void add_unknown_ftrace_events(const char* value, std::size_t size);
  void add_unknown_ftrace_events(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unknown_ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unknown_ftrace_events();

  private:
  const std::string& _internal_unknown_ftrace_events(int index) const;
  std::string* _internal_add_unknown_ftrace_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_unknown_ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_unknown_ftrace_events();

  public:
  // repeated string failed_ftrace_events = 7;
  int failed_ftrace_events_size() const;
  private:
  int _internal_failed_ftrace_events_size() const;

  public:
  void clear_failed_ftrace_events() ;
  const std::string& failed_ftrace_events(int index) const;
  std::string* mutable_failed_ftrace_events(int index);
  void set_failed_ftrace_events(int index, const std::string& value);
  void set_failed_ftrace_events(int index, std::string&& value);
  void set_failed_ftrace_events(int index, const char* value);
  void set_failed_ftrace_events(int index, const char* value, std::size_t size);
  void set_failed_ftrace_events(int index, absl::string_view value);
  std::string* add_failed_ftrace_events();
  void add_failed_ftrace_events(const std::string& value);
  void add_failed_ftrace_events(std::string&& value);
  void add_failed_ftrace_events(const char* value);
  void add_failed_ftrace_events(const char* value, std::size_t size);
  void add_failed_ftrace_events(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed_ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed_ftrace_events();

  private:
  const std::string& _internal_failed_ftrace_events(int index) const;
  std::string* _internal_add_failed_ftrace_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_failed_ftrace_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_failed_ftrace_events();

  public:
  // optional string atrace_errors = 5;
  bool has_atrace_errors() const;
  void clear_atrace_errors() ;
  const std::string& atrace_errors() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_atrace_errors(Arg_&& arg, Args_... args);
  std::string* mutable_atrace_errors();
  PROTOBUF_NODISCARD std::string* release_atrace_errors();
  void set_allocated_atrace_errors(std::string* ptr);

  private:
  const std::string& _internal_atrace_errors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atrace_errors(
      const std::string& value);
  std::string* _internal_mutable_atrace_errors();

  public:
  // optional .perfetto.protos.FtraceStats.Phase phase = 1;
  bool has_phase() const;
  void clear_phase() ;
  ::perfetto::protos::FtraceStats_Phase phase() const;
  void set_phase(::perfetto::protos::FtraceStats_Phase value);

  private:
  ::perfetto::protos::FtraceStats_Phase _internal_phase() const;
  void _internal_set_phase(::perfetto::protos::FtraceStats_Phase value);

  public:
  // optional uint32 kernel_symbols_parsed = 3;
  bool has_kernel_symbols_parsed() const;
  void clear_kernel_symbols_parsed() ;
  ::uint32_t kernel_symbols_parsed() const;
  void set_kernel_symbols_parsed(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_symbols_parsed() const;
  void _internal_set_kernel_symbols_parsed(::uint32_t value);

  public:
  // optional uint32 kernel_symbols_mem_kb = 4;
  bool has_kernel_symbols_mem_kb() const;
  void clear_kernel_symbols_mem_kb() ;
  ::uint32_t kernel_symbols_mem_kb() const;
  void set_kernel_symbols_mem_kb(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_symbols_mem_kb() const;
  void _internal_set_kernel_symbols_mem_kb(::uint32_t value);

  public:
  // optional bool preserve_ftrace_buffer = 8;
  bool has_preserve_ftrace_buffer() const;
  void clear_preserve_ftrace_buffer() ;
  bool preserve_ftrace_buffer() const;
  void set_preserve_ftrace_buffer(bool value);

  private:
  bool _internal_preserve_ftrace_buffer() const;
  void _internal_set_preserve_ftrace_buffer(bool value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceCpuStats > cpu_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unknown_ftrace_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_ftrace_events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atrace_errors_;
    int phase_;
    ::uint32_t kernel_symbols_parsed_;
    ::uint32_t kernel_symbols_mem_kb_;
    bool preserve_ftrace_buffer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FtraceCpuStats

// optional uint64 cpu = 1;
inline bool FtraceCpuStats::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_cpu() {
  _impl_.cpu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t FtraceCpuStats::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.cpu)
  return _internal_cpu();
}
inline void FtraceCpuStats::set_cpu(::uint64_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.cpu)
}
inline ::uint64_t FtraceCpuStats::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void FtraceCpuStats::_internal_set_cpu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpu_ = value;
}

// optional uint64 entries = 2;
inline bool FtraceCpuStats::has_entries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_entries() {
  _impl_.entries_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t FtraceCpuStats::entries() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.entries)
  return _internal_entries();
}
inline void FtraceCpuStats::set_entries(::uint64_t value) {
  _internal_set_entries(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.entries)
}
inline ::uint64_t FtraceCpuStats::_internal_entries() const {
  return _impl_.entries_;
}
inline void FtraceCpuStats::_internal_set_entries(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entries_ = value;
}

// optional uint64 overrun = 3;
inline bool FtraceCpuStats::has_overrun() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_overrun() {
  _impl_.overrun_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t FtraceCpuStats::overrun() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.overrun)
  return _internal_overrun();
}
inline void FtraceCpuStats::set_overrun(::uint64_t value) {
  _internal_set_overrun(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.overrun)
}
inline ::uint64_t FtraceCpuStats::_internal_overrun() const {
  return _impl_.overrun_;
}
inline void FtraceCpuStats::_internal_set_overrun(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.overrun_ = value;
}

// optional uint64 commit_overrun = 4;
inline bool FtraceCpuStats::has_commit_overrun() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_commit_overrun() {
  _impl_.commit_overrun_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t FtraceCpuStats::commit_overrun() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.commit_overrun)
  return _internal_commit_overrun();
}
inline void FtraceCpuStats::set_commit_overrun(::uint64_t value) {
  _internal_set_commit_overrun(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.commit_overrun)
}
inline ::uint64_t FtraceCpuStats::_internal_commit_overrun() const {
  return _impl_.commit_overrun_;
}
inline void FtraceCpuStats::_internal_set_commit_overrun(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.commit_overrun_ = value;
}

// optional uint64 bytes_read = 5;
inline bool FtraceCpuStats::has_bytes_read() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_bytes_read() {
  _impl_.bytes_read_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t FtraceCpuStats::bytes_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.bytes_read)
  return _internal_bytes_read();
}
inline void FtraceCpuStats::set_bytes_read(::uint64_t value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.bytes_read)
}
inline ::uint64_t FtraceCpuStats::_internal_bytes_read() const {
  return _impl_.bytes_read_;
}
inline void FtraceCpuStats::_internal_set_bytes_read(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bytes_read_ = value;
}

// optional double oldest_event_ts = 6;
inline bool FtraceCpuStats::has_oldest_event_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_oldest_event_ts() {
  _impl_.oldest_event_ts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double FtraceCpuStats::oldest_event_ts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.oldest_event_ts)
  return _internal_oldest_event_ts();
}
inline void FtraceCpuStats::set_oldest_event_ts(double value) {
  _internal_set_oldest_event_ts(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.oldest_event_ts)
}
inline double FtraceCpuStats::_internal_oldest_event_ts() const {
  return _impl_.oldest_event_ts_;
}
inline void FtraceCpuStats::_internal_set_oldest_event_ts(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.oldest_event_ts_ = value;
}

// optional double now_ts = 7;
inline bool FtraceCpuStats::has_now_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_now_ts() {
  _impl_.now_ts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double FtraceCpuStats::now_ts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.now_ts)
  return _internal_now_ts();
}
inline void FtraceCpuStats::set_now_ts(double value) {
  _internal_set_now_ts(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.now_ts)
}
inline double FtraceCpuStats::_internal_now_ts() const {
  return _impl_.now_ts_;
}
inline void FtraceCpuStats::_internal_set_now_ts(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.now_ts_ = value;
}

// optional uint64 dropped_events = 8;
inline bool FtraceCpuStats::has_dropped_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_dropped_events() {
  _impl_.dropped_events_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t FtraceCpuStats::dropped_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.dropped_events)
  return _internal_dropped_events();
}
inline void FtraceCpuStats::set_dropped_events(::uint64_t value) {
  _internal_set_dropped_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.dropped_events)
}
inline ::uint64_t FtraceCpuStats::_internal_dropped_events() const {
  return _impl_.dropped_events_;
}
inline void FtraceCpuStats::_internal_set_dropped_events(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.dropped_events_ = value;
}

// optional uint64 read_events = 9;
inline bool FtraceCpuStats::has_read_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void FtraceCpuStats::clear_read_events() {
  _impl_.read_events_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t FtraceCpuStats::read_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceCpuStats.read_events)
  return _internal_read_events();
}
inline void FtraceCpuStats::set_read_events(::uint64_t value) {
  _internal_set_read_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceCpuStats.read_events)
}
inline ::uint64_t FtraceCpuStats::_internal_read_events() const {
  return _impl_.read_events_;
}
inline void FtraceCpuStats::_internal_set_read_events(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.read_events_ = value;
}

// -------------------------------------------------------------------

// FtraceStats

// optional .perfetto.protos.FtraceStats.Phase phase = 1;
inline bool FtraceStats::has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FtraceStats::clear_phase() {
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::perfetto::protos::FtraceStats_Phase FtraceStats::phase() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.phase)
  return _internal_phase();
}
inline void FtraceStats::set_phase(::perfetto::protos::FtraceStats_Phase value) {
   _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.phase)
}
inline ::perfetto::protos::FtraceStats_Phase FtraceStats::_internal_phase() const {
  return static_cast<::perfetto::protos::FtraceStats_Phase>(_impl_.phase_);
}
inline void FtraceStats::_internal_set_phase(::perfetto::protos::FtraceStats_Phase value) {
  assert(::perfetto::protos::FtraceStats_Phase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phase_ = value;
}

// repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
inline int FtraceStats::_internal_cpu_stats_size() const {
  return _impl_.cpu_stats_.size();
}
inline int FtraceStats::cpu_stats_size() const {
  return _internal_cpu_stats_size();
}
inline void FtraceStats::clear_cpu_stats() {
  _internal_mutable_cpu_stats()->Clear();
}
inline ::perfetto::protos::FtraceCpuStats* FtraceStats::mutable_cpu_stats(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceStats.cpu_stats)
  return _internal_mutable_cpu_stats()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceCpuStats >*
FtraceStats::mutable_cpu_stats() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceStats.cpu_stats)
  return _internal_mutable_cpu_stats();
}
inline const ::perfetto::protos::FtraceCpuStats& FtraceStats::_internal_cpu_stats(int index) const {
  return _internal_cpu_stats().Get(index);
}
inline const ::perfetto::protos::FtraceCpuStats& FtraceStats::cpu_stats(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.cpu_stats)
  return _internal_cpu_stats(index);
}
inline ::perfetto::protos::FtraceCpuStats* FtraceStats::_internal_add_cpu_stats() {
  return _internal_mutable_cpu_stats()->Add();
}
inline ::perfetto::protos::FtraceCpuStats* FtraceStats::add_cpu_stats() {
  ::perfetto::protos::FtraceCpuStats* _add = _internal_add_cpu_stats();
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceStats.cpu_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceCpuStats >&
FtraceStats::cpu_stats() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceStats.cpu_stats)
  return _internal_cpu_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceCpuStats>&
FtraceStats::_internal_cpu_stats() const {
  return _impl_.cpu_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceCpuStats>*
FtraceStats::_internal_mutable_cpu_stats() {
  return &_impl_.cpu_stats_;
}

// optional uint32 kernel_symbols_parsed = 3;
inline bool FtraceStats::has_kernel_symbols_parsed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FtraceStats::clear_kernel_symbols_parsed() {
  _impl_.kernel_symbols_parsed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FtraceStats::kernel_symbols_parsed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.kernel_symbols_parsed)
  return _internal_kernel_symbols_parsed();
}
inline void FtraceStats::set_kernel_symbols_parsed(::uint32_t value) {
  _internal_set_kernel_symbols_parsed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.kernel_symbols_parsed)
}
inline ::uint32_t FtraceStats::_internal_kernel_symbols_parsed() const {
  return _impl_.kernel_symbols_parsed_;
}
inline void FtraceStats::_internal_set_kernel_symbols_parsed(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.kernel_symbols_parsed_ = value;
}

// optional uint32 kernel_symbols_mem_kb = 4;
inline bool FtraceStats::has_kernel_symbols_mem_kb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FtraceStats::clear_kernel_symbols_mem_kb() {
  _impl_.kernel_symbols_mem_kb_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FtraceStats::kernel_symbols_mem_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.kernel_symbols_mem_kb)
  return _internal_kernel_symbols_mem_kb();
}
inline void FtraceStats::set_kernel_symbols_mem_kb(::uint32_t value) {
  _internal_set_kernel_symbols_mem_kb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.kernel_symbols_mem_kb)
}
inline ::uint32_t FtraceStats::_internal_kernel_symbols_mem_kb() const {
  return _impl_.kernel_symbols_mem_kb_;
}
inline void FtraceStats::_internal_set_kernel_symbols_mem_kb(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kernel_symbols_mem_kb_ = value;
}

// optional string atrace_errors = 5;
inline bool FtraceStats::has_atrace_errors() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceStats::clear_atrace_errors() {
  _impl_.atrace_errors_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FtraceStats::atrace_errors() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.atrace_errors)
  return _internal_atrace_errors();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FtraceStats::set_atrace_errors(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.atrace_errors_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.atrace_errors)
}
inline std::string* FtraceStats::mutable_atrace_errors() {
  std::string* _s = _internal_mutable_atrace_errors();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceStats.atrace_errors)
  return _s;
}
inline const std::string& FtraceStats::_internal_atrace_errors() const {
  return _impl_.atrace_errors_.Get();
}
inline void FtraceStats::_internal_set_atrace_errors(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.atrace_errors_.Set(value, GetArenaForAllocation());
}
inline std::string* FtraceStats::_internal_mutable_atrace_errors() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.atrace_errors_.Mutable( GetArenaForAllocation());
}
inline std::string* FtraceStats::release_atrace_errors() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceStats.atrace_errors)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.atrace_errors_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atrace_errors_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FtraceStats::set_allocated_atrace_errors(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.atrace_errors_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.atrace_errors_.IsDefault()) {
          _impl_.atrace_errors_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceStats.atrace_errors)
}

// repeated string unknown_ftrace_events = 6;
inline int FtraceStats::_internal_unknown_ftrace_events_size() const {
  return _impl_.unknown_ftrace_events_.size();
}
inline int FtraceStats::unknown_ftrace_events_size() const {
  return _internal_unknown_ftrace_events_size();
}
inline void FtraceStats::clear_unknown_ftrace_events() {
  _internal_mutable_unknown_ftrace_events()->Clear();
}
inline std::string* FtraceStats::add_unknown_ftrace_events() {
  std::string* _s = _internal_add_unknown_ftrace_events();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceStats.unknown_ftrace_events)
  return _s;
}
inline const std::string& FtraceStats::unknown_ftrace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.unknown_ftrace_events)
  return _internal_unknown_ftrace_events(index);
}
inline std::string* FtraceStats::mutable_unknown_ftrace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceStats.unknown_ftrace_events)
  return _internal_mutable_unknown_ftrace_events()->Mutable(index);
}
inline void FtraceStats::set_unknown_ftrace_events(int index, const std::string& value) {
  _internal_mutable_unknown_ftrace_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::set_unknown_ftrace_events(int index, std::string&& value) {
  _internal_mutable_unknown_ftrace_events()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::set_unknown_ftrace_events(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_unknown_ftrace_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::set_unknown_ftrace_events(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_unknown_ftrace_events()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::set_unknown_ftrace_events(int index, absl::string_view value) {
  _internal_mutable_unknown_ftrace_events()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::add_unknown_ftrace_events(const std::string& value) {
  _internal_mutable_unknown_ftrace_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::add_unknown_ftrace_events(std::string&& value) {
  _internal_mutable_unknown_ftrace_events()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::add_unknown_ftrace_events(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_unknown_ftrace_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::add_unknown_ftrace_events(const char* value, std::size_t size) {
  _internal_mutable_unknown_ftrace_events()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline void FtraceStats::add_unknown_ftrace_events(absl::string_view value) {
  _internal_mutable_unknown_ftrace_events()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceStats.unknown_ftrace_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceStats::unknown_ftrace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceStats.unknown_ftrace_events)
  return _internal_unknown_ftrace_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceStats::mutable_unknown_ftrace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceStats.unknown_ftrace_events)
  return _internal_mutable_unknown_ftrace_events();
}
inline const std::string& FtraceStats::_internal_unknown_ftrace_events(int index) const {
  return _internal_unknown_ftrace_events().Get(index);
}
inline std::string* FtraceStats::_internal_add_unknown_ftrace_events() {
  return _internal_mutable_unknown_ftrace_events()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceStats::_internal_unknown_ftrace_events() const {
  return _impl_.unknown_ftrace_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceStats::_internal_mutable_unknown_ftrace_events() {
  return &_impl_.unknown_ftrace_events_;
}

// repeated string failed_ftrace_events = 7;
inline int FtraceStats::_internal_failed_ftrace_events_size() const {
  return _impl_.failed_ftrace_events_.size();
}
inline int FtraceStats::failed_ftrace_events_size() const {
  return _internal_failed_ftrace_events_size();
}
inline void FtraceStats::clear_failed_ftrace_events() {
  _internal_mutable_failed_ftrace_events()->Clear();
}
inline std::string* FtraceStats::add_failed_ftrace_events() {
  std::string* _s = _internal_add_failed_ftrace_events();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceStats.failed_ftrace_events)
  return _s;
}
inline const std::string& FtraceStats::failed_ftrace_events(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.failed_ftrace_events)
  return _internal_failed_ftrace_events(index);
}
inline std::string* FtraceStats::mutable_failed_ftrace_events(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceStats.failed_ftrace_events)
  return _internal_mutable_failed_ftrace_events()->Mutable(index);
}
inline void FtraceStats::set_failed_ftrace_events(int index, const std::string& value) {
  _internal_mutable_failed_ftrace_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::set_failed_ftrace_events(int index, std::string&& value) {
  _internal_mutable_failed_ftrace_events()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::set_failed_ftrace_events(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_failed_ftrace_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::set_failed_ftrace_events(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_failed_ftrace_events()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::set_failed_ftrace_events(int index, absl::string_view value) {
  _internal_mutable_failed_ftrace_events()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::add_failed_ftrace_events(const std::string& value) {
  _internal_mutable_failed_ftrace_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::add_failed_ftrace_events(std::string&& value) {
  _internal_mutable_failed_ftrace_events()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::add_failed_ftrace_events(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_failed_ftrace_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::add_failed_ftrace_events(const char* value, std::size_t size) {
  _internal_mutable_failed_ftrace_events()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline void FtraceStats::add_failed_ftrace_events(absl::string_view value) {
  _internal_mutable_failed_ftrace_events()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceStats.failed_ftrace_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceStats::failed_ftrace_events() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceStats.failed_ftrace_events)
  return _internal_failed_ftrace_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceStats::mutable_failed_ftrace_events() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceStats.failed_ftrace_events)
  return _internal_mutable_failed_ftrace_events();
}
inline const std::string& FtraceStats::_internal_failed_ftrace_events(int index) const {
  return _internal_failed_ftrace_events().Get(index);
}
inline std::string* FtraceStats::_internal_add_failed_ftrace_events() {
  return _internal_mutable_failed_ftrace_events()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceStats::_internal_failed_ftrace_events() const {
  return _impl_.failed_ftrace_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceStats::_internal_mutable_failed_ftrace_events() {
  return &_impl_.failed_ftrace_events_;
}

// optional bool preserve_ftrace_buffer = 8;
inline bool FtraceStats::has_preserve_ftrace_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FtraceStats::clear_preserve_ftrace_buffer() {
  _impl_.preserve_ftrace_buffer_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FtraceStats::preserve_ftrace_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceStats.preserve_ftrace_buffer)
  return _internal_preserve_ftrace_buffer();
}
inline void FtraceStats::set_preserve_ftrace_buffer(bool value) {
  _internal_set_preserve_ftrace_buffer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceStats.preserve_ftrace_buffer)
}
inline bool FtraceStats::_internal_preserve_ftrace_buffer() const {
  return _impl_.preserve_ftrace_buffer_;
}
inline void FtraceStats::_internal_set_preserve_ftrace_buffer(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.preserve_ftrace_buffer_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::FtraceStats_Phase> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FtraceStats_Phase>() {
  return ::perfetto::protos::FtraceStats_Phase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_2epb_2eh
