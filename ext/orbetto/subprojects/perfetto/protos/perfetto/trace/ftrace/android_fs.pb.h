// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/android_fs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
namespace perfetto {
namespace protos {
class AndroidFsDatareadEndFtraceEvent;
struct AndroidFsDatareadEndFtraceEventDefaultTypeInternal;
extern AndroidFsDatareadEndFtraceEventDefaultTypeInternal _AndroidFsDatareadEndFtraceEvent_default_instance_;
class AndroidFsDatareadStartFtraceEvent;
struct AndroidFsDatareadStartFtraceEventDefaultTypeInternal;
extern AndroidFsDatareadStartFtraceEventDefaultTypeInternal _AndroidFsDatareadStartFtraceEvent_default_instance_;
class AndroidFsDatawriteEndFtraceEvent;
struct AndroidFsDatawriteEndFtraceEventDefaultTypeInternal;
extern AndroidFsDatawriteEndFtraceEventDefaultTypeInternal _AndroidFsDatawriteEndFtraceEvent_default_instance_;
class AndroidFsDatawriteStartFtraceEvent;
struct AndroidFsDatawriteStartFtraceEventDefaultTypeInternal;
extern AndroidFsDatawriteStartFtraceEventDefaultTypeInternal _AndroidFsDatawriteStartFtraceEvent_default_instance_;
class AndroidFsFsyncEndFtraceEvent;
struct AndroidFsFsyncEndFtraceEventDefaultTypeInternal;
extern AndroidFsFsyncEndFtraceEventDefaultTypeInternal _AndroidFsFsyncEndFtraceEvent_default_instance_;
class AndroidFsFsyncStartFtraceEvent;
struct AndroidFsFsyncStartFtraceEventDefaultTypeInternal;
extern AndroidFsFsyncStartFtraceEventDefaultTypeInternal _AndroidFsFsyncStartFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::AndroidFsDatareadEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidFsDatareadEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::AndroidFsDatareadStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidFsDatareadStartFtraceEvent>(Arena*);
template <>
::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidFsDatawriteEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidFsDatawriteStartFtraceEvent>(Arena*);
template <>
::perfetto::protos::AndroidFsFsyncEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidFsFsyncEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::AndroidFsFsyncStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::AndroidFsFsyncStartFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class AndroidFsDatareadEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidFsDatareadEndFtraceEvent) */ {
 public:
  inline AndroidFsDatareadEndFtraceEvent() : AndroidFsDatareadEndFtraceEvent(nullptr) {}
  ~AndroidFsDatareadEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AndroidFsDatareadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidFsDatareadEndFtraceEvent(const AndroidFsDatareadEndFtraceEvent& from);
  AndroidFsDatareadEndFtraceEvent(AndroidFsDatareadEndFtraceEvent&& from) noexcept
    : AndroidFsDatareadEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline AndroidFsDatareadEndFtraceEvent& operator=(const AndroidFsDatareadEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidFsDatareadEndFtraceEvent& operator=(AndroidFsDatareadEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidFsDatareadEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidFsDatareadEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidFsDatareadEndFtraceEvent*>(
               &_AndroidFsDatareadEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AndroidFsDatareadEndFtraceEvent& a, AndroidFsDatareadEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidFsDatareadEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidFsDatareadEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidFsDatareadEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidFsDatareadEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidFsDatareadEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidFsDatareadEndFtraceEvent& from) {
    AndroidFsDatareadEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidFsDatareadEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.AndroidFsDatareadEndFtraceEvent";
  }
  protected:
  explicit AndroidFsDatareadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kBytesFieldNumber = 1,
  };
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int32 bytes = 1;
  bool has_bytes() const;
  void clear_bytes() ;
  ::int32_t bytes() const;
  void set_bytes(::int32_t value);

  private:
  ::int32_t _internal_bytes() const;
  void _internal_set_bytes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidFsDatareadEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int32_t bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
};// -------------------------------------------------------------------

class AndroidFsDatareadStartFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidFsDatareadStartFtraceEvent) */ {
 public:
  inline AndroidFsDatareadStartFtraceEvent() : AndroidFsDatareadStartFtraceEvent(nullptr) {}
  ~AndroidFsDatareadStartFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AndroidFsDatareadStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidFsDatareadStartFtraceEvent(const AndroidFsDatareadStartFtraceEvent& from);
  AndroidFsDatareadStartFtraceEvent(AndroidFsDatareadStartFtraceEvent&& from) noexcept
    : AndroidFsDatareadStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline AndroidFsDatareadStartFtraceEvent& operator=(const AndroidFsDatareadStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidFsDatareadStartFtraceEvent& operator=(AndroidFsDatareadStartFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidFsDatareadStartFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidFsDatareadStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidFsDatareadStartFtraceEvent*>(
               &_AndroidFsDatareadStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidFsDatareadStartFtraceEvent& a, AndroidFsDatareadStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidFsDatareadStartFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidFsDatareadStartFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidFsDatareadStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidFsDatareadStartFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidFsDatareadStartFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidFsDatareadStartFtraceEvent& from) {
    AndroidFsDatareadStartFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidFsDatareadStartFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.AndroidFsDatareadStartFtraceEvent";
  }
  protected:
  explicit AndroidFsDatareadStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdlineFieldNumber = 2,
    kPathbufFieldNumber = 6,
    kISizeFieldNumber = 3,
    kInoFieldNumber = 4,
    kBytesFieldNumber = 1,
    kPidFieldNumber = 7,
    kOffsetFieldNumber = 5,
  };
  // optional string cmdline = 2;
  bool has_cmdline() const;
  void clear_cmdline() ;
  const std::string& cmdline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmdline(Arg_&& arg, Args_... args);
  std::string* mutable_cmdline();
  PROTOBUF_NODISCARD std::string* release_cmdline();
  void set_allocated_cmdline(std::string* ptr);

  private:
  const std::string& _internal_cmdline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmdline(
      const std::string& value);
  std::string* _internal_mutable_cmdline();

  public:
  // optional string pathbuf = 6;
  bool has_pathbuf() const;
  void clear_pathbuf() ;
  const std::string& pathbuf() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pathbuf(Arg_&& arg, Args_... args);
  std::string* mutable_pathbuf();
  PROTOBUF_NODISCARD std::string* release_pathbuf();
  void set_allocated_pathbuf(std::string* ptr);

  private:
  const std::string& _internal_pathbuf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathbuf(
      const std::string& value);
  std::string* _internal_mutable_pathbuf();

  public:
  // optional int64 i_size = 3;
  bool has_i_size() const;
  void clear_i_size() ;
  ::int64_t i_size() const;
  void set_i_size(::int64_t value);

  private:
  ::int64_t _internal_i_size() const;
  void _internal_set_i_size(::int64_t value);

  public:
  // optional uint64 ino = 4;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 bytes = 1;
  bool has_bytes() const;
  void clear_bytes() ;
  ::int32_t bytes() const;
  void set_bytes(::int32_t value);

  private:
  ::int32_t _internal_bytes() const;
  void _internal_set_bytes(::int32_t value);

  public:
  // optional int32 pid = 7;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int64 offset = 5;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidFsDatareadStartFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdline_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathbuf_;
    ::int64_t i_size_;
    ::uint64_t ino_;
    ::int32_t bytes_;
    ::int32_t pid_;
    ::int64_t offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
};// -------------------------------------------------------------------

class AndroidFsDatawriteEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidFsDatawriteEndFtraceEvent) */ {
 public:
  inline AndroidFsDatawriteEndFtraceEvent() : AndroidFsDatawriteEndFtraceEvent(nullptr) {}
  ~AndroidFsDatawriteEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AndroidFsDatawriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidFsDatawriteEndFtraceEvent(const AndroidFsDatawriteEndFtraceEvent& from);
  AndroidFsDatawriteEndFtraceEvent(AndroidFsDatawriteEndFtraceEvent&& from) noexcept
    : AndroidFsDatawriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline AndroidFsDatawriteEndFtraceEvent& operator=(const AndroidFsDatawriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidFsDatawriteEndFtraceEvent& operator=(AndroidFsDatawriteEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidFsDatawriteEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidFsDatawriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidFsDatawriteEndFtraceEvent*>(
               &_AndroidFsDatawriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AndroidFsDatawriteEndFtraceEvent& a, AndroidFsDatawriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidFsDatawriteEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidFsDatawriteEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidFsDatawriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidFsDatawriteEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidFsDatawriteEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidFsDatawriteEndFtraceEvent& from) {
    AndroidFsDatawriteEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidFsDatawriteEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.AndroidFsDatawriteEndFtraceEvent";
  }
  protected:
  explicit AndroidFsDatawriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kBytesFieldNumber = 1,
  };
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int32 bytes = 1;
  bool has_bytes() const;
  void clear_bytes() ;
  ::int32_t bytes() const;
  void set_bytes(::int32_t value);

  private:
  ::int32_t _internal_bytes() const;
  void _internal_set_bytes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidFsDatawriteEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int32_t bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
};// -------------------------------------------------------------------

class AndroidFsDatawriteStartFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidFsDatawriteStartFtraceEvent) */ {
 public:
  inline AndroidFsDatawriteStartFtraceEvent() : AndroidFsDatawriteStartFtraceEvent(nullptr) {}
  ~AndroidFsDatawriteStartFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AndroidFsDatawriteStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidFsDatawriteStartFtraceEvent(const AndroidFsDatawriteStartFtraceEvent& from);
  AndroidFsDatawriteStartFtraceEvent(AndroidFsDatawriteStartFtraceEvent&& from) noexcept
    : AndroidFsDatawriteStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline AndroidFsDatawriteStartFtraceEvent& operator=(const AndroidFsDatawriteStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidFsDatawriteStartFtraceEvent& operator=(AndroidFsDatawriteStartFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidFsDatawriteStartFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidFsDatawriteStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidFsDatawriteStartFtraceEvent*>(
               &_AndroidFsDatawriteStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AndroidFsDatawriteStartFtraceEvent& a, AndroidFsDatawriteStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidFsDatawriteStartFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidFsDatawriteStartFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidFsDatawriteStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidFsDatawriteStartFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidFsDatawriteStartFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidFsDatawriteStartFtraceEvent& from) {
    AndroidFsDatawriteStartFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidFsDatawriteStartFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.AndroidFsDatawriteStartFtraceEvent";
  }
  protected:
  explicit AndroidFsDatawriteStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdlineFieldNumber = 2,
    kPathbufFieldNumber = 6,
    kISizeFieldNumber = 3,
    kInoFieldNumber = 4,
    kBytesFieldNumber = 1,
    kPidFieldNumber = 7,
    kOffsetFieldNumber = 5,
  };
  // optional string cmdline = 2;
  bool has_cmdline() const;
  void clear_cmdline() ;
  const std::string& cmdline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmdline(Arg_&& arg, Args_... args);
  std::string* mutable_cmdline();
  PROTOBUF_NODISCARD std::string* release_cmdline();
  void set_allocated_cmdline(std::string* ptr);

  private:
  const std::string& _internal_cmdline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmdline(
      const std::string& value);
  std::string* _internal_mutable_cmdline();

  public:
  // optional string pathbuf = 6;
  bool has_pathbuf() const;
  void clear_pathbuf() ;
  const std::string& pathbuf() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pathbuf(Arg_&& arg, Args_... args);
  std::string* mutable_pathbuf();
  PROTOBUF_NODISCARD std::string* release_pathbuf();
  void set_allocated_pathbuf(std::string* ptr);

  private:
  const std::string& _internal_pathbuf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathbuf(
      const std::string& value);
  std::string* _internal_mutable_pathbuf();

  public:
  // optional int64 i_size = 3;
  bool has_i_size() const;
  void clear_i_size() ;
  ::int64_t i_size() const;
  void set_i_size(::int64_t value);

  private:
  ::int64_t _internal_i_size() const;
  void _internal_set_i_size(::int64_t value);

  public:
  // optional uint64 ino = 4;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 bytes = 1;
  bool has_bytes() const;
  void clear_bytes() ;
  ::int32_t bytes() const;
  void set_bytes(::int32_t value);

  private:
  ::int32_t _internal_bytes() const;
  void _internal_set_bytes(::int32_t value);

  public:
  // optional int32 pid = 7;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int64 offset = 5;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidFsDatawriteStartFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdline_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathbuf_;
    ::int64_t i_size_;
    ::uint64_t ino_;
    ::int32_t bytes_;
    ::int32_t pid_;
    ::int64_t offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
};// -------------------------------------------------------------------

class AndroidFsFsyncEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidFsFsyncEndFtraceEvent) */ {
 public:
  inline AndroidFsFsyncEndFtraceEvent() : AndroidFsFsyncEndFtraceEvent(nullptr) {}
  ~AndroidFsFsyncEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AndroidFsFsyncEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidFsFsyncEndFtraceEvent(const AndroidFsFsyncEndFtraceEvent& from);
  AndroidFsFsyncEndFtraceEvent(AndroidFsFsyncEndFtraceEvent&& from) noexcept
    : AndroidFsFsyncEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline AndroidFsFsyncEndFtraceEvent& operator=(const AndroidFsFsyncEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidFsFsyncEndFtraceEvent& operator=(AndroidFsFsyncEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidFsFsyncEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidFsFsyncEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidFsFsyncEndFtraceEvent*>(
               &_AndroidFsFsyncEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AndroidFsFsyncEndFtraceEvent& a, AndroidFsFsyncEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidFsFsyncEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidFsFsyncEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidFsFsyncEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidFsFsyncEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidFsFsyncEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidFsFsyncEndFtraceEvent& from) {
    AndroidFsFsyncEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidFsFsyncEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.AndroidFsFsyncEndFtraceEvent";
  }
  protected:
  explicit AndroidFsFsyncEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kBytesFieldNumber = 1,
  };
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int32 bytes = 1;
  bool has_bytes() const;
  void clear_bytes() ;
  ::int32_t bytes() const;
  void set_bytes(::int32_t value);

  private:
  ::int32_t _internal_bytes() const;
  void _internal_set_bytes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidFsFsyncEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int32_t bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
};// -------------------------------------------------------------------

class AndroidFsFsyncStartFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.AndroidFsFsyncStartFtraceEvent) */ {
 public:
  inline AndroidFsFsyncStartFtraceEvent() : AndroidFsFsyncStartFtraceEvent(nullptr) {}
  ~AndroidFsFsyncStartFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AndroidFsFsyncStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AndroidFsFsyncStartFtraceEvent(const AndroidFsFsyncStartFtraceEvent& from);
  AndroidFsFsyncStartFtraceEvent(AndroidFsFsyncStartFtraceEvent&& from) noexcept
    : AndroidFsFsyncStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline AndroidFsFsyncStartFtraceEvent& operator=(const AndroidFsFsyncStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidFsFsyncStartFtraceEvent& operator=(AndroidFsFsyncStartFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AndroidFsFsyncStartFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AndroidFsFsyncStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const AndroidFsFsyncStartFtraceEvent*>(
               &_AndroidFsFsyncStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AndroidFsFsyncStartFtraceEvent& a, AndroidFsFsyncStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidFsFsyncStartFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidFsFsyncStartFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AndroidFsFsyncStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AndroidFsFsyncStartFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AndroidFsFsyncStartFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AndroidFsFsyncStartFtraceEvent& from) {
    AndroidFsFsyncStartFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidFsFsyncStartFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.AndroidFsFsyncStartFtraceEvent";
  }
  protected:
  explicit AndroidFsFsyncStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdlineFieldNumber = 1,
    kPathbufFieldNumber = 4,
    kISizeFieldNumber = 2,
    kInoFieldNumber = 3,
    kPidFieldNumber = 5,
  };
  // optional string cmdline = 1;
  bool has_cmdline() const;
  void clear_cmdline() ;
  const std::string& cmdline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmdline(Arg_&& arg, Args_... args);
  std::string* mutable_cmdline();
  PROTOBUF_NODISCARD std::string* release_cmdline();
  void set_allocated_cmdline(std::string* ptr);

  private:
  const std::string& _internal_cmdline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmdline(
      const std::string& value);
  std::string* _internal_mutable_cmdline();

  public:
  // optional string pathbuf = 4;
  bool has_pathbuf() const;
  void clear_pathbuf() ;
  const std::string& pathbuf() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pathbuf(Arg_&& arg, Args_... args);
  std::string* mutable_pathbuf();
  PROTOBUF_NODISCARD std::string* release_pathbuf();
  void set_allocated_pathbuf(std::string* ptr);

  private:
  const std::string& _internal_pathbuf() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathbuf(
      const std::string& value);
  std::string* _internal_mutable_pathbuf();

  public:
  // optional int64 i_size = 2;
  bool has_i_size() const;
  void clear_i_size() ;
  ::int64_t i_size() const;
  void set_i_size(::int64_t value);

  private:
  ::int64_t _internal_i_size() const;
  void _internal_set_i_size(::int64_t value);

  public:
  // optional uint64 ino = 3;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 pid = 5;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.AndroidFsFsyncStartFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmdline_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathbuf_;
    ::int64_t i_size_;
    ::uint64_t ino_;
    ::int32_t pid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AndroidFsDatareadEndFtraceEvent

// optional int32 bytes = 1;
inline bool AndroidFsDatareadEndFtraceEvent::has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AndroidFsDatareadEndFtraceEvent::clear_bytes() {
  _impl_.bytes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AndroidFsDatareadEndFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadEndFtraceEvent.bytes)
  return _internal_bytes();
}
inline void AndroidFsDatareadEndFtraceEvent::set_bytes(::int32_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadEndFtraceEvent.bytes)
}
inline ::int32_t AndroidFsDatareadEndFtraceEvent::_internal_bytes() const {
  return _impl_.bytes_;
}
inline void AndroidFsDatareadEndFtraceEvent::_internal_set_bytes(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bytes_ = value;
}

// optional uint64 ino = 2;
inline bool AndroidFsDatareadEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AndroidFsDatareadEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t AndroidFsDatareadEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadEndFtraceEvent.ino)
  return _internal_ino();
}
inline void AndroidFsDatareadEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadEndFtraceEvent.ino)
}
inline ::uint64_t AndroidFsDatareadEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void AndroidFsDatareadEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool AndroidFsDatareadEndFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AndroidFsDatareadEndFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t AndroidFsDatareadEndFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadEndFtraceEvent.offset)
  return _internal_offset();
}
inline void AndroidFsDatareadEndFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadEndFtraceEvent.offset)
}
inline ::int64_t AndroidFsDatareadEndFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void AndroidFsDatareadEndFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// AndroidFsDatareadStartFtraceEvent

// optional int32 bytes = 1;
inline bool AndroidFsDatareadStartFtraceEvent::has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_bytes() {
  _impl_.bytes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t AndroidFsDatareadStartFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.bytes)
  return _internal_bytes();
}
inline void AndroidFsDatareadStartFtraceEvent::set_bytes(::int32_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.bytes)
}
inline ::int32_t AndroidFsDatareadStartFtraceEvent::_internal_bytes() const {
  return _impl_.bytes_;
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_bytes(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bytes_ = value;
}

// optional string cmdline = 2;
inline bool AndroidFsDatareadStartFtraceEvent::has_cmdline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_cmdline() {
  _impl_.cmdline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidFsDatareadStartFtraceEvent::cmdline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline)
  return _internal_cmdline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AndroidFsDatareadStartFtraceEvent::set_cmdline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cmdline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline)
}
inline std::string* AndroidFsDatareadStartFtraceEvent::mutable_cmdline() {
  std::string* _s = _internal_mutable_cmdline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline)
  return _s;
}
inline const std::string& AndroidFsDatareadStartFtraceEvent::_internal_cmdline() const {
  return _impl_.cmdline_.Get();
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_cmdline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cmdline_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidFsDatareadStartFtraceEvent::_internal_mutable_cmdline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cmdline_.Mutable( GetArenaForAllocation());
}
inline std::string* AndroidFsDatareadStartFtraceEvent::release_cmdline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cmdline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AndroidFsDatareadStartFtraceEvent::set_allocated_cmdline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cmdline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmdline_.IsDefault()) {
          _impl_.cmdline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidFsDatareadStartFtraceEvent.cmdline)
}

// optional int64 i_size = 3;
inline bool AndroidFsDatareadStartFtraceEvent::has_i_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_i_size() {
  _impl_.i_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t AndroidFsDatareadStartFtraceEvent::i_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.i_size)
  return _internal_i_size();
}
inline void AndroidFsDatareadStartFtraceEvent::set_i_size(::int64_t value) {
  _internal_set_i_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.i_size)
}
inline ::int64_t AndroidFsDatareadStartFtraceEvent::_internal_i_size() const {
  return _impl_.i_size_;
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_i_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.i_size_ = value;
}

// optional uint64 ino = 4;
inline bool AndroidFsDatareadStartFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t AndroidFsDatareadStartFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.ino)
  return _internal_ino();
}
inline void AndroidFsDatareadStartFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.ino)
}
inline ::uint64_t AndroidFsDatareadStartFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ino_ = value;
}

// optional int64 offset = 5;
inline bool AndroidFsDatareadStartFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t AndroidFsDatareadStartFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.offset)
  return _internal_offset();
}
inline void AndroidFsDatareadStartFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.offset)
}
inline ::int64_t AndroidFsDatareadStartFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.offset_ = value;
}

// optional string pathbuf = 6;
inline bool AndroidFsDatareadStartFtraceEvent::has_pathbuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_pathbuf() {
  _impl_.pathbuf_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidFsDatareadStartFtraceEvent::pathbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf)
  return _internal_pathbuf();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AndroidFsDatareadStartFtraceEvent::set_pathbuf(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pathbuf_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf)
}
inline std::string* AndroidFsDatareadStartFtraceEvent::mutable_pathbuf() {
  std::string* _s = _internal_mutable_pathbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf)
  return _s;
}
inline const std::string& AndroidFsDatareadStartFtraceEvent::_internal_pathbuf() const {
  return _impl_.pathbuf_.Get();
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_pathbuf(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.pathbuf_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidFsDatareadStartFtraceEvent::_internal_mutable_pathbuf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pathbuf_.Mutable( GetArenaForAllocation());
}
inline std::string* AndroidFsDatareadStartFtraceEvent::release_pathbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.pathbuf_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AndroidFsDatareadStartFtraceEvent::set_allocated_pathbuf(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pathbuf_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pathbuf_.IsDefault()) {
          _impl_.pathbuf_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pathbuf)
}

// optional int32 pid = 7;
inline bool AndroidFsDatareadStartFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AndroidFsDatareadStartFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t AndroidFsDatareadStartFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pid)
  return _internal_pid();
}
inline void AndroidFsDatareadStartFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatareadStartFtraceEvent.pid)
}
inline ::int32_t AndroidFsDatareadStartFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void AndroidFsDatareadStartFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// AndroidFsDatawriteEndFtraceEvent

// optional int32 bytes = 1;
inline bool AndroidFsDatawriteEndFtraceEvent::has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AndroidFsDatawriteEndFtraceEvent::clear_bytes() {
  _impl_.bytes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AndroidFsDatawriteEndFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteEndFtraceEvent.bytes)
  return _internal_bytes();
}
inline void AndroidFsDatawriteEndFtraceEvent::set_bytes(::int32_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteEndFtraceEvent.bytes)
}
inline ::int32_t AndroidFsDatawriteEndFtraceEvent::_internal_bytes() const {
  return _impl_.bytes_;
}
inline void AndroidFsDatawriteEndFtraceEvent::_internal_set_bytes(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bytes_ = value;
}

// optional uint64 ino = 2;
inline bool AndroidFsDatawriteEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AndroidFsDatawriteEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t AndroidFsDatawriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteEndFtraceEvent.ino)
  return _internal_ino();
}
inline void AndroidFsDatawriteEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteEndFtraceEvent.ino)
}
inline ::uint64_t AndroidFsDatawriteEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void AndroidFsDatawriteEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool AndroidFsDatawriteEndFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AndroidFsDatawriteEndFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t AndroidFsDatawriteEndFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteEndFtraceEvent.offset)
  return _internal_offset();
}
inline void AndroidFsDatawriteEndFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteEndFtraceEvent.offset)
}
inline ::int64_t AndroidFsDatawriteEndFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void AndroidFsDatawriteEndFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// AndroidFsDatawriteStartFtraceEvent

// optional int32 bytes = 1;
inline bool AndroidFsDatawriteStartFtraceEvent::has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_bytes() {
  _impl_.bytes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t AndroidFsDatawriteStartFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.bytes)
  return _internal_bytes();
}
inline void AndroidFsDatawriteStartFtraceEvent::set_bytes(::int32_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.bytes)
}
inline ::int32_t AndroidFsDatawriteStartFtraceEvent::_internal_bytes() const {
  return _impl_.bytes_;
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_bytes(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bytes_ = value;
}

// optional string cmdline = 2;
inline bool AndroidFsDatawriteStartFtraceEvent::has_cmdline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_cmdline() {
  _impl_.cmdline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidFsDatawriteStartFtraceEvent::cmdline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline)
  return _internal_cmdline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AndroidFsDatawriteStartFtraceEvent::set_cmdline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cmdline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline)
}
inline std::string* AndroidFsDatawriteStartFtraceEvent::mutable_cmdline() {
  std::string* _s = _internal_mutable_cmdline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline)
  return _s;
}
inline const std::string& AndroidFsDatawriteStartFtraceEvent::_internal_cmdline() const {
  return _impl_.cmdline_.Get();
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_cmdline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cmdline_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidFsDatawriteStartFtraceEvent::_internal_mutable_cmdline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cmdline_.Mutable( GetArenaForAllocation());
}
inline std::string* AndroidFsDatawriteStartFtraceEvent::release_cmdline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cmdline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AndroidFsDatawriteStartFtraceEvent::set_allocated_cmdline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cmdline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmdline_.IsDefault()) {
          _impl_.cmdline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.cmdline)
}

// optional int64 i_size = 3;
inline bool AndroidFsDatawriteStartFtraceEvent::has_i_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_i_size() {
  _impl_.i_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t AndroidFsDatawriteStartFtraceEvent::i_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.i_size)
  return _internal_i_size();
}
inline void AndroidFsDatawriteStartFtraceEvent::set_i_size(::int64_t value) {
  _internal_set_i_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.i_size)
}
inline ::int64_t AndroidFsDatawriteStartFtraceEvent::_internal_i_size() const {
  return _impl_.i_size_;
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_i_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.i_size_ = value;
}

// optional uint64 ino = 4;
inline bool AndroidFsDatawriteStartFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t AndroidFsDatawriteStartFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.ino)
  return _internal_ino();
}
inline void AndroidFsDatawriteStartFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.ino)
}
inline ::uint64_t AndroidFsDatawriteStartFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ino_ = value;
}

// optional int64 offset = 5;
inline bool AndroidFsDatawriteStartFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t AndroidFsDatawriteStartFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.offset)
  return _internal_offset();
}
inline void AndroidFsDatawriteStartFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.offset)
}
inline ::int64_t AndroidFsDatawriteStartFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.offset_ = value;
}

// optional string pathbuf = 6;
inline bool AndroidFsDatawriteStartFtraceEvent::has_pathbuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_pathbuf() {
  _impl_.pathbuf_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidFsDatawriteStartFtraceEvent::pathbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf)
  return _internal_pathbuf();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AndroidFsDatawriteStartFtraceEvent::set_pathbuf(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pathbuf_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf)
}
inline std::string* AndroidFsDatawriteStartFtraceEvent::mutable_pathbuf() {
  std::string* _s = _internal_mutable_pathbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf)
  return _s;
}
inline const std::string& AndroidFsDatawriteStartFtraceEvent::_internal_pathbuf() const {
  return _impl_.pathbuf_.Get();
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_pathbuf(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.pathbuf_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidFsDatawriteStartFtraceEvent::_internal_mutable_pathbuf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pathbuf_.Mutable( GetArenaForAllocation());
}
inline std::string* AndroidFsDatawriteStartFtraceEvent::release_pathbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.pathbuf_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AndroidFsDatawriteStartFtraceEvent::set_allocated_pathbuf(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pathbuf_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pathbuf_.IsDefault()) {
          _impl_.pathbuf_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pathbuf)
}

// optional int32 pid = 7;
inline bool AndroidFsDatawriteStartFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AndroidFsDatawriteStartFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t AndroidFsDatawriteStartFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pid)
  return _internal_pid();
}
inline void AndroidFsDatawriteStartFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsDatawriteStartFtraceEvent.pid)
}
inline ::int32_t AndroidFsDatawriteStartFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void AndroidFsDatawriteStartFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// AndroidFsFsyncEndFtraceEvent

// optional int32 bytes = 1;
inline bool AndroidFsFsyncEndFtraceEvent::has_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AndroidFsFsyncEndFtraceEvent::clear_bytes() {
  _impl_.bytes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AndroidFsFsyncEndFtraceEvent::bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncEndFtraceEvent.bytes)
  return _internal_bytes();
}
inline void AndroidFsFsyncEndFtraceEvent::set_bytes(::int32_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncEndFtraceEvent.bytes)
}
inline ::int32_t AndroidFsFsyncEndFtraceEvent::_internal_bytes() const {
  return _impl_.bytes_;
}
inline void AndroidFsFsyncEndFtraceEvent::_internal_set_bytes(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bytes_ = value;
}

// optional uint64 ino = 2;
inline bool AndroidFsFsyncEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AndroidFsFsyncEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t AndroidFsFsyncEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncEndFtraceEvent.ino)
  return _internal_ino();
}
inline void AndroidFsFsyncEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncEndFtraceEvent.ino)
}
inline ::uint64_t AndroidFsFsyncEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void AndroidFsFsyncEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool AndroidFsFsyncEndFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AndroidFsFsyncEndFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t AndroidFsFsyncEndFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncEndFtraceEvent.offset)
  return _internal_offset();
}
inline void AndroidFsFsyncEndFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncEndFtraceEvent.offset)
}
inline ::int64_t AndroidFsFsyncEndFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void AndroidFsFsyncEndFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// AndroidFsFsyncStartFtraceEvent

// optional string cmdline = 1;
inline bool AndroidFsFsyncStartFtraceEvent::has_cmdline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AndroidFsFsyncStartFtraceEvent::clear_cmdline() {
  _impl_.cmdline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidFsFsyncStartFtraceEvent::cmdline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline)
  return _internal_cmdline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AndroidFsFsyncStartFtraceEvent::set_cmdline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cmdline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline)
}
inline std::string* AndroidFsFsyncStartFtraceEvent::mutable_cmdline() {
  std::string* _s = _internal_mutable_cmdline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline)
  return _s;
}
inline const std::string& AndroidFsFsyncStartFtraceEvent::_internal_cmdline() const {
  return _impl_.cmdline_.Get();
}
inline void AndroidFsFsyncStartFtraceEvent::_internal_set_cmdline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cmdline_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidFsFsyncStartFtraceEvent::_internal_mutable_cmdline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cmdline_.Mutable( GetArenaForAllocation());
}
inline std::string* AndroidFsFsyncStartFtraceEvent::release_cmdline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cmdline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cmdline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AndroidFsFsyncStartFtraceEvent::set_allocated_cmdline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cmdline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmdline_.IsDefault()) {
          _impl_.cmdline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidFsFsyncStartFtraceEvent.cmdline)
}

// optional int64 i_size = 2;
inline bool AndroidFsFsyncStartFtraceEvent::has_i_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AndroidFsFsyncStartFtraceEvent::clear_i_size() {
  _impl_.i_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t AndroidFsFsyncStartFtraceEvent::i_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncStartFtraceEvent.i_size)
  return _internal_i_size();
}
inline void AndroidFsFsyncStartFtraceEvent::set_i_size(::int64_t value) {
  _internal_set_i_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncStartFtraceEvent.i_size)
}
inline ::int64_t AndroidFsFsyncStartFtraceEvent::_internal_i_size() const {
  return _impl_.i_size_;
}
inline void AndroidFsFsyncStartFtraceEvent::_internal_set_i_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.i_size_ = value;
}

// optional uint64 ino = 3;
inline bool AndroidFsFsyncStartFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AndroidFsFsyncStartFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t AndroidFsFsyncStartFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncStartFtraceEvent.ino)
  return _internal_ino();
}
inline void AndroidFsFsyncStartFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncStartFtraceEvent.ino)
}
inline ::uint64_t AndroidFsFsyncStartFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void AndroidFsFsyncStartFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ino_ = value;
}

// optional string pathbuf = 4;
inline bool AndroidFsFsyncStartFtraceEvent::has_pathbuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AndroidFsFsyncStartFtraceEvent::clear_pathbuf() {
  _impl_.pathbuf_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidFsFsyncStartFtraceEvent::pathbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf)
  return _internal_pathbuf();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AndroidFsFsyncStartFtraceEvent::set_pathbuf(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pathbuf_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf)
}
inline std::string* AndroidFsFsyncStartFtraceEvent::mutable_pathbuf() {
  std::string* _s = _internal_mutable_pathbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf)
  return _s;
}
inline const std::string& AndroidFsFsyncStartFtraceEvent::_internal_pathbuf() const {
  return _impl_.pathbuf_.Get();
}
inline void AndroidFsFsyncStartFtraceEvent::_internal_set_pathbuf(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.pathbuf_.Set(value, GetArenaForAllocation());
}
inline std::string* AndroidFsFsyncStartFtraceEvent::_internal_mutable_pathbuf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pathbuf_.Mutable( GetArenaForAllocation());
}
inline std::string* AndroidFsFsyncStartFtraceEvent::release_pathbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.pathbuf_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pathbuf_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AndroidFsFsyncStartFtraceEvent::set_allocated_pathbuf(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pathbuf_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pathbuf_.IsDefault()) {
          _impl_.pathbuf_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pathbuf)
}

// optional int32 pid = 5;
inline bool AndroidFsFsyncStartFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AndroidFsFsyncStartFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t AndroidFsFsyncStartFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pid)
  return _internal_pid();
}
inline void AndroidFsFsyncStartFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.AndroidFsFsyncStartFtraceEvent.pid)
}
inline ::int32_t AndroidFsFsyncStartFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void AndroidFsFsyncStartFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fandroid_5ffs_2eproto_2epb_2eh
