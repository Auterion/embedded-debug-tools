// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/binder.proto

#include "protos/perfetto/trace/ftrace/binder.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR BinderTransactionFtraceEvent::BinderTransactionFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.debug_id_)*/ 0

  , /*decltype(_impl_.target_node_)*/ 0

  , /*decltype(_impl_.to_proc_)*/ 0

  , /*decltype(_impl_.to_thread_)*/ 0

  , /*decltype(_impl_.reply_)*/ 0

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_.flags_)*/ 0u
} {}
struct BinderTransactionFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderTransactionFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderTransactionFtraceEventDefaultTypeInternal() {}
  union {
    BinderTransactionFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderTransactionFtraceEventDefaultTypeInternal _BinderTransactionFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinderTransactionReceivedFtraceEvent::BinderTransactionReceivedFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.debug_id_)*/ 0
} {}
struct BinderTransactionReceivedFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderTransactionReceivedFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderTransactionReceivedFtraceEventDefaultTypeInternal() {}
  union {
    BinderTransactionReceivedFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderTransactionReceivedFtraceEventDefaultTypeInternal _BinderTransactionReceivedFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinderSetPriorityFtraceEvent::BinderSetPriorityFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proc_)*/ 0

  , /*decltype(_impl_.thread_)*/ 0

  , /*decltype(_impl_.old_prio_)*/ 0u

  , /*decltype(_impl_.new_prio_)*/ 0u

  , /*decltype(_impl_.desired_prio_)*/ 0u
} {}
struct BinderSetPriorityFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderSetPriorityFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderSetPriorityFtraceEventDefaultTypeInternal() {}
  union {
    BinderSetPriorityFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderSetPriorityFtraceEventDefaultTypeInternal _BinderSetPriorityFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinderLockFtraceEvent::BinderLockFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct BinderLockFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderLockFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderLockFtraceEventDefaultTypeInternal() {}
  union {
    BinderLockFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderLockFtraceEventDefaultTypeInternal _BinderLockFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinderLockedFtraceEvent::BinderLockedFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct BinderLockedFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderLockedFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderLockedFtraceEventDefaultTypeInternal() {}
  union {
    BinderLockedFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderLockedFtraceEventDefaultTypeInternal _BinderLockedFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinderUnlockFtraceEvent::BinderUnlockFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct BinderUnlockFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderUnlockFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderUnlockFtraceEventDefaultTypeInternal() {}
  union {
    BinderUnlockFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderUnlockFtraceEventDefaultTypeInternal _BinderUnlockFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinderTransactionAllocBufFtraceEvent::BinderTransactionAllocBufFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.offsets_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.extra_buffers_size_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.debug_id_)*/ 0
} {}
struct BinderTransactionAllocBufFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinderTransactionAllocBufFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinderTransactionAllocBufFtraceEventDefaultTypeInternal() {}
  union {
    BinderTransactionAllocBufFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinderTransactionAllocBufFtraceEventDefaultTypeInternal _BinderTransactionAllocBufFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.debug_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.target_node_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.to_proc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.to_thread_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.reply_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionFtraceEvent, _impl_.flags_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionReceivedFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionReceivedFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionReceivedFtraceEvent, _impl_.debug_id_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _impl_.proc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _impl_.thread_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _impl_.old_prio_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _impl_.new_prio_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderSetPriorityFtraceEvent, _impl_.desired_prio_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderLockFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderLockFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderLockFtraceEvent, _impl_.tag_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderLockedFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderLockedFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderLockedFtraceEvent, _impl_.tag_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderUnlockFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderUnlockFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderUnlockFtraceEvent, _impl_.tag_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionAllocBufFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionAllocBufFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionAllocBufFtraceEvent, _impl_.data_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionAllocBufFtraceEvent, _impl_.debug_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionAllocBufFtraceEvent, _impl_.offsets_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::BinderTransactionAllocBufFtraceEvent, _impl_.extra_buffers_size_),
    0,
    3,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::perfetto::protos::BinderTransactionFtraceEvent)},
        { 22, 31, -1, sizeof(::perfetto::protos::BinderTransactionReceivedFtraceEvent)},
        { 32, 45, -1, sizeof(::perfetto::protos::BinderSetPriorityFtraceEvent)},
        { 50, 59, -1, sizeof(::perfetto::protos::BinderLockFtraceEvent)},
        { 60, 69, -1, sizeof(::perfetto::protos::BinderLockedFtraceEvent)},
        { 70, 79, -1, sizeof(::perfetto::protos::BinderUnlockFtraceEvent)},
        { 80, 92, -1, sizeof(::perfetto::protos::BinderTransactionAllocBufFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_BinderTransactionFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BinderTransactionReceivedFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BinderSetPriorityFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BinderLockFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BinderLockedFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BinderUnlockFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_BinderTransactionAllocBufFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)protos/perfetto/trace/ftrace/binder.pr"
    "oto\022\017perfetto.protos\"\225\001\n\034BinderTransacti"
    "onFtraceEvent\022\020\n\010debug_id\030\001 \001(\005\022\023\n\013targe"
    "t_node\030\002 \001(\005\022\017\n\007to_proc\030\003 \001(\005\022\021\n\tto_thre"
    "ad\030\004 \001(\005\022\r\n\005reply\030\005 \001(\005\022\014\n\004code\030\006 \001(\r\022\r\n"
    "\005flags\030\007 \001(\r\"8\n$BinderTransactionReceive"
    "dFtraceEvent\022\020\n\010debug_id\030\001 \001(\005\"v\n\034Binder"
    "SetPriorityFtraceEvent\022\014\n\004proc\030\001 \001(\005\022\016\n\006"
    "thread\030\002 \001(\005\022\020\n\010old_prio\030\003 \001(\r\022\020\n\010new_pr"
    "io\030\004 \001(\r\022\024\n\014desired_prio\030\005 \001(\r\"$\n\025Binder"
    "LockFtraceEvent\022\013\n\003tag\030\001 \001(\t\"&\n\027BinderLo"
    "ckedFtraceEvent\022\013\n\003tag\030\001 \001(\t\"&\n\027BinderUn"
    "lockFtraceEvent\022\013\n\003tag\030\001 \001(\t\"}\n$BinderTr"
    "ansactionAllocBufFtraceEvent\022\021\n\tdata_siz"
    "e\030\001 \001(\004\022\020\n\010debug_id\030\002 \001(\005\022\024\n\014offsets_siz"
    "e\030\003 \001(\004\022\032\n\022extra_buffers_size\030\004 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto = {
    false,
    false,
    635,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto,
    "protos/perfetto/trace/ftrace/binder.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class BinderTransactionFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderTransactionFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderTransactionFtraceEvent, _impl_._has_bits_);
  static void set_has_debug_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_to_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BinderTransactionFtraceEvent::BinderTransactionFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderTransactionFtraceEvent)
}
BinderTransactionFtraceEvent::BinderTransactionFtraceEvent(const BinderTransactionFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderTransactionFtraceEvent)
}

inline void BinderTransactionFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_id_) { 0 }

    , decltype(_impl_.target_node_) { 0 }

    , decltype(_impl_.to_proc_) { 0 }

    , decltype(_impl_.to_thread_) { 0 }

    , decltype(_impl_.reply_) { 0 }

    , decltype(_impl_.code_) { 0u }

    , decltype(_impl_.flags_) { 0u }

  };
}

BinderTransactionFtraceEvent::~BinderTransactionFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderTransactionFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderTransactionFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderTransactionFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderTransactionFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderTransactionFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.debug_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.debug_id_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderTransactionFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 debug_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_debug_id(&has_bits);
          _impl_.debug_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 target_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_target_node(&has_bits);
          _impl_.target_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 to_proc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_to_proc(&has_bits);
          _impl_.to_proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 to_thread = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_to_thread(&has_bits);
          _impl_.to_thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 reply = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_reply(&has_bits);
          _impl_.reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_code(&has_bits);
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderTransactionFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderTransactionFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 debug_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_debug_id(), target);
  }

  // optional int32 target_node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_target_node(), target);
  }

  // optional int32 to_proc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_to_proc(), target);
  }

  // optional int32 to_thread = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_to_thread(), target);
  }

  // optional int32 reply = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_reply(), target);
  }

  // optional uint32 code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_code(), target);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderTransactionFtraceEvent)
  return target;
}

::size_t BinderTransactionFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderTransactionFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 debug_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_debug_id());
    }

    // optional int32 target_node = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target_node());
    }

    // optional int32 to_proc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_to_proc());
    }

    // optional int32 to_thread = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_to_thread());
    }

    // optional int32 reply = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_reply());
    }

    // optional uint32 code = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_code());
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderTransactionFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderTransactionFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderTransactionFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderTransactionFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderTransactionFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderTransactionFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderTransactionFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.debug_id_ = from._impl_.debug_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_node_ = from._impl_.target_node_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.to_proc_ = from._impl_.to_proc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.to_thread_ = from._impl_.to_thread_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reply_ = from._impl_.reply_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderTransactionFtraceEvent::CopyFrom(const BinderTransactionFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderTransactionFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderTransactionFtraceEvent::IsInitialized() const {
  return true;
}

void BinderTransactionFtraceEvent::InternalSwap(BinderTransactionFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinderTransactionFtraceEvent, _impl_.flags_)
      + sizeof(BinderTransactionFtraceEvent::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(BinderTransactionFtraceEvent, _impl_.debug_id_)>(
          reinterpret_cast<char*>(&_impl_.debug_id_),
          reinterpret_cast<char*>(&other->_impl_.debug_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderTransactionFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[0]);
}
// ===================================================================

class BinderTransactionReceivedFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderTransactionReceivedFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderTransactionReceivedFtraceEvent, _impl_._has_bits_);
  static void set_has_debug_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderTransactionReceivedFtraceEvent::BinderTransactionReceivedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderTransactionReceivedFtraceEvent)
}
BinderTransactionReceivedFtraceEvent::BinderTransactionReceivedFtraceEvent(const BinderTransactionReceivedFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderTransactionReceivedFtraceEvent)
}

inline void BinderTransactionReceivedFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.debug_id_) { 0 }

  };
}

BinderTransactionReceivedFtraceEvent::~BinderTransactionReceivedFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderTransactionReceivedFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderTransactionReceivedFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderTransactionReceivedFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderTransactionReceivedFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 debug_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_debug_id(&has_bits);
          _impl_.debug_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderTransactionReceivedFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 debug_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_debug_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  return target;
}

::size_t BinderTransactionReceivedFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 debug_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_debug_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderTransactionReceivedFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderTransactionReceivedFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderTransactionReceivedFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderTransactionReceivedFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderTransactionReceivedFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderTransactionReceivedFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_debug_id(from._internal_debug_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderTransactionReceivedFtraceEvent::CopyFrom(const BinderTransactionReceivedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderTransactionReceivedFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderTransactionReceivedFtraceEvent::IsInitialized() const {
  return true;
}

void BinderTransactionReceivedFtraceEvent::InternalSwap(BinderTransactionReceivedFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.debug_id_, other->_impl_.debug_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderTransactionReceivedFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[1]);
}
// ===================================================================

class BinderSetPriorityFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderSetPriorityFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderSetPriorityFtraceEvent, _impl_._has_bits_);
  static void set_has_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_desired_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BinderSetPriorityFtraceEvent::BinderSetPriorityFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderSetPriorityFtraceEvent)
}
BinderSetPriorityFtraceEvent::BinderSetPriorityFtraceEvent(const BinderSetPriorityFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderSetPriorityFtraceEvent)
}

inline void BinderSetPriorityFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proc_) { 0 }

    , decltype(_impl_.thread_) { 0 }

    , decltype(_impl_.old_prio_) { 0u }

    , decltype(_impl_.new_prio_) { 0u }

    , decltype(_impl_.desired_prio_) { 0u }

  };
}

BinderSetPriorityFtraceEvent::~BinderSetPriorityFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderSetPriorityFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderSetPriorityFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderSetPriorityFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderSetPriorityFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.proc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.desired_prio_) -
        reinterpret_cast<char*>(&_impl_.proc_)) + sizeof(_impl_.desired_prio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderSetPriorityFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 proc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_proc(&has_bits);
          _impl_.proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 thread = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_thread(&has_bits);
          _impl_.thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 old_prio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_old_prio(&has_bits);
          _impl_.old_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 new_prio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_new_prio(&has_bits);
          _impl_.new_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 desired_prio = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_desired_prio(&has_bits);
          _impl_.desired_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderSetPriorityFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 proc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_proc(), target);
  }

  // optional int32 thread = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_thread(), target);
  }

  // optional uint32 old_prio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_old_prio(), target);
  }

  // optional uint32 new_prio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_new_prio(), target);
  }

  // optional uint32 desired_prio = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_desired_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderSetPriorityFtraceEvent)
  return target;
}

::size_t BinderSetPriorityFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 proc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_proc());
    }

    // optional int32 thread = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_thread());
    }

    // optional uint32 old_prio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_old_prio());
    }

    // optional uint32 new_prio = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_new_prio());
    }

    // optional uint32 desired_prio = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_desired_prio());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderSetPriorityFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderSetPriorityFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderSetPriorityFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderSetPriorityFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderSetPriorityFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderSetPriorityFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.proc_ = from._impl_.proc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.thread_ = from._impl_.thread_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_prio_ = from._impl_.old_prio_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.new_prio_ = from._impl_.new_prio_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.desired_prio_ = from._impl_.desired_prio_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderSetPriorityFtraceEvent::CopyFrom(const BinderSetPriorityFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderSetPriorityFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderSetPriorityFtraceEvent::IsInitialized() const {
  return true;
}

void BinderSetPriorityFtraceEvent::InternalSwap(BinderSetPriorityFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinderSetPriorityFtraceEvent, _impl_.desired_prio_)
      + sizeof(BinderSetPriorityFtraceEvent::_impl_.desired_prio_)
      - PROTOBUF_FIELD_OFFSET(BinderSetPriorityFtraceEvent, _impl_.proc_)>(
          reinterpret_cast<char*>(&_impl_.proc_),
          reinterpret_cast<char*>(&other->_impl_.proc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderSetPriorityFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[2]);
}
// ===================================================================

class BinderLockFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderLockFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderLockFtraceEvent, _impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderLockFtraceEvent::BinderLockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderLockFtraceEvent)
}
BinderLockFtraceEvent::BinderLockFtraceEvent(const BinderLockFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinderLockFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderLockFtraceEvent)
}

inline void BinderLockFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}

  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinderLockFtraceEvent::~BinderLockFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderLockFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderLockFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void BinderLockFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderLockFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderLockFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderLockFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BinderLockFtraceEvent.tag");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderLockFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderLockFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BinderLockFtraceEvent.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderLockFtraceEvent)
  return target;
}

::size_t BinderLockFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderLockFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderLockFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderLockFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderLockFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderLockFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderLockFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderLockFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderLockFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderLockFtraceEvent::CopyFrom(const BinderLockFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderLockFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderLockFtraceEvent::IsInitialized() const {
  return true;
}

void BinderLockFtraceEvent::InternalSwap(BinderLockFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderLockFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[3]);
}
// ===================================================================

class BinderLockedFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderLockedFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderLockedFtraceEvent, _impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderLockedFtraceEvent::BinderLockedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderLockedFtraceEvent)
}
BinderLockedFtraceEvent::BinderLockedFtraceEvent(const BinderLockedFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinderLockedFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderLockedFtraceEvent)
}

inline void BinderLockedFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}

  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinderLockedFtraceEvent::~BinderLockedFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderLockedFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderLockedFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void BinderLockedFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderLockedFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderLockedFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderLockedFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BinderLockedFtraceEvent.tag");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderLockedFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderLockedFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BinderLockedFtraceEvent.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderLockedFtraceEvent)
  return target;
}

::size_t BinderLockedFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderLockedFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderLockedFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderLockedFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderLockedFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderLockedFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderLockedFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderLockedFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderLockedFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderLockedFtraceEvent::CopyFrom(const BinderLockedFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderLockedFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderLockedFtraceEvent::IsInitialized() const {
  return true;
}

void BinderLockedFtraceEvent::InternalSwap(BinderLockedFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderLockedFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[4]);
}
// ===================================================================

class BinderUnlockFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderUnlockFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderUnlockFtraceEvent, _impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinderUnlockFtraceEvent::BinderUnlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderUnlockFtraceEvent)
}
BinderUnlockFtraceEvent::BinderUnlockFtraceEvent(const BinderUnlockFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinderUnlockFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderUnlockFtraceEvent)
}

inline void BinderUnlockFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}

  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinderUnlockFtraceEvent::~BinderUnlockFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderUnlockFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderUnlockFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
}

void BinderUnlockFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderUnlockFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderUnlockFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderUnlockFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.BinderUnlockFtraceEvent.tag");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderUnlockFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderUnlockFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.BinderUnlockFtraceEvent.tag");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderUnlockFtraceEvent)
  return target;
}

::size_t BinderUnlockFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderUnlockFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderUnlockFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderUnlockFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderUnlockFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderUnlockFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderUnlockFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderUnlockFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderUnlockFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderUnlockFtraceEvent::CopyFrom(const BinderUnlockFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderUnlockFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderUnlockFtraceEvent::IsInitialized() const {
  return true;
}

void BinderUnlockFtraceEvent::InternalSwap(BinderUnlockFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderUnlockFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[5]);
}
// ===================================================================

class BinderTransactionAllocBufFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BinderTransactionAllocBufFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinderTransactionAllocBufFtraceEvent, _impl_._has_bits_);
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_offsets_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_buffers_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BinderTransactionAllocBufFtraceEvent::BinderTransactionAllocBufFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
}
BinderTransactionAllocBufFtraceEvent::BinderTransactionAllocBufFtraceEvent(const BinderTransactionAllocBufFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
}

inline void BinderTransactionAllocBufFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_size_) { ::uint64_t{0u} }

    , decltype(_impl_.offsets_size_) { ::uint64_t{0u} }

    , decltype(_impl_.extra_buffers_size_) { ::uint64_t{0u} }

    , decltype(_impl_.debug_id_) { 0 }

  };
}

BinderTransactionAllocBufFtraceEvent::~BinderTransactionAllocBufFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinderTransactionAllocBufFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinderTransactionAllocBufFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinderTransactionAllocBufFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.data_size_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.debug_id_) -
        reinterpret_cast<char*>(&_impl_.data_size_)) + sizeof(_impl_.debug_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinderTransactionAllocBufFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 data_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_size(&has_bits);
          _impl_.data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 debug_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_debug_id(&has_bits);
          _impl_.debug_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 offsets_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_offsets_size(&has_bits);
          _impl_.offsets_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 extra_buffers_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_extra_buffers_size(&has_bits);
          _impl_.extra_buffers_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinderTransactionAllocBufFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 data_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_data_size(), target);
  }

  // optional int32 debug_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_debug_id(), target);
  }

  // optional uint64 offsets_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_offsets_size(), target);
  }

  // optional uint64 extra_buffers_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_extra_buffers_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  return target;
}

::size_t BinderTransactionAllocBufFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 data_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_data_size());
    }

    // optional uint64 offsets_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_offsets_size());
    }

    // optional uint64 extra_buffers_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_extra_buffers_size());
    }

    // optional int32 debug_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_debug_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinderTransactionAllocBufFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinderTransactionAllocBufFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinderTransactionAllocBufFtraceEvent::GetClassData() const { return &_class_data_; }


void BinderTransactionAllocBufFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinderTransactionAllocBufFtraceEvent*>(&to_msg);
  auto& from = static_cast<const BinderTransactionAllocBufFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_size_ = from._impl_.data_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.offsets_size_ = from._impl_.offsets_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extra_buffers_size_ = from._impl_.extra_buffers_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.debug_id_ = from._impl_.debug_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinderTransactionAllocBufFtraceEvent::CopyFrom(const BinderTransactionAllocBufFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BinderTransactionAllocBufFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinderTransactionAllocBufFtraceEvent::IsInitialized() const {
  return true;
}

void BinderTransactionAllocBufFtraceEvent::InternalSwap(BinderTransactionAllocBufFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinderTransactionAllocBufFtraceEvent, _impl_.debug_id_)
      + sizeof(BinderTransactionAllocBufFtraceEvent::_impl_.debug_id_)
      - PROTOBUF_FIELD_OFFSET(BinderTransactionAllocBufFtraceEvent, _impl_.data_size_)>(
          reinterpret_cast<char*>(&_impl_.data_size_),
          reinterpret_cast<char*>(&other->_impl_.data_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinderTransactionAllocBufFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fbinder_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderTransactionFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderTransactionFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderTransactionFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderTransactionReceivedFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderTransactionReceivedFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderTransactionReceivedFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderSetPriorityFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderSetPriorityFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderSetPriorityFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderLockFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderLockFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderLockFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderLockedFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderLockedFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderLockedFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderUnlockFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderUnlockFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderUnlockFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BinderTransactionAllocBufFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
