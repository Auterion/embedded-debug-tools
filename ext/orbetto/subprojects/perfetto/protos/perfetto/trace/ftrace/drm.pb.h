// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/drm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto;
namespace perfetto {
namespace protos {
class DrmVblankEventDeliveredFtraceEvent;
struct DrmVblankEventDeliveredFtraceEventDefaultTypeInternal;
extern DrmVblankEventDeliveredFtraceEventDefaultTypeInternal _DrmVblankEventDeliveredFtraceEvent_default_instance_;
class DrmVblankEventFtraceEvent;
struct DrmVblankEventFtraceEventDefaultTypeInternal;
extern DrmVblankEventFtraceEventDefaultTypeInternal _DrmVblankEventFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DrmVblankEventDeliveredFtraceEvent>(Arena*);
template <>
::perfetto::protos::DrmVblankEventFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::DrmVblankEventFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class DrmVblankEventFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DrmVblankEventFtraceEvent) */ {
 public:
  inline DrmVblankEventFtraceEvent() : DrmVblankEventFtraceEvent(nullptr) {}
  ~DrmVblankEventFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DrmVblankEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrmVblankEventFtraceEvent(const DrmVblankEventFtraceEvent& from);
  DrmVblankEventFtraceEvent(DrmVblankEventFtraceEvent&& from) noexcept
    : DrmVblankEventFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DrmVblankEventFtraceEvent& operator=(const DrmVblankEventFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrmVblankEventFtraceEvent& operator=(DrmVblankEventFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrmVblankEventFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrmVblankEventFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DrmVblankEventFtraceEvent*>(
               &_DrmVblankEventFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DrmVblankEventFtraceEvent& a, DrmVblankEventFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DrmVblankEventFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrmVblankEventFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrmVblankEventFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrmVblankEventFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrmVblankEventFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrmVblankEventFtraceEvent& from) {
    DrmVblankEventFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrmVblankEventFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DrmVblankEventFtraceEvent";
  }
  protected:
  explicit DrmVblankEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrtcFieldNumber = 1,
    kHighPrecFieldNumber = 2,
    kTimeFieldNumber = 4,
    kSeqFieldNumber = 3,
  };
  // optional int32 crtc = 1;
  bool has_crtc() const;
  void clear_crtc() ;
  ::int32_t crtc() const;
  void set_crtc(::int32_t value);

  private:
  ::int32_t _internal_crtc() const;
  void _internal_set_crtc(::int32_t value);

  public:
  // optional uint32 high_prec = 2;
  bool has_high_prec() const;
  void clear_high_prec() ;
  ::uint32_t high_prec() const;
  void set_high_prec(::uint32_t value);

  private:
  ::uint32_t _internal_high_prec() const;
  void _internal_set_high_prec(::uint32_t value);

  public:
  // optional int64 time = 4;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // optional uint32 seq = 3;
  bool has_seq() const;
  void clear_seq() ;
  ::uint32_t seq() const;
  void set_seq(::uint32_t value);

  private:
  ::uint32_t _internal_seq() const;
  void _internal_set_seq(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DrmVblankEventFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t crtc_;
    ::uint32_t high_prec_;
    ::int64_t time_;
    ::uint32_t seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto;
};// -------------------------------------------------------------------

class DrmVblankEventDeliveredFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.DrmVblankEventDeliveredFtraceEvent) */ {
 public:
  inline DrmVblankEventDeliveredFtraceEvent() : DrmVblankEventDeliveredFtraceEvent(nullptr) {}
  ~DrmVblankEventDeliveredFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DrmVblankEventDeliveredFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrmVblankEventDeliveredFtraceEvent(const DrmVblankEventDeliveredFtraceEvent& from);
  DrmVblankEventDeliveredFtraceEvent(DrmVblankEventDeliveredFtraceEvent&& from) noexcept
    : DrmVblankEventDeliveredFtraceEvent() {
    *this = ::std::move(from);
  }

  inline DrmVblankEventDeliveredFtraceEvent& operator=(const DrmVblankEventDeliveredFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrmVblankEventDeliveredFtraceEvent& operator=(DrmVblankEventDeliveredFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrmVblankEventDeliveredFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrmVblankEventDeliveredFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const DrmVblankEventDeliveredFtraceEvent*>(
               &_DrmVblankEventDeliveredFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DrmVblankEventDeliveredFtraceEvent& a, DrmVblankEventDeliveredFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DrmVblankEventDeliveredFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrmVblankEventDeliveredFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrmVblankEventDeliveredFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrmVblankEventDeliveredFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrmVblankEventDeliveredFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DrmVblankEventDeliveredFtraceEvent& from) {
    DrmVblankEventDeliveredFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrmVblankEventDeliveredFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.DrmVblankEventDeliveredFtraceEvent";
  }
  protected:
  explicit DrmVblankEventDeliveredFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kCrtcFieldNumber = 1,
    kSeqFieldNumber = 3,
  };
  // optional uint64 file = 2;
  bool has_file() const;
  void clear_file() ;
  ::uint64_t file() const;
  void set_file(::uint64_t value);

  private:
  ::uint64_t _internal_file() const;
  void _internal_set_file(::uint64_t value);

  public:
  // optional int32 crtc = 1;
  bool has_crtc() const;
  void clear_crtc() ;
  ::int32_t crtc() const;
  void set_crtc(::int32_t value);

  private:
  ::int32_t _internal_crtc() const;
  void _internal_set_crtc(::int32_t value);

  public:
  // optional uint32 seq = 3;
  bool has_seq() const;
  void clear_seq() ;
  ::uint32_t seq() const;
  void set_seq(::uint32_t value);

  private:
  ::uint32_t _internal_seq() const;
  void _internal_set_seq(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.DrmVblankEventDeliveredFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t file_;
    ::int32_t crtc_;
    ::uint32_t seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DrmVblankEventFtraceEvent

// optional int32 crtc = 1;
inline bool DrmVblankEventFtraceEvent::has_crtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DrmVblankEventFtraceEvent::clear_crtc() {
  _impl_.crtc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t DrmVblankEventFtraceEvent::crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventFtraceEvent.crtc)
  return _internal_crtc();
}
inline void DrmVblankEventFtraceEvent::set_crtc(::int32_t value) {
  _internal_set_crtc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventFtraceEvent.crtc)
}
inline ::int32_t DrmVblankEventFtraceEvent::_internal_crtc() const {
  return _impl_.crtc_;
}
inline void DrmVblankEventFtraceEvent::_internal_set_crtc(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.crtc_ = value;
}

// optional uint32 high_prec = 2;
inline bool DrmVblankEventFtraceEvent::has_high_prec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DrmVblankEventFtraceEvent::clear_high_prec() {
  _impl_.high_prec_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t DrmVblankEventFtraceEvent::high_prec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventFtraceEvent.high_prec)
  return _internal_high_prec();
}
inline void DrmVblankEventFtraceEvent::set_high_prec(::uint32_t value) {
  _internal_set_high_prec(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventFtraceEvent.high_prec)
}
inline ::uint32_t DrmVblankEventFtraceEvent::_internal_high_prec() const {
  return _impl_.high_prec_;
}
inline void DrmVblankEventFtraceEvent::_internal_set_high_prec(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.high_prec_ = value;
}

// optional uint32 seq = 3;
inline bool DrmVblankEventFtraceEvent::has_seq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DrmVblankEventFtraceEvent::clear_seq() {
  _impl_.seq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DrmVblankEventFtraceEvent::seq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventFtraceEvent.seq)
  return _internal_seq();
}
inline void DrmVblankEventFtraceEvent::set_seq(::uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventFtraceEvent.seq)
}
inline ::uint32_t DrmVblankEventFtraceEvent::_internal_seq() const {
  return _impl_.seq_;
}
inline void DrmVblankEventFtraceEvent::_internal_set_seq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seq_ = value;
}

// optional int64 time = 4;
inline bool DrmVblankEventFtraceEvent::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DrmVblankEventFtraceEvent::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t DrmVblankEventFtraceEvent::time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventFtraceEvent.time)
  return _internal_time();
}
inline void DrmVblankEventFtraceEvent::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventFtraceEvent.time)
}
inline ::int64_t DrmVblankEventFtraceEvent::_internal_time() const {
  return _impl_.time_;
}
inline void DrmVblankEventFtraceEvent::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// DrmVblankEventDeliveredFtraceEvent

// optional int32 crtc = 1;
inline bool DrmVblankEventDeliveredFtraceEvent::has_crtc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DrmVblankEventDeliveredFtraceEvent::clear_crtc() {
  _impl_.crtc_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t DrmVblankEventDeliveredFtraceEvent::crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventDeliveredFtraceEvent.crtc)
  return _internal_crtc();
}
inline void DrmVblankEventDeliveredFtraceEvent::set_crtc(::int32_t value) {
  _internal_set_crtc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventDeliveredFtraceEvent.crtc)
}
inline ::int32_t DrmVblankEventDeliveredFtraceEvent::_internal_crtc() const {
  return _impl_.crtc_;
}
inline void DrmVblankEventDeliveredFtraceEvent::_internal_set_crtc(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.crtc_ = value;
}

// optional uint64 file = 2;
inline bool DrmVblankEventDeliveredFtraceEvent::has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DrmVblankEventDeliveredFtraceEvent::clear_file() {
  _impl_.file_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t DrmVblankEventDeliveredFtraceEvent::file() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventDeliveredFtraceEvent.file)
  return _internal_file();
}
inline void DrmVblankEventDeliveredFtraceEvent::set_file(::uint64_t value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventDeliveredFtraceEvent.file)
}
inline ::uint64_t DrmVblankEventDeliveredFtraceEvent::_internal_file() const {
  return _impl_.file_;
}
inline void DrmVblankEventDeliveredFtraceEvent::_internal_set_file(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_ = value;
}

// optional uint32 seq = 3;
inline bool DrmVblankEventDeliveredFtraceEvent::has_seq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DrmVblankEventDeliveredFtraceEvent::clear_seq() {
  _impl_.seq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DrmVblankEventDeliveredFtraceEvent::seq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.DrmVblankEventDeliveredFtraceEvent.seq)
  return _internal_seq();
}
inline void DrmVblankEventDeliveredFtraceEvent::set_seq(::uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.DrmVblankEventDeliveredFtraceEvent.seq)
}
inline ::uint32_t DrmVblankEventDeliveredFtraceEvent::_internal_seq() const {
  return _impl_.seq_;
}
inline void DrmVblankEventDeliveredFtraceEvent::_internal_set_seq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.seq_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fdrm_2eproto_2epb_2eh
