// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cpuhp.proto

#include "protos/perfetto/trace/ftrace/cpuhp.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR CpuhpExitFtraceEvent::CpuhpExitFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cpu_)*/ 0u

  , /*decltype(_impl_.idx_)*/ 0

  , /*decltype(_impl_.ret_)*/ 0

  , /*decltype(_impl_.state_)*/ 0
} {}
struct CpuhpExitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuhpExitFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuhpExitFtraceEventDefaultTypeInternal() {}
  union {
    CpuhpExitFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuhpExitFtraceEventDefaultTypeInternal _CpuhpExitFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CpuhpMultiEnterFtraceEvent::CpuhpMultiEnterFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fun_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.cpu_)*/ 0u

  , /*decltype(_impl_.idx_)*/ 0

  , /*decltype(_impl_.target_)*/ 0
} {}
struct CpuhpMultiEnterFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuhpMultiEnterFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuhpMultiEnterFtraceEventDefaultTypeInternal() {}
  union {
    CpuhpMultiEnterFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuhpMultiEnterFtraceEventDefaultTypeInternal _CpuhpMultiEnterFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CpuhpEnterFtraceEvent::CpuhpEnterFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fun_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.cpu_)*/ 0u

  , /*decltype(_impl_.idx_)*/ 0

  , /*decltype(_impl_.target_)*/ 0
} {}
struct CpuhpEnterFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuhpEnterFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuhpEnterFtraceEventDefaultTypeInternal() {}
  union {
    CpuhpEnterFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuhpEnterFtraceEventDefaultTypeInternal _CpuhpEnterFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CpuhpLatencyFtraceEvent::CpuhpLatencyFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cpu_)*/ 0u

  , /*decltype(_impl_.ret_)*/ 0

  , /*decltype(_impl_.time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.state_)*/ 0u
} {}
struct CpuhpLatencyFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuhpLatencyFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuhpLatencyFtraceEventDefaultTypeInternal() {}
  union {
    CpuhpLatencyFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuhpLatencyFtraceEventDefaultTypeInternal _CpuhpLatencyFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CpuhpPauseFtraceEvent::CpuhpPauseFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_cpus_)*/ 0u

  , /*decltype(_impl_.cpus_)*/ 0u

  , /*decltype(_impl_.pause_)*/ 0u

  , /*decltype(_impl_.time_)*/ 0u
} {}
struct CpuhpPauseFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuhpPauseFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuhpPauseFtraceEventDefaultTypeInternal() {}
  union {
    CpuhpPauseFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuhpPauseFtraceEventDefaultTypeInternal _CpuhpPauseFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpExitFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpExitFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpExitFtraceEvent, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpExitFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpExitFtraceEvent, _impl_.ret_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpExitFtraceEvent, _impl_.state_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpMultiEnterFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpMultiEnterFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpMultiEnterFtraceEvent, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpMultiEnterFtraceEvent, _impl_.fun_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpMultiEnterFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpMultiEnterFtraceEvent, _impl_.target_),
    1,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpEnterFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpEnterFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpEnterFtraceEvent, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpEnterFtraceEvent, _impl_.fun_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpEnterFtraceEvent, _impl_.idx_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpEnterFtraceEvent, _impl_.target_),
    1,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpLatencyFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpLatencyFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpLatencyFtraceEvent, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpLatencyFtraceEvent, _impl_.ret_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpLatencyFtraceEvent, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpLatencyFtraceEvent, _impl_.time_),
    0,
    1,
    3,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpPauseFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpPauseFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpPauseFtraceEvent, _impl_.active_cpus_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpPauseFtraceEvent, _impl_.cpus_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpPauseFtraceEvent, _impl_.pause_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CpuhpPauseFtraceEvent, _impl_.time_),
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::perfetto::protos::CpuhpExitFtraceEvent)},
        { 16, 28, -1, sizeof(::perfetto::protos::CpuhpMultiEnterFtraceEvent)},
        { 32, 44, -1, sizeof(::perfetto::protos::CpuhpEnterFtraceEvent)},
        { 48, 60, -1, sizeof(::perfetto::protos::CpuhpLatencyFtraceEvent)},
        { 64, 76, -1, sizeof(::perfetto::protos::CpuhpPauseFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_CpuhpExitFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CpuhpMultiEnterFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CpuhpEnterFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CpuhpLatencyFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CpuhpPauseFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(protos/perfetto/trace/ftrace/cpuhp.pro"
    "to\022\017perfetto.protos\"L\n\024CpuhpExitFtraceEv"
    "ent\022\013\n\003cpu\030\001 \001(\r\022\013\n\003idx\030\002 \001(\005\022\013\n\003ret\030\003 \001"
    "(\005\022\r\n\005state\030\004 \001(\005\"S\n\032CpuhpMultiEnterFtra"
    "ceEvent\022\013\n\003cpu\030\001 \001(\r\022\013\n\003fun\030\002 \001(\004\022\013\n\003idx"
    "\030\003 \001(\005\022\016\n\006target\030\004 \001(\005\"N\n\025CpuhpEnterFtra"
    "ceEvent\022\013\n\003cpu\030\001 \001(\r\022\013\n\003fun\030\002 \001(\004\022\013\n\003idx"
    "\030\003 \001(\005\022\016\n\006target\030\004 \001(\005\"P\n\027CpuhpLatencyFt"
    "raceEvent\022\013\n\003cpu\030\001 \001(\r\022\013\n\003ret\030\002 \001(\005\022\r\n\005s"
    "tate\030\003 \001(\r\022\014\n\004time\030\004 \001(\004\"W\n\025CpuhpPauseFt"
    "raceEvent\022\023\n\013active_cpus\030\001 \001(\r\022\014\n\004cpus\030\002"
    " \001(\r\022\r\n\005pause\030\003 \001(\r\022\014\n\004time\030\004 \001(\r"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto = {
    false,
    false,
    473,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto,
    "protos/perfetto/trace/ftrace/cpuhp.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class CpuhpExitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuhpExitFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CpuhpExitFtraceEvent, _impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CpuhpExitFtraceEvent::CpuhpExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CpuhpExitFtraceEvent)
}
CpuhpExitFtraceEvent::CpuhpExitFtraceEvent(const CpuhpExitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CpuhpExitFtraceEvent)
}

inline void CpuhpExitFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cpu_) { 0u }

    , decltype(_impl_.idx_) { 0 }

    , decltype(_impl_.ret_) { 0 }

    , decltype(_impl_.state_) { 0 }

  };
}

CpuhpExitFtraceEvent::~CpuhpExitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CpuhpExitFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuhpExitFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuhpExitFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuhpExitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CpuhpExitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.cpu_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuhpExitFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CpuhpExitFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CpuhpExitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu(), target);
  }

  // optional int32 idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_idx(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_ret(), target);
  }

  // optional int32 state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CpuhpExitFtraceEvent)
  return target;
}

::size_t CpuhpExitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CpuhpExitFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu());
    }

    // optional int32 idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 ret = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

    // optional int32 state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuhpExitFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuhpExitFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuhpExitFtraceEvent::GetClassData() const { return &_class_data_; }


void CpuhpExitFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuhpExitFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CpuhpExitFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CpuhpExitFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuhpExitFtraceEvent::CopyFrom(const CpuhpExitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CpuhpExitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuhpExitFtraceEvent::IsInitialized() const {
  return true;
}

void CpuhpExitFtraceEvent::InternalSwap(CpuhpExitFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuhpExitFtraceEvent, _impl_.state_)
      + sizeof(CpuhpExitFtraceEvent::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CpuhpExitFtraceEvent, _impl_.cpu_)>(
          reinterpret_cast<char*>(&_impl_.cpu_),
          reinterpret_cast<char*>(&other->_impl_.cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuhpExitFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[0]);
}
// ===================================================================

class CpuhpMultiEnterFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuhpMultiEnterFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CpuhpMultiEnterFtraceEvent, _impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fun(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CpuhpMultiEnterFtraceEvent::CpuhpMultiEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CpuhpMultiEnterFtraceEvent)
}
CpuhpMultiEnterFtraceEvent::CpuhpMultiEnterFtraceEvent(const CpuhpMultiEnterFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CpuhpMultiEnterFtraceEvent)
}

inline void CpuhpMultiEnterFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fun_) { ::uint64_t{0u} }

    , decltype(_impl_.cpu_) { 0u }

    , decltype(_impl_.idx_) { 0 }

    , decltype(_impl_.target_) { 0 }

  };
}

CpuhpMultiEnterFtraceEvent::~CpuhpMultiEnterFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuhpMultiEnterFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuhpMultiEnterFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuhpMultiEnterFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.fun_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.target_) -
        reinterpret_cast<char*>(&_impl_.fun_)) + sizeof(_impl_.target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuhpMultiEnterFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 fun = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_fun(&has_bits);
          _impl_.fun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_target(&has_bits);
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CpuhpMultiEnterFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu(), target);
  }

  // optional uint64 fun = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_fun(), target);
  }

  // optional int32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_idx(), target);
  }

  // optional int32 target = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  return target;
}

::size_t CpuhpMultiEnterFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 fun = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_fun());
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu());
    }

    // optional int32 idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 target = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuhpMultiEnterFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuhpMultiEnterFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuhpMultiEnterFtraceEvent::GetClassData() const { return &_class_data_; }


void CpuhpMultiEnterFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuhpMultiEnterFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CpuhpMultiEnterFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fun_ = from._impl_.fun_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_ = from._impl_.target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuhpMultiEnterFtraceEvent::CopyFrom(const CpuhpMultiEnterFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CpuhpMultiEnterFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuhpMultiEnterFtraceEvent::IsInitialized() const {
  return true;
}

void CpuhpMultiEnterFtraceEvent::InternalSwap(CpuhpMultiEnterFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuhpMultiEnterFtraceEvent, _impl_.target_)
      + sizeof(CpuhpMultiEnterFtraceEvent::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(CpuhpMultiEnterFtraceEvent, _impl_.fun_)>(
          reinterpret_cast<char*>(&_impl_.fun_),
          reinterpret_cast<char*>(&other->_impl_.fun_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuhpMultiEnterFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[1]);
}
// ===================================================================

class CpuhpEnterFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuhpEnterFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CpuhpEnterFtraceEvent, _impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fun(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CpuhpEnterFtraceEvent::CpuhpEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CpuhpEnterFtraceEvent)
}
CpuhpEnterFtraceEvent::CpuhpEnterFtraceEvent(const CpuhpEnterFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CpuhpEnterFtraceEvent)
}

inline void CpuhpEnterFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fun_) { ::uint64_t{0u} }

    , decltype(_impl_.cpu_) { 0u }

    , decltype(_impl_.idx_) { 0 }

    , decltype(_impl_.target_) { 0 }

  };
}

CpuhpEnterFtraceEvent::~CpuhpEnterFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CpuhpEnterFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuhpEnterFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuhpEnterFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuhpEnterFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CpuhpEnterFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.fun_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.target_) -
        reinterpret_cast<char*>(&_impl_.fun_)) + sizeof(_impl_.target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuhpEnterFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 fun = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_fun(&has_bits);
          _impl_.fun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_target(&has_bits);
          _impl_.target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CpuhpEnterFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CpuhpEnterFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu(), target);
  }

  // optional uint64 fun = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_fun(), target);
  }

  // optional int32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_idx(), target);
  }

  // optional int32 target = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CpuhpEnterFtraceEvent)
  return target;
}

::size_t CpuhpEnterFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CpuhpEnterFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 fun = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_fun());
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu());
    }

    // optional int32 idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_idx());
    }

    // optional int32 target = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuhpEnterFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuhpEnterFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuhpEnterFtraceEvent::GetClassData() const { return &_class_data_; }


void CpuhpEnterFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuhpEnterFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CpuhpEnterFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CpuhpEnterFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fun_ = from._impl_.fun_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.target_ = from._impl_.target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuhpEnterFtraceEvent::CopyFrom(const CpuhpEnterFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CpuhpEnterFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuhpEnterFtraceEvent::IsInitialized() const {
  return true;
}

void CpuhpEnterFtraceEvent::InternalSwap(CpuhpEnterFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuhpEnterFtraceEvent, _impl_.target_)
      + sizeof(CpuhpEnterFtraceEvent::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(CpuhpEnterFtraceEvent, _impl_.fun_)>(
          reinterpret_cast<char*>(&_impl_.fun_),
          reinterpret_cast<char*>(&other->_impl_.fun_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuhpEnterFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[2]);
}
// ===================================================================

class CpuhpLatencyFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuhpLatencyFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CpuhpLatencyFtraceEvent, _impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CpuhpLatencyFtraceEvent::CpuhpLatencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CpuhpLatencyFtraceEvent)
}
CpuhpLatencyFtraceEvent::CpuhpLatencyFtraceEvent(const CpuhpLatencyFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CpuhpLatencyFtraceEvent)
}

inline void CpuhpLatencyFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cpu_) { 0u }

    , decltype(_impl_.ret_) { 0 }

    , decltype(_impl_.time_) { ::uint64_t{0u} }

    , decltype(_impl_.state_) { 0u }

  };
}

CpuhpLatencyFtraceEvent::~CpuhpLatencyFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CpuhpLatencyFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuhpLatencyFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuhpLatencyFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuhpLatencyFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CpuhpLatencyFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.cpu_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuhpLatencyFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CpuhpLatencyFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CpuhpLatencyFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu(), target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_ret(), target);
  }

  // optional uint32 state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_state(), target);
  }

  // optional uint64 time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CpuhpLatencyFtraceEvent)
  return target;
}

::size_t CpuhpLatencyFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CpuhpLatencyFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu());
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

    // optional uint64 time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_time());
    }

    // optional uint32 state = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuhpLatencyFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuhpLatencyFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuhpLatencyFtraceEvent::GetClassData() const { return &_class_data_; }


void CpuhpLatencyFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuhpLatencyFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CpuhpLatencyFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CpuhpLatencyFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuhpLatencyFtraceEvent::CopyFrom(const CpuhpLatencyFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CpuhpLatencyFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuhpLatencyFtraceEvent::IsInitialized() const {
  return true;
}

void CpuhpLatencyFtraceEvent::InternalSwap(CpuhpLatencyFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuhpLatencyFtraceEvent, _impl_.state_)
      + sizeof(CpuhpLatencyFtraceEvent::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CpuhpLatencyFtraceEvent, _impl_.cpu_)>(
          reinterpret_cast<char*>(&_impl_.cpu_),
          reinterpret_cast<char*>(&other->_impl_.cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuhpLatencyFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[3]);
}
// ===================================================================

class CpuhpPauseFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuhpPauseFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CpuhpPauseFtraceEvent, _impl_._has_bits_);
  static void set_has_active_cpus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cpus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pause(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CpuhpPauseFtraceEvent::CpuhpPauseFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CpuhpPauseFtraceEvent)
}
CpuhpPauseFtraceEvent::CpuhpPauseFtraceEvent(const CpuhpPauseFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CpuhpPauseFtraceEvent)
}

inline void CpuhpPauseFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_cpus_) { 0u }

    , decltype(_impl_.cpus_) { 0u }

    , decltype(_impl_.pause_) { 0u }

    , decltype(_impl_.time_) { 0u }

  };
}

CpuhpPauseFtraceEvent::~CpuhpPauseFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CpuhpPauseFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CpuhpPauseFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CpuhpPauseFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CpuhpPauseFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CpuhpPauseFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.active_cpus_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.time_) -
        reinterpret_cast<char*>(&_impl_.active_cpus_)) + sizeof(_impl_.time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuhpPauseFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 active_cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_active_cpus(&has_bits);
          _impl_.active_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 cpus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_cpus(&has_bits);
          _impl_.cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 pause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pause(&has_bits);
          _impl_.pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CpuhpPauseFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CpuhpPauseFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 active_cpus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_active_cpus(), target);
  }

  // optional uint32 cpus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_cpus(), target);
  }

  // optional uint32 pause = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_pause(), target);
  }

  // optional uint32 time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CpuhpPauseFtraceEvent)
  return target;
}

::size_t CpuhpPauseFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CpuhpPauseFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 active_cpus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_active_cpus());
    }

    // optional uint32 cpus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpus());
    }

    // optional uint32 pause = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pause());
    }

    // optional uint32 time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuhpPauseFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CpuhpPauseFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuhpPauseFtraceEvent::GetClassData() const { return &_class_data_; }


void CpuhpPauseFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CpuhpPauseFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CpuhpPauseFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CpuhpPauseFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.active_cpus_ = from._impl_.active_cpus_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cpus_ = from._impl_.cpus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pause_ = from._impl_.pause_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuhpPauseFtraceEvent::CopyFrom(const CpuhpPauseFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CpuhpPauseFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuhpPauseFtraceEvent::IsInitialized() const {
  return true;
}

void CpuhpPauseFtraceEvent::InternalSwap(CpuhpPauseFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuhpPauseFtraceEvent, _impl_.time_)
      + sizeof(CpuhpPauseFtraceEvent::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(CpuhpPauseFtraceEvent, _impl_.active_cpus_)>(
          reinterpret_cast<char*>(&_impl_.active_cpus_),
          reinterpret_cast<char*>(&other->_impl_.active_cpus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuhpPauseFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CpuhpExitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CpuhpExitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CpuhpExitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CpuhpMultiEnterFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CpuhpMultiEnterFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CpuhpMultiEnterFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CpuhpEnterFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CpuhpEnterFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CpuhpEnterFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CpuhpLatencyFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CpuhpLatencyFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CpuhpLatencyFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CpuhpPauseFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CpuhpPauseFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CpuhpPauseFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
