// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ext4.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
namespace perfetto {
namespace protos {
class Ext4AllocDaBlocksFtraceEvent;
struct Ext4AllocDaBlocksFtraceEventDefaultTypeInternal;
extern Ext4AllocDaBlocksFtraceEventDefaultTypeInternal _Ext4AllocDaBlocksFtraceEvent_default_instance_;
class Ext4AllocateBlocksFtraceEvent;
struct Ext4AllocateBlocksFtraceEventDefaultTypeInternal;
extern Ext4AllocateBlocksFtraceEventDefaultTypeInternal _Ext4AllocateBlocksFtraceEvent_default_instance_;
class Ext4AllocateInodeFtraceEvent;
struct Ext4AllocateInodeFtraceEventDefaultTypeInternal;
extern Ext4AllocateInodeFtraceEventDefaultTypeInternal _Ext4AllocateInodeFtraceEvent_default_instance_;
class Ext4BeginOrderedTruncateFtraceEvent;
struct Ext4BeginOrderedTruncateFtraceEventDefaultTypeInternal;
extern Ext4BeginOrderedTruncateFtraceEventDefaultTypeInternal _Ext4BeginOrderedTruncateFtraceEvent_default_instance_;
class Ext4CollapseRangeFtraceEvent;
struct Ext4CollapseRangeFtraceEventDefaultTypeInternal;
extern Ext4CollapseRangeFtraceEventDefaultTypeInternal _Ext4CollapseRangeFtraceEvent_default_instance_;
class Ext4DaReleaseSpaceFtraceEvent;
struct Ext4DaReleaseSpaceFtraceEventDefaultTypeInternal;
extern Ext4DaReleaseSpaceFtraceEventDefaultTypeInternal _Ext4DaReleaseSpaceFtraceEvent_default_instance_;
class Ext4DaReserveSpaceFtraceEvent;
struct Ext4DaReserveSpaceFtraceEventDefaultTypeInternal;
extern Ext4DaReserveSpaceFtraceEventDefaultTypeInternal _Ext4DaReserveSpaceFtraceEvent_default_instance_;
class Ext4DaUpdateReserveSpaceFtraceEvent;
struct Ext4DaUpdateReserveSpaceFtraceEventDefaultTypeInternal;
extern Ext4DaUpdateReserveSpaceFtraceEventDefaultTypeInternal _Ext4DaUpdateReserveSpaceFtraceEvent_default_instance_;
class Ext4DaWriteBeginFtraceEvent;
struct Ext4DaWriteBeginFtraceEventDefaultTypeInternal;
extern Ext4DaWriteBeginFtraceEventDefaultTypeInternal _Ext4DaWriteBeginFtraceEvent_default_instance_;
class Ext4DaWriteEndFtraceEvent;
struct Ext4DaWriteEndFtraceEventDefaultTypeInternal;
extern Ext4DaWriteEndFtraceEventDefaultTypeInternal _Ext4DaWriteEndFtraceEvent_default_instance_;
class Ext4DaWritePagesExtentFtraceEvent;
struct Ext4DaWritePagesExtentFtraceEventDefaultTypeInternal;
extern Ext4DaWritePagesExtentFtraceEventDefaultTypeInternal _Ext4DaWritePagesExtentFtraceEvent_default_instance_;
class Ext4DaWritePagesFtraceEvent;
struct Ext4DaWritePagesFtraceEventDefaultTypeInternal;
extern Ext4DaWritePagesFtraceEventDefaultTypeInternal _Ext4DaWritePagesFtraceEvent_default_instance_;
class Ext4DirectIOEnterFtraceEvent;
struct Ext4DirectIOEnterFtraceEventDefaultTypeInternal;
extern Ext4DirectIOEnterFtraceEventDefaultTypeInternal _Ext4DirectIOEnterFtraceEvent_default_instance_;
class Ext4DirectIOExitFtraceEvent;
struct Ext4DirectIOExitFtraceEventDefaultTypeInternal;
extern Ext4DirectIOExitFtraceEventDefaultTypeInternal _Ext4DirectIOExitFtraceEvent_default_instance_;
class Ext4DiscardBlocksFtraceEvent;
struct Ext4DiscardBlocksFtraceEventDefaultTypeInternal;
extern Ext4DiscardBlocksFtraceEventDefaultTypeInternal _Ext4DiscardBlocksFtraceEvent_default_instance_;
class Ext4DiscardPreallocationsFtraceEvent;
struct Ext4DiscardPreallocationsFtraceEventDefaultTypeInternal;
extern Ext4DiscardPreallocationsFtraceEventDefaultTypeInternal _Ext4DiscardPreallocationsFtraceEvent_default_instance_;
class Ext4DropInodeFtraceEvent;
struct Ext4DropInodeFtraceEventDefaultTypeInternal;
extern Ext4DropInodeFtraceEventDefaultTypeInternal _Ext4DropInodeFtraceEvent_default_instance_;
class Ext4EsCacheExtentFtraceEvent;
struct Ext4EsCacheExtentFtraceEventDefaultTypeInternal;
extern Ext4EsCacheExtentFtraceEventDefaultTypeInternal _Ext4EsCacheExtentFtraceEvent_default_instance_;
class Ext4EsFindDelayedExtentRangeEnterFtraceEvent;
struct Ext4EsFindDelayedExtentRangeEnterFtraceEventDefaultTypeInternal;
extern Ext4EsFindDelayedExtentRangeEnterFtraceEventDefaultTypeInternal _Ext4EsFindDelayedExtentRangeEnterFtraceEvent_default_instance_;
class Ext4EsFindDelayedExtentRangeExitFtraceEvent;
struct Ext4EsFindDelayedExtentRangeExitFtraceEventDefaultTypeInternal;
extern Ext4EsFindDelayedExtentRangeExitFtraceEventDefaultTypeInternal _Ext4EsFindDelayedExtentRangeExitFtraceEvent_default_instance_;
class Ext4EsInsertExtentFtraceEvent;
struct Ext4EsInsertExtentFtraceEventDefaultTypeInternal;
extern Ext4EsInsertExtentFtraceEventDefaultTypeInternal _Ext4EsInsertExtentFtraceEvent_default_instance_;
class Ext4EsLookupExtentEnterFtraceEvent;
struct Ext4EsLookupExtentEnterFtraceEventDefaultTypeInternal;
extern Ext4EsLookupExtentEnterFtraceEventDefaultTypeInternal _Ext4EsLookupExtentEnterFtraceEvent_default_instance_;
class Ext4EsLookupExtentExitFtraceEvent;
struct Ext4EsLookupExtentExitFtraceEventDefaultTypeInternal;
extern Ext4EsLookupExtentExitFtraceEventDefaultTypeInternal _Ext4EsLookupExtentExitFtraceEvent_default_instance_;
class Ext4EsRemoveExtentFtraceEvent;
struct Ext4EsRemoveExtentFtraceEventDefaultTypeInternal;
extern Ext4EsRemoveExtentFtraceEventDefaultTypeInternal _Ext4EsRemoveExtentFtraceEvent_default_instance_;
class Ext4EsShrinkCountFtraceEvent;
struct Ext4EsShrinkCountFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkCountFtraceEventDefaultTypeInternal _Ext4EsShrinkCountFtraceEvent_default_instance_;
class Ext4EsShrinkFtraceEvent;
struct Ext4EsShrinkFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkFtraceEventDefaultTypeInternal _Ext4EsShrinkFtraceEvent_default_instance_;
class Ext4EsShrinkScanEnterFtraceEvent;
struct Ext4EsShrinkScanEnterFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkScanEnterFtraceEventDefaultTypeInternal _Ext4EsShrinkScanEnterFtraceEvent_default_instance_;
class Ext4EsShrinkScanExitFtraceEvent;
struct Ext4EsShrinkScanExitFtraceEventDefaultTypeInternal;
extern Ext4EsShrinkScanExitFtraceEventDefaultTypeInternal _Ext4EsShrinkScanExitFtraceEvent_default_instance_;
class Ext4EvictInodeFtraceEvent;
struct Ext4EvictInodeFtraceEventDefaultTypeInternal;
extern Ext4EvictInodeFtraceEventDefaultTypeInternal _Ext4EvictInodeFtraceEvent_default_instance_;
class Ext4ExtConvertToInitializedEnterFtraceEvent;
struct Ext4ExtConvertToInitializedEnterFtraceEventDefaultTypeInternal;
extern Ext4ExtConvertToInitializedEnterFtraceEventDefaultTypeInternal _Ext4ExtConvertToInitializedEnterFtraceEvent_default_instance_;
class Ext4ExtConvertToInitializedFastpathFtraceEvent;
struct Ext4ExtConvertToInitializedFastpathFtraceEventDefaultTypeInternal;
extern Ext4ExtConvertToInitializedFastpathFtraceEventDefaultTypeInternal _Ext4ExtConvertToInitializedFastpathFtraceEvent_default_instance_;
class Ext4ExtHandleUnwrittenExtentsFtraceEvent;
struct Ext4ExtHandleUnwrittenExtentsFtraceEventDefaultTypeInternal;
extern Ext4ExtHandleUnwrittenExtentsFtraceEventDefaultTypeInternal _Ext4ExtHandleUnwrittenExtentsFtraceEvent_default_instance_;
class Ext4ExtInCacheFtraceEvent;
struct Ext4ExtInCacheFtraceEventDefaultTypeInternal;
extern Ext4ExtInCacheFtraceEventDefaultTypeInternal _Ext4ExtInCacheFtraceEvent_default_instance_;
class Ext4ExtLoadExtentFtraceEvent;
struct Ext4ExtLoadExtentFtraceEventDefaultTypeInternal;
extern Ext4ExtLoadExtentFtraceEventDefaultTypeInternal _Ext4ExtLoadExtentFtraceEvent_default_instance_;
class Ext4ExtMapBlocksEnterFtraceEvent;
struct Ext4ExtMapBlocksEnterFtraceEventDefaultTypeInternal;
extern Ext4ExtMapBlocksEnterFtraceEventDefaultTypeInternal _Ext4ExtMapBlocksEnterFtraceEvent_default_instance_;
class Ext4ExtMapBlocksExitFtraceEvent;
struct Ext4ExtMapBlocksExitFtraceEventDefaultTypeInternal;
extern Ext4ExtMapBlocksExitFtraceEventDefaultTypeInternal _Ext4ExtMapBlocksExitFtraceEvent_default_instance_;
class Ext4ExtPutInCacheFtraceEvent;
struct Ext4ExtPutInCacheFtraceEventDefaultTypeInternal;
extern Ext4ExtPutInCacheFtraceEventDefaultTypeInternal _Ext4ExtPutInCacheFtraceEvent_default_instance_;
class Ext4ExtRemoveSpaceDoneFtraceEvent;
struct Ext4ExtRemoveSpaceDoneFtraceEventDefaultTypeInternal;
extern Ext4ExtRemoveSpaceDoneFtraceEventDefaultTypeInternal _Ext4ExtRemoveSpaceDoneFtraceEvent_default_instance_;
class Ext4ExtRemoveSpaceFtraceEvent;
struct Ext4ExtRemoveSpaceFtraceEventDefaultTypeInternal;
extern Ext4ExtRemoveSpaceFtraceEventDefaultTypeInternal _Ext4ExtRemoveSpaceFtraceEvent_default_instance_;
class Ext4ExtRmIdxFtraceEvent;
struct Ext4ExtRmIdxFtraceEventDefaultTypeInternal;
extern Ext4ExtRmIdxFtraceEventDefaultTypeInternal _Ext4ExtRmIdxFtraceEvent_default_instance_;
class Ext4ExtRmLeafFtraceEvent;
struct Ext4ExtRmLeafFtraceEventDefaultTypeInternal;
extern Ext4ExtRmLeafFtraceEventDefaultTypeInternal _Ext4ExtRmLeafFtraceEvent_default_instance_;
class Ext4ExtShowExtentFtraceEvent;
struct Ext4ExtShowExtentFtraceEventDefaultTypeInternal;
extern Ext4ExtShowExtentFtraceEventDefaultTypeInternal _Ext4ExtShowExtentFtraceEvent_default_instance_;
class Ext4FallocateEnterFtraceEvent;
struct Ext4FallocateEnterFtraceEventDefaultTypeInternal;
extern Ext4FallocateEnterFtraceEventDefaultTypeInternal _Ext4FallocateEnterFtraceEvent_default_instance_;
class Ext4FallocateExitFtraceEvent;
struct Ext4FallocateExitFtraceEventDefaultTypeInternal;
extern Ext4FallocateExitFtraceEventDefaultTypeInternal _Ext4FallocateExitFtraceEvent_default_instance_;
class Ext4FindDelallocRangeFtraceEvent;
struct Ext4FindDelallocRangeFtraceEventDefaultTypeInternal;
extern Ext4FindDelallocRangeFtraceEventDefaultTypeInternal _Ext4FindDelallocRangeFtraceEvent_default_instance_;
class Ext4ForgetFtraceEvent;
struct Ext4ForgetFtraceEventDefaultTypeInternal;
extern Ext4ForgetFtraceEventDefaultTypeInternal _Ext4ForgetFtraceEvent_default_instance_;
class Ext4FreeBlocksFtraceEvent;
struct Ext4FreeBlocksFtraceEventDefaultTypeInternal;
extern Ext4FreeBlocksFtraceEventDefaultTypeInternal _Ext4FreeBlocksFtraceEvent_default_instance_;
class Ext4FreeInodeFtraceEvent;
struct Ext4FreeInodeFtraceEventDefaultTypeInternal;
extern Ext4FreeInodeFtraceEventDefaultTypeInternal _Ext4FreeInodeFtraceEvent_default_instance_;
class Ext4GetImpliedClusterAllocExitFtraceEvent;
struct Ext4GetImpliedClusterAllocExitFtraceEventDefaultTypeInternal;
extern Ext4GetImpliedClusterAllocExitFtraceEventDefaultTypeInternal _Ext4GetImpliedClusterAllocExitFtraceEvent_default_instance_;
class Ext4GetReservedClusterAllocFtraceEvent;
struct Ext4GetReservedClusterAllocFtraceEventDefaultTypeInternal;
extern Ext4GetReservedClusterAllocFtraceEventDefaultTypeInternal _Ext4GetReservedClusterAllocFtraceEvent_default_instance_;
class Ext4IndMapBlocksEnterFtraceEvent;
struct Ext4IndMapBlocksEnterFtraceEventDefaultTypeInternal;
extern Ext4IndMapBlocksEnterFtraceEventDefaultTypeInternal _Ext4IndMapBlocksEnterFtraceEvent_default_instance_;
class Ext4IndMapBlocksExitFtraceEvent;
struct Ext4IndMapBlocksExitFtraceEventDefaultTypeInternal;
extern Ext4IndMapBlocksExitFtraceEventDefaultTypeInternal _Ext4IndMapBlocksExitFtraceEvent_default_instance_;
class Ext4InsertRangeFtraceEvent;
struct Ext4InsertRangeFtraceEventDefaultTypeInternal;
extern Ext4InsertRangeFtraceEventDefaultTypeInternal _Ext4InsertRangeFtraceEvent_default_instance_;
class Ext4InvalidatepageFtraceEvent;
struct Ext4InvalidatepageFtraceEventDefaultTypeInternal;
extern Ext4InvalidatepageFtraceEventDefaultTypeInternal _Ext4InvalidatepageFtraceEvent_default_instance_;
class Ext4JournalStartFtraceEvent;
struct Ext4JournalStartFtraceEventDefaultTypeInternal;
extern Ext4JournalStartFtraceEventDefaultTypeInternal _Ext4JournalStartFtraceEvent_default_instance_;
class Ext4JournalStartReservedFtraceEvent;
struct Ext4JournalStartReservedFtraceEventDefaultTypeInternal;
extern Ext4JournalStartReservedFtraceEventDefaultTypeInternal _Ext4JournalStartReservedFtraceEvent_default_instance_;
class Ext4JournalledInvalidatepageFtraceEvent;
struct Ext4JournalledInvalidatepageFtraceEventDefaultTypeInternal;
extern Ext4JournalledInvalidatepageFtraceEventDefaultTypeInternal _Ext4JournalledInvalidatepageFtraceEvent_default_instance_;
class Ext4JournalledWriteEndFtraceEvent;
struct Ext4JournalledWriteEndFtraceEventDefaultTypeInternal;
extern Ext4JournalledWriteEndFtraceEventDefaultTypeInternal _Ext4JournalledWriteEndFtraceEvent_default_instance_;
class Ext4LoadInodeBitmapFtraceEvent;
struct Ext4LoadInodeBitmapFtraceEventDefaultTypeInternal;
extern Ext4LoadInodeBitmapFtraceEventDefaultTypeInternal _Ext4LoadInodeBitmapFtraceEvent_default_instance_;
class Ext4LoadInodeFtraceEvent;
struct Ext4LoadInodeFtraceEventDefaultTypeInternal;
extern Ext4LoadInodeFtraceEventDefaultTypeInternal _Ext4LoadInodeFtraceEvent_default_instance_;
class Ext4MarkInodeDirtyFtraceEvent;
struct Ext4MarkInodeDirtyFtraceEventDefaultTypeInternal;
extern Ext4MarkInodeDirtyFtraceEventDefaultTypeInternal _Ext4MarkInodeDirtyFtraceEvent_default_instance_;
class Ext4MbBitmapLoadFtraceEvent;
struct Ext4MbBitmapLoadFtraceEventDefaultTypeInternal;
extern Ext4MbBitmapLoadFtraceEventDefaultTypeInternal _Ext4MbBitmapLoadFtraceEvent_default_instance_;
class Ext4MbBuddyBitmapLoadFtraceEvent;
struct Ext4MbBuddyBitmapLoadFtraceEventDefaultTypeInternal;
extern Ext4MbBuddyBitmapLoadFtraceEventDefaultTypeInternal _Ext4MbBuddyBitmapLoadFtraceEvent_default_instance_;
class Ext4MbDiscardPreallocationsFtraceEvent;
struct Ext4MbDiscardPreallocationsFtraceEventDefaultTypeInternal;
extern Ext4MbDiscardPreallocationsFtraceEventDefaultTypeInternal _Ext4MbDiscardPreallocationsFtraceEvent_default_instance_;
class Ext4MbNewGroupPaFtraceEvent;
struct Ext4MbNewGroupPaFtraceEventDefaultTypeInternal;
extern Ext4MbNewGroupPaFtraceEventDefaultTypeInternal _Ext4MbNewGroupPaFtraceEvent_default_instance_;
class Ext4MbNewInodePaFtraceEvent;
struct Ext4MbNewInodePaFtraceEventDefaultTypeInternal;
extern Ext4MbNewInodePaFtraceEventDefaultTypeInternal _Ext4MbNewInodePaFtraceEvent_default_instance_;
class Ext4MbReleaseGroupPaFtraceEvent;
struct Ext4MbReleaseGroupPaFtraceEventDefaultTypeInternal;
extern Ext4MbReleaseGroupPaFtraceEventDefaultTypeInternal _Ext4MbReleaseGroupPaFtraceEvent_default_instance_;
class Ext4MbReleaseInodePaFtraceEvent;
struct Ext4MbReleaseInodePaFtraceEventDefaultTypeInternal;
extern Ext4MbReleaseInodePaFtraceEventDefaultTypeInternal _Ext4MbReleaseInodePaFtraceEvent_default_instance_;
class Ext4MballocAllocFtraceEvent;
struct Ext4MballocAllocFtraceEventDefaultTypeInternal;
extern Ext4MballocAllocFtraceEventDefaultTypeInternal _Ext4MballocAllocFtraceEvent_default_instance_;
class Ext4MballocDiscardFtraceEvent;
struct Ext4MballocDiscardFtraceEventDefaultTypeInternal;
extern Ext4MballocDiscardFtraceEventDefaultTypeInternal _Ext4MballocDiscardFtraceEvent_default_instance_;
class Ext4MballocFreeFtraceEvent;
struct Ext4MballocFreeFtraceEventDefaultTypeInternal;
extern Ext4MballocFreeFtraceEventDefaultTypeInternal _Ext4MballocFreeFtraceEvent_default_instance_;
class Ext4MballocPreallocFtraceEvent;
struct Ext4MballocPreallocFtraceEventDefaultTypeInternal;
extern Ext4MballocPreallocFtraceEventDefaultTypeInternal _Ext4MballocPreallocFtraceEvent_default_instance_;
class Ext4OtherInodeUpdateTimeFtraceEvent;
struct Ext4OtherInodeUpdateTimeFtraceEventDefaultTypeInternal;
extern Ext4OtherInodeUpdateTimeFtraceEventDefaultTypeInternal _Ext4OtherInodeUpdateTimeFtraceEvent_default_instance_;
class Ext4PunchHoleFtraceEvent;
struct Ext4PunchHoleFtraceEventDefaultTypeInternal;
extern Ext4PunchHoleFtraceEventDefaultTypeInternal _Ext4PunchHoleFtraceEvent_default_instance_;
class Ext4ReadBlockBitmapLoadFtraceEvent;
struct Ext4ReadBlockBitmapLoadFtraceEventDefaultTypeInternal;
extern Ext4ReadBlockBitmapLoadFtraceEventDefaultTypeInternal _Ext4ReadBlockBitmapLoadFtraceEvent_default_instance_;
class Ext4ReadpageFtraceEvent;
struct Ext4ReadpageFtraceEventDefaultTypeInternal;
extern Ext4ReadpageFtraceEventDefaultTypeInternal _Ext4ReadpageFtraceEvent_default_instance_;
class Ext4ReleasepageFtraceEvent;
struct Ext4ReleasepageFtraceEventDefaultTypeInternal;
extern Ext4ReleasepageFtraceEventDefaultTypeInternal _Ext4ReleasepageFtraceEvent_default_instance_;
class Ext4RemoveBlocksFtraceEvent;
struct Ext4RemoveBlocksFtraceEventDefaultTypeInternal;
extern Ext4RemoveBlocksFtraceEventDefaultTypeInternal _Ext4RemoveBlocksFtraceEvent_default_instance_;
class Ext4RequestBlocksFtraceEvent;
struct Ext4RequestBlocksFtraceEventDefaultTypeInternal;
extern Ext4RequestBlocksFtraceEventDefaultTypeInternal _Ext4RequestBlocksFtraceEvent_default_instance_;
class Ext4RequestInodeFtraceEvent;
struct Ext4RequestInodeFtraceEventDefaultTypeInternal;
extern Ext4RequestInodeFtraceEventDefaultTypeInternal _Ext4RequestInodeFtraceEvent_default_instance_;
class Ext4SyncFileEnterFtraceEvent;
struct Ext4SyncFileEnterFtraceEventDefaultTypeInternal;
extern Ext4SyncFileEnterFtraceEventDefaultTypeInternal _Ext4SyncFileEnterFtraceEvent_default_instance_;
class Ext4SyncFileExitFtraceEvent;
struct Ext4SyncFileExitFtraceEventDefaultTypeInternal;
extern Ext4SyncFileExitFtraceEventDefaultTypeInternal _Ext4SyncFileExitFtraceEvent_default_instance_;
class Ext4SyncFsFtraceEvent;
struct Ext4SyncFsFtraceEventDefaultTypeInternal;
extern Ext4SyncFsFtraceEventDefaultTypeInternal _Ext4SyncFsFtraceEvent_default_instance_;
class Ext4TrimAllFreeFtraceEvent;
struct Ext4TrimAllFreeFtraceEventDefaultTypeInternal;
extern Ext4TrimAllFreeFtraceEventDefaultTypeInternal _Ext4TrimAllFreeFtraceEvent_default_instance_;
class Ext4TrimExtentFtraceEvent;
struct Ext4TrimExtentFtraceEventDefaultTypeInternal;
extern Ext4TrimExtentFtraceEventDefaultTypeInternal _Ext4TrimExtentFtraceEvent_default_instance_;
class Ext4TruncateEnterFtraceEvent;
struct Ext4TruncateEnterFtraceEventDefaultTypeInternal;
extern Ext4TruncateEnterFtraceEventDefaultTypeInternal _Ext4TruncateEnterFtraceEvent_default_instance_;
class Ext4TruncateExitFtraceEvent;
struct Ext4TruncateExitFtraceEventDefaultTypeInternal;
extern Ext4TruncateExitFtraceEventDefaultTypeInternal _Ext4TruncateExitFtraceEvent_default_instance_;
class Ext4UnlinkEnterFtraceEvent;
struct Ext4UnlinkEnterFtraceEventDefaultTypeInternal;
extern Ext4UnlinkEnterFtraceEventDefaultTypeInternal _Ext4UnlinkEnterFtraceEvent_default_instance_;
class Ext4UnlinkExitFtraceEvent;
struct Ext4UnlinkExitFtraceEventDefaultTypeInternal;
extern Ext4UnlinkExitFtraceEventDefaultTypeInternal _Ext4UnlinkExitFtraceEvent_default_instance_;
class Ext4WriteBeginFtraceEvent;
struct Ext4WriteBeginFtraceEventDefaultTypeInternal;
extern Ext4WriteBeginFtraceEventDefaultTypeInternal _Ext4WriteBeginFtraceEvent_default_instance_;
class Ext4WriteEndFtraceEvent;
struct Ext4WriteEndFtraceEventDefaultTypeInternal;
extern Ext4WriteEndFtraceEventDefaultTypeInternal _Ext4WriteEndFtraceEvent_default_instance_;
class Ext4WritepageFtraceEvent;
struct Ext4WritepageFtraceEventDefaultTypeInternal;
extern Ext4WritepageFtraceEventDefaultTypeInternal _Ext4WritepageFtraceEvent_default_instance_;
class Ext4WritepagesFtraceEvent;
struct Ext4WritepagesFtraceEventDefaultTypeInternal;
extern Ext4WritepagesFtraceEventDefaultTypeInternal _Ext4WritepagesFtraceEvent_default_instance_;
class Ext4WritepagesResultFtraceEvent;
struct Ext4WritepagesResultFtraceEventDefaultTypeInternal;
extern Ext4WritepagesResultFtraceEventDefaultTypeInternal _Ext4WritepagesResultFtraceEvent_default_instance_;
class Ext4ZeroRangeFtraceEvent;
struct Ext4ZeroRangeFtraceEventDefaultTypeInternal;
extern Ext4ZeroRangeFtraceEventDefaultTypeInternal _Ext4ZeroRangeFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4AllocDaBlocksFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4AllocateBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4AllocateBlocksFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4AllocateInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4AllocateInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4CollapseRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4CollapseRangeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaReserveSpaceFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaWriteBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWriteBeginFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaWriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWriteEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DaWritePagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DaWritePagesFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DirectIOEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DirectIOEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DirectIOExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DirectIOExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DiscardBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DiscardBlocksFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4DropInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4DropInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsCacheExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsCacheExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsInsertExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsInsertExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsRemoveExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsShrinkCountFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkCountFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsShrinkFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4EvictInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4EvictInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtInCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtInCacheFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtLoadExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtPutInCacheFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtRmIdxFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRmIdxFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtRmLeafFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtRmLeafFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ExtShowExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ExtShowExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4FallocateEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FallocateEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4FallocateExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FallocateExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FindDelallocRangeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ForgetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ForgetFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4FreeBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FreeBlocksFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4FreeInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4FreeInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4InsertRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4InsertRangeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4InvalidatepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4InvalidatepageFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4JournalStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalStartFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4JournalStartReservedFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalStartReservedFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4JournalledWriteEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4LoadInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4LoadInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbBitmapLoadFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbNewGroupPaFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbNewInodePaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbNewInodePaFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MballocAllocFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocAllocFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MballocDiscardFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocDiscardFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MballocFreeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocFreeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4MballocPreallocFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4MballocPreallocFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4PunchHoleFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4PunchHoleFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ReadpageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ReadpageFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ReleasepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ReleasepageFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4RemoveBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4RemoveBlocksFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4RequestBlocksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4RequestBlocksFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4RequestInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4RequestInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4SyncFileEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4SyncFileEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4SyncFileExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4SyncFileExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4SyncFsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4SyncFsFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4TrimAllFreeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TrimAllFreeFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4TrimExtentFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TrimExtentFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4TruncateEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TruncateEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4TruncateExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4TruncateExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4UnlinkEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4UnlinkEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4UnlinkExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4UnlinkExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4WriteBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WriteBeginFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4WriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WriteEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4WritepageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WritepageFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4WritepagesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WritepagesFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4WritepagesResultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4WritepagesResultFtraceEvent>(Arena*);
template <>
::perfetto::protos::Ext4ZeroRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::Ext4ZeroRangeFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class Ext4DaWriteBeginFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWriteBeginFtraceEvent) */ {
 public:
  inline Ext4DaWriteBeginFtraceEvent() : Ext4DaWriteBeginFtraceEvent(nullptr) {}
  ~Ext4DaWriteBeginFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaWriteBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaWriteBeginFtraceEvent(const Ext4DaWriteBeginFtraceEvent& from);
  Ext4DaWriteBeginFtraceEvent(Ext4DaWriteBeginFtraceEvent&& from) noexcept
    : Ext4DaWriteBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWriteBeginFtraceEvent& operator=(const Ext4DaWriteBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWriteBeginFtraceEvent& operator=(Ext4DaWriteBeginFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaWriteBeginFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaWriteBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWriteBeginFtraceEvent*>(
               &_Ext4DaWriteBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ext4DaWriteBeginFtraceEvent& a, Ext4DaWriteBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWriteBeginFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaWriteBeginFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaWriteBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaWriteBeginFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaWriteBeginFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaWriteBeginFtraceEvent& from) {
    Ext4DaWriteBeginFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaWriteBeginFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaWriteBeginFtraceEvent";
  }
  protected:
  explicit Ext4DaWriteBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWriteBeginFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DaWriteEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWriteEndFtraceEvent) */ {
 public:
  inline Ext4DaWriteEndFtraceEvent() : Ext4DaWriteEndFtraceEvent(nullptr) {}
  ~Ext4DaWriteEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaWriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaWriteEndFtraceEvent(const Ext4DaWriteEndFtraceEvent& from);
  Ext4DaWriteEndFtraceEvent(Ext4DaWriteEndFtraceEvent&& from) noexcept
    : Ext4DaWriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWriteEndFtraceEvent& operator=(const Ext4DaWriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWriteEndFtraceEvent& operator=(Ext4DaWriteEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaWriteEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaWriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWriteEndFtraceEvent*>(
               &_Ext4DaWriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ext4DaWriteEndFtraceEvent& a, Ext4DaWriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWriteEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaWriteEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaWriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaWriteEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaWriteEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaWriteEndFtraceEvent& from) {
    Ext4DaWriteEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaWriteEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaWriteEndFtraceEvent";
  }
  protected:
  explicit Ext4DaWriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied() ;
  ::uint32_t copied() const;
  void set_copied(::uint32_t value);

  private:
  ::uint32_t _internal_copied() const;
  void _internal_set_copied(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWriteEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t copied_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4SyncFileEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4SyncFileEnterFtraceEvent) */ {
 public:
  inline Ext4SyncFileEnterFtraceEvent() : Ext4SyncFileEnterFtraceEvent(nullptr) {}
  ~Ext4SyncFileEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4SyncFileEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4SyncFileEnterFtraceEvent(const Ext4SyncFileEnterFtraceEvent& from);
  Ext4SyncFileEnterFtraceEvent(Ext4SyncFileEnterFtraceEvent&& from) noexcept
    : Ext4SyncFileEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4SyncFileEnterFtraceEvent& operator=(const Ext4SyncFileEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4SyncFileEnterFtraceEvent& operator=(Ext4SyncFileEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4SyncFileEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4SyncFileEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4SyncFileEnterFtraceEvent*>(
               &_Ext4SyncFileEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ext4SyncFileEnterFtraceEvent& a, Ext4SyncFileEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4SyncFileEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4SyncFileEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4SyncFileEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4SyncFileEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4SyncFileEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4SyncFileEnterFtraceEvent& from) {
    Ext4SyncFileEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4SyncFileEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4SyncFileEnterFtraceEvent";
  }
  protected:
  explicit Ext4SyncFileEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kParentFieldNumber = 3,
    kDatasyncFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 parent = 3;
  bool has_parent() const;
  void clear_parent() ;
  ::uint64_t parent() const;
  void set_parent(::uint64_t value);

  private:
  ::uint64_t _internal_parent() const;
  void _internal_set_parent(::uint64_t value);

  public:
  // optional int32 datasync = 4;
  bool has_datasync() const;
  void clear_datasync() ;
  ::int32_t datasync() const;
  void set_datasync(::int32_t value);

  private:
  ::int32_t _internal_datasync() const;
  void _internal_set_datasync(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4SyncFileEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t parent_;
    ::int32_t datasync_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4SyncFileExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4SyncFileExitFtraceEvent) */ {
 public:
  inline Ext4SyncFileExitFtraceEvent() : Ext4SyncFileExitFtraceEvent(nullptr) {}
  ~Ext4SyncFileExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4SyncFileExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4SyncFileExitFtraceEvent(const Ext4SyncFileExitFtraceEvent& from);
  Ext4SyncFileExitFtraceEvent(Ext4SyncFileExitFtraceEvent&& from) noexcept
    : Ext4SyncFileExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4SyncFileExitFtraceEvent& operator=(const Ext4SyncFileExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4SyncFileExitFtraceEvent& operator=(Ext4SyncFileExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4SyncFileExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4SyncFileExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4SyncFileExitFtraceEvent*>(
               &_Ext4SyncFileExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ext4SyncFileExitFtraceEvent& a, Ext4SyncFileExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4SyncFileExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4SyncFileExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4SyncFileExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4SyncFileExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4SyncFileExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4SyncFileExitFtraceEvent& from) {
    Ext4SyncFileExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4SyncFileExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4SyncFileExitFtraceEvent";
  }
  protected:
  explicit Ext4SyncFileExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4SyncFileExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4AllocDaBlocksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4AllocDaBlocksFtraceEvent) */ {
 public:
  inline Ext4AllocDaBlocksFtraceEvent() : Ext4AllocDaBlocksFtraceEvent(nullptr) {}
  ~Ext4AllocDaBlocksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4AllocDaBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4AllocDaBlocksFtraceEvent(const Ext4AllocDaBlocksFtraceEvent& from);
  Ext4AllocDaBlocksFtraceEvent(Ext4AllocDaBlocksFtraceEvent&& from) noexcept
    : Ext4AllocDaBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4AllocDaBlocksFtraceEvent& operator=(const Ext4AllocDaBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4AllocDaBlocksFtraceEvent& operator=(Ext4AllocDaBlocksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4AllocDaBlocksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4AllocDaBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4AllocDaBlocksFtraceEvent*>(
               &_Ext4AllocDaBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ext4AllocDaBlocksFtraceEvent& a, Ext4AllocDaBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4AllocDaBlocksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4AllocDaBlocksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4AllocDaBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4AllocDaBlocksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4AllocDaBlocksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4AllocDaBlocksFtraceEvent& from) {
    Ext4AllocDaBlocksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4AllocDaBlocksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4AllocDaBlocksFtraceEvent";
  }
  protected:
  explicit Ext4AllocDaBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kDataBlocksFieldNumber = 3,
    kMetaBlocksFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 data_blocks = 3;
  bool has_data_blocks() const;
  void clear_data_blocks() ;
  ::uint32_t data_blocks() const;
  void set_data_blocks(::uint32_t value);

  private:
  ::uint32_t _internal_data_blocks() const;
  void _internal_set_data_blocks(::uint32_t value);

  public:
  // optional uint32 meta_blocks = 4;
  bool has_meta_blocks() const;
  void clear_meta_blocks() ;
  ::uint32_t meta_blocks() const;
  void set_meta_blocks(::uint32_t value);

  private:
  ::uint32_t _internal_meta_blocks() const;
  void _internal_set_meta_blocks(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4AllocDaBlocksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t data_blocks_;
    ::uint32_t meta_blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4AllocateBlocksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4AllocateBlocksFtraceEvent) */ {
 public:
  inline Ext4AllocateBlocksFtraceEvent() : Ext4AllocateBlocksFtraceEvent(nullptr) {}
  ~Ext4AllocateBlocksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4AllocateBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4AllocateBlocksFtraceEvent(const Ext4AllocateBlocksFtraceEvent& from);
  Ext4AllocateBlocksFtraceEvent(Ext4AllocateBlocksFtraceEvent&& from) noexcept
    : Ext4AllocateBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4AllocateBlocksFtraceEvent& operator=(const Ext4AllocateBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4AllocateBlocksFtraceEvent& operator=(Ext4AllocateBlocksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4AllocateBlocksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4AllocateBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4AllocateBlocksFtraceEvent*>(
               &_Ext4AllocateBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Ext4AllocateBlocksFtraceEvent& a, Ext4AllocateBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4AllocateBlocksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4AllocateBlocksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4AllocateBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4AllocateBlocksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4AllocateBlocksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4AllocateBlocksFtraceEvent& from) {
    Ext4AllocateBlocksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4AllocateBlocksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4AllocateBlocksFtraceEvent";
  }
  protected:
  explicit Ext4AllocateBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kLenFieldNumber = 4,
    kLogicalFieldNumber = 5,
    kLleftFieldNumber = 6,
    kLrightFieldNumber = 7,
    kGoalFieldNumber = 8,
    kPleftFieldNumber = 9,
    kPrightFieldNumber = 10,
    kFlagsFieldNumber = 11,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block() ;
  ::uint64_t block() const;
  void set_block(::uint64_t value);

  private:
  ::uint64_t _internal_block() const;
  void _internal_set_block(::uint64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 logical = 5;
  bool has_logical() const;
  void clear_logical() ;
  ::uint32_t logical() const;
  void set_logical(::uint32_t value);

  private:
  ::uint32_t _internal_logical() const;
  void _internal_set_logical(::uint32_t value);

  public:
  // optional uint32 lleft = 6;
  bool has_lleft() const;
  void clear_lleft() ;
  ::uint32_t lleft() const;
  void set_lleft(::uint32_t value);

  private:
  ::uint32_t _internal_lleft() const;
  void _internal_set_lleft(::uint32_t value);

  public:
  // optional uint32 lright = 7;
  bool has_lright() const;
  void clear_lright() ;
  ::uint32_t lright() const;
  void set_lright(::uint32_t value);

  private:
  ::uint32_t _internal_lright() const;
  void _internal_set_lright(::uint32_t value);

  public:
  // optional uint64 goal = 8;
  bool has_goal() const;
  void clear_goal() ;
  ::uint64_t goal() const;
  void set_goal(::uint64_t value);

  private:
  ::uint64_t _internal_goal() const;
  void _internal_set_goal(::uint64_t value);

  public:
  // optional uint64 pleft = 9;
  bool has_pleft() const;
  void clear_pleft() ;
  ::uint64_t pleft() const;
  void set_pleft(::uint64_t value);

  private:
  ::uint64_t _internal_pleft() const;
  void _internal_set_pleft(::uint64_t value);

  public:
  // optional uint64 pright = 10;
  bool has_pright() const;
  void clear_pright() ;
  ::uint64_t pright() const;
  void set_pright(::uint64_t value);

  private:
  ::uint64_t _internal_pright() const;
  void _internal_set_pright(::uint64_t value);

  public:
  // optional uint32 flags = 11;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4AllocateBlocksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t block_;
    ::uint32_t len_;
    ::uint32_t logical_;
    ::uint32_t lleft_;
    ::uint32_t lright_;
    ::uint64_t goal_;
    ::uint64_t pleft_;
    ::uint64_t pright_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4AllocateInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4AllocateInodeFtraceEvent) */ {
 public:
  inline Ext4AllocateInodeFtraceEvent() : Ext4AllocateInodeFtraceEvent(nullptr) {}
  ~Ext4AllocateInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4AllocateInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4AllocateInodeFtraceEvent(const Ext4AllocateInodeFtraceEvent& from);
  Ext4AllocateInodeFtraceEvent(Ext4AllocateInodeFtraceEvent&& from) noexcept
    : Ext4AllocateInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4AllocateInodeFtraceEvent& operator=(const Ext4AllocateInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4AllocateInodeFtraceEvent& operator=(Ext4AllocateInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4AllocateInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4AllocateInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4AllocateInodeFtraceEvent*>(
               &_Ext4AllocateInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Ext4AllocateInodeFtraceEvent& a, Ext4AllocateInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4AllocateInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4AllocateInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4AllocateInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4AllocateInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4AllocateInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4AllocateInodeFtraceEvent& from) {
    Ext4AllocateInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4AllocateInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4AllocateInodeFtraceEvent";
  }
  protected:
  explicit Ext4AllocateInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kDirFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 dir = 3;
  bool has_dir() const;
  void clear_dir() ;
  ::uint64_t dir() const;
  void set_dir(::uint64_t value);

  private:
  ::uint64_t _internal_dir() const;
  void _internal_set_dir(::uint64_t value);

  public:
  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4AllocateInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t dir_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4BeginOrderedTruncateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent) */ {
 public:
  inline Ext4BeginOrderedTruncateFtraceEvent() : Ext4BeginOrderedTruncateFtraceEvent(nullptr) {}
  ~Ext4BeginOrderedTruncateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4BeginOrderedTruncateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4BeginOrderedTruncateFtraceEvent(const Ext4BeginOrderedTruncateFtraceEvent& from);
  Ext4BeginOrderedTruncateFtraceEvent(Ext4BeginOrderedTruncateFtraceEvent&& from) noexcept
    : Ext4BeginOrderedTruncateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4BeginOrderedTruncateFtraceEvent& operator=(const Ext4BeginOrderedTruncateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4BeginOrderedTruncateFtraceEvent& operator=(Ext4BeginOrderedTruncateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4BeginOrderedTruncateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4BeginOrderedTruncateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4BeginOrderedTruncateFtraceEvent*>(
               &_Ext4BeginOrderedTruncateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Ext4BeginOrderedTruncateFtraceEvent& a, Ext4BeginOrderedTruncateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4BeginOrderedTruncateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4BeginOrderedTruncateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4BeginOrderedTruncateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4BeginOrderedTruncateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4BeginOrderedTruncateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4BeginOrderedTruncateFtraceEvent& from) {
    Ext4BeginOrderedTruncateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4BeginOrderedTruncateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent";
  }
  protected:
  explicit Ext4BeginOrderedTruncateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNewSizeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 new_size = 3;
  bool has_new_size() const;
  void clear_new_size() ;
  ::int64_t new_size() const;
  void set_new_size(::int64_t value);

  private:
  ::int64_t _internal_new_size() const;
  void _internal_set_new_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t new_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4CollapseRangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4CollapseRangeFtraceEvent) */ {
 public:
  inline Ext4CollapseRangeFtraceEvent() : Ext4CollapseRangeFtraceEvent(nullptr) {}
  ~Ext4CollapseRangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4CollapseRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4CollapseRangeFtraceEvent(const Ext4CollapseRangeFtraceEvent& from);
  Ext4CollapseRangeFtraceEvent(Ext4CollapseRangeFtraceEvent&& from) noexcept
    : Ext4CollapseRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4CollapseRangeFtraceEvent& operator=(const Ext4CollapseRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4CollapseRangeFtraceEvent& operator=(Ext4CollapseRangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4CollapseRangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4CollapseRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4CollapseRangeFtraceEvent*>(
               &_Ext4CollapseRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Ext4CollapseRangeFtraceEvent& a, Ext4CollapseRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4CollapseRangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4CollapseRangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4CollapseRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4CollapseRangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4CollapseRangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4CollapseRangeFtraceEvent& from) {
    Ext4CollapseRangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4CollapseRangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4CollapseRangeFtraceEvent";
  }
  protected:
  explicit Ext4CollapseRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4CollapseRangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int64_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DaReleaseSpaceFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent) */ {
 public:
  inline Ext4DaReleaseSpaceFtraceEvent() : Ext4DaReleaseSpaceFtraceEvent(nullptr) {}
  ~Ext4DaReleaseSpaceFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaReleaseSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaReleaseSpaceFtraceEvent(const Ext4DaReleaseSpaceFtraceEvent& from);
  Ext4DaReleaseSpaceFtraceEvent(Ext4DaReleaseSpaceFtraceEvent&& from) noexcept
    : Ext4DaReleaseSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaReleaseSpaceFtraceEvent& operator=(const Ext4DaReleaseSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaReleaseSpaceFtraceEvent& operator=(Ext4DaReleaseSpaceFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaReleaseSpaceFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaReleaseSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaReleaseSpaceFtraceEvent*>(
               &_Ext4DaReleaseSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Ext4DaReleaseSpaceFtraceEvent& a, Ext4DaReleaseSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaReleaseSpaceFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaReleaseSpaceFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaReleaseSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaReleaseSpaceFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaReleaseSpaceFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaReleaseSpaceFtraceEvent& from) {
    Ext4DaReleaseSpaceFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaReleaseSpaceFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaReleaseSpaceFtraceEvent";
  }
  protected:
  explicit Ext4DaReleaseSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIBlocksFieldNumber = 3,
    kFreedBlocksFieldNumber = 4,
    kReservedDataBlocksFieldNumber = 5,
    kReservedMetaBlocksFieldNumber = 6,
    kAllocatedMetaBlocksFieldNumber = 7,
    kModeFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 i_blocks = 3;
  bool has_i_blocks() const;
  void clear_i_blocks() ;
  ::uint64_t i_blocks() const;
  void set_i_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_i_blocks() const;
  void _internal_set_i_blocks(::uint64_t value);

  public:
  // optional int32 freed_blocks = 4;
  bool has_freed_blocks() const;
  void clear_freed_blocks() ;
  ::int32_t freed_blocks() const;
  void set_freed_blocks(::int32_t value);

  private:
  ::int32_t _internal_freed_blocks() const;
  void _internal_set_freed_blocks(::int32_t value);

  public:
  // optional int32 reserved_data_blocks = 5;
  bool has_reserved_data_blocks() const;
  void clear_reserved_data_blocks() ;
  ::int32_t reserved_data_blocks() const;
  void set_reserved_data_blocks(::int32_t value);

  private:
  ::int32_t _internal_reserved_data_blocks() const;
  void _internal_set_reserved_data_blocks(::int32_t value);

  public:
  // optional int32 reserved_meta_blocks = 6;
  bool has_reserved_meta_blocks() const;
  void clear_reserved_meta_blocks() ;
  ::int32_t reserved_meta_blocks() const;
  void set_reserved_meta_blocks(::int32_t value);

  private:
  ::int32_t _internal_reserved_meta_blocks() const;
  void _internal_set_reserved_meta_blocks(::int32_t value);

  public:
  // optional int32 allocated_meta_blocks = 7;
  bool has_allocated_meta_blocks() const;
  void clear_allocated_meta_blocks() ;
  ::int32_t allocated_meta_blocks() const;
  void set_allocated_meta_blocks(::int32_t value);

  private:
  ::int32_t _internal_allocated_meta_blocks() const;
  void _internal_set_allocated_meta_blocks(::int32_t value);

  public:
  // optional uint32 mode = 8;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t i_blocks_;
    ::int32_t freed_blocks_;
    ::int32_t reserved_data_blocks_;
    ::int32_t reserved_meta_blocks_;
    ::int32_t allocated_meta_blocks_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DaReserveSpaceFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaReserveSpaceFtraceEvent) */ {
 public:
  inline Ext4DaReserveSpaceFtraceEvent() : Ext4DaReserveSpaceFtraceEvent(nullptr) {}
  ~Ext4DaReserveSpaceFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaReserveSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaReserveSpaceFtraceEvent(const Ext4DaReserveSpaceFtraceEvent& from);
  Ext4DaReserveSpaceFtraceEvent(Ext4DaReserveSpaceFtraceEvent&& from) noexcept
    : Ext4DaReserveSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaReserveSpaceFtraceEvent& operator=(const Ext4DaReserveSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaReserveSpaceFtraceEvent& operator=(Ext4DaReserveSpaceFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaReserveSpaceFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaReserveSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaReserveSpaceFtraceEvent*>(
               &_Ext4DaReserveSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Ext4DaReserveSpaceFtraceEvent& a, Ext4DaReserveSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaReserveSpaceFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaReserveSpaceFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaReserveSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaReserveSpaceFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaReserveSpaceFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaReserveSpaceFtraceEvent& from) {
    Ext4DaReserveSpaceFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaReserveSpaceFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaReserveSpaceFtraceEvent";
  }
  protected:
  explicit Ext4DaReserveSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIBlocksFieldNumber = 3,
    kReservedDataBlocksFieldNumber = 4,
    kReservedMetaBlocksFieldNumber = 5,
    kModeFieldNumber = 6,
    kMdNeededFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 i_blocks = 3;
  bool has_i_blocks() const;
  void clear_i_blocks() ;
  ::uint64_t i_blocks() const;
  void set_i_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_i_blocks() const;
  void _internal_set_i_blocks(::uint64_t value);

  public:
  // optional int32 reserved_data_blocks = 4;
  bool has_reserved_data_blocks() const;
  void clear_reserved_data_blocks() ;
  ::int32_t reserved_data_blocks() const;
  void set_reserved_data_blocks(::int32_t value);

  private:
  ::int32_t _internal_reserved_data_blocks() const;
  void _internal_set_reserved_data_blocks(::int32_t value);

  public:
  // optional int32 reserved_meta_blocks = 5;
  bool has_reserved_meta_blocks() const;
  void clear_reserved_meta_blocks() ;
  ::int32_t reserved_meta_blocks() const;
  void set_reserved_meta_blocks(::int32_t value);

  private:
  ::int32_t _internal_reserved_meta_blocks() const;
  void _internal_set_reserved_meta_blocks(::int32_t value);

  public:
  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // optional int32 md_needed = 7;
  bool has_md_needed() const;
  void clear_md_needed() ;
  ::int32_t md_needed() const;
  void set_md_needed(::int32_t value);

  private:
  ::int32_t _internal_md_needed() const;
  void _internal_set_md_needed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaReserveSpaceFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t i_blocks_;
    ::int32_t reserved_data_blocks_;
    ::int32_t reserved_meta_blocks_;
    ::uint32_t mode_;
    ::int32_t md_needed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DaUpdateReserveSpaceFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent) */ {
 public:
  inline Ext4DaUpdateReserveSpaceFtraceEvent() : Ext4DaUpdateReserveSpaceFtraceEvent(nullptr) {}
  ~Ext4DaUpdateReserveSpaceFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaUpdateReserveSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaUpdateReserveSpaceFtraceEvent(const Ext4DaUpdateReserveSpaceFtraceEvent& from);
  Ext4DaUpdateReserveSpaceFtraceEvent(Ext4DaUpdateReserveSpaceFtraceEvent&& from) noexcept
    : Ext4DaUpdateReserveSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaUpdateReserveSpaceFtraceEvent& operator=(const Ext4DaUpdateReserveSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaUpdateReserveSpaceFtraceEvent& operator=(Ext4DaUpdateReserveSpaceFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaUpdateReserveSpaceFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaUpdateReserveSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaUpdateReserveSpaceFtraceEvent*>(
               &_Ext4DaUpdateReserveSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Ext4DaUpdateReserveSpaceFtraceEvent& a, Ext4DaUpdateReserveSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaUpdateReserveSpaceFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaUpdateReserveSpaceFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaUpdateReserveSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaUpdateReserveSpaceFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaUpdateReserveSpaceFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaUpdateReserveSpaceFtraceEvent& from) {
    Ext4DaUpdateReserveSpaceFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaUpdateReserveSpaceFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent";
  }
  protected:
  explicit Ext4DaUpdateReserveSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIBlocksFieldNumber = 3,
    kUsedBlocksFieldNumber = 4,
    kReservedDataBlocksFieldNumber = 5,
    kReservedMetaBlocksFieldNumber = 6,
    kAllocatedMetaBlocksFieldNumber = 7,
    kQuotaClaimFieldNumber = 8,
    kModeFieldNumber = 9,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 i_blocks = 3;
  bool has_i_blocks() const;
  void clear_i_blocks() ;
  ::uint64_t i_blocks() const;
  void set_i_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_i_blocks() const;
  void _internal_set_i_blocks(::uint64_t value);

  public:
  // optional int32 used_blocks = 4;
  bool has_used_blocks() const;
  void clear_used_blocks() ;
  ::int32_t used_blocks() const;
  void set_used_blocks(::int32_t value);

  private:
  ::int32_t _internal_used_blocks() const;
  void _internal_set_used_blocks(::int32_t value);

  public:
  // optional int32 reserved_data_blocks = 5;
  bool has_reserved_data_blocks() const;
  void clear_reserved_data_blocks() ;
  ::int32_t reserved_data_blocks() const;
  void set_reserved_data_blocks(::int32_t value);

  private:
  ::int32_t _internal_reserved_data_blocks() const;
  void _internal_set_reserved_data_blocks(::int32_t value);

  public:
  // optional int32 reserved_meta_blocks = 6;
  bool has_reserved_meta_blocks() const;
  void clear_reserved_meta_blocks() ;
  ::int32_t reserved_meta_blocks() const;
  void set_reserved_meta_blocks(::int32_t value);

  private:
  ::int32_t _internal_reserved_meta_blocks() const;
  void _internal_set_reserved_meta_blocks(::int32_t value);

  public:
  // optional int32 allocated_meta_blocks = 7;
  bool has_allocated_meta_blocks() const;
  void clear_allocated_meta_blocks() ;
  ::int32_t allocated_meta_blocks() const;
  void set_allocated_meta_blocks(::int32_t value);

  private:
  ::int32_t _internal_allocated_meta_blocks() const;
  void _internal_set_allocated_meta_blocks(::int32_t value);

  public:
  // optional int32 quota_claim = 8;
  bool has_quota_claim() const;
  void clear_quota_claim() ;
  ::int32_t quota_claim() const;
  void set_quota_claim(::int32_t value);

  private:
  ::int32_t _internal_quota_claim() const;
  void _internal_set_quota_claim(::int32_t value);

  public:
  // optional uint32 mode = 9;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t i_blocks_;
    ::int32_t used_blocks_;
    ::int32_t reserved_data_blocks_;
    ::int32_t reserved_meta_blocks_;
    ::int32_t allocated_meta_blocks_;
    ::int32_t quota_claim_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DaWritePagesFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWritePagesFtraceEvent) */ {
 public:
  inline Ext4DaWritePagesFtraceEvent() : Ext4DaWritePagesFtraceEvent(nullptr) {}
  ~Ext4DaWritePagesFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaWritePagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaWritePagesFtraceEvent(const Ext4DaWritePagesFtraceEvent& from);
  Ext4DaWritePagesFtraceEvent(Ext4DaWritePagesFtraceEvent&& from) noexcept
    : Ext4DaWritePagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWritePagesFtraceEvent& operator=(const Ext4DaWritePagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWritePagesFtraceEvent& operator=(Ext4DaWritePagesFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaWritePagesFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaWritePagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWritePagesFtraceEvent*>(
               &_Ext4DaWritePagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Ext4DaWritePagesFtraceEvent& a, Ext4DaWritePagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWritePagesFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaWritePagesFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaWritePagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaWritePagesFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaWritePagesFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaWritePagesFtraceEvent& from) {
    Ext4DaWritePagesFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaWritePagesFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaWritePagesFtraceEvent";
  }
  protected:
  explicit Ext4DaWritePagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFirstPageFieldNumber = 3,
    kNrToWriteFieldNumber = 4,
    kBBlocknrFieldNumber = 6,
    kSyncModeFieldNumber = 5,
    kBSizeFieldNumber = 7,
    kBStateFieldNumber = 8,
    kIoDoneFieldNumber = 9,
    kPagesWrittenFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 first_page = 3;
  bool has_first_page() const;
  void clear_first_page() ;
  ::uint64_t first_page() const;
  void set_first_page(::uint64_t value);

  private:
  ::uint64_t _internal_first_page() const;
  void _internal_set_first_page(::uint64_t value);

  public:
  // optional int64 nr_to_write = 4;
  bool has_nr_to_write() const;
  void clear_nr_to_write() ;
  ::int64_t nr_to_write() const;
  void set_nr_to_write(::int64_t value);

  private:
  ::int64_t _internal_nr_to_write() const;
  void _internal_set_nr_to_write(::int64_t value);

  public:
  // optional uint64 b_blocknr = 6;
  bool has_b_blocknr() const;
  void clear_b_blocknr() ;
  ::uint64_t b_blocknr() const;
  void set_b_blocknr(::uint64_t value);

  private:
  ::uint64_t _internal_b_blocknr() const;
  void _internal_set_b_blocknr(::uint64_t value);

  public:
  // optional int32 sync_mode = 5;
  bool has_sync_mode() const;
  void clear_sync_mode() ;
  ::int32_t sync_mode() const;
  void set_sync_mode(::int32_t value);

  private:
  ::int32_t _internal_sync_mode() const;
  void _internal_set_sync_mode(::int32_t value);

  public:
  // optional uint32 b_size = 7;
  bool has_b_size() const;
  void clear_b_size() ;
  ::uint32_t b_size() const;
  void set_b_size(::uint32_t value);

  private:
  ::uint32_t _internal_b_size() const;
  void _internal_set_b_size(::uint32_t value);

  public:
  // optional uint32 b_state = 8;
  bool has_b_state() const;
  void clear_b_state() ;
  ::uint32_t b_state() const;
  void set_b_state(::uint32_t value);

  private:
  ::uint32_t _internal_b_state() const;
  void _internal_set_b_state(::uint32_t value);

  public:
  // optional int32 io_done = 9;
  bool has_io_done() const;
  void clear_io_done() ;
  ::int32_t io_done() const;
  void set_io_done(::int32_t value);

  private:
  ::int32_t _internal_io_done() const;
  void _internal_set_io_done(::int32_t value);

  public:
  // optional int32 pages_written = 10;
  bool has_pages_written() const;
  void clear_pages_written() ;
  ::int32_t pages_written() const;
  void set_pages_written(::int32_t value);

  private:
  ::int32_t _internal_pages_written() const;
  void _internal_set_pages_written(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWritePagesFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t first_page_;
    ::int64_t nr_to_write_;
    ::uint64_t b_blocknr_;
    ::int32_t sync_mode_;
    ::uint32_t b_size_;
    ::uint32_t b_state_;
    ::int32_t io_done_;
    ::int32_t pages_written_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DaWritePagesExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent) */ {
 public:
  inline Ext4DaWritePagesExtentFtraceEvent() : Ext4DaWritePagesExtentFtraceEvent(nullptr) {}
  ~Ext4DaWritePagesExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DaWritePagesExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DaWritePagesExtentFtraceEvent(const Ext4DaWritePagesExtentFtraceEvent& from);
  Ext4DaWritePagesExtentFtraceEvent(Ext4DaWritePagesExtentFtraceEvent&& from) noexcept
    : Ext4DaWritePagesExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DaWritePagesExtentFtraceEvent& operator=(const Ext4DaWritePagesExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DaWritePagesExtentFtraceEvent& operator=(Ext4DaWritePagesExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DaWritePagesExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DaWritePagesExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DaWritePagesExtentFtraceEvent*>(
               &_Ext4DaWritePagesExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Ext4DaWritePagesExtentFtraceEvent& a, Ext4DaWritePagesExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DaWritePagesExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DaWritePagesExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DaWritePagesExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DaWritePagesExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DaWritePagesExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DaWritePagesExtentFtraceEvent& from) {
    Ext4DaWritePagesExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DaWritePagesExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DaWritePagesExtentFtraceEvent";
  }
  protected:
  explicit Ext4DaWritePagesExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint64_t lblk() const;
  void set_lblk(::uint64_t value);

  private:
  ::uint64_t _internal_lblk() const;
  void _internal_set_lblk(::uint64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t lblk_;
    ::uint32_t len_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DirectIOEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DirectIOEnterFtraceEvent) */ {
 public:
  inline Ext4DirectIOEnterFtraceEvent() : Ext4DirectIOEnterFtraceEvent(nullptr) {}
  ~Ext4DirectIOEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DirectIOEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DirectIOEnterFtraceEvent(const Ext4DirectIOEnterFtraceEvent& from);
  Ext4DirectIOEnterFtraceEvent(Ext4DirectIOEnterFtraceEvent&& from) noexcept
    : Ext4DirectIOEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DirectIOEnterFtraceEvent& operator=(const Ext4DirectIOEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DirectIOEnterFtraceEvent& operator=(Ext4DirectIOEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DirectIOEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DirectIOEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DirectIOEnterFtraceEvent*>(
               &_Ext4DirectIOEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Ext4DirectIOEnterFtraceEvent& a, Ext4DirectIOEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DirectIOEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DirectIOEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DirectIOEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DirectIOEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DirectIOEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DirectIOEnterFtraceEvent& from) {
    Ext4DirectIOEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DirectIOEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DirectIOEnterFtraceEvent";
  }
  protected:
  explicit Ext4DirectIOEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kRwFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // optional int32 rw = 5;
  bool has_rw() const;
  void clear_rw() ;
  ::int32_t rw() const;
  void set_rw(::int32_t value);

  private:
  ::int32_t _internal_rw() const;
  void _internal_set_rw(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DirectIOEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint64_t len_;
    ::int32_t rw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DirectIOExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DirectIOExitFtraceEvent) */ {
 public:
  inline Ext4DirectIOExitFtraceEvent() : Ext4DirectIOExitFtraceEvent(nullptr) {}
  ~Ext4DirectIOExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DirectIOExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DirectIOExitFtraceEvent(const Ext4DirectIOExitFtraceEvent& from);
  Ext4DirectIOExitFtraceEvent(Ext4DirectIOExitFtraceEvent&& from) noexcept
    : Ext4DirectIOExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DirectIOExitFtraceEvent& operator=(const Ext4DirectIOExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DirectIOExitFtraceEvent& operator=(Ext4DirectIOExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DirectIOExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DirectIOExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DirectIOExitFtraceEvent*>(
               &_Ext4DirectIOExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Ext4DirectIOExitFtraceEvent& a, Ext4DirectIOExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DirectIOExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DirectIOExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DirectIOExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DirectIOExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DirectIOExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DirectIOExitFtraceEvent& from) {
    Ext4DirectIOExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DirectIOExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DirectIOExitFtraceEvent";
  }
  protected:
  explicit Ext4DirectIOExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kRwFieldNumber = 5,
    kRetFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // optional int32 rw = 5;
  bool has_rw() const;
  void clear_rw() ;
  ::int32_t rw() const;
  void set_rw(::int32_t value);

  private:
  ::int32_t _internal_rw() const;
  void _internal_set_rw(::int32_t value);

  public:
  // optional int32 ret = 6;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DirectIOExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint64_t len_;
    ::int32_t rw_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DiscardBlocksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DiscardBlocksFtraceEvent) */ {
 public:
  inline Ext4DiscardBlocksFtraceEvent() : Ext4DiscardBlocksFtraceEvent(nullptr) {}
  ~Ext4DiscardBlocksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DiscardBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DiscardBlocksFtraceEvent(const Ext4DiscardBlocksFtraceEvent& from);
  Ext4DiscardBlocksFtraceEvent(Ext4DiscardBlocksFtraceEvent&& from) noexcept
    : Ext4DiscardBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DiscardBlocksFtraceEvent& operator=(const Ext4DiscardBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DiscardBlocksFtraceEvent& operator=(Ext4DiscardBlocksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DiscardBlocksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DiscardBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DiscardBlocksFtraceEvent*>(
               &_Ext4DiscardBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Ext4DiscardBlocksFtraceEvent& a, Ext4DiscardBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DiscardBlocksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DiscardBlocksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DiscardBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DiscardBlocksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DiscardBlocksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DiscardBlocksFtraceEvent& from) {
    Ext4DiscardBlocksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DiscardBlocksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DiscardBlocksFtraceEvent";
  }
  protected:
  explicit Ext4DiscardBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kBlkFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 blk = 2;
  bool has_blk() const;
  void clear_blk() ;
  ::uint64_t blk() const;
  void set_blk(::uint64_t value);

  private:
  ::uint64_t _internal_blk() const;
  void _internal_set_blk(::uint64_t value);

  public:
  // optional uint64 count = 3;
  bool has_count() const;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DiscardBlocksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t blk_;
    ::uint64_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DiscardPreallocationsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent) */ {
 public:
  inline Ext4DiscardPreallocationsFtraceEvent() : Ext4DiscardPreallocationsFtraceEvent(nullptr) {}
  ~Ext4DiscardPreallocationsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DiscardPreallocationsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DiscardPreallocationsFtraceEvent(const Ext4DiscardPreallocationsFtraceEvent& from);
  Ext4DiscardPreallocationsFtraceEvent(Ext4DiscardPreallocationsFtraceEvent&& from) noexcept
    : Ext4DiscardPreallocationsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DiscardPreallocationsFtraceEvent& operator=(const Ext4DiscardPreallocationsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DiscardPreallocationsFtraceEvent& operator=(Ext4DiscardPreallocationsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DiscardPreallocationsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DiscardPreallocationsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DiscardPreallocationsFtraceEvent*>(
               &_Ext4DiscardPreallocationsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Ext4DiscardPreallocationsFtraceEvent& a, Ext4DiscardPreallocationsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DiscardPreallocationsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DiscardPreallocationsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DiscardPreallocationsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DiscardPreallocationsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DiscardPreallocationsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DiscardPreallocationsFtraceEvent& from) {
    Ext4DiscardPreallocationsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DiscardPreallocationsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DiscardPreallocationsFtraceEvent";
  }
  protected:
  explicit Ext4DiscardPreallocationsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLenFieldNumber = 3,
    kNeededFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 len = 3;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 needed = 4;
  bool has_needed() const;
  void clear_needed() ;
  ::uint32_t needed() const;
  void set_needed(::uint32_t value);

  private:
  ::uint32_t _internal_needed() const;
  void _internal_set_needed(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t len_;
    ::uint32_t needed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4DropInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4DropInodeFtraceEvent) */ {
 public:
  inline Ext4DropInodeFtraceEvent() : Ext4DropInodeFtraceEvent(nullptr) {}
  ~Ext4DropInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4DropInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4DropInodeFtraceEvent(const Ext4DropInodeFtraceEvent& from);
  Ext4DropInodeFtraceEvent(Ext4DropInodeFtraceEvent&& from) noexcept
    : Ext4DropInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4DropInodeFtraceEvent& operator=(const Ext4DropInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4DropInodeFtraceEvent& operator=(Ext4DropInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4DropInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4DropInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4DropInodeFtraceEvent*>(
               &_Ext4DropInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Ext4DropInodeFtraceEvent& a, Ext4DropInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4DropInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4DropInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4DropInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4DropInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4DropInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4DropInodeFtraceEvent& from) {
    Ext4DropInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4DropInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4DropInodeFtraceEvent";
  }
  protected:
  explicit Ext4DropInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kDropFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 drop = 3;
  bool has_drop() const;
  void clear_drop() ;
  ::int32_t drop() const;
  void set_drop(::int32_t value);

  private:
  ::int32_t _internal_drop() const;
  void _internal_set_drop(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4DropInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t drop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsCacheExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsCacheExtentFtraceEvent) */ {
 public:
  inline Ext4EsCacheExtentFtraceEvent() : Ext4EsCacheExtentFtraceEvent(nullptr) {}
  ~Ext4EsCacheExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsCacheExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsCacheExtentFtraceEvent(const Ext4EsCacheExtentFtraceEvent& from);
  Ext4EsCacheExtentFtraceEvent(Ext4EsCacheExtentFtraceEvent&& from) noexcept
    : Ext4EsCacheExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsCacheExtentFtraceEvent& operator=(const Ext4EsCacheExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsCacheExtentFtraceEvent& operator=(Ext4EsCacheExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsCacheExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsCacheExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsCacheExtentFtraceEvent*>(
               &_Ext4EsCacheExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Ext4EsCacheExtentFtraceEvent& a, Ext4EsCacheExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsCacheExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsCacheExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsCacheExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsCacheExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsCacheExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsCacheExtentFtraceEvent& from) {
    Ext4EsCacheExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsCacheExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsCacheExtentFtraceEvent";
  }
  protected:
  explicit Ext4EsCacheExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 status = 6;
  bool has_status() const;
  void clear_status() ;
  ::uint32_t status() const;
  void set_status(::uint32_t value);

  private:
  ::uint32_t _internal_status() const;
  void _internal_set_status(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsCacheExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint64_t pblk_;
    ::uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsFindDelayedExtentRangeEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent) */ {
 public:
  inline Ext4EsFindDelayedExtentRangeEnterFtraceEvent() : Ext4EsFindDelayedExtentRangeEnterFtraceEvent(nullptr) {}
  ~Ext4EsFindDelayedExtentRangeEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsFindDelayedExtentRangeEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsFindDelayedExtentRangeEnterFtraceEvent(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from);
  Ext4EsFindDelayedExtentRangeEnterFtraceEvent(Ext4EsFindDelayedExtentRangeEnterFtraceEvent&& from) noexcept
    : Ext4EsFindDelayedExtentRangeEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsFindDelayedExtentRangeEnterFtraceEvent& operator=(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsFindDelayedExtentRangeEnterFtraceEvent& operator=(Ext4EsFindDelayedExtentRangeEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsFindDelayedExtentRangeEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsFindDelayedExtentRangeEnterFtraceEvent*>(
               &_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent& a, Ext4EsFindDelayedExtentRangeEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsFindDelayedExtentRangeEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsFindDelayedExtentRangeEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsFindDelayedExtentRangeEnterFtraceEvent& from) {
    Ext4EsFindDelayedExtentRangeEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsFindDelayedExtentRangeEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent";
  }
  protected:
  explicit Ext4EsFindDelayedExtentRangeEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsFindDelayedExtentRangeExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent) */ {
 public:
  inline Ext4EsFindDelayedExtentRangeExitFtraceEvent() : Ext4EsFindDelayedExtentRangeExitFtraceEvent(nullptr) {}
  ~Ext4EsFindDelayedExtentRangeExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsFindDelayedExtentRangeExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsFindDelayedExtentRangeExitFtraceEvent(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from);
  Ext4EsFindDelayedExtentRangeExitFtraceEvent(Ext4EsFindDelayedExtentRangeExitFtraceEvent&& from) noexcept
    : Ext4EsFindDelayedExtentRangeExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsFindDelayedExtentRangeExitFtraceEvent& operator=(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsFindDelayedExtentRangeExitFtraceEvent& operator=(Ext4EsFindDelayedExtentRangeExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsFindDelayedExtentRangeExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsFindDelayedExtentRangeExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsFindDelayedExtentRangeExitFtraceEvent*>(
               &_Ext4EsFindDelayedExtentRangeExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Ext4EsFindDelayedExtentRangeExitFtraceEvent& a, Ext4EsFindDelayedExtentRangeExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsFindDelayedExtentRangeExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsFindDelayedExtentRangeExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsFindDelayedExtentRangeExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsFindDelayedExtentRangeExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsFindDelayedExtentRangeExitFtraceEvent& from) {
    Ext4EsFindDelayedExtentRangeExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsFindDelayedExtentRangeExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent";
  }
  protected:
  explicit Ext4EsFindDelayedExtentRangeExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint64 status = 6;
  bool has_status() const;
  void clear_status() ;
  ::uint64_t status() const;
  void set_status(::uint64_t value);

  private:
  ::uint64_t _internal_status() const;
  void _internal_set_status(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint64_t pblk_;
    ::uint64_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsInsertExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsInsertExtentFtraceEvent) */ {
 public:
  inline Ext4EsInsertExtentFtraceEvent() : Ext4EsInsertExtentFtraceEvent(nullptr) {}
  ~Ext4EsInsertExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsInsertExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsInsertExtentFtraceEvent(const Ext4EsInsertExtentFtraceEvent& from);
  Ext4EsInsertExtentFtraceEvent(Ext4EsInsertExtentFtraceEvent&& from) noexcept
    : Ext4EsInsertExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsInsertExtentFtraceEvent& operator=(const Ext4EsInsertExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsInsertExtentFtraceEvent& operator=(Ext4EsInsertExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsInsertExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsInsertExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsInsertExtentFtraceEvent*>(
               &_Ext4EsInsertExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Ext4EsInsertExtentFtraceEvent& a, Ext4EsInsertExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsInsertExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsInsertExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsInsertExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsInsertExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsInsertExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsInsertExtentFtraceEvent& from) {
    Ext4EsInsertExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsInsertExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsInsertExtentFtraceEvent";
  }
  protected:
  explicit Ext4EsInsertExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint64 status = 6;
  bool has_status() const;
  void clear_status() ;
  ::uint64_t status() const;
  void set_status(::uint64_t value);

  private:
  ::uint64_t _internal_status() const;
  void _internal_set_status(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsInsertExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint64_t pblk_;
    ::uint64_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsLookupExtentEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent) */ {
 public:
  inline Ext4EsLookupExtentEnterFtraceEvent() : Ext4EsLookupExtentEnterFtraceEvent(nullptr) {}
  ~Ext4EsLookupExtentEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsLookupExtentEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsLookupExtentEnterFtraceEvent(const Ext4EsLookupExtentEnterFtraceEvent& from);
  Ext4EsLookupExtentEnterFtraceEvent(Ext4EsLookupExtentEnterFtraceEvent&& from) noexcept
    : Ext4EsLookupExtentEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsLookupExtentEnterFtraceEvent& operator=(const Ext4EsLookupExtentEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsLookupExtentEnterFtraceEvent& operator=(Ext4EsLookupExtentEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsLookupExtentEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsLookupExtentEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsLookupExtentEnterFtraceEvent*>(
               &_Ext4EsLookupExtentEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Ext4EsLookupExtentEnterFtraceEvent& a, Ext4EsLookupExtentEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsLookupExtentEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsLookupExtentEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsLookupExtentEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsLookupExtentEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsLookupExtentEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsLookupExtentEnterFtraceEvent& from) {
    Ext4EsLookupExtentEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsLookupExtentEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent";
  }
  protected:
  explicit Ext4EsLookupExtentEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsLookupExtentExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent) */ {
 public:
  inline Ext4EsLookupExtentExitFtraceEvent() : Ext4EsLookupExtentExitFtraceEvent(nullptr) {}
  ~Ext4EsLookupExtentExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsLookupExtentExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsLookupExtentExitFtraceEvent(const Ext4EsLookupExtentExitFtraceEvent& from);
  Ext4EsLookupExtentExitFtraceEvent(Ext4EsLookupExtentExitFtraceEvent&& from) noexcept
    : Ext4EsLookupExtentExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsLookupExtentExitFtraceEvent& operator=(const Ext4EsLookupExtentExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsLookupExtentExitFtraceEvent& operator=(Ext4EsLookupExtentExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsLookupExtentExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsLookupExtentExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsLookupExtentExitFtraceEvent*>(
               &_Ext4EsLookupExtentExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Ext4EsLookupExtentExitFtraceEvent& a, Ext4EsLookupExtentExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsLookupExtentExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsLookupExtentExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsLookupExtentExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsLookupExtentExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsLookupExtentExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsLookupExtentExitFtraceEvent& from) {
    Ext4EsLookupExtentExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsLookupExtentExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsLookupExtentExitFtraceEvent";
  }
  protected:
  explicit Ext4EsLookupExtentExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kPblkFieldNumber = 5,
    kStatusFieldNumber = 6,
    kFoundFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint64 status = 6;
  bool has_status() const;
  void clear_status() ;
  ::uint64_t status() const;
  void set_status(::uint64_t value);

  private:
  ::uint64_t _internal_status() const;
  void _internal_set_status(::uint64_t value);

  public:
  // optional int32 found = 7;
  bool has_found() const;
  void clear_found() ;
  ::int32_t found() const;
  void set_found(::int32_t value);

  private:
  ::int32_t _internal_found() const;
  void _internal_set_found(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint64_t pblk_;
    ::uint64_t status_;
    ::int32_t found_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsRemoveExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsRemoveExtentFtraceEvent) */ {
 public:
  inline Ext4EsRemoveExtentFtraceEvent() : Ext4EsRemoveExtentFtraceEvent(nullptr) {}
  ~Ext4EsRemoveExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsRemoveExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsRemoveExtentFtraceEvent(const Ext4EsRemoveExtentFtraceEvent& from);
  Ext4EsRemoveExtentFtraceEvent(Ext4EsRemoveExtentFtraceEvent&& from) noexcept
    : Ext4EsRemoveExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsRemoveExtentFtraceEvent& operator=(const Ext4EsRemoveExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsRemoveExtentFtraceEvent& operator=(Ext4EsRemoveExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsRemoveExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsRemoveExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsRemoveExtentFtraceEvent*>(
               &_Ext4EsRemoveExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Ext4EsRemoveExtentFtraceEvent& a, Ext4EsRemoveExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsRemoveExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsRemoveExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsRemoveExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsRemoveExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsRemoveExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsRemoveExtentFtraceEvent& from) {
    Ext4EsRemoveExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsRemoveExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsRemoveExtentFtraceEvent";
  }
  protected:
  explicit Ext4EsRemoveExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::int64_t lblk() const;
  void set_lblk(::int64_t value);

  private:
  ::int64_t _internal_lblk() const;
  void _internal_set_lblk(::int64_t value);

  public:
  // optional int64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsRemoveExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t lblk_;
    ::int64_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsShrinkFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkFtraceEvent) */ {
 public:
  inline Ext4EsShrinkFtraceEvent() : Ext4EsShrinkFtraceEvent(nullptr) {}
  ~Ext4EsShrinkFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsShrinkFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsShrinkFtraceEvent(const Ext4EsShrinkFtraceEvent& from);
  Ext4EsShrinkFtraceEvent(Ext4EsShrinkFtraceEvent&& from) noexcept
    : Ext4EsShrinkFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkFtraceEvent& operator=(const Ext4EsShrinkFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkFtraceEvent& operator=(Ext4EsShrinkFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsShrinkFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsShrinkFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkFtraceEvent*>(
               &_Ext4EsShrinkFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Ext4EsShrinkFtraceEvent& a, Ext4EsShrinkFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsShrinkFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsShrinkFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsShrinkFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsShrinkFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsShrinkFtraceEvent& from) {
    Ext4EsShrinkFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsShrinkFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkFtraceEvent";
  }
  protected:
  explicit Ext4EsShrinkFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kScanTimeFieldNumber = 3,
    kNrShrunkFieldNumber = 2,
    kNrSkippedFieldNumber = 4,
    kRetriedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 scan_time = 3;
  bool has_scan_time() const;
  void clear_scan_time() ;
  ::uint64_t scan_time() const;
  void set_scan_time(::uint64_t value);

  private:
  ::uint64_t _internal_scan_time() const;
  void _internal_set_scan_time(::uint64_t value);

  public:
  // optional int32 nr_shrunk = 2;
  bool has_nr_shrunk() const;
  void clear_nr_shrunk() ;
  ::int32_t nr_shrunk() const;
  void set_nr_shrunk(::int32_t value);

  private:
  ::int32_t _internal_nr_shrunk() const;
  void _internal_set_nr_shrunk(::int32_t value);

  public:
  // optional int32 nr_skipped = 4;
  bool has_nr_skipped() const;
  void clear_nr_skipped() ;
  ::int32_t nr_skipped() const;
  void set_nr_skipped(::int32_t value);

  private:
  ::int32_t _internal_nr_skipped() const;
  void _internal_set_nr_skipped(::int32_t value);

  public:
  // optional int32 retried = 5;
  bool has_retried() const;
  void clear_retried() ;
  ::int32_t retried() const;
  void set_retried(::int32_t value);

  private:
  ::int32_t _internal_retried() const;
  void _internal_set_retried(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t scan_time_;
    ::int32_t nr_shrunk_;
    ::int32_t nr_skipped_;
    ::int32_t retried_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsShrinkCountFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkCountFtraceEvent) */ {
 public:
  inline Ext4EsShrinkCountFtraceEvent() : Ext4EsShrinkCountFtraceEvent(nullptr) {}
  ~Ext4EsShrinkCountFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsShrinkCountFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsShrinkCountFtraceEvent(const Ext4EsShrinkCountFtraceEvent& from);
  Ext4EsShrinkCountFtraceEvent(Ext4EsShrinkCountFtraceEvent&& from) noexcept
    : Ext4EsShrinkCountFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkCountFtraceEvent& operator=(const Ext4EsShrinkCountFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkCountFtraceEvent& operator=(Ext4EsShrinkCountFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsShrinkCountFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsShrinkCountFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkCountFtraceEvent*>(
               &_Ext4EsShrinkCountFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Ext4EsShrinkCountFtraceEvent& a, Ext4EsShrinkCountFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkCountFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsShrinkCountFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsShrinkCountFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsShrinkCountFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsShrinkCountFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsShrinkCountFtraceEvent& from) {
    Ext4EsShrinkCountFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsShrinkCountFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkCountFtraceEvent";
  }
  protected:
  explicit Ext4EsShrinkCountFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNrToScanFieldNumber = 2,
    kCacheCntFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 nr_to_scan = 2;
  bool has_nr_to_scan() const;
  void clear_nr_to_scan() ;
  ::int32_t nr_to_scan() const;
  void set_nr_to_scan(::int32_t value);

  private:
  ::int32_t _internal_nr_to_scan() const;
  void _internal_set_nr_to_scan(::int32_t value);

  public:
  // optional int32 cache_cnt = 3;
  bool has_cache_cnt() const;
  void clear_cache_cnt() ;
  ::int32_t cache_cnt() const;
  void set_cache_cnt(::int32_t value);

  private:
  ::int32_t _internal_cache_cnt() const;
  void _internal_set_cache_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkCountFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t nr_to_scan_;
    ::int32_t cache_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsShrinkScanEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent) */ {
 public:
  inline Ext4EsShrinkScanEnterFtraceEvent() : Ext4EsShrinkScanEnterFtraceEvent(nullptr) {}
  ~Ext4EsShrinkScanEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsShrinkScanEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsShrinkScanEnterFtraceEvent(const Ext4EsShrinkScanEnterFtraceEvent& from);
  Ext4EsShrinkScanEnterFtraceEvent(Ext4EsShrinkScanEnterFtraceEvent&& from) noexcept
    : Ext4EsShrinkScanEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkScanEnterFtraceEvent& operator=(const Ext4EsShrinkScanEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkScanEnterFtraceEvent& operator=(Ext4EsShrinkScanEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsShrinkScanEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsShrinkScanEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkScanEnterFtraceEvent*>(
               &_Ext4EsShrinkScanEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Ext4EsShrinkScanEnterFtraceEvent& a, Ext4EsShrinkScanEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkScanEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsShrinkScanEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsShrinkScanEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsShrinkScanEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsShrinkScanEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsShrinkScanEnterFtraceEvent& from) {
    Ext4EsShrinkScanEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsShrinkScanEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent";
  }
  protected:
  explicit Ext4EsShrinkScanEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNrToScanFieldNumber = 2,
    kCacheCntFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 nr_to_scan = 2;
  bool has_nr_to_scan() const;
  void clear_nr_to_scan() ;
  ::int32_t nr_to_scan() const;
  void set_nr_to_scan(::int32_t value);

  private:
  ::int32_t _internal_nr_to_scan() const;
  void _internal_set_nr_to_scan(::int32_t value);

  public:
  // optional int32 cache_cnt = 3;
  bool has_cache_cnt() const;
  void clear_cache_cnt() ;
  ::int32_t cache_cnt() const;
  void set_cache_cnt(::int32_t value);

  private:
  ::int32_t _internal_cache_cnt() const;
  void _internal_set_cache_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t nr_to_scan_;
    ::int32_t cache_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EsShrinkScanExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent) */ {
 public:
  inline Ext4EsShrinkScanExitFtraceEvent() : Ext4EsShrinkScanExitFtraceEvent(nullptr) {}
  ~Ext4EsShrinkScanExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EsShrinkScanExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EsShrinkScanExitFtraceEvent(const Ext4EsShrinkScanExitFtraceEvent& from);
  Ext4EsShrinkScanExitFtraceEvent(Ext4EsShrinkScanExitFtraceEvent&& from) noexcept
    : Ext4EsShrinkScanExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EsShrinkScanExitFtraceEvent& operator=(const Ext4EsShrinkScanExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EsShrinkScanExitFtraceEvent& operator=(Ext4EsShrinkScanExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EsShrinkScanExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EsShrinkScanExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EsShrinkScanExitFtraceEvent*>(
               &_Ext4EsShrinkScanExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Ext4EsShrinkScanExitFtraceEvent& a, Ext4EsShrinkScanExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EsShrinkScanExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EsShrinkScanExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EsShrinkScanExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EsShrinkScanExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EsShrinkScanExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EsShrinkScanExitFtraceEvent& from) {
    Ext4EsShrinkScanExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EsShrinkScanExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EsShrinkScanExitFtraceEvent";
  }
  protected:
  explicit Ext4EsShrinkScanExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNrShrunkFieldNumber = 2,
    kCacheCntFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 nr_shrunk = 2;
  bool has_nr_shrunk() const;
  void clear_nr_shrunk() ;
  ::int32_t nr_shrunk() const;
  void set_nr_shrunk(::int32_t value);

  private:
  ::int32_t _internal_nr_shrunk() const;
  void _internal_set_nr_shrunk(::int32_t value);

  public:
  // optional int32 cache_cnt = 3;
  bool has_cache_cnt() const;
  void clear_cache_cnt() ;
  ::int32_t cache_cnt() const;
  void set_cache_cnt(::int32_t value);

  private:
  ::int32_t _internal_cache_cnt() const;
  void _internal_set_cache_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t nr_shrunk_;
    ::int32_t cache_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4EvictInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4EvictInodeFtraceEvent) */ {
 public:
  inline Ext4EvictInodeFtraceEvent() : Ext4EvictInodeFtraceEvent(nullptr) {}
  ~Ext4EvictInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4EvictInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4EvictInodeFtraceEvent(const Ext4EvictInodeFtraceEvent& from);
  Ext4EvictInodeFtraceEvent(Ext4EvictInodeFtraceEvent&& from) noexcept
    : Ext4EvictInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4EvictInodeFtraceEvent& operator=(const Ext4EvictInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4EvictInodeFtraceEvent& operator=(Ext4EvictInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4EvictInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4EvictInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4EvictInodeFtraceEvent*>(
               &_Ext4EvictInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Ext4EvictInodeFtraceEvent& a, Ext4EvictInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4EvictInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4EvictInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4EvictInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4EvictInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4EvictInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4EvictInodeFtraceEvent& from) {
    Ext4EvictInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4EvictInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4EvictInodeFtraceEvent";
  }
  protected:
  explicit Ext4EvictInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNlinkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 nlink = 3;
  bool has_nlink() const;
  void clear_nlink() ;
  ::int32_t nlink() const;
  void set_nlink(::int32_t value);

  private:
  ::int32_t _internal_nlink() const;
  void _internal_set_nlink(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4EvictInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t nlink_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtConvertToInitializedEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent) */ {
 public:
  inline Ext4ExtConvertToInitializedEnterFtraceEvent() : Ext4ExtConvertToInitializedEnterFtraceEvent(nullptr) {}
  ~Ext4ExtConvertToInitializedEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtConvertToInitializedEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtConvertToInitializedEnterFtraceEvent(const Ext4ExtConvertToInitializedEnterFtraceEvent& from);
  Ext4ExtConvertToInitializedEnterFtraceEvent(Ext4ExtConvertToInitializedEnterFtraceEvent&& from) noexcept
    : Ext4ExtConvertToInitializedEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtConvertToInitializedEnterFtraceEvent& operator=(const Ext4ExtConvertToInitializedEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtConvertToInitializedEnterFtraceEvent& operator=(Ext4ExtConvertToInitializedEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtConvertToInitializedEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtConvertToInitializedEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtConvertToInitializedEnterFtraceEvent*>(
               &_Ext4ExtConvertToInitializedEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Ext4ExtConvertToInitializedEnterFtraceEvent& a, Ext4ExtConvertToInitializedEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtConvertToInitializedEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtConvertToInitializedEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtConvertToInitializedEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtConvertToInitializedEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtConvertToInitializedEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtConvertToInitializedEnterFtraceEvent& from) {
    Ext4ExtConvertToInitializedEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtConvertToInitializedEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent";
  }
  protected:
  explicit Ext4ExtConvertToInitializedEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kMLblkFieldNumber = 3,
    kMLenFieldNumber = 4,
    kULblkFieldNumber = 5,
    kULenFieldNumber = 6,
    kUPblkFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 m_lblk = 3;
  bool has_m_lblk() const;
  void clear_m_lblk() ;
  ::uint32_t m_lblk() const;
  void set_m_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_m_lblk() const;
  void _internal_set_m_lblk(::uint32_t value);

  public:
  // optional uint32 m_len = 4;
  bool has_m_len() const;
  void clear_m_len() ;
  ::uint32_t m_len() const;
  void set_m_len(::uint32_t value);

  private:
  ::uint32_t _internal_m_len() const;
  void _internal_set_m_len(::uint32_t value);

  public:
  // optional uint32 u_lblk = 5;
  bool has_u_lblk() const;
  void clear_u_lblk() ;
  ::uint32_t u_lblk() const;
  void set_u_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_u_lblk() const;
  void _internal_set_u_lblk(::uint32_t value);

  public:
  // optional uint32 u_len = 6;
  bool has_u_len() const;
  void clear_u_len() ;
  ::uint32_t u_len() const;
  void set_u_len(::uint32_t value);

  private:
  ::uint32_t _internal_u_len() const;
  void _internal_set_u_len(::uint32_t value);

  public:
  // optional uint64 u_pblk = 7;
  bool has_u_pblk() const;
  void clear_u_pblk() ;
  ::uint64_t u_pblk() const;
  void set_u_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_u_pblk() const;
  void _internal_set_u_pblk(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t m_lblk_;
    ::uint32_t m_len_;
    ::uint32_t u_lblk_;
    ::uint32_t u_len_;
    ::uint64_t u_pblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtConvertToInitializedFastpathFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent) */ {
 public:
  inline Ext4ExtConvertToInitializedFastpathFtraceEvent() : Ext4ExtConvertToInitializedFastpathFtraceEvent(nullptr) {}
  ~Ext4ExtConvertToInitializedFastpathFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtConvertToInitializedFastpathFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtConvertToInitializedFastpathFtraceEvent(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from);
  Ext4ExtConvertToInitializedFastpathFtraceEvent(Ext4ExtConvertToInitializedFastpathFtraceEvent&& from) noexcept
    : Ext4ExtConvertToInitializedFastpathFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtConvertToInitializedFastpathFtraceEvent& operator=(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtConvertToInitializedFastpathFtraceEvent& operator=(Ext4ExtConvertToInitializedFastpathFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtConvertToInitializedFastpathFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtConvertToInitializedFastpathFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtConvertToInitializedFastpathFtraceEvent*>(
               &_Ext4ExtConvertToInitializedFastpathFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Ext4ExtConvertToInitializedFastpathFtraceEvent& a, Ext4ExtConvertToInitializedFastpathFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtConvertToInitializedFastpathFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtConvertToInitializedFastpathFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtConvertToInitializedFastpathFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtConvertToInitializedFastpathFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtConvertToInitializedFastpathFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtConvertToInitializedFastpathFtraceEvent& from) {
    Ext4ExtConvertToInitializedFastpathFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtConvertToInitializedFastpathFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent";
  }
  protected:
  explicit Ext4ExtConvertToInitializedFastpathFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kMLblkFieldNumber = 3,
    kMLenFieldNumber = 4,
    kULblkFieldNumber = 5,
    kULenFieldNumber = 6,
    kUPblkFieldNumber = 7,
    kILblkFieldNumber = 8,
    kILenFieldNumber = 9,
    kIPblkFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 m_lblk = 3;
  bool has_m_lblk() const;
  void clear_m_lblk() ;
  ::uint32_t m_lblk() const;
  void set_m_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_m_lblk() const;
  void _internal_set_m_lblk(::uint32_t value);

  public:
  // optional uint32 m_len = 4;
  bool has_m_len() const;
  void clear_m_len() ;
  ::uint32_t m_len() const;
  void set_m_len(::uint32_t value);

  private:
  ::uint32_t _internal_m_len() const;
  void _internal_set_m_len(::uint32_t value);

  public:
  // optional uint32 u_lblk = 5;
  bool has_u_lblk() const;
  void clear_u_lblk() ;
  ::uint32_t u_lblk() const;
  void set_u_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_u_lblk() const;
  void _internal_set_u_lblk(::uint32_t value);

  public:
  // optional uint32 u_len = 6;
  bool has_u_len() const;
  void clear_u_len() ;
  ::uint32_t u_len() const;
  void set_u_len(::uint32_t value);

  private:
  ::uint32_t _internal_u_len() const;
  void _internal_set_u_len(::uint32_t value);

  public:
  // optional uint64 u_pblk = 7;
  bool has_u_pblk() const;
  void clear_u_pblk() ;
  ::uint64_t u_pblk() const;
  void set_u_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_u_pblk() const;
  void _internal_set_u_pblk(::uint64_t value);

  public:
  // optional uint32 i_lblk = 8;
  bool has_i_lblk() const;
  void clear_i_lblk() ;
  ::uint32_t i_lblk() const;
  void set_i_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_i_lblk() const;
  void _internal_set_i_lblk(::uint32_t value);

  public:
  // optional uint32 i_len = 9;
  bool has_i_len() const;
  void clear_i_len() ;
  ::uint32_t i_len() const;
  void set_i_len(::uint32_t value);

  private:
  ::uint32_t _internal_i_len() const;
  void _internal_set_i_len(::uint32_t value);

  public:
  // optional uint64 i_pblk = 10;
  bool has_i_pblk() const;
  void clear_i_pblk() ;
  ::uint64_t i_pblk() const;
  void set_i_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_i_pblk() const;
  void _internal_set_i_pblk(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t m_lblk_;
    ::uint32_t m_len_;
    ::uint32_t u_lblk_;
    ::uint32_t u_len_;
    ::uint64_t u_pblk_;
    ::uint32_t i_lblk_;
    ::uint32_t i_len_;
    ::uint64_t i_pblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtHandleUnwrittenExtentsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent) */ {
 public:
  inline Ext4ExtHandleUnwrittenExtentsFtraceEvent() : Ext4ExtHandleUnwrittenExtentsFtraceEvent(nullptr) {}
  ~Ext4ExtHandleUnwrittenExtentsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtHandleUnwrittenExtentsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtHandleUnwrittenExtentsFtraceEvent(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from);
  Ext4ExtHandleUnwrittenExtentsFtraceEvent(Ext4ExtHandleUnwrittenExtentsFtraceEvent&& from) noexcept
    : Ext4ExtHandleUnwrittenExtentsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtHandleUnwrittenExtentsFtraceEvent& operator=(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtHandleUnwrittenExtentsFtraceEvent& operator=(Ext4ExtHandleUnwrittenExtentsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtHandleUnwrittenExtentsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtHandleUnwrittenExtentsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtHandleUnwrittenExtentsFtraceEvent*>(
               &_Ext4ExtHandleUnwrittenExtentsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Ext4ExtHandleUnwrittenExtentsFtraceEvent& a, Ext4ExtHandleUnwrittenExtentsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtHandleUnwrittenExtentsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtHandleUnwrittenExtentsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtHandleUnwrittenExtentsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtHandleUnwrittenExtentsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtHandleUnwrittenExtentsFtraceEvent& from) {
    Ext4ExtHandleUnwrittenExtentsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtHandleUnwrittenExtentsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent";
  }
  protected:
  explicit Ext4ExtHandleUnwrittenExtentsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kLblkFieldNumber = 4,
    kPblkFieldNumber = 5,
    kLenFieldNumber = 6,
    kAllocatedFieldNumber = 7,
    kNewblkFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 flags = 3;
  bool has_flags() const;
  void clear_flags() ;
  ::int32_t flags() const;
  void set_flags(::int32_t value);

  private:
  ::int32_t _internal_flags() const;
  void _internal_set_flags(::int32_t value);

  public:
  // optional uint32 lblk = 4;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint64 pblk = 5;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 len = 6;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 allocated = 7;
  bool has_allocated() const;
  void clear_allocated() ;
  ::uint32_t allocated() const;
  void set_allocated(::uint32_t value);

  private:
  ::uint32_t _internal_allocated() const;
  void _internal_set_allocated(::uint32_t value);

  public:
  // optional uint64 newblk = 8;
  bool has_newblk() const;
  void clear_newblk() ;
  ::uint64_t newblk() const;
  void set_newblk(::uint64_t value);

  private:
  ::uint64_t _internal_newblk() const;
  void _internal_set_newblk(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t flags_;
    ::uint32_t lblk_;
    ::uint64_t pblk_;
    ::uint32_t len_;
    ::uint32_t allocated_;
    ::uint64_t newblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtInCacheFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtInCacheFtraceEvent) */ {
 public:
  inline Ext4ExtInCacheFtraceEvent() : Ext4ExtInCacheFtraceEvent(nullptr) {}
  ~Ext4ExtInCacheFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtInCacheFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtInCacheFtraceEvent(const Ext4ExtInCacheFtraceEvent& from);
  Ext4ExtInCacheFtraceEvent(Ext4ExtInCacheFtraceEvent&& from) noexcept
    : Ext4ExtInCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtInCacheFtraceEvent& operator=(const Ext4ExtInCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtInCacheFtraceEvent& operator=(Ext4ExtInCacheFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtInCacheFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtInCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtInCacheFtraceEvent*>(
               &_Ext4ExtInCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Ext4ExtInCacheFtraceEvent& a, Ext4ExtInCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtInCacheFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtInCacheFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtInCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtInCacheFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtInCacheFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtInCacheFtraceEvent& from) {
    Ext4ExtInCacheFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtInCacheFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtInCacheFtraceEvent";
  }
  protected:
  explicit Ext4ExtInCacheFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kRetFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional int32 ret = 4;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtInCacheFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtLoadExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtLoadExtentFtraceEvent) */ {
 public:
  inline Ext4ExtLoadExtentFtraceEvent() : Ext4ExtLoadExtentFtraceEvent(nullptr) {}
  ~Ext4ExtLoadExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtLoadExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtLoadExtentFtraceEvent(const Ext4ExtLoadExtentFtraceEvent& from);
  Ext4ExtLoadExtentFtraceEvent(Ext4ExtLoadExtentFtraceEvent&& from) noexcept
    : Ext4ExtLoadExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtLoadExtentFtraceEvent& operator=(const Ext4ExtLoadExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtLoadExtentFtraceEvent& operator=(Ext4ExtLoadExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtLoadExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtLoadExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtLoadExtentFtraceEvent*>(
               &_Ext4ExtLoadExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Ext4ExtLoadExtentFtraceEvent& a, Ext4ExtLoadExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtLoadExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtLoadExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtLoadExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtLoadExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtLoadExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtLoadExtentFtraceEvent& from) {
    Ext4ExtLoadExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtLoadExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtLoadExtentFtraceEvent";
  }
  protected:
  explicit Ext4ExtLoadExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 3,
    kLblkFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pblk = 3;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 lblk = 4;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtLoadExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pblk_;
    ::uint32_t lblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtMapBlocksEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent) */ {
 public:
  inline Ext4ExtMapBlocksEnterFtraceEvent() : Ext4ExtMapBlocksEnterFtraceEvent(nullptr) {}
  ~Ext4ExtMapBlocksEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtMapBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtMapBlocksEnterFtraceEvent(const Ext4ExtMapBlocksEnterFtraceEvent& from);
  Ext4ExtMapBlocksEnterFtraceEvent(Ext4ExtMapBlocksEnterFtraceEvent&& from) noexcept
    : Ext4ExtMapBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtMapBlocksEnterFtraceEvent& operator=(const Ext4ExtMapBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtMapBlocksEnterFtraceEvent& operator=(Ext4ExtMapBlocksEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtMapBlocksEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtMapBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtMapBlocksEnterFtraceEvent*>(
               &_Ext4ExtMapBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Ext4ExtMapBlocksEnterFtraceEvent& a, Ext4ExtMapBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtMapBlocksEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtMapBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtMapBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtMapBlocksEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtMapBlocksEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtMapBlocksEnterFtraceEvent& from) {
    Ext4ExtMapBlocksEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtMapBlocksEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent";
  }
  protected:
  explicit Ext4ExtMapBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtMapBlocksExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent) */ {
 public:
  inline Ext4ExtMapBlocksExitFtraceEvent() : Ext4ExtMapBlocksExitFtraceEvent(nullptr) {}
  ~Ext4ExtMapBlocksExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtMapBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtMapBlocksExitFtraceEvent(const Ext4ExtMapBlocksExitFtraceEvent& from);
  Ext4ExtMapBlocksExitFtraceEvent(Ext4ExtMapBlocksExitFtraceEvent&& from) noexcept
    : Ext4ExtMapBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtMapBlocksExitFtraceEvent& operator=(const Ext4ExtMapBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtMapBlocksExitFtraceEvent& operator=(Ext4ExtMapBlocksExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtMapBlocksExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtMapBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtMapBlocksExitFtraceEvent*>(
               &_Ext4ExtMapBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Ext4ExtMapBlocksExitFtraceEvent& a, Ext4ExtMapBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtMapBlocksExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtMapBlocksExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtMapBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtMapBlocksExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtMapBlocksExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtMapBlocksExitFtraceEvent& from) {
    Ext4ExtMapBlocksExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtMapBlocksExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent";
  }
  protected:
  explicit Ext4ExtMapBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 4,
    kFlagsFieldNumber = 3,
    kLblkFieldNumber = 5,
    kLenFieldNumber = 6,
    kMflagsFieldNumber = 7,
    kRetFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pblk = 4;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 lblk = 5;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 6;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 mflags = 7;
  bool has_mflags() const;
  void clear_mflags() ;
  ::uint32_t mflags() const;
  void set_mflags(::uint32_t value);

  private:
  ::uint32_t _internal_mflags() const;
  void _internal_set_mflags(::uint32_t value);

  public:
  // optional int32 ret = 8;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pblk_;
    ::uint32_t flags_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint32_t mflags_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtPutInCacheFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtPutInCacheFtraceEvent) */ {
 public:
  inline Ext4ExtPutInCacheFtraceEvent() : Ext4ExtPutInCacheFtraceEvent(nullptr) {}
  ~Ext4ExtPutInCacheFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtPutInCacheFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtPutInCacheFtraceEvent(const Ext4ExtPutInCacheFtraceEvent& from);
  Ext4ExtPutInCacheFtraceEvent(Ext4ExtPutInCacheFtraceEvent&& from) noexcept
    : Ext4ExtPutInCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtPutInCacheFtraceEvent& operator=(const Ext4ExtPutInCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtPutInCacheFtraceEvent& operator=(Ext4ExtPutInCacheFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtPutInCacheFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtPutInCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtPutInCacheFtraceEvent*>(
               &_Ext4ExtPutInCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Ext4ExtPutInCacheFtraceEvent& a, Ext4ExtPutInCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtPutInCacheFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtPutInCacheFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtPutInCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtPutInCacheFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtPutInCacheFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtPutInCacheFtraceEvent& from) {
    Ext4ExtPutInCacheFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtPutInCacheFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtPutInCacheFtraceEvent";
  }
  protected:
  explicit Ext4ExtPutInCacheFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kStartFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint64 start = 5;
  bool has_start() const;
  void clear_start() ;
  ::uint64_t start() const;
  void set_start(::uint64_t value);

  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtPutInCacheFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint64_t start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtRemoveSpaceFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent) */ {
 public:
  inline Ext4ExtRemoveSpaceFtraceEvent() : Ext4ExtRemoveSpaceFtraceEvent(nullptr) {}
  ~Ext4ExtRemoveSpaceFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtRemoveSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtRemoveSpaceFtraceEvent(const Ext4ExtRemoveSpaceFtraceEvent& from);
  Ext4ExtRemoveSpaceFtraceEvent(Ext4ExtRemoveSpaceFtraceEvent&& from) noexcept
    : Ext4ExtRemoveSpaceFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRemoveSpaceFtraceEvent& operator=(const Ext4ExtRemoveSpaceFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRemoveSpaceFtraceEvent& operator=(Ext4ExtRemoveSpaceFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtRemoveSpaceFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtRemoveSpaceFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRemoveSpaceFtraceEvent*>(
               &_Ext4ExtRemoveSpaceFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Ext4ExtRemoveSpaceFtraceEvent& a, Ext4ExtRemoveSpaceFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRemoveSpaceFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtRemoveSpaceFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtRemoveSpaceFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtRemoveSpaceFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtRemoveSpaceFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtRemoveSpaceFtraceEvent& from) {
    Ext4ExtRemoveSpaceFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtRemoveSpaceFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent";
  }
  protected:
  explicit Ext4ExtRemoveSpaceFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kDepthFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 start = 3;
  bool has_start() const;
  void clear_start() ;
  ::uint32_t start() const;
  void set_start(::uint32_t value);

  private:
  ::uint32_t _internal_start() const;
  void _internal_set_start(::uint32_t value);

  public:
  // optional uint32 end = 4;
  bool has_end() const;
  void clear_end() ;
  ::uint32_t end() const;
  void set_end(::uint32_t value);

  private:
  ::uint32_t _internal_end() const;
  void _internal_set_end(::uint32_t value);

  public:
  // optional int32 depth = 5;
  bool has_depth() const;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t start_;
    ::uint32_t end_;
    ::int32_t depth_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtRemoveSpaceDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent) */ {
 public:
  inline Ext4ExtRemoveSpaceDoneFtraceEvent() : Ext4ExtRemoveSpaceDoneFtraceEvent(nullptr) {}
  ~Ext4ExtRemoveSpaceDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtRemoveSpaceDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtRemoveSpaceDoneFtraceEvent(const Ext4ExtRemoveSpaceDoneFtraceEvent& from);
  Ext4ExtRemoveSpaceDoneFtraceEvent(Ext4ExtRemoveSpaceDoneFtraceEvent&& from) noexcept
    : Ext4ExtRemoveSpaceDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRemoveSpaceDoneFtraceEvent& operator=(const Ext4ExtRemoveSpaceDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRemoveSpaceDoneFtraceEvent& operator=(Ext4ExtRemoveSpaceDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtRemoveSpaceDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtRemoveSpaceDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRemoveSpaceDoneFtraceEvent*>(
               &_Ext4ExtRemoveSpaceDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Ext4ExtRemoveSpaceDoneFtraceEvent& a, Ext4ExtRemoveSpaceDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRemoveSpaceDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtRemoveSpaceDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtRemoveSpaceDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtRemoveSpaceDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtRemoveSpaceDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtRemoveSpaceDoneFtraceEvent& from) {
    Ext4ExtRemoveSpaceDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtRemoveSpaceDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent";
  }
  protected:
  explicit Ext4ExtRemoveSpaceDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kPartialFieldNumber = 6,
    kDepthFieldNumber = 5,
    kEhEntriesFieldNumber = 7,
    kPcPcluFieldNumber = 9,
    kPcLblkFieldNumber = 8,
    kPcStateFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 start = 3;
  bool has_start() const;
  void clear_start() ;
  ::uint32_t start() const;
  void set_start(::uint32_t value);

  private:
  ::uint32_t _internal_start() const;
  void _internal_set_start(::uint32_t value);

  public:
  // optional uint32 end = 4;
  bool has_end() const;
  void clear_end() ;
  ::uint32_t end() const;
  void set_end(::uint32_t value);

  private:
  ::uint32_t _internal_end() const;
  void _internal_set_end(::uint32_t value);

  public:
  // optional int64 partial = 6;
  bool has_partial() const;
  void clear_partial() ;
  ::int64_t partial() const;
  void set_partial(::int64_t value);

  private:
  ::int64_t _internal_partial() const;
  void _internal_set_partial(::int64_t value);

  public:
  // optional int32 depth = 5;
  bool has_depth() const;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // optional uint32 eh_entries = 7;
  bool has_eh_entries() const;
  void clear_eh_entries() ;
  ::uint32_t eh_entries() const;
  void set_eh_entries(::uint32_t value);

  private:
  ::uint32_t _internal_eh_entries() const;
  void _internal_set_eh_entries(::uint32_t value);

  public:
  // optional uint64 pc_pclu = 9;
  bool has_pc_pclu() const;
  void clear_pc_pclu() ;
  ::uint64_t pc_pclu() const;
  void set_pc_pclu(::uint64_t value);

  private:
  ::uint64_t _internal_pc_pclu() const;
  void _internal_set_pc_pclu(::uint64_t value);

  public:
  // optional uint32 pc_lblk = 8;
  bool has_pc_lblk() const;
  void clear_pc_lblk() ;
  ::uint32_t pc_lblk() const;
  void set_pc_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_pc_lblk() const;
  void _internal_set_pc_lblk(::uint32_t value);

  public:
  // optional int32 pc_state = 10;
  bool has_pc_state() const;
  void clear_pc_state() ;
  ::int32_t pc_state() const;
  void set_pc_state(::int32_t value);

  private:
  ::int32_t _internal_pc_state() const;
  void _internal_set_pc_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t start_;
    ::uint32_t end_;
    ::int64_t partial_;
    ::int32_t depth_;
    ::uint32_t eh_entries_;
    ::uint64_t pc_pclu_;
    ::uint32_t pc_lblk_;
    ::int32_t pc_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtRmIdxFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRmIdxFtraceEvent) */ {
 public:
  inline Ext4ExtRmIdxFtraceEvent() : Ext4ExtRmIdxFtraceEvent(nullptr) {}
  ~Ext4ExtRmIdxFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtRmIdxFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtRmIdxFtraceEvent(const Ext4ExtRmIdxFtraceEvent& from);
  Ext4ExtRmIdxFtraceEvent(Ext4ExtRmIdxFtraceEvent&& from) noexcept
    : Ext4ExtRmIdxFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRmIdxFtraceEvent& operator=(const Ext4ExtRmIdxFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRmIdxFtraceEvent& operator=(Ext4ExtRmIdxFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtRmIdxFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtRmIdxFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRmIdxFtraceEvent*>(
               &_Ext4ExtRmIdxFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Ext4ExtRmIdxFtraceEvent& a, Ext4ExtRmIdxFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRmIdxFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtRmIdxFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtRmIdxFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtRmIdxFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtRmIdxFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtRmIdxFtraceEvent& from) {
    Ext4ExtRmIdxFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtRmIdxFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtRmIdxFtraceEvent";
  }
  protected:
  explicit Ext4ExtRmIdxFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pblk = 3;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRmIdxFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pblk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtRmLeafFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtRmLeafFtraceEvent) */ {
 public:
  inline Ext4ExtRmLeafFtraceEvent() : Ext4ExtRmLeafFtraceEvent(nullptr) {}
  ~Ext4ExtRmLeafFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtRmLeafFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtRmLeafFtraceEvent(const Ext4ExtRmLeafFtraceEvent& from);
  Ext4ExtRmLeafFtraceEvent(Ext4ExtRmLeafFtraceEvent&& from) noexcept
    : Ext4ExtRmLeafFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtRmLeafFtraceEvent& operator=(const Ext4ExtRmLeafFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtRmLeafFtraceEvent& operator=(Ext4ExtRmLeafFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtRmLeafFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtRmLeafFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtRmLeafFtraceEvent*>(
               &_Ext4ExtRmLeafFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Ext4ExtRmLeafFtraceEvent& a, Ext4ExtRmLeafFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtRmLeafFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtRmLeafFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtRmLeafFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtRmLeafFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtRmLeafFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtRmLeafFtraceEvent& from) {
    Ext4ExtRmLeafFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtRmLeafFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtRmLeafFtraceEvent";
  }
  protected:
  explicit Ext4ExtRmLeafFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPartialFieldNumber = 3,
    kStartFieldNumber = 4,
    kEeLblkFieldNumber = 5,
    kEePblkFieldNumber = 6,
    kEeLenFieldNumber = 7,
    kPcLblkFieldNumber = 8,
    kPcPcluFieldNumber = 9,
    kPcStateFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 partial = 3;
  bool has_partial() const;
  void clear_partial() ;
  ::int64_t partial() const;
  void set_partial(::int64_t value);

  private:
  ::int64_t _internal_partial() const;
  void _internal_set_partial(::int64_t value);

  public:
  // optional uint32 start = 4;
  bool has_start() const;
  void clear_start() ;
  ::uint32_t start() const;
  void set_start(::uint32_t value);

  private:
  ::uint32_t _internal_start() const;
  void _internal_set_start(::uint32_t value);

  public:
  // optional uint32 ee_lblk = 5;
  bool has_ee_lblk() const;
  void clear_ee_lblk() ;
  ::uint32_t ee_lblk() const;
  void set_ee_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_ee_lblk() const;
  void _internal_set_ee_lblk(::uint32_t value);

  public:
  // optional uint64 ee_pblk = 6;
  bool has_ee_pblk() const;
  void clear_ee_pblk() ;
  ::uint64_t ee_pblk() const;
  void set_ee_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_ee_pblk() const;
  void _internal_set_ee_pblk(::uint64_t value);

  public:
  // optional int32 ee_len = 7;
  bool has_ee_len() const;
  void clear_ee_len() ;
  ::int32_t ee_len() const;
  void set_ee_len(::int32_t value);

  private:
  ::int32_t _internal_ee_len() const;
  void _internal_set_ee_len(::int32_t value);

  public:
  // optional uint32 pc_lblk = 8;
  bool has_pc_lblk() const;
  void clear_pc_lblk() ;
  ::uint32_t pc_lblk() const;
  void set_pc_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_pc_lblk() const;
  void _internal_set_pc_lblk(::uint32_t value);

  public:
  // optional uint64 pc_pclu = 9;
  bool has_pc_pclu() const;
  void clear_pc_pclu() ;
  ::uint64_t pc_pclu() const;
  void set_pc_pclu(::uint64_t value);

  private:
  ::uint64_t _internal_pc_pclu() const;
  void _internal_set_pc_pclu(::uint64_t value);

  public:
  // optional int32 pc_state = 10;
  bool has_pc_state() const;
  void clear_pc_state() ;
  ::int32_t pc_state() const;
  void set_pc_state(::int32_t value);

  private:
  ::int32_t _internal_pc_state() const;
  void _internal_set_pc_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtRmLeafFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t partial_;
    ::uint32_t start_;
    ::uint32_t ee_lblk_;
    ::uint64_t ee_pblk_;
    ::int32_t ee_len_;
    ::uint32_t pc_lblk_;
    ::uint64_t pc_pclu_;
    ::int32_t pc_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ExtShowExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ExtShowExtentFtraceEvent) */ {
 public:
  inline Ext4ExtShowExtentFtraceEvent() : Ext4ExtShowExtentFtraceEvent(nullptr) {}
  ~Ext4ExtShowExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ExtShowExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ExtShowExtentFtraceEvent(const Ext4ExtShowExtentFtraceEvent& from);
  Ext4ExtShowExtentFtraceEvent(Ext4ExtShowExtentFtraceEvent&& from) noexcept
    : Ext4ExtShowExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ExtShowExtentFtraceEvent& operator=(const Ext4ExtShowExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ExtShowExtentFtraceEvent& operator=(Ext4ExtShowExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ExtShowExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ExtShowExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ExtShowExtentFtraceEvent*>(
               &_Ext4ExtShowExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Ext4ExtShowExtentFtraceEvent& a, Ext4ExtShowExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ExtShowExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ExtShowExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ExtShowExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ExtShowExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ExtShowExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ExtShowExtentFtraceEvent& from) {
    Ext4ExtShowExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ExtShowExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ExtShowExtentFtraceEvent";
  }
  protected:
  explicit Ext4ExtShowExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 3,
    kLblkFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pblk = 3;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 lblk = 4;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ExtShowExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pblk_;
    ::uint32_t lblk_;
    ::uint32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4FallocateEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FallocateEnterFtraceEvent) */ {
 public:
  inline Ext4FallocateEnterFtraceEvent() : Ext4FallocateEnterFtraceEvent(nullptr) {}
  ~Ext4FallocateEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4FallocateEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4FallocateEnterFtraceEvent(const Ext4FallocateEnterFtraceEvent& from);
  Ext4FallocateEnterFtraceEvent(Ext4FallocateEnterFtraceEvent&& from) noexcept
    : Ext4FallocateEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FallocateEnterFtraceEvent& operator=(const Ext4FallocateEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FallocateEnterFtraceEvent& operator=(Ext4FallocateEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4FallocateEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4FallocateEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FallocateEnterFtraceEvent*>(
               &_Ext4FallocateEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Ext4FallocateEnterFtraceEvent& a, Ext4FallocateEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FallocateEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4FallocateEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4FallocateEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4FallocateEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4FallocateEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4FallocateEnterFtraceEvent& from) {
    Ext4FallocateEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4FallocateEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4FallocateEnterFtraceEvent";
  }
  protected:
  explicit Ext4FallocateEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
    kPosFieldNumber = 6,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // optional int64 pos = 6;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode() ;
  ::int32_t mode() const;
  void set_mode(::int32_t value);

  private:
  ::int32_t _internal_mode() const;
  void _internal_set_mode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FallocateEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int64_t len_;
    ::int64_t pos_;
    ::int32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4FallocateExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FallocateExitFtraceEvent) */ {
 public:
  inline Ext4FallocateExitFtraceEvent() : Ext4FallocateExitFtraceEvent(nullptr) {}
  ~Ext4FallocateExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4FallocateExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4FallocateExitFtraceEvent(const Ext4FallocateExitFtraceEvent& from);
  Ext4FallocateExitFtraceEvent(Ext4FallocateExitFtraceEvent&& from) noexcept
    : Ext4FallocateExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FallocateExitFtraceEvent& operator=(const Ext4FallocateExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FallocateExitFtraceEvent& operator=(Ext4FallocateExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4FallocateExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4FallocateExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FallocateExitFtraceEvent*>(
               &_Ext4FallocateExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Ext4FallocateExitFtraceEvent& a, Ext4FallocateExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FallocateExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4FallocateExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4FallocateExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4FallocateExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4FallocateExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4FallocateExitFtraceEvent& from) {
    Ext4FallocateExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4FallocateExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4FallocateExitFtraceEvent";
  }
  protected:
  explicit Ext4FallocateExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kBlocksFieldNumber = 4,
    kRetFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 blocks = 4;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint32_t blocks() const;
  void set_blocks(::uint32_t value);

  private:
  ::uint32_t _internal_blocks() const;
  void _internal_set_blocks(::uint32_t value);

  public:
  // optional int32 ret = 5;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FallocateExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t blocks_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4FindDelallocRangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FindDelallocRangeFtraceEvent) */ {
 public:
  inline Ext4FindDelallocRangeFtraceEvent() : Ext4FindDelallocRangeFtraceEvent(nullptr) {}
  ~Ext4FindDelallocRangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4FindDelallocRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4FindDelallocRangeFtraceEvent(const Ext4FindDelallocRangeFtraceEvent& from);
  Ext4FindDelallocRangeFtraceEvent(Ext4FindDelallocRangeFtraceEvent&& from) noexcept
    : Ext4FindDelallocRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FindDelallocRangeFtraceEvent& operator=(const Ext4FindDelallocRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FindDelallocRangeFtraceEvent& operator=(Ext4FindDelallocRangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4FindDelallocRangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4FindDelallocRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FindDelallocRangeFtraceEvent*>(
               &_Ext4FindDelallocRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Ext4FindDelallocRangeFtraceEvent& a, Ext4FindDelallocRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FindDelallocRangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4FindDelallocRangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4FindDelallocRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4FindDelallocRangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4FindDelallocRangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4FindDelallocRangeFtraceEvent& from) {
    Ext4FindDelallocRangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4FindDelallocRangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4FindDelallocRangeFtraceEvent";
  }
  protected:
  explicit Ext4FindDelallocRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kReverseFieldNumber = 5,
    kFoundFieldNumber = 6,
    kFoundBlkFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 from = 3;
  bool has_from() const;
  void clear_from() ;
  ::uint32_t from() const;
  void set_from(::uint32_t value);

  private:
  ::uint32_t _internal_from() const;
  void _internal_set_from(::uint32_t value);

  public:
  // optional uint32 to = 4;
  bool has_to() const;
  void clear_to() ;
  ::uint32_t to() const;
  void set_to(::uint32_t value);

  private:
  ::uint32_t _internal_to() const;
  void _internal_set_to(::uint32_t value);

  public:
  // optional int32 reverse = 5;
  bool has_reverse() const;
  void clear_reverse() ;
  ::int32_t reverse() const;
  void set_reverse(::int32_t value);

  private:
  ::int32_t _internal_reverse() const;
  void _internal_set_reverse(::int32_t value);

  public:
  // optional int32 found = 6;
  bool has_found() const;
  void clear_found() ;
  ::int32_t found() const;
  void set_found(::int32_t value);

  private:
  ::int32_t _internal_found() const;
  void _internal_set_found(::int32_t value);

  public:
  // optional uint32 found_blk = 7;
  bool has_found_blk() const;
  void clear_found_blk() ;
  ::uint32_t found_blk() const;
  void set_found_blk(::uint32_t value);

  private:
  ::uint32_t _internal_found_blk() const;
  void _internal_set_found_blk(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FindDelallocRangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t from_;
    ::uint32_t to_;
    ::int32_t reverse_;
    ::int32_t found_;
    ::uint32_t found_blk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ForgetFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ForgetFtraceEvent) */ {
 public:
  inline Ext4ForgetFtraceEvent() : Ext4ForgetFtraceEvent(nullptr) {}
  ~Ext4ForgetFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ForgetFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ForgetFtraceEvent(const Ext4ForgetFtraceEvent& from);
  Ext4ForgetFtraceEvent(Ext4ForgetFtraceEvent&& from) noexcept
    : Ext4ForgetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ForgetFtraceEvent& operator=(const Ext4ForgetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ForgetFtraceEvent& operator=(Ext4ForgetFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ForgetFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ForgetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ForgetFtraceEvent*>(
               &_Ext4ForgetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Ext4ForgetFtraceEvent& a, Ext4ForgetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ForgetFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ForgetFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ForgetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ForgetFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ForgetFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ForgetFtraceEvent& from) {
    Ext4ForgetFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ForgetFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ForgetFtraceEvent";
  }
  protected:
  explicit Ext4ForgetFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kIsMetadataFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block() ;
  ::uint64_t block() const;
  void set_block(::uint64_t value);

  private:
  ::uint64_t _internal_block() const;
  void _internal_set_block(::uint64_t value);

  public:
  // optional int32 is_metadata = 4;
  bool has_is_metadata() const;
  void clear_is_metadata() ;
  ::int32_t is_metadata() const;
  void set_is_metadata(::int32_t value);

  private:
  ::int32_t _internal_is_metadata() const;
  void _internal_set_is_metadata(::int32_t value);

  public:
  // optional uint32 mode = 5;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ForgetFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t block_;
    ::int32_t is_metadata_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4FreeBlocksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FreeBlocksFtraceEvent) */ {
 public:
  inline Ext4FreeBlocksFtraceEvent() : Ext4FreeBlocksFtraceEvent(nullptr) {}
  ~Ext4FreeBlocksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4FreeBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4FreeBlocksFtraceEvent(const Ext4FreeBlocksFtraceEvent& from);
  Ext4FreeBlocksFtraceEvent(Ext4FreeBlocksFtraceEvent&& from) noexcept
    : Ext4FreeBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FreeBlocksFtraceEvent& operator=(const Ext4FreeBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FreeBlocksFtraceEvent& operator=(Ext4FreeBlocksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4FreeBlocksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4FreeBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FreeBlocksFtraceEvent*>(
               &_Ext4FreeBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Ext4FreeBlocksFtraceEvent& a, Ext4FreeBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FreeBlocksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4FreeBlocksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4FreeBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4FreeBlocksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4FreeBlocksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4FreeBlocksFtraceEvent& from) {
    Ext4FreeBlocksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4FreeBlocksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4FreeBlocksFtraceEvent";
  }
  protected:
  explicit Ext4FreeBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kCountFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kModeFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block() ;
  ::uint64_t block() const;
  void set_block(::uint64_t value);

  private:
  ::uint64_t _internal_block() const;
  void _internal_set_block(::uint64_t value);

  public:
  // optional uint64 count = 4;
  bool has_count() const;
  void clear_count() ;
  ::uint64_t count() const;
  void set_count(::uint64_t value);

  private:
  ::uint64_t _internal_count() const;
  void _internal_set_count(::uint64_t value);

  public:
  // optional int32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::int32_t flags() const;
  void set_flags(::int32_t value);

  private:
  ::int32_t _internal_flags() const;
  void _internal_set_flags(::int32_t value);

  public:
  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FreeBlocksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t block_;
    ::uint64_t count_;
    ::int32_t flags_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4FreeInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4FreeInodeFtraceEvent) */ {
 public:
  inline Ext4FreeInodeFtraceEvent() : Ext4FreeInodeFtraceEvent(nullptr) {}
  ~Ext4FreeInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4FreeInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4FreeInodeFtraceEvent(const Ext4FreeInodeFtraceEvent& from);
  Ext4FreeInodeFtraceEvent(Ext4FreeInodeFtraceEvent&& from) noexcept
    : Ext4FreeInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4FreeInodeFtraceEvent& operator=(const Ext4FreeInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4FreeInodeFtraceEvent& operator=(Ext4FreeInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4FreeInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4FreeInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4FreeInodeFtraceEvent*>(
               &_Ext4FreeInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Ext4FreeInodeFtraceEvent& a, Ext4FreeInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4FreeInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4FreeInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4FreeInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4FreeInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4FreeInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4FreeInodeFtraceEvent& from) {
    Ext4FreeInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4FreeInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4FreeInodeFtraceEvent";
  }
  protected:
  explicit Ext4FreeInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kUidFieldNumber = 3,
    kGidFieldNumber = 4,
    kBlocksFieldNumber = 5,
    kModeFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 uid = 3;
  bool has_uid() const;
  void clear_uid() ;
  ::uint32_t uid() const;
  void set_uid(::uint32_t value);

  private:
  ::uint32_t _internal_uid() const;
  void _internal_set_uid(::uint32_t value);

  public:
  // optional uint32 gid = 4;
  bool has_gid() const;
  void clear_gid() ;
  ::uint32_t gid() const;
  void set_gid(::uint32_t value);

  private:
  ::uint32_t _internal_gid() const;
  void _internal_set_gid(::uint32_t value);

  public:
  // optional uint64 blocks = 5;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4FreeInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t uid_;
    ::uint32_t gid_;
    ::uint64_t blocks_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4GetImpliedClusterAllocExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent) */ {
 public:
  inline Ext4GetImpliedClusterAllocExitFtraceEvent() : Ext4GetImpliedClusterAllocExitFtraceEvent(nullptr) {}
  ~Ext4GetImpliedClusterAllocExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4GetImpliedClusterAllocExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4GetImpliedClusterAllocExitFtraceEvent(const Ext4GetImpliedClusterAllocExitFtraceEvent& from);
  Ext4GetImpliedClusterAllocExitFtraceEvent(Ext4GetImpliedClusterAllocExitFtraceEvent&& from) noexcept
    : Ext4GetImpliedClusterAllocExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4GetImpliedClusterAllocExitFtraceEvent& operator=(const Ext4GetImpliedClusterAllocExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4GetImpliedClusterAllocExitFtraceEvent& operator=(Ext4GetImpliedClusterAllocExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4GetImpliedClusterAllocExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4GetImpliedClusterAllocExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4GetImpliedClusterAllocExitFtraceEvent*>(
               &_Ext4GetImpliedClusterAllocExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Ext4GetImpliedClusterAllocExitFtraceEvent& a, Ext4GetImpliedClusterAllocExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4GetImpliedClusterAllocExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4GetImpliedClusterAllocExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4GetImpliedClusterAllocExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4GetImpliedClusterAllocExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4GetImpliedClusterAllocExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4GetImpliedClusterAllocExitFtraceEvent& from) {
    Ext4GetImpliedClusterAllocExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4GetImpliedClusterAllocExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent";
  }
  protected:
  explicit Ext4GetImpliedClusterAllocExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kLblkFieldNumber = 3,
    kPblkFieldNumber = 4,
    kLenFieldNumber = 5,
    kRetFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 flags = 2;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint64 pblk = 4;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional int32 ret = 6;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint32_t flags_;
    ::uint32_t lblk_;
    ::uint64_t pblk_;
    ::uint32_t len_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4GetReservedClusterAllocFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent) */ {
 public:
  inline Ext4GetReservedClusterAllocFtraceEvent() : Ext4GetReservedClusterAllocFtraceEvent(nullptr) {}
  ~Ext4GetReservedClusterAllocFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4GetReservedClusterAllocFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4GetReservedClusterAllocFtraceEvent(const Ext4GetReservedClusterAllocFtraceEvent& from);
  Ext4GetReservedClusterAllocFtraceEvent(Ext4GetReservedClusterAllocFtraceEvent&& from) noexcept
    : Ext4GetReservedClusterAllocFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4GetReservedClusterAllocFtraceEvent& operator=(const Ext4GetReservedClusterAllocFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4GetReservedClusterAllocFtraceEvent& operator=(Ext4GetReservedClusterAllocFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4GetReservedClusterAllocFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4GetReservedClusterAllocFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4GetReservedClusterAllocFtraceEvent*>(
               &_Ext4GetReservedClusterAllocFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Ext4GetReservedClusterAllocFtraceEvent& a, Ext4GetReservedClusterAllocFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4GetReservedClusterAllocFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4GetReservedClusterAllocFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4GetReservedClusterAllocFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4GetReservedClusterAllocFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4GetReservedClusterAllocFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4GetReservedClusterAllocFtraceEvent& from) {
    Ext4GetReservedClusterAllocFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4GetReservedClusterAllocFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent";
  }
  protected:
  explicit Ext4GetReservedClusterAllocFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4IndMapBlocksEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent) */ {
 public:
  inline Ext4IndMapBlocksEnterFtraceEvent() : Ext4IndMapBlocksEnterFtraceEvent(nullptr) {}
  ~Ext4IndMapBlocksEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4IndMapBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4IndMapBlocksEnterFtraceEvent(const Ext4IndMapBlocksEnterFtraceEvent& from);
  Ext4IndMapBlocksEnterFtraceEvent(Ext4IndMapBlocksEnterFtraceEvent&& from) noexcept
    : Ext4IndMapBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4IndMapBlocksEnterFtraceEvent& operator=(const Ext4IndMapBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4IndMapBlocksEnterFtraceEvent& operator=(Ext4IndMapBlocksEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4IndMapBlocksEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4IndMapBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4IndMapBlocksEnterFtraceEvent*>(
               &_Ext4IndMapBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Ext4IndMapBlocksEnterFtraceEvent& a, Ext4IndMapBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4IndMapBlocksEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4IndMapBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4IndMapBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4IndMapBlocksEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4IndMapBlocksEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4IndMapBlocksEnterFtraceEvent& from) {
    Ext4IndMapBlocksEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4IndMapBlocksEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent";
  }
  protected:
  explicit Ext4IndMapBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLblkFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 lblk = 3;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4IndMapBlocksExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent) */ {
 public:
  inline Ext4IndMapBlocksExitFtraceEvent() : Ext4IndMapBlocksExitFtraceEvent(nullptr) {}
  ~Ext4IndMapBlocksExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4IndMapBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4IndMapBlocksExitFtraceEvent(const Ext4IndMapBlocksExitFtraceEvent& from);
  Ext4IndMapBlocksExitFtraceEvent(Ext4IndMapBlocksExitFtraceEvent&& from) noexcept
    : Ext4IndMapBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4IndMapBlocksExitFtraceEvent& operator=(const Ext4IndMapBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4IndMapBlocksExitFtraceEvent& operator=(Ext4IndMapBlocksExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4IndMapBlocksExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4IndMapBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4IndMapBlocksExitFtraceEvent*>(
               &_Ext4IndMapBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Ext4IndMapBlocksExitFtraceEvent& a, Ext4IndMapBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4IndMapBlocksExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4IndMapBlocksExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4IndMapBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4IndMapBlocksExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4IndMapBlocksExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4IndMapBlocksExitFtraceEvent& from) {
    Ext4IndMapBlocksExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4IndMapBlocksExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4IndMapBlocksExitFtraceEvent";
  }
  protected:
  explicit Ext4IndMapBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPblkFieldNumber = 4,
    kFlagsFieldNumber = 3,
    kLblkFieldNumber = 5,
    kLenFieldNumber = 6,
    kMflagsFieldNumber = 7,
    kRetFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pblk = 4;
  bool has_pblk() const;
  void clear_pblk() ;
  ::uint64_t pblk() const;
  void set_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_pblk() const;
  void _internal_set_pblk(::uint64_t value);

  public:
  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 lblk = 5;
  bool has_lblk() const;
  void clear_lblk() ;
  ::uint32_t lblk() const;
  void set_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_lblk() const;
  void _internal_set_lblk(::uint32_t value);

  public:
  // optional uint32 len = 6;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 mflags = 7;
  bool has_mflags() const;
  void clear_mflags() ;
  ::uint32_t mflags() const;
  void set_mflags(::uint32_t value);

  private:
  ::uint32_t _internal_mflags() const;
  void _internal_set_mflags(::uint32_t value);

  public:
  // optional int32 ret = 8;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pblk_;
    ::uint32_t flags_;
    ::uint32_t lblk_;
    ::uint32_t len_;
    ::uint32_t mflags_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4InsertRangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4InsertRangeFtraceEvent) */ {
 public:
  inline Ext4InsertRangeFtraceEvent() : Ext4InsertRangeFtraceEvent(nullptr) {}
  ~Ext4InsertRangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4InsertRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4InsertRangeFtraceEvent(const Ext4InsertRangeFtraceEvent& from);
  Ext4InsertRangeFtraceEvent(Ext4InsertRangeFtraceEvent&& from) noexcept
    : Ext4InsertRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4InsertRangeFtraceEvent& operator=(const Ext4InsertRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4InsertRangeFtraceEvent& operator=(Ext4InsertRangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4InsertRangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4InsertRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4InsertRangeFtraceEvent*>(
               &_Ext4InsertRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Ext4InsertRangeFtraceEvent& a, Ext4InsertRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4InsertRangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4InsertRangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4InsertRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4InsertRangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4InsertRangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4InsertRangeFtraceEvent& from) {
    Ext4InsertRangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4InsertRangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4InsertRangeFtraceEvent";
  }
  protected:
  explicit Ext4InsertRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4InsertRangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int64_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4InvalidatepageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4InvalidatepageFtraceEvent) */ {
 public:
  inline Ext4InvalidatepageFtraceEvent() : Ext4InvalidatepageFtraceEvent(nullptr) {}
  ~Ext4InvalidatepageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4InvalidatepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4InvalidatepageFtraceEvent(const Ext4InvalidatepageFtraceEvent& from);
  Ext4InvalidatepageFtraceEvent(Ext4InvalidatepageFtraceEvent&& from) noexcept
    : Ext4InvalidatepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4InvalidatepageFtraceEvent& operator=(const Ext4InvalidatepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4InvalidatepageFtraceEvent& operator=(Ext4InvalidatepageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4InvalidatepageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4InvalidatepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4InvalidatepageFtraceEvent*>(
               &_Ext4InvalidatepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Ext4InvalidatepageFtraceEvent& a, Ext4InvalidatepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4InvalidatepageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4InvalidatepageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4InvalidatepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4InvalidatepageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4InvalidatepageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4InvalidatepageFtraceEvent& from) {
    Ext4InvalidatepageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4InvalidatepageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4InvalidatepageFtraceEvent";
  }
  protected:
  explicit Ext4InvalidatepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional uint64 offset = 4;
  bool has_offset() const;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // optional uint32 length = 5;
  bool has_length() const;
  void clear_length() ;
  ::uint32_t length() const;
  void set_length(::uint32_t value);

  private:
  ::uint32_t _internal_length() const;
  void _internal_set_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4InvalidatepageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
    ::uint64_t offset_;
    ::uint32_t length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4JournalStartFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalStartFtraceEvent) */ {
 public:
  inline Ext4JournalStartFtraceEvent() : Ext4JournalStartFtraceEvent(nullptr) {}
  ~Ext4JournalStartFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4JournalStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4JournalStartFtraceEvent(const Ext4JournalStartFtraceEvent& from);
  Ext4JournalStartFtraceEvent(Ext4JournalStartFtraceEvent&& from) noexcept
    : Ext4JournalStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalStartFtraceEvent& operator=(const Ext4JournalStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalStartFtraceEvent& operator=(Ext4JournalStartFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4JournalStartFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4JournalStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalStartFtraceEvent*>(
               &_Ext4JournalStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Ext4JournalStartFtraceEvent& a, Ext4JournalStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalStartFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4JournalStartFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4JournalStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4JournalStartFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4JournalStartFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4JournalStartFtraceEvent& from) {
    Ext4JournalStartFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4JournalStartFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4JournalStartFtraceEvent";
  }
  protected:
  explicit Ext4JournalStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kIpFieldNumber = 2,
    kBlocksFieldNumber = 3,
    kRsvBlocksFieldNumber = 4,
    kNblocksFieldNumber = 5,
    kRevokeCredsFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ip = 2;
  bool has_ip() const;
  void clear_ip() ;
  ::uint64_t ip() const;
  void set_ip(::uint64_t value);

  private:
  ::uint64_t _internal_ip() const;
  void _internal_set_ip(::uint64_t value);

  public:
  // optional int32 blocks = 3;
  bool has_blocks() const;
  void clear_blocks() ;
  ::int32_t blocks() const;
  void set_blocks(::int32_t value);

  private:
  ::int32_t _internal_blocks() const;
  void _internal_set_blocks(::int32_t value);

  public:
  // optional int32 rsv_blocks = 4;
  bool has_rsv_blocks() const;
  void clear_rsv_blocks() ;
  ::int32_t rsv_blocks() const;
  void set_rsv_blocks(::int32_t value);

  private:
  ::int32_t _internal_rsv_blocks() const;
  void _internal_set_rsv_blocks(::int32_t value);

  public:
  // optional int32 nblocks = 5;
  bool has_nblocks() const;
  void clear_nblocks() ;
  ::int32_t nblocks() const;
  void set_nblocks(::int32_t value);

  private:
  ::int32_t _internal_nblocks() const;
  void _internal_set_nblocks(::int32_t value);

  public:
  // optional int32 revoke_creds = 6;
  bool has_revoke_creds() const;
  void clear_revoke_creds() ;
  ::int32_t revoke_creds() const;
  void set_revoke_creds(::int32_t value);

  private:
  ::int32_t _internal_revoke_creds() const;
  void _internal_set_revoke_creds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalStartFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ip_;
    ::int32_t blocks_;
    ::int32_t rsv_blocks_;
    ::int32_t nblocks_;
    ::int32_t revoke_creds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4JournalStartReservedFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalStartReservedFtraceEvent) */ {
 public:
  inline Ext4JournalStartReservedFtraceEvent() : Ext4JournalStartReservedFtraceEvent(nullptr) {}
  ~Ext4JournalStartReservedFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4JournalStartReservedFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4JournalStartReservedFtraceEvent(const Ext4JournalStartReservedFtraceEvent& from);
  Ext4JournalStartReservedFtraceEvent(Ext4JournalStartReservedFtraceEvent&& from) noexcept
    : Ext4JournalStartReservedFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalStartReservedFtraceEvent& operator=(const Ext4JournalStartReservedFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalStartReservedFtraceEvent& operator=(Ext4JournalStartReservedFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4JournalStartReservedFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4JournalStartReservedFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalStartReservedFtraceEvent*>(
               &_Ext4JournalStartReservedFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Ext4JournalStartReservedFtraceEvent& a, Ext4JournalStartReservedFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalStartReservedFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4JournalStartReservedFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4JournalStartReservedFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4JournalStartReservedFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4JournalStartReservedFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4JournalStartReservedFtraceEvent& from) {
    Ext4JournalStartReservedFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4JournalStartReservedFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4JournalStartReservedFtraceEvent";
  }
  protected:
  explicit Ext4JournalStartReservedFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kIpFieldNumber = 2,
    kBlocksFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ip = 2;
  bool has_ip() const;
  void clear_ip() ;
  ::uint64_t ip() const;
  void set_ip(::uint64_t value);

  private:
  ::uint64_t _internal_ip() const;
  void _internal_set_ip(::uint64_t value);

  public:
  // optional int32 blocks = 3;
  bool has_blocks() const;
  void clear_blocks() ;
  ::int32_t blocks() const;
  void set_blocks(::int32_t value);

  private:
  ::int32_t _internal_blocks() const;
  void _internal_set_blocks(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalStartReservedFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ip_;
    ::int32_t blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4JournalledInvalidatepageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent) */ {
 public:
  inline Ext4JournalledInvalidatepageFtraceEvent() : Ext4JournalledInvalidatepageFtraceEvent(nullptr) {}
  ~Ext4JournalledInvalidatepageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4JournalledInvalidatepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4JournalledInvalidatepageFtraceEvent(const Ext4JournalledInvalidatepageFtraceEvent& from);
  Ext4JournalledInvalidatepageFtraceEvent(Ext4JournalledInvalidatepageFtraceEvent&& from) noexcept
    : Ext4JournalledInvalidatepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalledInvalidatepageFtraceEvent& operator=(const Ext4JournalledInvalidatepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalledInvalidatepageFtraceEvent& operator=(Ext4JournalledInvalidatepageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4JournalledInvalidatepageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4JournalledInvalidatepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalledInvalidatepageFtraceEvent*>(
               &_Ext4JournalledInvalidatepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Ext4JournalledInvalidatepageFtraceEvent& a, Ext4JournalledInvalidatepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalledInvalidatepageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4JournalledInvalidatepageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4JournalledInvalidatepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4JournalledInvalidatepageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4JournalledInvalidatepageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4JournalledInvalidatepageFtraceEvent& from) {
    Ext4JournalledInvalidatepageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4JournalledInvalidatepageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent";
  }
  protected:
  explicit Ext4JournalledInvalidatepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional uint64 offset = 4;
  bool has_offset() const;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // optional uint32 length = 5;
  bool has_length() const;
  void clear_length() ;
  ::uint32_t length() const;
  void set_length(::uint32_t value);

  private:
  ::uint32_t _internal_length() const;
  void _internal_set_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
    ::uint64_t offset_;
    ::uint32_t length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4JournalledWriteEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4JournalledWriteEndFtraceEvent) */ {
 public:
  inline Ext4JournalledWriteEndFtraceEvent() : Ext4JournalledWriteEndFtraceEvent(nullptr) {}
  ~Ext4JournalledWriteEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4JournalledWriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4JournalledWriteEndFtraceEvent(const Ext4JournalledWriteEndFtraceEvent& from);
  Ext4JournalledWriteEndFtraceEvent(Ext4JournalledWriteEndFtraceEvent&& from) noexcept
    : Ext4JournalledWriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4JournalledWriteEndFtraceEvent& operator=(const Ext4JournalledWriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4JournalledWriteEndFtraceEvent& operator=(Ext4JournalledWriteEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4JournalledWriteEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4JournalledWriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4JournalledWriteEndFtraceEvent*>(
               &_Ext4JournalledWriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Ext4JournalledWriteEndFtraceEvent& a, Ext4JournalledWriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4JournalledWriteEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4JournalledWriteEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4JournalledWriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4JournalledWriteEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4JournalledWriteEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4JournalledWriteEndFtraceEvent& from) {
    Ext4JournalledWriteEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4JournalledWriteEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4JournalledWriteEndFtraceEvent";
  }
  protected:
  explicit Ext4JournalledWriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied() ;
  ::uint32_t copied() const;
  void set_copied(::uint32_t value);

  private:
  ::uint32_t _internal_copied() const;
  void _internal_set_copied(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4JournalledWriteEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t copied_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4LoadInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4LoadInodeFtraceEvent) */ {
 public:
  inline Ext4LoadInodeFtraceEvent() : Ext4LoadInodeFtraceEvent(nullptr) {}
  ~Ext4LoadInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4LoadInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4LoadInodeFtraceEvent(const Ext4LoadInodeFtraceEvent& from);
  Ext4LoadInodeFtraceEvent(Ext4LoadInodeFtraceEvent&& from) noexcept
    : Ext4LoadInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4LoadInodeFtraceEvent& operator=(const Ext4LoadInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4LoadInodeFtraceEvent& operator=(Ext4LoadInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4LoadInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4LoadInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4LoadInodeFtraceEvent*>(
               &_Ext4LoadInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Ext4LoadInodeFtraceEvent& a, Ext4LoadInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4LoadInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4LoadInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4LoadInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4LoadInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4LoadInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4LoadInodeFtraceEvent& from) {
    Ext4LoadInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4LoadInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4LoadInodeFtraceEvent";
  }
  protected:
  explicit Ext4LoadInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4LoadInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4LoadInodeBitmapFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent) */ {
 public:
  inline Ext4LoadInodeBitmapFtraceEvent() : Ext4LoadInodeBitmapFtraceEvent(nullptr) {}
  ~Ext4LoadInodeBitmapFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4LoadInodeBitmapFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4LoadInodeBitmapFtraceEvent(const Ext4LoadInodeBitmapFtraceEvent& from);
  Ext4LoadInodeBitmapFtraceEvent(Ext4LoadInodeBitmapFtraceEvent&& from) noexcept
    : Ext4LoadInodeBitmapFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4LoadInodeBitmapFtraceEvent& operator=(const Ext4LoadInodeBitmapFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4LoadInodeBitmapFtraceEvent& operator=(Ext4LoadInodeBitmapFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4LoadInodeBitmapFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4LoadInodeBitmapFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4LoadInodeBitmapFtraceEvent*>(
               &_Ext4LoadInodeBitmapFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Ext4LoadInodeBitmapFtraceEvent& a, Ext4LoadInodeBitmapFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4LoadInodeBitmapFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4LoadInodeBitmapFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4LoadInodeBitmapFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4LoadInodeBitmapFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4LoadInodeBitmapFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4LoadInodeBitmapFtraceEvent& from) {
    Ext4LoadInodeBitmapFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4LoadInodeBitmapFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4LoadInodeBitmapFtraceEvent";
  }
  protected:
  explicit Ext4LoadInodeBitmapFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint32_t group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MarkInodeDirtyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent) */ {
 public:
  inline Ext4MarkInodeDirtyFtraceEvent() : Ext4MarkInodeDirtyFtraceEvent(nullptr) {}
  ~Ext4MarkInodeDirtyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MarkInodeDirtyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MarkInodeDirtyFtraceEvent(const Ext4MarkInodeDirtyFtraceEvent& from);
  Ext4MarkInodeDirtyFtraceEvent(Ext4MarkInodeDirtyFtraceEvent&& from) noexcept
    : Ext4MarkInodeDirtyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MarkInodeDirtyFtraceEvent& operator=(const Ext4MarkInodeDirtyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MarkInodeDirtyFtraceEvent& operator=(Ext4MarkInodeDirtyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MarkInodeDirtyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MarkInodeDirtyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MarkInodeDirtyFtraceEvent*>(
               &_Ext4MarkInodeDirtyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(Ext4MarkInodeDirtyFtraceEvent& a, Ext4MarkInodeDirtyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MarkInodeDirtyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MarkInodeDirtyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MarkInodeDirtyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MarkInodeDirtyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MarkInodeDirtyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MarkInodeDirtyFtraceEvent& from) {
    Ext4MarkInodeDirtyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MarkInodeDirtyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MarkInodeDirtyFtraceEvent";
  }
  protected:
  explicit Ext4MarkInodeDirtyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIpFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 ip = 3;
  bool has_ip() const;
  void clear_ip() ;
  ::uint64_t ip() const;
  void set_ip(::uint64_t value);

  private:
  ::uint64_t _internal_ip() const;
  void _internal_set_ip(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t ip_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbBitmapLoadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbBitmapLoadFtraceEvent) */ {
 public:
  inline Ext4MbBitmapLoadFtraceEvent() : Ext4MbBitmapLoadFtraceEvent(nullptr) {}
  ~Ext4MbBitmapLoadFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbBitmapLoadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbBitmapLoadFtraceEvent(const Ext4MbBitmapLoadFtraceEvent& from);
  Ext4MbBitmapLoadFtraceEvent(Ext4MbBitmapLoadFtraceEvent&& from) noexcept
    : Ext4MbBitmapLoadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbBitmapLoadFtraceEvent& operator=(const Ext4MbBitmapLoadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbBitmapLoadFtraceEvent& operator=(Ext4MbBitmapLoadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbBitmapLoadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbBitmapLoadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbBitmapLoadFtraceEvent*>(
               &_Ext4MbBitmapLoadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Ext4MbBitmapLoadFtraceEvent& a, Ext4MbBitmapLoadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbBitmapLoadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbBitmapLoadFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbBitmapLoadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbBitmapLoadFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbBitmapLoadFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbBitmapLoadFtraceEvent& from) {
    Ext4MbBitmapLoadFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbBitmapLoadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbBitmapLoadFtraceEvent";
  }
  protected:
  explicit Ext4MbBitmapLoadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbBitmapLoadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint32_t group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbBuddyBitmapLoadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent) */ {
 public:
  inline Ext4MbBuddyBitmapLoadFtraceEvent() : Ext4MbBuddyBitmapLoadFtraceEvent(nullptr) {}
  ~Ext4MbBuddyBitmapLoadFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbBuddyBitmapLoadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbBuddyBitmapLoadFtraceEvent(const Ext4MbBuddyBitmapLoadFtraceEvent& from);
  Ext4MbBuddyBitmapLoadFtraceEvent(Ext4MbBuddyBitmapLoadFtraceEvent&& from) noexcept
    : Ext4MbBuddyBitmapLoadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbBuddyBitmapLoadFtraceEvent& operator=(const Ext4MbBuddyBitmapLoadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbBuddyBitmapLoadFtraceEvent& operator=(Ext4MbBuddyBitmapLoadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbBuddyBitmapLoadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbBuddyBitmapLoadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbBuddyBitmapLoadFtraceEvent*>(
               &_Ext4MbBuddyBitmapLoadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Ext4MbBuddyBitmapLoadFtraceEvent& a, Ext4MbBuddyBitmapLoadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbBuddyBitmapLoadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbBuddyBitmapLoadFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbBuddyBitmapLoadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbBuddyBitmapLoadFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbBuddyBitmapLoadFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbBuddyBitmapLoadFtraceEvent& from) {
    Ext4MbBuddyBitmapLoadFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbBuddyBitmapLoadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent";
  }
  protected:
  explicit Ext4MbBuddyBitmapLoadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint32_t group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbDiscardPreallocationsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent) */ {
 public:
  inline Ext4MbDiscardPreallocationsFtraceEvent() : Ext4MbDiscardPreallocationsFtraceEvent(nullptr) {}
  ~Ext4MbDiscardPreallocationsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbDiscardPreallocationsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbDiscardPreallocationsFtraceEvent(const Ext4MbDiscardPreallocationsFtraceEvent& from);
  Ext4MbDiscardPreallocationsFtraceEvent(Ext4MbDiscardPreallocationsFtraceEvent&& from) noexcept
    : Ext4MbDiscardPreallocationsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbDiscardPreallocationsFtraceEvent& operator=(const Ext4MbDiscardPreallocationsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbDiscardPreallocationsFtraceEvent& operator=(Ext4MbDiscardPreallocationsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbDiscardPreallocationsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbDiscardPreallocationsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbDiscardPreallocationsFtraceEvent*>(
               &_Ext4MbDiscardPreallocationsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Ext4MbDiscardPreallocationsFtraceEvent& a, Ext4MbDiscardPreallocationsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbDiscardPreallocationsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbDiscardPreallocationsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbDiscardPreallocationsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbDiscardPreallocationsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbDiscardPreallocationsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbDiscardPreallocationsFtraceEvent& from) {
    Ext4MbDiscardPreallocationsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbDiscardPreallocationsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent";
  }
  protected:
  explicit Ext4MbDiscardPreallocationsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNeededFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 needed = 2;
  bool has_needed() const;
  void clear_needed() ;
  ::int32_t needed() const;
  void set_needed(::int32_t value);

  private:
  ::int32_t _internal_needed() const;
  void _internal_set_needed(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t needed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbNewGroupPaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbNewGroupPaFtraceEvent) */ {
 public:
  inline Ext4MbNewGroupPaFtraceEvent() : Ext4MbNewGroupPaFtraceEvent(nullptr) {}
  ~Ext4MbNewGroupPaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbNewGroupPaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbNewGroupPaFtraceEvent(const Ext4MbNewGroupPaFtraceEvent& from);
  Ext4MbNewGroupPaFtraceEvent(Ext4MbNewGroupPaFtraceEvent&& from) noexcept
    : Ext4MbNewGroupPaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbNewGroupPaFtraceEvent& operator=(const Ext4MbNewGroupPaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbNewGroupPaFtraceEvent& operator=(Ext4MbNewGroupPaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbNewGroupPaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbNewGroupPaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbNewGroupPaFtraceEvent*>(
               &_Ext4MbNewGroupPaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Ext4MbNewGroupPaFtraceEvent& a, Ext4MbNewGroupPaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbNewGroupPaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbNewGroupPaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbNewGroupPaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbNewGroupPaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbNewGroupPaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbNewGroupPaFtraceEvent& from) {
    Ext4MbNewGroupPaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbNewGroupPaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbNewGroupPaFtraceEvent";
  }
  protected:
  explicit Ext4MbNewGroupPaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPaPstartFieldNumber = 3,
    kPaLstartFieldNumber = 4,
    kPaLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pa_pstart = 3;
  bool has_pa_pstart() const;
  void clear_pa_pstart() ;
  ::uint64_t pa_pstart() const;
  void set_pa_pstart(::uint64_t value);

  private:
  ::uint64_t _internal_pa_pstart() const;
  void _internal_set_pa_pstart(::uint64_t value);

  public:
  // optional uint64 pa_lstart = 4;
  bool has_pa_lstart() const;
  void clear_pa_lstart() ;
  ::uint64_t pa_lstart() const;
  void set_pa_lstart(::uint64_t value);

  private:
  ::uint64_t _internal_pa_lstart() const;
  void _internal_set_pa_lstart(::uint64_t value);

  public:
  // optional uint32 pa_len = 5;
  bool has_pa_len() const;
  void clear_pa_len() ;
  ::uint32_t pa_len() const;
  void set_pa_len(::uint32_t value);

  private:
  ::uint32_t _internal_pa_len() const;
  void _internal_set_pa_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbNewGroupPaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pa_pstart_;
    ::uint64_t pa_lstart_;
    ::uint32_t pa_len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbNewInodePaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbNewInodePaFtraceEvent) */ {
 public:
  inline Ext4MbNewInodePaFtraceEvent() : Ext4MbNewInodePaFtraceEvent(nullptr) {}
  ~Ext4MbNewInodePaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbNewInodePaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbNewInodePaFtraceEvent(const Ext4MbNewInodePaFtraceEvent& from);
  Ext4MbNewInodePaFtraceEvent(Ext4MbNewInodePaFtraceEvent&& from) noexcept
    : Ext4MbNewInodePaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbNewInodePaFtraceEvent& operator=(const Ext4MbNewInodePaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbNewInodePaFtraceEvent& operator=(Ext4MbNewInodePaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbNewInodePaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbNewInodePaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbNewInodePaFtraceEvent*>(
               &_Ext4MbNewInodePaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Ext4MbNewInodePaFtraceEvent& a, Ext4MbNewInodePaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbNewInodePaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbNewInodePaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbNewInodePaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbNewInodePaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbNewInodePaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbNewInodePaFtraceEvent& from) {
    Ext4MbNewInodePaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbNewInodePaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbNewInodePaFtraceEvent";
  }
  protected:
  explicit Ext4MbNewInodePaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPaPstartFieldNumber = 3,
    kPaLstartFieldNumber = 4,
    kPaLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pa_pstart = 3;
  bool has_pa_pstart() const;
  void clear_pa_pstart() ;
  ::uint64_t pa_pstart() const;
  void set_pa_pstart(::uint64_t value);

  private:
  ::uint64_t _internal_pa_pstart() const;
  void _internal_set_pa_pstart(::uint64_t value);

  public:
  // optional uint64 pa_lstart = 4;
  bool has_pa_lstart() const;
  void clear_pa_lstart() ;
  ::uint64_t pa_lstart() const;
  void set_pa_lstart(::uint64_t value);

  private:
  ::uint64_t _internal_pa_lstart() const;
  void _internal_set_pa_lstart(::uint64_t value);

  public:
  // optional uint32 pa_len = 5;
  bool has_pa_len() const;
  void clear_pa_len() ;
  ::uint32_t pa_len() const;
  void set_pa_len(::uint32_t value);

  private:
  ::uint32_t _internal_pa_len() const;
  void _internal_set_pa_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbNewInodePaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pa_pstart_;
    ::uint64_t pa_lstart_;
    ::uint32_t pa_len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbReleaseGroupPaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent) */ {
 public:
  inline Ext4MbReleaseGroupPaFtraceEvent() : Ext4MbReleaseGroupPaFtraceEvent(nullptr) {}
  ~Ext4MbReleaseGroupPaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbReleaseGroupPaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbReleaseGroupPaFtraceEvent(const Ext4MbReleaseGroupPaFtraceEvent& from);
  Ext4MbReleaseGroupPaFtraceEvent(Ext4MbReleaseGroupPaFtraceEvent&& from) noexcept
    : Ext4MbReleaseGroupPaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbReleaseGroupPaFtraceEvent& operator=(const Ext4MbReleaseGroupPaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbReleaseGroupPaFtraceEvent& operator=(Ext4MbReleaseGroupPaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbReleaseGroupPaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbReleaseGroupPaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbReleaseGroupPaFtraceEvent*>(
               &_Ext4MbReleaseGroupPaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Ext4MbReleaseGroupPaFtraceEvent& a, Ext4MbReleaseGroupPaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbReleaseGroupPaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbReleaseGroupPaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbReleaseGroupPaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbReleaseGroupPaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbReleaseGroupPaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbReleaseGroupPaFtraceEvent& from) {
    Ext4MbReleaseGroupPaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbReleaseGroupPaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent";
  }
  protected:
  explicit Ext4MbReleaseGroupPaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kPaPstartFieldNumber = 2,
    kPaLenFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 pa_pstart = 2;
  bool has_pa_pstart() const;
  void clear_pa_pstart() ;
  ::uint64_t pa_pstart() const;
  void set_pa_pstart(::uint64_t value);

  private:
  ::uint64_t _internal_pa_pstart() const;
  void _internal_set_pa_pstart(::uint64_t value);

  public:
  // optional uint32 pa_len = 3;
  bool has_pa_len() const;
  void clear_pa_len() ;
  ::uint32_t pa_len() const;
  void set_pa_len(::uint32_t value);

  private:
  ::uint32_t _internal_pa_len() const;
  void _internal_set_pa_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t pa_pstart_;
    ::uint32_t pa_len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MbReleaseInodePaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent) */ {
 public:
  inline Ext4MbReleaseInodePaFtraceEvent() : Ext4MbReleaseInodePaFtraceEvent(nullptr) {}
  ~Ext4MbReleaseInodePaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MbReleaseInodePaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MbReleaseInodePaFtraceEvent(const Ext4MbReleaseInodePaFtraceEvent& from);
  Ext4MbReleaseInodePaFtraceEvent(Ext4MbReleaseInodePaFtraceEvent&& from) noexcept
    : Ext4MbReleaseInodePaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MbReleaseInodePaFtraceEvent& operator=(const Ext4MbReleaseInodePaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MbReleaseInodePaFtraceEvent& operator=(Ext4MbReleaseInodePaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MbReleaseInodePaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MbReleaseInodePaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MbReleaseInodePaFtraceEvent*>(
               &_Ext4MbReleaseInodePaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Ext4MbReleaseInodePaFtraceEvent& a, Ext4MbReleaseInodePaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MbReleaseInodePaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MbReleaseInodePaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MbReleaseInodePaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MbReleaseInodePaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MbReleaseInodePaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MbReleaseInodePaFtraceEvent& from) {
    Ext4MbReleaseInodePaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MbReleaseInodePaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MbReleaseInodePaFtraceEvent";
  }
  protected:
  explicit Ext4MbReleaseInodePaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlockFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 block = 3;
  bool has_block() const;
  void clear_block() ;
  ::uint64_t block() const;
  void set_block(::uint64_t value);

  private:
  ::uint64_t _internal_block() const;
  void _internal_set_block(::uint64_t value);

  public:
  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count() ;
  ::uint32_t count() const;
  void set_count(::uint32_t value);

  private:
  ::uint32_t _internal_count() const;
  void _internal_set_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t block_;
    ::uint32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MballocAllocFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocAllocFtraceEvent) */ {
 public:
  inline Ext4MballocAllocFtraceEvent() : Ext4MballocAllocFtraceEvent(nullptr) {}
  ~Ext4MballocAllocFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MballocAllocFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MballocAllocFtraceEvent(const Ext4MballocAllocFtraceEvent& from);
  Ext4MballocAllocFtraceEvent(Ext4MballocAllocFtraceEvent&& from) noexcept
    : Ext4MballocAllocFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocAllocFtraceEvent& operator=(const Ext4MballocAllocFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocAllocFtraceEvent& operator=(Ext4MballocAllocFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MballocAllocFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MballocAllocFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocAllocFtraceEvent*>(
               &_Ext4MballocAllocFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Ext4MballocAllocFtraceEvent& a, Ext4MballocAllocFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocAllocFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MballocAllocFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MballocAllocFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MballocAllocFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MballocAllocFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MballocAllocFtraceEvent& from) {
    Ext4MballocAllocFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MballocAllocFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MballocAllocFtraceEvent";
  }
  protected:
  explicit Ext4MballocAllocFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOrigLogicalFieldNumber = 3,
    kOrigStartFieldNumber = 4,
    kOrigGroupFieldNumber = 5,
    kOrigLenFieldNumber = 6,
    kGoalLogicalFieldNumber = 7,
    kGoalStartFieldNumber = 8,
    kGoalGroupFieldNumber = 9,
    kGoalLenFieldNumber = 10,
    kResultLogicalFieldNumber = 11,
    kResultStartFieldNumber = 12,
    kResultGroupFieldNumber = 13,
    kResultLenFieldNumber = 14,
    kFoundFieldNumber = 15,
    kGroupsFieldNumber = 16,
    kBuddyFieldNumber = 17,
    kFlagsFieldNumber = 18,
    kTailFieldNumber = 19,
    kCrFieldNumber = 20,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 orig_logical = 3;
  bool has_orig_logical() const;
  void clear_orig_logical() ;
  ::uint32_t orig_logical() const;
  void set_orig_logical(::uint32_t value);

  private:
  ::uint32_t _internal_orig_logical() const;
  void _internal_set_orig_logical(::uint32_t value);

  public:
  // optional int32 orig_start = 4;
  bool has_orig_start() const;
  void clear_orig_start() ;
  ::int32_t orig_start() const;
  void set_orig_start(::int32_t value);

  private:
  ::int32_t _internal_orig_start() const;
  void _internal_set_orig_start(::int32_t value);

  public:
  // optional uint32 orig_group = 5;
  bool has_orig_group() const;
  void clear_orig_group() ;
  ::uint32_t orig_group() const;
  void set_orig_group(::uint32_t value);

  private:
  ::uint32_t _internal_orig_group() const;
  void _internal_set_orig_group(::uint32_t value);

  public:
  // optional int32 orig_len = 6;
  bool has_orig_len() const;
  void clear_orig_len() ;
  ::int32_t orig_len() const;
  void set_orig_len(::int32_t value);

  private:
  ::int32_t _internal_orig_len() const;
  void _internal_set_orig_len(::int32_t value);

  public:
  // optional uint32 goal_logical = 7;
  bool has_goal_logical() const;
  void clear_goal_logical() ;
  ::uint32_t goal_logical() const;
  void set_goal_logical(::uint32_t value);

  private:
  ::uint32_t _internal_goal_logical() const;
  void _internal_set_goal_logical(::uint32_t value);

  public:
  // optional int32 goal_start = 8;
  bool has_goal_start() const;
  void clear_goal_start() ;
  ::int32_t goal_start() const;
  void set_goal_start(::int32_t value);

  private:
  ::int32_t _internal_goal_start() const;
  void _internal_set_goal_start(::int32_t value);

  public:
  // optional uint32 goal_group = 9;
  bool has_goal_group() const;
  void clear_goal_group() ;
  ::uint32_t goal_group() const;
  void set_goal_group(::uint32_t value);

  private:
  ::uint32_t _internal_goal_group() const;
  void _internal_set_goal_group(::uint32_t value);

  public:
  // optional int32 goal_len = 10;
  bool has_goal_len() const;
  void clear_goal_len() ;
  ::int32_t goal_len() const;
  void set_goal_len(::int32_t value);

  private:
  ::int32_t _internal_goal_len() const;
  void _internal_set_goal_len(::int32_t value);

  public:
  // optional uint32 result_logical = 11;
  bool has_result_logical() const;
  void clear_result_logical() ;
  ::uint32_t result_logical() const;
  void set_result_logical(::uint32_t value);

  private:
  ::uint32_t _internal_result_logical() const;
  void _internal_set_result_logical(::uint32_t value);

  public:
  // optional int32 result_start = 12;
  bool has_result_start() const;
  void clear_result_start() ;
  ::int32_t result_start() const;
  void set_result_start(::int32_t value);

  private:
  ::int32_t _internal_result_start() const;
  void _internal_set_result_start(::int32_t value);

  public:
  // optional uint32 result_group = 13;
  bool has_result_group() const;
  void clear_result_group() ;
  ::uint32_t result_group() const;
  void set_result_group(::uint32_t value);

  private:
  ::uint32_t _internal_result_group() const;
  void _internal_set_result_group(::uint32_t value);

  public:
  // optional int32 result_len = 14;
  bool has_result_len() const;
  void clear_result_len() ;
  ::int32_t result_len() const;
  void set_result_len(::int32_t value);

  private:
  ::int32_t _internal_result_len() const;
  void _internal_set_result_len(::int32_t value);

  public:
  // optional uint32 found = 15;
  bool has_found() const;
  void clear_found() ;
  ::uint32_t found() const;
  void set_found(::uint32_t value);

  private:
  ::uint32_t _internal_found() const;
  void _internal_set_found(::uint32_t value);

  public:
  // optional uint32 groups = 16;
  bool has_groups() const;
  void clear_groups() ;
  ::uint32_t groups() const;
  void set_groups(::uint32_t value);

  private:
  ::uint32_t _internal_groups() const;
  void _internal_set_groups(::uint32_t value);

  public:
  // optional uint32 buddy = 17;
  bool has_buddy() const;
  void clear_buddy() ;
  ::uint32_t buddy() const;
  void set_buddy(::uint32_t value);

  private:
  ::uint32_t _internal_buddy() const;
  void _internal_set_buddy(::uint32_t value);

  public:
  // optional uint32 flags = 18;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 tail = 19;
  bool has_tail() const;
  void clear_tail() ;
  ::uint32_t tail() const;
  void set_tail(::uint32_t value);

  private:
  ::uint32_t _internal_tail() const;
  void _internal_set_tail(::uint32_t value);

  public:
  // optional uint32 cr = 20;
  bool has_cr() const;
  void clear_cr() ;
  ::uint32_t cr() const;
  void set_cr(::uint32_t value);

  private:
  ::uint32_t _internal_cr() const;
  void _internal_set_cr(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocAllocFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t orig_logical_;
    ::int32_t orig_start_;
    ::uint32_t orig_group_;
    ::int32_t orig_len_;
    ::uint32_t goal_logical_;
    ::int32_t goal_start_;
    ::uint32_t goal_group_;
    ::int32_t goal_len_;
    ::uint32_t result_logical_;
    ::int32_t result_start_;
    ::uint32_t result_group_;
    ::int32_t result_len_;
    ::uint32_t found_;
    ::uint32_t groups_;
    ::uint32_t buddy_;
    ::uint32_t flags_;
    ::uint32_t tail_;
    ::uint32_t cr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MballocDiscardFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocDiscardFtraceEvent) */ {
 public:
  inline Ext4MballocDiscardFtraceEvent() : Ext4MballocDiscardFtraceEvent(nullptr) {}
  ~Ext4MballocDiscardFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MballocDiscardFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MballocDiscardFtraceEvent(const Ext4MballocDiscardFtraceEvent& from);
  Ext4MballocDiscardFtraceEvent(Ext4MballocDiscardFtraceEvent&& from) noexcept
    : Ext4MballocDiscardFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocDiscardFtraceEvent& operator=(const Ext4MballocDiscardFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocDiscardFtraceEvent& operator=(Ext4MballocDiscardFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MballocDiscardFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MballocDiscardFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocDiscardFtraceEvent*>(
               &_Ext4MballocDiscardFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(Ext4MballocDiscardFtraceEvent& a, Ext4MballocDiscardFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocDiscardFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MballocDiscardFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MballocDiscardFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MballocDiscardFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MballocDiscardFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MballocDiscardFtraceEvent& from) {
    Ext4MballocDiscardFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MballocDiscardFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MballocDiscardFtraceEvent";
  }
  protected:
  explicit Ext4MballocDiscardFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kResultStartFieldNumber = 3,
    kResultGroupFieldNumber = 4,
    kResultLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 result_start = 3;
  bool has_result_start() const;
  void clear_result_start() ;
  ::int32_t result_start() const;
  void set_result_start(::int32_t value);

  private:
  ::int32_t _internal_result_start() const;
  void _internal_set_result_start(::int32_t value);

  public:
  // optional uint32 result_group = 4;
  bool has_result_group() const;
  void clear_result_group() ;
  ::uint32_t result_group() const;
  void set_result_group(::uint32_t value);

  private:
  ::uint32_t _internal_result_group() const;
  void _internal_set_result_group(::uint32_t value);

  public:
  // optional int32 result_len = 5;
  bool has_result_len() const;
  void clear_result_len() ;
  ::int32_t result_len() const;
  void set_result_len(::int32_t value);

  private:
  ::int32_t _internal_result_len() const;
  void _internal_set_result_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocDiscardFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t result_start_;
    ::uint32_t result_group_;
    ::int32_t result_len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MballocFreeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocFreeFtraceEvent) */ {
 public:
  inline Ext4MballocFreeFtraceEvent() : Ext4MballocFreeFtraceEvent(nullptr) {}
  ~Ext4MballocFreeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MballocFreeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MballocFreeFtraceEvent(const Ext4MballocFreeFtraceEvent& from);
  Ext4MballocFreeFtraceEvent(Ext4MballocFreeFtraceEvent&& from) noexcept
    : Ext4MballocFreeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocFreeFtraceEvent& operator=(const Ext4MballocFreeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocFreeFtraceEvent& operator=(Ext4MballocFreeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MballocFreeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MballocFreeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocFreeFtraceEvent*>(
               &_Ext4MballocFreeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Ext4MballocFreeFtraceEvent& a, Ext4MballocFreeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocFreeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MballocFreeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MballocFreeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MballocFreeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MballocFreeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MballocFreeFtraceEvent& from) {
    Ext4MballocFreeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MballocFreeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MballocFreeFtraceEvent";
  }
  protected:
  explicit Ext4MballocFreeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kResultStartFieldNumber = 3,
    kResultGroupFieldNumber = 4,
    kResultLenFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 result_start = 3;
  bool has_result_start() const;
  void clear_result_start() ;
  ::int32_t result_start() const;
  void set_result_start(::int32_t value);

  private:
  ::int32_t _internal_result_start() const;
  void _internal_set_result_start(::int32_t value);

  public:
  // optional uint32 result_group = 4;
  bool has_result_group() const;
  void clear_result_group() ;
  ::uint32_t result_group() const;
  void set_result_group(::uint32_t value);

  private:
  ::uint32_t _internal_result_group() const;
  void _internal_set_result_group(::uint32_t value);

  public:
  // optional int32 result_len = 5;
  bool has_result_len() const;
  void clear_result_len() ;
  ::int32_t result_len() const;
  void set_result_len(::int32_t value);

  private:
  ::int32_t _internal_result_len() const;
  void _internal_set_result_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocFreeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t result_start_;
    ::uint32_t result_group_;
    ::int32_t result_len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4MballocPreallocFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4MballocPreallocFtraceEvent) */ {
 public:
  inline Ext4MballocPreallocFtraceEvent() : Ext4MballocPreallocFtraceEvent(nullptr) {}
  ~Ext4MballocPreallocFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4MballocPreallocFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4MballocPreallocFtraceEvent(const Ext4MballocPreallocFtraceEvent& from);
  Ext4MballocPreallocFtraceEvent(Ext4MballocPreallocFtraceEvent&& from) noexcept
    : Ext4MballocPreallocFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4MballocPreallocFtraceEvent& operator=(const Ext4MballocPreallocFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4MballocPreallocFtraceEvent& operator=(Ext4MballocPreallocFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4MballocPreallocFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4MballocPreallocFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4MballocPreallocFtraceEvent*>(
               &_Ext4MballocPreallocFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Ext4MballocPreallocFtraceEvent& a, Ext4MballocPreallocFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4MballocPreallocFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4MballocPreallocFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4MballocPreallocFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4MballocPreallocFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4MballocPreallocFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4MballocPreallocFtraceEvent& from) {
    Ext4MballocPreallocFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4MballocPreallocFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4MballocPreallocFtraceEvent";
  }
  protected:
  explicit Ext4MballocPreallocFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOrigLogicalFieldNumber = 3,
    kOrigStartFieldNumber = 4,
    kOrigGroupFieldNumber = 5,
    kOrigLenFieldNumber = 6,
    kResultLogicalFieldNumber = 7,
    kResultStartFieldNumber = 8,
    kResultGroupFieldNumber = 9,
    kResultLenFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 orig_logical = 3;
  bool has_orig_logical() const;
  void clear_orig_logical() ;
  ::uint32_t orig_logical() const;
  void set_orig_logical(::uint32_t value);

  private:
  ::uint32_t _internal_orig_logical() const;
  void _internal_set_orig_logical(::uint32_t value);

  public:
  // optional int32 orig_start = 4;
  bool has_orig_start() const;
  void clear_orig_start() ;
  ::int32_t orig_start() const;
  void set_orig_start(::int32_t value);

  private:
  ::int32_t _internal_orig_start() const;
  void _internal_set_orig_start(::int32_t value);

  public:
  // optional uint32 orig_group = 5;
  bool has_orig_group() const;
  void clear_orig_group() ;
  ::uint32_t orig_group() const;
  void set_orig_group(::uint32_t value);

  private:
  ::uint32_t _internal_orig_group() const;
  void _internal_set_orig_group(::uint32_t value);

  public:
  // optional int32 orig_len = 6;
  bool has_orig_len() const;
  void clear_orig_len() ;
  ::int32_t orig_len() const;
  void set_orig_len(::int32_t value);

  private:
  ::int32_t _internal_orig_len() const;
  void _internal_set_orig_len(::int32_t value);

  public:
  // optional uint32 result_logical = 7;
  bool has_result_logical() const;
  void clear_result_logical() ;
  ::uint32_t result_logical() const;
  void set_result_logical(::uint32_t value);

  private:
  ::uint32_t _internal_result_logical() const;
  void _internal_set_result_logical(::uint32_t value);

  public:
  // optional int32 result_start = 8;
  bool has_result_start() const;
  void clear_result_start() ;
  ::int32_t result_start() const;
  void set_result_start(::int32_t value);

  private:
  ::int32_t _internal_result_start() const;
  void _internal_set_result_start(::int32_t value);

  public:
  // optional uint32 result_group = 9;
  bool has_result_group() const;
  void clear_result_group() ;
  ::uint32_t result_group() const;
  void set_result_group(::uint32_t value);

  private:
  ::uint32_t _internal_result_group() const;
  void _internal_set_result_group(::uint32_t value);

  public:
  // optional int32 result_len = 10;
  bool has_result_len() const;
  void clear_result_len() ;
  ::int32_t result_len() const;
  void set_result_len(::int32_t value);

  private:
  ::int32_t _internal_result_len() const;
  void _internal_set_result_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4MballocPreallocFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t orig_logical_;
    ::int32_t orig_start_;
    ::uint32_t orig_group_;
    ::int32_t orig_len_;
    ::uint32_t result_logical_;
    ::int32_t result_start_;
    ::uint32_t result_group_;
    ::int32_t result_len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4OtherInodeUpdateTimeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent) */ {
 public:
  inline Ext4OtherInodeUpdateTimeFtraceEvent() : Ext4OtherInodeUpdateTimeFtraceEvent(nullptr) {}
  ~Ext4OtherInodeUpdateTimeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4OtherInodeUpdateTimeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4OtherInodeUpdateTimeFtraceEvent(const Ext4OtherInodeUpdateTimeFtraceEvent& from);
  Ext4OtherInodeUpdateTimeFtraceEvent(Ext4OtherInodeUpdateTimeFtraceEvent&& from) noexcept
    : Ext4OtherInodeUpdateTimeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4OtherInodeUpdateTimeFtraceEvent& operator=(const Ext4OtherInodeUpdateTimeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4OtherInodeUpdateTimeFtraceEvent& operator=(Ext4OtherInodeUpdateTimeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4OtherInodeUpdateTimeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4OtherInodeUpdateTimeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4OtherInodeUpdateTimeFtraceEvent*>(
               &_Ext4OtherInodeUpdateTimeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Ext4OtherInodeUpdateTimeFtraceEvent& a, Ext4OtherInodeUpdateTimeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4OtherInodeUpdateTimeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4OtherInodeUpdateTimeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4OtherInodeUpdateTimeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4OtherInodeUpdateTimeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4OtherInodeUpdateTimeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4OtherInodeUpdateTimeFtraceEvent& from) {
    Ext4OtherInodeUpdateTimeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4OtherInodeUpdateTimeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent";
  }
  protected:
  explicit Ext4OtherInodeUpdateTimeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOrigInoFieldNumber = 3,
    kUidFieldNumber = 4,
    kGidFieldNumber = 5,
    kModeFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 orig_ino = 3;
  bool has_orig_ino() const;
  void clear_orig_ino() ;
  ::uint64_t orig_ino() const;
  void set_orig_ino(::uint64_t value);

  private:
  ::uint64_t _internal_orig_ino() const;
  void _internal_set_orig_ino(::uint64_t value);

  public:
  // optional uint32 uid = 4;
  bool has_uid() const;
  void clear_uid() ;
  ::uint32_t uid() const;
  void set_uid(::uint32_t value);

  private:
  ::uint32_t _internal_uid() const;
  void _internal_set_uid(::uint32_t value);

  public:
  // optional uint32 gid = 5;
  bool has_gid() const;
  void clear_gid() ;
  ::uint32_t gid() const;
  void set_gid(::uint32_t value);

  private:
  ::uint32_t _internal_gid() const;
  void _internal_set_gid(::uint32_t value);

  public:
  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t orig_ino_;
    ::uint32_t uid_;
    ::uint32_t gid_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4PunchHoleFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4PunchHoleFtraceEvent) */ {
 public:
  inline Ext4PunchHoleFtraceEvent() : Ext4PunchHoleFtraceEvent(nullptr) {}
  ~Ext4PunchHoleFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4PunchHoleFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4PunchHoleFtraceEvent(const Ext4PunchHoleFtraceEvent& from);
  Ext4PunchHoleFtraceEvent(Ext4PunchHoleFtraceEvent&& from) noexcept
    : Ext4PunchHoleFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4PunchHoleFtraceEvent& operator=(const Ext4PunchHoleFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4PunchHoleFtraceEvent& operator=(Ext4PunchHoleFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4PunchHoleFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4PunchHoleFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4PunchHoleFtraceEvent*>(
               &_Ext4PunchHoleFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Ext4PunchHoleFtraceEvent& a, Ext4PunchHoleFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4PunchHoleFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4PunchHoleFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4PunchHoleFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4PunchHoleFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4PunchHoleFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4PunchHoleFtraceEvent& from) {
    Ext4PunchHoleFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4PunchHoleFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4PunchHoleFtraceEvent";
  }
  protected:
  explicit Ext4PunchHoleFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode() ;
  ::int32_t mode() const;
  void set_mode(::int32_t value);

  private:
  ::int32_t _internal_mode() const;
  void _internal_set_mode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4PunchHoleFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int64_t len_;
    ::int32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ReadBlockBitmapLoadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent) */ {
 public:
  inline Ext4ReadBlockBitmapLoadFtraceEvent() : Ext4ReadBlockBitmapLoadFtraceEvent(nullptr) {}
  ~Ext4ReadBlockBitmapLoadFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ReadBlockBitmapLoadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ReadBlockBitmapLoadFtraceEvent(const Ext4ReadBlockBitmapLoadFtraceEvent& from);
  Ext4ReadBlockBitmapLoadFtraceEvent(Ext4ReadBlockBitmapLoadFtraceEvent&& from) noexcept
    : Ext4ReadBlockBitmapLoadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ReadBlockBitmapLoadFtraceEvent& operator=(const Ext4ReadBlockBitmapLoadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ReadBlockBitmapLoadFtraceEvent& operator=(Ext4ReadBlockBitmapLoadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ReadBlockBitmapLoadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ReadBlockBitmapLoadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ReadBlockBitmapLoadFtraceEvent*>(
               &_Ext4ReadBlockBitmapLoadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Ext4ReadBlockBitmapLoadFtraceEvent& a, Ext4ReadBlockBitmapLoadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ReadBlockBitmapLoadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ReadBlockBitmapLoadFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ReadBlockBitmapLoadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ReadBlockBitmapLoadFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ReadBlockBitmapLoadFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ReadBlockBitmapLoadFtraceEvent& from) {
    Ext4ReadBlockBitmapLoadFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ReadBlockBitmapLoadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent";
  }
  protected:
  explicit Ext4ReadBlockBitmapLoadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kGroupFieldNumber = 2,
    kPrefetchFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 group = 2;
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // optional uint32 prefetch = 3;
  bool has_prefetch() const;
  void clear_prefetch() ;
  ::uint32_t prefetch() const;
  void set_prefetch(::uint32_t value);

  private:
  ::uint32_t _internal_prefetch() const;
  void _internal_set_prefetch(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint32_t group_;
    ::uint32_t prefetch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ReadpageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ReadpageFtraceEvent) */ {
 public:
  inline Ext4ReadpageFtraceEvent() : Ext4ReadpageFtraceEvent(nullptr) {}
  ~Ext4ReadpageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ReadpageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ReadpageFtraceEvent(const Ext4ReadpageFtraceEvent& from);
  Ext4ReadpageFtraceEvent(Ext4ReadpageFtraceEvent&& from) noexcept
    : Ext4ReadpageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ReadpageFtraceEvent& operator=(const Ext4ReadpageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ReadpageFtraceEvent& operator=(Ext4ReadpageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ReadpageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ReadpageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ReadpageFtraceEvent*>(
               &_Ext4ReadpageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Ext4ReadpageFtraceEvent& a, Ext4ReadpageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ReadpageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ReadpageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ReadpageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ReadpageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ReadpageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ReadpageFtraceEvent& from) {
    Ext4ReadpageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ReadpageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ReadpageFtraceEvent";
  }
  protected:
  explicit Ext4ReadpageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ReadpageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ReleasepageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ReleasepageFtraceEvent) */ {
 public:
  inline Ext4ReleasepageFtraceEvent() : Ext4ReleasepageFtraceEvent(nullptr) {}
  ~Ext4ReleasepageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ReleasepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ReleasepageFtraceEvent(const Ext4ReleasepageFtraceEvent& from);
  Ext4ReleasepageFtraceEvent(Ext4ReleasepageFtraceEvent&& from) noexcept
    : Ext4ReleasepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ReleasepageFtraceEvent& operator=(const Ext4ReleasepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ReleasepageFtraceEvent& operator=(Ext4ReleasepageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ReleasepageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ReleasepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ReleasepageFtraceEvent*>(
               &_Ext4ReleasepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Ext4ReleasepageFtraceEvent& a, Ext4ReleasepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ReleasepageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ReleasepageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ReleasepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ReleasepageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ReleasepageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ReleasepageFtraceEvent& from) {
    Ext4ReleasepageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ReleasepageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ReleasepageFtraceEvent";
  }
  protected:
  explicit Ext4ReleasepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ReleasepageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4RemoveBlocksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4RemoveBlocksFtraceEvent) */ {
 public:
  inline Ext4RemoveBlocksFtraceEvent() : Ext4RemoveBlocksFtraceEvent(nullptr) {}
  ~Ext4RemoveBlocksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4RemoveBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4RemoveBlocksFtraceEvent(const Ext4RemoveBlocksFtraceEvent& from);
  Ext4RemoveBlocksFtraceEvent(Ext4RemoveBlocksFtraceEvent&& from) noexcept
    : Ext4RemoveBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4RemoveBlocksFtraceEvent& operator=(const Ext4RemoveBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4RemoveBlocksFtraceEvent& operator=(Ext4RemoveBlocksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4RemoveBlocksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4RemoveBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4RemoveBlocksFtraceEvent*>(
               &_Ext4RemoveBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(Ext4RemoveBlocksFtraceEvent& a, Ext4RemoveBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4RemoveBlocksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4RemoveBlocksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4RemoveBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4RemoveBlocksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4RemoveBlocksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4RemoveBlocksFtraceEvent& from) {
    Ext4RemoveBlocksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4RemoveBlocksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4RemoveBlocksFtraceEvent";
  }
  protected:
  explicit Ext4RemoveBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kPartialFieldNumber = 5,
    kEePblkFieldNumber = 6,
    kEeLblkFieldNumber = 7,
    kEeLenFieldNumber = 8,
    kPcPcluFieldNumber = 10,
    kPcLblkFieldNumber = 9,
    kPcStateFieldNumber = 11,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 from = 3;
  bool has_from() const;
  void clear_from() ;
  ::uint32_t from() const;
  void set_from(::uint32_t value);

  private:
  ::uint32_t _internal_from() const;
  void _internal_set_from(::uint32_t value);

  public:
  // optional uint32 to = 4;
  bool has_to() const;
  void clear_to() ;
  ::uint32_t to() const;
  void set_to(::uint32_t value);

  private:
  ::uint32_t _internal_to() const;
  void _internal_set_to(::uint32_t value);

  public:
  // optional int64 partial = 5;
  bool has_partial() const;
  void clear_partial() ;
  ::int64_t partial() const;
  void set_partial(::int64_t value);

  private:
  ::int64_t _internal_partial() const;
  void _internal_set_partial(::int64_t value);

  public:
  // optional uint64 ee_pblk = 6;
  bool has_ee_pblk() const;
  void clear_ee_pblk() ;
  ::uint64_t ee_pblk() const;
  void set_ee_pblk(::uint64_t value);

  private:
  ::uint64_t _internal_ee_pblk() const;
  void _internal_set_ee_pblk(::uint64_t value);

  public:
  // optional uint32 ee_lblk = 7;
  bool has_ee_lblk() const;
  void clear_ee_lblk() ;
  ::uint32_t ee_lblk() const;
  void set_ee_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_ee_lblk() const;
  void _internal_set_ee_lblk(::uint32_t value);

  public:
  // optional uint32 ee_len = 8;
  bool has_ee_len() const;
  void clear_ee_len() ;
  ::uint32_t ee_len() const;
  void set_ee_len(::uint32_t value);

  private:
  ::uint32_t _internal_ee_len() const;
  void _internal_set_ee_len(::uint32_t value);

  public:
  // optional uint64 pc_pclu = 10;
  bool has_pc_pclu() const;
  void clear_pc_pclu() ;
  ::uint64_t pc_pclu() const;
  void set_pc_pclu(::uint64_t value);

  private:
  ::uint64_t _internal_pc_pclu() const;
  void _internal_set_pc_pclu(::uint64_t value);

  public:
  // optional uint32 pc_lblk = 9;
  bool has_pc_lblk() const;
  void clear_pc_lblk() ;
  ::uint32_t pc_lblk() const;
  void set_pc_lblk(::uint32_t value);

  private:
  ::uint32_t _internal_pc_lblk() const;
  void _internal_set_pc_lblk(::uint32_t value);

  public:
  // optional int32 pc_state = 11;
  bool has_pc_state() const;
  void clear_pc_state() ;
  ::int32_t pc_state() const;
  void set_pc_state(::int32_t value);

  private:
  ::int32_t _internal_pc_state() const;
  void _internal_set_pc_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4RemoveBlocksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t from_;
    ::uint32_t to_;
    ::int64_t partial_;
    ::uint64_t ee_pblk_;
    ::uint32_t ee_lblk_;
    ::uint32_t ee_len_;
    ::uint64_t pc_pclu_;
    ::uint32_t pc_lblk_;
    ::int32_t pc_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4RequestBlocksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4RequestBlocksFtraceEvent) */ {
 public:
  inline Ext4RequestBlocksFtraceEvent() : Ext4RequestBlocksFtraceEvent(nullptr) {}
  ~Ext4RequestBlocksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4RequestBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4RequestBlocksFtraceEvent(const Ext4RequestBlocksFtraceEvent& from);
  Ext4RequestBlocksFtraceEvent(Ext4RequestBlocksFtraceEvent&& from) noexcept
    : Ext4RequestBlocksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4RequestBlocksFtraceEvent& operator=(const Ext4RequestBlocksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4RequestBlocksFtraceEvent& operator=(Ext4RequestBlocksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4RequestBlocksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4RequestBlocksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4RequestBlocksFtraceEvent*>(
               &_Ext4RequestBlocksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Ext4RequestBlocksFtraceEvent& a, Ext4RequestBlocksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4RequestBlocksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4RequestBlocksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4RequestBlocksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4RequestBlocksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4RequestBlocksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4RequestBlocksFtraceEvent& from) {
    Ext4RequestBlocksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4RequestBlocksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4RequestBlocksFtraceEvent";
  }
  protected:
  explicit Ext4RequestBlocksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kLenFieldNumber = 3,
    kLogicalFieldNumber = 4,
    kLleftFieldNumber = 5,
    kLrightFieldNumber = 6,
    kGoalFieldNumber = 7,
    kPleftFieldNumber = 8,
    kPrightFieldNumber = 9,
    kFlagsFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 len = 3;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 logical = 4;
  bool has_logical() const;
  void clear_logical() ;
  ::uint32_t logical() const;
  void set_logical(::uint32_t value);

  private:
  ::uint32_t _internal_logical() const;
  void _internal_set_logical(::uint32_t value);

  public:
  // optional uint32 lleft = 5;
  bool has_lleft() const;
  void clear_lleft() ;
  ::uint32_t lleft() const;
  void set_lleft(::uint32_t value);

  private:
  ::uint32_t _internal_lleft() const;
  void _internal_set_lleft(::uint32_t value);

  public:
  // optional uint32 lright = 6;
  bool has_lright() const;
  void clear_lright() ;
  ::uint32_t lright() const;
  void set_lright(::uint32_t value);

  private:
  ::uint32_t _internal_lright() const;
  void _internal_set_lright(::uint32_t value);

  public:
  // optional uint64 goal = 7;
  bool has_goal() const;
  void clear_goal() ;
  ::uint64_t goal() const;
  void set_goal(::uint64_t value);

  private:
  ::uint64_t _internal_goal() const;
  void _internal_set_goal(::uint64_t value);

  public:
  // optional uint64 pleft = 8;
  bool has_pleft() const;
  void clear_pleft() ;
  ::uint64_t pleft() const;
  void set_pleft(::uint64_t value);

  private:
  ::uint64_t _internal_pleft() const;
  void _internal_set_pleft(::uint64_t value);

  public:
  // optional uint64 pright = 9;
  bool has_pright() const;
  void clear_pright() ;
  ::uint64_t pright() const;
  void set_pright(::uint64_t value);

  private:
  ::uint64_t _internal_pright() const;
  void _internal_set_pright(::uint64_t value);

  public:
  // optional uint32 flags = 10;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4RequestBlocksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t len_;
    ::uint32_t logical_;
    ::uint32_t lleft_;
    ::uint32_t lright_;
    ::uint64_t goal_;
    ::uint64_t pleft_;
    ::uint64_t pright_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4RequestInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4RequestInodeFtraceEvent) */ {
 public:
  inline Ext4RequestInodeFtraceEvent() : Ext4RequestInodeFtraceEvent(nullptr) {}
  ~Ext4RequestInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4RequestInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4RequestInodeFtraceEvent(const Ext4RequestInodeFtraceEvent& from);
  Ext4RequestInodeFtraceEvent(Ext4RequestInodeFtraceEvent&& from) noexcept
    : Ext4RequestInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4RequestInodeFtraceEvent& operator=(const Ext4RequestInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4RequestInodeFtraceEvent& operator=(Ext4RequestInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4RequestInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4RequestInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4RequestInodeFtraceEvent*>(
               &_Ext4RequestInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(Ext4RequestInodeFtraceEvent& a, Ext4RequestInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4RequestInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4RequestInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4RequestInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4RequestInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4RequestInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4RequestInodeFtraceEvent& from) {
    Ext4RequestInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4RequestInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4RequestInodeFtraceEvent";
  }
  protected:
  explicit Ext4RequestInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kDirFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 dir = 2;
  bool has_dir() const;
  void clear_dir() ;
  ::uint64_t dir() const;
  void set_dir(::uint64_t value);

  private:
  ::uint64_t _internal_dir() const;
  void _internal_set_dir(::uint64_t value);

  public:
  // optional uint32 mode = 3;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4RequestInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t dir_;
    ::uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4SyncFsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4SyncFsFtraceEvent) */ {
 public:
  inline Ext4SyncFsFtraceEvent() : Ext4SyncFsFtraceEvent(nullptr) {}
  ~Ext4SyncFsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4SyncFsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4SyncFsFtraceEvent(const Ext4SyncFsFtraceEvent& from);
  Ext4SyncFsFtraceEvent(Ext4SyncFsFtraceEvent&& from) noexcept
    : Ext4SyncFsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4SyncFsFtraceEvent& operator=(const Ext4SyncFsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4SyncFsFtraceEvent& operator=(Ext4SyncFsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4SyncFsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4SyncFsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4SyncFsFtraceEvent*>(
               &_Ext4SyncFsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(Ext4SyncFsFtraceEvent& a, Ext4SyncFsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4SyncFsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4SyncFsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4SyncFsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4SyncFsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4SyncFsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4SyncFsFtraceEvent& from) {
    Ext4SyncFsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4SyncFsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4SyncFsFtraceEvent";
  }
  protected:
  explicit Ext4SyncFsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kWaitFieldNumber = 2,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 wait = 2;
  bool has_wait() const;
  void clear_wait() ;
  ::int32_t wait() const;
  void set_wait(::int32_t value);

  private:
  ::int32_t _internal_wait() const;
  void _internal_set_wait(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4SyncFsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t wait_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4TrimAllFreeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TrimAllFreeFtraceEvent) */ {
 public:
  inline Ext4TrimAllFreeFtraceEvent() : Ext4TrimAllFreeFtraceEvent(nullptr) {}
  ~Ext4TrimAllFreeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4TrimAllFreeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4TrimAllFreeFtraceEvent(const Ext4TrimAllFreeFtraceEvent& from);
  Ext4TrimAllFreeFtraceEvent(Ext4TrimAllFreeFtraceEvent&& from) noexcept
    : Ext4TrimAllFreeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TrimAllFreeFtraceEvent& operator=(const Ext4TrimAllFreeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TrimAllFreeFtraceEvent& operator=(Ext4TrimAllFreeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4TrimAllFreeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4TrimAllFreeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TrimAllFreeFtraceEvent*>(
               &_Ext4TrimAllFreeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Ext4TrimAllFreeFtraceEvent& a, Ext4TrimAllFreeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TrimAllFreeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4TrimAllFreeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4TrimAllFreeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4TrimAllFreeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4TrimAllFreeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4TrimAllFreeFtraceEvent& from) {
    Ext4TrimAllFreeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4TrimAllFreeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4TrimAllFreeFtraceEvent";
  }
  protected:
  explicit Ext4TrimAllFreeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevMajorFieldNumber = 1,
    kDevMinorFieldNumber = 2,
    kGroupFieldNumber = 3,
    kStartFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional int32 dev_major = 1;
  bool has_dev_major() const;
  void clear_dev_major() ;
  ::int32_t dev_major() const;
  void set_dev_major(::int32_t value);

  private:
  ::int32_t _internal_dev_major() const;
  void _internal_set_dev_major(::int32_t value);

  public:
  // optional int32 dev_minor = 2;
  bool has_dev_minor() const;
  void clear_dev_minor() ;
  ::int32_t dev_minor() const;
  void set_dev_minor(::int32_t value);

  private:
  ::int32_t _internal_dev_minor() const;
  void _internal_set_dev_minor(::int32_t value);

  public:
  // optional uint32 group = 3;
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // optional int32 start = 4;
  bool has_start() const;
  void clear_start() ;
  ::int32_t start() const;
  void set_start(::int32_t value);

  private:
  ::int32_t _internal_start() const;
  void _internal_set_start(::int32_t value);

  public:
  // optional int32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::int32_t len() const;
  void set_len(::int32_t value);

  private:
  ::int32_t _internal_len() const;
  void _internal_set_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TrimAllFreeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t dev_major_;
    ::int32_t dev_minor_;
    ::uint32_t group_;
    ::int32_t start_;
    ::int32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4TrimExtentFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TrimExtentFtraceEvent) */ {
 public:
  inline Ext4TrimExtentFtraceEvent() : Ext4TrimExtentFtraceEvent(nullptr) {}
  ~Ext4TrimExtentFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4TrimExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4TrimExtentFtraceEvent(const Ext4TrimExtentFtraceEvent& from);
  Ext4TrimExtentFtraceEvent(Ext4TrimExtentFtraceEvent&& from) noexcept
    : Ext4TrimExtentFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TrimExtentFtraceEvent& operator=(const Ext4TrimExtentFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TrimExtentFtraceEvent& operator=(Ext4TrimExtentFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4TrimExtentFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4TrimExtentFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TrimExtentFtraceEvent*>(
               &_Ext4TrimExtentFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Ext4TrimExtentFtraceEvent& a, Ext4TrimExtentFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TrimExtentFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4TrimExtentFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4TrimExtentFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4TrimExtentFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4TrimExtentFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4TrimExtentFtraceEvent& from) {
    Ext4TrimExtentFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4TrimExtentFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4TrimExtentFtraceEvent";
  }
  protected:
  explicit Ext4TrimExtentFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevMajorFieldNumber = 1,
    kDevMinorFieldNumber = 2,
    kGroupFieldNumber = 3,
    kStartFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional int32 dev_major = 1;
  bool has_dev_major() const;
  void clear_dev_major() ;
  ::int32_t dev_major() const;
  void set_dev_major(::int32_t value);

  private:
  ::int32_t _internal_dev_major() const;
  void _internal_set_dev_major(::int32_t value);

  public:
  // optional int32 dev_minor = 2;
  bool has_dev_minor() const;
  void clear_dev_minor() ;
  ::int32_t dev_minor() const;
  void set_dev_minor(::int32_t value);

  private:
  ::int32_t _internal_dev_minor() const;
  void _internal_set_dev_minor(::int32_t value);

  public:
  // optional uint32 group = 3;
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // optional int32 start = 4;
  bool has_start() const;
  void clear_start() ;
  ::int32_t start() const;
  void set_start(::int32_t value);

  private:
  ::int32_t _internal_start() const;
  void _internal_set_start(::int32_t value);

  public:
  // optional int32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::int32_t len() const;
  void set_len(::int32_t value);

  private:
  ::int32_t _internal_len() const;
  void _internal_set_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TrimExtentFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t dev_major_;
    ::int32_t dev_minor_;
    ::uint32_t group_;
    ::int32_t start_;
    ::int32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4TruncateEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TruncateEnterFtraceEvent) */ {
 public:
  inline Ext4TruncateEnterFtraceEvent() : Ext4TruncateEnterFtraceEvent(nullptr) {}
  ~Ext4TruncateEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4TruncateEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4TruncateEnterFtraceEvent(const Ext4TruncateEnterFtraceEvent& from);
  Ext4TruncateEnterFtraceEvent(Ext4TruncateEnterFtraceEvent&& from) noexcept
    : Ext4TruncateEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TruncateEnterFtraceEvent& operator=(const Ext4TruncateEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TruncateEnterFtraceEvent& operator=(Ext4TruncateEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4TruncateEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4TruncateEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TruncateEnterFtraceEvent*>(
               &_Ext4TruncateEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Ext4TruncateEnterFtraceEvent& a, Ext4TruncateEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TruncateEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4TruncateEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4TruncateEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4TruncateEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4TruncateEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4TruncateEnterFtraceEvent& from) {
    Ext4TruncateEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4TruncateEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4TruncateEnterFtraceEvent";
  }
  protected:
  explicit Ext4TruncateEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlocksFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 blocks = 3;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TruncateEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4TruncateExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4TruncateExitFtraceEvent) */ {
 public:
  inline Ext4TruncateExitFtraceEvent() : Ext4TruncateExitFtraceEvent(nullptr) {}
  ~Ext4TruncateExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4TruncateExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4TruncateExitFtraceEvent(const Ext4TruncateExitFtraceEvent& from);
  Ext4TruncateExitFtraceEvent(Ext4TruncateExitFtraceEvent&& from) noexcept
    : Ext4TruncateExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4TruncateExitFtraceEvent& operator=(const Ext4TruncateExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4TruncateExitFtraceEvent& operator=(Ext4TruncateExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4TruncateExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4TruncateExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4TruncateExitFtraceEvent*>(
               &_Ext4TruncateExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(Ext4TruncateExitFtraceEvent& a, Ext4TruncateExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4TruncateExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4TruncateExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4TruncateExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4TruncateExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4TruncateExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4TruncateExitFtraceEvent& from) {
    Ext4TruncateExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4TruncateExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4TruncateExitFtraceEvent";
  }
  protected:
  explicit Ext4TruncateExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kBlocksFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 blocks = 3;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4TruncateExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4UnlinkEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4UnlinkEnterFtraceEvent) */ {
 public:
  inline Ext4UnlinkEnterFtraceEvent() : Ext4UnlinkEnterFtraceEvent(nullptr) {}
  ~Ext4UnlinkEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4UnlinkEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4UnlinkEnterFtraceEvent(const Ext4UnlinkEnterFtraceEvent& from);
  Ext4UnlinkEnterFtraceEvent(Ext4UnlinkEnterFtraceEvent&& from) noexcept
    : Ext4UnlinkEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4UnlinkEnterFtraceEvent& operator=(const Ext4UnlinkEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4UnlinkEnterFtraceEvent& operator=(Ext4UnlinkEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4UnlinkEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4UnlinkEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4UnlinkEnterFtraceEvent*>(
               &_Ext4UnlinkEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(Ext4UnlinkEnterFtraceEvent& a, Ext4UnlinkEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4UnlinkEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4UnlinkEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4UnlinkEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4UnlinkEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4UnlinkEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4UnlinkEnterFtraceEvent& from) {
    Ext4UnlinkEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4UnlinkEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4UnlinkEnterFtraceEvent";
  }
  protected:
  explicit Ext4UnlinkEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kParentFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 parent = 3;
  bool has_parent() const;
  void clear_parent() ;
  ::uint64_t parent() const;
  void set_parent(::uint64_t value);

  private:
  ::uint64_t _internal_parent() const;
  void _internal_set_parent(::uint64_t value);

  public:
  // optional int64 size = 4;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4UnlinkEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t parent_;
    ::int64_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4UnlinkExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4UnlinkExitFtraceEvent) */ {
 public:
  inline Ext4UnlinkExitFtraceEvent() : Ext4UnlinkExitFtraceEvent(nullptr) {}
  ~Ext4UnlinkExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4UnlinkExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4UnlinkExitFtraceEvent(const Ext4UnlinkExitFtraceEvent& from);
  Ext4UnlinkExitFtraceEvent(Ext4UnlinkExitFtraceEvent&& from) noexcept
    : Ext4UnlinkExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4UnlinkExitFtraceEvent& operator=(const Ext4UnlinkExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4UnlinkExitFtraceEvent& operator=(Ext4UnlinkExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4UnlinkExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4UnlinkExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4UnlinkExitFtraceEvent*>(
               &_Ext4UnlinkExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(Ext4UnlinkExitFtraceEvent& a, Ext4UnlinkExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4UnlinkExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4UnlinkExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4UnlinkExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4UnlinkExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4UnlinkExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4UnlinkExitFtraceEvent& from) {
    Ext4UnlinkExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4UnlinkExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4UnlinkExitFtraceEvent";
  }
  protected:
  explicit Ext4UnlinkExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4UnlinkExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4WriteBeginFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WriteBeginFtraceEvent) */ {
 public:
  inline Ext4WriteBeginFtraceEvent() : Ext4WriteBeginFtraceEvent(nullptr) {}
  ~Ext4WriteBeginFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4WriteBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4WriteBeginFtraceEvent(const Ext4WriteBeginFtraceEvent& from);
  Ext4WriteBeginFtraceEvent(Ext4WriteBeginFtraceEvent&& from) noexcept
    : Ext4WriteBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WriteBeginFtraceEvent& operator=(const Ext4WriteBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WriteBeginFtraceEvent& operator=(Ext4WriteBeginFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4WriteBeginFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4WriteBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WriteBeginFtraceEvent*>(
               &_Ext4WriteBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Ext4WriteBeginFtraceEvent& a, Ext4WriteBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WriteBeginFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4WriteBeginFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4WriteBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4WriteBeginFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4WriteBeginFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4WriteBeginFtraceEvent& from) {
    Ext4WriteBeginFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4WriteBeginFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4WriteBeginFtraceEvent";
  }
  protected:
  explicit Ext4WriteBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WriteBeginFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4WriteEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WriteEndFtraceEvent) */ {
 public:
  inline Ext4WriteEndFtraceEvent() : Ext4WriteEndFtraceEvent(nullptr) {}
  ~Ext4WriteEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4WriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4WriteEndFtraceEvent(const Ext4WriteEndFtraceEvent& from);
  Ext4WriteEndFtraceEvent(Ext4WriteEndFtraceEvent&& from) noexcept
    : Ext4WriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WriteEndFtraceEvent& operator=(const Ext4WriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WriteEndFtraceEvent& operator=(Ext4WriteEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4WriteEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4WriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WriteEndFtraceEvent*>(
               &_Ext4WriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Ext4WriteEndFtraceEvent& a, Ext4WriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WriteEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4WriteEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4WriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4WriteEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4WriteEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4WriteEndFtraceEvent& from) {
    Ext4WriteEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4WriteEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4WriteEndFtraceEvent";
  }
  protected:
  explicit Ext4WriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied() ;
  ::uint32_t copied() const;
  void set_copied(::uint32_t value);

  private:
  ::uint32_t _internal_copied() const;
  void _internal_set_copied(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WriteEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t copied_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4WritepageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WritepageFtraceEvent) */ {
 public:
  inline Ext4WritepageFtraceEvent() : Ext4WritepageFtraceEvent(nullptr) {}
  ~Ext4WritepageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4WritepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4WritepageFtraceEvent(const Ext4WritepageFtraceEvent& from);
  Ext4WritepageFtraceEvent(Ext4WritepageFtraceEvent&& from) noexcept
    : Ext4WritepageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WritepageFtraceEvent& operator=(const Ext4WritepageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WritepageFtraceEvent& operator=(Ext4WritepageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4WritepageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4WritepageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WritepageFtraceEvent*>(
               &_Ext4WritepageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Ext4WritepageFtraceEvent& a, Ext4WritepageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WritepageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4WritepageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4WritepageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4WritepageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4WritepageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4WritepageFtraceEvent& from) {
    Ext4WritepageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4WritepageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4WritepageFtraceEvent";
  }
  protected:
  explicit Ext4WritepageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WritepageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4WritepagesFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WritepagesFtraceEvent) */ {
 public:
  inline Ext4WritepagesFtraceEvent() : Ext4WritepagesFtraceEvent(nullptr) {}
  ~Ext4WritepagesFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4WritepagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4WritepagesFtraceEvent(const Ext4WritepagesFtraceEvent& from);
  Ext4WritepagesFtraceEvent(Ext4WritepagesFtraceEvent&& from) noexcept
    : Ext4WritepagesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WritepagesFtraceEvent& operator=(const Ext4WritepagesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WritepagesFtraceEvent& operator=(Ext4WritepagesFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4WritepagesFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4WritepagesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WritepagesFtraceEvent*>(
               &_Ext4WritepagesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(Ext4WritepagesFtraceEvent& a, Ext4WritepagesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WritepagesFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4WritepagesFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4WritepagesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4WritepagesFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4WritepagesFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4WritepagesFtraceEvent& from) {
    Ext4WritepagesFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4WritepagesFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4WritepagesFtraceEvent";
  }
  protected:
  explicit Ext4WritepagesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNrToWriteFieldNumber = 3,
    kPagesSkippedFieldNumber = 4,
    kRangeStartFieldNumber = 5,
    kRangeEndFieldNumber = 6,
    kWritebackIndexFieldNumber = 7,
    kSyncModeFieldNumber = 8,
    kForKupdateFieldNumber = 9,
    kRangeCyclicFieldNumber = 10,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 nr_to_write = 3;
  bool has_nr_to_write() const;
  void clear_nr_to_write() ;
  ::int64_t nr_to_write() const;
  void set_nr_to_write(::int64_t value);

  private:
  ::int64_t _internal_nr_to_write() const;
  void _internal_set_nr_to_write(::int64_t value);

  public:
  // optional int64 pages_skipped = 4;
  bool has_pages_skipped() const;
  void clear_pages_skipped() ;
  ::int64_t pages_skipped() const;
  void set_pages_skipped(::int64_t value);

  private:
  ::int64_t _internal_pages_skipped() const;
  void _internal_set_pages_skipped(::int64_t value);

  public:
  // optional int64 range_start = 5;
  bool has_range_start() const;
  void clear_range_start() ;
  ::int64_t range_start() const;
  void set_range_start(::int64_t value);

  private:
  ::int64_t _internal_range_start() const;
  void _internal_set_range_start(::int64_t value);

  public:
  // optional int64 range_end = 6;
  bool has_range_end() const;
  void clear_range_end() ;
  ::int64_t range_end() const;
  void set_range_end(::int64_t value);

  private:
  ::int64_t _internal_range_end() const;
  void _internal_set_range_end(::int64_t value);

  public:
  // optional uint64 writeback_index = 7;
  bool has_writeback_index() const;
  void clear_writeback_index() ;
  ::uint64_t writeback_index() const;
  void set_writeback_index(::uint64_t value);

  private:
  ::uint64_t _internal_writeback_index() const;
  void _internal_set_writeback_index(::uint64_t value);

  public:
  // optional int32 sync_mode = 8;
  bool has_sync_mode() const;
  void clear_sync_mode() ;
  ::int32_t sync_mode() const;
  void set_sync_mode(::int32_t value);

  private:
  ::int32_t _internal_sync_mode() const;
  void _internal_set_sync_mode(::int32_t value);

  public:
  // optional uint32 for_kupdate = 9;
  bool has_for_kupdate() const;
  void clear_for_kupdate() ;
  ::uint32_t for_kupdate() const;
  void set_for_kupdate(::uint32_t value);

  private:
  ::uint32_t _internal_for_kupdate() const;
  void _internal_set_for_kupdate(::uint32_t value);

  public:
  // optional uint32 range_cyclic = 10;
  bool has_range_cyclic() const;
  void clear_range_cyclic() ;
  ::uint32_t range_cyclic() const;
  void set_range_cyclic(::uint32_t value);

  private:
  ::uint32_t _internal_range_cyclic() const;
  void _internal_set_range_cyclic(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WritepagesFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t nr_to_write_;
    ::int64_t pages_skipped_;
    ::int64_t range_start_;
    ::int64_t range_end_;
    ::uint64_t writeback_index_;
    ::int32_t sync_mode_;
    ::uint32_t for_kupdate_;
    ::uint32_t range_cyclic_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4WritepagesResultFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4WritepagesResultFtraceEvent) */ {
 public:
  inline Ext4WritepagesResultFtraceEvent() : Ext4WritepagesResultFtraceEvent(nullptr) {}
  ~Ext4WritepagesResultFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4WritepagesResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4WritepagesResultFtraceEvent(const Ext4WritepagesResultFtraceEvent& from);
  Ext4WritepagesResultFtraceEvent(Ext4WritepagesResultFtraceEvent&& from) noexcept
    : Ext4WritepagesResultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4WritepagesResultFtraceEvent& operator=(const Ext4WritepagesResultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4WritepagesResultFtraceEvent& operator=(Ext4WritepagesResultFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4WritepagesResultFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4WritepagesResultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4WritepagesResultFtraceEvent*>(
               &_Ext4WritepagesResultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Ext4WritepagesResultFtraceEvent& a, Ext4WritepagesResultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4WritepagesResultFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4WritepagesResultFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4WritepagesResultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4WritepagesResultFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4WritepagesResultFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4WritepagesResultFtraceEvent& from) {
    Ext4WritepagesResultFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4WritepagesResultFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4WritepagesResultFtraceEvent";
  }
  protected:
  explicit Ext4WritepagesResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
    kPagesWrittenFieldNumber = 4,
    kPagesSkippedFieldNumber = 5,
    kWritebackIndexFieldNumber = 6,
    kSyncModeFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional int32 pages_written = 4;
  bool has_pages_written() const;
  void clear_pages_written() ;
  ::int32_t pages_written() const;
  void set_pages_written(::int32_t value);

  private:
  ::int32_t _internal_pages_written() const;
  void _internal_set_pages_written(::int32_t value);

  public:
  // optional int64 pages_skipped = 5;
  bool has_pages_skipped() const;
  void clear_pages_skipped() ;
  ::int64_t pages_skipped() const;
  void set_pages_skipped(::int64_t value);

  private:
  ::int64_t _internal_pages_skipped() const;
  void _internal_set_pages_skipped(::int64_t value);

  public:
  // optional uint64 writeback_index = 6;
  bool has_writeback_index() const;
  void clear_writeback_index() ;
  ::uint64_t writeback_index() const;
  void set_writeback_index(::uint64_t value);

  private:
  ::uint64_t _internal_writeback_index() const;
  void _internal_set_writeback_index(::uint64_t value);

  public:
  // optional int32 sync_mode = 7;
  bool has_sync_mode() const;
  void clear_sync_mode() ;
  ::int32_t sync_mode() const;
  void set_sync_mode(::int32_t value);

  private:
  ::int32_t _internal_sync_mode() const;
  void _internal_set_sync_mode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4WritepagesResultFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
    ::int32_t pages_written_;
    ::int64_t pages_skipped_;
    ::uint64_t writeback_index_;
    ::int32_t sync_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};// -------------------------------------------------------------------

class Ext4ZeroRangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.Ext4ZeroRangeFtraceEvent) */ {
 public:
  inline Ext4ZeroRangeFtraceEvent() : Ext4ZeroRangeFtraceEvent(nullptr) {}
  ~Ext4ZeroRangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Ext4ZeroRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ext4ZeroRangeFtraceEvent(const Ext4ZeroRangeFtraceEvent& from);
  Ext4ZeroRangeFtraceEvent(Ext4ZeroRangeFtraceEvent&& from) noexcept
    : Ext4ZeroRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline Ext4ZeroRangeFtraceEvent& operator=(const Ext4ZeroRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ext4ZeroRangeFtraceEvent& operator=(Ext4ZeroRangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ext4ZeroRangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ext4ZeroRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const Ext4ZeroRangeFtraceEvent*>(
               &_Ext4ZeroRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Ext4ZeroRangeFtraceEvent& a, Ext4ZeroRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Ext4ZeroRangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ext4ZeroRangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ext4ZeroRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ext4ZeroRangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ext4ZeroRangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ext4ZeroRangeFtraceEvent& from) {
    Ext4ZeroRangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ext4ZeroRangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.Ext4ZeroRangeFtraceEvent";
  }
  protected:
  explicit Ext4ZeroRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kLenFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 3;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode() ;
  ::int32_t mode() const;
  void set_mode(::int32_t value);

  private:
  ::int32_t _internal_mode() const;
  void _internal_set_mode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.Ext4ZeroRangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int64_t len_;
    ::int32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Ext4DaWriteBeginFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWriteBeginFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaWriteBeginFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaWriteBeginFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.dev)
}
inline ::uint64_t Ext4DaWriteBeginFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaWriteBeginFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaWriteBeginFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaWriteBeginFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaWriteBeginFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.ino)
}
inline ::uint64_t Ext4DaWriteBeginFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaWriteBeginFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4DaWriteBeginFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4DaWriteBeginFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4DaWriteBeginFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.pos)
}
inline ::int64_t Ext4DaWriteBeginFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4DaWriteBeginFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool Ext4DaWriteBeginFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4DaWriteBeginFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.len)
  return _internal_len();
}
inline void Ext4DaWriteBeginFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.len)
}
inline ::uint32_t Ext4DaWriteBeginFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4DaWriteBeginFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 flags = 5;
inline bool Ext4DaWriteBeginFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaWriteBeginFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4DaWriteBeginFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteBeginFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4DaWriteBeginFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteBeginFtraceEvent.flags)
}
inline ::uint32_t Ext4DaWriteBeginFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4DaWriteBeginFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4DaWriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWriteEndFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaWriteEndFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaWriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaWriteEndFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.dev)
}
inline ::uint64_t Ext4DaWriteEndFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaWriteEndFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaWriteEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaWriteEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaWriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaWriteEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.ino)
}
inline ::uint64_t Ext4DaWriteEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaWriteEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4DaWriteEndFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaWriteEndFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4DaWriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4DaWriteEndFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.pos)
}
inline ::int64_t Ext4DaWriteEndFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4DaWriteEndFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool Ext4DaWriteEndFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaWriteEndFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4DaWriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.len)
  return _internal_len();
}
inline void Ext4DaWriteEndFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.len)
}
inline ::uint32_t Ext4DaWriteEndFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4DaWriteEndFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 copied = 5;
inline bool Ext4DaWriteEndFtraceEvent::has_copied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaWriteEndFtraceEvent::clear_copied() {
  _impl_.copied_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4DaWriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWriteEndFtraceEvent.copied)
  return _internal_copied();
}
inline void Ext4DaWriteEndFtraceEvent::set_copied(::uint32_t value) {
  _internal_set_copied(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWriteEndFtraceEvent.copied)
}
inline ::uint32_t Ext4DaWriteEndFtraceEvent::_internal_copied() const {
  return _impl_.copied_;
}
inline void Ext4DaWriteEndFtraceEvent::_internal_set_copied(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.copied_ = value;
}

// -------------------------------------------------------------------

// Ext4SyncFileEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4SyncFileEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4SyncFileEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4SyncFileEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4SyncFileEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4SyncFileEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4SyncFileEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4SyncFileEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4SyncFileEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4SyncFileEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4SyncFileEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 parent = 3;
inline bool Ext4SyncFileEnterFtraceEvent::has_parent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_parent() {
  _impl_.parent_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4SyncFileEnterFtraceEvent::parent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.parent)
  return _internal_parent();
}
inline void Ext4SyncFileEnterFtraceEvent::set_parent(::uint64_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.parent)
}
inline ::uint64_t Ext4SyncFileEnterFtraceEvent::_internal_parent() const {
  return _impl_.parent_;
}
inline void Ext4SyncFileEnterFtraceEvent::_internal_set_parent(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.parent_ = value;
}

// optional int32 datasync = 4;
inline bool Ext4SyncFileEnterFtraceEvent::has_datasync() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4SyncFileEnterFtraceEvent::clear_datasync() {
  _impl_.datasync_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4SyncFileEnterFtraceEvent::datasync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileEnterFtraceEvent.datasync)
  return _internal_datasync();
}
inline void Ext4SyncFileEnterFtraceEvent::set_datasync(::int32_t value) {
  _internal_set_datasync(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileEnterFtraceEvent.datasync)
}
inline ::int32_t Ext4SyncFileEnterFtraceEvent::_internal_datasync() const {
  return _impl_.datasync_;
}
inline void Ext4SyncFileEnterFtraceEvent::_internal_set_datasync(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.datasync_ = value;
}

// -------------------------------------------------------------------

// Ext4SyncFileExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4SyncFileExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4SyncFileExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4SyncFileExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4SyncFileExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileExitFtraceEvent.dev)
}
inline ::uint64_t Ext4SyncFileExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4SyncFileExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4SyncFileExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4SyncFileExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4SyncFileExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4SyncFileExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileExitFtraceEvent.ino)
}
inline ::uint64_t Ext4SyncFileExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4SyncFileExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool Ext4SyncFileExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4SyncFileExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4SyncFileExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFileExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4SyncFileExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFileExitFtraceEvent.ret)
}
inline ::int32_t Ext4SyncFileExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4SyncFileExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4AllocDaBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4AllocDaBlocksFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4AllocDaBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4AllocDaBlocksFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.dev)
}
inline ::uint64_t Ext4AllocDaBlocksFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4AllocDaBlocksFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4AllocDaBlocksFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4AllocDaBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4AllocDaBlocksFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.ino)
}
inline ::uint64_t Ext4AllocDaBlocksFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4AllocDaBlocksFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 data_blocks = 3;
inline bool Ext4AllocDaBlocksFtraceEvent::has_data_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_data_blocks() {
  _impl_.data_blocks_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4AllocDaBlocksFtraceEvent::data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.data_blocks)
  return _internal_data_blocks();
}
inline void Ext4AllocDaBlocksFtraceEvent::set_data_blocks(::uint32_t value) {
  _internal_set_data_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.data_blocks)
}
inline ::uint32_t Ext4AllocDaBlocksFtraceEvent::_internal_data_blocks() const {
  return _impl_.data_blocks_;
}
inline void Ext4AllocDaBlocksFtraceEvent::_internal_set_data_blocks(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_blocks_ = value;
}

// optional uint32 meta_blocks = 4;
inline bool Ext4AllocDaBlocksFtraceEvent::has_meta_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4AllocDaBlocksFtraceEvent::clear_meta_blocks() {
  _impl_.meta_blocks_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4AllocDaBlocksFtraceEvent::meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.meta_blocks)
  return _internal_meta_blocks();
}
inline void Ext4AllocDaBlocksFtraceEvent::set_meta_blocks(::uint32_t value) {
  _internal_set_meta_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocDaBlocksFtraceEvent.meta_blocks)
}
inline ::uint32_t Ext4AllocDaBlocksFtraceEvent::_internal_meta_blocks() const {
  return _impl_.meta_blocks_;
}
inline void Ext4AllocDaBlocksFtraceEvent::_internal_set_meta_blocks(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.meta_blocks_ = value;
}

// -------------------------------------------------------------------

// Ext4AllocateBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4AllocateBlocksFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4AllocateBlocksFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.dev)
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4AllocateBlocksFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4AllocateBlocksFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.ino)
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 block = 3;
inline bool Ext4AllocateBlocksFtraceEvent::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_block() {
  _impl_.block_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.block)
  return _internal_block();
}
inline void Ext4AllocateBlocksFtraceEvent::set_block(::uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.block)
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::_internal_block() const {
  return _impl_.block_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_block(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.block_ = value;
}

// optional uint32 len = 4;
inline bool Ext4AllocateBlocksFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.len)
  return _internal_len();
}
inline void Ext4AllocateBlocksFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.len)
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 logical = 5;
inline bool Ext4AllocateBlocksFtraceEvent::has_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_logical() {
  _impl_.logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.logical)
  return _internal_logical();
}
inline void Ext4AllocateBlocksFtraceEvent::set_logical(::uint32_t value) {
  _internal_set_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.logical)
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::_internal_logical() const {
  return _impl_.logical_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.logical_ = value;
}

// optional uint32 lleft = 6;
inline bool Ext4AllocateBlocksFtraceEvent::has_lleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_lleft() {
  _impl_.lleft_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::lleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lleft)
  return _internal_lleft();
}
inline void Ext4AllocateBlocksFtraceEvent::set_lleft(::uint32_t value) {
  _internal_set_lleft(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lleft)
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::_internal_lleft() const {
  return _impl_.lleft_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_lleft(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lleft_ = value;
}

// optional uint32 lright = 7;
inline bool Ext4AllocateBlocksFtraceEvent::has_lright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_lright() {
  _impl_.lright_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::lright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lright)
  return _internal_lright();
}
inline void Ext4AllocateBlocksFtraceEvent::set_lright(::uint32_t value) {
  _internal_set_lright(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.lright)
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::_internal_lright() const {
  return _impl_.lright_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_lright(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lright_ = value;
}

// optional uint64 goal = 8;
inline bool Ext4AllocateBlocksFtraceEvent::has_goal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_goal() {
  _impl_.goal_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::goal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.goal)
  return _internal_goal();
}
inline void Ext4AllocateBlocksFtraceEvent::set_goal(::uint64_t value) {
  _internal_set_goal(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.goal)
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::_internal_goal() const {
  return _impl_.goal_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_goal(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.goal_ = value;
}

// optional uint64 pleft = 9;
inline bool Ext4AllocateBlocksFtraceEvent::has_pleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_pleft() {
  _impl_.pleft_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::pleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pleft)
  return _internal_pleft();
}
inline void Ext4AllocateBlocksFtraceEvent::set_pleft(::uint64_t value) {
  _internal_set_pleft(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pleft)
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::_internal_pleft() const {
  return _impl_.pleft_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_pleft(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pleft_ = value;
}

// optional uint64 pright = 10;
inline bool Ext4AllocateBlocksFtraceEvent::has_pright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_pright() {
  _impl_.pright_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::pright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pright)
  return _internal_pright();
}
inline void Ext4AllocateBlocksFtraceEvent::set_pright(::uint64_t value) {
  _internal_set_pright(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.pright)
}
inline ::uint64_t Ext4AllocateBlocksFtraceEvent::_internal_pright() const {
  return _impl_.pright_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_pright(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pright_ = value;
}

// optional uint32 flags = 11;
inline bool Ext4AllocateBlocksFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Ext4AllocateBlocksFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateBlocksFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4AllocateBlocksFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateBlocksFtraceEvent.flags)
}
inline ::uint32_t Ext4AllocateBlocksFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4AllocateBlocksFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4AllocateInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4AllocateInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4AllocateInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4AllocateInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4AllocateInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.dev)
}
inline ::uint64_t Ext4AllocateInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4AllocateInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4AllocateInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4AllocateInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4AllocateInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4AllocateInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.ino)
}
inline ::uint64_t Ext4AllocateInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4AllocateInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 dir = 3;
inline bool Ext4AllocateInodeFtraceEvent::has_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4AllocateInodeFtraceEvent::clear_dir() {
  _impl_.dir_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4AllocateInodeFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.dir)
  return _internal_dir();
}
inline void Ext4AllocateInodeFtraceEvent::set_dir(::uint64_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.dir)
}
inline ::uint64_t Ext4AllocateInodeFtraceEvent::_internal_dir() const {
  return _impl_.dir_;
}
inline void Ext4AllocateInodeFtraceEvent::_internal_set_dir(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dir_ = value;
}

// optional uint32 mode = 4;
inline bool Ext4AllocateInodeFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4AllocateInodeFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4AllocateInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4AllocateInodeFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4AllocateInodeFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4AllocateInodeFtraceEvent.mode)
}
inline ::uint32_t Ext4AllocateInodeFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4AllocateInodeFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4BeginOrderedTruncateFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4BeginOrderedTruncateFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4BeginOrderedTruncateFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4BeginOrderedTruncateFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.dev)
}
inline ::uint64_t Ext4BeginOrderedTruncateFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4BeginOrderedTruncateFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4BeginOrderedTruncateFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4BeginOrderedTruncateFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.ino)
}
inline ::uint64_t Ext4BeginOrderedTruncateFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 new_size = 3;
inline bool Ext4BeginOrderedTruncateFtraceEvent::has_new_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::clear_new_size() {
  _impl_.new_size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4BeginOrderedTruncateFtraceEvent::new_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.new_size)
  return _internal_new_size();
}
inline void Ext4BeginOrderedTruncateFtraceEvent::set_new_size(::int64_t value) {
  _internal_set_new_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent.new_size)
}
inline ::int64_t Ext4BeginOrderedTruncateFtraceEvent::_internal_new_size() const {
  return _impl_.new_size_;
}
inline void Ext4BeginOrderedTruncateFtraceEvent::_internal_set_new_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_size_ = value;
}

// -------------------------------------------------------------------

// Ext4CollapseRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4CollapseRangeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4CollapseRangeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4CollapseRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4CollapseRangeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.dev)
}
inline ::uint64_t Ext4CollapseRangeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4CollapseRangeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4CollapseRangeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4CollapseRangeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4CollapseRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4CollapseRangeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.ino)
}
inline ::uint64_t Ext4CollapseRangeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4CollapseRangeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool Ext4CollapseRangeFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4CollapseRangeFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4CollapseRangeFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4CollapseRangeFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.offset)
}
inline ::int64_t Ext4CollapseRangeFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4CollapseRangeFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}

// optional int64 len = 4;
inline bool Ext4CollapseRangeFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4CollapseRangeFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4CollapseRangeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4CollapseRangeFtraceEvent.len)
  return _internal_len();
}
inline void Ext4CollapseRangeFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4CollapseRangeFtraceEvent.len)
}
inline ::int64_t Ext4CollapseRangeFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4CollapseRangeFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4DaReleaseSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaReleaseSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.dev)
}
inline ::uint64_t Ext4DaReleaseSpaceFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaReleaseSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.ino)
}
inline ::uint64_t Ext4DaReleaseSpaceFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 i_blocks = 3;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_i_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_i_blocks() {
  _impl_.i_blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4DaReleaseSpaceFtraceEvent::i_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.i_blocks)
  return _internal_i_blocks();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_i_blocks(::uint64_t value) {
  _internal_set_i_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.i_blocks)
}
inline ::uint64_t Ext4DaReleaseSpaceFtraceEvent::_internal_i_blocks() const {
  return _impl_.i_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_i_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.i_blocks_ = value;
}

// optional int32 freed_blocks = 4;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_freed_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_freed_blocks() {
  _impl_.freed_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::freed_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.freed_blocks)
  return _internal_freed_blocks();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_freed_blocks(::int32_t value) {
  _internal_set_freed_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.freed_blocks)
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::_internal_freed_blocks() const {
  return _impl_.freed_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_freed_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.freed_blocks_ = value;
}

// optional int32 reserved_data_blocks = 5;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_reserved_data_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_reserved_data_blocks() {
  _impl_.reserved_data_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::reserved_data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_data_blocks)
  return _internal_reserved_data_blocks();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_reserved_data_blocks(::int32_t value) {
  _internal_set_reserved_data_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_data_blocks)
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::_internal_reserved_data_blocks() const {
  return _impl_.reserved_data_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_reserved_data_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.reserved_data_blocks_ = value;
}

// optional int32 reserved_meta_blocks = 6;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_reserved_meta_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_reserved_meta_blocks() {
  _impl_.reserved_meta_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::reserved_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_meta_blocks)
  return _internal_reserved_meta_blocks();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_reserved_meta_blocks(::int32_t value) {
  _internal_set_reserved_meta_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.reserved_meta_blocks)
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::_internal_reserved_meta_blocks() const {
  return _impl_.reserved_meta_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_reserved_meta_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reserved_meta_blocks_ = value;
}

// optional int32 allocated_meta_blocks = 7;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_allocated_meta_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_allocated_meta_blocks() {
  _impl_.allocated_meta_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::allocated_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.allocated_meta_blocks)
  return _internal_allocated_meta_blocks();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_allocated_meta_blocks(::int32_t value) {
  _internal_set_allocated_meta_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.allocated_meta_blocks)
}
inline ::int32_t Ext4DaReleaseSpaceFtraceEvent::_internal_allocated_meta_blocks() const {
  return _impl_.allocated_meta_blocks_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_allocated_meta_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.allocated_meta_blocks_ = value;
}

// optional uint32 mode = 8;
inline bool Ext4DaReleaseSpaceFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4DaReleaseSpaceFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Ext4DaReleaseSpaceFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4DaReleaseSpaceFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReleaseSpaceFtraceEvent.mode)
}
inline ::uint32_t Ext4DaReleaseSpaceFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4DaReleaseSpaceFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4DaReserveSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaReserveSpaceFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaReserveSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.dev)
}
inline ::uint64_t Ext4DaReserveSpaceFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaReserveSpaceFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaReserveSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.ino)
}
inline ::uint64_t Ext4DaReserveSpaceFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 i_blocks = 3;
inline bool Ext4DaReserveSpaceFtraceEvent::has_i_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_i_blocks() {
  _impl_.i_blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4DaReserveSpaceFtraceEvent::i_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.i_blocks)
  return _internal_i_blocks();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_i_blocks(::uint64_t value) {
  _internal_set_i_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.i_blocks)
}
inline ::uint64_t Ext4DaReserveSpaceFtraceEvent::_internal_i_blocks() const {
  return _impl_.i_blocks_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_i_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.i_blocks_ = value;
}

// optional int32 reserved_data_blocks = 4;
inline bool Ext4DaReserveSpaceFtraceEvent::has_reserved_data_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_reserved_data_blocks() {
  _impl_.reserved_data_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4DaReserveSpaceFtraceEvent::reserved_data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_data_blocks)
  return _internal_reserved_data_blocks();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_reserved_data_blocks(::int32_t value) {
  _internal_set_reserved_data_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_data_blocks)
}
inline ::int32_t Ext4DaReserveSpaceFtraceEvent::_internal_reserved_data_blocks() const {
  return _impl_.reserved_data_blocks_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_reserved_data_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.reserved_data_blocks_ = value;
}

// optional int32 reserved_meta_blocks = 5;
inline bool Ext4DaReserveSpaceFtraceEvent::has_reserved_meta_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_reserved_meta_blocks() {
  _impl_.reserved_meta_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4DaReserveSpaceFtraceEvent::reserved_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_meta_blocks)
  return _internal_reserved_meta_blocks();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_reserved_meta_blocks(::int32_t value) {
  _internal_set_reserved_meta_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.reserved_meta_blocks)
}
inline ::int32_t Ext4DaReserveSpaceFtraceEvent::_internal_reserved_meta_blocks() const {
  return _impl_.reserved_meta_blocks_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_reserved_meta_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.reserved_meta_blocks_ = value;
}

// optional uint32 mode = 6;
inline bool Ext4DaReserveSpaceFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4DaReserveSpaceFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.mode)
}
inline ::uint32_t Ext4DaReserveSpaceFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mode_ = value;
}

// optional int32 md_needed = 7;
inline bool Ext4DaReserveSpaceFtraceEvent::has_md_needed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4DaReserveSpaceFtraceEvent::clear_md_needed() {
  _impl_.md_needed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Ext4DaReserveSpaceFtraceEvent::md_needed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.md_needed)
  return _internal_md_needed();
}
inline void Ext4DaReserveSpaceFtraceEvent::set_md_needed(::int32_t value) {
  _internal_set_md_needed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaReserveSpaceFtraceEvent.md_needed)
}
inline ::int32_t Ext4DaReserveSpaceFtraceEvent::_internal_md_needed() const {
  return _impl_.md_needed_;
}
inline void Ext4DaReserveSpaceFtraceEvent::_internal_set_md_needed(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.md_needed_ = value;
}

// -------------------------------------------------------------------

// Ext4DaUpdateReserveSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaUpdateReserveSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.dev)
}
inline ::uint64_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaUpdateReserveSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.ino)
}
inline ::uint64_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 i_blocks = 3;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_i_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_i_blocks() {
  _impl_.i_blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4DaUpdateReserveSpaceFtraceEvent::i_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.i_blocks)
  return _internal_i_blocks();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_i_blocks(::uint64_t value) {
  _internal_set_i_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.i_blocks)
}
inline ::uint64_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_i_blocks() const {
  return _impl_.i_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_i_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.i_blocks_ = value;
}

// optional int32 used_blocks = 4;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_used_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_used_blocks() {
  _impl_.used_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::used_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.used_blocks)
  return _internal_used_blocks();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_used_blocks(::int32_t value) {
  _internal_set_used_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.used_blocks)
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_used_blocks() const {
  return _impl_.used_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_used_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.used_blocks_ = value;
}

// optional int32 reserved_data_blocks = 5;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_reserved_data_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_reserved_data_blocks() {
  _impl_.reserved_data_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::reserved_data_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_data_blocks)
  return _internal_reserved_data_blocks();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_reserved_data_blocks(::int32_t value) {
  _internal_set_reserved_data_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_data_blocks)
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_reserved_data_blocks() const {
  return _impl_.reserved_data_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_reserved_data_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.reserved_data_blocks_ = value;
}

// optional int32 reserved_meta_blocks = 6;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_reserved_meta_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_reserved_meta_blocks() {
  _impl_.reserved_meta_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::reserved_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_meta_blocks)
  return _internal_reserved_meta_blocks();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_reserved_meta_blocks(::int32_t value) {
  _internal_set_reserved_meta_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.reserved_meta_blocks)
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_reserved_meta_blocks() const {
  return _impl_.reserved_meta_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_reserved_meta_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.reserved_meta_blocks_ = value;
}

// optional int32 allocated_meta_blocks = 7;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_allocated_meta_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_allocated_meta_blocks() {
  _impl_.allocated_meta_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::allocated_meta_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.allocated_meta_blocks)
  return _internal_allocated_meta_blocks();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_allocated_meta_blocks(::int32_t value) {
  _internal_set_allocated_meta_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.allocated_meta_blocks)
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_allocated_meta_blocks() const {
  return _impl_.allocated_meta_blocks_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_allocated_meta_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.allocated_meta_blocks_ = value;
}

// optional int32 quota_claim = 8;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_quota_claim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_quota_claim() {
  _impl_.quota_claim_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::quota_claim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.quota_claim)
  return _internal_quota_claim();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_quota_claim(::int32_t value) {
  _internal_set_quota_claim(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.quota_claim)
}
inline ::int32_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_quota_claim() const {
  return _impl_.quota_claim_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_quota_claim(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.quota_claim_ = value;
}

// optional uint32 mode = 9;
inline bool Ext4DaUpdateReserveSpaceFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Ext4DaUpdateReserveSpaceFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent.mode)
}
inline ::uint32_t Ext4DaUpdateReserveSpaceFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4DaUpdateReserveSpaceFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4DaWritePagesFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWritePagesFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaWritePagesFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.dev)
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaWritePagesFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaWritePagesFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.ino)
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 first_page = 3;
inline bool Ext4DaWritePagesFtraceEvent::has_first_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_first_page() {
  _impl_.first_page_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::first_page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.first_page)
  return _internal_first_page();
}
inline void Ext4DaWritePagesFtraceEvent::set_first_page(::uint64_t value) {
  _internal_set_first_page(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.first_page)
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::_internal_first_page() const {
  return _impl_.first_page_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_first_page(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.first_page_ = value;
}

// optional int64 nr_to_write = 4;
inline bool Ext4DaWritePagesFtraceEvent::has_nr_to_write() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_nr_to_write() {
  _impl_.nr_to_write_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4DaWritePagesFtraceEvent::nr_to_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.nr_to_write)
  return _internal_nr_to_write();
}
inline void Ext4DaWritePagesFtraceEvent::set_nr_to_write(::int64_t value) {
  _internal_set_nr_to_write(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.nr_to_write)
}
inline ::int64_t Ext4DaWritePagesFtraceEvent::_internal_nr_to_write() const {
  return _impl_.nr_to_write_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_nr_to_write(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nr_to_write_ = value;
}

// optional int32 sync_mode = 5;
inline bool Ext4DaWritePagesFtraceEvent::has_sync_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_sync_mode() {
  _impl_.sync_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4DaWritePagesFtraceEvent::sync_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.sync_mode)
  return _internal_sync_mode();
}
inline void Ext4DaWritePagesFtraceEvent::set_sync_mode(::int32_t value) {
  _internal_set_sync_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.sync_mode)
}
inline ::int32_t Ext4DaWritePagesFtraceEvent::_internal_sync_mode() const {
  return _impl_.sync_mode_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_sync_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sync_mode_ = value;
}

// optional uint64 b_blocknr = 6;
inline bool Ext4DaWritePagesFtraceEvent::has_b_blocknr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_b_blocknr() {
  _impl_.b_blocknr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::b_blocknr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_blocknr)
  return _internal_b_blocknr();
}
inline void Ext4DaWritePagesFtraceEvent::set_b_blocknr(::uint64_t value) {
  _internal_set_b_blocknr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_blocknr)
}
inline ::uint64_t Ext4DaWritePagesFtraceEvent::_internal_b_blocknr() const {
  return _impl_.b_blocknr_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_b_blocknr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.b_blocknr_ = value;
}

// optional uint32 b_size = 7;
inline bool Ext4DaWritePagesFtraceEvent::has_b_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_b_size() {
  _impl_.b_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4DaWritePagesFtraceEvent::b_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_size)
  return _internal_b_size();
}
inline void Ext4DaWritePagesFtraceEvent::set_b_size(::uint32_t value) {
  _internal_set_b_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_size)
}
inline ::uint32_t Ext4DaWritePagesFtraceEvent::_internal_b_size() const {
  return _impl_.b_size_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_b_size(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.b_size_ = value;
}

// optional uint32 b_state = 8;
inline bool Ext4DaWritePagesFtraceEvent::has_b_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_b_state() {
  _impl_.b_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Ext4DaWritePagesFtraceEvent::b_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_state)
  return _internal_b_state();
}
inline void Ext4DaWritePagesFtraceEvent::set_b_state(::uint32_t value) {
  _internal_set_b_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.b_state)
}
inline ::uint32_t Ext4DaWritePagesFtraceEvent::_internal_b_state() const {
  return _impl_.b_state_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_b_state(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.b_state_ = value;
}

// optional int32 io_done = 9;
inline bool Ext4DaWritePagesFtraceEvent::has_io_done() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_io_done() {
  _impl_.io_done_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Ext4DaWritePagesFtraceEvent::io_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.io_done)
  return _internal_io_done();
}
inline void Ext4DaWritePagesFtraceEvent::set_io_done(::int32_t value) {
  _internal_set_io_done(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.io_done)
}
inline ::int32_t Ext4DaWritePagesFtraceEvent::_internal_io_done() const {
  return _impl_.io_done_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_io_done(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.io_done_ = value;
}

// optional int32 pages_written = 10;
inline bool Ext4DaWritePagesFtraceEvent::has_pages_written() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4DaWritePagesFtraceEvent::clear_pages_written() {
  _impl_.pages_written_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Ext4DaWritePagesFtraceEvent::pages_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesFtraceEvent.pages_written)
  return _internal_pages_written();
}
inline void Ext4DaWritePagesFtraceEvent::set_pages_written(::int32_t value) {
  _internal_set_pages_written(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesFtraceEvent.pages_written)
}
inline ::int32_t Ext4DaWritePagesFtraceEvent::_internal_pages_written() const {
  return _impl_.pages_written_;
}
inline void Ext4DaWritePagesFtraceEvent::_internal_set_pages_written(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pages_written_ = value;
}

// -------------------------------------------------------------------

// Ext4DaWritePagesExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DaWritePagesExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.dev)
}
inline ::uint64_t Ext4DaWritePagesExtentFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DaWritePagesExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.ino)
}
inline ::uint64_t Ext4DaWritePagesExtentFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 lblk = 3;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_lblk() {
  _impl_.lblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4DaWritePagesExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_lblk(::uint64_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.lblk)
}
inline ::uint64_t Ext4DaWritePagesExtentFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::_internal_set_lblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4DaWritePagesExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.len)
  return _internal_len();
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.len)
}
inline ::uint32_t Ext4DaWritePagesExtentFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 flags = 5;
inline bool Ext4DaWritePagesExtentFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DaWritePagesExtentFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4DaWritePagesExtentFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4DaWritePagesExtentFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DaWritePagesExtentFtraceEvent.flags)
}
inline ::uint32_t Ext4DaWritePagesExtentFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4DaWritePagesExtentFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4DirectIOEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DirectIOEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DirectIOEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DirectIOEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4DirectIOEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DirectIOEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DirectIOEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DirectIOEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DirectIOEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4DirectIOEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DirectIOEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4DirectIOEnterFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4DirectIOEnterFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4DirectIOEnterFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.pos)
}
inline ::int64_t Ext4DirectIOEnterFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4DirectIOEnterFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint64 len = 4;
inline bool Ext4DirectIOEnterFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_len() {
  _impl_.len_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4DirectIOEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.len)
  return _internal_len();
}
inline void Ext4DirectIOEnterFtraceEvent::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.len)
}
inline ::uint64_t Ext4DirectIOEnterFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4DirectIOEnterFtraceEvent::_internal_set_len(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional int32 rw = 5;
inline bool Ext4DirectIOEnterFtraceEvent::has_rw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DirectIOEnterFtraceEvent::clear_rw() {
  _impl_.rw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4DirectIOEnterFtraceEvent::rw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOEnterFtraceEvent.rw)
  return _internal_rw();
}
inline void Ext4DirectIOEnterFtraceEvent::set_rw(::int32_t value) {
  _internal_set_rw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOEnterFtraceEvent.rw)
}
inline ::int32_t Ext4DirectIOEnterFtraceEvent::_internal_rw() const {
  return _impl_.rw_;
}
inline void Ext4DirectIOEnterFtraceEvent::_internal_set_rw(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rw_ = value;
}

// -------------------------------------------------------------------

// Ext4DirectIOExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DirectIOExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DirectIOExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DirectIOExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DirectIOExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.dev)
}
inline ::uint64_t Ext4DirectIOExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DirectIOExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DirectIOExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DirectIOExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DirectIOExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DirectIOExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.ino)
}
inline ::uint64_t Ext4DirectIOExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DirectIOExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4DirectIOExitFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DirectIOExitFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4DirectIOExitFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4DirectIOExitFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.pos)
}
inline ::int64_t Ext4DirectIOExitFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4DirectIOExitFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint64 len = 4;
inline bool Ext4DirectIOExitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DirectIOExitFtraceEvent::clear_len() {
  _impl_.len_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4DirectIOExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.len)
  return _internal_len();
}
inline void Ext4DirectIOExitFtraceEvent::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.len)
}
inline ::uint64_t Ext4DirectIOExitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4DirectIOExitFtraceEvent::_internal_set_len(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional int32 rw = 5;
inline bool Ext4DirectIOExitFtraceEvent::has_rw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4DirectIOExitFtraceEvent::clear_rw() {
  _impl_.rw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4DirectIOExitFtraceEvent::rw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.rw)
  return _internal_rw();
}
inline void Ext4DirectIOExitFtraceEvent::set_rw(::int32_t value) {
  _internal_set_rw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.rw)
}
inline ::int32_t Ext4DirectIOExitFtraceEvent::_internal_rw() const {
  return _impl_.rw_;
}
inline void Ext4DirectIOExitFtraceEvent::_internal_set_rw(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rw_ = value;
}

// optional int32 ret = 6;
inline bool Ext4DirectIOExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4DirectIOExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4DirectIOExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DirectIOExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4DirectIOExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DirectIOExitFtraceEvent.ret)
}
inline ::int32_t Ext4DirectIOExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4DirectIOExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4DiscardBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DiscardBlocksFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DiscardBlocksFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DiscardBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardBlocksFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DiscardBlocksFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardBlocksFtraceEvent.dev)
}
inline ::uint64_t Ext4DiscardBlocksFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DiscardBlocksFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 blk = 2;
inline bool Ext4DiscardBlocksFtraceEvent::has_blk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DiscardBlocksFtraceEvent::clear_blk() {
  _impl_.blk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DiscardBlocksFtraceEvent::blk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardBlocksFtraceEvent.blk)
  return _internal_blk();
}
inline void Ext4DiscardBlocksFtraceEvent::set_blk(::uint64_t value) {
  _internal_set_blk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardBlocksFtraceEvent.blk)
}
inline ::uint64_t Ext4DiscardBlocksFtraceEvent::_internal_blk() const {
  return _impl_.blk_;
}
inline void Ext4DiscardBlocksFtraceEvent::_internal_set_blk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.blk_ = value;
}

// optional uint64 count = 3;
inline bool Ext4DiscardBlocksFtraceEvent::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DiscardBlocksFtraceEvent::clear_count() {
  _impl_.count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4DiscardBlocksFtraceEvent::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardBlocksFtraceEvent.count)
  return _internal_count();
}
inline void Ext4DiscardBlocksFtraceEvent::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardBlocksFtraceEvent.count)
}
inline ::uint64_t Ext4DiscardBlocksFtraceEvent::_internal_count() const {
  return _impl_.count_;
}
inline void Ext4DiscardBlocksFtraceEvent::_internal_set_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// Ext4DiscardPreallocationsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DiscardPreallocationsFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DiscardPreallocationsFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DiscardPreallocationsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DiscardPreallocationsFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.dev)
}
inline ::uint64_t Ext4DiscardPreallocationsFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DiscardPreallocationsFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DiscardPreallocationsFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DiscardPreallocationsFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DiscardPreallocationsFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DiscardPreallocationsFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.ino)
}
inline ::uint64_t Ext4DiscardPreallocationsFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DiscardPreallocationsFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 len = 3;
inline bool Ext4DiscardPreallocationsFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DiscardPreallocationsFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4DiscardPreallocationsFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.len)
  return _internal_len();
}
inline void Ext4DiscardPreallocationsFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.len)
}
inline ::uint32_t Ext4DiscardPreallocationsFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4DiscardPreallocationsFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.len_ = value;
}

// optional uint32 needed = 4;
inline bool Ext4DiscardPreallocationsFtraceEvent::has_needed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4DiscardPreallocationsFtraceEvent::clear_needed() {
  _impl_.needed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4DiscardPreallocationsFtraceEvent::needed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.needed)
  return _internal_needed();
}
inline void Ext4DiscardPreallocationsFtraceEvent::set_needed(::uint32_t value) {
  _internal_set_needed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DiscardPreallocationsFtraceEvent.needed)
}
inline ::uint32_t Ext4DiscardPreallocationsFtraceEvent::_internal_needed() const {
  return _impl_.needed_;
}
inline void Ext4DiscardPreallocationsFtraceEvent::_internal_set_needed(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.needed_ = value;
}

// -------------------------------------------------------------------

// Ext4DropInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4DropInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4DropInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4DropInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DropInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4DropInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DropInodeFtraceEvent.dev)
}
inline ::uint64_t Ext4DropInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4DropInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4DropInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4DropInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4DropInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DropInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4DropInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DropInodeFtraceEvent.ino)
}
inline ::uint64_t Ext4DropInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4DropInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 drop = 3;
inline bool Ext4DropInodeFtraceEvent::has_drop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4DropInodeFtraceEvent::clear_drop() {
  _impl_.drop_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4DropInodeFtraceEvent::drop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4DropInodeFtraceEvent.drop)
  return _internal_drop();
}
inline void Ext4DropInodeFtraceEvent::set_drop(::int32_t value) {
  _internal_set_drop(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4DropInodeFtraceEvent.drop)
}
inline ::int32_t Ext4DropInodeFtraceEvent::_internal_drop() const {
  return _impl_.drop_;
}
inline void Ext4DropInodeFtraceEvent::_internal_set_drop(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.drop_ = value;
}

// -------------------------------------------------------------------

// Ext4EsCacheExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsCacheExtentFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsCacheExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsCacheExtentFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.dev)
}
inline ::uint64_t Ext4EsCacheExtentFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsCacheExtentFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsCacheExtentFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsCacheExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsCacheExtentFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.ino)
}
inline ::uint64_t Ext4EsCacheExtentFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsCacheExtentFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4EsCacheExtentFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4EsCacheExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsCacheExtentFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.lblk)
}
inline ::uint32_t Ext4EsCacheExtentFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsCacheExtentFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4EsCacheExtentFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4EsCacheExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.len)
  return _internal_len();
}
inline void Ext4EsCacheExtentFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.len)
}
inline ::uint32_t Ext4EsCacheExtentFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4EsCacheExtentFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint64 pblk = 5;
inline bool Ext4EsCacheExtentFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4EsCacheExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4EsCacheExtentFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.pblk)
}
inline ::uint64_t Ext4EsCacheExtentFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4EsCacheExtentFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pblk_ = value;
}

// optional uint32 status = 6;
inline bool Ext4EsCacheExtentFtraceEvent::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4EsCacheExtentFtraceEvent::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4EsCacheExtentFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsCacheExtentFtraceEvent.status)
  return _internal_status();
}
inline void Ext4EsCacheExtentFtraceEvent::set_status(::uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsCacheExtentFtraceEvent.status)
}
inline ::uint32_t Ext4EsCacheExtentFtraceEvent::_internal_status() const {
  return _impl_.status_;
}
inline void Ext4EsCacheExtentFtraceEvent::_internal_set_status(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// Ext4EsFindDelayedExtentRangeEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsFindDelayedExtentRangeEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsFindDelayedExtentRangeEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4EsFindDelayedExtentRangeEnterFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4EsFindDelayedExtentRangeEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent.lblk)
}
inline ::uint32_t Ext4EsFindDelayedExtentRangeEnterFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsFindDelayedExtentRangeEnterFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// -------------------------------------------------------------------

// Ext4EsFindDelayedExtentRangeExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.dev)
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.ino)
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.lblk)
}
inline ::uint32_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.len)
  return _internal_len();
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.len)
}
inline ::uint32_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint64 pblk = 5;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.pblk)
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pblk_ = value;
}

// optional uint64 status = 6;
inline bool Ext4EsFindDelayedExtentRangeExitFtraceEvent::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::clear_status() {
  _impl_.status_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.status)
  return _internal_status();
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::set_status(::uint64_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent.status)
}
inline ::uint64_t Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_status() const {
  return _impl_.status_;
}
inline void Ext4EsFindDelayedExtentRangeExitFtraceEvent::_internal_set_status(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// Ext4EsInsertExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsInsertExtentFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsInsertExtentFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.dev)
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsInsertExtentFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsInsertExtentFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsInsertExtentFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.ino)
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsInsertExtentFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4EsInsertExtentFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4EsInsertExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsInsertExtentFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.lblk)
}
inline ::uint32_t Ext4EsInsertExtentFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsInsertExtentFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4EsInsertExtentFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4EsInsertExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.len)
  return _internal_len();
}
inline void Ext4EsInsertExtentFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.len)
}
inline ::uint32_t Ext4EsInsertExtentFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4EsInsertExtentFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint64 pblk = 5;
inline bool Ext4EsInsertExtentFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4EsInsertExtentFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.pblk)
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4EsInsertExtentFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pblk_ = value;
}

// optional uint64 status = 6;
inline bool Ext4EsInsertExtentFtraceEvent::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4EsInsertExtentFtraceEvent::clear_status() {
  _impl_.status_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsInsertExtentFtraceEvent.status)
  return _internal_status();
}
inline void Ext4EsInsertExtentFtraceEvent::set_status(::uint64_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsInsertExtentFtraceEvent.status)
}
inline ::uint64_t Ext4EsInsertExtentFtraceEvent::_internal_status() const {
  return _impl_.status_;
}
inline void Ext4EsInsertExtentFtraceEvent::_internal_set_status(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// Ext4EsLookupExtentEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsLookupExtentEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsLookupExtentEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsLookupExtentEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4EsLookupExtentEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsLookupExtentEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsLookupExtentEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsLookupExtentEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4EsLookupExtentEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4EsLookupExtentEnterFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4EsLookupExtentEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsLookupExtentEnterFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent.lblk)
}
inline ::uint32_t Ext4EsLookupExtentEnterFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsLookupExtentEnterFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// -------------------------------------------------------------------

// Ext4EsLookupExtentExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.dev)
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.ino)
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4EsLookupExtentExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.lblk)
}
inline ::uint32_t Ext4EsLookupExtentExitFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4EsLookupExtentExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.len)
  return _internal_len();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.len)
}
inline ::uint32_t Ext4EsLookupExtentExitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint64 pblk = 5;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.pblk)
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pblk_ = value;
}

// optional uint64 status = 6;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_status() {
  _impl_.status_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.status)
  return _internal_status();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_status(::uint64_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.status)
}
inline ::uint64_t Ext4EsLookupExtentExitFtraceEvent::_internal_status() const {
  return _impl_.status_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_status(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.status_ = value;
}

// optional int32 found = 7;
inline bool Ext4EsLookupExtentExitFtraceEvent::has_found() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4EsLookupExtentExitFtraceEvent::clear_found() {
  _impl_.found_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Ext4EsLookupExtentExitFtraceEvent::found() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.found)
  return _internal_found();
}
inline void Ext4EsLookupExtentExitFtraceEvent::set_found(::int32_t value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsLookupExtentExitFtraceEvent.found)
}
inline ::int32_t Ext4EsLookupExtentExitFtraceEvent::_internal_found() const {
  return _impl_.found_;
}
inline void Ext4EsLookupExtentExitFtraceEvent::_internal_set_found(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.found_ = value;
}

// -------------------------------------------------------------------

// Ext4EsRemoveExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsRemoveExtentFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsRemoveExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsRemoveExtentFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.dev)
}
inline ::uint64_t Ext4EsRemoveExtentFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsRemoveExtentFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EsRemoveExtentFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsRemoveExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EsRemoveExtentFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.ino)
}
inline ::uint64_t Ext4EsRemoveExtentFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EsRemoveExtentFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 lblk = 3;
inline bool Ext4EsRemoveExtentFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_lblk() {
  _impl_.lblk_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4EsRemoveExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4EsRemoveExtentFtraceEvent::set_lblk(::int64_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.lblk)
}
inline ::int64_t Ext4EsRemoveExtentFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4EsRemoveExtentFtraceEvent::_internal_set_lblk(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional int64 len = 4;
inline bool Ext4EsRemoveExtentFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4EsRemoveExtentFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4EsRemoveExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.len)
  return _internal_len();
}
inline void Ext4EsRemoveExtentFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsRemoveExtentFtraceEvent.len)
}
inline ::int64_t Ext4EsRemoveExtentFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4EsRemoveExtentFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4EsShrinkFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsShrinkFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsShrinkFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsShrinkFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.dev)
}
inline ::uint64_t Ext4EsShrinkFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsShrinkFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 nr_shrunk = 2;
inline bool Ext4EsShrinkFtraceEvent::has_nr_shrunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsShrinkFtraceEvent::clear_nr_shrunk() {
  _impl_.nr_shrunk_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4EsShrinkFtraceEvent::nr_shrunk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_shrunk)
  return _internal_nr_shrunk();
}
inline void Ext4EsShrinkFtraceEvent::set_nr_shrunk(::int32_t value) {
  _internal_set_nr_shrunk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_shrunk)
}
inline ::int32_t Ext4EsShrinkFtraceEvent::_internal_nr_shrunk() const {
  return _impl_.nr_shrunk_;
}
inline void Ext4EsShrinkFtraceEvent::_internal_set_nr_shrunk(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nr_shrunk_ = value;
}

// optional uint64 scan_time = 3;
inline bool Ext4EsShrinkFtraceEvent::has_scan_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsShrinkFtraceEvent::clear_scan_time() {
  _impl_.scan_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EsShrinkFtraceEvent::scan_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.scan_time)
  return _internal_scan_time();
}
inline void Ext4EsShrinkFtraceEvent::set_scan_time(::uint64_t value) {
  _internal_set_scan_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.scan_time)
}
inline ::uint64_t Ext4EsShrinkFtraceEvent::_internal_scan_time() const {
  return _impl_.scan_time_;
}
inline void Ext4EsShrinkFtraceEvent::_internal_set_scan_time(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scan_time_ = value;
}

// optional int32 nr_skipped = 4;
inline bool Ext4EsShrinkFtraceEvent::has_nr_skipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4EsShrinkFtraceEvent::clear_nr_skipped() {
  _impl_.nr_skipped_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4EsShrinkFtraceEvent::nr_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_skipped)
  return _internal_nr_skipped();
}
inline void Ext4EsShrinkFtraceEvent::set_nr_skipped(::int32_t value) {
  _internal_set_nr_skipped(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.nr_skipped)
}
inline ::int32_t Ext4EsShrinkFtraceEvent::_internal_nr_skipped() const {
  return _impl_.nr_skipped_;
}
inline void Ext4EsShrinkFtraceEvent::_internal_set_nr_skipped(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nr_skipped_ = value;
}

// optional int32 retried = 5;
inline bool Ext4EsShrinkFtraceEvent::has_retried() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4EsShrinkFtraceEvent::clear_retried() {
  _impl_.retried_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4EsShrinkFtraceEvent::retried() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkFtraceEvent.retried)
  return _internal_retried();
}
inline void Ext4EsShrinkFtraceEvent::set_retried(::int32_t value) {
  _internal_set_retried(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkFtraceEvent.retried)
}
inline ::int32_t Ext4EsShrinkFtraceEvent::_internal_retried() const {
  return _impl_.retried_;
}
inline void Ext4EsShrinkFtraceEvent::_internal_set_retried(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.retried_ = value;
}

// -------------------------------------------------------------------

// Ext4EsShrinkCountFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkCountFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsShrinkCountFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsShrinkCountFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkCountFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsShrinkCountFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkCountFtraceEvent.dev)
}
inline ::uint64_t Ext4EsShrinkCountFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsShrinkCountFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 nr_to_scan = 2;
inline bool Ext4EsShrinkCountFtraceEvent::has_nr_to_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsShrinkCountFtraceEvent::clear_nr_to_scan() {
  _impl_.nr_to_scan_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4EsShrinkCountFtraceEvent::nr_to_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkCountFtraceEvent.nr_to_scan)
  return _internal_nr_to_scan();
}
inline void Ext4EsShrinkCountFtraceEvent::set_nr_to_scan(::int32_t value) {
  _internal_set_nr_to_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkCountFtraceEvent.nr_to_scan)
}
inline ::int32_t Ext4EsShrinkCountFtraceEvent::_internal_nr_to_scan() const {
  return _impl_.nr_to_scan_;
}
inline void Ext4EsShrinkCountFtraceEvent::_internal_set_nr_to_scan(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nr_to_scan_ = value;
}

// optional int32 cache_cnt = 3;
inline bool Ext4EsShrinkCountFtraceEvent::has_cache_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsShrinkCountFtraceEvent::clear_cache_cnt() {
  _impl_.cache_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4EsShrinkCountFtraceEvent::cache_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkCountFtraceEvent.cache_cnt)
  return _internal_cache_cnt();
}
inline void Ext4EsShrinkCountFtraceEvent::set_cache_cnt(::int32_t value) {
  _internal_set_cache_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkCountFtraceEvent.cache_cnt)
}
inline ::int32_t Ext4EsShrinkCountFtraceEvent::_internal_cache_cnt() const {
  return _impl_.cache_cnt_;
}
inline void Ext4EsShrinkCountFtraceEvent::_internal_set_cache_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cache_cnt_ = value;
}

// -------------------------------------------------------------------

// Ext4EsShrinkScanEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkScanEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsShrinkScanEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsShrinkScanEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4EsShrinkScanEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 nr_to_scan = 2;
inline bool Ext4EsShrinkScanEnterFtraceEvent::has_nr_to_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::clear_nr_to_scan() {
  _impl_.nr_to_scan_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4EsShrinkScanEnterFtraceEvent::nr_to_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.nr_to_scan)
  return _internal_nr_to_scan();
}
inline void Ext4EsShrinkScanEnterFtraceEvent::set_nr_to_scan(::int32_t value) {
  _internal_set_nr_to_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.nr_to_scan)
}
inline ::int32_t Ext4EsShrinkScanEnterFtraceEvent::_internal_nr_to_scan() const {
  return _impl_.nr_to_scan_;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::_internal_set_nr_to_scan(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nr_to_scan_ = value;
}

// optional int32 cache_cnt = 3;
inline bool Ext4EsShrinkScanEnterFtraceEvent::has_cache_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::clear_cache_cnt() {
  _impl_.cache_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4EsShrinkScanEnterFtraceEvent::cache_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.cache_cnt)
  return _internal_cache_cnt();
}
inline void Ext4EsShrinkScanEnterFtraceEvent::set_cache_cnt(::int32_t value) {
  _internal_set_cache_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent.cache_cnt)
}
inline ::int32_t Ext4EsShrinkScanEnterFtraceEvent::_internal_cache_cnt() const {
  return _impl_.cache_cnt_;
}
inline void Ext4EsShrinkScanEnterFtraceEvent::_internal_set_cache_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cache_cnt_ = value;
}

// -------------------------------------------------------------------

// Ext4EsShrinkScanExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EsShrinkScanExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EsShrinkScanExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EsShrinkScanExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EsShrinkScanExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.dev)
}
inline ::uint64_t Ext4EsShrinkScanExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EsShrinkScanExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 nr_shrunk = 2;
inline bool Ext4EsShrinkScanExitFtraceEvent::has_nr_shrunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EsShrinkScanExitFtraceEvent::clear_nr_shrunk() {
  _impl_.nr_shrunk_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4EsShrinkScanExitFtraceEvent::nr_shrunk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.nr_shrunk)
  return _internal_nr_shrunk();
}
inline void Ext4EsShrinkScanExitFtraceEvent::set_nr_shrunk(::int32_t value) {
  _internal_set_nr_shrunk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.nr_shrunk)
}
inline ::int32_t Ext4EsShrinkScanExitFtraceEvent::_internal_nr_shrunk() const {
  return _impl_.nr_shrunk_;
}
inline void Ext4EsShrinkScanExitFtraceEvent::_internal_set_nr_shrunk(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nr_shrunk_ = value;
}

// optional int32 cache_cnt = 3;
inline bool Ext4EsShrinkScanExitFtraceEvent::has_cache_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EsShrinkScanExitFtraceEvent::clear_cache_cnt() {
  _impl_.cache_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4EsShrinkScanExitFtraceEvent::cache_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.cache_cnt)
  return _internal_cache_cnt();
}
inline void Ext4EsShrinkScanExitFtraceEvent::set_cache_cnt(::int32_t value) {
  _internal_set_cache_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EsShrinkScanExitFtraceEvent.cache_cnt)
}
inline ::int32_t Ext4EsShrinkScanExitFtraceEvent::_internal_cache_cnt() const {
  return _impl_.cache_cnt_;
}
inline void Ext4EsShrinkScanExitFtraceEvent::_internal_set_cache_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cache_cnt_ = value;
}

// -------------------------------------------------------------------

// Ext4EvictInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4EvictInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4EvictInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4EvictInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EvictInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4EvictInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EvictInodeFtraceEvent.dev)
}
inline ::uint64_t Ext4EvictInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4EvictInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4EvictInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4EvictInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4EvictInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EvictInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4EvictInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EvictInodeFtraceEvent.ino)
}
inline ::uint64_t Ext4EvictInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4EvictInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 nlink = 3;
inline bool Ext4EvictInodeFtraceEvent::has_nlink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4EvictInodeFtraceEvent::clear_nlink() {
  _impl_.nlink_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4EvictInodeFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4EvictInodeFtraceEvent.nlink)
  return _internal_nlink();
}
inline void Ext4EvictInodeFtraceEvent::set_nlink(::int32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4EvictInodeFtraceEvent.nlink)
}
inline ::int32_t Ext4EvictInodeFtraceEvent::_internal_nlink() const {
  return _impl_.nlink_;
}
inline void Ext4EvictInodeFtraceEvent::_internal_set_nlink(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nlink_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtConvertToInitializedEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtConvertToInitializedEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtConvertToInitializedEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 m_lblk = 3;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_m_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_m_lblk() {
  _impl_.m_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::m_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_lblk)
  return _internal_m_lblk();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_m_lblk(::uint32_t value) {
  _internal_set_m_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_lblk)
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_m_lblk() const {
  return _impl_.m_lblk_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_m_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_lblk_ = value;
}

// optional uint32 m_len = 4;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_m_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_m_len() {
  _impl_.m_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::m_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_len)
  return _internal_m_len();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_m_len(::uint32_t value) {
  _internal_set_m_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.m_len)
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_m_len() const {
  return _impl_.m_len_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_m_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_len_ = value;
}

// optional uint32 u_lblk = 5;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_u_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_u_lblk() {
  _impl_.u_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::u_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_lblk)
  return _internal_u_lblk();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_u_lblk(::uint32_t value) {
  _internal_set_u_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_lblk)
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_u_lblk() const {
  return _impl_.u_lblk_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_u_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.u_lblk_ = value;
}

// optional uint32 u_len = 6;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_u_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_u_len() {
  _impl_.u_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::u_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_len)
  return _internal_u_len();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_u_len(::uint32_t value) {
  _internal_set_u_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_len)
}
inline ::uint32_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_u_len() const {
  return _impl_.u_len_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_u_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.u_len_ = value;
}

// optional uint64 u_pblk = 7;
inline bool Ext4ExtConvertToInitializedEnterFtraceEvent::has_u_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::clear_u_pblk() {
  _impl_.u_pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Ext4ExtConvertToInitializedEnterFtraceEvent::u_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_pblk)
  return _internal_u_pblk();
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::set_u_pblk(::uint64_t value) {
  _internal_set_u_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent.u_pblk)
}
inline ::uint64_t Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_u_pblk() const {
  return _impl_.u_pblk_;
}
inline void Ext4ExtConvertToInitializedEnterFtraceEvent::_internal_set_u_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.u_pblk_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtConvertToInitializedFastpathFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 m_lblk = 3;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_m_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_m_lblk() {
  _impl_.m_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::m_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_lblk)
  return _internal_m_lblk();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_m_lblk(::uint32_t value) {
  _internal_set_m_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_lblk)
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_m_lblk() const {
  return _impl_.m_lblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_m_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_lblk_ = value;
}

// optional uint32 m_len = 4;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_m_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_m_len() {
  _impl_.m_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::m_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_len)
  return _internal_m_len();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_m_len(::uint32_t value) {
  _internal_set_m_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.m_len)
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_m_len() const {
  return _impl_.m_len_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_m_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_len_ = value;
}

// optional uint32 u_lblk = 5;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_u_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_u_lblk() {
  _impl_.u_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::u_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_lblk)
  return _internal_u_lblk();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_u_lblk(::uint32_t value) {
  _internal_set_u_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_lblk)
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_u_lblk() const {
  return _impl_.u_lblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_u_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.u_lblk_ = value;
}

// optional uint32 u_len = 6;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_u_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_u_len() {
  _impl_.u_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::u_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_len)
  return _internal_u_len();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_u_len(::uint32_t value) {
  _internal_set_u_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_len)
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_u_len() const {
  return _impl_.u_len_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_u_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.u_len_ = value;
}

// optional uint64 u_pblk = 7;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_u_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_u_pblk() {
  _impl_.u_pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::u_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_pblk)
  return _internal_u_pblk();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_u_pblk(::uint64_t value) {
  _internal_set_u_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.u_pblk)
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_u_pblk() const {
  return _impl_.u_pblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_u_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.u_pblk_ = value;
}

// optional uint32 i_lblk = 8;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_i_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_i_lblk() {
  _impl_.i_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::i_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_lblk)
  return _internal_i_lblk();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_i_lblk(::uint32_t value) {
  _internal_set_i_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_lblk)
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_i_lblk() const {
  return _impl_.i_lblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_i_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.i_lblk_ = value;
}

// optional uint32 i_len = 9;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_i_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_i_len() {
  _impl_.i_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::i_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_len)
  return _internal_i_len();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_i_len(::uint32_t value) {
  _internal_set_i_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_len)
}
inline ::uint32_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_i_len() const {
  return _impl_.i_len_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_i_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.i_len_ = value;
}

// optional uint64 i_pblk = 10;
inline bool Ext4ExtConvertToInitializedFastpathFtraceEvent::has_i_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::clear_i_pblk() {
  _impl_.i_pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::i_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_pblk)
  return _internal_i_pblk();
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::set_i_pblk(::uint64_t value) {
  _internal_set_i_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent.i_pblk)
}
inline ::uint64_t Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_i_pblk() const {
  return _impl_.i_pblk_;
}
inline void Ext4ExtConvertToInitializedFastpathFtraceEvent::_internal_set_i_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.i_pblk_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtHandleUnwrittenExtentsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 flags = 3;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_flags() {
  _impl_.flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_flags(::int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.flags)
}
inline ::int32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_flags(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.flags_ = value;
}

// optional uint32 lblk = 4;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lblk_ = value;
}

// optional uint64 pblk = 5;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.pblk)
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pblk_ = value;
}

// optional uint32 len = 6;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.len)
  return _internal_len();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.len)
}
inline ::uint32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.len_ = value;
}

// optional uint32 allocated = 7;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_allocated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_allocated() {
  _impl_.allocated_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::allocated() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.allocated)
  return _internal_allocated();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_allocated(::uint32_t value) {
  _internal_set_allocated(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.allocated)
}
inline ::uint32_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_allocated() const {
  return _impl_.allocated_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_allocated(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.allocated_ = value;
}

// optional uint64 newblk = 8;
inline bool Ext4ExtHandleUnwrittenExtentsFtraceEvent::has_newblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::clear_newblk() {
  _impl_.newblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::newblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.newblk)
  return _internal_newblk();
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::set_newblk(::uint64_t value) {
  _internal_set_newblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent.newblk)
}
inline ::uint64_t Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_newblk() const {
  return _impl_.newblk_;
}
inline void Ext4ExtHandleUnwrittenExtentsFtraceEvent::_internal_set_newblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.newblk_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtInCacheFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtInCacheFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtInCacheFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtInCacheFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtInCacheFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtInCacheFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtInCacheFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtInCacheFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtInCacheFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtInCacheFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtInCacheFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtInCacheFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtInCacheFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4ExtInCacheFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtInCacheFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtInCacheFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtInCacheFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtInCacheFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtInCacheFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional int32 ret = 4;
inline bool Ext4ExtInCacheFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtInCacheFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4ExtInCacheFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtInCacheFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4ExtInCacheFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtInCacheFtraceEvent.ret)
}
inline ::int32_t Ext4ExtInCacheFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4ExtInCacheFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtLoadExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtLoadExtentFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtLoadExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtLoadExtentFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtLoadExtentFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtLoadExtentFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtLoadExtentFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtLoadExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtLoadExtentFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtLoadExtentFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtLoadExtentFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pblk = 3;
inline bool Ext4ExtLoadExtentFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ExtLoadExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4ExtLoadExtentFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.pblk)
}
inline ::uint64_t Ext4ExtLoadExtentFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4ExtLoadExtentFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pblk_ = value;
}

// optional uint32 lblk = 4;
inline bool Ext4ExtLoadExtentFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtLoadExtentFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtLoadExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtLoadExtentFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtLoadExtentFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtLoadExtentFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtLoadExtentFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lblk_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtMapBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtMapBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtMapBlocksEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtMapBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtMapBlocksEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtMapBlocksEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtMapBlocksEnterFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtMapBlocksEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.len)
  return _internal_len();
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.len)
}
inline ::uint32_t Ext4ExtMapBlocksEnterFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 flags = 5;
inline bool Ext4ExtMapBlocksEnterFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ExtMapBlocksEnterFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent.flags)
}
inline ::uint32_t Ext4ExtMapBlocksEnterFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4ExtMapBlocksEnterFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtMapBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtMapBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtMapBlocksExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtMapBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtMapBlocksExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 flags = 3;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.flags)
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}

// optional uint64 pblk = 4;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ExtMapBlocksExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.pblk)
}
inline ::uint64_t Ext4ExtMapBlocksExitFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pblk_ = value;
}

// optional uint32 lblk = 5;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 6;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.len)
  return _internal_len();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.len)
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.len_ = value;
}

// optional uint32 mflags = 7;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_mflags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_mflags() {
  _impl_.mflags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::mflags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.mflags)
  return _internal_mflags();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_mflags(::uint32_t value) {
  _internal_set_mflags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.mflags)
}
inline ::uint32_t Ext4ExtMapBlocksExitFtraceEvent::_internal_mflags() const {
  return _impl_.mflags_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_mflags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mflags_ = value;
}

// optional int32 ret = 8;
inline bool Ext4ExtMapBlocksExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Ext4ExtMapBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4ExtMapBlocksExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent.ret)
}
inline ::int32_t Ext4ExtMapBlocksExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4ExtMapBlocksExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtPutInCacheFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtPutInCacheFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtPutInCacheFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtPutInCacheFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtPutInCacheFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtPutInCacheFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtPutInCacheFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtPutInCacheFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtPutInCacheFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtPutInCacheFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtPutInCacheFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4ExtPutInCacheFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtPutInCacheFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtPutInCacheFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtPutInCacheFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtPutInCacheFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4ExtPutInCacheFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtPutInCacheFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.len)
  return _internal_len();
}
inline void Ext4ExtPutInCacheFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.len)
}
inline ::uint32_t Ext4ExtPutInCacheFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4ExtPutInCacheFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint64 start = 5;
inline bool Ext4ExtPutInCacheFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtPutInCacheFtraceEvent::clear_start() {
  _impl_.start_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4ExtPutInCacheFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.start)
  return _internal_start();
}
inline void Ext4ExtPutInCacheFtraceEvent::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtPutInCacheFtraceEvent.start)
}
inline ::uint64_t Ext4ExtPutInCacheFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void Ext4ExtPutInCacheFtraceEvent::_internal_set_start(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtRemoveSpaceFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtRemoveSpaceFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtRemoveSpaceFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtRemoveSpaceFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtRemoveSpaceFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 start = 3;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_start() {
  _impl_.start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtRemoveSpaceFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.start)
  return _internal_start();
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_start(::uint32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.start)
}
inline ::uint32_t Ext4ExtRemoveSpaceFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::_internal_set_start(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_ = value;
}

// optional uint32 end = 4;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_end() {
  _impl_.end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtRemoveSpaceFtraceEvent::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.end)
  return _internal_end();
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_end(::uint32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.end)
}
inline ::uint32_t Ext4ExtRemoveSpaceFtraceEvent::_internal_end() const {
  return _impl_.end_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::_internal_set_end(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_ = value;
}

// optional int32 depth = 5;
inline bool Ext4ExtRemoveSpaceFtraceEvent::has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::clear_depth() {
  _impl_.depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4ExtRemoveSpaceFtraceEvent::depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.depth)
  return _internal_depth();
}
inline void Ext4ExtRemoveSpaceFtraceEvent::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent.depth)
}
inline ::int32_t Ext4ExtRemoveSpaceFtraceEvent::_internal_depth() const {
  return _impl_.depth_;
}
inline void Ext4ExtRemoveSpaceFtraceEvent::_internal_set_depth(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.depth_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtRemoveSpaceDoneFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtRemoveSpaceDoneFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtRemoveSpaceDoneFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 start = 3;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_start() {
  _impl_.start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.start)
  return _internal_start();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_start(::uint32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.start)
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_start(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_ = value;
}

// optional uint32 end = 4;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_end() {
  _impl_.end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.end)
  return _internal_end();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_end(::uint32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.end)
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_end() const {
  return _impl_.end_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_end(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_ = value;
}

// optional int32 depth = 5;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_depth() {
  _impl_.depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4ExtRemoveSpaceDoneFtraceEvent::depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.depth)
  return _internal_depth();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.depth)
}
inline ::int32_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_depth() const {
  return _impl_.depth_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_depth(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.depth_ = value;
}

// optional int64 partial = 6;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_partial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_partial() {
  _impl_.partial_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Ext4ExtRemoveSpaceDoneFtraceEvent::partial() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.partial)
  return _internal_partial();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_partial(::int64_t value) {
  _internal_set_partial(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.partial)
}
inline ::int64_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_partial() const {
  return _impl_.partial_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_partial(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.partial_ = value;
}

// optional uint32 eh_entries = 7;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_eh_entries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_eh_entries() {
  _impl_.eh_entries_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::eh_entries() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.eh_entries)
  return _internal_eh_entries();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_eh_entries(::uint32_t value) {
  _internal_set_eh_entries(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.eh_entries)
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_eh_entries() const {
  return _impl_.eh_entries_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_eh_entries(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.eh_entries_ = value;
}

// optional uint32 pc_lblk = 8;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_pc_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_pc_lblk() {
  _impl_.pc_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::pc_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.pc_lblk)
  return _internal_pc_lblk();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_pc_lblk(::uint32_t value) {
  _internal_set_pc_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.pc_lblk)
}
inline ::uint32_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_pc_lblk() const {
  return _impl_.pc_lblk_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_pc_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pc_lblk_ = value;
}

// optional uint64 pc_pclu = 9;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_pc_pclu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_pc_pclu() {
  _impl_.pc_pclu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Ext4ExtRemoveSpaceDoneFtraceEvent::pc_pclu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.pc_pclu)
  return _internal_pc_pclu();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_pc_pclu(::uint64_t value) {
  _internal_set_pc_pclu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.pc_pclu)
}
inline ::uint64_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_pc_pclu() const {
  return _impl_.pc_pclu_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_pc_pclu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pc_pclu_ = value;
}

// optional int32 pc_state = 10;
inline bool Ext4ExtRemoveSpaceDoneFtraceEvent::has_pc_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::clear_pc_state() {
  _impl_.pc_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Ext4ExtRemoveSpaceDoneFtraceEvent::pc_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.pc_state)
  return _internal_pc_state();
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::set_pc_state(::int32_t value) {
  _internal_set_pc_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent.pc_state)
}
inline ::int32_t Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_pc_state() const {
  return _impl_.pc_state_;
}
inline void Ext4ExtRemoveSpaceDoneFtraceEvent::_internal_set_pc_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pc_state_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtRmIdxFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRmIdxFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtRmIdxFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtRmIdxFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmIdxFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtRmIdxFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmIdxFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtRmIdxFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtRmIdxFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtRmIdxFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtRmIdxFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtRmIdxFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmIdxFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtRmIdxFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmIdxFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtRmIdxFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtRmIdxFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pblk = 3;
inline bool Ext4ExtRmIdxFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtRmIdxFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ExtRmIdxFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmIdxFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4ExtRmIdxFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmIdxFtraceEvent.pblk)
}
inline ::uint64_t Ext4ExtRmIdxFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4ExtRmIdxFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pblk_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtRmLeafFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtRmLeafFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtRmLeafFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtRmLeafFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtRmLeafFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 partial = 3;
inline bool Ext4ExtRmLeafFtraceEvent::has_partial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_partial() {
  _impl_.partial_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4ExtRmLeafFtraceEvent::partial() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.partial)
  return _internal_partial();
}
inline void Ext4ExtRmLeafFtraceEvent::set_partial(::int64_t value) {
  _internal_set_partial(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.partial)
}
inline ::int64_t Ext4ExtRmLeafFtraceEvent::_internal_partial() const {
  return _impl_.partial_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_partial(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.partial_ = value;
}

// optional uint32 start = 4;
inline bool Ext4ExtRmLeafFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_start() {
  _impl_.start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtRmLeafFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.start)
  return _internal_start();
}
inline void Ext4ExtRmLeafFtraceEvent::set_start(::uint32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.start)
}
inline ::uint32_t Ext4ExtRmLeafFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_start(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_ = value;
}

// optional uint32 ee_lblk = 5;
inline bool Ext4ExtRmLeafFtraceEvent::has_ee_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ee_lblk() {
  _impl_.ee_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ExtRmLeafFtraceEvent::ee_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_lblk)
  return _internal_ee_lblk();
}
inline void Ext4ExtRmLeafFtraceEvent::set_ee_lblk(::uint32_t value) {
  _internal_set_ee_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_lblk)
}
inline ::uint32_t Ext4ExtRmLeafFtraceEvent::_internal_ee_lblk() const {
  return _impl_.ee_lblk_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_ee_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ee_lblk_ = value;
}

// optional uint64 ee_pblk = 6;
inline bool Ext4ExtRmLeafFtraceEvent::has_ee_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ee_pblk() {
  _impl_.ee_pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::ee_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_pblk)
  return _internal_ee_pblk();
}
inline void Ext4ExtRmLeafFtraceEvent::set_ee_pblk(::uint64_t value) {
  _internal_set_ee_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_pblk)
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::_internal_ee_pblk() const {
  return _impl_.ee_pblk_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_ee_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ee_pblk_ = value;
}

// optional int32 ee_len = 7;
inline bool Ext4ExtRmLeafFtraceEvent::has_ee_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_ee_len() {
  _impl_.ee_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Ext4ExtRmLeafFtraceEvent::ee_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_len)
  return _internal_ee_len();
}
inline void Ext4ExtRmLeafFtraceEvent::set_ee_len(::int32_t value) {
  _internal_set_ee_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.ee_len)
}
inline ::int32_t Ext4ExtRmLeafFtraceEvent::_internal_ee_len() const {
  return _impl_.ee_len_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_ee_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ee_len_ = value;
}

// optional uint32 pc_lblk = 8;
inline bool Ext4ExtRmLeafFtraceEvent::has_pc_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_pc_lblk() {
  _impl_.pc_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Ext4ExtRmLeafFtraceEvent::pc_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.pc_lblk)
  return _internal_pc_lblk();
}
inline void Ext4ExtRmLeafFtraceEvent::set_pc_lblk(::uint32_t value) {
  _internal_set_pc_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.pc_lblk)
}
inline ::uint32_t Ext4ExtRmLeafFtraceEvent::_internal_pc_lblk() const {
  return _impl_.pc_lblk_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_pc_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pc_lblk_ = value;
}

// optional uint64 pc_pclu = 9;
inline bool Ext4ExtRmLeafFtraceEvent::has_pc_pclu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_pc_pclu() {
  _impl_.pc_pclu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::pc_pclu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.pc_pclu)
  return _internal_pc_pclu();
}
inline void Ext4ExtRmLeafFtraceEvent::set_pc_pclu(::uint64_t value) {
  _internal_set_pc_pclu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.pc_pclu)
}
inline ::uint64_t Ext4ExtRmLeafFtraceEvent::_internal_pc_pclu() const {
  return _impl_.pc_pclu_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_pc_pclu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pc_pclu_ = value;
}

// optional int32 pc_state = 10;
inline bool Ext4ExtRmLeafFtraceEvent::has_pc_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4ExtRmLeafFtraceEvent::clear_pc_state() {
  _impl_.pc_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Ext4ExtRmLeafFtraceEvent::pc_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtRmLeafFtraceEvent.pc_state)
  return _internal_pc_state();
}
inline void Ext4ExtRmLeafFtraceEvent::set_pc_state(::int32_t value) {
  _internal_set_pc_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtRmLeafFtraceEvent.pc_state)
}
inline ::int32_t Ext4ExtRmLeafFtraceEvent::_internal_pc_state() const {
  return _impl_.pc_state_;
}
inline void Ext4ExtRmLeafFtraceEvent::_internal_set_pc_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pc_state_ = value;
}

// -------------------------------------------------------------------

// Ext4ExtShowExtentFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ExtShowExtentFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ExtShowExtentFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ExtShowExtentFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.dev)
}
inline ::uint64_t Ext4ExtShowExtentFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ExtShowExtentFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ExtShowExtentFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ExtShowExtentFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ExtShowExtentFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.ino)
}
inline ::uint64_t Ext4ExtShowExtentFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ExtShowExtentFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pblk = 3;
inline bool Ext4ExtShowExtentFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ExtShowExtentFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4ExtShowExtentFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.pblk)
}
inline ::uint64_t Ext4ExtShowExtentFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4ExtShowExtentFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pblk_ = value;
}

// optional uint32 lblk = 4;
inline bool Ext4ExtShowExtentFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4ExtShowExtentFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4ExtShowExtentFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.lblk)
}
inline ::uint32_t Ext4ExtShowExtentFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4ExtShowExtentFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 5;
inline bool Ext4ExtShowExtentFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ExtShowExtentFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ExtShowExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ExtShowExtentFtraceEvent.len)
  return _internal_len();
}
inline void Ext4ExtShowExtentFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ExtShowExtentFtraceEvent.len)
}
inline ::uint32_t Ext4ExtShowExtentFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4ExtShowExtentFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4FallocateEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FallocateEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4FallocateEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4FallocateEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4FallocateEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4FallocateEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4FallocateEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4FallocateEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4FallocateEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4FallocateEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4FallocateEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4FallocateEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4FallocateEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool Ext4FallocateEnterFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4FallocateEnterFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4FallocateEnterFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4FallocateEnterFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.offset)
}
inline ::int64_t Ext4FallocateEnterFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4FallocateEnterFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}

// optional int64 len = 4;
inline bool Ext4FallocateEnterFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4FallocateEnterFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4FallocateEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.len)
  return _internal_len();
}
inline void Ext4FallocateEnterFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.len)
}
inline ::int64_t Ext4FallocateEnterFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4FallocateEnterFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional int32 mode = 5;
inline bool Ext4FallocateEnterFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4FallocateEnterFtraceEvent::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4FallocateEnterFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4FallocateEnterFtraceEvent::set_mode(::int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.mode)
}
inline ::int32_t Ext4FallocateEnterFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4FallocateEnterFtraceEvent::_internal_set_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mode_ = value;
}

// optional int64 pos = 6;
inline bool Ext4FallocateEnterFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4FallocateEnterFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Ext4FallocateEnterFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateEnterFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4FallocateEnterFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateEnterFtraceEvent.pos)
}
inline ::int64_t Ext4FallocateEnterFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4FallocateEnterFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pos_ = value;
}

// -------------------------------------------------------------------

// Ext4FallocateExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FallocateExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4FallocateExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4FallocateExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4FallocateExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.dev)
}
inline ::uint64_t Ext4FallocateExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4FallocateExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4FallocateExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4FallocateExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4FallocateExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4FallocateExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.ino)
}
inline ::uint64_t Ext4FallocateExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4FallocateExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4FallocateExitFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4FallocateExitFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4FallocateExitFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4FallocateExitFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.pos)
}
inline ::int64_t Ext4FallocateExitFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4FallocateExitFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 blocks = 4;
inline bool Ext4FallocateExitFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4FallocateExitFtraceEvent::clear_blocks() {
  _impl_.blocks_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4FallocateExitFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.blocks)
  return _internal_blocks();
}
inline void Ext4FallocateExitFtraceEvent::set_blocks(::uint32_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.blocks)
}
inline ::uint32_t Ext4FallocateExitFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void Ext4FallocateExitFtraceEvent::_internal_set_blocks(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blocks_ = value;
}

// optional int32 ret = 5;
inline bool Ext4FallocateExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4FallocateExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4FallocateExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FallocateExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4FallocateExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FallocateExitFtraceEvent.ret)
}
inline ::int32_t Ext4FallocateExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4FallocateExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4FindDelallocRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FindDelallocRangeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4FindDelallocRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.dev)
}
inline ::uint64_t Ext4FindDelallocRangeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4FindDelallocRangeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4FindDelallocRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.ino)
}
inline ::uint64_t Ext4FindDelallocRangeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 from = 3;
inline bool Ext4FindDelallocRangeFtraceEvent::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_from() {
  _impl_.from_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4FindDelallocRangeFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.from)
  return _internal_from();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_from(::uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.from)
}
inline ::uint32_t Ext4FindDelallocRangeFtraceEvent::_internal_from() const {
  return _impl_.from_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_from(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.from_ = value;
}

// optional uint32 to = 4;
inline bool Ext4FindDelallocRangeFtraceEvent::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_to() {
  _impl_.to_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4FindDelallocRangeFtraceEvent::to() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.to)
  return _internal_to();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_to(::uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.to)
}
inline ::uint32_t Ext4FindDelallocRangeFtraceEvent::_internal_to() const {
  return _impl_.to_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_to(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.to_ = value;
}

// optional int32 reverse = 5;
inline bool Ext4FindDelallocRangeFtraceEvent::has_reverse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_reverse() {
  _impl_.reverse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4FindDelallocRangeFtraceEvent::reverse() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.reverse)
  return _internal_reverse();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_reverse(::int32_t value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.reverse)
}
inline ::int32_t Ext4FindDelallocRangeFtraceEvent::_internal_reverse() const {
  return _impl_.reverse_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_reverse(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.reverse_ = value;
}

// optional int32 found = 6;
inline bool Ext4FindDelallocRangeFtraceEvent::has_found() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_found() {
  _impl_.found_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4FindDelallocRangeFtraceEvent::found() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found)
  return _internal_found();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_found(::int32_t value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found)
}
inline ::int32_t Ext4FindDelallocRangeFtraceEvent::_internal_found() const {
  return _impl_.found_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_found(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.found_ = value;
}

// optional uint32 found_blk = 7;
inline bool Ext4FindDelallocRangeFtraceEvent::has_found_blk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4FindDelallocRangeFtraceEvent::clear_found_blk() {
  _impl_.found_blk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4FindDelallocRangeFtraceEvent::found_blk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found_blk)
  return _internal_found_blk();
}
inline void Ext4FindDelallocRangeFtraceEvent::set_found_blk(::uint32_t value) {
  _internal_set_found_blk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FindDelallocRangeFtraceEvent.found_blk)
}
inline ::uint32_t Ext4FindDelallocRangeFtraceEvent::_internal_found_blk() const {
  return _impl_.found_blk_;
}
inline void Ext4FindDelallocRangeFtraceEvent::_internal_set_found_blk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.found_blk_ = value;
}

// -------------------------------------------------------------------

// Ext4ForgetFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ForgetFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ForgetFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ForgetFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ForgetFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.dev)
}
inline ::uint64_t Ext4ForgetFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ForgetFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ForgetFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ForgetFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ForgetFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ForgetFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.ino)
}
inline ::uint64_t Ext4ForgetFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ForgetFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 block = 3;
inline bool Ext4ForgetFtraceEvent::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ForgetFtraceEvent::clear_block() {
  _impl_.block_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ForgetFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.block)
  return _internal_block();
}
inline void Ext4ForgetFtraceEvent::set_block(::uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.block)
}
inline ::uint64_t Ext4ForgetFtraceEvent::_internal_block() const {
  return _impl_.block_;
}
inline void Ext4ForgetFtraceEvent::_internal_set_block(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.block_ = value;
}

// optional int32 is_metadata = 4;
inline bool Ext4ForgetFtraceEvent::has_is_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ForgetFtraceEvent::clear_is_metadata() {
  _impl_.is_metadata_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4ForgetFtraceEvent::is_metadata() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.is_metadata)
  return _internal_is_metadata();
}
inline void Ext4ForgetFtraceEvent::set_is_metadata(::int32_t value) {
  _internal_set_is_metadata(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.is_metadata)
}
inline ::int32_t Ext4ForgetFtraceEvent::_internal_is_metadata() const {
  return _impl_.is_metadata_;
}
inline void Ext4ForgetFtraceEvent::_internal_set_is_metadata(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_metadata_ = value;
}

// optional uint32 mode = 5;
inline bool Ext4ForgetFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ForgetFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4ForgetFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ForgetFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4ForgetFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ForgetFtraceEvent.mode)
}
inline ::uint32_t Ext4ForgetFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4ForgetFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4FreeBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FreeBlocksFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4FreeBlocksFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4FreeBlocksFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.dev)
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4FreeBlocksFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4FreeBlocksFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4FreeBlocksFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4FreeBlocksFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.ino)
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4FreeBlocksFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 block = 3;
inline bool Ext4FreeBlocksFtraceEvent::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4FreeBlocksFtraceEvent::clear_block() {
  _impl_.block_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.block)
  return _internal_block();
}
inline void Ext4FreeBlocksFtraceEvent::set_block(::uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.block)
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::_internal_block() const {
  return _impl_.block_;
}
inline void Ext4FreeBlocksFtraceEvent::_internal_set_block(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.block_ = value;
}

// optional uint64 count = 4;
inline bool Ext4FreeBlocksFtraceEvent::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4FreeBlocksFtraceEvent::clear_count() {
  _impl_.count_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.count)
  return _internal_count();
}
inline void Ext4FreeBlocksFtraceEvent::set_count(::uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.count)
}
inline ::uint64_t Ext4FreeBlocksFtraceEvent::_internal_count() const {
  return _impl_.count_;
}
inline void Ext4FreeBlocksFtraceEvent::_internal_set_count(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.count_ = value;
}

// optional int32 flags = 5;
inline bool Ext4FreeBlocksFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4FreeBlocksFtraceEvent::clear_flags() {
  _impl_.flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4FreeBlocksFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4FreeBlocksFtraceEvent::set_flags(::int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.flags)
}
inline ::int32_t Ext4FreeBlocksFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4FreeBlocksFtraceEvent::_internal_set_flags(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// optional uint32 mode = 6;
inline bool Ext4FreeBlocksFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4FreeBlocksFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4FreeBlocksFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeBlocksFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4FreeBlocksFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeBlocksFtraceEvent.mode)
}
inline ::uint32_t Ext4FreeBlocksFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4FreeBlocksFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4FreeInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4FreeInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4FreeInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4FreeInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4FreeInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.dev)
}
inline ::uint64_t Ext4FreeInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4FreeInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4FreeInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4FreeInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4FreeInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4FreeInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.ino)
}
inline ::uint64_t Ext4FreeInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4FreeInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 uid = 3;
inline bool Ext4FreeInodeFtraceEvent::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4FreeInodeFtraceEvent::clear_uid() {
  _impl_.uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4FreeInodeFtraceEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.uid)
  return _internal_uid();
}
inline void Ext4FreeInodeFtraceEvent::set_uid(::uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.uid)
}
inline ::uint32_t Ext4FreeInodeFtraceEvent::_internal_uid() const {
  return _impl_.uid_;
}
inline void Ext4FreeInodeFtraceEvent::_internal_set_uid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uid_ = value;
}

// optional uint32 gid = 4;
inline bool Ext4FreeInodeFtraceEvent::has_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4FreeInodeFtraceEvent::clear_gid() {
  _impl_.gid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4FreeInodeFtraceEvent::gid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.gid)
  return _internal_gid();
}
inline void Ext4FreeInodeFtraceEvent::set_gid(::uint32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.gid)
}
inline ::uint32_t Ext4FreeInodeFtraceEvent::_internal_gid() const {
  return _impl_.gid_;
}
inline void Ext4FreeInodeFtraceEvent::_internal_set_gid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gid_ = value;
}

// optional uint64 blocks = 5;
inline bool Ext4FreeInodeFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4FreeInodeFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Ext4FreeInodeFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.blocks)
  return _internal_blocks();
}
inline void Ext4FreeInodeFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.blocks)
}
inline ::uint64_t Ext4FreeInodeFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void Ext4FreeInodeFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.blocks_ = value;
}

// optional uint32 mode = 6;
inline bool Ext4FreeInodeFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4FreeInodeFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4FreeInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4FreeInodeFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4FreeInodeFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4FreeInodeFtraceEvent.mode)
}
inline ::uint32_t Ext4FreeInodeFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4FreeInodeFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4GetImpliedClusterAllocExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4GetImpliedClusterAllocExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.dev)
}
inline ::uint64_t Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint32 flags = 2;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Ext4GetImpliedClusterAllocExitFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.flags)
}
inline ::uint32_t Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.flags_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4GetImpliedClusterAllocExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.lblk)
}
inline ::uint32_t Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint64 pblk = 4;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4GetImpliedClusterAllocExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.pblk)
}
inline ::uint64_t Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pblk_ = value;
}

// optional uint32 len = 5;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4GetImpliedClusterAllocExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.len)
  return _internal_len();
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.len)
}
inline ::uint32_t Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// optional int32 ret = 6;
inline bool Ext4GetImpliedClusterAllocExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4GetImpliedClusterAllocExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent.ret)
}
inline ::int32_t Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4GetImpliedClusterAllocExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4GetReservedClusterAllocFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4GetReservedClusterAllocFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.dev)
}
inline ::uint64_t Ext4GetReservedClusterAllocFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4GetReservedClusterAllocFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.ino)
}
inline ::uint64_t Ext4GetReservedClusterAllocFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4GetReservedClusterAllocFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.lblk)
}
inline ::uint32_t Ext4GetReservedClusterAllocFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4GetReservedClusterAllocFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4GetReservedClusterAllocFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.len)
  return _internal_len();
}
inline void Ext4GetReservedClusterAllocFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent.len)
}
inline ::uint32_t Ext4GetReservedClusterAllocFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4GetReservedClusterAllocFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4IndMapBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4IndMapBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4IndMapBlocksEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4IndMapBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4IndMapBlocksEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 lblk = 3;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4IndMapBlocksEnterFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.lblk)
}
inline ::uint32_t Ext4IndMapBlocksEnterFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 4;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4IndMapBlocksEnterFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.len)
  return _internal_len();
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.len)
}
inline ::uint32_t Ext4IndMapBlocksEnterFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 flags = 5;
inline bool Ext4IndMapBlocksEnterFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4IndMapBlocksEnterFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4IndMapBlocksEnterFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent.flags)
}
inline ::uint32_t Ext4IndMapBlocksEnterFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4IndMapBlocksEnterFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4IndMapBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4IndMapBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.dev)
}
inline ::uint64_t Ext4IndMapBlocksExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4IndMapBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ino)
}
inline ::uint64_t Ext4IndMapBlocksExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 flags = 3;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.flags)
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}

// optional uint64 pblk = 4;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_pblk() {
  _impl_.pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4IndMapBlocksExitFtraceEvent::pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.pblk)
  return _internal_pblk();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_pblk(::uint64_t value) {
  _internal_set_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.pblk)
}
inline ::uint64_t Ext4IndMapBlocksExitFtraceEvent::_internal_pblk() const {
  return _impl_.pblk_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pblk_ = value;
}

// optional uint32 lblk = 5;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_lblk() {
  _impl_.lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.lblk)
  return _internal_lblk();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_lblk(::uint32_t value) {
  _internal_set_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.lblk)
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::_internal_lblk() const {
  return _impl_.lblk_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lblk_ = value;
}

// optional uint32 len = 6;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.len)
  return _internal_len();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.len)
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.len_ = value;
}

// optional uint32 mflags = 7;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_mflags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_mflags() {
  _impl_.mflags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::mflags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.mflags)
  return _internal_mflags();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_mflags(::uint32_t value) {
  _internal_set_mflags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.mflags)
}
inline ::uint32_t Ext4IndMapBlocksExitFtraceEvent::_internal_mflags() const {
  return _impl_.mflags_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_mflags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mflags_ = value;
}

// optional int32 ret = 8;
inline bool Ext4IndMapBlocksExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4IndMapBlocksExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Ext4IndMapBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4IndMapBlocksExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4IndMapBlocksExitFtraceEvent.ret)
}
inline ::int32_t Ext4IndMapBlocksExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4IndMapBlocksExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4InsertRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4InsertRangeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4InsertRangeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4InsertRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4InsertRangeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.dev)
}
inline ::uint64_t Ext4InsertRangeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4InsertRangeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4InsertRangeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4InsertRangeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4InsertRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4InsertRangeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.ino)
}
inline ::uint64_t Ext4InsertRangeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4InsertRangeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool Ext4InsertRangeFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4InsertRangeFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4InsertRangeFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4InsertRangeFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.offset)
}
inline ::int64_t Ext4InsertRangeFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4InsertRangeFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}

// optional int64 len = 4;
inline bool Ext4InsertRangeFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4InsertRangeFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4InsertRangeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InsertRangeFtraceEvent.len)
  return _internal_len();
}
inline void Ext4InsertRangeFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InsertRangeFtraceEvent.len)
}
inline ::int64_t Ext4InsertRangeFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4InsertRangeFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4InvalidatepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4InvalidatepageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4InvalidatepageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4InvalidatepageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.dev)
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4InvalidatepageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4InvalidatepageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4InvalidatepageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4InvalidatepageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.ino)
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4InvalidatepageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 index = 3;
inline bool Ext4InvalidatepageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4InvalidatepageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.index)
  return _internal_index();
}
inline void Ext4InvalidatepageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.index)
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void Ext4InvalidatepageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// optional uint64 offset = 4;
inline bool Ext4InvalidatepageFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4InvalidatepageFtraceEvent::clear_offset() {
  _impl_.offset_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4InvalidatepageFtraceEvent::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.offset)
}
inline ::uint64_t Ext4InvalidatepageFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4InvalidatepageFtraceEvent::_internal_set_offset(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.offset_ = value;
}

// optional uint32 length = 5;
inline bool Ext4InvalidatepageFtraceEvent::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4InvalidatepageFtraceEvent::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4InvalidatepageFtraceEvent::length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4InvalidatepageFtraceEvent.length)
  return _internal_length();
}
inline void Ext4InvalidatepageFtraceEvent::set_length(::uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4InvalidatepageFtraceEvent.length)
}
inline ::uint32_t Ext4InvalidatepageFtraceEvent::_internal_length() const {
  return _impl_.length_;
}
inline void Ext4InvalidatepageFtraceEvent::_internal_set_length(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.length_ = value;
}

// -------------------------------------------------------------------

// Ext4JournalStartFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalStartFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4JournalStartFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4JournalStartFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4JournalStartFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.dev)
}
inline ::uint64_t Ext4JournalStartFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4JournalStartFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ip = 2;
inline bool Ext4JournalStartFtraceEvent::has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4JournalStartFtraceEvent::clear_ip() {
  _impl_.ip_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4JournalStartFtraceEvent::ip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.ip)
  return _internal_ip();
}
inline void Ext4JournalStartFtraceEvent::set_ip(::uint64_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.ip)
}
inline ::uint64_t Ext4JournalStartFtraceEvent::_internal_ip() const {
  return _impl_.ip_;
}
inline void Ext4JournalStartFtraceEvent::_internal_set_ip(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_ = value;
}

// optional int32 blocks = 3;
inline bool Ext4JournalStartFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4JournalStartFtraceEvent::clear_blocks() {
  _impl_.blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4JournalStartFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.blocks)
  return _internal_blocks();
}
inline void Ext4JournalStartFtraceEvent::set_blocks(::int32_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.blocks)
}
inline ::int32_t Ext4JournalStartFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void Ext4JournalStartFtraceEvent::_internal_set_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blocks_ = value;
}

// optional int32 rsv_blocks = 4;
inline bool Ext4JournalStartFtraceEvent::has_rsv_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4JournalStartFtraceEvent::clear_rsv_blocks() {
  _impl_.rsv_blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4JournalStartFtraceEvent::rsv_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.rsv_blocks)
  return _internal_rsv_blocks();
}
inline void Ext4JournalStartFtraceEvent::set_rsv_blocks(::int32_t value) {
  _internal_set_rsv_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.rsv_blocks)
}
inline ::int32_t Ext4JournalStartFtraceEvent::_internal_rsv_blocks() const {
  return _impl_.rsv_blocks_;
}
inline void Ext4JournalStartFtraceEvent::_internal_set_rsv_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rsv_blocks_ = value;
}

// optional int32 nblocks = 5;
inline bool Ext4JournalStartFtraceEvent::has_nblocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4JournalStartFtraceEvent::clear_nblocks() {
  _impl_.nblocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4JournalStartFtraceEvent::nblocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.nblocks)
  return _internal_nblocks();
}
inline void Ext4JournalStartFtraceEvent::set_nblocks(::int32_t value) {
  _internal_set_nblocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.nblocks)
}
inline ::int32_t Ext4JournalStartFtraceEvent::_internal_nblocks() const {
  return _impl_.nblocks_;
}
inline void Ext4JournalStartFtraceEvent::_internal_set_nblocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nblocks_ = value;
}

// optional int32 revoke_creds = 6;
inline bool Ext4JournalStartFtraceEvent::has_revoke_creds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4JournalStartFtraceEvent::clear_revoke_creds() {
  _impl_.revoke_creds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4JournalStartFtraceEvent::revoke_creds() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartFtraceEvent.revoke_creds)
  return _internal_revoke_creds();
}
inline void Ext4JournalStartFtraceEvent::set_revoke_creds(::int32_t value) {
  _internal_set_revoke_creds(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartFtraceEvent.revoke_creds)
}
inline ::int32_t Ext4JournalStartFtraceEvent::_internal_revoke_creds() const {
  return _impl_.revoke_creds_;
}
inline void Ext4JournalStartFtraceEvent::_internal_set_revoke_creds(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.revoke_creds_ = value;
}

// -------------------------------------------------------------------

// Ext4JournalStartReservedFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalStartReservedFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4JournalStartReservedFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4JournalStartReservedFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartReservedFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4JournalStartReservedFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartReservedFtraceEvent.dev)
}
inline ::uint64_t Ext4JournalStartReservedFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4JournalStartReservedFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ip = 2;
inline bool Ext4JournalStartReservedFtraceEvent::has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4JournalStartReservedFtraceEvent::clear_ip() {
  _impl_.ip_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4JournalStartReservedFtraceEvent::ip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartReservedFtraceEvent.ip)
  return _internal_ip();
}
inline void Ext4JournalStartReservedFtraceEvent::set_ip(::uint64_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartReservedFtraceEvent.ip)
}
inline ::uint64_t Ext4JournalStartReservedFtraceEvent::_internal_ip() const {
  return _impl_.ip_;
}
inline void Ext4JournalStartReservedFtraceEvent::_internal_set_ip(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_ = value;
}

// optional int32 blocks = 3;
inline bool Ext4JournalStartReservedFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4JournalStartReservedFtraceEvent::clear_blocks() {
  _impl_.blocks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4JournalStartReservedFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalStartReservedFtraceEvent.blocks)
  return _internal_blocks();
}
inline void Ext4JournalStartReservedFtraceEvent::set_blocks(::int32_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalStartReservedFtraceEvent.blocks)
}
inline ::int32_t Ext4JournalStartReservedFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void Ext4JournalStartReservedFtraceEvent::_internal_set_blocks(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blocks_ = value;
}

// -------------------------------------------------------------------

// Ext4JournalledInvalidatepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.dev)
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.ino)
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 index = 3;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.index)
  return _internal_index();
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.index)
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// optional uint64 offset = 4;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_offset() {
  _impl_.offset_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.offset)
}
inline ::uint64_t Ext4JournalledInvalidatepageFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::_internal_set_offset(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.offset_ = value;
}

// optional uint32 length = 5;
inline bool Ext4JournalledInvalidatepageFtraceEvent::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::clear_length() {
  _impl_.length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4JournalledInvalidatepageFtraceEvent::length() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.length)
  return _internal_length();
}
inline void Ext4JournalledInvalidatepageFtraceEvent::set_length(::uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent.length)
}
inline ::uint32_t Ext4JournalledInvalidatepageFtraceEvent::_internal_length() const {
  return _impl_.length_;
}
inline void Ext4JournalledInvalidatepageFtraceEvent::_internal_set_length(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.length_ = value;
}

// -------------------------------------------------------------------

// Ext4JournalledWriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4JournalledWriteEndFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4JournalledWriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4JournalledWriteEndFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.dev)
}
inline ::uint64_t Ext4JournalledWriteEndFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4JournalledWriteEndFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4JournalledWriteEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4JournalledWriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4JournalledWriteEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.ino)
}
inline ::uint64_t Ext4JournalledWriteEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4JournalledWriteEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4JournalledWriteEndFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4JournalledWriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4JournalledWriteEndFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.pos)
}
inline ::int64_t Ext4JournalledWriteEndFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4JournalledWriteEndFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool Ext4JournalledWriteEndFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4JournalledWriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.len)
  return _internal_len();
}
inline void Ext4JournalledWriteEndFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.len)
}
inline ::uint32_t Ext4JournalledWriteEndFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4JournalledWriteEndFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 copied = 5;
inline bool Ext4JournalledWriteEndFtraceEvent::has_copied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4JournalledWriteEndFtraceEvent::clear_copied() {
  _impl_.copied_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4JournalledWriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.copied)
  return _internal_copied();
}
inline void Ext4JournalledWriteEndFtraceEvent::set_copied(::uint32_t value) {
  _internal_set_copied(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4JournalledWriteEndFtraceEvent.copied)
}
inline ::uint32_t Ext4JournalledWriteEndFtraceEvent::_internal_copied() const {
  return _impl_.copied_;
}
inline void Ext4JournalledWriteEndFtraceEvent::_internal_set_copied(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.copied_ = value;
}

// -------------------------------------------------------------------

// Ext4LoadInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4LoadInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4LoadInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4LoadInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4LoadInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeFtraceEvent.dev)
}
inline ::uint64_t Ext4LoadInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4LoadInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4LoadInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4LoadInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4LoadInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4LoadInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeFtraceEvent.ino)
}
inline ::uint64_t Ext4LoadInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4LoadInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// -------------------------------------------------------------------

// Ext4LoadInodeBitmapFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4LoadInodeBitmapFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4LoadInodeBitmapFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4LoadInodeBitmapFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4LoadInodeBitmapFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.dev)
}
inline ::uint64_t Ext4LoadInodeBitmapFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4LoadInodeBitmapFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint32 group = 2;
inline bool Ext4LoadInodeBitmapFtraceEvent::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4LoadInodeBitmapFtraceEvent::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Ext4LoadInodeBitmapFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.group)
  return _internal_group();
}
inline void Ext4LoadInodeBitmapFtraceEvent::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4LoadInodeBitmapFtraceEvent.group)
}
inline ::uint32_t Ext4LoadInodeBitmapFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline void Ext4LoadInodeBitmapFtraceEvent::_internal_set_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_ = value;
}

// -------------------------------------------------------------------

// Ext4MarkInodeDirtyFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MarkInodeDirtyFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MarkInodeDirtyFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MarkInodeDirtyFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MarkInodeDirtyFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.dev)
}
inline ::uint64_t Ext4MarkInodeDirtyFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MarkInodeDirtyFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MarkInodeDirtyFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MarkInodeDirtyFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MarkInodeDirtyFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MarkInodeDirtyFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ino)
}
inline ::uint64_t Ext4MarkInodeDirtyFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MarkInodeDirtyFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 ip = 3;
inline bool Ext4MarkInodeDirtyFtraceEvent::has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MarkInodeDirtyFtraceEvent::clear_ip() {
  _impl_.ip_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4MarkInodeDirtyFtraceEvent::ip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ip)
  return _internal_ip();
}
inline void Ext4MarkInodeDirtyFtraceEvent::set_ip(::uint64_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MarkInodeDirtyFtraceEvent.ip)
}
inline ::uint64_t Ext4MarkInodeDirtyFtraceEvent::_internal_ip() const {
  return _impl_.ip_;
}
inline void Ext4MarkInodeDirtyFtraceEvent::_internal_set_ip(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ip_ = value;
}

// -------------------------------------------------------------------

// Ext4MbBitmapLoadFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbBitmapLoadFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbBitmapLoadFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbBitmapLoadFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbBitmapLoadFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.dev)
}
inline ::uint64_t Ext4MbBitmapLoadFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbBitmapLoadFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint32 group = 2;
inline bool Ext4MbBitmapLoadFtraceEvent::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbBitmapLoadFtraceEvent::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Ext4MbBitmapLoadFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.group)
  return _internal_group();
}
inline void Ext4MbBitmapLoadFtraceEvent::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBitmapLoadFtraceEvent.group)
}
inline ::uint32_t Ext4MbBitmapLoadFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline void Ext4MbBitmapLoadFtraceEvent::_internal_set_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_ = value;
}

// -------------------------------------------------------------------

// Ext4MbBuddyBitmapLoadFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbBuddyBitmapLoadFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbBuddyBitmapLoadFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.dev)
}
inline ::uint64_t Ext4MbBuddyBitmapLoadFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint32 group = 2;
inline bool Ext4MbBuddyBitmapLoadFtraceEvent::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Ext4MbBuddyBitmapLoadFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.group)
  return _internal_group();
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent.group)
}
inline ::uint32_t Ext4MbBuddyBitmapLoadFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline void Ext4MbBuddyBitmapLoadFtraceEvent::_internal_set_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_ = value;
}

// -------------------------------------------------------------------

// Ext4MbDiscardPreallocationsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbDiscardPreallocationsFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbDiscardPreallocationsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.dev)
}
inline ::uint64_t Ext4MbDiscardPreallocationsFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 needed = 2;
inline bool Ext4MbDiscardPreallocationsFtraceEvent::has_needed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::clear_needed() {
  _impl_.needed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4MbDiscardPreallocationsFtraceEvent::needed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.needed)
  return _internal_needed();
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::set_needed(::int32_t value) {
  _internal_set_needed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent.needed)
}
inline ::int32_t Ext4MbDiscardPreallocationsFtraceEvent::_internal_needed() const {
  return _impl_.needed_;
}
inline void Ext4MbDiscardPreallocationsFtraceEvent::_internal_set_needed(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.needed_ = value;
}

// -------------------------------------------------------------------

// Ext4MbNewGroupPaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbNewGroupPaFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbNewGroupPaFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.dev)
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbNewGroupPaFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MbNewGroupPaFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MbNewGroupPaFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.ino)
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MbNewGroupPaFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pa_pstart = 3;
inline bool Ext4MbNewGroupPaFtraceEvent::has_pa_pstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_pa_pstart() {
  _impl_.pa_pstart_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::pa_pstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_pstart)
  return _internal_pa_pstart();
}
inline void Ext4MbNewGroupPaFtraceEvent::set_pa_pstart(::uint64_t value) {
  _internal_set_pa_pstart(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_pstart)
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::_internal_pa_pstart() const {
  return _impl_.pa_pstart_;
}
inline void Ext4MbNewGroupPaFtraceEvent::_internal_set_pa_pstart(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pa_pstart_ = value;
}

// optional uint64 pa_lstart = 4;
inline bool Ext4MbNewGroupPaFtraceEvent::has_pa_lstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_pa_lstart() {
  _impl_.pa_lstart_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::pa_lstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_lstart)
  return _internal_pa_lstart();
}
inline void Ext4MbNewGroupPaFtraceEvent::set_pa_lstart(::uint64_t value) {
  _internal_set_pa_lstart(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_lstart)
}
inline ::uint64_t Ext4MbNewGroupPaFtraceEvent::_internal_pa_lstart() const {
  return _impl_.pa_lstart_;
}
inline void Ext4MbNewGroupPaFtraceEvent::_internal_set_pa_lstart(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pa_lstart_ = value;
}

// optional uint32 pa_len = 5;
inline bool Ext4MbNewGroupPaFtraceEvent::has_pa_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4MbNewGroupPaFtraceEvent::clear_pa_len() {
  _impl_.pa_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4MbNewGroupPaFtraceEvent::pa_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_len)
  return _internal_pa_len();
}
inline void Ext4MbNewGroupPaFtraceEvent::set_pa_len(::uint32_t value) {
  _internal_set_pa_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewGroupPaFtraceEvent.pa_len)
}
inline ::uint32_t Ext4MbNewGroupPaFtraceEvent::_internal_pa_len() const {
  return _impl_.pa_len_;
}
inline void Ext4MbNewGroupPaFtraceEvent::_internal_set_pa_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pa_len_ = value;
}

// -------------------------------------------------------------------

// Ext4MbNewInodePaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbNewInodePaFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbNewInodePaFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.dev)
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbNewInodePaFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MbNewInodePaFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MbNewInodePaFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.ino)
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MbNewInodePaFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pa_pstart = 3;
inline bool Ext4MbNewInodePaFtraceEvent::has_pa_pstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_pa_pstart() {
  _impl_.pa_pstart_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::pa_pstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_pstart)
  return _internal_pa_pstart();
}
inline void Ext4MbNewInodePaFtraceEvent::set_pa_pstart(::uint64_t value) {
  _internal_set_pa_pstart(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_pstart)
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::_internal_pa_pstart() const {
  return _impl_.pa_pstart_;
}
inline void Ext4MbNewInodePaFtraceEvent::_internal_set_pa_pstart(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pa_pstart_ = value;
}

// optional uint64 pa_lstart = 4;
inline bool Ext4MbNewInodePaFtraceEvent::has_pa_lstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_pa_lstart() {
  _impl_.pa_lstart_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::pa_lstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_lstart)
  return _internal_pa_lstart();
}
inline void Ext4MbNewInodePaFtraceEvent::set_pa_lstart(::uint64_t value) {
  _internal_set_pa_lstart(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_lstart)
}
inline ::uint64_t Ext4MbNewInodePaFtraceEvent::_internal_pa_lstart() const {
  return _impl_.pa_lstart_;
}
inline void Ext4MbNewInodePaFtraceEvent::_internal_set_pa_lstart(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pa_lstart_ = value;
}

// optional uint32 pa_len = 5;
inline bool Ext4MbNewInodePaFtraceEvent::has_pa_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4MbNewInodePaFtraceEvent::clear_pa_len() {
  _impl_.pa_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4MbNewInodePaFtraceEvent::pa_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_len)
  return _internal_pa_len();
}
inline void Ext4MbNewInodePaFtraceEvent::set_pa_len(::uint32_t value) {
  _internal_set_pa_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbNewInodePaFtraceEvent.pa_len)
}
inline ::uint32_t Ext4MbNewInodePaFtraceEvent::_internal_pa_len() const {
  return _impl_.pa_len_;
}
inline void Ext4MbNewInodePaFtraceEvent::_internal_set_pa_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pa_len_ = value;
}

// -------------------------------------------------------------------

// Ext4MbReleaseGroupPaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbReleaseGroupPaFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbReleaseGroupPaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbReleaseGroupPaFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.dev)
}
inline ::uint64_t Ext4MbReleaseGroupPaFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 pa_pstart = 2;
inline bool Ext4MbReleaseGroupPaFtraceEvent::has_pa_pstart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::clear_pa_pstart() {
  _impl_.pa_pstart_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MbReleaseGroupPaFtraceEvent::pa_pstart() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_pstart)
  return _internal_pa_pstart();
}
inline void Ext4MbReleaseGroupPaFtraceEvent::set_pa_pstart(::uint64_t value) {
  _internal_set_pa_pstart(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_pstart)
}
inline ::uint64_t Ext4MbReleaseGroupPaFtraceEvent::_internal_pa_pstart() const {
  return _impl_.pa_pstart_;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::_internal_set_pa_pstart(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pa_pstart_ = value;
}

// optional uint32 pa_len = 3;
inline bool Ext4MbReleaseGroupPaFtraceEvent::has_pa_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::clear_pa_len() {
  _impl_.pa_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4MbReleaseGroupPaFtraceEvent::pa_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_len)
  return _internal_pa_len();
}
inline void Ext4MbReleaseGroupPaFtraceEvent::set_pa_len(::uint32_t value) {
  _internal_set_pa_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent.pa_len)
}
inline ::uint32_t Ext4MbReleaseGroupPaFtraceEvent::_internal_pa_len() const {
  return _impl_.pa_len_;
}
inline void Ext4MbReleaseGroupPaFtraceEvent::_internal_set_pa_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pa_len_ = value;
}

// -------------------------------------------------------------------

// Ext4MbReleaseInodePaFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MbReleaseInodePaFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.dev)
}
inline ::uint64_t Ext4MbReleaseInodePaFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MbReleaseInodePaFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.ino)
}
inline ::uint64_t Ext4MbReleaseInodePaFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 block = 3;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_block() {
  _impl_.block_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4MbReleaseInodePaFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.block)
  return _internal_block();
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_block(::uint64_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.block)
}
inline ::uint64_t Ext4MbReleaseInodePaFtraceEvent::_internal_block() const {
  return _impl_.block_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::_internal_set_block(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.block_ = value;
}

// optional uint32 count = 4;
inline bool Ext4MbReleaseInodePaFtraceEvent::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MbReleaseInodePaFtraceEvent::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4MbReleaseInodePaFtraceEvent::count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.count)
  return _internal_count();
}
inline void Ext4MbReleaseInodePaFtraceEvent::set_count(::uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MbReleaseInodePaFtraceEvent.count)
}
inline ::uint32_t Ext4MbReleaseInodePaFtraceEvent::_internal_count() const {
  return _impl_.count_;
}
inline void Ext4MbReleaseInodePaFtraceEvent::_internal_set_count(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// Ext4MballocAllocFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocAllocFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MballocAllocFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MballocAllocFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.dev)
}
inline ::uint64_t Ext4MballocAllocFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MballocAllocFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MballocAllocFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MballocAllocFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.ino)
}
inline ::uint64_t Ext4MballocAllocFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 orig_logical = 3;
inline bool Ext4MballocAllocFtraceEvent::has_orig_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_logical() {
  _impl_.orig_logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::orig_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_logical)
  return _internal_orig_logical();
}
inline void Ext4MballocAllocFtraceEvent::set_orig_logical(::uint32_t value) {
  _internal_set_orig_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_logical)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_orig_logical() const {
  return _impl_.orig_logical_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_orig_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.orig_logical_ = value;
}

// optional int32 orig_start = 4;
inline bool Ext4MballocAllocFtraceEvent::has_orig_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_start() {
  _impl_.orig_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4MballocAllocFtraceEvent::orig_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_start)
  return _internal_orig_start();
}
inline void Ext4MballocAllocFtraceEvent::set_orig_start(::int32_t value) {
  _internal_set_orig_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_start)
}
inline ::int32_t Ext4MballocAllocFtraceEvent::_internal_orig_start() const {
  return _impl_.orig_start_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_orig_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.orig_start_ = value;
}

// optional uint32 orig_group = 5;
inline bool Ext4MballocAllocFtraceEvent::has_orig_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_group() {
  _impl_.orig_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::orig_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_group)
  return _internal_orig_group();
}
inline void Ext4MballocAllocFtraceEvent::set_orig_group(::uint32_t value) {
  _internal_set_orig_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_group)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_orig_group() const {
  return _impl_.orig_group_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_orig_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.orig_group_ = value;
}

// optional int32 orig_len = 6;
inline bool Ext4MballocAllocFtraceEvent::has_orig_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_orig_len() {
  _impl_.orig_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4MballocAllocFtraceEvent::orig_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_len)
  return _internal_orig_len();
}
inline void Ext4MballocAllocFtraceEvent::set_orig_len(::int32_t value) {
  _internal_set_orig_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.orig_len)
}
inline ::int32_t Ext4MballocAllocFtraceEvent::_internal_orig_len() const {
  return _impl_.orig_len_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_orig_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.orig_len_ = value;
}

// optional uint32 goal_logical = 7;
inline bool Ext4MballocAllocFtraceEvent::has_goal_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_logical() {
  _impl_.goal_logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::goal_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_logical)
  return _internal_goal_logical();
}
inline void Ext4MballocAllocFtraceEvent::set_goal_logical(::uint32_t value) {
  _internal_set_goal_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_logical)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_goal_logical() const {
  return _impl_.goal_logical_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_goal_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.goal_logical_ = value;
}

// optional int32 goal_start = 8;
inline bool Ext4MballocAllocFtraceEvent::has_goal_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_start() {
  _impl_.goal_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Ext4MballocAllocFtraceEvent::goal_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_start)
  return _internal_goal_start();
}
inline void Ext4MballocAllocFtraceEvent::set_goal_start(::int32_t value) {
  _internal_set_goal_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_start)
}
inline ::int32_t Ext4MballocAllocFtraceEvent::_internal_goal_start() const {
  return _impl_.goal_start_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_goal_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.goal_start_ = value;
}

// optional uint32 goal_group = 9;
inline bool Ext4MballocAllocFtraceEvent::has_goal_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_group() {
  _impl_.goal_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::goal_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_group)
  return _internal_goal_group();
}
inline void Ext4MballocAllocFtraceEvent::set_goal_group(::uint32_t value) {
  _internal_set_goal_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_group)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_goal_group() const {
  return _impl_.goal_group_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_goal_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.goal_group_ = value;
}

// optional int32 goal_len = 10;
inline bool Ext4MballocAllocFtraceEvent::has_goal_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_goal_len() {
  _impl_.goal_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Ext4MballocAllocFtraceEvent::goal_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_len)
  return _internal_goal_len();
}
inline void Ext4MballocAllocFtraceEvent::set_goal_len(::int32_t value) {
  _internal_set_goal_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.goal_len)
}
inline ::int32_t Ext4MballocAllocFtraceEvent::_internal_goal_len() const {
  return _impl_.goal_len_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_goal_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.goal_len_ = value;
}

// optional uint32 result_logical = 11;
inline bool Ext4MballocAllocFtraceEvent::has_result_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_logical() {
  _impl_.result_logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::result_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_logical)
  return _internal_result_logical();
}
inline void Ext4MballocAllocFtraceEvent::set_result_logical(::uint32_t value) {
  _internal_set_result_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_logical)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_result_logical() const {
  return _impl_.result_logical_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_result_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.result_logical_ = value;
}

// optional int32 result_start = 12;
inline bool Ext4MballocAllocFtraceEvent::has_result_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_start() {
  _impl_.result_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Ext4MballocAllocFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_start)
  return _internal_result_start();
}
inline void Ext4MballocAllocFtraceEvent::set_result_start(::int32_t value) {
  _internal_set_result_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_start)
}
inline ::int32_t Ext4MballocAllocFtraceEvent::_internal_result_start() const {
  return _impl_.result_start_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_result_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.result_start_ = value;
}

// optional uint32 result_group = 13;
inline bool Ext4MballocAllocFtraceEvent::has_result_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_group() {
  _impl_.result_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_group)
  return _internal_result_group();
}
inline void Ext4MballocAllocFtraceEvent::set_result_group(::uint32_t value) {
  _internal_set_result_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_group)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_result_group() const {
  return _impl_.result_group_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_result_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.result_group_ = value;
}

// optional int32 result_len = 14;
inline bool Ext4MballocAllocFtraceEvent::has_result_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_result_len() {
  _impl_.result_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t Ext4MballocAllocFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.result_len)
  return _internal_result_len();
}
inline void Ext4MballocAllocFtraceEvent::set_result_len(::int32_t value) {
  _internal_set_result_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.result_len)
}
inline ::int32_t Ext4MballocAllocFtraceEvent::_internal_result_len() const {
  return _impl_.result_len_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_result_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.result_len_ = value;
}

// optional uint32 found = 15;
inline bool Ext4MballocAllocFtraceEvent::has_found() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_found() {
  _impl_.found_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::found() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.found)
  return _internal_found();
}
inline void Ext4MballocAllocFtraceEvent::set_found(::uint32_t value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.found)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_found() const {
  return _impl_.found_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_found(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.found_ = value;
}

// optional uint32 groups = 16;
inline bool Ext4MballocAllocFtraceEvent::has_groups() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_groups() {
  _impl_.groups_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::groups() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.groups)
  return _internal_groups();
}
inline void Ext4MballocAllocFtraceEvent::set_groups(::uint32_t value) {
  _internal_set_groups(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.groups)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_groups() const {
  return _impl_.groups_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_groups(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.groups_ = value;
}

// optional uint32 buddy = 17;
inline bool Ext4MballocAllocFtraceEvent::has_buddy() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_buddy() {
  _impl_.buddy_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::buddy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.buddy)
  return _internal_buddy();
}
inline void Ext4MballocAllocFtraceEvent::set_buddy(::uint32_t value) {
  _internal_set_buddy(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.buddy)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_buddy() const {
  return _impl_.buddy_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_buddy(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.buddy_ = value;
}

// optional uint32 flags = 18;
inline bool Ext4MballocAllocFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4MballocAllocFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.flags)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.flags_ = value;
}

// optional uint32 tail = 19;
inline bool Ext4MballocAllocFtraceEvent::has_tail() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_tail() {
  _impl_.tail_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::tail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.tail)
  return _internal_tail();
}
inline void Ext4MballocAllocFtraceEvent::set_tail(::uint32_t value) {
  _internal_set_tail(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.tail)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_tail() const {
  return _impl_.tail_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_tail(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.tail_ = value;
}

// optional uint32 cr = 20;
inline bool Ext4MballocAllocFtraceEvent::has_cr() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Ext4MballocAllocFtraceEvent::clear_cr() {
  _impl_.cr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::cr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocAllocFtraceEvent.cr)
  return _internal_cr();
}
inline void Ext4MballocAllocFtraceEvent::set_cr(::uint32_t value) {
  _internal_set_cr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocAllocFtraceEvent.cr)
}
inline ::uint32_t Ext4MballocAllocFtraceEvent::_internal_cr() const {
  return _impl_.cr_;
}
inline void Ext4MballocAllocFtraceEvent::_internal_set_cr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.cr_ = value;
}

// -------------------------------------------------------------------

// Ext4MballocDiscardFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocDiscardFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MballocDiscardFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MballocDiscardFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MballocDiscardFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.dev)
}
inline ::uint64_t Ext4MballocDiscardFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MballocDiscardFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MballocDiscardFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MballocDiscardFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MballocDiscardFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MballocDiscardFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.ino)
}
inline ::uint64_t Ext4MballocDiscardFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MballocDiscardFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 result_start = 3;
inline bool Ext4MballocDiscardFtraceEvent::has_result_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MballocDiscardFtraceEvent::clear_result_start() {
  _impl_.result_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4MballocDiscardFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_start)
  return _internal_result_start();
}
inline void Ext4MballocDiscardFtraceEvent::set_result_start(::int32_t value) {
  _internal_set_result_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_start)
}
inline ::int32_t Ext4MballocDiscardFtraceEvent::_internal_result_start() const {
  return _impl_.result_start_;
}
inline void Ext4MballocDiscardFtraceEvent::_internal_set_result_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_start_ = value;
}

// optional uint32 result_group = 4;
inline bool Ext4MballocDiscardFtraceEvent::has_result_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MballocDiscardFtraceEvent::clear_result_group() {
  _impl_.result_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4MballocDiscardFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_group)
  return _internal_result_group();
}
inline void Ext4MballocDiscardFtraceEvent::set_result_group(::uint32_t value) {
  _internal_set_result_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_group)
}
inline ::uint32_t Ext4MballocDiscardFtraceEvent::_internal_result_group() const {
  return _impl_.result_group_;
}
inline void Ext4MballocDiscardFtraceEvent::_internal_set_result_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.result_group_ = value;
}

// optional int32 result_len = 5;
inline bool Ext4MballocDiscardFtraceEvent::has_result_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4MballocDiscardFtraceEvent::clear_result_len() {
  _impl_.result_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4MballocDiscardFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_len)
  return _internal_result_len();
}
inline void Ext4MballocDiscardFtraceEvent::set_result_len(::int32_t value) {
  _internal_set_result_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocDiscardFtraceEvent.result_len)
}
inline ::int32_t Ext4MballocDiscardFtraceEvent::_internal_result_len() const {
  return _impl_.result_len_;
}
inline void Ext4MballocDiscardFtraceEvent::_internal_set_result_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.result_len_ = value;
}

// -------------------------------------------------------------------

// Ext4MballocFreeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocFreeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MballocFreeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MballocFreeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MballocFreeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.dev)
}
inline ::uint64_t Ext4MballocFreeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MballocFreeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MballocFreeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MballocFreeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MballocFreeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MballocFreeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.ino)
}
inline ::uint64_t Ext4MballocFreeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MballocFreeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 result_start = 3;
inline bool Ext4MballocFreeFtraceEvent::has_result_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MballocFreeFtraceEvent::clear_result_start() {
  _impl_.result_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4MballocFreeFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.result_start)
  return _internal_result_start();
}
inline void Ext4MballocFreeFtraceEvent::set_result_start(::int32_t value) {
  _internal_set_result_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.result_start)
}
inline ::int32_t Ext4MballocFreeFtraceEvent::_internal_result_start() const {
  return _impl_.result_start_;
}
inline void Ext4MballocFreeFtraceEvent::_internal_set_result_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_start_ = value;
}

// optional uint32 result_group = 4;
inline bool Ext4MballocFreeFtraceEvent::has_result_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MballocFreeFtraceEvent::clear_result_group() {
  _impl_.result_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4MballocFreeFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.result_group)
  return _internal_result_group();
}
inline void Ext4MballocFreeFtraceEvent::set_result_group(::uint32_t value) {
  _internal_set_result_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.result_group)
}
inline ::uint32_t Ext4MballocFreeFtraceEvent::_internal_result_group() const {
  return _impl_.result_group_;
}
inline void Ext4MballocFreeFtraceEvent::_internal_set_result_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.result_group_ = value;
}

// optional int32 result_len = 5;
inline bool Ext4MballocFreeFtraceEvent::has_result_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4MballocFreeFtraceEvent::clear_result_len() {
  _impl_.result_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4MballocFreeFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocFreeFtraceEvent.result_len)
  return _internal_result_len();
}
inline void Ext4MballocFreeFtraceEvent::set_result_len(::int32_t value) {
  _internal_set_result_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocFreeFtraceEvent.result_len)
}
inline ::int32_t Ext4MballocFreeFtraceEvent::_internal_result_len() const {
  return _impl_.result_len_;
}
inline void Ext4MballocFreeFtraceEvent::_internal_set_result_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.result_len_ = value;
}

// -------------------------------------------------------------------

// Ext4MballocPreallocFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4MballocPreallocFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4MballocPreallocFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4MballocPreallocFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.dev)
}
inline ::uint64_t Ext4MballocPreallocFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4MballocPreallocFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4MballocPreallocFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4MballocPreallocFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.ino)
}
inline ::uint64_t Ext4MballocPreallocFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 orig_logical = 3;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_logical() {
  _impl_.orig_logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::orig_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_logical)
  return _internal_orig_logical();
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_logical(::uint32_t value) {
  _internal_set_orig_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_logical)
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::_internal_orig_logical() const {
  return _impl_.orig_logical_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_orig_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.orig_logical_ = value;
}

// optional int32 orig_start = 4;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_start() {
  _impl_.orig_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::orig_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_start)
  return _internal_orig_start();
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_start(::int32_t value) {
  _internal_set_orig_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_start)
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::_internal_orig_start() const {
  return _impl_.orig_start_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_orig_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.orig_start_ = value;
}

// optional uint32 orig_group = 5;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_group() {
  _impl_.orig_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::orig_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_group)
  return _internal_orig_group();
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_group(::uint32_t value) {
  _internal_set_orig_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_group)
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::_internal_orig_group() const {
  return _impl_.orig_group_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_orig_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.orig_group_ = value;
}

// optional int32 orig_len = 6;
inline bool Ext4MballocPreallocFtraceEvent::has_orig_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_orig_len() {
  _impl_.orig_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::orig_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_len)
  return _internal_orig_len();
}
inline void Ext4MballocPreallocFtraceEvent::set_orig_len(::int32_t value) {
  _internal_set_orig_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.orig_len)
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::_internal_orig_len() const {
  return _impl_.orig_len_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_orig_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.orig_len_ = value;
}

// optional uint32 result_logical = 7;
inline bool Ext4MballocPreallocFtraceEvent::has_result_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_logical() {
  _impl_.result_logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::result_logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_logical)
  return _internal_result_logical();
}
inline void Ext4MballocPreallocFtraceEvent::set_result_logical(::uint32_t value) {
  _internal_set_result_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_logical)
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::_internal_result_logical() const {
  return _impl_.result_logical_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_result_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.result_logical_ = value;
}

// optional int32 result_start = 8;
inline bool Ext4MballocPreallocFtraceEvent::has_result_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_start() {
  _impl_.result_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::result_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_start)
  return _internal_result_start();
}
inline void Ext4MballocPreallocFtraceEvent::set_result_start(::int32_t value) {
  _internal_set_result_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_start)
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::_internal_result_start() const {
  return _impl_.result_start_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_result_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.result_start_ = value;
}

// optional uint32 result_group = 9;
inline bool Ext4MballocPreallocFtraceEvent::has_result_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_group() {
  _impl_.result_group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::result_group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_group)
  return _internal_result_group();
}
inline void Ext4MballocPreallocFtraceEvent::set_result_group(::uint32_t value) {
  _internal_set_result_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_group)
}
inline ::uint32_t Ext4MballocPreallocFtraceEvent::_internal_result_group() const {
  return _impl_.result_group_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_result_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.result_group_ = value;
}

// optional int32 result_len = 10;
inline bool Ext4MballocPreallocFtraceEvent::has_result_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4MballocPreallocFtraceEvent::clear_result_len() {
  _impl_.result_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::result_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_len)
  return _internal_result_len();
}
inline void Ext4MballocPreallocFtraceEvent::set_result_len(::int32_t value) {
  _internal_set_result_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4MballocPreallocFtraceEvent.result_len)
}
inline ::int32_t Ext4MballocPreallocFtraceEvent::_internal_result_len() const {
  return _impl_.result_len_;
}
inline void Ext4MballocPreallocFtraceEvent::_internal_set_result_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.result_len_ = value;
}

// -------------------------------------------------------------------

// Ext4OtherInodeUpdateTimeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4OtherInodeUpdateTimeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.dev)
}
inline ::uint64_t Ext4OtherInodeUpdateTimeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4OtherInodeUpdateTimeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.ino)
}
inline ::uint64_t Ext4OtherInodeUpdateTimeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 orig_ino = 3;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_orig_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_orig_ino() {
  _impl_.orig_ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4OtherInodeUpdateTimeFtraceEvent::orig_ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.orig_ino)
  return _internal_orig_ino();
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_orig_ino(::uint64_t value) {
  _internal_set_orig_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.orig_ino)
}
inline ::uint64_t Ext4OtherInodeUpdateTimeFtraceEvent::_internal_orig_ino() const {
  return _impl_.orig_ino_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::_internal_set_orig_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.orig_ino_ = value;
}

// optional uint32 uid = 4;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_uid() {
  _impl_.uid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4OtherInodeUpdateTimeFtraceEvent::uid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.uid)
  return _internal_uid();
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_uid(::uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.uid)
}
inline ::uint32_t Ext4OtherInodeUpdateTimeFtraceEvent::_internal_uid() const {
  return _impl_.uid_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::_internal_set_uid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uid_ = value;
}

// optional uint32 gid = 5;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_gid() {
  _impl_.gid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4OtherInodeUpdateTimeFtraceEvent::gid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.gid)
  return _internal_gid();
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_gid(::uint32_t value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.gid)
}
inline ::uint32_t Ext4OtherInodeUpdateTimeFtraceEvent::_internal_gid() const {
  return _impl_.gid_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::_internal_set_gid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.gid_ = value;
}

// optional uint32 mode = 6;
inline bool Ext4OtherInodeUpdateTimeFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4OtherInodeUpdateTimeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent.mode)
}
inline ::uint32_t Ext4OtherInodeUpdateTimeFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4OtherInodeUpdateTimeFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4PunchHoleFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4PunchHoleFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4PunchHoleFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4PunchHoleFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4PunchHoleFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.dev)
}
inline ::uint64_t Ext4PunchHoleFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4PunchHoleFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4PunchHoleFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4PunchHoleFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4PunchHoleFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4PunchHoleFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.ino)
}
inline ::uint64_t Ext4PunchHoleFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4PunchHoleFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool Ext4PunchHoleFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4PunchHoleFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4PunchHoleFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4PunchHoleFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.offset)
}
inline ::int64_t Ext4PunchHoleFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4PunchHoleFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}

// optional int64 len = 4;
inline bool Ext4PunchHoleFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4PunchHoleFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4PunchHoleFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.len)
  return _internal_len();
}
inline void Ext4PunchHoleFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.len)
}
inline ::int64_t Ext4PunchHoleFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4PunchHoleFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional int32 mode = 5;
inline bool Ext4PunchHoleFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4PunchHoleFtraceEvent::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4PunchHoleFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4PunchHoleFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4PunchHoleFtraceEvent::set_mode(::int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4PunchHoleFtraceEvent.mode)
}
inline ::int32_t Ext4PunchHoleFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4PunchHoleFtraceEvent::_internal_set_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4ReadBlockBitmapLoadFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ReadBlockBitmapLoadFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ReadBlockBitmapLoadFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.dev)
}
inline ::uint64_t Ext4ReadBlockBitmapLoadFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint32 group = 2;
inline bool Ext4ReadBlockBitmapLoadFtraceEvent::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Ext4ReadBlockBitmapLoadFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.group)
  return _internal_group();
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.group)
}
inline ::uint32_t Ext4ReadBlockBitmapLoadFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::_internal_set_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_ = value;
}

// optional uint32 prefetch = 3;
inline bool Ext4ReadBlockBitmapLoadFtraceEvent::has_prefetch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::clear_prefetch() {
  _impl_.prefetch_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4ReadBlockBitmapLoadFtraceEvent::prefetch() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.prefetch)
  return _internal_prefetch();
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::set_prefetch(::uint32_t value) {
  _internal_set_prefetch(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent.prefetch)
}
inline ::uint32_t Ext4ReadBlockBitmapLoadFtraceEvent::_internal_prefetch() const {
  return _impl_.prefetch_;
}
inline void Ext4ReadBlockBitmapLoadFtraceEvent::_internal_set_prefetch(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prefetch_ = value;
}

// -------------------------------------------------------------------

// Ext4ReadpageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ReadpageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ReadpageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ReadpageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadpageFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ReadpageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadpageFtraceEvent.dev)
}
inline ::uint64_t Ext4ReadpageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ReadpageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ReadpageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ReadpageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ReadpageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadpageFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ReadpageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadpageFtraceEvent.ino)
}
inline ::uint64_t Ext4ReadpageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ReadpageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 index = 3;
inline bool Ext4ReadpageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ReadpageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ReadpageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReadpageFtraceEvent.index)
  return _internal_index();
}
inline void Ext4ReadpageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReadpageFtraceEvent.index)
}
inline ::uint64_t Ext4ReadpageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void Ext4ReadpageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Ext4ReleasepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ReleasepageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ReleasepageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ReleasepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReleasepageFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ReleasepageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReleasepageFtraceEvent.dev)
}
inline ::uint64_t Ext4ReleasepageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ReleasepageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ReleasepageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ReleasepageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ReleasepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReleasepageFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ReleasepageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReleasepageFtraceEvent.ino)
}
inline ::uint64_t Ext4ReleasepageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ReleasepageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 index = 3;
inline bool Ext4ReleasepageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ReleasepageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4ReleasepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ReleasepageFtraceEvent.index)
  return _internal_index();
}
inline void Ext4ReleasepageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ReleasepageFtraceEvent.index)
}
inline ::uint64_t Ext4ReleasepageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void Ext4ReleasepageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Ext4RemoveBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4RemoveBlocksFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4RemoveBlocksFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.dev)
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4RemoveBlocksFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4RemoveBlocksFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ino)
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 from = 3;
inline bool Ext4RemoveBlocksFtraceEvent::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_from() {
  _impl_.from_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.from)
  return _internal_from();
}
inline void Ext4RemoveBlocksFtraceEvent::set_from(::uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.from)
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::_internal_from() const {
  return _impl_.from_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_from(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.from_ = value;
}

// optional uint32 to = 4;
inline bool Ext4RemoveBlocksFtraceEvent::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_to() {
  _impl_.to_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::to() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.to)
  return _internal_to();
}
inline void Ext4RemoveBlocksFtraceEvent::set_to(::uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.to)
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::_internal_to() const {
  return _impl_.to_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_to(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.to_ = value;
}

// optional int64 partial = 5;
inline bool Ext4RemoveBlocksFtraceEvent::has_partial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_partial() {
  _impl_.partial_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Ext4RemoveBlocksFtraceEvent::partial() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.partial)
  return _internal_partial();
}
inline void Ext4RemoveBlocksFtraceEvent::set_partial(::int64_t value) {
  _internal_set_partial(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.partial)
}
inline ::int64_t Ext4RemoveBlocksFtraceEvent::_internal_partial() const {
  return _impl_.partial_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_partial(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.partial_ = value;
}

// optional uint64 ee_pblk = 6;
inline bool Ext4RemoveBlocksFtraceEvent::has_ee_pblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ee_pblk() {
  _impl_.ee_pblk_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::ee_pblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_pblk)
  return _internal_ee_pblk();
}
inline void Ext4RemoveBlocksFtraceEvent::set_ee_pblk(::uint64_t value) {
  _internal_set_ee_pblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_pblk)
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::_internal_ee_pblk() const {
  return _impl_.ee_pblk_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_ee_pblk(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ee_pblk_ = value;
}

// optional uint32 ee_lblk = 7;
inline bool Ext4RemoveBlocksFtraceEvent::has_ee_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ee_lblk() {
  _impl_.ee_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::ee_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_lblk)
  return _internal_ee_lblk();
}
inline void Ext4RemoveBlocksFtraceEvent::set_ee_lblk(::uint32_t value) {
  _internal_set_ee_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_lblk)
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::_internal_ee_lblk() const {
  return _impl_.ee_lblk_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_ee_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ee_lblk_ = value;
}

// optional uint32 ee_len = 8;
inline bool Ext4RemoveBlocksFtraceEvent::has_ee_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_ee_len() {
  _impl_.ee_len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::ee_len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_len)
  return _internal_ee_len();
}
inline void Ext4RemoveBlocksFtraceEvent::set_ee_len(::uint32_t value) {
  _internal_set_ee_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.ee_len)
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::_internal_ee_len() const {
  return _impl_.ee_len_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_ee_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ee_len_ = value;
}

// optional uint32 pc_lblk = 9;
inline bool Ext4RemoveBlocksFtraceEvent::has_pc_lblk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_pc_lblk() {
  _impl_.pc_lblk_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::pc_lblk() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.pc_lblk)
  return _internal_pc_lblk();
}
inline void Ext4RemoveBlocksFtraceEvent::set_pc_lblk(::uint32_t value) {
  _internal_set_pc_lblk(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.pc_lblk)
}
inline ::uint32_t Ext4RemoveBlocksFtraceEvent::_internal_pc_lblk() const {
  return _impl_.pc_lblk_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_pc_lblk(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pc_lblk_ = value;
}

// optional uint64 pc_pclu = 10;
inline bool Ext4RemoveBlocksFtraceEvent::has_pc_pclu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_pc_pclu() {
  _impl_.pc_pclu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::pc_pclu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.pc_pclu)
  return _internal_pc_pclu();
}
inline void Ext4RemoveBlocksFtraceEvent::set_pc_pclu(::uint64_t value) {
  _internal_set_pc_pclu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.pc_pclu)
}
inline ::uint64_t Ext4RemoveBlocksFtraceEvent::_internal_pc_pclu() const {
  return _impl_.pc_pclu_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_pc_pclu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pc_pclu_ = value;
}

// optional int32 pc_state = 11;
inline bool Ext4RemoveBlocksFtraceEvent::has_pc_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Ext4RemoveBlocksFtraceEvent::clear_pc_state() {
  _impl_.pc_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Ext4RemoveBlocksFtraceEvent::pc_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RemoveBlocksFtraceEvent.pc_state)
  return _internal_pc_state();
}
inline void Ext4RemoveBlocksFtraceEvent::set_pc_state(::int32_t value) {
  _internal_set_pc_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RemoveBlocksFtraceEvent.pc_state)
}
inline ::int32_t Ext4RemoveBlocksFtraceEvent::_internal_pc_state() const {
  return _impl_.pc_state_;
}
inline void Ext4RemoveBlocksFtraceEvent::_internal_set_pc_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.pc_state_ = value;
}

// -------------------------------------------------------------------

// Ext4RequestBlocksFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4RequestBlocksFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4RequestBlocksFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.dev)
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4RequestBlocksFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4RequestBlocksFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.ino)
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 len = 3;
inline bool Ext4RequestBlocksFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.len)
  return _internal_len();
}
inline void Ext4RequestBlocksFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.len)
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.len_ = value;
}

// optional uint32 logical = 4;
inline bool Ext4RequestBlocksFtraceEvent::has_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_logical() {
  _impl_.logical_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::logical() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.logical)
  return _internal_logical();
}
inline void Ext4RequestBlocksFtraceEvent::set_logical(::uint32_t value) {
  _internal_set_logical(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.logical)
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::_internal_logical() const {
  return _impl_.logical_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_logical(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.logical_ = value;
}

// optional uint32 lleft = 5;
inline bool Ext4RequestBlocksFtraceEvent::has_lleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_lleft() {
  _impl_.lleft_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::lleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.lleft)
  return _internal_lleft();
}
inline void Ext4RequestBlocksFtraceEvent::set_lleft(::uint32_t value) {
  _internal_set_lleft(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.lleft)
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::_internal_lleft() const {
  return _impl_.lleft_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_lleft(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lleft_ = value;
}

// optional uint32 lright = 6;
inline bool Ext4RequestBlocksFtraceEvent::has_lright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_lright() {
  _impl_.lright_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::lright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.lright)
  return _internal_lright();
}
inline void Ext4RequestBlocksFtraceEvent::set_lright(::uint32_t value) {
  _internal_set_lright(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.lright)
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::_internal_lright() const {
  return _impl_.lright_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_lright(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lright_ = value;
}

// optional uint64 goal = 7;
inline bool Ext4RequestBlocksFtraceEvent::has_goal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_goal() {
  _impl_.goal_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::goal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.goal)
  return _internal_goal();
}
inline void Ext4RequestBlocksFtraceEvent::set_goal(::uint64_t value) {
  _internal_set_goal(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.goal)
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::_internal_goal() const {
  return _impl_.goal_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_goal(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.goal_ = value;
}

// optional uint64 pleft = 8;
inline bool Ext4RequestBlocksFtraceEvent::has_pleft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_pleft() {
  _impl_.pleft_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::pleft() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.pleft)
  return _internal_pleft();
}
inline void Ext4RequestBlocksFtraceEvent::set_pleft(::uint64_t value) {
  _internal_set_pleft(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.pleft)
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::_internal_pleft() const {
  return _impl_.pleft_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_pleft(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pleft_ = value;
}

// optional uint64 pright = 9;
inline bool Ext4RequestBlocksFtraceEvent::has_pright() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_pright() {
  _impl_.pright_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::pright() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.pright)
  return _internal_pright();
}
inline void Ext4RequestBlocksFtraceEvent::set_pright(::uint64_t value) {
  _internal_set_pright(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.pright)
}
inline ::uint64_t Ext4RequestBlocksFtraceEvent::_internal_pright() const {
  return _impl_.pright_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_pright(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pright_ = value;
}

// optional uint32 flags = 10;
inline bool Ext4RequestBlocksFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4RequestBlocksFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestBlocksFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4RequestBlocksFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestBlocksFtraceEvent.flags)
}
inline ::uint32_t Ext4RequestBlocksFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4RequestBlocksFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4RequestInodeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4RequestInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4RequestInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4RequestInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4RequestInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestInodeFtraceEvent.dev)
}
inline ::uint64_t Ext4RequestInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4RequestInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 dir = 2;
inline bool Ext4RequestInodeFtraceEvent::has_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4RequestInodeFtraceEvent::clear_dir() {
  _impl_.dir_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4RequestInodeFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestInodeFtraceEvent.dir)
  return _internal_dir();
}
inline void Ext4RequestInodeFtraceEvent::set_dir(::uint64_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestInodeFtraceEvent.dir)
}
inline ::uint64_t Ext4RequestInodeFtraceEvent::_internal_dir() const {
  return _impl_.dir_;
}
inline void Ext4RequestInodeFtraceEvent::_internal_set_dir(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dir_ = value;
}

// optional uint32 mode = 3;
inline bool Ext4RequestInodeFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4RequestInodeFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4RequestInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4RequestInodeFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4RequestInodeFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4RequestInodeFtraceEvent.mode)
}
inline ::uint32_t Ext4RequestInodeFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4RequestInodeFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// Ext4SyncFsFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4SyncFsFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4SyncFsFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4SyncFsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFsFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4SyncFsFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFsFtraceEvent.dev)
}
inline ::uint64_t Ext4SyncFsFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4SyncFsFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 wait = 2;
inline bool Ext4SyncFsFtraceEvent::has_wait() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4SyncFsFtraceEvent::clear_wait() {
  _impl_.wait_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4SyncFsFtraceEvent::wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4SyncFsFtraceEvent.wait)
  return _internal_wait();
}
inline void Ext4SyncFsFtraceEvent::set_wait(::int32_t value) {
  _internal_set_wait(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4SyncFsFtraceEvent.wait)
}
inline ::int32_t Ext4SyncFsFtraceEvent::_internal_wait() const {
  return _impl_.wait_;
}
inline void Ext4SyncFsFtraceEvent::_internal_set_wait(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.wait_ = value;
}

// -------------------------------------------------------------------

// Ext4TrimAllFreeFtraceEvent

// optional int32 dev_major = 1;
inline bool Ext4TrimAllFreeFtraceEvent::has_dev_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_dev_major() {
  _impl_.dev_major_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::dev_major() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_major)
  return _internal_dev_major();
}
inline void Ext4TrimAllFreeFtraceEvent::set_dev_major(::int32_t value) {
  _internal_set_dev_major(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_major)
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::_internal_dev_major() const {
  return _impl_.dev_major_;
}
inline void Ext4TrimAllFreeFtraceEvent::_internal_set_dev_major(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_major_ = value;
}

// optional int32 dev_minor = 2;
inline bool Ext4TrimAllFreeFtraceEvent::has_dev_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_dev_minor() {
  _impl_.dev_minor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::dev_minor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_minor)
  return _internal_dev_minor();
}
inline void Ext4TrimAllFreeFtraceEvent::set_dev_minor(::int32_t value) {
  _internal_set_dev_minor(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.dev_minor)
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::_internal_dev_minor() const {
  return _impl_.dev_minor_;
}
inline void Ext4TrimAllFreeFtraceEvent::_internal_set_dev_minor(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dev_minor_ = value;
}

// optional uint32 group = 3;
inline bool Ext4TrimAllFreeFtraceEvent::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4TrimAllFreeFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.group)
  return _internal_group();
}
inline void Ext4TrimAllFreeFtraceEvent::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.group)
}
inline ::uint32_t Ext4TrimAllFreeFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline void Ext4TrimAllFreeFtraceEvent::_internal_set_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_ = value;
}

// optional int32 start = 4;
inline bool Ext4TrimAllFreeFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_start() {
  _impl_.start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.start)
  return _internal_start();
}
inline void Ext4TrimAllFreeFtraceEvent::set_start(::int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.start)
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void Ext4TrimAllFreeFtraceEvent::_internal_set_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_ = value;
}

// optional int32 len = 5;
inline bool Ext4TrimAllFreeFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4TrimAllFreeFtraceEvent::clear_len() {
  _impl_.len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimAllFreeFtraceEvent.len)
  return _internal_len();
}
inline void Ext4TrimAllFreeFtraceEvent::set_len(::int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimAllFreeFtraceEvent.len)
}
inline ::int32_t Ext4TrimAllFreeFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4TrimAllFreeFtraceEvent::_internal_set_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4TrimExtentFtraceEvent

// optional int32 dev_major = 1;
inline bool Ext4TrimExtentFtraceEvent::has_dev_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4TrimExtentFtraceEvent::clear_dev_major() {
  _impl_.dev_major_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Ext4TrimExtentFtraceEvent::dev_major() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_major)
  return _internal_dev_major();
}
inline void Ext4TrimExtentFtraceEvent::set_dev_major(::int32_t value) {
  _internal_set_dev_major(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_major)
}
inline ::int32_t Ext4TrimExtentFtraceEvent::_internal_dev_major() const {
  return _impl_.dev_major_;
}
inline void Ext4TrimExtentFtraceEvent::_internal_set_dev_major(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_major_ = value;
}

// optional int32 dev_minor = 2;
inline bool Ext4TrimExtentFtraceEvent::has_dev_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4TrimExtentFtraceEvent::clear_dev_minor() {
  _impl_.dev_minor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Ext4TrimExtentFtraceEvent::dev_minor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_minor)
  return _internal_dev_minor();
}
inline void Ext4TrimExtentFtraceEvent::set_dev_minor(::int32_t value) {
  _internal_set_dev_minor(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.dev_minor)
}
inline ::int32_t Ext4TrimExtentFtraceEvent::_internal_dev_minor() const {
  return _impl_.dev_minor_;
}
inline void Ext4TrimExtentFtraceEvent::_internal_set_dev_minor(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dev_minor_ = value;
}

// optional uint32 group = 3;
inline bool Ext4TrimExtentFtraceEvent::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4TrimExtentFtraceEvent::clear_group() {
  _impl_.group_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Ext4TrimExtentFtraceEvent::group() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.group)
  return _internal_group();
}
inline void Ext4TrimExtentFtraceEvent::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.group)
}
inline ::uint32_t Ext4TrimExtentFtraceEvent::_internal_group() const {
  return _impl_.group_;
}
inline void Ext4TrimExtentFtraceEvent::_internal_set_group(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_ = value;
}

// optional int32 start = 4;
inline bool Ext4TrimExtentFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4TrimExtentFtraceEvent::clear_start() {
  _impl_.start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4TrimExtentFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.start)
  return _internal_start();
}
inline void Ext4TrimExtentFtraceEvent::set_start(::int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.start)
}
inline ::int32_t Ext4TrimExtentFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void Ext4TrimExtentFtraceEvent::_internal_set_start(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_ = value;
}

// optional int32 len = 5;
inline bool Ext4TrimExtentFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4TrimExtentFtraceEvent::clear_len() {
  _impl_.len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4TrimExtentFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TrimExtentFtraceEvent.len)
  return _internal_len();
}
inline void Ext4TrimExtentFtraceEvent::set_len(::int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TrimExtentFtraceEvent.len)
}
inline ::int32_t Ext4TrimExtentFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4TrimExtentFtraceEvent::_internal_set_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// Ext4TruncateEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4TruncateEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4TruncateEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4TruncateEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4TruncateEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4TruncateEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4TruncateEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4TruncateEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4TruncateEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4TruncateEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4TruncateEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4TruncateEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4TruncateEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 blocks = 3;
inline bool Ext4TruncateEnterFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4TruncateEnterFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4TruncateEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateEnterFtraceEvent.blocks)
  return _internal_blocks();
}
inline void Ext4TruncateEnterFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateEnterFtraceEvent.blocks)
}
inline ::uint64_t Ext4TruncateEnterFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void Ext4TruncateEnterFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blocks_ = value;
}

// -------------------------------------------------------------------

// Ext4TruncateExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4TruncateExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4TruncateExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4TruncateExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4TruncateExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateExitFtraceEvent.dev)
}
inline ::uint64_t Ext4TruncateExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4TruncateExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4TruncateExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4TruncateExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4TruncateExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4TruncateExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateExitFtraceEvent.ino)
}
inline ::uint64_t Ext4TruncateExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4TruncateExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 blocks = 3;
inline bool Ext4TruncateExitFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4TruncateExitFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4TruncateExitFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4TruncateExitFtraceEvent.blocks)
  return _internal_blocks();
}
inline void Ext4TruncateExitFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4TruncateExitFtraceEvent.blocks)
}
inline ::uint64_t Ext4TruncateExitFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void Ext4TruncateExitFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.blocks_ = value;
}

// -------------------------------------------------------------------

// Ext4UnlinkEnterFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4UnlinkEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4UnlinkEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4UnlinkEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.dev)
}
inline ::uint64_t Ext4UnlinkEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4UnlinkEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4UnlinkEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4UnlinkEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4UnlinkEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.ino)
}
inline ::uint64_t Ext4UnlinkEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4UnlinkEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 parent = 3;
inline bool Ext4UnlinkEnterFtraceEvent::has_parent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_parent() {
  _impl_.parent_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4UnlinkEnterFtraceEvent::parent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.parent)
  return _internal_parent();
}
inline void Ext4UnlinkEnterFtraceEvent::set_parent(::uint64_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.parent)
}
inline ::uint64_t Ext4UnlinkEnterFtraceEvent::_internal_parent() const {
  return _impl_.parent_;
}
inline void Ext4UnlinkEnterFtraceEvent::_internal_set_parent(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.parent_ = value;
}

// optional int64 size = 4;
inline bool Ext4UnlinkEnterFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4UnlinkEnterFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4UnlinkEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkEnterFtraceEvent.size)
  return _internal_size();
}
inline void Ext4UnlinkEnterFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkEnterFtraceEvent.size)
}
inline ::int64_t Ext4UnlinkEnterFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void Ext4UnlinkEnterFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// Ext4UnlinkExitFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4UnlinkExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4UnlinkExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4UnlinkExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkExitFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4UnlinkExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkExitFtraceEvent.dev)
}
inline ::uint64_t Ext4UnlinkExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4UnlinkExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4UnlinkExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4UnlinkExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4UnlinkExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkExitFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4UnlinkExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkExitFtraceEvent.ino)
}
inline ::uint64_t Ext4UnlinkExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4UnlinkExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool Ext4UnlinkExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4UnlinkExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4UnlinkExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4UnlinkExitFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4UnlinkExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4UnlinkExitFtraceEvent.ret)
}
inline ::int32_t Ext4UnlinkExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4UnlinkExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// Ext4WriteBeginFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WriteBeginFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4WriteBeginFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4WriteBeginFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4WriteBeginFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.dev)
}
inline ::uint64_t Ext4WriteBeginFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4WriteBeginFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4WriteBeginFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4WriteBeginFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4WriteBeginFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4WriteBeginFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.ino)
}
inline ::uint64_t Ext4WriteBeginFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4WriteBeginFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4WriteBeginFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4WriteBeginFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4WriteBeginFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4WriteBeginFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.pos)
}
inline ::int64_t Ext4WriteBeginFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4WriteBeginFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool Ext4WriteBeginFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4WriteBeginFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4WriteBeginFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.len)
  return _internal_len();
}
inline void Ext4WriteBeginFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.len)
}
inline ::uint32_t Ext4WriteBeginFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4WriteBeginFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 flags = 5;
inline bool Ext4WriteBeginFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4WriteBeginFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4WriteBeginFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteBeginFtraceEvent.flags)
  return _internal_flags();
}
inline void Ext4WriteBeginFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteBeginFtraceEvent.flags)
}
inline ::uint32_t Ext4WriteBeginFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void Ext4WriteBeginFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// Ext4WriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WriteEndFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4WriteEndFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4WriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4WriteEndFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.dev)
}
inline ::uint64_t Ext4WriteEndFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4WriteEndFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4WriteEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4WriteEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4WriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4WriteEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.ino)
}
inline ::uint64_t Ext4WriteEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4WriteEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool Ext4WriteEndFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4WriteEndFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4WriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.pos)
  return _internal_pos();
}
inline void Ext4WriteEndFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.pos)
}
inline ::int64_t Ext4WriteEndFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void Ext4WriteEndFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool Ext4WriteEndFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4WriteEndFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Ext4WriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.len)
  return _internal_len();
}
inline void Ext4WriteEndFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.len)
}
inline ::uint32_t Ext4WriteEndFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4WriteEndFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 copied = 5;
inline bool Ext4WriteEndFtraceEvent::has_copied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4WriteEndFtraceEvent::clear_copied() {
  _impl_.copied_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Ext4WriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WriteEndFtraceEvent.copied)
  return _internal_copied();
}
inline void Ext4WriteEndFtraceEvent::set_copied(::uint32_t value) {
  _internal_set_copied(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WriteEndFtraceEvent.copied)
}
inline ::uint32_t Ext4WriteEndFtraceEvent::_internal_copied() const {
  return _impl_.copied_;
}
inline void Ext4WriteEndFtraceEvent::_internal_set_copied(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.copied_ = value;
}

// -------------------------------------------------------------------

// Ext4WritepageFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WritepageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4WritepageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4WritepageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepageFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4WritepageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepageFtraceEvent.dev)
}
inline ::uint64_t Ext4WritepageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4WritepageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4WritepageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4WritepageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4WritepageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepageFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4WritepageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepageFtraceEvent.ino)
}
inline ::uint64_t Ext4WritepageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4WritepageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 index = 3;
inline bool Ext4WritepageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4WritepageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Ext4WritepageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepageFtraceEvent.index)
  return _internal_index();
}
inline void Ext4WritepageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepageFtraceEvent.index)
}
inline ::uint64_t Ext4WritepageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void Ext4WritepageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Ext4WritepagesFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WritepagesFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4WritepagesFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4WritepagesFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.dev)
}
inline ::uint64_t Ext4WritepagesFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4WritepagesFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4WritepagesFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4WritepagesFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.ino)
}
inline ::uint64_t Ext4WritepagesFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 nr_to_write = 3;
inline bool Ext4WritepagesFtraceEvent::has_nr_to_write() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_nr_to_write() {
  _impl_.nr_to_write_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4WritepagesFtraceEvent::nr_to_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.nr_to_write)
  return _internal_nr_to_write();
}
inline void Ext4WritepagesFtraceEvent::set_nr_to_write(::int64_t value) {
  _internal_set_nr_to_write(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.nr_to_write)
}
inline ::int64_t Ext4WritepagesFtraceEvent::_internal_nr_to_write() const {
  return _impl_.nr_to_write_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_nr_to_write(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nr_to_write_ = value;
}

// optional int64 pages_skipped = 4;
inline bool Ext4WritepagesFtraceEvent::has_pages_skipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_pages_skipped() {
  _impl_.pages_skipped_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4WritepagesFtraceEvent::pages_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.pages_skipped)
  return _internal_pages_skipped();
}
inline void Ext4WritepagesFtraceEvent::set_pages_skipped(::int64_t value) {
  _internal_set_pages_skipped(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.pages_skipped)
}
inline ::int64_t Ext4WritepagesFtraceEvent::_internal_pages_skipped() const {
  return _impl_.pages_skipped_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_pages_skipped(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pages_skipped_ = value;
}

// optional int64 range_start = 5;
inline bool Ext4WritepagesFtraceEvent::has_range_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_range_start() {
  _impl_.range_start_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Ext4WritepagesFtraceEvent::range_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.range_start)
  return _internal_range_start();
}
inline void Ext4WritepagesFtraceEvent::set_range_start(::int64_t value) {
  _internal_set_range_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.range_start)
}
inline ::int64_t Ext4WritepagesFtraceEvent::_internal_range_start() const {
  return _impl_.range_start_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_range_start(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.range_start_ = value;
}

// optional int64 range_end = 6;
inline bool Ext4WritepagesFtraceEvent::has_range_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_range_end() {
  _impl_.range_end_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Ext4WritepagesFtraceEvent::range_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.range_end)
  return _internal_range_end();
}
inline void Ext4WritepagesFtraceEvent::set_range_end(::int64_t value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.range_end)
}
inline ::int64_t Ext4WritepagesFtraceEvent::_internal_range_end() const {
  return _impl_.range_end_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_range_end(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.range_end_ = value;
}

// optional uint64 writeback_index = 7;
inline bool Ext4WritepagesFtraceEvent::has_writeback_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_writeback_index() {
  _impl_.writeback_index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Ext4WritepagesFtraceEvent::writeback_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.writeback_index)
  return _internal_writeback_index();
}
inline void Ext4WritepagesFtraceEvent::set_writeback_index(::uint64_t value) {
  _internal_set_writeback_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.writeback_index)
}
inline ::uint64_t Ext4WritepagesFtraceEvent::_internal_writeback_index() const {
  return _impl_.writeback_index_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_writeback_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.writeback_index_ = value;
}

// optional int32 sync_mode = 8;
inline bool Ext4WritepagesFtraceEvent::has_sync_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_sync_mode() {
  _impl_.sync_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Ext4WritepagesFtraceEvent::sync_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.sync_mode)
  return _internal_sync_mode();
}
inline void Ext4WritepagesFtraceEvent::set_sync_mode(::int32_t value) {
  _internal_set_sync_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.sync_mode)
}
inline ::int32_t Ext4WritepagesFtraceEvent::_internal_sync_mode() const {
  return _impl_.sync_mode_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_sync_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.sync_mode_ = value;
}

// optional uint32 for_kupdate = 9;
inline bool Ext4WritepagesFtraceEvent::has_for_kupdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_for_kupdate() {
  _impl_.for_kupdate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Ext4WritepagesFtraceEvent::for_kupdate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.for_kupdate)
  return _internal_for_kupdate();
}
inline void Ext4WritepagesFtraceEvent::set_for_kupdate(::uint32_t value) {
  _internal_set_for_kupdate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.for_kupdate)
}
inline ::uint32_t Ext4WritepagesFtraceEvent::_internal_for_kupdate() const {
  return _impl_.for_kupdate_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_for_kupdate(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.for_kupdate_ = value;
}

// optional uint32 range_cyclic = 10;
inline bool Ext4WritepagesFtraceEvent::has_range_cyclic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Ext4WritepagesFtraceEvent::clear_range_cyclic() {
  _impl_.range_cyclic_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Ext4WritepagesFtraceEvent::range_cyclic() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesFtraceEvent.range_cyclic)
  return _internal_range_cyclic();
}
inline void Ext4WritepagesFtraceEvent::set_range_cyclic(::uint32_t value) {
  _internal_set_range_cyclic(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesFtraceEvent.range_cyclic)
}
inline ::uint32_t Ext4WritepagesFtraceEvent::_internal_range_cyclic() const {
  return _impl_.range_cyclic_;
}
inline void Ext4WritepagesFtraceEvent::_internal_set_range_cyclic(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.range_cyclic_ = value;
}

// -------------------------------------------------------------------

// Ext4WritepagesResultFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4WritepagesResultFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4WritepagesResultFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4WritepagesResultFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.dev)
}
inline ::uint64_t Ext4WritepagesResultFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4WritepagesResultFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4WritepagesResultFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4WritepagesResultFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.ino)
}
inline ::uint64_t Ext4WritepagesResultFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool Ext4WritepagesResultFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Ext4WritepagesResultFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.ret)
  return _internal_ret();
}
inline void Ext4WritepagesResultFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.ret)
}
inline ::int32_t Ext4WritepagesResultFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// optional int32 pages_written = 4;
inline bool Ext4WritepagesResultFtraceEvent::has_pages_written() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_pages_written() {
  _impl_.pages_written_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Ext4WritepagesResultFtraceEvent::pages_written() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_written)
  return _internal_pages_written();
}
inline void Ext4WritepagesResultFtraceEvent::set_pages_written(::int32_t value) {
  _internal_set_pages_written(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_written)
}
inline ::int32_t Ext4WritepagesResultFtraceEvent::_internal_pages_written() const {
  return _impl_.pages_written_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_pages_written(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pages_written_ = value;
}

// optional int64 pages_skipped = 5;
inline bool Ext4WritepagesResultFtraceEvent::has_pages_skipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_pages_skipped() {
  _impl_.pages_skipped_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Ext4WritepagesResultFtraceEvent::pages_skipped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_skipped)
  return _internal_pages_skipped();
}
inline void Ext4WritepagesResultFtraceEvent::set_pages_skipped(::int64_t value) {
  _internal_set_pages_skipped(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.pages_skipped)
}
inline ::int64_t Ext4WritepagesResultFtraceEvent::_internal_pages_skipped() const {
  return _impl_.pages_skipped_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_pages_skipped(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pages_skipped_ = value;
}

// optional uint64 writeback_index = 6;
inline bool Ext4WritepagesResultFtraceEvent::has_writeback_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_writeback_index() {
  _impl_.writeback_index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Ext4WritepagesResultFtraceEvent::writeback_index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.writeback_index)
  return _internal_writeback_index();
}
inline void Ext4WritepagesResultFtraceEvent::set_writeback_index(::uint64_t value) {
  _internal_set_writeback_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.writeback_index)
}
inline ::uint64_t Ext4WritepagesResultFtraceEvent::_internal_writeback_index() const {
  return _impl_.writeback_index_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_writeback_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.writeback_index_ = value;
}

// optional int32 sync_mode = 7;
inline bool Ext4WritepagesResultFtraceEvent::has_sync_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Ext4WritepagesResultFtraceEvent::clear_sync_mode() {
  _impl_.sync_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Ext4WritepagesResultFtraceEvent::sync_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4WritepagesResultFtraceEvent.sync_mode)
  return _internal_sync_mode();
}
inline void Ext4WritepagesResultFtraceEvent::set_sync_mode(::int32_t value) {
  _internal_set_sync_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4WritepagesResultFtraceEvent.sync_mode)
}
inline ::int32_t Ext4WritepagesResultFtraceEvent::_internal_sync_mode() const {
  return _impl_.sync_mode_;
}
inline void Ext4WritepagesResultFtraceEvent::_internal_set_sync_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sync_mode_ = value;
}

// -------------------------------------------------------------------

// Ext4ZeroRangeFtraceEvent

// optional uint64 dev = 1;
inline bool Ext4ZeroRangeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Ext4ZeroRangeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Ext4ZeroRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.dev)
  return _internal_dev();
}
inline void Ext4ZeroRangeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.dev)
}
inline ::uint64_t Ext4ZeroRangeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void Ext4ZeroRangeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool Ext4ZeroRangeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Ext4ZeroRangeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Ext4ZeroRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.ino)
  return _internal_ino();
}
inline void Ext4ZeroRangeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.ino)
}
inline ::uint64_t Ext4ZeroRangeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void Ext4ZeroRangeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 offset = 3;
inline bool Ext4ZeroRangeFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Ext4ZeroRangeFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Ext4ZeroRangeFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.offset)
  return _internal_offset();
}
inline void Ext4ZeroRangeFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.offset)
}
inline ::int64_t Ext4ZeroRangeFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void Ext4ZeroRangeFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}

// optional int64 len = 4;
inline bool Ext4ZeroRangeFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Ext4ZeroRangeFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Ext4ZeroRangeFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.len)
  return _internal_len();
}
inline void Ext4ZeroRangeFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.len)
}
inline ::int64_t Ext4ZeroRangeFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void Ext4ZeroRangeFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional int32 mode = 5;
inline bool Ext4ZeroRangeFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Ext4ZeroRangeFtraceEvent::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Ext4ZeroRangeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.Ext4ZeroRangeFtraceEvent.mode)
  return _internal_mode();
}
inline void Ext4ZeroRangeFtraceEvent::set_mode(::int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.Ext4ZeroRangeFtraceEvent.mode)
}
inline ::int32_t Ext4ZeroRangeFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void Ext4ZeroRangeFtraceEvent::_internal_set_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fext4_2eproto_2epb_2eh
