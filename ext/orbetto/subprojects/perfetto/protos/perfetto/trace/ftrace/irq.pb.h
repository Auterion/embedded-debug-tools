// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/irq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
namespace perfetto {
namespace protos {
class IrqHandlerEntryFtraceEvent;
struct IrqHandlerEntryFtraceEventDefaultTypeInternal;
extern IrqHandlerEntryFtraceEventDefaultTypeInternal _IrqHandlerEntryFtraceEvent_default_instance_;
class IrqHandlerExitFtraceEvent;
struct IrqHandlerExitFtraceEventDefaultTypeInternal;
extern IrqHandlerExitFtraceEventDefaultTypeInternal _IrqHandlerExitFtraceEvent_default_instance_;
class SoftirqEntryFtraceEvent;
struct SoftirqEntryFtraceEventDefaultTypeInternal;
extern SoftirqEntryFtraceEventDefaultTypeInternal _SoftirqEntryFtraceEvent_default_instance_;
class SoftirqExitFtraceEvent;
struct SoftirqExitFtraceEventDefaultTypeInternal;
extern SoftirqExitFtraceEventDefaultTypeInternal _SoftirqExitFtraceEvent_default_instance_;
class SoftirqRaiseFtraceEvent;
struct SoftirqRaiseFtraceEventDefaultTypeInternal;
extern SoftirqRaiseFtraceEventDefaultTypeInternal _SoftirqRaiseFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::IrqHandlerEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IrqHandlerEntryFtraceEvent>(Arena*);
template <>
::perfetto::protos::IrqHandlerExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::IrqHandlerExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::SoftirqEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SoftirqEntryFtraceEvent>(Arena*);
template <>
::perfetto::protos::SoftirqExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SoftirqExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::SoftirqRaiseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SoftirqRaiseFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class SoftirqEntryFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SoftirqEntryFtraceEvent) */ {
 public:
  inline SoftirqEntryFtraceEvent() : SoftirqEntryFtraceEvent(nullptr) {}
  ~SoftirqEntryFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftirqEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoftirqEntryFtraceEvent(const SoftirqEntryFtraceEvent& from);
  SoftirqEntryFtraceEvent(SoftirqEntryFtraceEvent&& from) noexcept
    : SoftirqEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SoftirqEntryFtraceEvent& operator=(const SoftirqEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftirqEntryFtraceEvent& operator=(SoftirqEntryFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftirqEntryFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftirqEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SoftirqEntryFtraceEvent*>(
               &_SoftirqEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SoftirqEntryFtraceEvent& a, SoftirqEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftirqEntryFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftirqEntryFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftirqEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftirqEntryFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoftirqEntryFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SoftirqEntryFtraceEvent& from) {
    SoftirqEntryFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftirqEntryFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SoftirqEntryFtraceEvent";
  }
  protected:
  explicit SoftirqEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // optional uint32 vec = 1;
  bool has_vec() const;
  void clear_vec() ;
  ::uint32_t vec() const;
  void set_vec(::uint32_t value);

  private:
  ::uint32_t _internal_vec() const;
  void _internal_set_vec(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SoftirqEntryFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t vec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};// -------------------------------------------------------------------

class SoftirqExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SoftirqExitFtraceEvent) */ {
 public:
  inline SoftirqExitFtraceEvent() : SoftirqExitFtraceEvent(nullptr) {}
  ~SoftirqExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftirqExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoftirqExitFtraceEvent(const SoftirqExitFtraceEvent& from);
  SoftirqExitFtraceEvent(SoftirqExitFtraceEvent&& from) noexcept
    : SoftirqExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SoftirqExitFtraceEvent& operator=(const SoftirqExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftirqExitFtraceEvent& operator=(SoftirqExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftirqExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftirqExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SoftirqExitFtraceEvent*>(
               &_SoftirqExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoftirqExitFtraceEvent& a, SoftirqExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftirqExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftirqExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftirqExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftirqExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoftirqExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SoftirqExitFtraceEvent& from) {
    SoftirqExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftirqExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SoftirqExitFtraceEvent";
  }
  protected:
  explicit SoftirqExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // optional uint32 vec = 1;
  bool has_vec() const;
  void clear_vec() ;
  ::uint32_t vec() const;
  void set_vec(::uint32_t value);

  private:
  ::uint32_t _internal_vec() const;
  void _internal_set_vec(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SoftirqExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t vec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};// -------------------------------------------------------------------

class SoftirqRaiseFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SoftirqRaiseFtraceEvent) */ {
 public:
  inline SoftirqRaiseFtraceEvent() : SoftirqRaiseFtraceEvent(nullptr) {}
  ~SoftirqRaiseFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftirqRaiseFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoftirqRaiseFtraceEvent(const SoftirqRaiseFtraceEvent& from);
  SoftirqRaiseFtraceEvent(SoftirqRaiseFtraceEvent&& from) noexcept
    : SoftirqRaiseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SoftirqRaiseFtraceEvent& operator=(const SoftirqRaiseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftirqRaiseFtraceEvent& operator=(SoftirqRaiseFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftirqRaiseFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftirqRaiseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SoftirqRaiseFtraceEvent*>(
               &_SoftirqRaiseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SoftirqRaiseFtraceEvent& a, SoftirqRaiseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftirqRaiseFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftirqRaiseFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftirqRaiseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftirqRaiseFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoftirqRaiseFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SoftirqRaiseFtraceEvent& from) {
    SoftirqRaiseFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftirqRaiseFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SoftirqRaiseFtraceEvent";
  }
  protected:
  explicit SoftirqRaiseFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 1,
  };
  // optional uint32 vec = 1;
  bool has_vec() const;
  void clear_vec() ;
  ::uint32_t vec() const;
  void set_vec(::uint32_t value);

  private:
  ::uint32_t _internal_vec() const;
  void _internal_set_vec(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SoftirqRaiseFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t vec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};// -------------------------------------------------------------------

class IrqHandlerEntryFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.IrqHandlerEntryFtraceEvent) */ {
 public:
  inline IrqHandlerEntryFtraceEvent() : IrqHandlerEntryFtraceEvent(nullptr) {}
  ~IrqHandlerEntryFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IrqHandlerEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrqHandlerEntryFtraceEvent(const IrqHandlerEntryFtraceEvent& from);
  IrqHandlerEntryFtraceEvent(IrqHandlerEntryFtraceEvent&& from) noexcept
    : IrqHandlerEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IrqHandlerEntryFtraceEvent& operator=(const IrqHandlerEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrqHandlerEntryFtraceEvent& operator=(IrqHandlerEntryFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrqHandlerEntryFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrqHandlerEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IrqHandlerEntryFtraceEvent*>(
               &_IrqHandlerEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IrqHandlerEntryFtraceEvent& a, IrqHandlerEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IrqHandlerEntryFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrqHandlerEntryFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrqHandlerEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrqHandlerEntryFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrqHandlerEntryFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrqHandlerEntryFtraceEvent& from) {
    IrqHandlerEntryFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrqHandlerEntryFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.IrqHandlerEntryFtraceEvent";
  }
  protected:
  explicit IrqHandlerEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIrqFieldNumber = 1,
    kHandlerFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 irq = 1;
  bool has_irq() const;
  void clear_irq() ;
  ::int32_t irq() const;
  void set_irq(::int32_t value);

  private:
  ::int32_t _internal_irq() const;
  void _internal_set_irq(::int32_t value);

  public:
  // optional uint32 handler = 3;
  bool has_handler() const;
  void clear_handler() ;
  ::uint32_t handler() const;
  void set_handler(::uint32_t value);

  private:
  ::uint32_t _internal_handler() const;
  void _internal_set_handler(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.IrqHandlerEntryFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t irq_;
    ::uint32_t handler_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};// -------------------------------------------------------------------

class IrqHandlerExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.IrqHandlerExitFtraceEvent) */ {
 public:
  inline IrqHandlerExitFtraceEvent() : IrqHandlerExitFtraceEvent(nullptr) {}
  ~IrqHandlerExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IrqHandlerExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IrqHandlerExitFtraceEvent(const IrqHandlerExitFtraceEvent& from);
  IrqHandlerExitFtraceEvent(IrqHandlerExitFtraceEvent&& from) noexcept
    : IrqHandlerExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline IrqHandlerExitFtraceEvent& operator=(const IrqHandlerExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrqHandlerExitFtraceEvent& operator=(IrqHandlerExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrqHandlerExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrqHandlerExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const IrqHandlerExitFtraceEvent*>(
               &_IrqHandlerExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IrqHandlerExitFtraceEvent& a, IrqHandlerExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IrqHandlerExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrqHandlerExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrqHandlerExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrqHandlerExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IrqHandlerExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IrqHandlerExitFtraceEvent& from) {
    IrqHandlerExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IrqHandlerExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.IrqHandlerExitFtraceEvent";
  }
  protected:
  explicit IrqHandlerExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional int32 irq = 1;
  bool has_irq() const;
  void clear_irq() ;
  ::int32_t irq() const;
  void set_irq(::int32_t value);

  private:
  ::int32_t _internal_irq() const;
  void _internal_set_irq(::int32_t value);

  public:
  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.IrqHandlerExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t irq_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SoftirqEntryFtraceEvent

// optional uint32 vec = 1;
inline bool SoftirqEntryFtraceEvent::has_vec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SoftirqEntryFtraceEvent::clear_vec() {
  _impl_.vec_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SoftirqEntryFtraceEvent::vec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SoftirqEntryFtraceEvent.vec)
  return _internal_vec();
}
inline void SoftirqEntryFtraceEvent::set_vec(::uint32_t value) {
  _internal_set_vec(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SoftirqEntryFtraceEvent.vec)
}
inline ::uint32_t SoftirqEntryFtraceEvent::_internal_vec() const {
  return _impl_.vec_;
}
inline void SoftirqEntryFtraceEvent::_internal_set_vec(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vec_ = value;
}

// -------------------------------------------------------------------

// SoftirqExitFtraceEvent

// optional uint32 vec = 1;
inline bool SoftirqExitFtraceEvent::has_vec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SoftirqExitFtraceEvent::clear_vec() {
  _impl_.vec_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SoftirqExitFtraceEvent::vec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SoftirqExitFtraceEvent.vec)
  return _internal_vec();
}
inline void SoftirqExitFtraceEvent::set_vec(::uint32_t value) {
  _internal_set_vec(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SoftirqExitFtraceEvent.vec)
}
inline ::uint32_t SoftirqExitFtraceEvent::_internal_vec() const {
  return _impl_.vec_;
}
inline void SoftirqExitFtraceEvent::_internal_set_vec(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vec_ = value;
}

// -------------------------------------------------------------------

// SoftirqRaiseFtraceEvent

// optional uint32 vec = 1;
inline bool SoftirqRaiseFtraceEvent::has_vec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SoftirqRaiseFtraceEvent::clear_vec() {
  _impl_.vec_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SoftirqRaiseFtraceEvent::vec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SoftirqRaiseFtraceEvent.vec)
  return _internal_vec();
}
inline void SoftirqRaiseFtraceEvent::set_vec(::uint32_t value) {
  _internal_set_vec(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SoftirqRaiseFtraceEvent.vec)
}
inline ::uint32_t SoftirqRaiseFtraceEvent::_internal_vec() const {
  return _impl_.vec_;
}
inline void SoftirqRaiseFtraceEvent::_internal_set_vec(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vec_ = value;
}

// -------------------------------------------------------------------

// IrqHandlerEntryFtraceEvent

// optional int32 irq = 1;
inline bool IrqHandlerEntryFtraceEvent::has_irq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IrqHandlerEntryFtraceEvent::clear_irq() {
  _impl_.irq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t IrqHandlerEntryFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerEntryFtraceEvent.irq)
  return _internal_irq();
}
inline void IrqHandlerEntryFtraceEvent::set_irq(::int32_t value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerEntryFtraceEvent.irq)
}
inline ::int32_t IrqHandlerEntryFtraceEvent::_internal_irq() const {
  return _impl_.irq_;
}
inline void IrqHandlerEntryFtraceEvent::_internal_set_irq(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.irq_ = value;
}

// optional string name = 2;
inline bool IrqHandlerEntryFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IrqHandlerEntryFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IrqHandlerEntryFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IrqHandlerEntryFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}
inline std::string* IrqHandlerEntryFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
  return _s;
}
inline const std::string& IrqHandlerEntryFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void IrqHandlerEntryFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* IrqHandlerEntryFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* IrqHandlerEntryFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void IrqHandlerEntryFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.IrqHandlerEntryFtraceEvent.name)
}

// optional uint32 handler = 3;
inline bool IrqHandlerEntryFtraceEvent::has_handler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void IrqHandlerEntryFtraceEvent::clear_handler() {
  _impl_.handler_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t IrqHandlerEntryFtraceEvent::handler() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerEntryFtraceEvent.handler)
  return _internal_handler();
}
inline void IrqHandlerEntryFtraceEvent::set_handler(::uint32_t value) {
  _internal_set_handler(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerEntryFtraceEvent.handler)
}
inline ::uint32_t IrqHandlerEntryFtraceEvent::_internal_handler() const {
  return _impl_.handler_;
}
inline void IrqHandlerEntryFtraceEvent::_internal_set_handler(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.handler_ = value;
}

// -------------------------------------------------------------------

// IrqHandlerExitFtraceEvent

// optional int32 irq = 1;
inline bool IrqHandlerExitFtraceEvent::has_irq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IrqHandlerExitFtraceEvent::clear_irq() {
  _impl_.irq_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t IrqHandlerExitFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerExitFtraceEvent.irq)
  return _internal_irq();
}
inline void IrqHandlerExitFtraceEvent::set_irq(::int32_t value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerExitFtraceEvent.irq)
}
inline ::int32_t IrqHandlerExitFtraceEvent::_internal_irq() const {
  return _impl_.irq_;
}
inline void IrqHandlerExitFtraceEvent::_internal_set_irq(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.irq_ = value;
}

// optional int32 ret = 2;
inline bool IrqHandlerExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IrqHandlerExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t IrqHandlerExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.IrqHandlerExitFtraceEvent.ret)
  return _internal_ret();
}
inline void IrqHandlerExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.IrqHandlerExitFtraceEvent.ret)
}
inline ::int32_t IrqHandlerExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void IrqHandlerExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2firq_2eproto_2epb_2eh
