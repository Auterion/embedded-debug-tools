// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/power.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
namespace perfetto {
namespace protos {
class ClockDisableFtraceEvent;
struct ClockDisableFtraceEventDefaultTypeInternal;
extern ClockDisableFtraceEventDefaultTypeInternal _ClockDisableFtraceEvent_default_instance_;
class ClockEnableFtraceEvent;
struct ClockEnableFtraceEventDefaultTypeInternal;
extern ClockEnableFtraceEventDefaultTypeInternal _ClockEnableFtraceEvent_default_instance_;
class ClockSetRateFtraceEvent;
struct ClockSetRateFtraceEventDefaultTypeInternal;
extern ClockSetRateFtraceEventDefaultTypeInternal _ClockSetRateFtraceEvent_default_instance_;
class CpuFrequencyFtraceEvent;
struct CpuFrequencyFtraceEventDefaultTypeInternal;
extern CpuFrequencyFtraceEventDefaultTypeInternal _CpuFrequencyFtraceEvent_default_instance_;
class CpuFrequencyLimitsFtraceEvent;
struct CpuFrequencyLimitsFtraceEventDefaultTypeInternal;
extern CpuFrequencyLimitsFtraceEventDefaultTypeInternal _CpuFrequencyLimitsFtraceEvent_default_instance_;
class CpuIdleFtraceEvent;
struct CpuIdleFtraceEventDefaultTypeInternal;
extern CpuIdleFtraceEventDefaultTypeInternal _CpuIdleFtraceEvent_default_instance_;
class GpuFrequencyFtraceEvent;
struct GpuFrequencyFtraceEventDefaultTypeInternal;
extern GpuFrequencyFtraceEventDefaultTypeInternal _GpuFrequencyFtraceEvent_default_instance_;
class SuspendResumeFtraceEvent;
struct SuspendResumeFtraceEventDefaultTypeInternal;
extern SuspendResumeFtraceEventDefaultTypeInternal _SuspendResumeFtraceEvent_default_instance_;
class WakeupSourceActivateFtraceEvent;
struct WakeupSourceActivateFtraceEventDefaultTypeInternal;
extern WakeupSourceActivateFtraceEventDefaultTypeInternal _WakeupSourceActivateFtraceEvent_default_instance_;
class WakeupSourceDeactivateFtraceEvent;
struct WakeupSourceDeactivateFtraceEventDefaultTypeInternal;
extern WakeupSourceDeactivateFtraceEventDefaultTypeInternal _WakeupSourceDeactivateFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::ClockDisableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ClockDisableFtraceEvent>(Arena*);
template <>
::perfetto::protos::ClockEnableFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ClockEnableFtraceEvent>(Arena*);
template <>
::perfetto::protos::ClockSetRateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::ClockSetRateFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuFrequencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuFrequencyFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuFrequencyLimitsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuFrequencyLimitsFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuIdleFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuIdleFtraceEvent>(Arena*);
template <>
::perfetto::protos::GpuFrequencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::GpuFrequencyFtraceEvent>(Arena*);
template <>
::perfetto::protos::SuspendResumeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SuspendResumeFtraceEvent>(Arena*);
template <>
::perfetto::protos::WakeupSourceActivateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::WakeupSourceActivateFtraceEvent>(Arena*);
template <>
::perfetto::protos::WakeupSourceDeactivateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::WakeupSourceDeactivateFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class CpuFrequencyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuFrequencyFtraceEvent) */ {
 public:
  inline CpuFrequencyFtraceEvent() : CpuFrequencyFtraceEvent(nullptr) {}
  ~CpuFrequencyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuFrequencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuFrequencyFtraceEvent(const CpuFrequencyFtraceEvent& from);
  CpuFrequencyFtraceEvent(CpuFrequencyFtraceEvent&& from) noexcept
    : CpuFrequencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuFrequencyFtraceEvent& operator=(const CpuFrequencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFrequencyFtraceEvent& operator=(CpuFrequencyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuFrequencyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuFrequencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuFrequencyFtraceEvent*>(
               &_CpuFrequencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuFrequencyFtraceEvent& a, CpuFrequencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFrequencyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuFrequencyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuFrequencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuFrequencyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuFrequencyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuFrequencyFtraceEvent& from) {
    CpuFrequencyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuFrequencyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuFrequencyFtraceEvent";
  }
  protected:
  explicit CpuFrequencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCpuIdFieldNumber = 2,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  void clear_state() ;
  ::uint32_t state() const;
  void set_state(::uint32_t value);

  private:
  ::uint32_t _internal_state() const;
  void _internal_set_state(::uint32_t value);

  public:
  // optional uint32 cpu_id = 2;
  bool has_cpu_id() const;
  void clear_cpu_id() ;
  ::uint32_t cpu_id() const;
  void set_cpu_id(::uint32_t value);

  private:
  ::uint32_t _internal_cpu_id() const;
  void _internal_set_cpu_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuFrequencyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t state_;
    ::uint32_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class CpuFrequencyLimitsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuFrequencyLimitsFtraceEvent) */ {
 public:
  inline CpuFrequencyLimitsFtraceEvent() : CpuFrequencyLimitsFtraceEvent(nullptr) {}
  ~CpuFrequencyLimitsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuFrequencyLimitsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuFrequencyLimitsFtraceEvent(const CpuFrequencyLimitsFtraceEvent& from);
  CpuFrequencyLimitsFtraceEvent(CpuFrequencyLimitsFtraceEvent&& from) noexcept
    : CpuFrequencyLimitsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuFrequencyLimitsFtraceEvent& operator=(const CpuFrequencyLimitsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFrequencyLimitsFtraceEvent& operator=(CpuFrequencyLimitsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuFrequencyLimitsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuFrequencyLimitsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuFrequencyLimitsFtraceEvent*>(
               &_CpuFrequencyLimitsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuFrequencyLimitsFtraceEvent& a, CpuFrequencyLimitsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFrequencyLimitsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuFrequencyLimitsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuFrequencyLimitsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuFrequencyLimitsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuFrequencyLimitsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuFrequencyLimitsFtraceEvent& from) {
    CpuFrequencyLimitsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuFrequencyLimitsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuFrequencyLimitsFtraceEvent";
  }
  protected:
  explicit CpuFrequencyLimitsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFreqFieldNumber = 1,
    kMaxFreqFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional uint32 min_freq = 1;
  bool has_min_freq() const;
  void clear_min_freq() ;
  ::uint32_t min_freq() const;
  void set_min_freq(::uint32_t value);

  private:
  ::uint32_t _internal_min_freq() const;
  void _internal_set_min_freq(::uint32_t value);

  public:
  // optional uint32 max_freq = 2;
  bool has_max_freq() const;
  void clear_max_freq() ;
  ::uint32_t max_freq() const;
  void set_max_freq(::uint32_t value);

  private:
  ::uint32_t _internal_max_freq() const;
  void _internal_set_max_freq(::uint32_t value);

  public:
  // optional uint32 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id() ;
  ::uint32_t cpu_id() const;
  void set_cpu_id(::uint32_t value);

  private:
  ::uint32_t _internal_cpu_id() const;
  void _internal_set_cpu_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuFrequencyLimitsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t min_freq_;
    ::uint32_t max_freq_;
    ::uint32_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class CpuIdleFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuIdleFtraceEvent) */ {
 public:
  inline CpuIdleFtraceEvent() : CpuIdleFtraceEvent(nullptr) {}
  ~CpuIdleFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuIdleFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuIdleFtraceEvent(const CpuIdleFtraceEvent& from);
  CpuIdleFtraceEvent(CpuIdleFtraceEvent&& from) noexcept
    : CpuIdleFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuIdleFtraceEvent& operator=(const CpuIdleFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuIdleFtraceEvent& operator=(CpuIdleFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuIdleFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuIdleFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuIdleFtraceEvent*>(
               &_CpuIdleFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuIdleFtraceEvent& a, CpuIdleFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuIdleFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuIdleFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuIdleFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuIdleFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuIdleFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuIdleFtraceEvent& from) {
    CpuIdleFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuIdleFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuIdleFtraceEvent";
  }
  protected:
  explicit CpuIdleFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCpuIdFieldNumber = 2,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  void clear_state() ;
  ::uint32_t state() const;
  void set_state(::uint32_t value);

  private:
  ::uint32_t _internal_state() const;
  void _internal_set_state(::uint32_t value);

  public:
  // optional uint32 cpu_id = 2;
  bool has_cpu_id() const;
  void clear_cpu_id() ;
  ::uint32_t cpu_id() const;
  void set_cpu_id(::uint32_t value);

  private:
  ::uint32_t _internal_cpu_id() const;
  void _internal_set_cpu_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuIdleFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t state_;
    ::uint32_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class ClockEnableFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockEnableFtraceEvent) */ {
 public:
  inline ClockEnableFtraceEvent() : ClockEnableFtraceEvent(nullptr) {}
  ~ClockEnableFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClockEnableFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClockEnableFtraceEvent(const ClockEnableFtraceEvent& from);
  ClockEnableFtraceEvent(ClockEnableFtraceEvent&& from) noexcept
    : ClockEnableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ClockEnableFtraceEvent& operator=(const ClockEnableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockEnableFtraceEvent& operator=(ClockEnableFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClockEnableFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockEnableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ClockEnableFtraceEvent*>(
               &_ClockEnableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClockEnableFtraceEvent& a, ClockEnableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockEnableFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockEnableFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClockEnableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClockEnableFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClockEnableFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClockEnableFtraceEvent& from) {
    ClockEnableFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClockEnableFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ClockEnableFtraceEvent";
  }
  protected:
  explicit ClockEnableFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::uint64_t state() const;
  void set_state(::uint64_t value);

  private:
  ::uint64_t _internal_state() const;
  void _internal_set_state(::uint64_t value);

  public:
  // optional uint64 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id() ;
  ::uint64_t cpu_id() const;
  void set_cpu_id(::uint64_t value);

  private:
  ::uint64_t _internal_cpu_id() const;
  void _internal_set_cpu_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockEnableFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t state_;
    ::uint64_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class ClockDisableFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockDisableFtraceEvent) */ {
 public:
  inline ClockDisableFtraceEvent() : ClockDisableFtraceEvent(nullptr) {}
  ~ClockDisableFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClockDisableFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClockDisableFtraceEvent(const ClockDisableFtraceEvent& from);
  ClockDisableFtraceEvent(ClockDisableFtraceEvent&& from) noexcept
    : ClockDisableFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ClockDisableFtraceEvent& operator=(const ClockDisableFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockDisableFtraceEvent& operator=(ClockDisableFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClockDisableFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockDisableFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ClockDisableFtraceEvent*>(
               &_ClockDisableFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClockDisableFtraceEvent& a, ClockDisableFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockDisableFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockDisableFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClockDisableFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClockDisableFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClockDisableFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClockDisableFtraceEvent& from) {
    ClockDisableFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClockDisableFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ClockDisableFtraceEvent";
  }
  protected:
  explicit ClockDisableFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::uint64_t state() const;
  void set_state(::uint64_t value);

  private:
  ::uint64_t _internal_state() const;
  void _internal_set_state(::uint64_t value);

  public:
  // optional uint64 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id() ;
  ::uint64_t cpu_id() const;
  void set_cpu_id(::uint64_t value);

  private:
  ::uint64_t _internal_cpu_id() const;
  void _internal_set_cpu_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockDisableFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t state_;
    ::uint64_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class ClockSetRateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.ClockSetRateFtraceEvent) */ {
 public:
  inline ClockSetRateFtraceEvent() : ClockSetRateFtraceEvent(nullptr) {}
  ~ClockSetRateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClockSetRateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClockSetRateFtraceEvent(const ClockSetRateFtraceEvent& from);
  ClockSetRateFtraceEvent(ClockSetRateFtraceEvent&& from) noexcept
    : ClockSetRateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline ClockSetRateFtraceEvent& operator=(const ClockSetRateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClockSetRateFtraceEvent& operator=(ClockSetRateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClockSetRateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClockSetRateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const ClockSetRateFtraceEvent*>(
               &_ClockSetRateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClockSetRateFtraceEvent& a, ClockSetRateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClockSetRateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClockSetRateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClockSetRateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClockSetRateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClockSetRateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClockSetRateFtraceEvent& from) {
    ClockSetRateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClockSetRateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.ClockSetRateFtraceEvent";
  }
  protected:
  explicit ClockSetRateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kCpuIdFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::uint64_t state() const;
  void set_state(::uint64_t value);

  private:
  ::uint64_t _internal_state() const;
  void _internal_set_state(::uint64_t value);

  public:
  // optional uint64 cpu_id = 3;
  bool has_cpu_id() const;
  void clear_cpu_id() ;
  ::uint64_t cpu_id() const;
  void set_cpu_id(::uint64_t value);

  private:
  ::uint64_t _internal_cpu_id() const;
  void _internal_set_cpu_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.ClockSetRateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t state_;
    ::uint64_t cpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class SuspendResumeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SuspendResumeFtraceEvent) */ {
 public:
  inline SuspendResumeFtraceEvent() : SuspendResumeFtraceEvent(nullptr) {}
  ~SuspendResumeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SuspendResumeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuspendResumeFtraceEvent(const SuspendResumeFtraceEvent& from);
  SuspendResumeFtraceEvent(SuspendResumeFtraceEvent&& from) noexcept
    : SuspendResumeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SuspendResumeFtraceEvent& operator=(const SuspendResumeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendResumeFtraceEvent& operator=(SuspendResumeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuspendResumeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuspendResumeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SuspendResumeFtraceEvent*>(
               &_SuspendResumeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SuspendResumeFtraceEvent& a, SuspendResumeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendResumeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendResumeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuspendResumeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuspendResumeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuspendResumeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuspendResumeFtraceEvent& from) {
    SuspendResumeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuspendResumeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SuspendResumeFtraceEvent";
  }
  protected:
  explicit SuspendResumeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kValFieldNumber = 2,
    kStartFieldNumber = 3,
  };
  // optional string action = 1;
  bool has_action() const;
  void clear_action() ;
  const std::string& action() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* ptr);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // optional int32 val = 2;
  bool has_val() const;
  void clear_val() ;
  ::int32_t val() const;
  void set_val(::int32_t value);

  private:
  ::int32_t _internal_val() const;
  void _internal_set_val(::int32_t value);

  public:
  // optional uint32 start = 3;
  bool has_start() const;
  void clear_start() ;
  ::uint32_t start() const;
  void set_start(::uint32_t value);

  private:
  ::uint32_t _internal_start() const;
  void _internal_set_start(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SuspendResumeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::int32_t val_;
    ::uint32_t start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class GpuFrequencyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuFrequencyFtraceEvent) */ {
 public:
  inline GpuFrequencyFtraceEvent() : GpuFrequencyFtraceEvent(nullptr) {}
  ~GpuFrequencyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GpuFrequencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpuFrequencyFtraceEvent(const GpuFrequencyFtraceEvent& from);
  GpuFrequencyFtraceEvent(GpuFrequencyFtraceEvent&& from) noexcept
    : GpuFrequencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline GpuFrequencyFtraceEvent& operator=(const GpuFrequencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuFrequencyFtraceEvent& operator=(GpuFrequencyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuFrequencyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuFrequencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const GpuFrequencyFtraceEvent*>(
               &_GpuFrequencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GpuFrequencyFtraceEvent& a, GpuFrequencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuFrequencyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuFrequencyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpuFrequencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpuFrequencyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpuFrequencyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpuFrequencyFtraceEvent& from) {
    GpuFrequencyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuFrequencyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.GpuFrequencyFtraceEvent";
  }
  protected:
  explicit GpuFrequencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional uint32 gpu_id = 1;
  bool has_gpu_id() const;
  void clear_gpu_id() ;
  ::uint32_t gpu_id() const;
  void set_gpu_id(::uint32_t value);

  private:
  ::uint32_t _internal_gpu_id() const;
  void _internal_set_gpu_id(::uint32_t value);

  public:
  // optional uint32 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::uint32_t state() const;
  void set_state(::uint32_t value);

  private:
  ::uint32_t _internal_state() const;
  void _internal_set_state(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuFrequencyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t gpu_id_;
    ::uint32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class WakeupSourceActivateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.WakeupSourceActivateFtraceEvent) */ {
 public:
  inline WakeupSourceActivateFtraceEvent() : WakeupSourceActivateFtraceEvent(nullptr) {}
  ~WakeupSourceActivateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WakeupSourceActivateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WakeupSourceActivateFtraceEvent(const WakeupSourceActivateFtraceEvent& from);
  WakeupSourceActivateFtraceEvent(WakeupSourceActivateFtraceEvent&& from) noexcept
    : WakeupSourceActivateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline WakeupSourceActivateFtraceEvent& operator=(const WakeupSourceActivateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WakeupSourceActivateFtraceEvent& operator=(WakeupSourceActivateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WakeupSourceActivateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const WakeupSourceActivateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const WakeupSourceActivateFtraceEvent*>(
               &_WakeupSourceActivateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WakeupSourceActivateFtraceEvent& a, WakeupSourceActivateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(WakeupSourceActivateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WakeupSourceActivateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WakeupSourceActivateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WakeupSourceActivateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WakeupSourceActivateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WakeupSourceActivateFtraceEvent& from) {
    WakeupSourceActivateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WakeupSourceActivateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.WakeupSourceActivateFtraceEvent";
  }
  protected:
  explicit WakeupSourceActivateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::uint64_t state() const;
  void set_state(::uint64_t value);

  private:
  ::uint64_t _internal_state() const;
  void _internal_set_state(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.WakeupSourceActivateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};// -------------------------------------------------------------------

class WakeupSourceDeactivateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.WakeupSourceDeactivateFtraceEvent) */ {
 public:
  inline WakeupSourceDeactivateFtraceEvent() : WakeupSourceDeactivateFtraceEvent(nullptr) {}
  ~WakeupSourceDeactivateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WakeupSourceDeactivateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WakeupSourceDeactivateFtraceEvent(const WakeupSourceDeactivateFtraceEvent& from);
  WakeupSourceDeactivateFtraceEvent(WakeupSourceDeactivateFtraceEvent&& from) noexcept
    : WakeupSourceDeactivateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline WakeupSourceDeactivateFtraceEvent& operator=(const WakeupSourceDeactivateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WakeupSourceDeactivateFtraceEvent& operator=(WakeupSourceDeactivateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WakeupSourceDeactivateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const WakeupSourceDeactivateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const WakeupSourceDeactivateFtraceEvent*>(
               &_WakeupSourceDeactivateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WakeupSourceDeactivateFtraceEvent& a, WakeupSourceDeactivateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(WakeupSourceDeactivateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WakeupSourceDeactivateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WakeupSourceDeactivateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WakeupSourceDeactivateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WakeupSourceDeactivateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WakeupSourceDeactivateFtraceEvent& from) {
    WakeupSourceDeactivateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WakeupSourceDeactivateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.WakeupSourceDeactivateFtraceEvent";
  }
  protected:
  explicit WakeupSourceDeactivateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::uint64_t state() const;
  void set_state(::uint64_t value);

  private:
  ::uint64_t _internal_state() const;
  void _internal_set_state(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.WakeupSourceDeactivateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CpuFrequencyFtraceEvent

// optional uint32 state = 1;
inline bool CpuFrequencyFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuFrequencyFtraceEvent::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuFrequencyFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyFtraceEvent.state)
  return _internal_state();
}
inline void CpuFrequencyFtraceEvent::set_state(::uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyFtraceEvent.state)
}
inline ::uint32_t CpuFrequencyFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void CpuFrequencyFtraceEvent::_internal_set_state(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_ = value;
}

// optional uint32 cpu_id = 2;
inline bool CpuFrequencyFtraceEvent::has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuFrequencyFtraceEvent::clear_cpu_id() {
  _impl_.cpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuFrequencyFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyFtraceEvent.cpu_id)
  return _internal_cpu_id();
}
inline void CpuFrequencyFtraceEvent::set_cpu_id(::uint32_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyFtraceEvent.cpu_id)
}
inline ::uint32_t CpuFrequencyFtraceEvent::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline void CpuFrequencyFtraceEvent::_internal_set_cpu_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_id_ = value;
}

// -------------------------------------------------------------------

// CpuFrequencyLimitsFtraceEvent

// optional uint32 min_freq = 1;
inline bool CpuFrequencyLimitsFtraceEvent::has_min_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuFrequencyLimitsFtraceEvent::clear_min_freq() {
  _impl_.min_freq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuFrequencyLimitsFtraceEvent::min_freq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyLimitsFtraceEvent.min_freq)
  return _internal_min_freq();
}
inline void CpuFrequencyLimitsFtraceEvent::set_min_freq(::uint32_t value) {
  _internal_set_min_freq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyLimitsFtraceEvent.min_freq)
}
inline ::uint32_t CpuFrequencyLimitsFtraceEvent::_internal_min_freq() const {
  return _impl_.min_freq_;
}
inline void CpuFrequencyLimitsFtraceEvent::_internal_set_min_freq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_freq_ = value;
}

// optional uint32 max_freq = 2;
inline bool CpuFrequencyLimitsFtraceEvent::has_max_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuFrequencyLimitsFtraceEvent::clear_max_freq() {
  _impl_.max_freq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuFrequencyLimitsFtraceEvent::max_freq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyLimitsFtraceEvent.max_freq)
  return _internal_max_freq();
}
inline void CpuFrequencyLimitsFtraceEvent::set_max_freq(::uint32_t value) {
  _internal_set_max_freq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyLimitsFtraceEvent.max_freq)
}
inline ::uint32_t CpuFrequencyLimitsFtraceEvent::_internal_max_freq() const {
  return _impl_.max_freq_;
}
inline void CpuFrequencyLimitsFtraceEvent::_internal_set_max_freq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_freq_ = value;
}

// optional uint32 cpu_id = 3;
inline bool CpuFrequencyLimitsFtraceEvent::has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CpuFrequencyLimitsFtraceEvent::clear_cpu_id() {
  _impl_.cpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CpuFrequencyLimitsFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuFrequencyLimitsFtraceEvent.cpu_id)
  return _internal_cpu_id();
}
inline void CpuFrequencyLimitsFtraceEvent::set_cpu_id(::uint32_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuFrequencyLimitsFtraceEvent.cpu_id)
}
inline ::uint32_t CpuFrequencyLimitsFtraceEvent::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline void CpuFrequencyLimitsFtraceEvent::_internal_set_cpu_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cpu_id_ = value;
}

// -------------------------------------------------------------------

// CpuIdleFtraceEvent

// optional uint32 state = 1;
inline bool CpuIdleFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuIdleFtraceEvent::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuIdleFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuIdleFtraceEvent.state)
  return _internal_state();
}
inline void CpuIdleFtraceEvent::set_state(::uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuIdleFtraceEvent.state)
}
inline ::uint32_t CpuIdleFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void CpuIdleFtraceEvent::_internal_set_state(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_ = value;
}

// optional uint32 cpu_id = 2;
inline bool CpuIdleFtraceEvent::has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuIdleFtraceEvent::clear_cpu_id() {
  _impl_.cpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuIdleFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuIdleFtraceEvent.cpu_id)
  return _internal_cpu_id();
}
inline void CpuIdleFtraceEvent::set_cpu_id(::uint32_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuIdleFtraceEvent.cpu_id)
}
inline ::uint32_t CpuIdleFtraceEvent::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline void CpuIdleFtraceEvent::_internal_set_cpu_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_id_ = value;
}

// -------------------------------------------------------------------

// ClockEnableFtraceEvent

// optional string name = 1;
inline bool ClockEnableFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClockEnableFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockEnableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockEnableFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClockEnableFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockEnableFtraceEvent.name)
}
inline std::string* ClockEnableFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockEnableFtraceEvent.name)
  return _s;
}
inline const std::string& ClockEnableFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClockEnableFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClockEnableFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ClockEnableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ClockEnableFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ClockEnableFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ClockEnableFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool ClockEnableFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClockEnableFtraceEvent::clear_state() {
  _impl_.state_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ClockEnableFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockEnableFtraceEvent.state)
  return _internal_state();
}
inline void ClockEnableFtraceEvent::set_state(::uint64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockEnableFtraceEvent.state)
}
inline ::uint64_t ClockEnableFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void ClockEnableFtraceEvent::_internal_set_state(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

// optional uint64 cpu_id = 3;
inline bool ClockEnableFtraceEvent::has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ClockEnableFtraceEvent::clear_cpu_id() {
  _impl_.cpu_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ClockEnableFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockEnableFtraceEvent.cpu_id)
  return _internal_cpu_id();
}
inline void ClockEnableFtraceEvent::set_cpu_id(::uint64_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockEnableFtraceEvent.cpu_id)
}
inline ::uint64_t ClockEnableFtraceEvent::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline void ClockEnableFtraceEvent::_internal_set_cpu_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cpu_id_ = value;
}

// -------------------------------------------------------------------

// ClockDisableFtraceEvent

// optional string name = 1;
inline bool ClockDisableFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClockDisableFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockDisableFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockDisableFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClockDisableFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockDisableFtraceEvent.name)
}
inline std::string* ClockDisableFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockDisableFtraceEvent.name)
  return _s;
}
inline const std::string& ClockDisableFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClockDisableFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClockDisableFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ClockDisableFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ClockDisableFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ClockDisableFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ClockDisableFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool ClockDisableFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClockDisableFtraceEvent::clear_state() {
  _impl_.state_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ClockDisableFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockDisableFtraceEvent.state)
  return _internal_state();
}
inline void ClockDisableFtraceEvent::set_state(::uint64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockDisableFtraceEvent.state)
}
inline ::uint64_t ClockDisableFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void ClockDisableFtraceEvent::_internal_set_state(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

// optional uint64 cpu_id = 3;
inline bool ClockDisableFtraceEvent::has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ClockDisableFtraceEvent::clear_cpu_id() {
  _impl_.cpu_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ClockDisableFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockDisableFtraceEvent.cpu_id)
  return _internal_cpu_id();
}
inline void ClockDisableFtraceEvent::set_cpu_id(::uint64_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockDisableFtraceEvent.cpu_id)
}
inline ::uint64_t ClockDisableFtraceEvent::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline void ClockDisableFtraceEvent::_internal_set_cpu_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cpu_id_ = value;
}

// -------------------------------------------------------------------

// ClockSetRateFtraceEvent

// optional string name = 1;
inline bool ClockSetRateFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClockSetRateFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClockSetRateFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSetRateFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClockSetRateFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSetRateFtraceEvent.name)
}
inline std::string* ClockSetRateFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ClockSetRateFtraceEvent.name)
  return _s;
}
inline const std::string& ClockSetRateFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClockSetRateFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClockSetRateFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ClockSetRateFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ClockSetRateFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ClockSetRateFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ClockSetRateFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool ClockSetRateFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClockSetRateFtraceEvent::clear_state() {
  _impl_.state_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t ClockSetRateFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSetRateFtraceEvent.state)
  return _internal_state();
}
inline void ClockSetRateFtraceEvent::set_state(::uint64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSetRateFtraceEvent.state)
}
inline ::uint64_t ClockSetRateFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void ClockSetRateFtraceEvent::_internal_set_state(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

// optional uint64 cpu_id = 3;
inline bool ClockSetRateFtraceEvent::has_cpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ClockSetRateFtraceEvent::clear_cpu_id() {
  _impl_.cpu_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t ClockSetRateFtraceEvent::cpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ClockSetRateFtraceEvent.cpu_id)
  return _internal_cpu_id();
}
inline void ClockSetRateFtraceEvent::set_cpu_id(::uint64_t value) {
  _internal_set_cpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ClockSetRateFtraceEvent.cpu_id)
}
inline ::uint64_t ClockSetRateFtraceEvent::_internal_cpu_id() const {
  return _impl_.cpu_id_;
}
inline void ClockSetRateFtraceEvent::_internal_set_cpu_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cpu_id_ = value;
}

// -------------------------------------------------------------------

// SuspendResumeFtraceEvent

// optional string action = 1;
inline bool SuspendResumeFtraceEvent::has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SuspendResumeFtraceEvent::clear_action() {
  _impl_.action_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SuspendResumeFtraceEvent::action() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SuspendResumeFtraceEvent.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SuspendResumeFtraceEvent::set_action(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.SuspendResumeFtraceEvent.action)
}
inline std::string* SuspendResumeFtraceEvent::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SuspendResumeFtraceEvent.action)
  return _s;
}
inline const std::string& SuspendResumeFtraceEvent::_internal_action() const {
  return _impl_.action_.Get();
}
inline void SuspendResumeFtraceEvent::_internal_set_action(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* SuspendResumeFtraceEvent::_internal_mutable_action() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.action_.Mutable( GetArenaForAllocation());
}
inline std::string* SuspendResumeFtraceEvent::release_action() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SuspendResumeFtraceEvent.action)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.action_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SuspendResumeFtraceEvent::set_allocated_action(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.action_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.action_.IsDefault()) {
          _impl_.action_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SuspendResumeFtraceEvent.action)
}

// optional int32 val = 2;
inline bool SuspendResumeFtraceEvent::has_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SuspendResumeFtraceEvent::clear_val() {
  _impl_.val_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SuspendResumeFtraceEvent::val() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SuspendResumeFtraceEvent.val)
  return _internal_val();
}
inline void SuspendResumeFtraceEvent::set_val(::int32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SuspendResumeFtraceEvent.val)
}
inline ::int32_t SuspendResumeFtraceEvent::_internal_val() const {
  return _impl_.val_;
}
inline void SuspendResumeFtraceEvent::_internal_set_val(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.val_ = value;
}

// optional uint32 start = 3;
inline bool SuspendResumeFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SuspendResumeFtraceEvent::clear_start() {
  _impl_.start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SuspendResumeFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SuspendResumeFtraceEvent.start)
  return _internal_start();
}
inline void SuspendResumeFtraceEvent::set_start(::uint32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SuspendResumeFtraceEvent.start)
}
inline ::uint32_t SuspendResumeFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void SuspendResumeFtraceEvent::_internal_set_start(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_ = value;
}

// -------------------------------------------------------------------

// GpuFrequencyFtraceEvent

// optional uint32 gpu_id = 1;
inline bool GpuFrequencyFtraceEvent::has_gpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GpuFrequencyFtraceEvent::clear_gpu_id() {
  _impl_.gpu_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t GpuFrequencyFtraceEvent::gpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuFrequencyFtraceEvent.gpu_id)
  return _internal_gpu_id();
}
inline void GpuFrequencyFtraceEvent::set_gpu_id(::uint32_t value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuFrequencyFtraceEvent.gpu_id)
}
inline ::uint32_t GpuFrequencyFtraceEvent::_internal_gpu_id() const {
  return _impl_.gpu_id_;
}
inline void GpuFrequencyFtraceEvent::_internal_set_gpu_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gpu_id_ = value;
}

// optional uint32 state = 2;
inline bool GpuFrequencyFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GpuFrequencyFtraceEvent::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t GpuFrequencyFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuFrequencyFtraceEvent.state)
  return _internal_state();
}
inline void GpuFrequencyFtraceEvent::set_state(::uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuFrequencyFtraceEvent.state)
}
inline ::uint32_t GpuFrequencyFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void GpuFrequencyFtraceEvent::_internal_set_state(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// WakeupSourceActivateFtraceEvent

// optional string name = 1;
inline bool WakeupSourceActivateFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WakeupSourceActivateFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WakeupSourceActivateFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.WakeupSourceActivateFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WakeupSourceActivateFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.WakeupSourceActivateFtraceEvent.name)
}
inline std::string* WakeupSourceActivateFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.WakeupSourceActivateFtraceEvent.name)
  return _s;
}
inline const std::string& WakeupSourceActivateFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WakeupSourceActivateFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WakeupSourceActivateFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* WakeupSourceActivateFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.WakeupSourceActivateFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WakeupSourceActivateFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.WakeupSourceActivateFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool WakeupSourceActivateFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WakeupSourceActivateFtraceEvent::clear_state() {
  _impl_.state_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t WakeupSourceActivateFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.WakeupSourceActivateFtraceEvent.state)
  return _internal_state();
}
inline void WakeupSourceActivateFtraceEvent::set_state(::uint64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.WakeupSourceActivateFtraceEvent.state)
}
inline ::uint64_t WakeupSourceActivateFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void WakeupSourceActivateFtraceEvent::_internal_set_state(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// WakeupSourceDeactivateFtraceEvent

// optional string name = 1;
inline bool WakeupSourceDeactivateFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WakeupSourceDeactivateFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WakeupSourceDeactivateFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.WakeupSourceDeactivateFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WakeupSourceDeactivateFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.WakeupSourceDeactivateFtraceEvent.name)
}
inline std::string* WakeupSourceDeactivateFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.WakeupSourceDeactivateFtraceEvent.name)
  return _s;
}
inline const std::string& WakeupSourceDeactivateFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WakeupSourceDeactivateFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WakeupSourceDeactivateFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* WakeupSourceDeactivateFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.WakeupSourceDeactivateFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WakeupSourceDeactivateFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.WakeupSourceDeactivateFtraceEvent.name)
}

// optional uint64 state = 2;
inline bool WakeupSourceDeactivateFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WakeupSourceDeactivateFtraceEvent::clear_state() {
  _impl_.state_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t WakeupSourceDeactivateFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.WakeupSourceDeactivateFtraceEvent.state)
  return _internal_state();
}
inline void WakeupSourceDeactivateFtraceEvent::set_state(::uint64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.WakeupSourceDeactivateFtraceEvent.state)
}
inline ::uint64_t WakeupSourceDeactivateFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void WakeupSourceDeactivateFtraceEvent::_internal_set_state(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fpower_2eproto_2epb_2eh
