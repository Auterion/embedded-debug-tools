// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/kvm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
namespace perfetto {
namespace protos {
class KvmAccessFaultFtraceEvent;
struct KvmAccessFaultFtraceEventDefaultTypeInternal;
extern KvmAccessFaultFtraceEventDefaultTypeInternal _KvmAccessFaultFtraceEvent_default_instance_;
class KvmAckIrqFtraceEvent;
struct KvmAckIrqFtraceEventDefaultTypeInternal;
extern KvmAckIrqFtraceEventDefaultTypeInternal _KvmAckIrqFtraceEvent_default_instance_;
class KvmAgeHvaFtraceEvent;
struct KvmAgeHvaFtraceEventDefaultTypeInternal;
extern KvmAgeHvaFtraceEventDefaultTypeInternal _KvmAgeHvaFtraceEvent_default_instance_;
class KvmAgePageFtraceEvent;
struct KvmAgePageFtraceEventDefaultTypeInternal;
extern KvmAgePageFtraceEventDefaultTypeInternal _KvmAgePageFtraceEvent_default_instance_;
class KvmArmClearDebugFtraceEvent;
struct KvmArmClearDebugFtraceEventDefaultTypeInternal;
extern KvmArmClearDebugFtraceEventDefaultTypeInternal _KvmArmClearDebugFtraceEvent_default_instance_;
class KvmArmSetDreg32FtraceEvent;
struct KvmArmSetDreg32FtraceEventDefaultTypeInternal;
extern KvmArmSetDreg32FtraceEventDefaultTypeInternal _KvmArmSetDreg32FtraceEvent_default_instance_;
class KvmArmSetRegsetFtraceEvent;
struct KvmArmSetRegsetFtraceEventDefaultTypeInternal;
extern KvmArmSetRegsetFtraceEventDefaultTypeInternal _KvmArmSetRegsetFtraceEvent_default_instance_;
class KvmArmSetupDebugFtraceEvent;
struct KvmArmSetupDebugFtraceEventDefaultTypeInternal;
extern KvmArmSetupDebugFtraceEventDefaultTypeInternal _KvmArmSetupDebugFtraceEvent_default_instance_;
class KvmEntryFtraceEvent;
struct KvmEntryFtraceEventDefaultTypeInternal;
extern KvmEntryFtraceEventDefaultTypeInternal _KvmEntryFtraceEvent_default_instance_;
class KvmExitFtraceEvent;
struct KvmExitFtraceEventDefaultTypeInternal;
extern KvmExitFtraceEventDefaultTypeInternal _KvmExitFtraceEvent_default_instance_;
class KvmFpuFtraceEvent;
struct KvmFpuFtraceEventDefaultTypeInternal;
extern KvmFpuFtraceEventDefaultTypeInternal _KvmFpuFtraceEvent_default_instance_;
class KvmGetTimerMapFtraceEvent;
struct KvmGetTimerMapFtraceEventDefaultTypeInternal;
extern KvmGetTimerMapFtraceEventDefaultTypeInternal _KvmGetTimerMapFtraceEvent_default_instance_;
class KvmGuestFaultFtraceEvent;
struct KvmGuestFaultFtraceEventDefaultTypeInternal;
extern KvmGuestFaultFtraceEventDefaultTypeInternal _KvmGuestFaultFtraceEvent_default_instance_;
class KvmHandleSysRegFtraceEvent;
struct KvmHandleSysRegFtraceEventDefaultTypeInternal;
extern KvmHandleSysRegFtraceEventDefaultTypeInternal _KvmHandleSysRegFtraceEvent_default_instance_;
class KvmHvcArm64FtraceEvent;
struct KvmHvcArm64FtraceEventDefaultTypeInternal;
extern KvmHvcArm64FtraceEventDefaultTypeInternal _KvmHvcArm64FtraceEvent_default_instance_;
class KvmIrqLineFtraceEvent;
struct KvmIrqLineFtraceEventDefaultTypeInternal;
extern KvmIrqLineFtraceEventDefaultTypeInternal _KvmIrqLineFtraceEvent_default_instance_;
class KvmMmioEmulateFtraceEvent;
struct KvmMmioEmulateFtraceEventDefaultTypeInternal;
extern KvmMmioEmulateFtraceEventDefaultTypeInternal _KvmMmioEmulateFtraceEvent_default_instance_;
class KvmMmioFtraceEvent;
struct KvmMmioFtraceEventDefaultTypeInternal;
extern KvmMmioFtraceEventDefaultTypeInternal _KvmMmioFtraceEvent_default_instance_;
class KvmSetGuestDebugFtraceEvent;
struct KvmSetGuestDebugFtraceEventDefaultTypeInternal;
extern KvmSetGuestDebugFtraceEventDefaultTypeInternal _KvmSetGuestDebugFtraceEvent_default_instance_;
class KvmSetIrqFtraceEvent;
struct KvmSetIrqFtraceEventDefaultTypeInternal;
extern KvmSetIrqFtraceEventDefaultTypeInternal _KvmSetIrqFtraceEvent_default_instance_;
class KvmSetSpteHvaFtraceEvent;
struct KvmSetSpteHvaFtraceEventDefaultTypeInternal;
extern KvmSetSpteHvaFtraceEventDefaultTypeInternal _KvmSetSpteHvaFtraceEvent_default_instance_;
class KvmSetWayFlushFtraceEvent;
struct KvmSetWayFlushFtraceEventDefaultTypeInternal;
extern KvmSetWayFlushFtraceEventDefaultTypeInternal _KvmSetWayFlushFtraceEvent_default_instance_;
class KvmSysAccessFtraceEvent;
struct KvmSysAccessFtraceEventDefaultTypeInternal;
extern KvmSysAccessFtraceEventDefaultTypeInternal _KvmSysAccessFtraceEvent_default_instance_;
class KvmTestAgeHvaFtraceEvent;
struct KvmTestAgeHvaFtraceEventDefaultTypeInternal;
extern KvmTestAgeHvaFtraceEventDefaultTypeInternal _KvmTestAgeHvaFtraceEvent_default_instance_;
class KvmTimerEmulateFtraceEvent;
struct KvmTimerEmulateFtraceEventDefaultTypeInternal;
extern KvmTimerEmulateFtraceEventDefaultTypeInternal _KvmTimerEmulateFtraceEvent_default_instance_;
class KvmTimerHrtimerExpireFtraceEvent;
struct KvmTimerHrtimerExpireFtraceEventDefaultTypeInternal;
extern KvmTimerHrtimerExpireFtraceEventDefaultTypeInternal _KvmTimerHrtimerExpireFtraceEvent_default_instance_;
class KvmTimerRestoreStateFtraceEvent;
struct KvmTimerRestoreStateFtraceEventDefaultTypeInternal;
extern KvmTimerRestoreStateFtraceEventDefaultTypeInternal _KvmTimerRestoreStateFtraceEvent_default_instance_;
class KvmTimerSaveStateFtraceEvent;
struct KvmTimerSaveStateFtraceEventDefaultTypeInternal;
extern KvmTimerSaveStateFtraceEventDefaultTypeInternal _KvmTimerSaveStateFtraceEvent_default_instance_;
class KvmTimerUpdateIrqFtraceEvent;
struct KvmTimerUpdateIrqFtraceEventDefaultTypeInternal;
extern KvmTimerUpdateIrqFtraceEventDefaultTypeInternal _KvmTimerUpdateIrqFtraceEvent_default_instance_;
class KvmToggleCacheFtraceEvent;
struct KvmToggleCacheFtraceEventDefaultTypeInternal;
extern KvmToggleCacheFtraceEventDefaultTypeInternal _KvmToggleCacheFtraceEvent_default_instance_;
class KvmUnmapHvaRangeFtraceEvent;
struct KvmUnmapHvaRangeFtraceEventDefaultTypeInternal;
extern KvmUnmapHvaRangeFtraceEventDefaultTypeInternal _KvmUnmapHvaRangeFtraceEvent_default_instance_;
class KvmUserspaceExitFtraceEvent;
struct KvmUserspaceExitFtraceEventDefaultTypeInternal;
extern KvmUserspaceExitFtraceEventDefaultTypeInternal _KvmUserspaceExitFtraceEvent_default_instance_;
class KvmVcpuWakeupFtraceEvent;
struct KvmVcpuWakeupFtraceEventDefaultTypeInternal;
extern KvmVcpuWakeupFtraceEventDefaultTypeInternal _KvmVcpuWakeupFtraceEvent_default_instance_;
class KvmWfxArm64FtraceEvent;
struct KvmWfxArm64FtraceEventDefaultTypeInternal;
extern KvmWfxArm64FtraceEventDefaultTypeInternal _KvmWfxArm64FtraceEvent_default_instance_;
class TrapRegFtraceEvent;
struct TrapRegFtraceEventDefaultTypeInternal;
extern TrapRegFtraceEventDefaultTypeInternal _TrapRegFtraceEvent_default_instance_;
class VgicUpdateIrqPendingFtraceEvent;
struct VgicUpdateIrqPendingFtraceEventDefaultTypeInternal;
extern VgicUpdateIrqPendingFtraceEventDefaultTypeInternal _VgicUpdateIrqPendingFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::KvmAccessFaultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmAccessFaultFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmAckIrqFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmAckIrqFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmAgeHvaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmAgeHvaFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmAgePageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmAgePageFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmArmClearDebugFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmArmClearDebugFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmArmSetDreg32FtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmArmSetDreg32FtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmArmSetRegsetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmArmSetRegsetFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmArmSetupDebugFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmArmSetupDebugFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmEntryFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmEntryFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmFpuFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmFpuFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmGetTimerMapFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmGetTimerMapFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmGuestFaultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmGuestFaultFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmHandleSysRegFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmHandleSysRegFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmHvcArm64FtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmHvcArm64FtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmIrqLineFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmIrqLineFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmMmioEmulateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmMmioEmulateFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmMmioFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmMmioFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmSetGuestDebugFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmSetGuestDebugFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmSetIrqFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmSetIrqFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmSetSpteHvaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmSetSpteHvaFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmSetWayFlushFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmSetWayFlushFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmSysAccessFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmSysAccessFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmTestAgeHvaFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmTestAgeHvaFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmTimerEmulateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmTimerEmulateFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmTimerRestoreStateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmTimerRestoreStateFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmTimerSaveStateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmTimerSaveStateFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmTimerUpdateIrqFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmToggleCacheFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmToggleCacheFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmUnmapHvaRangeFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmUserspaceExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmUserspaceExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmVcpuWakeupFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmVcpuWakeupFtraceEvent>(Arena*);
template <>
::perfetto::protos::KvmWfxArm64FtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KvmWfxArm64FtraceEvent>(Arena*);
template <>
::perfetto::protos::TrapRegFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TrapRegFtraceEvent>(Arena*);
template <>
::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VgicUpdateIrqPendingFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class KvmAccessFaultFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmAccessFaultFtraceEvent) */ {
 public:
  inline KvmAccessFaultFtraceEvent() : KvmAccessFaultFtraceEvent(nullptr) {}
  ~KvmAccessFaultFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmAccessFaultFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmAccessFaultFtraceEvent(const KvmAccessFaultFtraceEvent& from);
  KvmAccessFaultFtraceEvent(KvmAccessFaultFtraceEvent&& from) noexcept
    : KvmAccessFaultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmAccessFaultFtraceEvent& operator=(const KvmAccessFaultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmAccessFaultFtraceEvent& operator=(KvmAccessFaultFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmAccessFaultFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmAccessFaultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmAccessFaultFtraceEvent*>(
               &_KvmAccessFaultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KvmAccessFaultFtraceEvent& a, KvmAccessFaultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmAccessFaultFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmAccessFaultFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmAccessFaultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmAccessFaultFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmAccessFaultFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmAccessFaultFtraceEvent& from) {
    KvmAccessFaultFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmAccessFaultFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmAccessFaultFtraceEvent";
  }
  protected:
  explicit KvmAccessFaultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpaFieldNumber = 1,
  };
  // optional uint64 ipa = 1;
  bool has_ipa() const;
  void clear_ipa() ;
  ::uint64_t ipa() const;
  void set_ipa(::uint64_t value);

  private:
  ::uint64_t _internal_ipa() const;
  void _internal_set_ipa(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmAccessFaultFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ipa_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmAckIrqFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmAckIrqFtraceEvent) */ {
 public:
  inline KvmAckIrqFtraceEvent() : KvmAckIrqFtraceEvent(nullptr) {}
  ~KvmAckIrqFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmAckIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmAckIrqFtraceEvent(const KvmAckIrqFtraceEvent& from);
  KvmAckIrqFtraceEvent(KvmAckIrqFtraceEvent&& from) noexcept
    : KvmAckIrqFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmAckIrqFtraceEvent& operator=(const KvmAckIrqFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmAckIrqFtraceEvent& operator=(KvmAckIrqFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmAckIrqFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmAckIrqFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmAckIrqFtraceEvent*>(
               &_KvmAckIrqFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KvmAckIrqFtraceEvent& a, KvmAckIrqFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmAckIrqFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmAckIrqFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmAckIrqFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmAckIrqFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmAckIrqFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmAckIrqFtraceEvent& from) {
    KvmAckIrqFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmAckIrqFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmAckIrqFtraceEvent";
  }
  protected:
  explicit KvmAckIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqchipFieldNumber = 1,
    kPinFieldNumber = 2,
  };
  // optional uint32 irqchip = 1;
  bool has_irqchip() const;
  void clear_irqchip() ;
  ::uint32_t irqchip() const;
  void set_irqchip(::uint32_t value);

  private:
  ::uint32_t _internal_irqchip() const;
  void _internal_set_irqchip(::uint32_t value);

  public:
  // optional uint32 pin = 2;
  bool has_pin() const;
  void clear_pin() ;
  ::uint32_t pin() const;
  void set_pin(::uint32_t value);

  private:
  ::uint32_t _internal_pin() const;
  void _internal_set_pin(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmAckIrqFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t irqchip_;
    ::uint32_t pin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmAgeHvaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmAgeHvaFtraceEvent) */ {
 public:
  inline KvmAgeHvaFtraceEvent() : KvmAgeHvaFtraceEvent(nullptr) {}
  ~KvmAgeHvaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmAgeHvaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmAgeHvaFtraceEvent(const KvmAgeHvaFtraceEvent& from);
  KvmAgeHvaFtraceEvent(KvmAgeHvaFtraceEvent&& from) noexcept
    : KvmAgeHvaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmAgeHvaFtraceEvent& operator=(const KvmAgeHvaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmAgeHvaFtraceEvent& operator=(KvmAgeHvaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmAgeHvaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmAgeHvaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmAgeHvaFtraceEvent*>(
               &_KvmAgeHvaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KvmAgeHvaFtraceEvent& a, KvmAgeHvaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmAgeHvaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmAgeHvaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmAgeHvaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmAgeHvaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmAgeHvaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmAgeHvaFtraceEvent& from) {
    KvmAgeHvaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmAgeHvaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmAgeHvaFtraceEvent";
  }
  protected:
  explicit KvmAgeHvaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndFieldNumber = 1,
    kStartFieldNumber = 2,
  };
  // optional uint64 end = 1;
  bool has_end() const;
  void clear_end() ;
  ::uint64_t end() const;
  void set_end(::uint64_t value);

  private:
  ::uint64_t _internal_end() const;
  void _internal_set_end(::uint64_t value);

  public:
  // optional uint64 start = 2;
  bool has_start() const;
  void clear_start() ;
  ::uint64_t start() const;
  void set_start(::uint64_t value);

  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmAgeHvaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t end_;
    ::uint64_t start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmAgePageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmAgePageFtraceEvent) */ {
 public:
  inline KvmAgePageFtraceEvent() : KvmAgePageFtraceEvent(nullptr) {}
  ~KvmAgePageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmAgePageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmAgePageFtraceEvent(const KvmAgePageFtraceEvent& from);
  KvmAgePageFtraceEvent(KvmAgePageFtraceEvent&& from) noexcept
    : KvmAgePageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmAgePageFtraceEvent& operator=(const KvmAgePageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmAgePageFtraceEvent& operator=(KvmAgePageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmAgePageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmAgePageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmAgePageFtraceEvent*>(
               &_KvmAgePageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KvmAgePageFtraceEvent& a, KvmAgePageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmAgePageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmAgePageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmAgePageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmAgePageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmAgePageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmAgePageFtraceEvent& from) {
    KvmAgePageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmAgePageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmAgePageFtraceEvent";
  }
  protected:
  explicit KvmAgePageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGfnFieldNumber = 1,
    kHvaFieldNumber = 2,
    kLevelFieldNumber = 3,
    kReferencedFieldNumber = 4,
  };
  // optional uint64 gfn = 1;
  bool has_gfn() const;
  void clear_gfn() ;
  ::uint64_t gfn() const;
  void set_gfn(::uint64_t value);

  private:
  ::uint64_t _internal_gfn() const;
  void _internal_set_gfn(::uint64_t value);

  public:
  // optional uint64 hva = 2;
  bool has_hva() const;
  void clear_hva() ;
  ::uint64_t hva() const;
  void set_hva(::uint64_t value);

  private:
  ::uint64_t _internal_hva() const;
  void _internal_set_hva(::uint64_t value);

  public:
  // optional uint32 level = 3;
  bool has_level() const;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // optional uint32 referenced = 4;
  bool has_referenced() const;
  void clear_referenced() ;
  ::uint32_t referenced() const;
  void set_referenced(::uint32_t value);

  private:
  ::uint32_t _internal_referenced() const;
  void _internal_set_referenced(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmAgePageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t gfn_;
    ::uint64_t hva_;
    ::uint32_t level_;
    ::uint32_t referenced_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmArmClearDebugFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmArmClearDebugFtraceEvent) */ {
 public:
  inline KvmArmClearDebugFtraceEvent() : KvmArmClearDebugFtraceEvent(nullptr) {}
  ~KvmArmClearDebugFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmArmClearDebugFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmArmClearDebugFtraceEvent(const KvmArmClearDebugFtraceEvent& from);
  KvmArmClearDebugFtraceEvent(KvmArmClearDebugFtraceEvent&& from) noexcept
    : KvmArmClearDebugFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmArmClearDebugFtraceEvent& operator=(const KvmArmClearDebugFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmArmClearDebugFtraceEvent& operator=(KvmArmClearDebugFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmArmClearDebugFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmArmClearDebugFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmArmClearDebugFtraceEvent*>(
               &_KvmArmClearDebugFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KvmArmClearDebugFtraceEvent& a, KvmArmClearDebugFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmArmClearDebugFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmArmClearDebugFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmArmClearDebugFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmArmClearDebugFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmArmClearDebugFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmArmClearDebugFtraceEvent& from) {
    KvmArmClearDebugFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmArmClearDebugFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmArmClearDebugFtraceEvent";
  }
  protected:
  explicit KvmArmClearDebugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuestDebugFieldNumber = 1,
  };
  // optional uint32 guest_debug = 1;
  bool has_guest_debug() const;
  void clear_guest_debug() ;
  ::uint32_t guest_debug() const;
  void set_guest_debug(::uint32_t value);

  private:
  ::uint32_t _internal_guest_debug() const;
  void _internal_set_guest_debug(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmArmClearDebugFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t guest_debug_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmArmSetDreg32FtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmArmSetDreg32FtraceEvent) */ {
 public:
  inline KvmArmSetDreg32FtraceEvent() : KvmArmSetDreg32FtraceEvent(nullptr) {}
  ~KvmArmSetDreg32FtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmArmSetDreg32FtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmArmSetDreg32FtraceEvent(const KvmArmSetDreg32FtraceEvent& from);
  KvmArmSetDreg32FtraceEvent(KvmArmSetDreg32FtraceEvent&& from) noexcept
    : KvmArmSetDreg32FtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmArmSetDreg32FtraceEvent& operator=(const KvmArmSetDreg32FtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmArmSetDreg32FtraceEvent& operator=(KvmArmSetDreg32FtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmArmSetDreg32FtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmArmSetDreg32FtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmArmSetDreg32FtraceEvent*>(
               &_KvmArmSetDreg32FtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KvmArmSetDreg32FtraceEvent& a, KvmArmSetDreg32FtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmArmSetDreg32FtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmArmSetDreg32FtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmArmSetDreg32FtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmArmSetDreg32FtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmArmSetDreg32FtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmArmSetDreg32FtraceEvent& from) {
    KvmArmSetDreg32FtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmArmSetDreg32FtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmArmSetDreg32FtraceEvent";
  }
  protected:
  explicit KvmArmSetDreg32FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 value = 2;
  bool has_value() const;
  void clear_value() ;
  ::uint32_t value() const;
  void set_value(::uint32_t value);

  private:
  ::uint32_t _internal_value() const;
  void _internal_set_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmArmSetDreg32FtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmArmSetRegsetFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmArmSetRegsetFtraceEvent) */ {
 public:
  inline KvmArmSetRegsetFtraceEvent() : KvmArmSetRegsetFtraceEvent(nullptr) {}
  ~KvmArmSetRegsetFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmArmSetRegsetFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmArmSetRegsetFtraceEvent(const KvmArmSetRegsetFtraceEvent& from);
  KvmArmSetRegsetFtraceEvent(KvmArmSetRegsetFtraceEvent&& from) noexcept
    : KvmArmSetRegsetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmArmSetRegsetFtraceEvent& operator=(const KvmArmSetRegsetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmArmSetRegsetFtraceEvent& operator=(KvmArmSetRegsetFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmArmSetRegsetFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmArmSetRegsetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmArmSetRegsetFtraceEvent*>(
               &_KvmArmSetRegsetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KvmArmSetRegsetFtraceEvent& a, KvmArmSetRegsetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmArmSetRegsetFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmArmSetRegsetFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmArmSetRegsetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmArmSetRegsetFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmArmSetRegsetFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmArmSetRegsetFtraceEvent& from) {
    KvmArmSetRegsetFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmArmSetRegsetFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmArmSetRegsetFtraceEvent";
  }
  protected:
  explicit KvmArmSetRegsetFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLenFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 len = 1;
  bool has_len() const;
  void clear_len() ;
  ::int32_t len() const;
  void set_len(::int32_t value);

  private:
  ::int32_t _internal_len() const;
  void _internal_set_len(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmArmSetRegsetFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmArmSetupDebugFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmArmSetupDebugFtraceEvent) */ {
 public:
  inline KvmArmSetupDebugFtraceEvent() : KvmArmSetupDebugFtraceEvent(nullptr) {}
  ~KvmArmSetupDebugFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmArmSetupDebugFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmArmSetupDebugFtraceEvent(const KvmArmSetupDebugFtraceEvent& from);
  KvmArmSetupDebugFtraceEvent(KvmArmSetupDebugFtraceEvent&& from) noexcept
    : KvmArmSetupDebugFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmArmSetupDebugFtraceEvent& operator=(const KvmArmSetupDebugFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmArmSetupDebugFtraceEvent& operator=(KvmArmSetupDebugFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmArmSetupDebugFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmArmSetupDebugFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmArmSetupDebugFtraceEvent*>(
               &_KvmArmSetupDebugFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KvmArmSetupDebugFtraceEvent& a, KvmArmSetupDebugFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmArmSetupDebugFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmArmSetupDebugFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmArmSetupDebugFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmArmSetupDebugFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmArmSetupDebugFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmArmSetupDebugFtraceEvent& from) {
    KvmArmSetupDebugFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmArmSetupDebugFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmArmSetupDebugFtraceEvent";
  }
  protected:
  explicit KvmArmSetupDebugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcpuFieldNumber = 2,
    kGuestDebugFieldNumber = 1,
  };
  // optional uint64 vcpu = 2;
  bool has_vcpu() const;
  void clear_vcpu() ;
  ::uint64_t vcpu() const;
  void set_vcpu(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu() const;
  void _internal_set_vcpu(::uint64_t value);

  public:
  // optional uint32 guest_debug = 1;
  bool has_guest_debug() const;
  void clear_guest_debug() ;
  ::uint32_t guest_debug() const;
  void set_guest_debug(::uint32_t value);

  private:
  ::uint32_t _internal_guest_debug() const;
  void _internal_set_guest_debug(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmArmSetupDebugFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t vcpu_;
    ::uint32_t guest_debug_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmEntryFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmEntryFtraceEvent) */ {
 public:
  inline KvmEntryFtraceEvent() : KvmEntryFtraceEvent(nullptr) {}
  ~KvmEntryFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmEntryFtraceEvent(const KvmEntryFtraceEvent& from);
  KvmEntryFtraceEvent(KvmEntryFtraceEvent&& from) noexcept
    : KvmEntryFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmEntryFtraceEvent& operator=(const KvmEntryFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmEntryFtraceEvent& operator=(KvmEntryFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmEntryFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmEntryFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmEntryFtraceEvent*>(
               &_KvmEntryFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KvmEntryFtraceEvent& a, KvmEntryFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmEntryFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmEntryFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmEntryFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmEntryFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmEntryFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmEntryFtraceEvent& from) {
    KvmEntryFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmEntryFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmEntryFtraceEvent";
  }
  protected:
  explicit KvmEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcpuPcFieldNumber = 1,
  };
  // optional uint64 vcpu_pc = 1;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmEntryFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t vcpu_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmExitFtraceEvent) */ {
 public:
  inline KvmExitFtraceEvent() : KvmExitFtraceEvent(nullptr) {}
  ~KvmExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmExitFtraceEvent(const KvmExitFtraceEvent& from);
  KvmExitFtraceEvent(KvmExitFtraceEvent&& from) noexcept
    : KvmExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmExitFtraceEvent& operator=(const KvmExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmExitFtraceEvent& operator=(KvmExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmExitFtraceEvent*>(
               &_KvmExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KvmExitFtraceEvent& a, KvmExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmExitFtraceEvent& from) {
    KvmExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmExitFtraceEvent";
  }
  protected:
  explicit KvmExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEsrEcFieldNumber = 1,
    kRetFieldNumber = 2,
    kVcpuPcFieldNumber = 3,
  };
  // optional uint32 esr_ec = 1;
  bool has_esr_ec() const;
  void clear_esr_ec() ;
  ::uint32_t esr_ec() const;
  void set_esr_ec(::uint32_t value);

  private:
  ::uint32_t _internal_esr_ec() const;
  void _internal_set_esr_ec(::uint32_t value);

  public:
  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional uint64 vcpu_pc = 3;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t esr_ec_;
    ::int32_t ret_;
    ::uint64_t vcpu_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmFpuFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmFpuFtraceEvent) */ {
 public:
  inline KvmFpuFtraceEvent() : KvmFpuFtraceEvent(nullptr) {}
  ~KvmFpuFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmFpuFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmFpuFtraceEvent(const KvmFpuFtraceEvent& from);
  KvmFpuFtraceEvent(KvmFpuFtraceEvent&& from) noexcept
    : KvmFpuFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmFpuFtraceEvent& operator=(const KvmFpuFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmFpuFtraceEvent& operator=(KvmFpuFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmFpuFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmFpuFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmFpuFtraceEvent*>(
               &_KvmFpuFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KvmFpuFtraceEvent& a, KvmFpuFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmFpuFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmFpuFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmFpuFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmFpuFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmFpuFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmFpuFtraceEvent& from) {
    KvmFpuFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmFpuFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmFpuFtraceEvent";
  }
  protected:
  explicit KvmFpuFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 1,
  };
  // optional uint32 load = 1;
  bool has_load() const;
  void clear_load() ;
  ::uint32_t load() const;
  void set_load(::uint32_t value);

  private:
  ::uint32_t _internal_load() const;
  void _internal_set_load(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmFpuFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t load_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmGetTimerMapFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmGetTimerMapFtraceEvent) */ {
 public:
  inline KvmGetTimerMapFtraceEvent() : KvmGetTimerMapFtraceEvent(nullptr) {}
  ~KvmGetTimerMapFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmGetTimerMapFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmGetTimerMapFtraceEvent(const KvmGetTimerMapFtraceEvent& from);
  KvmGetTimerMapFtraceEvent(KvmGetTimerMapFtraceEvent&& from) noexcept
    : KvmGetTimerMapFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmGetTimerMapFtraceEvent& operator=(const KvmGetTimerMapFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmGetTimerMapFtraceEvent& operator=(KvmGetTimerMapFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmGetTimerMapFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmGetTimerMapFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmGetTimerMapFtraceEvent*>(
               &_KvmGetTimerMapFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KvmGetTimerMapFtraceEvent& a, KvmGetTimerMapFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmGetTimerMapFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmGetTimerMapFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmGetTimerMapFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmGetTimerMapFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmGetTimerMapFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmGetTimerMapFtraceEvent& from) {
    KvmGetTimerMapFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmGetTimerMapFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmGetTimerMapFtraceEvent";
  }
  protected:
  explicit KvmGetTimerMapFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectPtimerFieldNumber = 1,
    kDirectVtimerFieldNumber = 2,
    kVcpuIdFieldNumber = 4,
    kEmulPtimerFieldNumber = 3,
  };
  // optional int32 direct_ptimer = 1;
  bool has_direct_ptimer() const;
  void clear_direct_ptimer() ;
  ::int32_t direct_ptimer() const;
  void set_direct_ptimer(::int32_t value);

  private:
  ::int32_t _internal_direct_ptimer() const;
  void _internal_set_direct_ptimer(::int32_t value);

  public:
  // optional int32 direct_vtimer = 2;
  bool has_direct_vtimer() const;
  void clear_direct_vtimer() ;
  ::int32_t direct_vtimer() const;
  void set_direct_vtimer(::int32_t value);

  private:
  ::int32_t _internal_direct_vtimer() const;
  void _internal_set_direct_vtimer(::int32_t value);

  public:
  // optional uint64 vcpu_id = 4;
  bool has_vcpu_id() const;
  void clear_vcpu_id() ;
  ::uint64_t vcpu_id() const;
  void set_vcpu_id(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_id() const;
  void _internal_set_vcpu_id(::uint64_t value);

  public:
  // optional int32 emul_ptimer = 3;
  bool has_emul_ptimer() const;
  void clear_emul_ptimer() ;
  ::int32_t emul_ptimer() const;
  void set_emul_ptimer(::int32_t value);

  private:
  ::int32_t _internal_emul_ptimer() const;
  void _internal_set_emul_ptimer(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmGetTimerMapFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t direct_ptimer_;
    ::int32_t direct_vtimer_;
    ::uint64_t vcpu_id_;
    ::int32_t emul_ptimer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmGuestFaultFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmGuestFaultFtraceEvent) */ {
 public:
  inline KvmGuestFaultFtraceEvent() : KvmGuestFaultFtraceEvent(nullptr) {}
  ~KvmGuestFaultFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmGuestFaultFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmGuestFaultFtraceEvent(const KvmGuestFaultFtraceEvent& from);
  KvmGuestFaultFtraceEvent(KvmGuestFaultFtraceEvent&& from) noexcept
    : KvmGuestFaultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmGuestFaultFtraceEvent& operator=(const KvmGuestFaultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmGuestFaultFtraceEvent& operator=(KvmGuestFaultFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmGuestFaultFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmGuestFaultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmGuestFaultFtraceEvent*>(
               &_KvmGuestFaultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KvmGuestFaultFtraceEvent& a, KvmGuestFaultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmGuestFaultFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmGuestFaultFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmGuestFaultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmGuestFaultFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmGuestFaultFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmGuestFaultFtraceEvent& from) {
    KvmGuestFaultFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmGuestFaultFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmGuestFaultFtraceEvent";
  }
  protected:
  explicit KvmGuestFaultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHsrFieldNumber = 1,
    kHxfarFieldNumber = 2,
    kIpaFieldNumber = 3,
    kVcpuPcFieldNumber = 4,
  };
  // optional uint64 hsr = 1;
  bool has_hsr() const;
  void clear_hsr() ;
  ::uint64_t hsr() const;
  void set_hsr(::uint64_t value);

  private:
  ::uint64_t _internal_hsr() const;
  void _internal_set_hsr(::uint64_t value);

  public:
  // optional uint64 hxfar = 2;
  bool has_hxfar() const;
  void clear_hxfar() ;
  ::uint64_t hxfar() const;
  void set_hxfar(::uint64_t value);

  private:
  ::uint64_t _internal_hxfar() const;
  void _internal_set_hxfar(::uint64_t value);

  public:
  // optional uint64 ipa = 3;
  bool has_ipa() const;
  void clear_ipa() ;
  ::uint64_t ipa() const;
  void set_ipa(::uint64_t value);

  private:
  ::uint64_t _internal_ipa() const;
  void _internal_set_ipa(::uint64_t value);

  public:
  // optional uint64 vcpu_pc = 4;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmGuestFaultFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t hsr_;
    ::uint64_t hxfar_;
    ::uint64_t ipa_;
    ::uint64_t vcpu_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmHandleSysRegFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmHandleSysRegFtraceEvent) */ {
 public:
  inline KvmHandleSysRegFtraceEvent() : KvmHandleSysRegFtraceEvent(nullptr) {}
  ~KvmHandleSysRegFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmHandleSysRegFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmHandleSysRegFtraceEvent(const KvmHandleSysRegFtraceEvent& from);
  KvmHandleSysRegFtraceEvent(KvmHandleSysRegFtraceEvent&& from) noexcept
    : KvmHandleSysRegFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmHandleSysRegFtraceEvent& operator=(const KvmHandleSysRegFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmHandleSysRegFtraceEvent& operator=(KvmHandleSysRegFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmHandleSysRegFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmHandleSysRegFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmHandleSysRegFtraceEvent*>(
               &_KvmHandleSysRegFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KvmHandleSysRegFtraceEvent& a, KvmHandleSysRegFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmHandleSysRegFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmHandleSysRegFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmHandleSysRegFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmHandleSysRegFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmHandleSysRegFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmHandleSysRegFtraceEvent& from) {
    KvmHandleSysRegFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmHandleSysRegFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmHandleSysRegFtraceEvent";
  }
  protected:
  explicit KvmHandleSysRegFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHsrFieldNumber = 1,
  };
  // optional uint64 hsr = 1;
  bool has_hsr() const;
  void clear_hsr() ;
  ::uint64_t hsr() const;
  void set_hsr(::uint64_t value);

  private:
  ::uint64_t _internal_hsr() const;
  void _internal_set_hsr(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmHandleSysRegFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t hsr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmHvcArm64FtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmHvcArm64FtraceEvent) */ {
 public:
  inline KvmHvcArm64FtraceEvent() : KvmHvcArm64FtraceEvent(nullptr) {}
  ~KvmHvcArm64FtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmHvcArm64FtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmHvcArm64FtraceEvent(const KvmHvcArm64FtraceEvent& from);
  KvmHvcArm64FtraceEvent(KvmHvcArm64FtraceEvent&& from) noexcept
    : KvmHvcArm64FtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmHvcArm64FtraceEvent& operator=(const KvmHvcArm64FtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmHvcArm64FtraceEvent& operator=(KvmHvcArm64FtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmHvcArm64FtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmHvcArm64FtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmHvcArm64FtraceEvent*>(
               &_KvmHvcArm64FtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KvmHvcArm64FtraceEvent& a, KvmHvcArm64FtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmHvcArm64FtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmHvcArm64FtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmHvcArm64FtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmHvcArm64FtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmHvcArm64FtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmHvcArm64FtraceEvent& from) {
    KvmHvcArm64FtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmHvcArm64FtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmHvcArm64FtraceEvent";
  }
  protected:
  explicit KvmHvcArm64FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImmFieldNumber = 1,
    kR0FieldNumber = 2,
    kVcpuPcFieldNumber = 3,
  };
  // optional uint64 imm = 1;
  bool has_imm() const;
  void clear_imm() ;
  ::uint64_t imm() const;
  void set_imm(::uint64_t value);

  private:
  ::uint64_t _internal_imm() const;
  void _internal_set_imm(::uint64_t value);

  public:
  // optional uint64 r0 = 2;
  bool has_r0() const;
  void clear_r0() ;
  ::uint64_t r0() const;
  void set_r0(::uint64_t value);

  private:
  ::uint64_t _internal_r0() const;
  void _internal_set_r0(::uint64_t value);

  public:
  // optional uint64 vcpu_pc = 3;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmHvcArm64FtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t imm_;
    ::uint64_t r0_;
    ::uint64_t vcpu_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmIrqLineFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmIrqLineFtraceEvent) */ {
 public:
  inline KvmIrqLineFtraceEvent() : KvmIrqLineFtraceEvent(nullptr) {}
  ~KvmIrqLineFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmIrqLineFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmIrqLineFtraceEvent(const KvmIrqLineFtraceEvent& from);
  KvmIrqLineFtraceEvent(KvmIrqLineFtraceEvent&& from) noexcept
    : KvmIrqLineFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmIrqLineFtraceEvent& operator=(const KvmIrqLineFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmIrqLineFtraceEvent& operator=(KvmIrqLineFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmIrqLineFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmIrqLineFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmIrqLineFtraceEvent*>(
               &_KvmIrqLineFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KvmIrqLineFtraceEvent& a, KvmIrqLineFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmIrqLineFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmIrqLineFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmIrqLineFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmIrqLineFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmIrqLineFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmIrqLineFtraceEvent& from) {
    KvmIrqLineFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmIrqLineFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmIrqLineFtraceEvent";
  }
  protected:
  explicit KvmIrqLineFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqNumFieldNumber = 1,
    kLevelFieldNumber = 2,
    kTypeFieldNumber = 3,
    kVcpuIdxFieldNumber = 4,
  };
  // optional int32 irq_num = 1;
  bool has_irq_num() const;
  void clear_irq_num() ;
  ::int32_t irq_num() const;
  void set_irq_num(::int32_t value);

  private:
  ::int32_t _internal_irq_num() const;
  void _internal_set_irq_num(::int32_t value);

  public:
  // optional int32 level = 2;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // optional uint32 type = 3;
  bool has_type() const;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // optional int32 vcpu_idx = 4;
  bool has_vcpu_idx() const;
  void clear_vcpu_idx() ;
  ::int32_t vcpu_idx() const;
  void set_vcpu_idx(::int32_t value);

  private:
  ::int32_t _internal_vcpu_idx() const;
  void _internal_set_vcpu_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmIrqLineFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t irq_num_;
    ::int32_t level_;
    ::uint32_t type_;
    ::int32_t vcpu_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmMmioFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmMmioFtraceEvent) */ {
 public:
  inline KvmMmioFtraceEvent() : KvmMmioFtraceEvent(nullptr) {}
  ~KvmMmioFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmMmioFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmMmioFtraceEvent(const KvmMmioFtraceEvent& from);
  KvmMmioFtraceEvent(KvmMmioFtraceEvent&& from) noexcept
    : KvmMmioFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmMmioFtraceEvent& operator=(const KvmMmioFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmMmioFtraceEvent& operator=(KvmMmioFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmMmioFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmMmioFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmMmioFtraceEvent*>(
               &_KvmMmioFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(KvmMmioFtraceEvent& a, KvmMmioFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmMmioFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmMmioFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmMmioFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmMmioFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmMmioFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmMmioFtraceEvent& from) {
    KvmMmioFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmMmioFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmMmioFtraceEvent";
  }
  protected:
  explicit KvmMmioFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpaFieldNumber = 1,
    kLenFieldNumber = 2,
    kTypeFieldNumber = 3,
    kValFieldNumber = 4,
  };
  // optional uint64 gpa = 1;
  bool has_gpa() const;
  void clear_gpa() ;
  ::uint64_t gpa() const;
  void set_gpa(::uint64_t value);

  private:
  ::uint64_t _internal_gpa() const;
  void _internal_set_gpa(::uint64_t value);

  public:
  // optional uint32 len = 2;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 type = 3;
  bool has_type() const;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // optional uint64 val = 4;
  bool has_val() const;
  void clear_val() ;
  ::uint64_t val() const;
  void set_val(::uint64_t value);

  private:
  ::uint64_t _internal_val() const;
  void _internal_set_val(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmMmioFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t gpa_;
    ::uint32_t len_;
    ::uint32_t type_;
    ::uint64_t val_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmMmioEmulateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmMmioEmulateFtraceEvent) */ {
 public:
  inline KvmMmioEmulateFtraceEvent() : KvmMmioEmulateFtraceEvent(nullptr) {}
  ~KvmMmioEmulateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmMmioEmulateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmMmioEmulateFtraceEvent(const KvmMmioEmulateFtraceEvent& from);
  KvmMmioEmulateFtraceEvent(KvmMmioEmulateFtraceEvent&& from) noexcept
    : KvmMmioEmulateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmMmioEmulateFtraceEvent& operator=(const KvmMmioEmulateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmMmioEmulateFtraceEvent& operator=(KvmMmioEmulateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmMmioEmulateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmMmioEmulateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmMmioEmulateFtraceEvent*>(
               &_KvmMmioEmulateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(KvmMmioEmulateFtraceEvent& a, KvmMmioEmulateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmMmioEmulateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmMmioEmulateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmMmioEmulateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmMmioEmulateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmMmioEmulateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmMmioEmulateFtraceEvent& from) {
    KvmMmioEmulateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmMmioEmulateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmMmioEmulateFtraceEvent";
  }
  protected:
  explicit KvmMmioEmulateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpsrFieldNumber = 1,
    kInstrFieldNumber = 2,
    kVcpuPcFieldNumber = 3,
  };
  // optional uint64 cpsr = 1;
  bool has_cpsr() const;
  void clear_cpsr() ;
  ::uint64_t cpsr() const;
  void set_cpsr(::uint64_t value);

  private:
  ::uint64_t _internal_cpsr() const;
  void _internal_set_cpsr(::uint64_t value);

  public:
  // optional uint64 instr = 2;
  bool has_instr() const;
  void clear_instr() ;
  ::uint64_t instr() const;
  void set_instr(::uint64_t value);

  private:
  ::uint64_t _internal_instr() const;
  void _internal_set_instr(::uint64_t value);

  public:
  // optional uint64 vcpu_pc = 3;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmMmioEmulateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t cpsr_;
    ::uint64_t instr_;
    ::uint64_t vcpu_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmSetGuestDebugFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmSetGuestDebugFtraceEvent) */ {
 public:
  inline KvmSetGuestDebugFtraceEvent() : KvmSetGuestDebugFtraceEvent(nullptr) {}
  ~KvmSetGuestDebugFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmSetGuestDebugFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmSetGuestDebugFtraceEvent(const KvmSetGuestDebugFtraceEvent& from);
  KvmSetGuestDebugFtraceEvent(KvmSetGuestDebugFtraceEvent&& from) noexcept
    : KvmSetGuestDebugFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmSetGuestDebugFtraceEvent& operator=(const KvmSetGuestDebugFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmSetGuestDebugFtraceEvent& operator=(KvmSetGuestDebugFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmSetGuestDebugFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmSetGuestDebugFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmSetGuestDebugFtraceEvent*>(
               &_KvmSetGuestDebugFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(KvmSetGuestDebugFtraceEvent& a, KvmSetGuestDebugFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmSetGuestDebugFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmSetGuestDebugFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmSetGuestDebugFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmSetGuestDebugFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmSetGuestDebugFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmSetGuestDebugFtraceEvent& from) {
    KvmSetGuestDebugFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmSetGuestDebugFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmSetGuestDebugFtraceEvent";
  }
  protected:
  explicit KvmSetGuestDebugFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcpuFieldNumber = 2,
    kGuestDebugFieldNumber = 1,
  };
  // optional uint64 vcpu = 2;
  bool has_vcpu() const;
  void clear_vcpu() ;
  ::uint64_t vcpu() const;
  void set_vcpu(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu() const;
  void _internal_set_vcpu(::uint64_t value);

  public:
  // optional uint32 guest_debug = 1;
  bool has_guest_debug() const;
  void clear_guest_debug() ;
  ::uint32_t guest_debug() const;
  void set_guest_debug(::uint32_t value);

  private:
  ::uint32_t _internal_guest_debug() const;
  void _internal_set_guest_debug(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmSetGuestDebugFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t vcpu_;
    ::uint32_t guest_debug_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmSetIrqFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmSetIrqFtraceEvent) */ {
 public:
  inline KvmSetIrqFtraceEvent() : KvmSetIrqFtraceEvent(nullptr) {}
  ~KvmSetIrqFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmSetIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmSetIrqFtraceEvent(const KvmSetIrqFtraceEvent& from);
  KvmSetIrqFtraceEvent(KvmSetIrqFtraceEvent&& from) noexcept
    : KvmSetIrqFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmSetIrqFtraceEvent& operator=(const KvmSetIrqFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmSetIrqFtraceEvent& operator=(KvmSetIrqFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmSetIrqFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmSetIrqFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmSetIrqFtraceEvent*>(
               &_KvmSetIrqFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(KvmSetIrqFtraceEvent& a, KvmSetIrqFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmSetIrqFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmSetIrqFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmSetIrqFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmSetIrqFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmSetIrqFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmSetIrqFtraceEvent& from) {
    KvmSetIrqFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmSetIrqFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmSetIrqFtraceEvent";
  }
  protected:
  explicit KvmSetIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGsiFieldNumber = 1,
    kIrqSourceIdFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // optional uint32 gsi = 1;
  bool has_gsi() const;
  void clear_gsi() ;
  ::uint32_t gsi() const;
  void set_gsi(::uint32_t value);

  private:
  ::uint32_t _internal_gsi() const;
  void _internal_set_gsi(::uint32_t value);

  public:
  // optional int32 irq_source_id = 2;
  bool has_irq_source_id() const;
  void clear_irq_source_id() ;
  ::int32_t irq_source_id() const;
  void set_irq_source_id(::int32_t value);

  private:
  ::int32_t _internal_irq_source_id() const;
  void _internal_set_irq_source_id(::int32_t value);

  public:
  // optional int32 level = 3;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmSetIrqFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t gsi_;
    ::int32_t irq_source_id_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmSetSpteHvaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmSetSpteHvaFtraceEvent) */ {
 public:
  inline KvmSetSpteHvaFtraceEvent() : KvmSetSpteHvaFtraceEvent(nullptr) {}
  ~KvmSetSpteHvaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmSetSpteHvaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmSetSpteHvaFtraceEvent(const KvmSetSpteHvaFtraceEvent& from);
  KvmSetSpteHvaFtraceEvent(KvmSetSpteHvaFtraceEvent&& from) noexcept
    : KvmSetSpteHvaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmSetSpteHvaFtraceEvent& operator=(const KvmSetSpteHvaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmSetSpteHvaFtraceEvent& operator=(KvmSetSpteHvaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmSetSpteHvaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmSetSpteHvaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmSetSpteHvaFtraceEvent*>(
               &_KvmSetSpteHvaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(KvmSetSpteHvaFtraceEvent& a, KvmSetSpteHvaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmSetSpteHvaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmSetSpteHvaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmSetSpteHvaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmSetSpteHvaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmSetSpteHvaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmSetSpteHvaFtraceEvent& from) {
    KvmSetSpteHvaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmSetSpteHvaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmSetSpteHvaFtraceEvent";
  }
  protected:
  explicit KvmSetSpteHvaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHvaFieldNumber = 1,
  };
  // optional uint64 hva = 1;
  bool has_hva() const;
  void clear_hva() ;
  ::uint64_t hva() const;
  void set_hva(::uint64_t value);

  private:
  ::uint64_t _internal_hva() const;
  void _internal_set_hva(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmSetSpteHvaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t hva_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmSetWayFlushFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmSetWayFlushFtraceEvent) */ {
 public:
  inline KvmSetWayFlushFtraceEvent() : KvmSetWayFlushFtraceEvent(nullptr) {}
  ~KvmSetWayFlushFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmSetWayFlushFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmSetWayFlushFtraceEvent(const KvmSetWayFlushFtraceEvent& from);
  KvmSetWayFlushFtraceEvent(KvmSetWayFlushFtraceEvent&& from) noexcept
    : KvmSetWayFlushFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmSetWayFlushFtraceEvent& operator=(const KvmSetWayFlushFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmSetWayFlushFtraceEvent& operator=(KvmSetWayFlushFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmSetWayFlushFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmSetWayFlushFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmSetWayFlushFtraceEvent*>(
               &_KvmSetWayFlushFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(KvmSetWayFlushFtraceEvent& a, KvmSetWayFlushFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmSetWayFlushFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmSetWayFlushFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmSetWayFlushFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmSetWayFlushFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmSetWayFlushFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmSetWayFlushFtraceEvent& from) {
    KvmSetWayFlushFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmSetWayFlushFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmSetWayFlushFtraceEvent";
  }
  protected:
  explicit KvmSetWayFlushFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcpuPcFieldNumber = 2,
    kCacheFieldNumber = 1,
  };
  // optional uint64 vcpu_pc = 2;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // optional uint32 cache = 1;
  bool has_cache() const;
  void clear_cache() ;
  ::uint32_t cache() const;
  void set_cache(::uint32_t value);

  private:
  ::uint32_t _internal_cache() const;
  void _internal_set_cache(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmSetWayFlushFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t vcpu_pc_;
    ::uint32_t cache_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmSysAccessFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmSysAccessFtraceEvent) */ {
 public:
  inline KvmSysAccessFtraceEvent() : KvmSysAccessFtraceEvent(nullptr) {}
  ~KvmSysAccessFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmSysAccessFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmSysAccessFtraceEvent(const KvmSysAccessFtraceEvent& from);
  KvmSysAccessFtraceEvent(KvmSysAccessFtraceEvent&& from) noexcept
    : KvmSysAccessFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmSysAccessFtraceEvent& operator=(const KvmSysAccessFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmSysAccessFtraceEvent& operator=(KvmSysAccessFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmSysAccessFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmSysAccessFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmSysAccessFtraceEvent*>(
               &_KvmSysAccessFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(KvmSysAccessFtraceEvent& a, KvmSysAccessFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmSysAccessFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmSysAccessFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmSysAccessFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmSysAccessFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmSysAccessFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmSysAccessFtraceEvent& from) {
    KvmSysAccessFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmSysAccessFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmSysAccessFtraceEvent";
  }
  protected:
  explicit KvmSysAccessFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 7,
    kCRmFieldNumber = 1,
    kCRnFieldNumber = 2,
    kOp0FieldNumber = 3,
    kOp1FieldNumber = 4,
    kOp2FieldNumber = 5,
    kIsWriteFieldNumber = 6,
    kVcpuPcFieldNumber = 8,
  };
  // optional string name = 7;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 CRm = 1;
  bool has_crm() const;
  void clear_crm() ;
  ::uint32_t crm() const;
  void set_crm(::uint32_t value);

  private:
  ::uint32_t _internal_crm() const;
  void _internal_set_crm(::uint32_t value);

  public:
  // optional uint32 CRn = 2;
  bool has_crn() const;
  void clear_crn() ;
  ::uint32_t crn() const;
  void set_crn(::uint32_t value);

  private:
  ::uint32_t _internal_crn() const;
  void _internal_set_crn(::uint32_t value);

  public:
  // optional uint32 Op0 = 3;
  bool has_op0() const;
  void clear_op0() ;
  ::uint32_t op0() const;
  void set_op0(::uint32_t value);

  private:
  ::uint32_t _internal_op0() const;
  void _internal_set_op0(::uint32_t value);

  public:
  // optional uint32 Op1 = 4;
  bool has_op1() const;
  void clear_op1() ;
  ::uint32_t op1() const;
  void set_op1(::uint32_t value);

  private:
  ::uint32_t _internal_op1() const;
  void _internal_set_op1(::uint32_t value);

  public:
  // optional uint32 Op2 = 5;
  bool has_op2() const;
  void clear_op2() ;
  ::uint32_t op2() const;
  void set_op2(::uint32_t value);

  private:
  ::uint32_t _internal_op2() const;
  void _internal_set_op2(::uint32_t value);

  public:
  // optional uint32 is_write = 6;
  bool has_is_write() const;
  void clear_is_write() ;
  ::uint32_t is_write() const;
  void set_is_write(::uint32_t value);

  private:
  ::uint32_t _internal_is_write() const;
  void _internal_set_is_write(::uint32_t value);

  public:
  // optional uint64 vcpu_pc = 8;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmSysAccessFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t crm_;
    ::uint32_t crn_;
    ::uint32_t op0_;
    ::uint32_t op1_;
    ::uint32_t op2_;
    ::uint32_t is_write_;
    ::uint64_t vcpu_pc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmTestAgeHvaFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmTestAgeHvaFtraceEvent) */ {
 public:
  inline KvmTestAgeHvaFtraceEvent() : KvmTestAgeHvaFtraceEvent(nullptr) {}
  ~KvmTestAgeHvaFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmTestAgeHvaFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmTestAgeHvaFtraceEvent(const KvmTestAgeHvaFtraceEvent& from);
  KvmTestAgeHvaFtraceEvent(KvmTestAgeHvaFtraceEvent&& from) noexcept
    : KvmTestAgeHvaFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmTestAgeHvaFtraceEvent& operator=(const KvmTestAgeHvaFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmTestAgeHvaFtraceEvent& operator=(KvmTestAgeHvaFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmTestAgeHvaFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmTestAgeHvaFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmTestAgeHvaFtraceEvent*>(
               &_KvmTestAgeHvaFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(KvmTestAgeHvaFtraceEvent& a, KvmTestAgeHvaFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmTestAgeHvaFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmTestAgeHvaFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmTestAgeHvaFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmTestAgeHvaFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmTestAgeHvaFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmTestAgeHvaFtraceEvent& from) {
    KvmTestAgeHvaFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmTestAgeHvaFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmTestAgeHvaFtraceEvent";
  }
  protected:
  explicit KvmTestAgeHvaFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHvaFieldNumber = 1,
  };
  // optional uint64 hva = 1;
  bool has_hva() const;
  void clear_hva() ;
  ::uint64_t hva() const;
  void set_hva(::uint64_t value);

  private:
  ::uint64_t _internal_hva() const;
  void _internal_set_hva(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmTestAgeHvaFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t hva_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmTimerEmulateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmTimerEmulateFtraceEvent) */ {
 public:
  inline KvmTimerEmulateFtraceEvent() : KvmTimerEmulateFtraceEvent(nullptr) {}
  ~KvmTimerEmulateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmTimerEmulateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmTimerEmulateFtraceEvent(const KvmTimerEmulateFtraceEvent& from);
  KvmTimerEmulateFtraceEvent(KvmTimerEmulateFtraceEvent&& from) noexcept
    : KvmTimerEmulateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmTimerEmulateFtraceEvent& operator=(const KvmTimerEmulateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmTimerEmulateFtraceEvent& operator=(KvmTimerEmulateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmTimerEmulateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmTimerEmulateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmTimerEmulateFtraceEvent*>(
               &_KvmTimerEmulateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(KvmTimerEmulateFtraceEvent& a, KvmTimerEmulateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmTimerEmulateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmTimerEmulateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmTimerEmulateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmTimerEmulateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmTimerEmulateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmTimerEmulateFtraceEvent& from) {
    KvmTimerEmulateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmTimerEmulateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmTimerEmulateFtraceEvent";
  }
  protected:
  explicit KvmTimerEmulateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShouldFireFieldNumber = 1,
    kTimerIdxFieldNumber = 2,
  };
  // optional uint32 should_fire = 1;
  bool has_should_fire() const;
  void clear_should_fire() ;
  ::uint32_t should_fire() const;
  void set_should_fire(::uint32_t value);

  private:
  ::uint32_t _internal_should_fire() const;
  void _internal_set_should_fire(::uint32_t value);

  public:
  // optional int32 timer_idx = 2;
  bool has_timer_idx() const;
  void clear_timer_idx() ;
  ::int32_t timer_idx() const;
  void set_timer_idx(::int32_t value);

  private:
  ::int32_t _internal_timer_idx() const;
  void _internal_set_timer_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmTimerEmulateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t should_fire_;
    ::int32_t timer_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmTimerHrtimerExpireFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmTimerHrtimerExpireFtraceEvent) */ {
 public:
  inline KvmTimerHrtimerExpireFtraceEvent() : KvmTimerHrtimerExpireFtraceEvent(nullptr) {}
  ~KvmTimerHrtimerExpireFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmTimerHrtimerExpireFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmTimerHrtimerExpireFtraceEvent(const KvmTimerHrtimerExpireFtraceEvent& from);
  KvmTimerHrtimerExpireFtraceEvent(KvmTimerHrtimerExpireFtraceEvent&& from) noexcept
    : KvmTimerHrtimerExpireFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmTimerHrtimerExpireFtraceEvent& operator=(const KvmTimerHrtimerExpireFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmTimerHrtimerExpireFtraceEvent& operator=(KvmTimerHrtimerExpireFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmTimerHrtimerExpireFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmTimerHrtimerExpireFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmTimerHrtimerExpireFtraceEvent*>(
               &_KvmTimerHrtimerExpireFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(KvmTimerHrtimerExpireFtraceEvent& a, KvmTimerHrtimerExpireFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmTimerHrtimerExpireFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmTimerHrtimerExpireFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmTimerHrtimerExpireFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmTimerHrtimerExpireFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmTimerHrtimerExpireFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmTimerHrtimerExpireFtraceEvent& from) {
    KvmTimerHrtimerExpireFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmTimerHrtimerExpireFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmTimerHrtimerExpireFtraceEvent";
  }
  protected:
  explicit KvmTimerHrtimerExpireFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimerIdxFieldNumber = 1,
  };
  // optional int32 timer_idx = 1;
  bool has_timer_idx() const;
  void clear_timer_idx() ;
  ::int32_t timer_idx() const;
  void set_timer_idx(::int32_t value);

  private:
  ::int32_t _internal_timer_idx() const;
  void _internal_set_timer_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmTimerHrtimerExpireFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t timer_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmTimerRestoreStateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmTimerRestoreStateFtraceEvent) */ {
 public:
  inline KvmTimerRestoreStateFtraceEvent() : KvmTimerRestoreStateFtraceEvent(nullptr) {}
  ~KvmTimerRestoreStateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmTimerRestoreStateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmTimerRestoreStateFtraceEvent(const KvmTimerRestoreStateFtraceEvent& from);
  KvmTimerRestoreStateFtraceEvent(KvmTimerRestoreStateFtraceEvent&& from) noexcept
    : KvmTimerRestoreStateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmTimerRestoreStateFtraceEvent& operator=(const KvmTimerRestoreStateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmTimerRestoreStateFtraceEvent& operator=(KvmTimerRestoreStateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmTimerRestoreStateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmTimerRestoreStateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmTimerRestoreStateFtraceEvent*>(
               &_KvmTimerRestoreStateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(KvmTimerRestoreStateFtraceEvent& a, KvmTimerRestoreStateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmTimerRestoreStateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmTimerRestoreStateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmTimerRestoreStateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmTimerRestoreStateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmTimerRestoreStateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmTimerRestoreStateFtraceEvent& from) {
    KvmTimerRestoreStateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmTimerRestoreStateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmTimerRestoreStateFtraceEvent";
  }
  protected:
  explicit KvmTimerRestoreStateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlFieldNumber = 1,
    kCvalFieldNumber = 2,
    kTimerIdxFieldNumber = 3,
  };
  // optional uint64 ctl = 1;
  bool has_ctl() const;
  void clear_ctl() ;
  ::uint64_t ctl() const;
  void set_ctl(::uint64_t value);

  private:
  ::uint64_t _internal_ctl() const;
  void _internal_set_ctl(::uint64_t value);

  public:
  // optional uint64 cval = 2;
  bool has_cval() const;
  void clear_cval() ;
  ::uint64_t cval() const;
  void set_cval(::uint64_t value);

  private:
  ::uint64_t _internal_cval() const;
  void _internal_set_cval(::uint64_t value);

  public:
  // optional int32 timer_idx = 3;
  bool has_timer_idx() const;
  void clear_timer_idx() ;
  ::int32_t timer_idx() const;
  void set_timer_idx(::int32_t value);

  private:
  ::int32_t _internal_timer_idx() const;
  void _internal_set_timer_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmTimerRestoreStateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ctl_;
    ::uint64_t cval_;
    ::int32_t timer_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmTimerSaveStateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmTimerSaveStateFtraceEvent) */ {
 public:
  inline KvmTimerSaveStateFtraceEvent() : KvmTimerSaveStateFtraceEvent(nullptr) {}
  ~KvmTimerSaveStateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmTimerSaveStateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmTimerSaveStateFtraceEvent(const KvmTimerSaveStateFtraceEvent& from);
  KvmTimerSaveStateFtraceEvent(KvmTimerSaveStateFtraceEvent&& from) noexcept
    : KvmTimerSaveStateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmTimerSaveStateFtraceEvent& operator=(const KvmTimerSaveStateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmTimerSaveStateFtraceEvent& operator=(KvmTimerSaveStateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmTimerSaveStateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmTimerSaveStateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmTimerSaveStateFtraceEvent*>(
               &_KvmTimerSaveStateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(KvmTimerSaveStateFtraceEvent& a, KvmTimerSaveStateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmTimerSaveStateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmTimerSaveStateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmTimerSaveStateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmTimerSaveStateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmTimerSaveStateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmTimerSaveStateFtraceEvent& from) {
    KvmTimerSaveStateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmTimerSaveStateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmTimerSaveStateFtraceEvent";
  }
  protected:
  explicit KvmTimerSaveStateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlFieldNumber = 1,
    kCvalFieldNumber = 2,
    kTimerIdxFieldNumber = 3,
  };
  // optional uint64 ctl = 1;
  bool has_ctl() const;
  void clear_ctl() ;
  ::uint64_t ctl() const;
  void set_ctl(::uint64_t value);

  private:
  ::uint64_t _internal_ctl() const;
  void _internal_set_ctl(::uint64_t value);

  public:
  // optional uint64 cval = 2;
  bool has_cval() const;
  void clear_cval() ;
  ::uint64_t cval() const;
  void set_cval(::uint64_t value);

  private:
  ::uint64_t _internal_cval() const;
  void _internal_set_cval(::uint64_t value);

  public:
  // optional int32 timer_idx = 3;
  bool has_timer_idx() const;
  void clear_timer_idx() ;
  ::int32_t timer_idx() const;
  void set_timer_idx(::int32_t value);

  private:
  ::int32_t _internal_timer_idx() const;
  void _internal_set_timer_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmTimerSaveStateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ctl_;
    ::uint64_t cval_;
    ::int32_t timer_idx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmTimerUpdateIrqFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmTimerUpdateIrqFtraceEvent) */ {
 public:
  inline KvmTimerUpdateIrqFtraceEvent() : KvmTimerUpdateIrqFtraceEvent(nullptr) {}
  ~KvmTimerUpdateIrqFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmTimerUpdateIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmTimerUpdateIrqFtraceEvent(const KvmTimerUpdateIrqFtraceEvent& from);
  KvmTimerUpdateIrqFtraceEvent(KvmTimerUpdateIrqFtraceEvent&& from) noexcept
    : KvmTimerUpdateIrqFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmTimerUpdateIrqFtraceEvent& operator=(const KvmTimerUpdateIrqFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmTimerUpdateIrqFtraceEvent& operator=(KvmTimerUpdateIrqFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmTimerUpdateIrqFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmTimerUpdateIrqFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmTimerUpdateIrqFtraceEvent*>(
               &_KvmTimerUpdateIrqFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(KvmTimerUpdateIrqFtraceEvent& a, KvmTimerUpdateIrqFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmTimerUpdateIrqFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmTimerUpdateIrqFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmTimerUpdateIrqFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmTimerUpdateIrqFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmTimerUpdateIrqFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmTimerUpdateIrqFtraceEvent& from) {
    KvmTimerUpdateIrqFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmTimerUpdateIrqFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmTimerUpdateIrqFtraceEvent";
  }
  protected:
  explicit KvmTimerUpdateIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqFieldNumber = 1,
    kLevelFieldNumber = 2,
    kVcpuIdFieldNumber = 3,
  };
  // optional uint32 irq = 1;
  bool has_irq() const;
  void clear_irq() ;
  ::uint32_t irq() const;
  void set_irq(::uint32_t value);

  private:
  ::uint32_t _internal_irq() const;
  void _internal_set_irq(::uint32_t value);

  public:
  // optional int32 level = 2;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // optional uint64 vcpu_id = 3;
  bool has_vcpu_id() const;
  void clear_vcpu_id() ;
  ::uint64_t vcpu_id() const;
  void set_vcpu_id(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_id() const;
  void _internal_set_vcpu_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmTimerUpdateIrqFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t irq_;
    ::int32_t level_;
    ::uint64_t vcpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmToggleCacheFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmToggleCacheFtraceEvent) */ {
 public:
  inline KvmToggleCacheFtraceEvent() : KvmToggleCacheFtraceEvent(nullptr) {}
  ~KvmToggleCacheFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmToggleCacheFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmToggleCacheFtraceEvent(const KvmToggleCacheFtraceEvent& from);
  KvmToggleCacheFtraceEvent(KvmToggleCacheFtraceEvent&& from) noexcept
    : KvmToggleCacheFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmToggleCacheFtraceEvent& operator=(const KvmToggleCacheFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmToggleCacheFtraceEvent& operator=(KvmToggleCacheFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmToggleCacheFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmToggleCacheFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmToggleCacheFtraceEvent*>(
               &_KvmToggleCacheFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(KvmToggleCacheFtraceEvent& a, KvmToggleCacheFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmToggleCacheFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmToggleCacheFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmToggleCacheFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmToggleCacheFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmToggleCacheFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmToggleCacheFtraceEvent& from) {
    KvmToggleCacheFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmToggleCacheFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmToggleCacheFtraceEvent";
  }
  protected:
  explicit KvmToggleCacheFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcpuPcFieldNumber = 2,
    kNowFieldNumber = 1,
    kWasFieldNumber = 3,
  };
  // optional uint64 vcpu_pc = 2;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // optional uint32 now = 1;
  bool has_now() const;
  void clear_now() ;
  ::uint32_t now() const;
  void set_now(::uint32_t value);

  private:
  ::uint32_t _internal_now() const;
  void _internal_set_now(::uint32_t value);

  public:
  // optional uint32 was = 3;
  bool has_was() const;
  void clear_was() ;
  ::uint32_t was() const;
  void set_was(::uint32_t value);

  private:
  ::uint32_t _internal_was() const;
  void _internal_set_was(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmToggleCacheFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t vcpu_pc_;
    ::uint32_t now_;
    ::uint32_t was_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmUnmapHvaRangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmUnmapHvaRangeFtraceEvent) */ {
 public:
  inline KvmUnmapHvaRangeFtraceEvent() : KvmUnmapHvaRangeFtraceEvent(nullptr) {}
  ~KvmUnmapHvaRangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmUnmapHvaRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmUnmapHvaRangeFtraceEvent(const KvmUnmapHvaRangeFtraceEvent& from);
  KvmUnmapHvaRangeFtraceEvent(KvmUnmapHvaRangeFtraceEvent&& from) noexcept
    : KvmUnmapHvaRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmUnmapHvaRangeFtraceEvent& operator=(const KvmUnmapHvaRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmUnmapHvaRangeFtraceEvent& operator=(KvmUnmapHvaRangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmUnmapHvaRangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmUnmapHvaRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmUnmapHvaRangeFtraceEvent*>(
               &_KvmUnmapHvaRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(KvmUnmapHvaRangeFtraceEvent& a, KvmUnmapHvaRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmUnmapHvaRangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmUnmapHvaRangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmUnmapHvaRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmUnmapHvaRangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmUnmapHvaRangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmUnmapHvaRangeFtraceEvent& from) {
    KvmUnmapHvaRangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmUnmapHvaRangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmUnmapHvaRangeFtraceEvent";
  }
  protected:
  explicit KvmUnmapHvaRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndFieldNumber = 1,
    kStartFieldNumber = 2,
  };
  // optional uint64 end = 1;
  bool has_end() const;
  void clear_end() ;
  ::uint64_t end() const;
  void set_end(::uint64_t value);

  private:
  ::uint64_t _internal_end() const;
  void _internal_set_end(::uint64_t value);

  public:
  // optional uint64 start = 2;
  bool has_start() const;
  void clear_start() ;
  ::uint64_t start() const;
  void set_start(::uint64_t value);

  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmUnmapHvaRangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t end_;
    ::uint64_t start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmUserspaceExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmUserspaceExitFtraceEvent) */ {
 public:
  inline KvmUserspaceExitFtraceEvent() : KvmUserspaceExitFtraceEvent(nullptr) {}
  ~KvmUserspaceExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmUserspaceExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmUserspaceExitFtraceEvent(const KvmUserspaceExitFtraceEvent& from);
  KvmUserspaceExitFtraceEvent(KvmUserspaceExitFtraceEvent&& from) noexcept
    : KvmUserspaceExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmUserspaceExitFtraceEvent& operator=(const KvmUserspaceExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmUserspaceExitFtraceEvent& operator=(KvmUserspaceExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmUserspaceExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmUserspaceExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmUserspaceExitFtraceEvent*>(
               &_KvmUserspaceExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(KvmUserspaceExitFtraceEvent& a, KvmUserspaceExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmUserspaceExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmUserspaceExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmUserspaceExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmUserspaceExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmUserspaceExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmUserspaceExitFtraceEvent& from) {
    KvmUserspaceExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmUserspaceExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmUserspaceExitFtraceEvent";
  }
  protected:
  explicit KvmUserspaceExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional uint32 reason = 1;
  bool has_reason() const;
  void clear_reason() ;
  ::uint32_t reason() const;
  void set_reason(::uint32_t value);

  private:
  ::uint32_t _internal_reason() const;
  void _internal_set_reason(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmUserspaceExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmVcpuWakeupFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmVcpuWakeupFtraceEvent) */ {
 public:
  inline KvmVcpuWakeupFtraceEvent() : KvmVcpuWakeupFtraceEvent(nullptr) {}
  ~KvmVcpuWakeupFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmVcpuWakeupFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmVcpuWakeupFtraceEvent(const KvmVcpuWakeupFtraceEvent& from);
  KvmVcpuWakeupFtraceEvent(KvmVcpuWakeupFtraceEvent&& from) noexcept
    : KvmVcpuWakeupFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmVcpuWakeupFtraceEvent& operator=(const KvmVcpuWakeupFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmVcpuWakeupFtraceEvent& operator=(KvmVcpuWakeupFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmVcpuWakeupFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmVcpuWakeupFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmVcpuWakeupFtraceEvent*>(
               &_KvmVcpuWakeupFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(KvmVcpuWakeupFtraceEvent& a, KvmVcpuWakeupFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmVcpuWakeupFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmVcpuWakeupFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmVcpuWakeupFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmVcpuWakeupFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmVcpuWakeupFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmVcpuWakeupFtraceEvent& from) {
    KvmVcpuWakeupFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmVcpuWakeupFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmVcpuWakeupFtraceEvent";
  }
  protected:
  explicit KvmVcpuWakeupFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNsFieldNumber = 1,
    kValidFieldNumber = 2,
    kWaitedFieldNumber = 3,
  };
  // optional uint64 ns = 1;
  bool has_ns() const;
  void clear_ns() ;
  ::uint64_t ns() const;
  void set_ns(::uint64_t value);

  private:
  ::uint64_t _internal_ns() const;
  void _internal_set_ns(::uint64_t value);

  public:
  // optional uint32 valid = 2;
  bool has_valid() const;
  void clear_valid() ;
  ::uint32_t valid() const;
  void set_valid(::uint32_t value);

  private:
  ::uint32_t _internal_valid() const;
  void _internal_set_valid(::uint32_t value);

  public:
  // optional uint32 waited = 3;
  bool has_waited() const;
  void clear_waited() ;
  ::uint32_t waited() const;
  void set_waited(::uint32_t value);

  private:
  ::uint32_t _internal_waited() const;
  void _internal_set_waited(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmVcpuWakeupFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ns_;
    ::uint32_t valid_;
    ::uint32_t waited_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class KvmWfxArm64FtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KvmWfxArm64FtraceEvent) */ {
 public:
  inline KvmWfxArm64FtraceEvent() : KvmWfxArm64FtraceEvent(nullptr) {}
  ~KvmWfxArm64FtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KvmWfxArm64FtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvmWfxArm64FtraceEvent(const KvmWfxArm64FtraceEvent& from);
  KvmWfxArm64FtraceEvent(KvmWfxArm64FtraceEvent&& from) noexcept
    : KvmWfxArm64FtraceEvent() {
    *this = ::std::move(from);
  }

  inline KvmWfxArm64FtraceEvent& operator=(const KvmWfxArm64FtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvmWfxArm64FtraceEvent& operator=(KvmWfxArm64FtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvmWfxArm64FtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvmWfxArm64FtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KvmWfxArm64FtraceEvent*>(
               &_KvmWfxArm64FtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(KvmWfxArm64FtraceEvent& a, KvmWfxArm64FtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KvmWfxArm64FtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvmWfxArm64FtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvmWfxArm64FtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvmWfxArm64FtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvmWfxArm64FtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvmWfxArm64FtraceEvent& from) {
    KvmWfxArm64FtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvmWfxArm64FtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KvmWfxArm64FtraceEvent";
  }
  protected:
  explicit KvmWfxArm64FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVcpuPcFieldNumber = 2,
    kIsWfeFieldNumber = 1,
  };
  // optional uint64 vcpu_pc = 2;
  bool has_vcpu_pc() const;
  void clear_vcpu_pc() ;
  ::uint64_t vcpu_pc() const;
  void set_vcpu_pc(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_pc() const;
  void _internal_set_vcpu_pc(::uint64_t value);

  public:
  // optional uint32 is_wfe = 1;
  bool has_is_wfe() const;
  void clear_is_wfe() ;
  ::uint32_t is_wfe() const;
  void set_is_wfe(::uint32_t value);

  private:
  ::uint32_t _internal_is_wfe() const;
  void _internal_set_is_wfe(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KvmWfxArm64FtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t vcpu_pc_;
    ::uint32_t is_wfe_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class TrapRegFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TrapRegFtraceEvent) */ {
 public:
  inline TrapRegFtraceEvent() : TrapRegFtraceEvent(nullptr) {}
  ~TrapRegFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrapRegFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrapRegFtraceEvent(const TrapRegFtraceEvent& from);
  TrapRegFtraceEvent(TrapRegFtraceEvent&& from) noexcept
    : TrapRegFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TrapRegFtraceEvent& operator=(const TrapRegFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrapRegFtraceEvent& operator=(TrapRegFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrapRegFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrapRegFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TrapRegFtraceEvent*>(
               &_TrapRegFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TrapRegFtraceEvent& a, TrapRegFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TrapRegFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrapRegFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrapRegFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrapRegFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrapRegFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrapRegFtraceEvent& from) {
    TrapRegFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrapRegFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TrapRegFtraceEvent";
  }
  protected:
  explicit TrapRegFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnFieldNumber = 1,
    kIsWriteFieldNumber = 2,
    kRegFieldNumber = 3,
    kWriteValueFieldNumber = 4,
  };
  // optional string fn = 1;
  bool has_fn() const;
  void clear_fn() ;
  const std::string& fn() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fn(Arg_&& arg, Args_... args);
  std::string* mutable_fn();
  PROTOBUF_NODISCARD std::string* release_fn();
  void set_allocated_fn(std::string* ptr);

  private:
  const std::string& _internal_fn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fn(
      const std::string& value);
  std::string* _internal_mutable_fn();

  public:
  // optional uint32 is_write = 2;
  bool has_is_write() const;
  void clear_is_write() ;
  ::uint32_t is_write() const;
  void set_is_write(::uint32_t value);

  private:
  ::uint32_t _internal_is_write() const;
  void _internal_set_is_write(::uint32_t value);

  public:
  // optional int32 reg = 3;
  bool has_reg() const;
  void clear_reg() ;
  ::int32_t reg() const;
  void set_reg(::int32_t value);

  private:
  ::int32_t _internal_reg() const;
  void _internal_set_reg(::int32_t value);

  public:
  // optional uint64 write_value = 4;
  bool has_write_value() const;
  void clear_write_value() ;
  ::uint64_t write_value() const;
  void set_write_value(::uint64_t value);

  private:
  ::uint64_t _internal_write_value() const;
  void _internal_set_write_value(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TrapRegFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fn_;
    ::uint32_t is_write_;
    ::int32_t reg_;
    ::uint64_t write_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};// -------------------------------------------------------------------

class VgicUpdateIrqPendingFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VgicUpdateIrqPendingFtraceEvent) */ {
 public:
  inline VgicUpdateIrqPendingFtraceEvent() : VgicUpdateIrqPendingFtraceEvent(nullptr) {}
  ~VgicUpdateIrqPendingFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VgicUpdateIrqPendingFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VgicUpdateIrqPendingFtraceEvent(const VgicUpdateIrqPendingFtraceEvent& from);
  VgicUpdateIrqPendingFtraceEvent(VgicUpdateIrqPendingFtraceEvent&& from) noexcept
    : VgicUpdateIrqPendingFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VgicUpdateIrqPendingFtraceEvent& operator=(const VgicUpdateIrqPendingFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VgicUpdateIrqPendingFtraceEvent& operator=(VgicUpdateIrqPendingFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VgicUpdateIrqPendingFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VgicUpdateIrqPendingFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VgicUpdateIrqPendingFtraceEvent*>(
               &_VgicUpdateIrqPendingFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(VgicUpdateIrqPendingFtraceEvent& a, VgicUpdateIrqPendingFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VgicUpdateIrqPendingFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VgicUpdateIrqPendingFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VgicUpdateIrqPendingFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VgicUpdateIrqPendingFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VgicUpdateIrqPendingFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VgicUpdateIrqPendingFtraceEvent& from) {
    VgicUpdateIrqPendingFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VgicUpdateIrqPendingFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VgicUpdateIrqPendingFtraceEvent";
  }
  protected:
  explicit VgicUpdateIrqPendingFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIrqFieldNumber = 1,
    kLevelFieldNumber = 2,
    kVcpuIdFieldNumber = 3,
  };
  // optional uint32 irq = 1;
  bool has_irq() const;
  void clear_irq() ;
  ::uint32_t irq() const;
  void set_irq(::uint32_t value);

  private:
  ::uint32_t _internal_irq() const;
  void _internal_set_irq(::uint32_t value);

  public:
  // optional uint32 level = 2;
  bool has_level() const;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // optional uint64 vcpu_id = 3;
  bool has_vcpu_id() const;
  void clear_vcpu_id() ;
  ::uint64_t vcpu_id() const;
  void set_vcpu_id(::uint64_t value);

  private:
  ::uint64_t _internal_vcpu_id() const;
  void _internal_set_vcpu_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VgicUpdateIrqPendingFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t irq_;
    ::uint32_t level_;
    ::uint64_t vcpu_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KvmAccessFaultFtraceEvent

// optional uint64 ipa = 1;
inline bool KvmAccessFaultFtraceEvent::has_ipa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmAccessFaultFtraceEvent::clear_ipa() {
  _impl_.ipa_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmAccessFaultFtraceEvent::ipa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAccessFaultFtraceEvent.ipa)
  return _internal_ipa();
}
inline void KvmAccessFaultFtraceEvent::set_ipa(::uint64_t value) {
  _internal_set_ipa(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAccessFaultFtraceEvent.ipa)
}
inline ::uint64_t KvmAccessFaultFtraceEvent::_internal_ipa() const {
  return _impl_.ipa_;
}
inline void KvmAccessFaultFtraceEvent::_internal_set_ipa(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ipa_ = value;
}

// -------------------------------------------------------------------

// KvmAckIrqFtraceEvent

// optional uint32 irqchip = 1;
inline bool KvmAckIrqFtraceEvent::has_irqchip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmAckIrqFtraceEvent::clear_irqchip() {
  _impl_.irqchip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmAckIrqFtraceEvent::irqchip() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAckIrqFtraceEvent.irqchip)
  return _internal_irqchip();
}
inline void KvmAckIrqFtraceEvent::set_irqchip(::uint32_t value) {
  _internal_set_irqchip(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAckIrqFtraceEvent.irqchip)
}
inline ::uint32_t KvmAckIrqFtraceEvent::_internal_irqchip() const {
  return _impl_.irqchip_;
}
inline void KvmAckIrqFtraceEvent::_internal_set_irqchip(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.irqchip_ = value;
}

// optional uint32 pin = 2;
inline bool KvmAckIrqFtraceEvent::has_pin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmAckIrqFtraceEvent::clear_pin() {
  _impl_.pin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmAckIrqFtraceEvent::pin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAckIrqFtraceEvent.pin)
  return _internal_pin();
}
inline void KvmAckIrqFtraceEvent::set_pin(::uint32_t value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAckIrqFtraceEvent.pin)
}
inline ::uint32_t KvmAckIrqFtraceEvent::_internal_pin() const {
  return _impl_.pin_;
}
inline void KvmAckIrqFtraceEvent::_internal_set_pin(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pin_ = value;
}

// -------------------------------------------------------------------

// KvmAgeHvaFtraceEvent

// optional uint64 end = 1;
inline bool KvmAgeHvaFtraceEvent::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmAgeHvaFtraceEvent::clear_end() {
  _impl_.end_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmAgeHvaFtraceEvent::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAgeHvaFtraceEvent.end)
  return _internal_end();
}
inline void KvmAgeHvaFtraceEvent::set_end(::uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAgeHvaFtraceEvent.end)
}
inline ::uint64_t KvmAgeHvaFtraceEvent::_internal_end() const {
  return _impl_.end_;
}
inline void KvmAgeHvaFtraceEvent::_internal_set_end(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.end_ = value;
}

// optional uint64 start = 2;
inline bool KvmAgeHvaFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmAgeHvaFtraceEvent::clear_start() {
  _impl_.start_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmAgeHvaFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAgeHvaFtraceEvent.start)
  return _internal_start();
}
inline void KvmAgeHvaFtraceEvent::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAgeHvaFtraceEvent.start)
}
inline ::uint64_t KvmAgeHvaFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void KvmAgeHvaFtraceEvent::_internal_set_start(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_ = value;
}

// -------------------------------------------------------------------

// KvmAgePageFtraceEvent

// optional uint64 gfn = 1;
inline bool KvmAgePageFtraceEvent::has_gfn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmAgePageFtraceEvent::clear_gfn() {
  _impl_.gfn_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmAgePageFtraceEvent::gfn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAgePageFtraceEvent.gfn)
  return _internal_gfn();
}
inline void KvmAgePageFtraceEvent::set_gfn(::uint64_t value) {
  _internal_set_gfn(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAgePageFtraceEvent.gfn)
}
inline ::uint64_t KvmAgePageFtraceEvent::_internal_gfn() const {
  return _impl_.gfn_;
}
inline void KvmAgePageFtraceEvent::_internal_set_gfn(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gfn_ = value;
}

// optional uint64 hva = 2;
inline bool KvmAgePageFtraceEvent::has_hva() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmAgePageFtraceEvent::clear_hva() {
  _impl_.hva_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmAgePageFtraceEvent::hva() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAgePageFtraceEvent.hva)
  return _internal_hva();
}
inline void KvmAgePageFtraceEvent::set_hva(::uint64_t value) {
  _internal_set_hva(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAgePageFtraceEvent.hva)
}
inline ::uint64_t KvmAgePageFtraceEvent::_internal_hva() const {
  return _impl_.hva_;
}
inline void KvmAgePageFtraceEvent::_internal_set_hva(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hva_ = value;
}

// optional uint32 level = 3;
inline bool KvmAgePageFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmAgePageFtraceEvent::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KvmAgePageFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAgePageFtraceEvent.level)
  return _internal_level();
}
inline void KvmAgePageFtraceEvent::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAgePageFtraceEvent.level)
}
inline ::uint32_t KvmAgePageFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void KvmAgePageFtraceEvent::_internal_set_level(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}

// optional uint32 referenced = 4;
inline bool KvmAgePageFtraceEvent::has_referenced() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KvmAgePageFtraceEvent::clear_referenced() {
  _impl_.referenced_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t KvmAgePageFtraceEvent::referenced() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmAgePageFtraceEvent.referenced)
  return _internal_referenced();
}
inline void KvmAgePageFtraceEvent::set_referenced(::uint32_t value) {
  _internal_set_referenced(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmAgePageFtraceEvent.referenced)
}
inline ::uint32_t KvmAgePageFtraceEvent::_internal_referenced() const {
  return _impl_.referenced_;
}
inline void KvmAgePageFtraceEvent::_internal_set_referenced(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.referenced_ = value;
}

// -------------------------------------------------------------------

// KvmArmClearDebugFtraceEvent

// optional uint32 guest_debug = 1;
inline bool KvmArmClearDebugFtraceEvent::has_guest_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmArmClearDebugFtraceEvent::clear_guest_debug() {
  _impl_.guest_debug_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmArmClearDebugFtraceEvent::guest_debug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmClearDebugFtraceEvent.guest_debug)
  return _internal_guest_debug();
}
inline void KvmArmClearDebugFtraceEvent::set_guest_debug(::uint32_t value) {
  _internal_set_guest_debug(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmClearDebugFtraceEvent.guest_debug)
}
inline ::uint32_t KvmArmClearDebugFtraceEvent::_internal_guest_debug() const {
  return _impl_.guest_debug_;
}
inline void KvmArmClearDebugFtraceEvent::_internal_set_guest_debug(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guest_debug_ = value;
}

// -------------------------------------------------------------------

// KvmArmSetDreg32FtraceEvent

// optional string name = 1;
inline bool KvmArmSetDreg32FtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmArmSetDreg32FtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KvmArmSetDreg32FtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmSetDreg32FtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KvmArmSetDreg32FtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmSetDreg32FtraceEvent.name)
}
inline std::string* KvmArmSetDreg32FtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.KvmArmSetDreg32FtraceEvent.name)
  return _s;
}
inline const std::string& KvmArmSetDreg32FtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void KvmArmSetDreg32FtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* KvmArmSetDreg32FtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* KvmArmSetDreg32FtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.KvmArmSetDreg32FtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void KvmArmSetDreg32FtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.KvmArmSetDreg32FtraceEvent.name)
}

// optional uint32 value = 2;
inline bool KvmArmSetDreg32FtraceEvent::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmArmSetDreg32FtraceEvent::clear_value() {
  _impl_.value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmArmSetDreg32FtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmSetDreg32FtraceEvent.value)
  return _internal_value();
}
inline void KvmArmSetDreg32FtraceEvent::set_value(::uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmSetDreg32FtraceEvent.value)
}
inline ::uint32_t KvmArmSetDreg32FtraceEvent::_internal_value() const {
  return _impl_.value_;
}
inline void KvmArmSetDreg32FtraceEvent::_internal_set_value(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// KvmArmSetRegsetFtraceEvent

// optional int32 len = 1;
inline bool KvmArmSetRegsetFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmArmSetRegsetFtraceEvent::clear_len() {
  _impl_.len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmArmSetRegsetFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmSetRegsetFtraceEvent.len)
  return _internal_len();
}
inline void KvmArmSetRegsetFtraceEvent::set_len(::int32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmSetRegsetFtraceEvent.len)
}
inline ::int32_t KvmArmSetRegsetFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void KvmArmSetRegsetFtraceEvent::_internal_set_len(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.len_ = value;
}

// optional string name = 2;
inline bool KvmArmSetRegsetFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmArmSetRegsetFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KvmArmSetRegsetFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmSetRegsetFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KvmArmSetRegsetFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmSetRegsetFtraceEvent.name)
}
inline std::string* KvmArmSetRegsetFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.KvmArmSetRegsetFtraceEvent.name)
  return _s;
}
inline const std::string& KvmArmSetRegsetFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void KvmArmSetRegsetFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* KvmArmSetRegsetFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* KvmArmSetRegsetFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.KvmArmSetRegsetFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void KvmArmSetRegsetFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.KvmArmSetRegsetFtraceEvent.name)
}

// -------------------------------------------------------------------

// KvmArmSetupDebugFtraceEvent

// optional uint32 guest_debug = 1;
inline bool KvmArmSetupDebugFtraceEvent::has_guest_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmArmSetupDebugFtraceEvent::clear_guest_debug() {
  _impl_.guest_debug_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmArmSetupDebugFtraceEvent::guest_debug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmSetupDebugFtraceEvent.guest_debug)
  return _internal_guest_debug();
}
inline void KvmArmSetupDebugFtraceEvent::set_guest_debug(::uint32_t value) {
  _internal_set_guest_debug(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmSetupDebugFtraceEvent.guest_debug)
}
inline ::uint32_t KvmArmSetupDebugFtraceEvent::_internal_guest_debug() const {
  return _impl_.guest_debug_;
}
inline void KvmArmSetupDebugFtraceEvent::_internal_set_guest_debug(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guest_debug_ = value;
}

// optional uint64 vcpu = 2;
inline bool KvmArmSetupDebugFtraceEvent::has_vcpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmArmSetupDebugFtraceEvent::clear_vcpu() {
  _impl_.vcpu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmArmSetupDebugFtraceEvent::vcpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmArmSetupDebugFtraceEvent.vcpu)
  return _internal_vcpu();
}
inline void KvmArmSetupDebugFtraceEvent::set_vcpu(::uint64_t value) {
  _internal_set_vcpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmArmSetupDebugFtraceEvent.vcpu)
}
inline ::uint64_t KvmArmSetupDebugFtraceEvent::_internal_vcpu() const {
  return _impl_.vcpu_;
}
inline void KvmArmSetupDebugFtraceEvent::_internal_set_vcpu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcpu_ = value;
}

// -------------------------------------------------------------------

// KvmEntryFtraceEvent

// optional uint64 vcpu_pc = 1;
inline bool KvmEntryFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmEntryFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmEntryFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmEntryFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmEntryFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmEntryFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmEntryFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmEntryFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmExitFtraceEvent

// optional uint32 esr_ec = 1;
inline bool KvmExitFtraceEvent::has_esr_ec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmExitFtraceEvent::clear_esr_ec() {
  _impl_.esr_ec_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmExitFtraceEvent::esr_ec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmExitFtraceEvent.esr_ec)
  return _internal_esr_ec();
}
inline void KvmExitFtraceEvent::set_esr_ec(::uint32_t value) {
  _internal_set_esr_ec(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmExitFtraceEvent.esr_ec)
}
inline ::uint32_t KvmExitFtraceEvent::_internal_esr_ec() const {
  return _impl_.esr_ec_;
}
inline void KvmExitFtraceEvent::_internal_set_esr_ec(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.esr_ec_ = value;
}

// optional int32 ret = 2;
inline bool KvmExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmExitFtraceEvent.ret)
  return _internal_ret();
}
inline void KvmExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmExitFtraceEvent.ret)
}
inline ::int32_t KvmExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void KvmExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}

// optional uint64 vcpu_pc = 3;
inline bool KvmExitFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmExitFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KvmExitFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmExitFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmExitFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmExitFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmExitFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmExitFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmFpuFtraceEvent

// optional uint32 load = 1;
inline bool KvmFpuFtraceEvent::has_load() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmFpuFtraceEvent::clear_load() {
  _impl_.load_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmFpuFtraceEvent::load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmFpuFtraceEvent.load)
  return _internal_load();
}
inline void KvmFpuFtraceEvent::set_load(::uint32_t value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmFpuFtraceEvent.load)
}
inline ::uint32_t KvmFpuFtraceEvent::_internal_load() const {
  return _impl_.load_;
}
inline void KvmFpuFtraceEvent::_internal_set_load(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.load_ = value;
}

// -------------------------------------------------------------------

// KvmGetTimerMapFtraceEvent

// optional int32 direct_ptimer = 1;
inline bool KvmGetTimerMapFtraceEvent::has_direct_ptimer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmGetTimerMapFtraceEvent::clear_direct_ptimer() {
  _impl_.direct_ptimer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t KvmGetTimerMapFtraceEvent::direct_ptimer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGetTimerMapFtraceEvent.direct_ptimer)
  return _internal_direct_ptimer();
}
inline void KvmGetTimerMapFtraceEvent::set_direct_ptimer(::int32_t value) {
  _internal_set_direct_ptimer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGetTimerMapFtraceEvent.direct_ptimer)
}
inline ::int32_t KvmGetTimerMapFtraceEvent::_internal_direct_ptimer() const {
  return _impl_.direct_ptimer_;
}
inline void KvmGetTimerMapFtraceEvent::_internal_set_direct_ptimer(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.direct_ptimer_ = value;
}

// optional int32 direct_vtimer = 2;
inline bool KvmGetTimerMapFtraceEvent::has_direct_vtimer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmGetTimerMapFtraceEvent::clear_direct_vtimer() {
  _impl_.direct_vtimer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmGetTimerMapFtraceEvent::direct_vtimer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGetTimerMapFtraceEvent.direct_vtimer)
  return _internal_direct_vtimer();
}
inline void KvmGetTimerMapFtraceEvent::set_direct_vtimer(::int32_t value) {
  _internal_set_direct_vtimer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGetTimerMapFtraceEvent.direct_vtimer)
}
inline ::int32_t KvmGetTimerMapFtraceEvent::_internal_direct_vtimer() const {
  return _impl_.direct_vtimer_;
}
inline void KvmGetTimerMapFtraceEvent::_internal_set_direct_vtimer(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.direct_vtimer_ = value;
}

// optional int32 emul_ptimer = 3;
inline bool KvmGetTimerMapFtraceEvent::has_emul_ptimer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KvmGetTimerMapFtraceEvent::clear_emul_ptimer() {
  _impl_.emul_ptimer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t KvmGetTimerMapFtraceEvent::emul_ptimer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGetTimerMapFtraceEvent.emul_ptimer)
  return _internal_emul_ptimer();
}
inline void KvmGetTimerMapFtraceEvent::set_emul_ptimer(::int32_t value) {
  _internal_set_emul_ptimer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGetTimerMapFtraceEvent.emul_ptimer)
}
inline ::int32_t KvmGetTimerMapFtraceEvent::_internal_emul_ptimer() const {
  return _impl_.emul_ptimer_;
}
inline void KvmGetTimerMapFtraceEvent::_internal_set_emul_ptimer(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.emul_ptimer_ = value;
}

// optional uint64 vcpu_id = 4;
inline bool KvmGetTimerMapFtraceEvent::has_vcpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmGetTimerMapFtraceEvent::clear_vcpu_id() {
  _impl_.vcpu_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KvmGetTimerMapFtraceEvent::vcpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGetTimerMapFtraceEvent.vcpu_id)
  return _internal_vcpu_id();
}
inline void KvmGetTimerMapFtraceEvent::set_vcpu_id(::uint64_t value) {
  _internal_set_vcpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGetTimerMapFtraceEvent.vcpu_id)
}
inline ::uint64_t KvmGetTimerMapFtraceEvent::_internal_vcpu_id() const {
  return _impl_.vcpu_id_;
}
inline void KvmGetTimerMapFtraceEvent::_internal_set_vcpu_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcpu_id_ = value;
}

// -------------------------------------------------------------------

// KvmGuestFaultFtraceEvent

// optional uint64 hsr = 1;
inline bool KvmGuestFaultFtraceEvent::has_hsr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmGuestFaultFtraceEvent::clear_hsr() {
  _impl_.hsr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmGuestFaultFtraceEvent::hsr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGuestFaultFtraceEvent.hsr)
  return _internal_hsr();
}
inline void KvmGuestFaultFtraceEvent::set_hsr(::uint64_t value) {
  _internal_set_hsr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGuestFaultFtraceEvent.hsr)
}
inline ::uint64_t KvmGuestFaultFtraceEvent::_internal_hsr() const {
  return _impl_.hsr_;
}
inline void KvmGuestFaultFtraceEvent::_internal_set_hsr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hsr_ = value;
}

// optional uint64 hxfar = 2;
inline bool KvmGuestFaultFtraceEvent::has_hxfar() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmGuestFaultFtraceEvent::clear_hxfar() {
  _impl_.hxfar_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmGuestFaultFtraceEvent::hxfar() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGuestFaultFtraceEvent.hxfar)
  return _internal_hxfar();
}
inline void KvmGuestFaultFtraceEvent::set_hxfar(::uint64_t value) {
  _internal_set_hxfar(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGuestFaultFtraceEvent.hxfar)
}
inline ::uint64_t KvmGuestFaultFtraceEvent::_internal_hxfar() const {
  return _impl_.hxfar_;
}
inline void KvmGuestFaultFtraceEvent::_internal_set_hxfar(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hxfar_ = value;
}

// optional uint64 ipa = 3;
inline bool KvmGuestFaultFtraceEvent::has_ipa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmGuestFaultFtraceEvent::clear_ipa() {
  _impl_.ipa_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KvmGuestFaultFtraceEvent::ipa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGuestFaultFtraceEvent.ipa)
  return _internal_ipa();
}
inline void KvmGuestFaultFtraceEvent::set_ipa(::uint64_t value) {
  _internal_set_ipa(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGuestFaultFtraceEvent.ipa)
}
inline ::uint64_t KvmGuestFaultFtraceEvent::_internal_ipa() const {
  return _impl_.ipa_;
}
inline void KvmGuestFaultFtraceEvent::_internal_set_ipa(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ipa_ = value;
}

// optional uint64 vcpu_pc = 4;
inline bool KvmGuestFaultFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KvmGuestFaultFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t KvmGuestFaultFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmGuestFaultFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmGuestFaultFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmGuestFaultFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmGuestFaultFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmGuestFaultFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmHandleSysRegFtraceEvent

// optional uint64 hsr = 1;
inline bool KvmHandleSysRegFtraceEvent::has_hsr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmHandleSysRegFtraceEvent::clear_hsr() {
  _impl_.hsr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmHandleSysRegFtraceEvent::hsr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmHandleSysRegFtraceEvent.hsr)
  return _internal_hsr();
}
inline void KvmHandleSysRegFtraceEvent::set_hsr(::uint64_t value) {
  _internal_set_hsr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmHandleSysRegFtraceEvent.hsr)
}
inline ::uint64_t KvmHandleSysRegFtraceEvent::_internal_hsr() const {
  return _impl_.hsr_;
}
inline void KvmHandleSysRegFtraceEvent::_internal_set_hsr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hsr_ = value;
}

// -------------------------------------------------------------------

// KvmHvcArm64FtraceEvent

// optional uint64 imm = 1;
inline bool KvmHvcArm64FtraceEvent::has_imm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmHvcArm64FtraceEvent::clear_imm() {
  _impl_.imm_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmHvcArm64FtraceEvent::imm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmHvcArm64FtraceEvent.imm)
  return _internal_imm();
}
inline void KvmHvcArm64FtraceEvent::set_imm(::uint64_t value) {
  _internal_set_imm(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmHvcArm64FtraceEvent.imm)
}
inline ::uint64_t KvmHvcArm64FtraceEvent::_internal_imm() const {
  return _impl_.imm_;
}
inline void KvmHvcArm64FtraceEvent::_internal_set_imm(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.imm_ = value;
}

// optional uint64 r0 = 2;
inline bool KvmHvcArm64FtraceEvent::has_r0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmHvcArm64FtraceEvent::clear_r0() {
  _impl_.r0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmHvcArm64FtraceEvent::r0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmHvcArm64FtraceEvent.r0)
  return _internal_r0();
}
inline void KvmHvcArm64FtraceEvent::set_r0(::uint64_t value) {
  _internal_set_r0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmHvcArm64FtraceEvent.r0)
}
inline ::uint64_t KvmHvcArm64FtraceEvent::_internal_r0() const {
  return _impl_.r0_;
}
inline void KvmHvcArm64FtraceEvent::_internal_set_r0(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.r0_ = value;
}

// optional uint64 vcpu_pc = 3;
inline bool KvmHvcArm64FtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmHvcArm64FtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KvmHvcArm64FtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmHvcArm64FtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmHvcArm64FtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmHvcArm64FtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmHvcArm64FtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmHvcArm64FtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmIrqLineFtraceEvent

// optional int32 irq_num = 1;
inline bool KvmIrqLineFtraceEvent::has_irq_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmIrqLineFtraceEvent::clear_irq_num() {
  _impl_.irq_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t KvmIrqLineFtraceEvent::irq_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmIrqLineFtraceEvent.irq_num)
  return _internal_irq_num();
}
inline void KvmIrqLineFtraceEvent::set_irq_num(::int32_t value) {
  _internal_set_irq_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmIrqLineFtraceEvent.irq_num)
}
inline ::int32_t KvmIrqLineFtraceEvent::_internal_irq_num() const {
  return _impl_.irq_num_;
}
inline void KvmIrqLineFtraceEvent::_internal_set_irq_num(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.irq_num_ = value;
}

// optional int32 level = 2;
inline bool KvmIrqLineFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmIrqLineFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmIrqLineFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmIrqLineFtraceEvent.level)
  return _internal_level();
}
inline void KvmIrqLineFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmIrqLineFtraceEvent.level)
}
inline ::int32_t KvmIrqLineFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void KvmIrqLineFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.level_ = value;
}

// optional uint32 type = 3;
inline bool KvmIrqLineFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmIrqLineFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KvmIrqLineFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmIrqLineFtraceEvent.type)
  return _internal_type();
}
inline void KvmIrqLineFtraceEvent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmIrqLineFtraceEvent.type)
}
inline ::uint32_t KvmIrqLineFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void KvmIrqLineFtraceEvent::_internal_set_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional int32 vcpu_idx = 4;
inline bool KvmIrqLineFtraceEvent::has_vcpu_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KvmIrqLineFtraceEvent::clear_vcpu_idx() {
  _impl_.vcpu_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t KvmIrqLineFtraceEvent::vcpu_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmIrqLineFtraceEvent.vcpu_idx)
  return _internal_vcpu_idx();
}
inline void KvmIrqLineFtraceEvent::set_vcpu_idx(::int32_t value) {
  _internal_set_vcpu_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmIrqLineFtraceEvent.vcpu_idx)
}
inline ::int32_t KvmIrqLineFtraceEvent::_internal_vcpu_idx() const {
  return _impl_.vcpu_idx_;
}
inline void KvmIrqLineFtraceEvent::_internal_set_vcpu_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vcpu_idx_ = value;
}

// -------------------------------------------------------------------

// KvmMmioFtraceEvent

// optional uint64 gpa = 1;
inline bool KvmMmioFtraceEvent::has_gpa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmMmioFtraceEvent::clear_gpa() {
  _impl_.gpa_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmMmioFtraceEvent::gpa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioFtraceEvent.gpa)
  return _internal_gpa();
}
inline void KvmMmioFtraceEvent::set_gpa(::uint64_t value) {
  _internal_set_gpa(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioFtraceEvent.gpa)
}
inline ::uint64_t KvmMmioFtraceEvent::_internal_gpa() const {
  return _impl_.gpa_;
}
inline void KvmMmioFtraceEvent::_internal_set_gpa(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gpa_ = value;
}

// optional uint32 len = 2;
inline bool KvmMmioFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmMmioFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmMmioFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioFtraceEvent.len)
  return _internal_len();
}
inline void KvmMmioFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioFtraceEvent.len)
}
inline ::uint32_t KvmMmioFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void KvmMmioFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.len_ = value;
}

// optional uint32 type = 3;
inline bool KvmMmioFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmMmioFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KvmMmioFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioFtraceEvent.type)
  return _internal_type();
}
inline void KvmMmioFtraceEvent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioFtraceEvent.type)
}
inline ::uint32_t KvmMmioFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void KvmMmioFtraceEvent::_internal_set_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional uint64 val = 4;
inline bool KvmMmioFtraceEvent::has_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KvmMmioFtraceEvent::clear_val() {
  _impl_.val_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t KvmMmioFtraceEvent::val() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioFtraceEvent.val)
  return _internal_val();
}
inline void KvmMmioFtraceEvent::set_val(::uint64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioFtraceEvent.val)
}
inline ::uint64_t KvmMmioFtraceEvent::_internal_val() const {
  return _impl_.val_;
}
inline void KvmMmioFtraceEvent::_internal_set_val(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.val_ = value;
}

// -------------------------------------------------------------------

// KvmMmioEmulateFtraceEvent

// optional uint64 cpsr = 1;
inline bool KvmMmioEmulateFtraceEvent::has_cpsr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmMmioEmulateFtraceEvent::clear_cpsr() {
  _impl_.cpsr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmMmioEmulateFtraceEvent::cpsr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioEmulateFtraceEvent.cpsr)
  return _internal_cpsr();
}
inline void KvmMmioEmulateFtraceEvent::set_cpsr(::uint64_t value) {
  _internal_set_cpsr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioEmulateFtraceEvent.cpsr)
}
inline ::uint64_t KvmMmioEmulateFtraceEvent::_internal_cpsr() const {
  return _impl_.cpsr_;
}
inline void KvmMmioEmulateFtraceEvent::_internal_set_cpsr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpsr_ = value;
}

// optional uint64 instr = 2;
inline bool KvmMmioEmulateFtraceEvent::has_instr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmMmioEmulateFtraceEvent::clear_instr() {
  _impl_.instr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmMmioEmulateFtraceEvent::instr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioEmulateFtraceEvent.instr)
  return _internal_instr();
}
inline void KvmMmioEmulateFtraceEvent::set_instr(::uint64_t value) {
  _internal_set_instr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioEmulateFtraceEvent.instr)
}
inline ::uint64_t KvmMmioEmulateFtraceEvent::_internal_instr() const {
  return _impl_.instr_;
}
inline void KvmMmioEmulateFtraceEvent::_internal_set_instr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instr_ = value;
}

// optional uint64 vcpu_pc = 3;
inline bool KvmMmioEmulateFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmMmioEmulateFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KvmMmioEmulateFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmMmioEmulateFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmMmioEmulateFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmMmioEmulateFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmMmioEmulateFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmMmioEmulateFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmSetGuestDebugFtraceEvent

// optional uint32 guest_debug = 1;
inline bool KvmSetGuestDebugFtraceEvent::has_guest_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmSetGuestDebugFtraceEvent::clear_guest_debug() {
  _impl_.guest_debug_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmSetGuestDebugFtraceEvent::guest_debug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetGuestDebugFtraceEvent.guest_debug)
  return _internal_guest_debug();
}
inline void KvmSetGuestDebugFtraceEvent::set_guest_debug(::uint32_t value) {
  _internal_set_guest_debug(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetGuestDebugFtraceEvent.guest_debug)
}
inline ::uint32_t KvmSetGuestDebugFtraceEvent::_internal_guest_debug() const {
  return _impl_.guest_debug_;
}
inline void KvmSetGuestDebugFtraceEvent::_internal_set_guest_debug(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guest_debug_ = value;
}

// optional uint64 vcpu = 2;
inline bool KvmSetGuestDebugFtraceEvent::has_vcpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmSetGuestDebugFtraceEvent::clear_vcpu() {
  _impl_.vcpu_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmSetGuestDebugFtraceEvent::vcpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetGuestDebugFtraceEvent.vcpu)
  return _internal_vcpu();
}
inline void KvmSetGuestDebugFtraceEvent::set_vcpu(::uint64_t value) {
  _internal_set_vcpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetGuestDebugFtraceEvent.vcpu)
}
inline ::uint64_t KvmSetGuestDebugFtraceEvent::_internal_vcpu() const {
  return _impl_.vcpu_;
}
inline void KvmSetGuestDebugFtraceEvent::_internal_set_vcpu(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcpu_ = value;
}

// -------------------------------------------------------------------

// KvmSetIrqFtraceEvent

// optional uint32 gsi = 1;
inline bool KvmSetIrqFtraceEvent::has_gsi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmSetIrqFtraceEvent::clear_gsi() {
  _impl_.gsi_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmSetIrqFtraceEvent::gsi() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetIrqFtraceEvent.gsi)
  return _internal_gsi();
}
inline void KvmSetIrqFtraceEvent::set_gsi(::uint32_t value) {
  _internal_set_gsi(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetIrqFtraceEvent.gsi)
}
inline ::uint32_t KvmSetIrqFtraceEvent::_internal_gsi() const {
  return _impl_.gsi_;
}
inline void KvmSetIrqFtraceEvent::_internal_set_gsi(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gsi_ = value;
}

// optional int32 irq_source_id = 2;
inline bool KvmSetIrqFtraceEvent::has_irq_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmSetIrqFtraceEvent::clear_irq_source_id() {
  _impl_.irq_source_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmSetIrqFtraceEvent::irq_source_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetIrqFtraceEvent.irq_source_id)
  return _internal_irq_source_id();
}
inline void KvmSetIrqFtraceEvent::set_irq_source_id(::int32_t value) {
  _internal_set_irq_source_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetIrqFtraceEvent.irq_source_id)
}
inline ::int32_t KvmSetIrqFtraceEvent::_internal_irq_source_id() const {
  return _impl_.irq_source_id_;
}
inline void KvmSetIrqFtraceEvent::_internal_set_irq_source_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.irq_source_id_ = value;
}

// optional int32 level = 3;
inline bool KvmSetIrqFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmSetIrqFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t KvmSetIrqFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetIrqFtraceEvent.level)
  return _internal_level();
}
inline void KvmSetIrqFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetIrqFtraceEvent.level)
}
inline ::int32_t KvmSetIrqFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void KvmSetIrqFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// KvmSetSpteHvaFtraceEvent

// optional uint64 hva = 1;
inline bool KvmSetSpteHvaFtraceEvent::has_hva() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmSetSpteHvaFtraceEvent::clear_hva() {
  _impl_.hva_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmSetSpteHvaFtraceEvent::hva() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetSpteHvaFtraceEvent.hva)
  return _internal_hva();
}
inline void KvmSetSpteHvaFtraceEvent::set_hva(::uint64_t value) {
  _internal_set_hva(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetSpteHvaFtraceEvent.hva)
}
inline ::uint64_t KvmSetSpteHvaFtraceEvent::_internal_hva() const {
  return _impl_.hva_;
}
inline void KvmSetSpteHvaFtraceEvent::_internal_set_hva(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hva_ = value;
}

// -------------------------------------------------------------------

// KvmSetWayFlushFtraceEvent

// optional uint32 cache = 1;
inline bool KvmSetWayFlushFtraceEvent::has_cache() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmSetWayFlushFtraceEvent::clear_cache() {
  _impl_.cache_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmSetWayFlushFtraceEvent::cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetWayFlushFtraceEvent.cache)
  return _internal_cache();
}
inline void KvmSetWayFlushFtraceEvent::set_cache(::uint32_t value) {
  _internal_set_cache(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetWayFlushFtraceEvent.cache)
}
inline ::uint32_t KvmSetWayFlushFtraceEvent::_internal_cache() const {
  return _impl_.cache_;
}
inline void KvmSetWayFlushFtraceEvent::_internal_set_cache(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cache_ = value;
}

// optional uint64 vcpu_pc = 2;
inline bool KvmSetWayFlushFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmSetWayFlushFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmSetWayFlushFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSetWayFlushFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmSetWayFlushFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSetWayFlushFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmSetWayFlushFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmSetWayFlushFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmSysAccessFtraceEvent

// optional uint32 CRm = 1;
inline bool KvmSysAccessFtraceEvent::has_crm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_crm() {
  _impl_.crm_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmSysAccessFtraceEvent::crm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.CRm)
  return _internal_crm();
}
inline void KvmSysAccessFtraceEvent::set_crm(::uint32_t value) {
  _internal_set_crm(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.CRm)
}
inline ::uint32_t KvmSysAccessFtraceEvent::_internal_crm() const {
  return _impl_.crm_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_crm(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.crm_ = value;
}

// optional uint32 CRn = 2;
inline bool KvmSysAccessFtraceEvent::has_crn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_crn() {
  _impl_.crn_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KvmSysAccessFtraceEvent::crn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.CRn)
  return _internal_crn();
}
inline void KvmSysAccessFtraceEvent::set_crn(::uint32_t value) {
  _internal_set_crn(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.CRn)
}
inline ::uint32_t KvmSysAccessFtraceEvent::_internal_crn() const {
  return _impl_.crn_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_crn(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.crn_ = value;
}

// optional uint32 Op0 = 3;
inline bool KvmSysAccessFtraceEvent::has_op0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_op0() {
  _impl_.op0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t KvmSysAccessFtraceEvent::op0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.Op0)
  return _internal_op0();
}
inline void KvmSysAccessFtraceEvent::set_op0(::uint32_t value) {
  _internal_set_op0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.Op0)
}
inline ::uint32_t KvmSysAccessFtraceEvent::_internal_op0() const {
  return _impl_.op0_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_op0(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.op0_ = value;
}

// optional uint32 Op1 = 4;
inline bool KvmSysAccessFtraceEvent::has_op1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_op1() {
  _impl_.op1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t KvmSysAccessFtraceEvent::op1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.Op1)
  return _internal_op1();
}
inline void KvmSysAccessFtraceEvent::set_op1(::uint32_t value) {
  _internal_set_op1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.Op1)
}
inline ::uint32_t KvmSysAccessFtraceEvent::_internal_op1() const {
  return _impl_.op1_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_op1(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.op1_ = value;
}

// optional uint32 Op2 = 5;
inline bool KvmSysAccessFtraceEvent::has_op2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_op2() {
  _impl_.op2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t KvmSysAccessFtraceEvent::op2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.Op2)
  return _internal_op2();
}
inline void KvmSysAccessFtraceEvent::set_op2(::uint32_t value) {
  _internal_set_op2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.Op2)
}
inline ::uint32_t KvmSysAccessFtraceEvent::_internal_op2() const {
  return _impl_.op2_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_op2(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.op2_ = value;
}

// optional uint32 is_write = 6;
inline bool KvmSysAccessFtraceEvent::has_is_write() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_is_write() {
  _impl_.is_write_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t KvmSysAccessFtraceEvent::is_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.is_write)
  return _internal_is_write();
}
inline void KvmSysAccessFtraceEvent::set_is_write(::uint32_t value) {
  _internal_set_is_write(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.is_write)
}
inline ::uint32_t KvmSysAccessFtraceEvent::_internal_is_write() const {
  return _impl_.is_write_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_is_write(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_write_ = value;
}

// optional string name = 7;
inline bool KvmSysAccessFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KvmSysAccessFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KvmSysAccessFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.name)
}
inline std::string* KvmSysAccessFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.KvmSysAccessFtraceEvent.name)
  return _s;
}
inline const std::string& KvmSysAccessFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void KvmSysAccessFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* KvmSysAccessFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* KvmSysAccessFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.KvmSysAccessFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void KvmSysAccessFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.KvmSysAccessFtraceEvent.name)
}

// optional uint64 vcpu_pc = 8;
inline bool KvmSysAccessFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void KvmSysAccessFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t KvmSysAccessFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmSysAccessFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmSysAccessFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmSysAccessFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmSysAccessFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmSysAccessFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// KvmTestAgeHvaFtraceEvent

// optional uint64 hva = 1;
inline bool KvmTestAgeHvaFtraceEvent::has_hva() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmTestAgeHvaFtraceEvent::clear_hva() {
  _impl_.hva_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmTestAgeHvaFtraceEvent::hva() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTestAgeHvaFtraceEvent.hva)
  return _internal_hva();
}
inline void KvmTestAgeHvaFtraceEvent::set_hva(::uint64_t value) {
  _internal_set_hva(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTestAgeHvaFtraceEvent.hva)
}
inline ::uint64_t KvmTestAgeHvaFtraceEvent::_internal_hva() const {
  return _impl_.hva_;
}
inline void KvmTestAgeHvaFtraceEvent::_internal_set_hva(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hva_ = value;
}

// -------------------------------------------------------------------

// KvmTimerEmulateFtraceEvent

// optional uint32 should_fire = 1;
inline bool KvmTimerEmulateFtraceEvent::has_should_fire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmTimerEmulateFtraceEvent::clear_should_fire() {
  _impl_.should_fire_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmTimerEmulateFtraceEvent::should_fire() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerEmulateFtraceEvent.should_fire)
  return _internal_should_fire();
}
inline void KvmTimerEmulateFtraceEvent::set_should_fire(::uint32_t value) {
  _internal_set_should_fire(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerEmulateFtraceEvent.should_fire)
}
inline ::uint32_t KvmTimerEmulateFtraceEvent::_internal_should_fire() const {
  return _impl_.should_fire_;
}
inline void KvmTimerEmulateFtraceEvent::_internal_set_should_fire(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.should_fire_ = value;
}

// optional int32 timer_idx = 2;
inline bool KvmTimerEmulateFtraceEvent::has_timer_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmTimerEmulateFtraceEvent::clear_timer_idx() {
  _impl_.timer_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmTimerEmulateFtraceEvent::timer_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerEmulateFtraceEvent.timer_idx)
  return _internal_timer_idx();
}
inline void KvmTimerEmulateFtraceEvent::set_timer_idx(::int32_t value) {
  _internal_set_timer_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerEmulateFtraceEvent.timer_idx)
}
inline ::int32_t KvmTimerEmulateFtraceEvent::_internal_timer_idx() const {
  return _impl_.timer_idx_;
}
inline void KvmTimerEmulateFtraceEvent::_internal_set_timer_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timer_idx_ = value;
}

// -------------------------------------------------------------------

// KvmTimerHrtimerExpireFtraceEvent

// optional int32 timer_idx = 1;
inline bool KvmTimerHrtimerExpireFtraceEvent::has_timer_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmTimerHrtimerExpireFtraceEvent::clear_timer_idx() {
  _impl_.timer_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t KvmTimerHrtimerExpireFtraceEvent::timer_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerHrtimerExpireFtraceEvent.timer_idx)
  return _internal_timer_idx();
}
inline void KvmTimerHrtimerExpireFtraceEvent::set_timer_idx(::int32_t value) {
  _internal_set_timer_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerHrtimerExpireFtraceEvent.timer_idx)
}
inline ::int32_t KvmTimerHrtimerExpireFtraceEvent::_internal_timer_idx() const {
  return _impl_.timer_idx_;
}
inline void KvmTimerHrtimerExpireFtraceEvent::_internal_set_timer_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timer_idx_ = value;
}

// -------------------------------------------------------------------

// KvmTimerRestoreStateFtraceEvent

// optional uint64 ctl = 1;
inline bool KvmTimerRestoreStateFtraceEvent::has_ctl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmTimerRestoreStateFtraceEvent::clear_ctl() {
  _impl_.ctl_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmTimerRestoreStateFtraceEvent::ctl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerRestoreStateFtraceEvent.ctl)
  return _internal_ctl();
}
inline void KvmTimerRestoreStateFtraceEvent::set_ctl(::uint64_t value) {
  _internal_set_ctl(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerRestoreStateFtraceEvent.ctl)
}
inline ::uint64_t KvmTimerRestoreStateFtraceEvent::_internal_ctl() const {
  return _impl_.ctl_;
}
inline void KvmTimerRestoreStateFtraceEvent::_internal_set_ctl(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_ = value;
}

// optional uint64 cval = 2;
inline bool KvmTimerRestoreStateFtraceEvent::has_cval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmTimerRestoreStateFtraceEvent::clear_cval() {
  _impl_.cval_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmTimerRestoreStateFtraceEvent::cval() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerRestoreStateFtraceEvent.cval)
  return _internal_cval();
}
inline void KvmTimerRestoreStateFtraceEvent::set_cval(::uint64_t value) {
  _internal_set_cval(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerRestoreStateFtraceEvent.cval)
}
inline ::uint64_t KvmTimerRestoreStateFtraceEvent::_internal_cval() const {
  return _impl_.cval_;
}
inline void KvmTimerRestoreStateFtraceEvent::_internal_set_cval(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cval_ = value;
}

// optional int32 timer_idx = 3;
inline bool KvmTimerRestoreStateFtraceEvent::has_timer_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmTimerRestoreStateFtraceEvent::clear_timer_idx() {
  _impl_.timer_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t KvmTimerRestoreStateFtraceEvent::timer_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerRestoreStateFtraceEvent.timer_idx)
  return _internal_timer_idx();
}
inline void KvmTimerRestoreStateFtraceEvent::set_timer_idx(::int32_t value) {
  _internal_set_timer_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerRestoreStateFtraceEvent.timer_idx)
}
inline ::int32_t KvmTimerRestoreStateFtraceEvent::_internal_timer_idx() const {
  return _impl_.timer_idx_;
}
inline void KvmTimerRestoreStateFtraceEvent::_internal_set_timer_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timer_idx_ = value;
}

// -------------------------------------------------------------------

// KvmTimerSaveStateFtraceEvent

// optional uint64 ctl = 1;
inline bool KvmTimerSaveStateFtraceEvent::has_ctl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmTimerSaveStateFtraceEvent::clear_ctl() {
  _impl_.ctl_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmTimerSaveStateFtraceEvent::ctl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerSaveStateFtraceEvent.ctl)
  return _internal_ctl();
}
inline void KvmTimerSaveStateFtraceEvent::set_ctl(::uint64_t value) {
  _internal_set_ctl(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerSaveStateFtraceEvent.ctl)
}
inline ::uint64_t KvmTimerSaveStateFtraceEvent::_internal_ctl() const {
  return _impl_.ctl_;
}
inline void KvmTimerSaveStateFtraceEvent::_internal_set_ctl(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_ = value;
}

// optional uint64 cval = 2;
inline bool KvmTimerSaveStateFtraceEvent::has_cval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmTimerSaveStateFtraceEvent::clear_cval() {
  _impl_.cval_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmTimerSaveStateFtraceEvent::cval() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerSaveStateFtraceEvent.cval)
  return _internal_cval();
}
inline void KvmTimerSaveStateFtraceEvent::set_cval(::uint64_t value) {
  _internal_set_cval(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerSaveStateFtraceEvent.cval)
}
inline ::uint64_t KvmTimerSaveStateFtraceEvent::_internal_cval() const {
  return _impl_.cval_;
}
inline void KvmTimerSaveStateFtraceEvent::_internal_set_cval(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cval_ = value;
}

// optional int32 timer_idx = 3;
inline bool KvmTimerSaveStateFtraceEvent::has_timer_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmTimerSaveStateFtraceEvent::clear_timer_idx() {
  _impl_.timer_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t KvmTimerSaveStateFtraceEvent::timer_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerSaveStateFtraceEvent.timer_idx)
  return _internal_timer_idx();
}
inline void KvmTimerSaveStateFtraceEvent::set_timer_idx(::int32_t value) {
  _internal_set_timer_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerSaveStateFtraceEvent.timer_idx)
}
inline ::int32_t KvmTimerSaveStateFtraceEvent::_internal_timer_idx() const {
  return _impl_.timer_idx_;
}
inline void KvmTimerSaveStateFtraceEvent::_internal_set_timer_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timer_idx_ = value;
}

// -------------------------------------------------------------------

// KvmTimerUpdateIrqFtraceEvent

// optional uint32 irq = 1;
inline bool KvmTimerUpdateIrqFtraceEvent::has_irq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmTimerUpdateIrqFtraceEvent::clear_irq() {
  _impl_.irq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmTimerUpdateIrqFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerUpdateIrqFtraceEvent.irq)
  return _internal_irq();
}
inline void KvmTimerUpdateIrqFtraceEvent::set_irq(::uint32_t value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerUpdateIrqFtraceEvent.irq)
}
inline ::uint32_t KvmTimerUpdateIrqFtraceEvent::_internal_irq() const {
  return _impl_.irq_;
}
inline void KvmTimerUpdateIrqFtraceEvent::_internal_set_irq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.irq_ = value;
}

// optional int32 level = 2;
inline bool KvmTimerUpdateIrqFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmTimerUpdateIrqFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t KvmTimerUpdateIrqFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerUpdateIrqFtraceEvent.level)
  return _internal_level();
}
inline void KvmTimerUpdateIrqFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerUpdateIrqFtraceEvent.level)
}
inline ::int32_t KvmTimerUpdateIrqFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void KvmTimerUpdateIrqFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.level_ = value;
}

// optional uint64 vcpu_id = 3;
inline bool KvmTimerUpdateIrqFtraceEvent::has_vcpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmTimerUpdateIrqFtraceEvent::clear_vcpu_id() {
  _impl_.vcpu_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t KvmTimerUpdateIrqFtraceEvent::vcpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmTimerUpdateIrqFtraceEvent.vcpu_id)
  return _internal_vcpu_id();
}
inline void KvmTimerUpdateIrqFtraceEvent::set_vcpu_id(::uint64_t value) {
  _internal_set_vcpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmTimerUpdateIrqFtraceEvent.vcpu_id)
}
inline ::uint64_t KvmTimerUpdateIrqFtraceEvent::_internal_vcpu_id() const {
  return _impl_.vcpu_id_;
}
inline void KvmTimerUpdateIrqFtraceEvent::_internal_set_vcpu_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcpu_id_ = value;
}

// -------------------------------------------------------------------

// KvmToggleCacheFtraceEvent

// optional uint32 now = 1;
inline bool KvmToggleCacheFtraceEvent::has_now() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmToggleCacheFtraceEvent::clear_now() {
  _impl_.now_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmToggleCacheFtraceEvent::now() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmToggleCacheFtraceEvent.now)
  return _internal_now();
}
inline void KvmToggleCacheFtraceEvent::set_now(::uint32_t value) {
  _internal_set_now(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmToggleCacheFtraceEvent.now)
}
inline ::uint32_t KvmToggleCacheFtraceEvent::_internal_now() const {
  return _impl_.now_;
}
inline void KvmToggleCacheFtraceEvent::_internal_set_now(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.now_ = value;
}

// optional uint64 vcpu_pc = 2;
inline bool KvmToggleCacheFtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmToggleCacheFtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmToggleCacheFtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmToggleCacheFtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmToggleCacheFtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmToggleCacheFtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmToggleCacheFtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmToggleCacheFtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcpu_pc_ = value;
}

// optional uint32 was = 3;
inline bool KvmToggleCacheFtraceEvent::has_was() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmToggleCacheFtraceEvent::clear_was() {
  _impl_.was_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KvmToggleCacheFtraceEvent::was() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmToggleCacheFtraceEvent.was)
  return _internal_was();
}
inline void KvmToggleCacheFtraceEvent::set_was(::uint32_t value) {
  _internal_set_was(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmToggleCacheFtraceEvent.was)
}
inline ::uint32_t KvmToggleCacheFtraceEvent::_internal_was() const {
  return _impl_.was_;
}
inline void KvmToggleCacheFtraceEvent::_internal_set_was(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.was_ = value;
}

// -------------------------------------------------------------------

// KvmUnmapHvaRangeFtraceEvent

// optional uint64 end = 1;
inline bool KvmUnmapHvaRangeFtraceEvent::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmUnmapHvaRangeFtraceEvent::clear_end() {
  _impl_.end_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmUnmapHvaRangeFtraceEvent::end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmUnmapHvaRangeFtraceEvent.end)
  return _internal_end();
}
inline void KvmUnmapHvaRangeFtraceEvent::set_end(::uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmUnmapHvaRangeFtraceEvent.end)
}
inline ::uint64_t KvmUnmapHvaRangeFtraceEvent::_internal_end() const {
  return _impl_.end_;
}
inline void KvmUnmapHvaRangeFtraceEvent::_internal_set_end(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.end_ = value;
}

// optional uint64 start = 2;
inline bool KvmUnmapHvaRangeFtraceEvent::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmUnmapHvaRangeFtraceEvent::clear_start() {
  _impl_.start_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KvmUnmapHvaRangeFtraceEvent::start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmUnmapHvaRangeFtraceEvent.start)
  return _internal_start();
}
inline void KvmUnmapHvaRangeFtraceEvent::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmUnmapHvaRangeFtraceEvent.start)
}
inline ::uint64_t KvmUnmapHvaRangeFtraceEvent::_internal_start() const {
  return _impl_.start_;
}
inline void KvmUnmapHvaRangeFtraceEvent::_internal_set_start(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_ = value;
}

// -------------------------------------------------------------------

// KvmUserspaceExitFtraceEvent

// optional uint32 reason = 1;
inline bool KvmUserspaceExitFtraceEvent::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmUserspaceExitFtraceEvent::clear_reason() {
  _impl_.reason_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t KvmUserspaceExitFtraceEvent::reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmUserspaceExitFtraceEvent.reason)
  return _internal_reason();
}
inline void KvmUserspaceExitFtraceEvent::set_reason(::uint32_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmUserspaceExitFtraceEvent.reason)
}
inline ::uint32_t KvmUserspaceExitFtraceEvent::_internal_reason() const {
  return _impl_.reason_;
}
inline void KvmUserspaceExitFtraceEvent::_internal_set_reason(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_ = value;
}

// -------------------------------------------------------------------

// KvmVcpuWakeupFtraceEvent

// optional uint64 ns = 1;
inline bool KvmVcpuWakeupFtraceEvent::has_ns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmVcpuWakeupFtraceEvent::clear_ns() {
  _impl_.ns_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmVcpuWakeupFtraceEvent::ns() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmVcpuWakeupFtraceEvent.ns)
  return _internal_ns();
}
inline void KvmVcpuWakeupFtraceEvent::set_ns(::uint64_t value) {
  _internal_set_ns(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmVcpuWakeupFtraceEvent.ns)
}
inline ::uint64_t KvmVcpuWakeupFtraceEvent::_internal_ns() const {
  return _impl_.ns_;
}
inline void KvmVcpuWakeupFtraceEvent::_internal_set_ns(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ns_ = value;
}

// optional uint32 valid = 2;
inline bool KvmVcpuWakeupFtraceEvent::has_valid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmVcpuWakeupFtraceEvent::clear_valid() {
  _impl_.valid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmVcpuWakeupFtraceEvent::valid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmVcpuWakeupFtraceEvent.valid)
  return _internal_valid();
}
inline void KvmVcpuWakeupFtraceEvent::set_valid(::uint32_t value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmVcpuWakeupFtraceEvent.valid)
}
inline ::uint32_t KvmVcpuWakeupFtraceEvent::_internal_valid() const {
  return _impl_.valid_;
}
inline void KvmVcpuWakeupFtraceEvent::_internal_set_valid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.valid_ = value;
}

// optional uint32 waited = 3;
inline bool KvmVcpuWakeupFtraceEvent::has_waited() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KvmVcpuWakeupFtraceEvent::clear_waited() {
  _impl_.waited_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KvmVcpuWakeupFtraceEvent::waited() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmVcpuWakeupFtraceEvent.waited)
  return _internal_waited();
}
inline void KvmVcpuWakeupFtraceEvent::set_waited(::uint32_t value) {
  _internal_set_waited(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmVcpuWakeupFtraceEvent.waited)
}
inline ::uint32_t KvmVcpuWakeupFtraceEvent::_internal_waited() const {
  return _impl_.waited_;
}
inline void KvmVcpuWakeupFtraceEvent::_internal_set_waited(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.waited_ = value;
}

// -------------------------------------------------------------------

// KvmWfxArm64FtraceEvent

// optional uint32 is_wfe = 1;
inline bool KvmWfxArm64FtraceEvent::has_is_wfe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KvmWfxArm64FtraceEvent::clear_is_wfe() {
  _impl_.is_wfe_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t KvmWfxArm64FtraceEvent::is_wfe() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmWfxArm64FtraceEvent.is_wfe)
  return _internal_is_wfe();
}
inline void KvmWfxArm64FtraceEvent::set_is_wfe(::uint32_t value) {
  _internal_set_is_wfe(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmWfxArm64FtraceEvent.is_wfe)
}
inline ::uint32_t KvmWfxArm64FtraceEvent::_internal_is_wfe() const {
  return _impl_.is_wfe_;
}
inline void KvmWfxArm64FtraceEvent::_internal_set_is_wfe(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_wfe_ = value;
}

// optional uint64 vcpu_pc = 2;
inline bool KvmWfxArm64FtraceEvent::has_vcpu_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KvmWfxArm64FtraceEvent::clear_vcpu_pc() {
  _impl_.vcpu_pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KvmWfxArm64FtraceEvent::vcpu_pc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KvmWfxArm64FtraceEvent.vcpu_pc)
  return _internal_vcpu_pc();
}
inline void KvmWfxArm64FtraceEvent::set_vcpu_pc(::uint64_t value) {
  _internal_set_vcpu_pc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KvmWfxArm64FtraceEvent.vcpu_pc)
}
inline ::uint64_t KvmWfxArm64FtraceEvent::_internal_vcpu_pc() const {
  return _impl_.vcpu_pc_;
}
inline void KvmWfxArm64FtraceEvent::_internal_set_vcpu_pc(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vcpu_pc_ = value;
}

// -------------------------------------------------------------------

// TrapRegFtraceEvent

// optional string fn = 1;
inline bool TrapRegFtraceEvent::has_fn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrapRegFtraceEvent::clear_fn() {
  _impl_.fn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrapRegFtraceEvent::fn() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrapRegFtraceEvent.fn)
  return _internal_fn();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrapRegFtraceEvent::set_fn(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fn_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TrapRegFtraceEvent.fn)
}
inline std::string* TrapRegFtraceEvent::mutable_fn() {
  std::string* _s = _internal_mutable_fn();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TrapRegFtraceEvent.fn)
  return _s;
}
inline const std::string& TrapRegFtraceEvent::_internal_fn() const {
  return _impl_.fn_.Get();
}
inline void TrapRegFtraceEvent::_internal_set_fn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.fn_.Set(value, GetArenaForAllocation());
}
inline std::string* TrapRegFtraceEvent::_internal_mutable_fn() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.fn_.Mutable( GetArenaForAllocation());
}
inline std::string* TrapRegFtraceEvent::release_fn() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TrapRegFtraceEvent.fn)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.fn_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fn_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TrapRegFtraceEvent::set_allocated_fn(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fn_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fn_.IsDefault()) {
          _impl_.fn_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TrapRegFtraceEvent.fn)
}

// optional uint32 is_write = 2;
inline bool TrapRegFtraceEvent::has_is_write() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TrapRegFtraceEvent::clear_is_write() {
  _impl_.is_write_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TrapRegFtraceEvent::is_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrapRegFtraceEvent.is_write)
  return _internal_is_write();
}
inline void TrapRegFtraceEvent::set_is_write(::uint32_t value) {
  _internal_set_is_write(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrapRegFtraceEvent.is_write)
}
inline ::uint32_t TrapRegFtraceEvent::_internal_is_write() const {
  return _impl_.is_write_;
}
inline void TrapRegFtraceEvent::_internal_set_is_write(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_write_ = value;
}

// optional int32 reg = 3;
inline bool TrapRegFtraceEvent::has_reg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TrapRegFtraceEvent::clear_reg() {
  _impl_.reg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TrapRegFtraceEvent::reg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrapRegFtraceEvent.reg)
  return _internal_reg();
}
inline void TrapRegFtraceEvent::set_reg(::int32_t value) {
  _internal_set_reg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrapRegFtraceEvent.reg)
}
inline ::int32_t TrapRegFtraceEvent::_internal_reg() const {
  return _impl_.reg_;
}
inline void TrapRegFtraceEvent::_internal_set_reg(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reg_ = value;
}

// optional uint64 write_value = 4;
inline bool TrapRegFtraceEvent::has_write_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TrapRegFtraceEvent::clear_write_value() {
  _impl_.write_value_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t TrapRegFtraceEvent::write_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TrapRegFtraceEvent.write_value)
  return _internal_write_value();
}
inline void TrapRegFtraceEvent::set_write_value(::uint64_t value) {
  _internal_set_write_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TrapRegFtraceEvent.write_value)
}
inline ::uint64_t TrapRegFtraceEvent::_internal_write_value() const {
  return _impl_.write_value_;
}
inline void TrapRegFtraceEvent::_internal_set_write_value(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.write_value_ = value;
}

// -------------------------------------------------------------------

// VgicUpdateIrqPendingFtraceEvent

// optional uint32 irq = 1;
inline bool VgicUpdateIrqPendingFtraceEvent::has_irq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VgicUpdateIrqPendingFtraceEvent::clear_irq() {
  _impl_.irq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t VgicUpdateIrqPendingFtraceEvent::irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VgicUpdateIrqPendingFtraceEvent.irq)
  return _internal_irq();
}
inline void VgicUpdateIrqPendingFtraceEvent::set_irq(::uint32_t value) {
  _internal_set_irq(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VgicUpdateIrqPendingFtraceEvent.irq)
}
inline ::uint32_t VgicUpdateIrqPendingFtraceEvent::_internal_irq() const {
  return _impl_.irq_;
}
inline void VgicUpdateIrqPendingFtraceEvent::_internal_set_irq(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.irq_ = value;
}

// optional uint32 level = 2;
inline bool VgicUpdateIrqPendingFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VgicUpdateIrqPendingFtraceEvent::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VgicUpdateIrqPendingFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VgicUpdateIrqPendingFtraceEvent.level)
  return _internal_level();
}
inline void VgicUpdateIrqPendingFtraceEvent::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VgicUpdateIrqPendingFtraceEvent.level)
}
inline ::uint32_t VgicUpdateIrqPendingFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void VgicUpdateIrqPendingFtraceEvent::_internal_set_level(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.level_ = value;
}

// optional uint64 vcpu_id = 3;
inline bool VgicUpdateIrqPendingFtraceEvent::has_vcpu_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VgicUpdateIrqPendingFtraceEvent::clear_vcpu_id() {
  _impl_.vcpu_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t VgicUpdateIrqPendingFtraceEvent::vcpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VgicUpdateIrqPendingFtraceEvent.vcpu_id)
  return _internal_vcpu_id();
}
inline void VgicUpdateIrqPendingFtraceEvent::set_vcpu_id(::uint64_t value) {
  _internal_set_vcpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VgicUpdateIrqPendingFtraceEvent.vcpu_id)
}
inline ::uint64_t VgicUpdateIrqPendingFtraceEvent::_internal_vcpu_id() const {
  return _impl_.vcpu_id_;
}
inline void VgicUpdateIrqPendingFtraceEvent::_internal_set_vcpu_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vcpu_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fkvm_2eproto_2epb_2eh
