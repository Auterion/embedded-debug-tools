// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cpuhp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
namespace perfetto {
namespace protos {
class CpuhpEnterFtraceEvent;
struct CpuhpEnterFtraceEventDefaultTypeInternal;
extern CpuhpEnterFtraceEventDefaultTypeInternal _CpuhpEnterFtraceEvent_default_instance_;
class CpuhpExitFtraceEvent;
struct CpuhpExitFtraceEventDefaultTypeInternal;
extern CpuhpExitFtraceEventDefaultTypeInternal _CpuhpExitFtraceEvent_default_instance_;
class CpuhpLatencyFtraceEvent;
struct CpuhpLatencyFtraceEventDefaultTypeInternal;
extern CpuhpLatencyFtraceEventDefaultTypeInternal _CpuhpLatencyFtraceEvent_default_instance_;
class CpuhpMultiEnterFtraceEvent;
struct CpuhpMultiEnterFtraceEventDefaultTypeInternal;
extern CpuhpMultiEnterFtraceEventDefaultTypeInternal _CpuhpMultiEnterFtraceEvent_default_instance_;
class CpuhpPauseFtraceEvent;
struct CpuhpPauseFtraceEventDefaultTypeInternal;
extern CpuhpPauseFtraceEventDefaultTypeInternal _CpuhpPauseFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::CpuhpEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuhpExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuhpLatencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpLatencyFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuhpMultiEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpMultiEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::CpuhpPauseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CpuhpPauseFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class CpuhpExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpExitFtraceEvent) */ {
 public:
  inline CpuhpExitFtraceEvent() : CpuhpExitFtraceEvent(nullptr) {}
  ~CpuhpExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuhpExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuhpExitFtraceEvent(const CpuhpExitFtraceEvent& from);
  CpuhpExitFtraceEvent(CpuhpExitFtraceEvent&& from) noexcept
    : CpuhpExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpExitFtraceEvent& operator=(const CpuhpExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpExitFtraceEvent& operator=(CpuhpExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuhpExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuhpExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpExitFtraceEvent*>(
               &_CpuhpExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuhpExitFtraceEvent& a, CpuhpExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuhpExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuhpExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuhpExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuhpExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuhpExitFtraceEvent& from) {
    CpuhpExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuhpExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuhpExitFtraceEvent";
  }
  protected:
  explicit CpuhpExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kIdxFieldNumber = 2,
    kRetFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint32_t cpu() const;
  void set_cpu(::uint32_t value);

  private:
  ::uint32_t _internal_cpu() const;
  void _internal_set_cpu(::uint32_t value);

  public:
  // optional int32 idx = 2;
  bool has_idx() const;
  void clear_idx() ;
  ::int32_t idx() const;
  void set_idx(::int32_t value);

  private:
  ::int32_t _internal_idx() const;
  void _internal_set_idx(::int32_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional int32 state = 4;
  bool has_state() const;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);

  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t cpu_;
    ::int32_t idx_;
    ::int32_t ret_;
    ::int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};// -------------------------------------------------------------------

class CpuhpMultiEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpMultiEnterFtraceEvent) */ {
 public:
  inline CpuhpMultiEnterFtraceEvent() : CpuhpMultiEnterFtraceEvent(nullptr) {}
  ~CpuhpMultiEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuhpMultiEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuhpMultiEnterFtraceEvent(const CpuhpMultiEnterFtraceEvent& from);
  CpuhpMultiEnterFtraceEvent(CpuhpMultiEnterFtraceEvent&& from) noexcept
    : CpuhpMultiEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpMultiEnterFtraceEvent& operator=(const CpuhpMultiEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpMultiEnterFtraceEvent& operator=(CpuhpMultiEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuhpMultiEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuhpMultiEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpMultiEnterFtraceEvent*>(
               &_CpuhpMultiEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuhpMultiEnterFtraceEvent& a, CpuhpMultiEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpMultiEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuhpMultiEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuhpMultiEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuhpMultiEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuhpMultiEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuhpMultiEnterFtraceEvent& from) {
    CpuhpMultiEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuhpMultiEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuhpMultiEnterFtraceEvent";
  }
  protected:
  explicit CpuhpMultiEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunFieldNumber = 2,
    kCpuFieldNumber = 1,
    kIdxFieldNumber = 3,
    kTargetFieldNumber = 4,
  };
  // optional uint64 fun = 2;
  bool has_fun() const;
  void clear_fun() ;
  ::uint64_t fun() const;
  void set_fun(::uint64_t value);

  private:
  ::uint64_t _internal_fun() const;
  void _internal_set_fun(::uint64_t value);

  public:
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint32_t cpu() const;
  void set_cpu(::uint32_t value);

  private:
  ::uint32_t _internal_cpu() const;
  void _internal_set_cpu(::uint32_t value);

  public:
  // optional int32 idx = 3;
  bool has_idx() const;
  void clear_idx() ;
  ::int32_t idx() const;
  void set_idx(::int32_t value);

  private:
  ::int32_t _internal_idx() const;
  void _internal_set_idx(::int32_t value);

  public:
  // optional int32 target = 4;
  bool has_target() const;
  void clear_target() ;
  ::int32_t target() const;
  void set_target(::int32_t value);

  private:
  ::int32_t _internal_target() const;
  void _internal_set_target(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpMultiEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t fun_;
    ::uint32_t cpu_;
    ::int32_t idx_;
    ::int32_t target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};// -------------------------------------------------------------------

class CpuhpEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpEnterFtraceEvent) */ {
 public:
  inline CpuhpEnterFtraceEvent() : CpuhpEnterFtraceEvent(nullptr) {}
  ~CpuhpEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuhpEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuhpEnterFtraceEvent(const CpuhpEnterFtraceEvent& from);
  CpuhpEnterFtraceEvent(CpuhpEnterFtraceEvent&& from) noexcept
    : CpuhpEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpEnterFtraceEvent& operator=(const CpuhpEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpEnterFtraceEvent& operator=(CpuhpEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuhpEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuhpEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpEnterFtraceEvent*>(
               &_CpuhpEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuhpEnterFtraceEvent& a, CpuhpEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuhpEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuhpEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuhpEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuhpEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuhpEnterFtraceEvent& from) {
    CpuhpEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuhpEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuhpEnterFtraceEvent";
  }
  protected:
  explicit CpuhpEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunFieldNumber = 2,
    kCpuFieldNumber = 1,
    kIdxFieldNumber = 3,
    kTargetFieldNumber = 4,
  };
  // optional uint64 fun = 2;
  bool has_fun() const;
  void clear_fun() ;
  ::uint64_t fun() const;
  void set_fun(::uint64_t value);

  private:
  ::uint64_t _internal_fun() const;
  void _internal_set_fun(::uint64_t value);

  public:
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint32_t cpu() const;
  void set_cpu(::uint32_t value);

  private:
  ::uint32_t _internal_cpu() const;
  void _internal_set_cpu(::uint32_t value);

  public:
  // optional int32 idx = 3;
  bool has_idx() const;
  void clear_idx() ;
  ::int32_t idx() const;
  void set_idx(::int32_t value);

  private:
  ::int32_t _internal_idx() const;
  void _internal_set_idx(::int32_t value);

  public:
  // optional int32 target = 4;
  bool has_target() const;
  void clear_target() ;
  ::int32_t target() const;
  void set_target(::int32_t value);

  private:
  ::int32_t _internal_target() const;
  void _internal_set_target(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t fun_;
    ::uint32_t cpu_;
    ::int32_t idx_;
    ::int32_t target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};// -------------------------------------------------------------------

class CpuhpLatencyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpLatencyFtraceEvent) */ {
 public:
  inline CpuhpLatencyFtraceEvent() : CpuhpLatencyFtraceEvent(nullptr) {}
  ~CpuhpLatencyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuhpLatencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuhpLatencyFtraceEvent(const CpuhpLatencyFtraceEvent& from);
  CpuhpLatencyFtraceEvent(CpuhpLatencyFtraceEvent&& from) noexcept
    : CpuhpLatencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpLatencyFtraceEvent& operator=(const CpuhpLatencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpLatencyFtraceEvent& operator=(CpuhpLatencyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuhpLatencyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuhpLatencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpLatencyFtraceEvent*>(
               &_CpuhpLatencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CpuhpLatencyFtraceEvent& a, CpuhpLatencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpLatencyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuhpLatencyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuhpLatencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuhpLatencyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuhpLatencyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuhpLatencyFtraceEvent& from) {
    CpuhpLatencyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuhpLatencyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuhpLatencyFtraceEvent";
  }
  protected:
  explicit CpuhpLatencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kRetFieldNumber = 2,
    kTimeFieldNumber = 4,
    kStateFieldNumber = 3,
  };
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint32_t cpu() const;
  void set_cpu(::uint32_t value);

  private:
  ::uint32_t _internal_cpu() const;
  void _internal_set_cpu(::uint32_t value);

  public:
  // optional int32 ret = 2;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional uint64 time = 4;
  bool has_time() const;
  void clear_time() ;
  ::uint64_t time() const;
  void set_time(::uint64_t value);

  private:
  ::uint64_t _internal_time() const;
  void _internal_set_time(::uint64_t value);

  public:
  // optional uint32 state = 3;
  bool has_state() const;
  void clear_state() ;
  ::uint32_t state() const;
  void set_state(::uint32_t value);

  private:
  ::uint32_t _internal_state() const;
  void _internal_set_state(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpLatencyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t cpu_;
    ::int32_t ret_;
    ::uint64_t time_;
    ::uint32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};// -------------------------------------------------------------------

class CpuhpPauseFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CpuhpPauseFtraceEvent) */ {
 public:
  inline CpuhpPauseFtraceEvent() : CpuhpPauseFtraceEvent(nullptr) {}
  ~CpuhpPauseFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpuhpPauseFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuhpPauseFtraceEvent(const CpuhpPauseFtraceEvent& from);
  CpuhpPauseFtraceEvent(CpuhpPauseFtraceEvent&& from) noexcept
    : CpuhpPauseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CpuhpPauseFtraceEvent& operator=(const CpuhpPauseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuhpPauseFtraceEvent& operator=(CpuhpPauseFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuhpPauseFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuhpPauseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CpuhpPauseFtraceEvent*>(
               &_CpuhpPauseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CpuhpPauseFtraceEvent& a, CpuhpPauseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuhpPauseFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuhpPauseFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpuhpPauseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpuhpPauseFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuhpPauseFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CpuhpPauseFtraceEvent& from) {
    CpuhpPauseFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuhpPauseFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CpuhpPauseFtraceEvent";
  }
  protected:
  explicit CpuhpPauseFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveCpusFieldNumber = 1,
    kCpusFieldNumber = 2,
    kPauseFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // optional uint32 active_cpus = 1;
  bool has_active_cpus() const;
  void clear_active_cpus() ;
  ::uint32_t active_cpus() const;
  void set_active_cpus(::uint32_t value);

  private:
  ::uint32_t _internal_active_cpus() const;
  void _internal_set_active_cpus(::uint32_t value);

  public:
  // optional uint32 cpus = 2;
  bool has_cpus() const;
  void clear_cpus() ;
  ::uint32_t cpus() const;
  void set_cpus(::uint32_t value);

  private:
  ::uint32_t _internal_cpus() const;
  void _internal_set_cpus(::uint32_t value);

  public:
  // optional uint32 pause = 3;
  bool has_pause() const;
  void clear_pause() ;
  ::uint32_t pause() const;
  void set_pause(::uint32_t value);

  private:
  ::uint32_t _internal_pause() const;
  void _internal_set_pause(::uint32_t value);

  public:
  // optional uint32 time = 4;
  bool has_time() const;
  void clear_time() ;
  ::uint32_t time() const;
  void set_time(::uint32_t value);

  private:
  ::uint32_t _internal_time() const;
  void _internal_set_time(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CpuhpPauseFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t active_cpus_;
    ::uint32_t cpus_;
    ::uint32_t pause_;
    ::uint32_t time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CpuhpExitFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpExitFtraceEvent::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuhpExitFtraceEvent::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuhpExitFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.cpu)
  return _internal_cpu();
}
inline void CpuhpExitFtraceEvent::set_cpu(::uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.cpu)
}
inline ::uint32_t CpuhpExitFtraceEvent::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void CpuhpExitFtraceEvent::_internal_set_cpu(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpu_ = value;
}

// optional int32 idx = 2;
inline bool CpuhpExitFtraceEvent::has_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuhpExitFtraceEvent::clear_idx() {
  _impl_.idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CpuhpExitFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.idx)
  return _internal_idx();
}
inline void CpuhpExitFtraceEvent::set_idx(::int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.idx)
}
inline ::int32_t CpuhpExitFtraceEvent::_internal_idx() const {
  return _impl_.idx_;
}
inline void CpuhpExitFtraceEvent::_internal_set_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.idx_ = value;
}

// optional int32 ret = 3;
inline bool CpuhpExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CpuhpExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CpuhpExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.ret)
  return _internal_ret();
}
inline void CpuhpExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.ret)
}
inline ::int32_t CpuhpExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void CpuhpExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// optional int32 state = 4;
inline bool CpuhpExitFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CpuhpExitFtraceEvent::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CpuhpExitFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpExitFtraceEvent.state)
  return _internal_state();
}
inline void CpuhpExitFtraceEvent::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpExitFtraceEvent.state)
}
inline ::int32_t CpuhpExitFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void CpuhpExitFtraceEvent::_internal_set_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// CpuhpMultiEnterFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpMultiEnterFtraceEvent::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuhpMultiEnterFtraceEvent::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuhpMultiEnterFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.cpu)
  return _internal_cpu();
}
inline void CpuhpMultiEnterFtraceEvent::set_cpu(::uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.cpu)
}
inline ::uint32_t CpuhpMultiEnterFtraceEvent::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void CpuhpMultiEnterFtraceEvent::_internal_set_cpu(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_ = value;
}

// optional uint64 fun = 2;
inline bool CpuhpMultiEnterFtraceEvent::has_fun() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuhpMultiEnterFtraceEvent::clear_fun() {
  _impl_.fun_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t CpuhpMultiEnterFtraceEvent::fun() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.fun)
  return _internal_fun();
}
inline void CpuhpMultiEnterFtraceEvent::set_fun(::uint64_t value) {
  _internal_set_fun(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.fun)
}
inline ::uint64_t CpuhpMultiEnterFtraceEvent::_internal_fun() const {
  return _impl_.fun_;
}
inline void CpuhpMultiEnterFtraceEvent::_internal_set_fun(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fun_ = value;
}

// optional int32 idx = 3;
inline bool CpuhpMultiEnterFtraceEvent::has_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CpuhpMultiEnterFtraceEvent::clear_idx() {
  _impl_.idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CpuhpMultiEnterFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.idx)
  return _internal_idx();
}
inline void CpuhpMultiEnterFtraceEvent::set_idx(::int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.idx)
}
inline ::int32_t CpuhpMultiEnterFtraceEvent::_internal_idx() const {
  return _impl_.idx_;
}
inline void CpuhpMultiEnterFtraceEvent::_internal_set_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.idx_ = value;
}

// optional int32 target = 4;
inline bool CpuhpMultiEnterFtraceEvent::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CpuhpMultiEnterFtraceEvent::clear_target() {
  _impl_.target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CpuhpMultiEnterFtraceEvent::target() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpMultiEnterFtraceEvent.target)
  return _internal_target();
}
inline void CpuhpMultiEnterFtraceEvent::set_target(::int32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpMultiEnterFtraceEvent.target)
}
inline ::int32_t CpuhpMultiEnterFtraceEvent::_internal_target() const {
  return _impl_.target_;
}
inline void CpuhpMultiEnterFtraceEvent::_internal_set_target(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.target_ = value;
}

// -------------------------------------------------------------------

// CpuhpEnterFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpEnterFtraceEvent::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuhpEnterFtraceEvent::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuhpEnterFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.cpu)
  return _internal_cpu();
}
inline void CpuhpEnterFtraceEvent::set_cpu(::uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.cpu)
}
inline ::uint32_t CpuhpEnterFtraceEvent::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void CpuhpEnterFtraceEvent::_internal_set_cpu(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_ = value;
}

// optional uint64 fun = 2;
inline bool CpuhpEnterFtraceEvent::has_fun() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuhpEnterFtraceEvent::clear_fun() {
  _impl_.fun_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t CpuhpEnterFtraceEvent::fun() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.fun)
  return _internal_fun();
}
inline void CpuhpEnterFtraceEvent::set_fun(::uint64_t value) {
  _internal_set_fun(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.fun)
}
inline ::uint64_t CpuhpEnterFtraceEvent::_internal_fun() const {
  return _impl_.fun_;
}
inline void CpuhpEnterFtraceEvent::_internal_set_fun(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fun_ = value;
}

// optional int32 idx = 3;
inline bool CpuhpEnterFtraceEvent::has_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CpuhpEnterFtraceEvent::clear_idx() {
  _impl_.idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CpuhpEnterFtraceEvent::idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.idx)
  return _internal_idx();
}
inline void CpuhpEnterFtraceEvent::set_idx(::int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.idx)
}
inline ::int32_t CpuhpEnterFtraceEvent::_internal_idx() const {
  return _impl_.idx_;
}
inline void CpuhpEnterFtraceEvent::_internal_set_idx(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.idx_ = value;
}

// optional int32 target = 4;
inline bool CpuhpEnterFtraceEvent::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CpuhpEnterFtraceEvent::clear_target() {
  _impl_.target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CpuhpEnterFtraceEvent::target() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpEnterFtraceEvent.target)
  return _internal_target();
}
inline void CpuhpEnterFtraceEvent::set_target(::int32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpEnterFtraceEvent.target)
}
inline ::int32_t CpuhpEnterFtraceEvent::_internal_target() const {
  return _impl_.target_;
}
inline void CpuhpEnterFtraceEvent::_internal_set_target(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.target_ = value;
}

// -------------------------------------------------------------------

// CpuhpLatencyFtraceEvent

// optional uint32 cpu = 1;
inline bool CpuhpLatencyFtraceEvent::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuhpLatencyFtraceEvent::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuhpLatencyFtraceEvent::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.cpu)
  return _internal_cpu();
}
inline void CpuhpLatencyFtraceEvent::set_cpu(::uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.cpu)
}
inline ::uint32_t CpuhpLatencyFtraceEvent::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void CpuhpLatencyFtraceEvent::_internal_set_cpu(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpu_ = value;
}

// optional int32 ret = 2;
inline bool CpuhpLatencyFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuhpLatencyFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CpuhpLatencyFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.ret)
  return _internal_ret();
}
inline void CpuhpLatencyFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.ret)
}
inline ::int32_t CpuhpLatencyFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void CpuhpLatencyFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}

// optional uint32 state = 3;
inline bool CpuhpLatencyFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CpuhpLatencyFtraceEvent::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t CpuhpLatencyFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.state)
  return _internal_state();
}
inline void CpuhpLatencyFtraceEvent::set_state(::uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.state)
}
inline ::uint32_t CpuhpLatencyFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void CpuhpLatencyFtraceEvent::_internal_set_state(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_ = value;
}

// optional uint64 time = 4;
inline bool CpuhpLatencyFtraceEvent::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CpuhpLatencyFtraceEvent::clear_time() {
  _impl_.time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t CpuhpLatencyFtraceEvent::time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpLatencyFtraceEvent.time)
  return _internal_time();
}
inline void CpuhpLatencyFtraceEvent::set_time(::uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpLatencyFtraceEvent.time)
}
inline ::uint64_t CpuhpLatencyFtraceEvent::_internal_time() const {
  return _impl_.time_;
}
inline void CpuhpLatencyFtraceEvent::_internal_set_time(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// CpuhpPauseFtraceEvent

// optional uint32 active_cpus = 1;
inline bool CpuhpPauseFtraceEvent::has_active_cpus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CpuhpPauseFtraceEvent::clear_active_cpus() {
  _impl_.active_cpus_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CpuhpPauseFtraceEvent::active_cpus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpPauseFtraceEvent.active_cpus)
  return _internal_active_cpus();
}
inline void CpuhpPauseFtraceEvent::set_active_cpus(::uint32_t value) {
  _internal_set_active_cpus(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpPauseFtraceEvent.active_cpus)
}
inline ::uint32_t CpuhpPauseFtraceEvent::_internal_active_cpus() const {
  return _impl_.active_cpus_;
}
inline void CpuhpPauseFtraceEvent::_internal_set_active_cpus(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_cpus_ = value;
}

// optional uint32 cpus = 2;
inline bool CpuhpPauseFtraceEvent::has_cpus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CpuhpPauseFtraceEvent::clear_cpus() {
  _impl_.cpus_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CpuhpPauseFtraceEvent::cpus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpPauseFtraceEvent.cpus)
  return _internal_cpus();
}
inline void CpuhpPauseFtraceEvent::set_cpus(::uint32_t value) {
  _internal_set_cpus(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpPauseFtraceEvent.cpus)
}
inline ::uint32_t CpuhpPauseFtraceEvent::_internal_cpus() const {
  return _impl_.cpus_;
}
inline void CpuhpPauseFtraceEvent::_internal_set_cpus(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpus_ = value;
}

// optional uint32 pause = 3;
inline bool CpuhpPauseFtraceEvent::has_pause() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CpuhpPauseFtraceEvent::clear_pause() {
  _impl_.pause_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CpuhpPauseFtraceEvent::pause() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpPauseFtraceEvent.pause)
  return _internal_pause();
}
inline void CpuhpPauseFtraceEvent::set_pause(::uint32_t value) {
  _internal_set_pause(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpPauseFtraceEvent.pause)
}
inline ::uint32_t CpuhpPauseFtraceEvent::_internal_pause() const {
  return _impl_.pause_;
}
inline void CpuhpPauseFtraceEvent::_internal_set_pause(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pause_ = value;
}

// optional uint32 time = 4;
inline bool CpuhpPauseFtraceEvent::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CpuhpPauseFtraceEvent::clear_time() {
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t CpuhpPauseFtraceEvent::time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CpuhpPauseFtraceEvent.time)
  return _internal_time();
}
inline void CpuhpPauseFtraceEvent::set_time(::uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CpuhpPauseFtraceEvent.time)
}
inline ::uint32_t CpuhpPauseFtraceEvent::_internal_time() const {
  return _impl_.time_;
}
inline void CpuhpPauseFtraceEvent::_internal_set_time(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcpuhp_2eproto_2epb_2eh
