// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cgroup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
namespace perfetto {
namespace protos {
class CgroupAttachTaskFtraceEvent;
struct CgroupAttachTaskFtraceEventDefaultTypeInternal;
extern CgroupAttachTaskFtraceEventDefaultTypeInternal _CgroupAttachTaskFtraceEvent_default_instance_;
class CgroupDestroyRootFtraceEvent;
struct CgroupDestroyRootFtraceEventDefaultTypeInternal;
extern CgroupDestroyRootFtraceEventDefaultTypeInternal _CgroupDestroyRootFtraceEvent_default_instance_;
class CgroupMkdirFtraceEvent;
struct CgroupMkdirFtraceEventDefaultTypeInternal;
extern CgroupMkdirFtraceEventDefaultTypeInternal _CgroupMkdirFtraceEvent_default_instance_;
class CgroupReleaseFtraceEvent;
struct CgroupReleaseFtraceEventDefaultTypeInternal;
extern CgroupReleaseFtraceEventDefaultTypeInternal _CgroupReleaseFtraceEvent_default_instance_;
class CgroupRemountFtraceEvent;
struct CgroupRemountFtraceEventDefaultTypeInternal;
extern CgroupRemountFtraceEventDefaultTypeInternal _CgroupRemountFtraceEvent_default_instance_;
class CgroupRenameFtraceEvent;
struct CgroupRenameFtraceEventDefaultTypeInternal;
extern CgroupRenameFtraceEventDefaultTypeInternal _CgroupRenameFtraceEvent_default_instance_;
class CgroupRmdirFtraceEvent;
struct CgroupRmdirFtraceEventDefaultTypeInternal;
extern CgroupRmdirFtraceEventDefaultTypeInternal _CgroupRmdirFtraceEvent_default_instance_;
class CgroupSetupRootFtraceEvent;
struct CgroupSetupRootFtraceEventDefaultTypeInternal;
extern CgroupSetupRootFtraceEventDefaultTypeInternal _CgroupSetupRootFtraceEvent_default_instance_;
class CgroupTransferTasksFtraceEvent;
struct CgroupTransferTasksFtraceEventDefaultTypeInternal;
extern CgroupTransferTasksFtraceEventDefaultTypeInternal _CgroupTransferTasksFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::CgroupAttachTaskFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupAttachTaskFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupDestroyRootFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupDestroyRootFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupMkdirFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupMkdirFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupReleaseFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupReleaseFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupRemountFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupRemountFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupRenameFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupRenameFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupRmdirFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupRmdirFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupSetupRootFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupSetupRootFtraceEvent>(Arena*);
template <>
::perfetto::protos::CgroupTransferTasksFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::CgroupTransferTasksFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class CgroupAttachTaskFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupAttachTaskFtraceEvent) */ {
 public:
  inline CgroupAttachTaskFtraceEvent() : CgroupAttachTaskFtraceEvent(nullptr) {}
  ~CgroupAttachTaskFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupAttachTaskFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupAttachTaskFtraceEvent(const CgroupAttachTaskFtraceEvent& from);
  CgroupAttachTaskFtraceEvent(CgroupAttachTaskFtraceEvent&& from) noexcept
    : CgroupAttachTaskFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupAttachTaskFtraceEvent& operator=(const CgroupAttachTaskFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupAttachTaskFtraceEvent& operator=(CgroupAttachTaskFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupAttachTaskFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupAttachTaskFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupAttachTaskFtraceEvent*>(
               &_CgroupAttachTaskFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CgroupAttachTaskFtraceEvent& a, CgroupAttachTaskFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupAttachTaskFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupAttachTaskFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupAttachTaskFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupAttachTaskFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupAttachTaskFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupAttachTaskFtraceEvent& from) {
    CgroupAttachTaskFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupAttachTaskFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupAttachTaskFtraceEvent";
  }
  protected:
  explicit CgroupAttachTaskFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 4,
    kCnameFieldNumber = 5,
    kDstPathFieldNumber = 7,
    kDstRootFieldNumber = 1,
    kDstIdFieldNumber = 2,
    kPidFieldNumber = 3,
    kDstLevelFieldNumber = 6,
  };
  // optional string comm = 4;
  bool has_comm() const;
  void clear_comm() ;
  const std::string& comm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comm(Arg_&& arg, Args_... args);
  std::string* mutable_comm();
  PROTOBUF_NODISCARD std::string* release_comm();
  void set_allocated_comm(std::string* ptr);

  private:
  const std::string& _internal_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comm(
      const std::string& value);
  std::string* _internal_mutable_comm();

  public:
  // optional string cname = 5;
  bool has_cname() const;
  void clear_cname() ;
  const std::string& cname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cname(Arg_&& arg, Args_... args);
  std::string* mutable_cname();
  PROTOBUF_NODISCARD std::string* release_cname();
  void set_allocated_cname(std::string* ptr);

  private:
  const std::string& _internal_cname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cname(
      const std::string& value);
  std::string* _internal_mutable_cname();

  public:
  // optional string dst_path = 7;
  bool has_dst_path() const;
  void clear_dst_path() ;
  const std::string& dst_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dst_path(Arg_&& arg, Args_... args);
  std::string* mutable_dst_path();
  PROTOBUF_NODISCARD std::string* release_dst_path();
  void set_allocated_dst_path(std::string* ptr);

  private:
  const std::string& _internal_dst_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_path(
      const std::string& value);
  std::string* _internal_mutable_dst_path();

  public:
  // optional int32 dst_root = 1;
  bool has_dst_root() const;
  void clear_dst_root() ;
  ::int32_t dst_root() const;
  void set_dst_root(::int32_t value);

  private:
  ::int32_t _internal_dst_root() const;
  void _internal_set_dst_root(::int32_t value);

  public:
  // optional int32 dst_id = 2;
  bool has_dst_id() const;
  void clear_dst_id() ;
  ::int32_t dst_id() const;
  void set_dst_id(::int32_t value);

  private:
  ::int32_t _internal_dst_id() const;
  void _internal_set_dst_id(::int32_t value);

  public:
  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 dst_level = 6;
  bool has_dst_level() const;
  void clear_dst_level() ;
  ::int32_t dst_level() const;
  void set_dst_level(::int32_t value);

  private:
  ::int32_t _internal_dst_level() const;
  void _internal_set_dst_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupAttachTaskFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_path_;
    ::int32_t dst_root_;
    ::int32_t dst_id_;
    ::int32_t pid_;
    ::int32_t dst_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupMkdirFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupMkdirFtraceEvent) */ {
 public:
  inline CgroupMkdirFtraceEvent() : CgroupMkdirFtraceEvent(nullptr) {}
  ~CgroupMkdirFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupMkdirFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupMkdirFtraceEvent(const CgroupMkdirFtraceEvent& from);
  CgroupMkdirFtraceEvent(CgroupMkdirFtraceEvent&& from) noexcept
    : CgroupMkdirFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupMkdirFtraceEvent& operator=(const CgroupMkdirFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupMkdirFtraceEvent& operator=(CgroupMkdirFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupMkdirFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupMkdirFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupMkdirFtraceEvent*>(
               &_CgroupMkdirFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CgroupMkdirFtraceEvent& a, CgroupMkdirFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupMkdirFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupMkdirFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupMkdirFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupMkdirFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupMkdirFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupMkdirFtraceEvent& from) {
    CgroupMkdirFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupMkdirFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupMkdirFtraceEvent";
  }
  protected:
  explicit CgroupMkdirFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kPathFieldNumber = 5,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname() ;
  const std::string& cname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cname(Arg_&& arg, Args_... args);
  std::string* mutable_cname();
  PROTOBUF_NODISCARD std::string* release_cname();
  void set_allocated_cname(std::string* ptr);

  private:
  const std::string& _internal_cname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cname(
      const std::string& value);
  std::string* _internal_mutable_cname();

  public:
  // optional string path = 5;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 level = 4;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupMkdirFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::int32_t root_;
    ::int32_t id_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupRemountFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupRemountFtraceEvent) */ {
 public:
  inline CgroupRemountFtraceEvent() : CgroupRemountFtraceEvent(nullptr) {}
  ~CgroupRemountFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupRemountFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupRemountFtraceEvent(const CgroupRemountFtraceEvent& from);
  CgroupRemountFtraceEvent(CgroupRemountFtraceEvent&& from) noexcept
    : CgroupRemountFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupRemountFtraceEvent& operator=(const CgroupRemountFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupRemountFtraceEvent& operator=(CgroupRemountFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupRemountFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupRemountFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupRemountFtraceEvent*>(
               &_CgroupRemountFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CgroupRemountFtraceEvent& a, CgroupRemountFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupRemountFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupRemountFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupRemountFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupRemountFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupRemountFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupRemountFtraceEvent& from) {
    CgroupRemountFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupRemountFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupRemountFtraceEvent";
  }
  protected:
  explicit CgroupRemountFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional uint32 ss_mask = 2;
  bool has_ss_mask() const;
  void clear_ss_mask() ;
  ::uint32_t ss_mask() const;
  void set_ss_mask(::uint32_t value);

  private:
  ::uint32_t _internal_ss_mask() const;
  void _internal_set_ss_mask(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupRemountFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t root_;
    ::uint32_t ss_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupRmdirFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupRmdirFtraceEvent) */ {
 public:
  inline CgroupRmdirFtraceEvent() : CgroupRmdirFtraceEvent(nullptr) {}
  ~CgroupRmdirFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupRmdirFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupRmdirFtraceEvent(const CgroupRmdirFtraceEvent& from);
  CgroupRmdirFtraceEvent(CgroupRmdirFtraceEvent&& from) noexcept
    : CgroupRmdirFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupRmdirFtraceEvent& operator=(const CgroupRmdirFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupRmdirFtraceEvent& operator=(CgroupRmdirFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupRmdirFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupRmdirFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupRmdirFtraceEvent*>(
               &_CgroupRmdirFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CgroupRmdirFtraceEvent& a, CgroupRmdirFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupRmdirFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupRmdirFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupRmdirFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupRmdirFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupRmdirFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupRmdirFtraceEvent& from) {
    CgroupRmdirFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupRmdirFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupRmdirFtraceEvent";
  }
  protected:
  explicit CgroupRmdirFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kPathFieldNumber = 5,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname() ;
  const std::string& cname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cname(Arg_&& arg, Args_... args);
  std::string* mutable_cname();
  PROTOBUF_NODISCARD std::string* release_cname();
  void set_allocated_cname(std::string* ptr);

  private:
  const std::string& _internal_cname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cname(
      const std::string& value);
  std::string* _internal_mutable_cname();

  public:
  // optional string path = 5;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 level = 4;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupRmdirFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::int32_t root_;
    ::int32_t id_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupTransferTasksFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupTransferTasksFtraceEvent) */ {
 public:
  inline CgroupTransferTasksFtraceEvent() : CgroupTransferTasksFtraceEvent(nullptr) {}
  ~CgroupTransferTasksFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupTransferTasksFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupTransferTasksFtraceEvent(const CgroupTransferTasksFtraceEvent& from);
  CgroupTransferTasksFtraceEvent(CgroupTransferTasksFtraceEvent&& from) noexcept
    : CgroupTransferTasksFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupTransferTasksFtraceEvent& operator=(const CgroupTransferTasksFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupTransferTasksFtraceEvent& operator=(CgroupTransferTasksFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupTransferTasksFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupTransferTasksFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupTransferTasksFtraceEvent*>(
               &_CgroupTransferTasksFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CgroupTransferTasksFtraceEvent& a, CgroupTransferTasksFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupTransferTasksFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupTransferTasksFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupTransferTasksFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupTransferTasksFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupTransferTasksFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupTransferTasksFtraceEvent& from) {
    CgroupTransferTasksFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupTransferTasksFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupTransferTasksFtraceEvent";
  }
  protected:
  explicit CgroupTransferTasksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 4,
    kCnameFieldNumber = 5,
    kDstPathFieldNumber = 7,
    kDstRootFieldNumber = 1,
    kDstIdFieldNumber = 2,
    kPidFieldNumber = 3,
    kDstLevelFieldNumber = 6,
  };
  // optional string comm = 4;
  bool has_comm() const;
  void clear_comm() ;
  const std::string& comm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comm(Arg_&& arg, Args_... args);
  std::string* mutable_comm();
  PROTOBUF_NODISCARD std::string* release_comm();
  void set_allocated_comm(std::string* ptr);

  private:
  const std::string& _internal_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comm(
      const std::string& value);
  std::string* _internal_mutable_comm();

  public:
  // optional string cname = 5;
  bool has_cname() const;
  void clear_cname() ;
  const std::string& cname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cname(Arg_&& arg, Args_... args);
  std::string* mutable_cname();
  PROTOBUF_NODISCARD std::string* release_cname();
  void set_allocated_cname(std::string* ptr);

  private:
  const std::string& _internal_cname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cname(
      const std::string& value);
  std::string* _internal_mutable_cname();

  public:
  // optional string dst_path = 7;
  bool has_dst_path() const;
  void clear_dst_path() ;
  const std::string& dst_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dst_path(Arg_&& arg, Args_... args);
  std::string* mutable_dst_path();
  PROTOBUF_NODISCARD std::string* release_dst_path();
  void set_allocated_dst_path(std::string* ptr);

  private:
  const std::string& _internal_dst_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_path(
      const std::string& value);
  std::string* _internal_mutable_dst_path();

  public:
  // optional int32 dst_root = 1;
  bool has_dst_root() const;
  void clear_dst_root() ;
  ::int32_t dst_root() const;
  void set_dst_root(::int32_t value);

  private:
  ::int32_t _internal_dst_root() const;
  void _internal_set_dst_root(::int32_t value);

  public:
  // optional int32 dst_id = 2;
  bool has_dst_id() const;
  void clear_dst_id() ;
  ::int32_t dst_id() const;
  void set_dst_id(::int32_t value);

  private:
  ::int32_t _internal_dst_id() const;
  void _internal_set_dst_id(::int32_t value);

  public:
  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 dst_level = 6;
  bool has_dst_level() const;
  void clear_dst_level() ;
  ::int32_t dst_level() const;
  void set_dst_level(::int32_t value);

  private:
  ::int32_t _internal_dst_level() const;
  void _internal_set_dst_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupTransferTasksFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_path_;
    ::int32_t dst_root_;
    ::int32_t dst_id_;
    ::int32_t pid_;
    ::int32_t dst_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupDestroyRootFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupDestroyRootFtraceEvent) */ {
 public:
  inline CgroupDestroyRootFtraceEvent() : CgroupDestroyRootFtraceEvent(nullptr) {}
  ~CgroupDestroyRootFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupDestroyRootFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupDestroyRootFtraceEvent(const CgroupDestroyRootFtraceEvent& from);
  CgroupDestroyRootFtraceEvent(CgroupDestroyRootFtraceEvent&& from) noexcept
    : CgroupDestroyRootFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupDestroyRootFtraceEvent& operator=(const CgroupDestroyRootFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupDestroyRootFtraceEvent& operator=(CgroupDestroyRootFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupDestroyRootFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupDestroyRootFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupDestroyRootFtraceEvent*>(
               &_CgroupDestroyRootFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CgroupDestroyRootFtraceEvent& a, CgroupDestroyRootFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupDestroyRootFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupDestroyRootFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupDestroyRootFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupDestroyRootFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupDestroyRootFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupDestroyRootFtraceEvent& from) {
    CgroupDestroyRootFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupDestroyRootFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupDestroyRootFtraceEvent";
  }
  protected:
  explicit CgroupDestroyRootFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional uint32 ss_mask = 2;
  bool has_ss_mask() const;
  void clear_ss_mask() ;
  ::uint32_t ss_mask() const;
  void set_ss_mask(::uint32_t value);

  private:
  ::uint32_t _internal_ss_mask() const;
  void _internal_set_ss_mask(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupDestroyRootFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t root_;
    ::uint32_t ss_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupReleaseFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupReleaseFtraceEvent) */ {
 public:
  inline CgroupReleaseFtraceEvent() : CgroupReleaseFtraceEvent(nullptr) {}
  ~CgroupReleaseFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupReleaseFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupReleaseFtraceEvent(const CgroupReleaseFtraceEvent& from);
  CgroupReleaseFtraceEvent(CgroupReleaseFtraceEvent&& from) noexcept
    : CgroupReleaseFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupReleaseFtraceEvent& operator=(const CgroupReleaseFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupReleaseFtraceEvent& operator=(CgroupReleaseFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupReleaseFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupReleaseFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupReleaseFtraceEvent*>(
               &_CgroupReleaseFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CgroupReleaseFtraceEvent& a, CgroupReleaseFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupReleaseFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupReleaseFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupReleaseFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupReleaseFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupReleaseFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupReleaseFtraceEvent& from) {
    CgroupReleaseFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupReleaseFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupReleaseFtraceEvent";
  }
  protected:
  explicit CgroupReleaseFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kPathFieldNumber = 5,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname() ;
  const std::string& cname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cname(Arg_&& arg, Args_... args);
  std::string* mutable_cname();
  PROTOBUF_NODISCARD std::string* release_cname();
  void set_allocated_cname(std::string* ptr);

  private:
  const std::string& _internal_cname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cname(
      const std::string& value);
  std::string* _internal_mutable_cname();

  public:
  // optional string path = 5;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 level = 4;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupReleaseFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::int32_t root_;
    ::int32_t id_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupRenameFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupRenameFtraceEvent) */ {
 public:
  inline CgroupRenameFtraceEvent() : CgroupRenameFtraceEvent(nullptr) {}
  ~CgroupRenameFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupRenameFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupRenameFtraceEvent(const CgroupRenameFtraceEvent& from);
  CgroupRenameFtraceEvent(CgroupRenameFtraceEvent&& from) noexcept
    : CgroupRenameFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupRenameFtraceEvent& operator=(const CgroupRenameFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupRenameFtraceEvent& operator=(CgroupRenameFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupRenameFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupRenameFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupRenameFtraceEvent*>(
               &_CgroupRenameFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CgroupRenameFtraceEvent& a, CgroupRenameFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupRenameFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupRenameFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupRenameFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupRenameFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupRenameFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupRenameFtraceEvent& from) {
    CgroupRenameFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupRenameFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupRenameFtraceEvent";
  }
  protected:
  explicit CgroupRenameFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCnameFieldNumber = 3,
    kPathFieldNumber = 5,
    kRootFieldNumber = 1,
    kIdFieldNumber = 2,
    kLevelFieldNumber = 4,
  };
  // optional string cname = 3;
  bool has_cname() const;
  void clear_cname() ;
  const std::string& cname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cname(Arg_&& arg, Args_... args);
  std::string* mutable_cname();
  PROTOBUF_NODISCARD std::string* release_cname();
  void set_allocated_cname(std::string* ptr);

  private:
  const std::string& _internal_cname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cname(
      const std::string& value);
  std::string* _internal_mutable_cname();

  public:
  // optional string path = 5;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 level = 4;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupRenameFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::int32_t root_;
    ::int32_t id_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};// -------------------------------------------------------------------

class CgroupSetupRootFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.CgroupSetupRootFtraceEvent) */ {
 public:
  inline CgroupSetupRootFtraceEvent() : CgroupSetupRootFtraceEvent(nullptr) {}
  ~CgroupSetupRootFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CgroupSetupRootFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgroupSetupRootFtraceEvent(const CgroupSetupRootFtraceEvent& from);
  CgroupSetupRootFtraceEvent(CgroupSetupRootFtraceEvent&& from) noexcept
    : CgroupSetupRootFtraceEvent() {
    *this = ::std::move(from);
  }

  inline CgroupSetupRootFtraceEvent& operator=(const CgroupSetupRootFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgroupSetupRootFtraceEvent& operator=(CgroupSetupRootFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgroupSetupRootFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgroupSetupRootFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const CgroupSetupRootFtraceEvent*>(
               &_CgroupSetupRootFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CgroupSetupRootFtraceEvent& a, CgroupSetupRootFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CgroupSetupRootFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgroupSetupRootFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CgroupSetupRootFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CgroupSetupRootFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgroupSetupRootFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CgroupSetupRootFtraceEvent& from) {
    CgroupSetupRootFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgroupSetupRootFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.CgroupSetupRootFtraceEvent";
  }
  protected:
  explicit CgroupSetupRootFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kRootFieldNumber = 1,
    kSsMaskFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 root = 1;
  bool has_root() const;
  void clear_root() ;
  ::int32_t root() const;
  void set_root(::int32_t value);

  private:
  ::int32_t _internal_root() const;
  void _internal_set_root(::int32_t value);

  public:
  // optional uint32 ss_mask = 2;
  bool has_ss_mask() const;
  void clear_ss_mask() ;
  ::uint32_t ss_mask() const;
  void set_ss_mask(::uint32_t value);

  private:
  ::uint32_t _internal_ss_mask() const;
  void _internal_set_ss_mask(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.CgroupSetupRootFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t root_;
    ::uint32_t ss_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CgroupAttachTaskFtraceEvent

// optional int32 dst_root = 1;
inline bool CgroupAttachTaskFtraceEvent::has_dst_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_dst_root() {
  _impl_.dst_root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CgroupAttachTaskFtraceEvent::dst_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_root)
  return _internal_dst_root();
}
inline void CgroupAttachTaskFtraceEvent::set_dst_root(::int32_t value) {
  _internal_set_dst_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_root)
}
inline ::int32_t CgroupAttachTaskFtraceEvent::_internal_dst_root() const {
  return _impl_.dst_root_;
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_dst_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dst_root_ = value;
}

// optional int32 dst_id = 2;
inline bool CgroupAttachTaskFtraceEvent::has_dst_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_dst_id() {
  _impl_.dst_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CgroupAttachTaskFtraceEvent::dst_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_id)
  return _internal_dst_id();
}
inline void CgroupAttachTaskFtraceEvent::set_dst_id(::int32_t value) {
  _internal_set_dst_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_id)
}
inline ::int32_t CgroupAttachTaskFtraceEvent::_internal_dst_id() const {
  return _impl_.dst_id_;
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_dst_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dst_id_ = value;
}

// optional int32 pid = 3;
inline bool CgroupAttachTaskFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t CgroupAttachTaskFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.pid)
  return _internal_pid();
}
inline void CgroupAttachTaskFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.pid)
}
inline ::int32_t CgroupAttachTaskFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_ = value;
}

// optional string comm = 4;
inline bool CgroupAttachTaskFtraceEvent::has_comm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_comm() {
  _impl_.comm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupAttachTaskFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
  return _internal_comm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupAttachTaskFtraceEvent::set_comm(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}
inline std::string* CgroupAttachTaskFtraceEvent::mutable_comm() {
  std::string* _s = _internal_mutable_comm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
  return _s;
}
inline const std::string& CgroupAttachTaskFtraceEvent::_internal_comm() const {
  return _impl_.comm_.Get();
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_comm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.comm_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupAttachTaskFtraceEvent::_internal_mutable_comm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comm_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupAttachTaskFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.comm_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupAttachTaskFtraceEvent::set_allocated_comm(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comm_.IsDefault()) {
          _impl_.comm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupAttachTaskFtraceEvent.comm)
}

// optional string cname = 5;
inline bool CgroupAttachTaskFtraceEvent::has_cname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_cname() {
  _impl_.cname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupAttachTaskFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
  return _internal_cname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupAttachTaskFtraceEvent::set_cname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}
inline std::string* CgroupAttachTaskFtraceEvent::mutable_cname() {
  std::string* _s = _internal_mutable_cname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
  return _s;
}
inline const std::string& CgroupAttachTaskFtraceEvent::_internal_cname() const {
  return _impl_.cname_.Get();
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_cname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.cname_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupAttachTaskFtraceEvent::_internal_mutable_cname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cname_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupAttachTaskFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.cname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupAttachTaskFtraceEvent::set_allocated_cname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cname_.IsDefault()) {
          _impl_.cname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupAttachTaskFtraceEvent.cname)
}

// optional int32 dst_level = 6;
inline bool CgroupAttachTaskFtraceEvent::has_dst_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_dst_level() {
  _impl_.dst_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t CgroupAttachTaskFtraceEvent::dst_level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_level)
  return _internal_dst_level();
}
inline void CgroupAttachTaskFtraceEvent::set_dst_level(::int32_t value) {
  _internal_set_dst_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_level)
}
inline ::int32_t CgroupAttachTaskFtraceEvent::_internal_dst_level() const {
  return _impl_.dst_level_;
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_dst_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.dst_level_ = value;
}

// optional string dst_path = 7;
inline bool CgroupAttachTaskFtraceEvent::has_dst_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupAttachTaskFtraceEvent::clear_dst_path() {
  _impl_.dst_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CgroupAttachTaskFtraceEvent::dst_path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path)
  return _internal_dst_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupAttachTaskFtraceEvent::set_dst_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dst_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path)
}
inline std::string* CgroupAttachTaskFtraceEvent::mutable_dst_path() {
  std::string* _s = _internal_mutable_dst_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path)
  return _s;
}
inline const std::string& CgroupAttachTaskFtraceEvent::_internal_dst_path() const {
  return _impl_.dst_path_.Get();
}
inline void CgroupAttachTaskFtraceEvent::_internal_set_dst_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.dst_path_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupAttachTaskFtraceEvent::_internal_mutable_dst_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.dst_path_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupAttachTaskFtraceEvent::release_dst_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.dst_path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupAttachTaskFtraceEvent::set_allocated_dst_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.dst_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dst_path_.IsDefault()) {
          _impl_.dst_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path)
}

// -------------------------------------------------------------------

// CgroupMkdirFtraceEvent

// optional int32 root = 1;
inline bool CgroupMkdirFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupMkdirFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CgroupMkdirFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.root)
  return _internal_root();
}
inline void CgroupMkdirFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.root)
}
inline ::int32_t CgroupMkdirFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupMkdirFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_ = value;
}

// optional int32 id = 2;
inline bool CgroupMkdirFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CgroupMkdirFtraceEvent::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CgroupMkdirFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.id)
  return _internal_id();
}
inline void CgroupMkdirFtraceEvent::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.id)
}
inline ::int32_t CgroupMkdirFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void CgroupMkdirFtraceEvent::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}

// optional string cname = 3;
inline bool CgroupMkdirFtraceEvent::has_cname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupMkdirFtraceEvent::clear_cname() {
  _impl_.cname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupMkdirFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.cname)
  return _internal_cname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupMkdirFtraceEvent::set_cname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}
inline std::string* CgroupMkdirFtraceEvent::mutable_cname() {
  std::string* _s = _internal_mutable_cname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupMkdirFtraceEvent.cname)
  return _s;
}
inline const std::string& CgroupMkdirFtraceEvent::_internal_cname() const {
  return _impl_.cname_.Get();
}
inline void CgroupMkdirFtraceEvent::_internal_set_cname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cname_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupMkdirFtraceEvent::_internal_mutable_cname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cname_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupMkdirFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupMkdirFtraceEvent.cname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupMkdirFtraceEvent::set_allocated_cname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cname_.IsDefault()) {
          _impl_.cname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupMkdirFtraceEvent.cname)
}

// optional int32 level = 4;
inline bool CgroupMkdirFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CgroupMkdirFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CgroupMkdirFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.level)
  return _internal_level();
}
inline void CgroupMkdirFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.level)
}
inline ::int32_t CgroupMkdirFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void CgroupMkdirFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}

// optional string path = 5;
inline bool CgroupMkdirFtraceEvent::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupMkdirFtraceEvent::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupMkdirFtraceEvent::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupMkdirFtraceEvent.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupMkdirFtraceEvent::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupMkdirFtraceEvent.path)
}
inline std::string* CgroupMkdirFtraceEvent::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupMkdirFtraceEvent.path)
  return _s;
}
inline const std::string& CgroupMkdirFtraceEvent::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CgroupMkdirFtraceEvent::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupMkdirFtraceEvent::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupMkdirFtraceEvent::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupMkdirFtraceEvent.path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupMkdirFtraceEvent::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupMkdirFtraceEvent.path)
}

// -------------------------------------------------------------------

// CgroupRemountFtraceEvent

// optional int32 root = 1;
inline bool CgroupRemountFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupRemountFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CgroupRemountFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRemountFtraceEvent.root)
  return _internal_root();
}
inline void CgroupRemountFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRemountFtraceEvent.root)
}
inline ::int32_t CgroupRemountFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupRemountFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.root_ = value;
}

// optional uint32 ss_mask = 2;
inline bool CgroupRemountFtraceEvent::has_ss_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupRemountFtraceEvent::clear_ss_mask() {
  _impl_.ss_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CgroupRemountFtraceEvent::ss_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRemountFtraceEvent.ss_mask)
  return _internal_ss_mask();
}
inline void CgroupRemountFtraceEvent::set_ss_mask(::uint32_t value) {
  _internal_set_ss_mask(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRemountFtraceEvent.ss_mask)
}
inline ::uint32_t CgroupRemountFtraceEvent::_internal_ss_mask() const {
  return _impl_.ss_mask_;
}
inline void CgroupRemountFtraceEvent::_internal_set_ss_mask(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ss_mask_ = value;
}

// optional string name = 3;
inline bool CgroupRemountFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupRemountFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupRemountFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRemountFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupRemountFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRemountFtraceEvent.name)
}
inline std::string* CgroupRemountFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRemountFtraceEvent.name)
  return _s;
}
inline const std::string& CgroupRemountFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CgroupRemountFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupRemountFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupRemountFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRemountFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupRemountFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRemountFtraceEvent.name)
}

// -------------------------------------------------------------------

// CgroupRmdirFtraceEvent

// optional int32 root = 1;
inline bool CgroupRmdirFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupRmdirFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CgroupRmdirFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.root)
  return _internal_root();
}
inline void CgroupRmdirFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.root)
}
inline ::int32_t CgroupRmdirFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupRmdirFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_ = value;
}

// optional int32 id = 2;
inline bool CgroupRmdirFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CgroupRmdirFtraceEvent::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CgroupRmdirFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.id)
  return _internal_id();
}
inline void CgroupRmdirFtraceEvent::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.id)
}
inline ::int32_t CgroupRmdirFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void CgroupRmdirFtraceEvent::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}

// optional string cname = 3;
inline bool CgroupRmdirFtraceEvent::has_cname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupRmdirFtraceEvent::clear_cname() {
  _impl_.cname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupRmdirFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.cname)
  return _internal_cname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupRmdirFtraceEvent::set_cname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}
inline std::string* CgroupRmdirFtraceEvent::mutable_cname() {
  std::string* _s = _internal_mutable_cname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRmdirFtraceEvent.cname)
  return _s;
}
inline const std::string& CgroupRmdirFtraceEvent::_internal_cname() const {
  return _impl_.cname_.Get();
}
inline void CgroupRmdirFtraceEvent::_internal_set_cname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cname_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupRmdirFtraceEvent::_internal_mutable_cname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cname_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupRmdirFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRmdirFtraceEvent.cname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupRmdirFtraceEvent::set_allocated_cname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cname_.IsDefault()) {
          _impl_.cname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRmdirFtraceEvent.cname)
}

// optional int32 level = 4;
inline bool CgroupRmdirFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CgroupRmdirFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CgroupRmdirFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.level)
  return _internal_level();
}
inline void CgroupRmdirFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.level)
}
inline ::int32_t CgroupRmdirFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void CgroupRmdirFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}

// optional string path = 5;
inline bool CgroupRmdirFtraceEvent::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupRmdirFtraceEvent::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupRmdirFtraceEvent::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRmdirFtraceEvent.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupRmdirFtraceEvent::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRmdirFtraceEvent.path)
}
inline std::string* CgroupRmdirFtraceEvent::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRmdirFtraceEvent.path)
  return _s;
}
inline const std::string& CgroupRmdirFtraceEvent::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CgroupRmdirFtraceEvent::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupRmdirFtraceEvent::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupRmdirFtraceEvent::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRmdirFtraceEvent.path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupRmdirFtraceEvent::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRmdirFtraceEvent.path)
}

// -------------------------------------------------------------------

// CgroupTransferTasksFtraceEvent

// optional int32 dst_root = 1;
inline bool CgroupTransferTasksFtraceEvent::has_dst_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_dst_root() {
  _impl_.dst_root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CgroupTransferTasksFtraceEvent::dst_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_root)
  return _internal_dst_root();
}
inline void CgroupTransferTasksFtraceEvent::set_dst_root(::int32_t value) {
  _internal_set_dst_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_root)
}
inline ::int32_t CgroupTransferTasksFtraceEvent::_internal_dst_root() const {
  return _impl_.dst_root_;
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_dst_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dst_root_ = value;
}

// optional int32 dst_id = 2;
inline bool CgroupTransferTasksFtraceEvent::has_dst_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_dst_id() {
  _impl_.dst_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CgroupTransferTasksFtraceEvent::dst_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_id)
  return _internal_dst_id();
}
inline void CgroupTransferTasksFtraceEvent::set_dst_id(::int32_t value) {
  _internal_set_dst_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_id)
}
inline ::int32_t CgroupTransferTasksFtraceEvent::_internal_dst_id() const {
  return _impl_.dst_id_;
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_dst_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dst_id_ = value;
}

// optional int32 pid = 3;
inline bool CgroupTransferTasksFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t CgroupTransferTasksFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.pid)
  return _internal_pid();
}
inline void CgroupTransferTasksFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.pid)
}
inline ::int32_t CgroupTransferTasksFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pid_ = value;
}

// optional string comm = 4;
inline bool CgroupTransferTasksFtraceEvent::has_comm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_comm() {
  _impl_.comm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupTransferTasksFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
  return _internal_comm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupTransferTasksFtraceEvent::set_comm(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}
inline std::string* CgroupTransferTasksFtraceEvent::mutable_comm() {
  std::string* _s = _internal_mutable_comm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
  return _s;
}
inline const std::string& CgroupTransferTasksFtraceEvent::_internal_comm() const {
  return _impl_.comm_.Get();
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_comm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.comm_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupTransferTasksFtraceEvent::_internal_mutable_comm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comm_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupTransferTasksFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.comm_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupTransferTasksFtraceEvent::set_allocated_comm(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comm_.IsDefault()) {
          _impl_.comm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupTransferTasksFtraceEvent.comm)
}

// optional string cname = 5;
inline bool CgroupTransferTasksFtraceEvent::has_cname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_cname() {
  _impl_.cname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupTransferTasksFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
  return _internal_cname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupTransferTasksFtraceEvent::set_cname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}
inline std::string* CgroupTransferTasksFtraceEvent::mutable_cname() {
  std::string* _s = _internal_mutable_cname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
  return _s;
}
inline const std::string& CgroupTransferTasksFtraceEvent::_internal_cname() const {
  return _impl_.cname_.Get();
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_cname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.cname_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupTransferTasksFtraceEvent::_internal_mutable_cname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cname_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupTransferTasksFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.cname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupTransferTasksFtraceEvent::set_allocated_cname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cname_.IsDefault()) {
          _impl_.cname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupTransferTasksFtraceEvent.cname)
}

// optional int32 dst_level = 6;
inline bool CgroupTransferTasksFtraceEvent::has_dst_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_dst_level() {
  _impl_.dst_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t CgroupTransferTasksFtraceEvent::dst_level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_level)
  return _internal_dst_level();
}
inline void CgroupTransferTasksFtraceEvent::set_dst_level(::int32_t value) {
  _internal_set_dst_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_level)
}
inline ::int32_t CgroupTransferTasksFtraceEvent::_internal_dst_level() const {
  return _impl_.dst_level_;
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_dst_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.dst_level_ = value;
}

// optional string dst_path = 7;
inline bool CgroupTransferTasksFtraceEvent::has_dst_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupTransferTasksFtraceEvent::clear_dst_path() {
  _impl_.dst_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CgroupTransferTasksFtraceEvent::dst_path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path)
  return _internal_dst_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupTransferTasksFtraceEvent::set_dst_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dst_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path)
}
inline std::string* CgroupTransferTasksFtraceEvent::mutable_dst_path() {
  std::string* _s = _internal_mutable_dst_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path)
  return _s;
}
inline const std::string& CgroupTransferTasksFtraceEvent::_internal_dst_path() const {
  return _impl_.dst_path_.Get();
}
inline void CgroupTransferTasksFtraceEvent::_internal_set_dst_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.dst_path_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupTransferTasksFtraceEvent::_internal_mutable_dst_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.dst_path_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupTransferTasksFtraceEvent::release_dst_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.dst_path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupTransferTasksFtraceEvent::set_allocated_dst_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.dst_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dst_path_.IsDefault()) {
          _impl_.dst_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path)
}

// -------------------------------------------------------------------

// CgroupDestroyRootFtraceEvent

// optional int32 root = 1;
inline bool CgroupDestroyRootFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupDestroyRootFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CgroupDestroyRootFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupDestroyRootFtraceEvent.root)
  return _internal_root();
}
inline void CgroupDestroyRootFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupDestroyRootFtraceEvent.root)
}
inline ::int32_t CgroupDestroyRootFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupDestroyRootFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.root_ = value;
}

// optional uint32 ss_mask = 2;
inline bool CgroupDestroyRootFtraceEvent::has_ss_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupDestroyRootFtraceEvent::clear_ss_mask() {
  _impl_.ss_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CgroupDestroyRootFtraceEvent::ss_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupDestroyRootFtraceEvent.ss_mask)
  return _internal_ss_mask();
}
inline void CgroupDestroyRootFtraceEvent::set_ss_mask(::uint32_t value) {
  _internal_set_ss_mask(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupDestroyRootFtraceEvent.ss_mask)
}
inline ::uint32_t CgroupDestroyRootFtraceEvent::_internal_ss_mask() const {
  return _impl_.ss_mask_;
}
inline void CgroupDestroyRootFtraceEvent::_internal_set_ss_mask(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ss_mask_ = value;
}

// optional string name = 3;
inline bool CgroupDestroyRootFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupDestroyRootFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupDestroyRootFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupDestroyRootFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}
inline std::string* CgroupDestroyRootFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
  return _s;
}
inline const std::string& CgroupDestroyRootFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CgroupDestroyRootFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupDestroyRootFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupDestroyRootFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupDestroyRootFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupDestroyRootFtraceEvent.name)
}

// -------------------------------------------------------------------

// CgroupReleaseFtraceEvent

// optional int32 root = 1;
inline bool CgroupReleaseFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupReleaseFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CgroupReleaseFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.root)
  return _internal_root();
}
inline void CgroupReleaseFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.root)
}
inline ::int32_t CgroupReleaseFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupReleaseFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_ = value;
}

// optional int32 id = 2;
inline bool CgroupReleaseFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CgroupReleaseFtraceEvent::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CgroupReleaseFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.id)
  return _internal_id();
}
inline void CgroupReleaseFtraceEvent::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.id)
}
inline ::int32_t CgroupReleaseFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void CgroupReleaseFtraceEvent::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}

// optional string cname = 3;
inline bool CgroupReleaseFtraceEvent::has_cname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupReleaseFtraceEvent::clear_cname() {
  _impl_.cname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupReleaseFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.cname)
  return _internal_cname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupReleaseFtraceEvent::set_cname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}
inline std::string* CgroupReleaseFtraceEvent::mutable_cname() {
  std::string* _s = _internal_mutable_cname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupReleaseFtraceEvent.cname)
  return _s;
}
inline const std::string& CgroupReleaseFtraceEvent::_internal_cname() const {
  return _impl_.cname_.Get();
}
inline void CgroupReleaseFtraceEvent::_internal_set_cname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cname_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupReleaseFtraceEvent::_internal_mutable_cname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cname_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupReleaseFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupReleaseFtraceEvent.cname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupReleaseFtraceEvent::set_allocated_cname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cname_.IsDefault()) {
          _impl_.cname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupReleaseFtraceEvent.cname)
}

// optional int32 level = 4;
inline bool CgroupReleaseFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CgroupReleaseFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CgroupReleaseFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.level)
  return _internal_level();
}
inline void CgroupReleaseFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.level)
}
inline ::int32_t CgroupReleaseFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void CgroupReleaseFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}

// optional string path = 5;
inline bool CgroupReleaseFtraceEvent::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupReleaseFtraceEvent::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupReleaseFtraceEvent::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupReleaseFtraceEvent.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupReleaseFtraceEvent::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupReleaseFtraceEvent.path)
}
inline std::string* CgroupReleaseFtraceEvent::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupReleaseFtraceEvent.path)
  return _s;
}
inline const std::string& CgroupReleaseFtraceEvent::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CgroupReleaseFtraceEvent::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupReleaseFtraceEvent::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupReleaseFtraceEvent::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupReleaseFtraceEvent.path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupReleaseFtraceEvent::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupReleaseFtraceEvent.path)
}

// -------------------------------------------------------------------

// CgroupRenameFtraceEvent

// optional int32 root = 1;
inline bool CgroupRenameFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupRenameFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CgroupRenameFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.root)
  return _internal_root();
}
inline void CgroupRenameFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.root)
}
inline ::int32_t CgroupRenameFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupRenameFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_ = value;
}

// optional int32 id = 2;
inline bool CgroupRenameFtraceEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CgroupRenameFtraceEvent::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CgroupRenameFtraceEvent::id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.id)
  return _internal_id();
}
inline void CgroupRenameFtraceEvent::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.id)
}
inline ::int32_t CgroupRenameFtraceEvent::_internal_id() const {
  return _impl_.id_;
}
inline void CgroupRenameFtraceEvent::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}

// optional string cname = 3;
inline bool CgroupRenameFtraceEvent::has_cname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupRenameFtraceEvent::clear_cname() {
  _impl_.cname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupRenameFtraceEvent::cname() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.cname)
  return _internal_cname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupRenameFtraceEvent::set_cname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.cname)
}
inline std::string* CgroupRenameFtraceEvent::mutable_cname() {
  std::string* _s = _internal_mutable_cname();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRenameFtraceEvent.cname)
  return _s;
}
inline const std::string& CgroupRenameFtraceEvent::_internal_cname() const {
  return _impl_.cname_.Get();
}
inline void CgroupRenameFtraceEvent::_internal_set_cname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cname_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupRenameFtraceEvent::_internal_mutable_cname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cname_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupRenameFtraceEvent::release_cname() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRenameFtraceEvent.cname)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupRenameFtraceEvent::set_allocated_cname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cname_.IsDefault()) {
          _impl_.cname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRenameFtraceEvent.cname)
}

// optional int32 level = 4;
inline bool CgroupRenameFtraceEvent::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CgroupRenameFtraceEvent::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CgroupRenameFtraceEvent::level() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.level)
  return _internal_level();
}
inline void CgroupRenameFtraceEvent::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.level)
}
inline ::int32_t CgroupRenameFtraceEvent::_internal_level() const {
  return _impl_.level_;
}
inline void CgroupRenameFtraceEvent::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}

// optional string path = 5;
inline bool CgroupRenameFtraceEvent::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupRenameFtraceEvent::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CgroupRenameFtraceEvent::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupRenameFtraceEvent.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupRenameFtraceEvent::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupRenameFtraceEvent.path)
}
inline std::string* CgroupRenameFtraceEvent::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupRenameFtraceEvent.path)
  return _s;
}
inline const std::string& CgroupRenameFtraceEvent::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CgroupRenameFtraceEvent::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupRenameFtraceEvent::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupRenameFtraceEvent::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupRenameFtraceEvent.path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupRenameFtraceEvent::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupRenameFtraceEvent.path)
}

// -------------------------------------------------------------------

// CgroupSetupRootFtraceEvent

// optional int32 root = 1;
inline bool CgroupSetupRootFtraceEvent::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CgroupSetupRootFtraceEvent::clear_root() {
  _impl_.root_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CgroupSetupRootFtraceEvent::root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupSetupRootFtraceEvent.root)
  return _internal_root();
}
inline void CgroupSetupRootFtraceEvent::set_root(::int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupSetupRootFtraceEvent.root)
}
inline ::int32_t CgroupSetupRootFtraceEvent::_internal_root() const {
  return _impl_.root_;
}
inline void CgroupSetupRootFtraceEvent::_internal_set_root(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.root_ = value;
}

// optional uint32 ss_mask = 2;
inline bool CgroupSetupRootFtraceEvent::has_ss_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CgroupSetupRootFtraceEvent::clear_ss_mask() {
  _impl_.ss_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CgroupSetupRootFtraceEvent::ss_mask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupSetupRootFtraceEvent.ss_mask)
  return _internal_ss_mask();
}
inline void CgroupSetupRootFtraceEvent::set_ss_mask(::uint32_t value) {
  _internal_set_ss_mask(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupSetupRootFtraceEvent.ss_mask)
}
inline ::uint32_t CgroupSetupRootFtraceEvent::_internal_ss_mask() const {
  return _impl_.ss_mask_;
}
inline void CgroupSetupRootFtraceEvent::_internal_set_ss_mask(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ss_mask_ = value;
}

// optional string name = 3;
inline bool CgroupSetupRootFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CgroupSetupRootFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CgroupSetupRootFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.CgroupSetupRootFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CgroupSetupRootFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}
inline std::string* CgroupSetupRootFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.CgroupSetupRootFtraceEvent.name)
  return _s;
}
inline const std::string& CgroupSetupRootFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CgroupSetupRootFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CgroupSetupRootFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CgroupSetupRootFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.CgroupSetupRootFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CgroupSetupRootFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.CgroupSetupRootFtraceEvent.name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_2epb_2eh
