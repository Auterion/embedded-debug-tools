// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/trusty.proto

#include "protos/perfetto/trace/ftrace/trusty.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR TrustySmcFtraceEvent::TrustySmcFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.r0_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.r1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.r2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.r3_)*/ ::uint64_t{0u}
} {}
struct TrustySmcFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustySmcFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustySmcFtraceEventDefaultTypeInternal() {}
  union {
    TrustySmcFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustySmcFtraceEventDefaultTypeInternal _TrustySmcFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustySmcDoneFtraceEvent::TrustySmcDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ret_)*/ ::uint64_t{0u}
} {}
struct TrustySmcDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustySmcDoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustySmcDoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustySmcDoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustySmcDoneFtraceEventDefaultTypeInternal _TrustySmcDoneFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyStdCall32FtraceEvent::TrustyStdCall32FtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.r0_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.r1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.r2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.r3_)*/ ::uint64_t{0u}
} {}
struct TrustyStdCall32FtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyStdCall32FtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyStdCall32FtraceEventDefaultTypeInternal() {}
  union {
    TrustyStdCall32FtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyStdCall32FtraceEventDefaultTypeInternal _TrustyStdCall32FtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyStdCall32DoneFtraceEvent::TrustyStdCall32DoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ret_)*/ ::int64_t{0}
} {}
struct TrustyStdCall32DoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyStdCall32DoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyStdCall32DoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustyStdCall32DoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyStdCall32DoneFtraceEventDefaultTypeInternal _TrustyStdCall32DoneFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyShareMemoryFtraceEvent::TrustyShareMemoryFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.len_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.lend_)*/ 0u

  , /*decltype(_impl_.nents_)*/ 0u
} {}
struct TrustyShareMemoryFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyShareMemoryFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyShareMemoryFtraceEventDefaultTypeInternal() {}
  union {
    TrustyShareMemoryFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyShareMemoryFtraceEventDefaultTypeInternal _TrustyShareMemoryFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyShareMemoryDoneFtraceEvent::TrustyShareMemoryDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.len_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.lend_)*/ 0u

  , /*decltype(_impl_.nents_)*/ 0u

  , /*decltype(_impl_.ret_)*/ 0
} {}
struct TrustyShareMemoryDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyShareMemoryDoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyShareMemoryDoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustyShareMemoryDoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyShareMemoryDoneFtraceEventDefaultTypeInternal _TrustyShareMemoryDoneFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyReclaimMemoryFtraceEvent::TrustyReclaimMemoryFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}
} {}
struct TrustyReclaimMemoryFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyReclaimMemoryFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyReclaimMemoryFtraceEventDefaultTypeInternal() {}
  union {
    TrustyReclaimMemoryFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyReclaimMemoryFtraceEventDefaultTypeInternal _TrustyReclaimMemoryFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyReclaimMemoryDoneFtraceEvent::TrustyReclaimMemoryDoneFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.ret_)*/ 0
} {}
struct TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal() {}
  union {
    TrustyReclaimMemoryDoneFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyReclaimMemoryDoneFtraceEventDefaultTypeInternal _TrustyReclaimMemoryDoneFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIrqFtraceEvent::TrustyIrqFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.irq_)*/ 0
} {}
struct TrustyIrqFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIrqFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIrqFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIrqFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIrqFtraceEventDefaultTypeInternal _TrustyIrqFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcHandleEventFtraceEvent::TrustyIpcHandleEventFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srv_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.chan_)*/ 0u

  , /*decltype(_impl_.event_id_)*/ 0u
} {}
struct TrustyIpcHandleEventFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcHandleEventFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcHandleEventFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcHandleEventFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcHandleEventFtraceEventDefaultTypeInternal _TrustyIpcHandleEventFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcConnectFtraceEvent::TrustyIpcConnectFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.chan_)*/ 0u

  , /*decltype(_impl_.state_)*/ 0
} {}
struct TrustyIpcConnectFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcConnectFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcConnectFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcConnectFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcConnectFtraceEventDefaultTypeInternal _TrustyIpcConnectFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcConnectEndFtraceEvent::TrustyIpcConnectEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chan_)*/ 0u

  , /*decltype(_impl_.err_)*/ 0

  , /*decltype(_impl_.state_)*/ 0
} {}
struct TrustyIpcConnectEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcConnectEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcConnectEndFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcConnectEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcConnectEndFtraceEventDefaultTypeInternal _TrustyIpcConnectEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcWriteFtraceEvent::TrustyIpcWriteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srv_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.buf_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chan_)*/ 0u

  , /*decltype(_impl_.kind_shm_)*/ 0

  , /*decltype(_impl_.shm_cnt_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.len_or_err_)*/ 0
} {}
struct TrustyIpcWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcWriteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcWriteFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcWriteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcWriteFtraceEventDefaultTypeInternal _TrustyIpcWriteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcPollFtraceEvent::TrustyIpcPollFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srv_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.chan_)*/ 0u

  , /*decltype(_impl_.poll_mask_)*/ 0u
} {}
struct TrustyIpcPollFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcPollFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcPollFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcPollFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcPollFtraceEventDefaultTypeInternal _TrustyIpcPollFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcReadFtraceEvent::TrustyIpcReadFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srv_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.chan_)*/ 0u
} {}
struct TrustyIpcReadFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcReadFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcReadFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcReadFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcReadFtraceEventDefaultTypeInternal _TrustyIpcReadFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcReadEndFtraceEvent::TrustyIpcReadEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srv_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.buf_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chan_)*/ 0u

  , /*decltype(_impl_.len_or_err_)*/ 0

  , /*decltype(_impl_.shm_cnt_)*/ ::uint64_t{0u}
} {}
struct TrustyIpcReadEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcReadEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcReadEndFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcReadEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcReadEndFtraceEventDefaultTypeInternal _TrustyIpcReadEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyIpcRxFtraceEvent::TrustyIpcRxFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.srv_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.buf_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.chan_)*/ 0u
} {}
struct TrustyIpcRxFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyIpcRxFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyIpcRxFtraceEventDefaultTypeInternal() {}
  union {
    TrustyIpcRxFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyIpcRxFtraceEventDefaultTypeInternal _TrustyIpcRxFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TrustyEnqueueNopFtraceEvent::TrustyEnqueueNopFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arg1_)*/ 0u

  , /*decltype(_impl_.arg2_)*/ 0u

  , /*decltype(_impl_.arg3_)*/ 0u
} {}
struct TrustyEnqueueNopFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrustyEnqueueNopFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrustyEnqueueNopFtraceEventDefaultTypeInternal() {}
  union {
    TrustyEnqueueNopFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrustyEnqueueNopFtraceEventDefaultTypeInternal _TrustyEnqueueNopFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[18];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcFtraceEvent, _impl_.r0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcFtraceEvent, _impl_.r1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcFtraceEvent, _impl_.r2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcFtraceEvent, _impl_.r3_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcDoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcDoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustySmcDoneFtraceEvent, _impl_.ret_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32FtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32FtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32FtraceEvent, _impl_.r0_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32FtraceEvent, _impl_.r1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32FtraceEvent, _impl_.r2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32FtraceEvent, _impl_.r3_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32DoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32DoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyStdCall32DoneFtraceEvent, _impl_.ret_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryFtraceEvent, _impl_.lend_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryFtraceEvent, _impl_.nents_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _impl_.handle_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _impl_.lend_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _impl_.nents_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent, _impl_.ret_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryFtraceEvent, _impl_.id_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent, _impl_.ret_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIrqFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIrqFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIrqFtraceEvent, _impl_.irq_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcHandleEventFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcHandleEventFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcHandleEventFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcHandleEventFtraceEvent, _impl_.event_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcHandleEventFtraceEvent, _impl_.srv_name_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectFtraceEvent, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectFtraceEvent, _impl_.state_),
    1,
    0,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectEndFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectEndFtraceEvent, _impl_.err_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcConnectEndFtraceEvent, _impl_.state_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_.buf_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_.kind_shm_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_.len_or_err_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_.shm_cnt_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcWriteFtraceEvent, _impl_.srv_name_),
    1,
    2,
    3,
    5,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcPollFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcPollFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcPollFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcPollFtraceEvent, _impl_.poll_mask_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcPollFtraceEvent, _impl_.srv_name_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadFtraceEvent, _impl_.srv_name_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _impl_.buf_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _impl_.len_or_err_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _impl_.shm_cnt_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcReadEndFtraceEvent, _impl_.srv_name_),
    1,
    2,
    3,
    4,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcRxFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcRxFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcRxFtraceEvent, _impl_.buf_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcRxFtraceEvent, _impl_.chan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyIpcRxFtraceEvent, _impl_.srv_name_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyEnqueueNopFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyEnqueueNopFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyEnqueueNopFtraceEvent, _impl_.arg1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyEnqueueNopFtraceEvent, _impl_.arg2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::TrustyEnqueueNopFtraceEvent, _impl_.arg3_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::perfetto::protos::TrustySmcFtraceEvent)},
        { 16, 25, -1, sizeof(::perfetto::protos::TrustySmcDoneFtraceEvent)},
        { 26, 38, -1, sizeof(::perfetto::protos::TrustyStdCall32FtraceEvent)},
        { 42, 51, -1, sizeof(::perfetto::protos::TrustyStdCall32DoneFtraceEvent)},
        { 52, 63, -1, sizeof(::perfetto::protos::TrustyShareMemoryFtraceEvent)},
        { 66, 79, -1, sizeof(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent)},
        { 84, 93, -1, sizeof(::perfetto::protos::TrustyReclaimMemoryFtraceEvent)},
        { 94, 104, -1, sizeof(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent)},
        { 106, 115, -1, sizeof(::perfetto::protos::TrustyIrqFtraceEvent)},
        { 116, 127, -1, sizeof(::perfetto::protos::TrustyIpcHandleEventFtraceEvent)},
        { 130, 141, -1, sizeof(::perfetto::protos::TrustyIpcConnectFtraceEvent)},
        { 144, 155, -1, sizeof(::perfetto::protos::TrustyIpcConnectEndFtraceEvent)},
        { 158, 172, -1, sizeof(::perfetto::protos::TrustyIpcWriteFtraceEvent)},
        { 178, 189, -1, sizeof(::perfetto::protos::TrustyIpcPollFtraceEvent)},
        { 192, 202, -1, sizeof(::perfetto::protos::TrustyIpcReadFtraceEvent)},
        { 204, 217, -1, sizeof(::perfetto::protos::TrustyIpcReadEndFtraceEvent)},
        { 222, 233, -1, sizeof(::perfetto::protos::TrustyIpcRxFtraceEvent)},
        { 236, 247, -1, sizeof(::perfetto::protos::TrustyEnqueueNopFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_TrustySmcFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustySmcDoneFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyStdCall32FtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyStdCall32DoneFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyShareMemoryFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyShareMemoryDoneFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyReclaimMemoryFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyReclaimMemoryDoneFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIrqFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcHandleEventFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcConnectFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcConnectEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcWriteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcPollFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcReadFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcReadEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyIpcRxFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_TrustyEnqueueNopFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)protos/perfetto/trace/ftrace/trusty.pr"
    "oto\022\017perfetto.protos\"F\n\024TrustySmcFtraceE"
    "vent\022\n\n\002r0\030\001 \001(\004\022\n\n\002r1\030\002 \001(\004\022\n\n\002r2\030\003 \001(\004"
    "\022\n\n\002r3\030\004 \001(\004\"\'\n\030TrustySmcDoneFtraceEvent"
    "\022\013\n\003ret\030\001 \001(\004\"L\n\032TrustyStdCall32FtraceEv"
    "ent\022\n\n\002r0\030\001 \001(\004\022\n\n\002r1\030\002 \001(\004\022\n\n\002r2\030\003 \001(\004\022"
    "\n\n\002r3\030\004 \001(\004\"-\n\036TrustyStdCall32DoneFtrace"
    "Event\022\013\n\003ret\030\001 \001(\003\"H\n\034TrustyShareMemoryF"
    "traceEvent\022\013\n\003len\030\001 \001(\004\022\014\n\004lend\030\002 \001(\r\022\r\n"
    "\005nents\030\003 \001(\r\"i\n TrustyShareMemoryDoneFtr"
    "aceEvent\022\016\n\006handle\030\001 \001(\004\022\013\n\003len\030\002 \001(\004\022\014\n"
    "\004lend\030\003 \001(\r\022\r\n\005nents\030\004 \001(\r\022\013\n\003ret\030\005 \001(\005\""
    ",\n\036TrustyReclaimMemoryFtraceEvent\022\n\n\002id\030"
    "\001 \001(\004\"=\n\"TrustyReclaimMemoryDoneFtraceEv"
    "ent\022\n\n\002id\030\001 \001(\004\022\013\n\003ret\030\002 \001(\005\"#\n\024TrustyIr"
    "qFtraceEvent\022\013\n\003irq\030\001 \001(\005\"S\n\037TrustyIpcHa"
    "ndleEventFtraceEvent\022\014\n\004chan\030\001 \001(\r\022\020\n\010ev"
    "ent_id\030\002 \001(\r\022\020\n\010srv_name\030\003 \001(\t\"H\n\033Trusty"
    "IpcConnectFtraceEvent\022\014\n\004chan\030\001 \001(\r\022\014\n\004p"
    "ort\030\002 \001(\t\022\r\n\005state\030\003 \001(\005\"J\n\036TrustyIpcCon"
    "nectEndFtraceEvent\022\014\n\004chan\030\001 \001(\r\022\013\n\003err\030"
    "\002 \001(\005\022\r\n\005state\030\003 \001(\005\"\202\001\n\031TrustyIpcWriteF"
    "traceEvent\022\016\n\006buf_id\030\001 \001(\004\022\014\n\004chan\030\002 \001(\r"
    "\022\020\n\010kind_shm\030\003 \001(\005\022\022\n\nlen_or_err\030\004 \001(\005\022\017"
    "\n\007shm_cnt\030\005 \001(\004\022\020\n\010srv_name\030\006 \001(\t\"M\n\030Tru"
    "styIpcPollFtraceEvent\022\014\n\004chan\030\001 \001(\r\022\021\n\tp"
    "oll_mask\030\002 \001(\r\022\020\n\010srv_name\030\003 \001(\t\":\n\030Trus"
    "tyIpcReadFtraceEvent\022\014\n\004chan\030\001 \001(\r\022\020\n\010sr"
    "v_name\030\002 \001(\t\"r\n\033TrustyIpcReadEndFtraceEv"
    "ent\022\016\n\006buf_id\030\001 \001(\004\022\014\n\004chan\030\002 \001(\r\022\022\n\nlen"
    "_or_err\030\003 \001(\005\022\017\n\007shm_cnt\030\004 \001(\004\022\020\n\010srv_na"
    "me\030\005 \001(\t\"H\n\026TrustyIpcRxFtraceEvent\022\016\n\006bu"
    "f_id\030\001 \001(\004\022\014\n\004chan\030\002 \001(\r\022\020\n\010srv_name\030\003 \001"
    "(\t\"G\n\033TrustyEnqueueNopFtraceEvent\022\014\n\004arg"
    "1\030\001 \001(\r\022\014\n\004arg2\030\002 \001(\r\022\014\n\004arg3\030\003 \001(\r"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto = {
    false,
    false,
    1395,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto,
    "protos/perfetto/trace/ftrace/trusty.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
    nullptr,
    0,
    18,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class TrustySmcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustySmcFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustySmcFtraceEvent, _impl_._has_bits_);
  static void set_has_r0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_r3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TrustySmcFtraceEvent::TrustySmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustySmcFtraceEvent)
}
TrustySmcFtraceEvent::TrustySmcFtraceEvent(const TrustySmcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustySmcFtraceEvent)
}

inline void TrustySmcFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.r0_) { ::uint64_t{0u} }

    , decltype(_impl_.r1_) { ::uint64_t{0u} }

    , decltype(_impl_.r2_) { ::uint64_t{0u} }

    , decltype(_impl_.r3_) { ::uint64_t{0u} }

  };
}

TrustySmcFtraceEvent::~TrustySmcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustySmcFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustySmcFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustySmcFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustySmcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustySmcFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.r0_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.r3_) -
        reinterpret_cast<char*>(&_impl_.r0_)) + sizeof(_impl_.r3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustySmcFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 r0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_r0(&has_bits);
          _impl_.r0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 r1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_r1(&has_bits);
          _impl_.r1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 r2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_r2(&has_bits);
          _impl_.r2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 r3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_r3(&has_bits);
          _impl_.r3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustySmcFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustySmcFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 r0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_r0(), target);
  }

  // optional uint64 r1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_r1(), target);
  }

  // optional uint64 r2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_r2(), target);
  }

  // optional uint64 r3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_r3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustySmcFtraceEvent)
  return target;
}

::size_t TrustySmcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustySmcFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 r0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r0());
    }

    // optional uint64 r1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r1());
    }

    // optional uint64 r2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r2());
    }

    // optional uint64 r3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustySmcFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustySmcFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustySmcFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustySmcFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustySmcFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustySmcFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustySmcFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.r0_ = from._impl_.r0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.r1_ = from._impl_.r1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.r2_ = from._impl_.r2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.r3_ = from._impl_.r3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustySmcFtraceEvent::CopyFrom(const TrustySmcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustySmcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustySmcFtraceEvent::IsInitialized() const {
  return true;
}

void TrustySmcFtraceEvent::InternalSwap(TrustySmcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustySmcFtraceEvent, _impl_.r3_)
      + sizeof(TrustySmcFtraceEvent::_impl_.r3_)
      - PROTOBUF_FIELD_OFFSET(TrustySmcFtraceEvent, _impl_.r0_)>(
          reinterpret_cast<char*>(&_impl_.r0_),
          reinterpret_cast<char*>(&other->_impl_.r0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustySmcFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[0]);
}
// ===================================================================

class TrustySmcDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustySmcDoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustySmcDoneFtraceEvent, _impl_._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustySmcDoneFtraceEvent::TrustySmcDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustySmcDoneFtraceEvent)
}
TrustySmcDoneFtraceEvent::TrustySmcDoneFtraceEvent(const TrustySmcDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustySmcDoneFtraceEvent)
}

inline void TrustySmcDoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ret_) { ::uint64_t{0u} }

  };
}

TrustySmcDoneFtraceEvent::~TrustySmcDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustySmcDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustySmcDoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustySmcDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustySmcDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ret_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustySmcDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustySmcDoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustySmcDoneFtraceEvent)
  return target;
}

::size_t TrustySmcDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 ret = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustySmcDoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustySmcDoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustySmcDoneFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustySmcDoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustySmcDoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustySmcDoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_ret(from._internal_ret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustySmcDoneFtraceEvent::CopyFrom(const TrustySmcDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustySmcDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustySmcDoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustySmcDoneFtraceEvent::InternalSwap(TrustySmcDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.ret_, other->_impl_.ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustySmcDoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[1]);
}
// ===================================================================

class TrustyStdCall32FtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyStdCall32FtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyStdCall32FtraceEvent, _impl_._has_bits_);
  static void set_has_r0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_r3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TrustyStdCall32FtraceEvent::TrustyStdCall32FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyStdCall32FtraceEvent)
}
TrustyStdCall32FtraceEvent::TrustyStdCall32FtraceEvent(const TrustyStdCall32FtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyStdCall32FtraceEvent)
}

inline void TrustyStdCall32FtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.r0_) { ::uint64_t{0u} }

    , decltype(_impl_.r1_) { ::uint64_t{0u} }

    , decltype(_impl_.r2_) { ::uint64_t{0u} }

    , decltype(_impl_.r3_) { ::uint64_t{0u} }

  };
}

TrustyStdCall32FtraceEvent::~TrustyStdCall32FtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyStdCall32FtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyStdCall32FtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyStdCall32FtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyStdCall32FtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.r0_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.r3_) -
        reinterpret_cast<char*>(&_impl_.r0_)) + sizeof(_impl_.r3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyStdCall32FtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 r0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_r0(&has_bits);
          _impl_.r0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 r1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_r1(&has_bits);
          _impl_.r1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 r2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_r2(&has_bits);
          _impl_.r2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 r3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_r3(&has_bits);
          _impl_.r3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyStdCall32FtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 r0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_r0(), target);
  }

  // optional uint64 r1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_r1(), target);
  }

  // optional uint64 r2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_r2(), target);
  }

  // optional uint64 r3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_r3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyStdCall32FtraceEvent)
  return target;
}

::size_t TrustyStdCall32FtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 r0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r0());
    }

    // optional uint64 r1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r1());
    }

    // optional uint64 r2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r2());
    }

    // optional uint64 r3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_r3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyStdCall32FtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyStdCall32FtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyStdCall32FtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyStdCall32FtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyStdCall32FtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyStdCall32FtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.r0_ = from._impl_.r0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.r1_ = from._impl_.r1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.r2_ = from._impl_.r2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.r3_ = from._impl_.r3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyStdCall32FtraceEvent::CopyFrom(const TrustyStdCall32FtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyStdCall32FtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyStdCall32FtraceEvent::IsInitialized() const {
  return true;
}

void TrustyStdCall32FtraceEvent::InternalSwap(TrustyStdCall32FtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyStdCall32FtraceEvent, _impl_.r3_)
      + sizeof(TrustyStdCall32FtraceEvent::_impl_.r3_)
      - PROTOBUF_FIELD_OFFSET(TrustyStdCall32FtraceEvent, _impl_.r0_)>(
          reinterpret_cast<char*>(&_impl_.r0_),
          reinterpret_cast<char*>(&other->_impl_.r0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyStdCall32FtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[2]);
}
// ===================================================================

class TrustyStdCall32DoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyStdCall32DoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyStdCall32DoneFtraceEvent, _impl_._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyStdCall32DoneFtraceEvent::TrustyStdCall32DoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
}
TrustyStdCall32DoneFtraceEvent::TrustyStdCall32DoneFtraceEvent(const TrustyStdCall32DoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
}

inline void TrustyStdCall32DoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ret_) { ::int64_t{0} }

  };
}

TrustyStdCall32DoneFtraceEvent::~TrustyStdCall32DoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyStdCall32DoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyStdCall32DoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyStdCall32DoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ret_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyStdCall32DoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyStdCall32DoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  return target;
}

::size_t TrustyStdCall32DoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 ret = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyStdCall32DoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyStdCall32DoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyStdCall32DoneFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyStdCall32DoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyStdCall32DoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyStdCall32DoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_ret(from._internal_ret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyStdCall32DoneFtraceEvent::CopyFrom(const TrustyStdCall32DoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyStdCall32DoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyStdCall32DoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyStdCall32DoneFtraceEvent::InternalSwap(TrustyStdCall32DoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.ret_, other->_impl_.ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyStdCall32DoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[3]);
}
// ===================================================================

class TrustyShareMemoryFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyShareMemoryFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyShareMemoryFtraceEvent, _impl_._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nents(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyShareMemoryFtraceEvent::TrustyShareMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyShareMemoryFtraceEvent)
}
TrustyShareMemoryFtraceEvent::TrustyShareMemoryFtraceEvent(const TrustyShareMemoryFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyShareMemoryFtraceEvent)
}

inline void TrustyShareMemoryFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.len_) { ::uint64_t{0u} }

    , decltype(_impl_.lend_) { 0u }

    , decltype(_impl_.nents_) { 0u }

  };
}

TrustyShareMemoryFtraceEvent::~TrustyShareMemoryFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyShareMemoryFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyShareMemoryFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyShareMemoryFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyShareMemoryFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.len_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nents_) -
        reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.nents_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyShareMemoryFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 lend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_lend(&has_bits);
          _impl_.lend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_nents(&has_bits);
          _impl_.nents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyShareMemoryFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 len = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_len(), target);
  }

  // optional uint32 lend = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_lend(), target);
  }

  // optional uint32 nents = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_nents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyShareMemoryFtraceEvent)
  return target;
}

::size_t TrustyShareMemoryFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 len = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_len());
    }

    // optional uint32 lend = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_lend());
    }

    // optional uint32 nents = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nents());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyShareMemoryFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyShareMemoryFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyShareMemoryFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyShareMemoryFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyShareMemoryFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyShareMemoryFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lend_ = from._impl_.lend_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.nents_ = from._impl_.nents_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyShareMemoryFtraceEvent::CopyFrom(const TrustyShareMemoryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyShareMemoryFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyShareMemoryFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyShareMemoryFtraceEvent::InternalSwap(TrustyShareMemoryFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyShareMemoryFtraceEvent, _impl_.nents_)
      + sizeof(TrustyShareMemoryFtraceEvent::_impl_.nents_)
      - PROTOBUF_FIELD_OFFSET(TrustyShareMemoryFtraceEvent, _impl_.len_)>(
          reinterpret_cast<char*>(&_impl_.len_),
          reinterpret_cast<char*>(&other->_impl_.len_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyShareMemoryFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[4]);
}
// ===================================================================

class TrustyShareMemoryDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyShareMemoryDoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyShareMemoryDoneFtraceEvent, _impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nents(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrustyShareMemoryDoneFtraceEvent::TrustyShareMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
}
TrustyShareMemoryDoneFtraceEvent::TrustyShareMemoryDoneFtraceEvent(const TrustyShareMemoryDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
}

inline void TrustyShareMemoryDoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_) { ::uint64_t{0u} }

    , decltype(_impl_.len_) { ::uint64_t{0u} }

    , decltype(_impl_.lend_) { 0u }

    , decltype(_impl_.nents_) { 0u }

    , decltype(_impl_.ret_) { 0 }

  };
}

TrustyShareMemoryDoneFtraceEvent::~TrustyShareMemoryDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyShareMemoryDoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyShareMemoryDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyShareMemoryDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.handle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ret_) -
        reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.ret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyShareMemoryDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 lend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_lend(&has_bits);
          _impl_.lend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_nents(&has_bits);
          _impl_.nents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyShareMemoryDoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_handle(), target);
  }

  // optional uint64 len = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_len(), target);
  }

  // optional uint32 lend = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_lend(), target);
  }

  // optional uint32 nents = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_nents(), target);
  }

  // optional int32 ret = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  return target;
}

::size_t TrustyShareMemoryDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_handle());
    }

    // optional uint64 len = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_len());
    }

    // optional uint32 lend = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_lend());
    }

    // optional uint32 nents = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nents());
    }

    // optional int32 ret = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyShareMemoryDoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyShareMemoryDoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyShareMemoryDoneFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyShareMemoryDoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyShareMemoryDoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyShareMemoryDoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lend_ = from._impl_.lend_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nents_ = from._impl_.nents_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyShareMemoryDoneFtraceEvent::CopyFrom(const TrustyShareMemoryDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyShareMemoryDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyShareMemoryDoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyShareMemoryDoneFtraceEvent::InternalSwap(TrustyShareMemoryDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyShareMemoryDoneFtraceEvent, _impl_.ret_)
      + sizeof(TrustyShareMemoryDoneFtraceEvent::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(TrustyShareMemoryDoneFtraceEvent, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyShareMemoryDoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[5]);
}
// ===================================================================

class TrustyReclaimMemoryFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyReclaimMemoryFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyReclaimMemoryFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyReclaimMemoryFtraceEvent::TrustyReclaimMemoryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
}
TrustyReclaimMemoryFtraceEvent::TrustyReclaimMemoryFtraceEvent(const TrustyReclaimMemoryFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
}

inline void TrustyReclaimMemoryFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

  };
}

TrustyReclaimMemoryFtraceEvent::~TrustyReclaimMemoryFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyReclaimMemoryFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyReclaimMemoryFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyReclaimMemoryFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyReclaimMemoryFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyReclaimMemoryFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  return target;
}

::size_t TrustyReclaimMemoryFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyReclaimMemoryFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyReclaimMemoryFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyReclaimMemoryFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyReclaimMemoryFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyReclaimMemoryFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyReclaimMemoryFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyReclaimMemoryFtraceEvent::CopyFrom(const TrustyReclaimMemoryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyReclaimMemoryFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyReclaimMemoryFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyReclaimMemoryFtraceEvent::InternalSwap(TrustyReclaimMemoryFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyReclaimMemoryFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[6]);
}
// ===================================================================

class TrustyReclaimMemoryDoneFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyReclaimMemoryDoneFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyReclaimMemoryDoneFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TrustyReclaimMemoryDoneFtraceEvent::TrustyReclaimMemoryDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
}
TrustyReclaimMemoryDoneFtraceEvent::TrustyReclaimMemoryDoneFtraceEvent(const TrustyReclaimMemoryDoneFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
}

inline void TrustyReclaimMemoryDoneFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.ret_) { 0 }

  };
}

TrustyReclaimMemoryDoneFtraceEvent::~TrustyReclaimMemoryDoneFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyReclaimMemoryDoneFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyReclaimMemoryDoneFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyReclaimMemoryDoneFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ret_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyReclaimMemoryDoneFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyReclaimMemoryDoneFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // optional int32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  return target;
}

::size_t TrustyReclaimMemoryDoneFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
    }

    // optional int32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyReclaimMemoryDoneFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyReclaimMemoryDoneFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyReclaimMemoryDoneFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyReclaimMemoryDoneFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyReclaimMemoryDoneFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyReclaimMemoryDoneFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyReclaimMemoryDoneFtraceEvent::CopyFrom(const TrustyReclaimMemoryDoneFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyReclaimMemoryDoneFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyReclaimMemoryDoneFtraceEvent::InternalSwap(TrustyReclaimMemoryDoneFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyReclaimMemoryDoneFtraceEvent, _impl_.ret_)
      + sizeof(TrustyReclaimMemoryDoneFtraceEvent::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(TrustyReclaimMemoryDoneFtraceEvent, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyReclaimMemoryDoneFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[7]);
}
// ===================================================================

class TrustyIrqFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIrqFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIrqFtraceEvent, _impl_._has_bits_);
  static void set_has_irq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIrqFtraceEvent::TrustyIrqFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIrqFtraceEvent)
}
TrustyIrqFtraceEvent::TrustyIrqFtraceEvent(const TrustyIrqFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIrqFtraceEvent)
}

inline void TrustyIrqFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.irq_) { 0 }

  };
}

TrustyIrqFtraceEvent::~TrustyIrqFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIrqFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIrqFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyIrqFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIrqFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIrqFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.irq_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIrqFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 irq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_irq(&has_bits);
          _impl_.irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIrqFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIrqFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 irq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_irq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIrqFtraceEvent)
  return target;
}

::size_t TrustyIrqFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIrqFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 irq = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_irq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIrqFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIrqFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIrqFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIrqFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIrqFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIrqFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIrqFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_irq(from._internal_irq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIrqFtraceEvent::CopyFrom(const TrustyIrqFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIrqFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIrqFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIrqFtraceEvent::InternalSwap(TrustyIrqFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.irq_, other->_impl_.irq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIrqFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[8]);
}
// ===================================================================

class TrustyIpcHandleEventFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcHandleEventFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcHandleEventFtraceEvent, _impl_._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcHandleEventFtraceEvent::TrustyIpcHandleEventFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
}
TrustyIpcHandleEventFtraceEvent::TrustyIpcHandleEventFtraceEvent(const TrustyIpcHandleEventFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcHandleEventFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.chan_) {}

    , decltype(_impl_.event_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.srv_name_.Set(from._internal_srv_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chan_, &from._impl_.chan_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
}

inline void TrustyIpcHandleEventFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.chan_) { 0u }

    , decltype(_impl_.event_id_) { 0u }

  };
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcHandleEventFtraceEvent::~TrustyIpcHandleEventFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcHandleEventFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srv_name_.Destroy();
}

void TrustyIpcHandleEventFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcHandleEventFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.chan_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcHandleEventFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string srv_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcHandleEventFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_chan(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_event_id(), target);
  }

  // optional string srv_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_srv_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcHandleEventFtraceEvent.srv_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  return target;
}

::size_t TrustyIpcHandleEventFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string srv_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_srv_name());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcHandleEventFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcHandleEventFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcHandleEventFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcHandleEventFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcHandleEventFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcHandleEventFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcHandleEventFtraceEvent::CopyFrom(const TrustyIpcHandleEventFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcHandleEventFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcHandleEventFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcHandleEventFtraceEvent::InternalSwap(TrustyIpcHandleEventFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srv_name_, lhs_arena,
                                       &other->_impl_.srv_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcHandleEventFtraceEvent, _impl_.event_id_)
      + sizeof(TrustyIpcHandleEventFtraceEvent::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcHandleEventFtraceEvent, _impl_.chan_)>(
          reinterpret_cast<char*>(&_impl_.chan_),
          reinterpret_cast<char*>(&other->_impl_.chan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcHandleEventFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[9]);
}
// ===================================================================

class TrustyIpcConnectFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcConnectFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcConnectFtraceEvent, _impl_._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyIpcConnectFtraceEvent::TrustyIpcConnectFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcConnectFtraceEvent)
}
TrustyIpcConnectFtraceEvent::TrustyIpcConnectFtraceEvent(const TrustyIpcConnectFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcConnectFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_) {}

    , decltype(_impl_.chan_) {}

    , decltype(_impl_.state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chan_, &from._impl_.chan_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcConnectFtraceEvent)
}

inline void TrustyIpcConnectFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_) {}

    , decltype(_impl_.chan_) { 0u }

    , decltype(_impl_.state_) { 0 }

  };
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcConnectFtraceEvent::~TrustyIpcConnectFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcConnectFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcConnectFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_.Destroy();
}

void TrustyIpcConnectFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcConnectFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.port_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.chan_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcConnectFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcConnectFtraceEvent.port");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcConnectFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_chan(), target);
  }

  // optional string port = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcConnectFtraceEvent.port");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcConnectFtraceEvent)
  return target;
}

::size_t TrustyIpcConnectFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string port = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_port());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

    // optional int32 state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcConnectFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcConnectFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcConnectFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcConnectFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcConnectFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcConnectFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_port(from._internal_port());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcConnectFtraceEvent::CopyFrom(const TrustyIpcConnectFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcConnectFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcConnectFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcConnectFtraceEvent::InternalSwap(TrustyIpcConnectFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcConnectFtraceEvent, _impl_.state_)
      + sizeof(TrustyIpcConnectFtraceEvent::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcConnectFtraceEvent, _impl_.chan_)>(
          reinterpret_cast<char*>(&_impl_.chan_),
          reinterpret_cast<char*>(&other->_impl_.chan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcConnectFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[10]);
}
// ===================================================================

class TrustyIpcConnectEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcConnectEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcConnectEndFtraceEvent, _impl_._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyIpcConnectEndFtraceEvent::TrustyIpcConnectEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
}
TrustyIpcConnectEndFtraceEvent::TrustyIpcConnectEndFtraceEvent(const TrustyIpcConnectEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
}

inline void TrustyIpcConnectEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chan_) { 0u }

    , decltype(_impl_.err_) { 0 }

    , decltype(_impl_.state_) { 0 }

  };
}

TrustyIpcConnectEndFtraceEvent::~TrustyIpcConnectEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcConnectEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyIpcConnectEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcConnectEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.chan_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcConnectEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_err(&has_bits);
          _impl_.err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcConnectEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_chan(), target);
  }

  // optional int32 err = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_err(), target);
  }

  // optional int32 state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  return target;
}

::size_t TrustyIpcConnectEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

    // optional int32 err = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_err());
    }

    // optional int32 state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcConnectEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcConnectEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcConnectEndFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcConnectEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcConnectEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcConnectEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.err_ = from._impl_.err_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcConnectEndFtraceEvent::CopyFrom(const TrustyIpcConnectEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcConnectEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcConnectEndFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcConnectEndFtraceEvent::InternalSwap(TrustyIpcConnectEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcConnectEndFtraceEvent, _impl_.state_)
      + sizeof(TrustyIpcConnectEndFtraceEvent::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcConnectEndFtraceEvent, _impl_.chan_)>(
          reinterpret_cast<char*>(&_impl_.chan_),
          reinterpret_cast<char*>(&other->_impl_.chan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcConnectEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[11]);
}
// ===================================================================

class TrustyIpcWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcWriteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcWriteFtraceEvent, _impl_._has_bits_);
  static void set_has_buf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kind_shm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_len_or_err(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shm_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcWriteFtraceEvent::TrustyIpcWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcWriteFtraceEvent)
}
TrustyIpcWriteFtraceEvent::TrustyIpcWriteFtraceEvent(const TrustyIpcWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcWriteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.buf_id_) {}

    , decltype(_impl_.chan_) {}

    , decltype(_impl_.kind_shm_) {}

    , decltype(_impl_.shm_cnt_) {}

    , decltype(_impl_.len_or_err_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.srv_name_.Set(from._internal_srv_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buf_id_, &from._impl_.buf_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.len_or_err_) -
    reinterpret_cast<char*>(&_impl_.buf_id_)) + sizeof(_impl_.len_or_err_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcWriteFtraceEvent)
}

inline void TrustyIpcWriteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.buf_id_) { ::uint64_t{0u} }

    , decltype(_impl_.chan_) { 0u }

    , decltype(_impl_.kind_shm_) { 0 }

    , decltype(_impl_.shm_cnt_) { ::uint64_t{0u} }

    , decltype(_impl_.len_or_err_) { 0 }

  };
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcWriteFtraceEvent::~TrustyIpcWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcWriteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srv_name_.Destroy();
}

void TrustyIpcWriteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.buf_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.len_or_err_) -
        reinterpret_cast<char*>(&_impl_.buf_id_)) + sizeof(_impl_.len_or_err_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buf_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_buf_id(&has_bits);
          _impl_.buf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 chan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kind_shm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_kind_shm(&has_bits);
          _impl_.kind_shm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 len_or_err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_len_or_err(&has_bits);
          _impl_.len_or_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shm_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_shm_cnt(&has_bits);
          _impl_.shm_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string srv_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcWriteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 buf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_buf_id(), target);
  }

  // optional uint32 chan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_chan(), target);
  }

  // optional int32 kind_shm = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_kind_shm(), target);
  }

  // optional int32 len_or_err = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_len_or_err(), target);
  }

  // optional uint64 shm_cnt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_shm_cnt(), target);
  }

  // optional string srv_name = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_srv_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcWriteFtraceEvent.srv_name");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcWriteFtraceEvent)
  return target;
}

::size_t TrustyIpcWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string srv_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_srv_name());
    }

    // optional uint64 buf_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_buf_id());
    }

    // optional uint32 chan = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

    // optional int32 kind_shm = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kind_shm());
    }

    // optional uint64 shm_cnt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shm_cnt());
    }

    // optional int32 len_or_err = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_len_or_err());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcWriteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcWriteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcWriteFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcWriteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcWriteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcWriteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.buf_id_ = from._impl_.buf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kind_shm_ = from._impl_.kind_shm_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shm_cnt_ = from._impl_.shm_cnt_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.len_or_err_ = from._impl_.len_or_err_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcWriteFtraceEvent::CopyFrom(const TrustyIpcWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcWriteFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcWriteFtraceEvent::InternalSwap(TrustyIpcWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srv_name_, lhs_arena,
                                       &other->_impl_.srv_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcWriteFtraceEvent, _impl_.len_or_err_)
      + sizeof(TrustyIpcWriteFtraceEvent::_impl_.len_or_err_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcWriteFtraceEvent, _impl_.buf_id_)>(
          reinterpret_cast<char*>(&_impl_.buf_id_),
          reinterpret_cast<char*>(&other->_impl_.buf_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcWriteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[12]);
}
// ===================================================================

class TrustyIpcPollFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcPollFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcPollFtraceEvent, _impl_._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_poll_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcPollFtraceEvent::TrustyIpcPollFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcPollFtraceEvent)
}
TrustyIpcPollFtraceEvent::TrustyIpcPollFtraceEvent(const TrustyIpcPollFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcPollFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.chan_) {}

    , decltype(_impl_.poll_mask_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.srv_name_.Set(from._internal_srv_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chan_, &from._impl_.chan_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.poll_mask_) -
    reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.poll_mask_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcPollFtraceEvent)
}

inline void TrustyIpcPollFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.chan_) { 0u }

    , decltype(_impl_.poll_mask_) { 0u }

  };
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcPollFtraceEvent::~TrustyIpcPollFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcPollFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcPollFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srv_name_.Destroy();
}

void TrustyIpcPollFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcPollFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.chan_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.poll_mask_) -
        reinterpret_cast<char*>(&_impl_.chan_)) + sizeof(_impl_.poll_mask_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcPollFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 poll_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_poll_mask(&has_bits);
          _impl_.poll_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string srv_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcPollFtraceEvent.srv_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcPollFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_chan(), target);
  }

  // optional uint32 poll_mask = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_poll_mask(), target);
  }

  // optional string srv_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_srv_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcPollFtraceEvent.srv_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcPollFtraceEvent)
  return target;
}

::size_t TrustyIpcPollFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string srv_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_srv_name());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

    // optional uint32 poll_mask = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_poll_mask());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcPollFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcPollFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcPollFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcPollFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcPollFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcPollFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.poll_mask_ = from._impl_.poll_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcPollFtraceEvent::CopyFrom(const TrustyIpcPollFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcPollFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcPollFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcPollFtraceEvent::InternalSwap(TrustyIpcPollFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srv_name_, lhs_arena,
                                       &other->_impl_.srv_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcPollFtraceEvent, _impl_.poll_mask_)
      + sizeof(TrustyIpcPollFtraceEvent::_impl_.poll_mask_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcPollFtraceEvent, _impl_.chan_)>(
          reinterpret_cast<char*>(&_impl_.chan_),
          reinterpret_cast<char*>(&other->_impl_.chan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcPollFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[13]);
}
// ===================================================================

class TrustyIpcReadFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcReadFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcReadFtraceEvent, _impl_._has_bits_);
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcReadFtraceEvent::TrustyIpcReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcReadFtraceEvent)
}
TrustyIpcReadFtraceEvent::TrustyIpcReadFtraceEvent(const TrustyIpcReadFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcReadFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.chan_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.srv_name_.Set(from._internal_srv_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.chan_ = from._impl_.chan_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcReadFtraceEvent)
}

inline void TrustyIpcReadFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.chan_) { 0u }

  };
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcReadFtraceEvent::~TrustyIpcReadFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcReadFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcReadFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srv_name_.Destroy();
}

void TrustyIpcReadFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcReadFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.srv_name_.ClearNonDefaultToEmpty();
  }
  _impl_.chan_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcReadFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 chan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string srv_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcReadFtraceEvent.srv_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcReadFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chan = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_chan(), target);
  }

  // optional string srv_name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_srv_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcReadFtraceEvent.srv_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcReadFtraceEvent)
  return target;
}

::size_t TrustyIpcReadFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string srv_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_srv_name());
    }

    // optional uint32 chan = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcReadFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcReadFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcReadFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcReadFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcReadFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcReadFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcReadFtraceEvent::CopyFrom(const TrustyIpcReadFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcReadFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcReadFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcReadFtraceEvent::InternalSwap(TrustyIpcReadFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srv_name_, lhs_arena,
                                       &other->_impl_.srv_name_, rhs_arena);

  swap(_impl_.chan_, other->_impl_.chan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcReadFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[14]);
}
// ===================================================================

class TrustyIpcReadEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcReadEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcReadEndFtraceEvent, _impl_._has_bits_);
  static void set_has_buf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_len_or_err(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shm_cnt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcReadEndFtraceEvent::TrustyIpcReadEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcReadEndFtraceEvent)
}
TrustyIpcReadEndFtraceEvent::TrustyIpcReadEndFtraceEvent(const TrustyIpcReadEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcReadEndFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.buf_id_) {}

    , decltype(_impl_.chan_) {}

    , decltype(_impl_.len_or_err_) {}

    , decltype(_impl_.shm_cnt_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.srv_name_.Set(from._internal_srv_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buf_id_, &from._impl_.buf_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.shm_cnt_) -
    reinterpret_cast<char*>(&_impl_.buf_id_)) + sizeof(_impl_.shm_cnt_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcReadEndFtraceEvent)
}

inline void TrustyIpcReadEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.buf_id_) { ::uint64_t{0u} }

    , decltype(_impl_.chan_) { 0u }

    , decltype(_impl_.len_or_err_) { 0 }

    , decltype(_impl_.shm_cnt_) { ::uint64_t{0u} }

  };
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcReadEndFtraceEvent::~TrustyIpcReadEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcReadEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srv_name_.Destroy();
}

void TrustyIpcReadEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcReadEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.buf_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.shm_cnt_) -
        reinterpret_cast<char*>(&_impl_.buf_id_)) + sizeof(_impl_.shm_cnt_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcReadEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buf_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_buf_id(&has_bits);
          _impl_.buf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 chan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 len_or_err = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_len_or_err(&has_bits);
          _impl_.len_or_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shm_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_shm_cnt(&has_bits);
          _impl_.shm_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string srv_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcReadEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 buf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_buf_id(), target);
  }

  // optional uint32 chan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_chan(), target);
  }

  // optional int32 len_or_err = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_len_or_err(), target);
  }

  // optional uint64 shm_cnt = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_shm_cnt(), target);
  }

  // optional string srv_name = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_srv_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcReadEndFtraceEvent.srv_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  return target;
}

::size_t TrustyIpcReadEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string srv_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_srv_name());
    }

    // optional uint64 buf_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_buf_id());
    }

    // optional uint32 chan = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

    // optional int32 len_or_err = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_len_or_err());
    }

    // optional uint64 shm_cnt = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shm_cnt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcReadEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcReadEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcReadEndFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcReadEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcReadEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcReadEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.buf_id_ = from._impl_.buf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.len_or_err_ = from._impl_.len_or_err_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shm_cnt_ = from._impl_.shm_cnt_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcReadEndFtraceEvent::CopyFrom(const TrustyIpcReadEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcReadEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcReadEndFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcReadEndFtraceEvent::InternalSwap(TrustyIpcReadEndFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srv_name_, lhs_arena,
                                       &other->_impl_.srv_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcReadEndFtraceEvent, _impl_.shm_cnt_)
      + sizeof(TrustyIpcReadEndFtraceEvent::_impl_.shm_cnt_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcReadEndFtraceEvent, _impl_.buf_id_)>(
          reinterpret_cast<char*>(&_impl_.buf_id_),
          reinterpret_cast<char*>(&other->_impl_.buf_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcReadEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[15]);
}
// ===================================================================

class TrustyIpcRxFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyIpcRxFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyIpcRxFtraceEvent, _impl_._has_bits_);
  static void set_has_buf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_srv_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrustyIpcRxFtraceEvent::TrustyIpcRxFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyIpcRxFtraceEvent)
}
TrustyIpcRxFtraceEvent::TrustyIpcRxFtraceEvent(const TrustyIpcRxFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrustyIpcRxFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.buf_id_) {}

    , decltype(_impl_.chan_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.srv_name_.Set(from._internal_srv_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buf_id_, &from._impl_.buf_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.chan_) -
    reinterpret_cast<char*>(&_impl_.buf_id_)) + sizeof(_impl_.chan_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyIpcRxFtraceEvent)
}

inline void TrustyIpcRxFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.srv_name_) {}

    , decltype(_impl_.buf_id_) { ::uint64_t{0u} }

    , decltype(_impl_.chan_) { 0u }

  };
  _impl_.srv_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.srv_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrustyIpcRxFtraceEvent::~TrustyIpcRxFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyIpcRxFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyIpcRxFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srv_name_.Destroy();
}

void TrustyIpcRxFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyIpcRxFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.srv_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.buf_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.chan_) -
        reinterpret_cast<char*>(&_impl_.buf_id_)) + sizeof(_impl_.chan_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyIpcRxFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 buf_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_buf_id(&has_bits);
          _impl_.buf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 chan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_chan(&has_bits);
          _impl_.chan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string srv_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_srv_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.TrustyIpcRxFtraceEvent.srv_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyIpcRxFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 buf_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_buf_id(), target);
  }

  // optional uint32 chan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_chan(), target);
  }

  // optional string srv_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_srv_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.TrustyIpcRxFtraceEvent.srv_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyIpcRxFtraceEvent)
  return target;
}

::size_t TrustyIpcRxFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string srv_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_srv_name());
    }

    // optional uint64 buf_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_buf_id());
    }

    // optional uint32 chan = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chan());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyIpcRxFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyIpcRxFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyIpcRxFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyIpcRxFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyIpcRxFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyIpcRxFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_srv_name(from._internal_srv_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.buf_id_ = from._impl_.buf_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chan_ = from._impl_.chan_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyIpcRxFtraceEvent::CopyFrom(const TrustyIpcRxFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyIpcRxFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyIpcRxFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyIpcRxFtraceEvent::InternalSwap(TrustyIpcRxFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.srv_name_, lhs_arena,
                                       &other->_impl_.srv_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyIpcRxFtraceEvent, _impl_.chan_)
      + sizeof(TrustyIpcRxFtraceEvent::_impl_.chan_)
      - PROTOBUF_FIELD_OFFSET(TrustyIpcRxFtraceEvent, _impl_.buf_id_)>(
          reinterpret_cast<char*>(&_impl_.buf_id_),
          reinterpret_cast<char*>(&other->_impl_.buf_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyIpcRxFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[16]);
}
// ===================================================================

class TrustyEnqueueNopFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustyEnqueueNopFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrustyEnqueueNopFtraceEvent, _impl_._has_bits_);
  static void set_has_arg1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arg2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arg3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrustyEnqueueNopFtraceEvent::TrustyEnqueueNopFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TrustyEnqueueNopFtraceEvent)
}
TrustyEnqueueNopFtraceEvent::TrustyEnqueueNopFtraceEvent(const TrustyEnqueueNopFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TrustyEnqueueNopFtraceEvent)
}

inline void TrustyEnqueueNopFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arg1_) { 0u }

    , decltype(_impl_.arg2_) { 0u }

    , decltype(_impl_.arg3_) { 0u }

  };
}

TrustyEnqueueNopFtraceEvent::~TrustyEnqueueNopFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrustyEnqueueNopFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrustyEnqueueNopFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrustyEnqueueNopFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.arg1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.arg3_) -
        reinterpret_cast<char*>(&_impl_.arg1_)) + sizeof(_impl_.arg3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrustyEnqueueNopFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 arg1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_arg1(&has_bits);
          _impl_.arg1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 arg2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_arg2(&has_bits);
          _impl_.arg2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 arg3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_arg3(&has_bits);
          _impl_.arg3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TrustyEnqueueNopFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 arg1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_arg1(), target);
  }

  // optional uint32 arg2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_arg2(), target);
  }

  // optional uint32 arg3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_arg3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  return target;
}

::size_t TrustyEnqueueNopFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 arg1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_arg1());
    }

    // optional uint32 arg2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_arg2());
    }

    // optional uint32 arg3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_arg3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrustyEnqueueNopFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrustyEnqueueNopFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrustyEnqueueNopFtraceEvent::GetClassData() const { return &_class_data_; }


void TrustyEnqueueNopFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrustyEnqueueNopFtraceEvent*>(&to_msg);
  auto& from = static_cast<const TrustyEnqueueNopFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.arg1_ = from._impl_.arg1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.arg2_ = from._impl_.arg2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.arg3_ = from._impl_.arg3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrustyEnqueueNopFtraceEvent::CopyFrom(const TrustyEnqueueNopFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TrustyEnqueueNopFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustyEnqueueNopFtraceEvent::IsInitialized() const {
  return true;
}

void TrustyEnqueueNopFtraceEvent::InternalSwap(TrustyEnqueueNopFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrustyEnqueueNopFtraceEvent, _impl_.arg3_)
      + sizeof(TrustyEnqueueNopFtraceEvent::_impl_.arg3_)
      - PROTOBUF_FIELD_OFFSET(TrustyEnqueueNopFtraceEvent, _impl_.arg1_)>(
          reinterpret_cast<char*>(&_impl_.arg1_),
          reinterpret_cast<char*>(&other->_impl_.arg1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrustyEnqueueNopFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2ftrusty_2eproto[17]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustySmcFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustySmcFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustySmcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustySmcDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustySmcDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustySmcDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyStdCall32FtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyStdCall32FtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyStdCall32FtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyStdCall32DoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyStdCall32DoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyStdCall32DoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyShareMemoryFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyShareMemoryFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyShareMemoryFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyReclaimMemoryFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyReclaimMemoryFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyReclaimMemoryFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIrqFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIrqFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIrqFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcHandleEventFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcHandleEventFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcHandleEventFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcConnectFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcConnectFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcConnectFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcConnectEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcConnectEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcConnectEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcPollFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcPollFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcPollFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcReadFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcReadFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcReadFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcReadEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcReadEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcReadEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyIpcRxFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyIpcRxFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyIpcRxFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TrustyEnqueueNopFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::TrustyEnqueueNopFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TrustyEnqueueNopFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
