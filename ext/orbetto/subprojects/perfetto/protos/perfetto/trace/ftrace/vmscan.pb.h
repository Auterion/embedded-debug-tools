// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/vmscan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
namespace perfetto {
namespace protos {
class MmShrinkSlabEndFtraceEvent;
struct MmShrinkSlabEndFtraceEventDefaultTypeInternal;
extern MmShrinkSlabEndFtraceEventDefaultTypeInternal _MmShrinkSlabEndFtraceEvent_default_instance_;
class MmShrinkSlabStartFtraceEvent;
struct MmShrinkSlabStartFtraceEventDefaultTypeInternal;
extern MmShrinkSlabStartFtraceEventDefaultTypeInternal _MmShrinkSlabStartFtraceEvent_default_instance_;
class MmVmscanDirectReclaimBeginFtraceEvent;
struct MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal;
extern MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal _MmVmscanDirectReclaimBeginFtraceEvent_default_instance_;
class MmVmscanDirectReclaimEndFtraceEvent;
struct MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal;
extern MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal _MmVmscanDirectReclaimEndFtraceEvent_default_instance_;
class MmVmscanKswapdSleepFtraceEvent;
struct MmVmscanKswapdSleepFtraceEventDefaultTypeInternal;
extern MmVmscanKswapdSleepFtraceEventDefaultTypeInternal _MmVmscanKswapdSleepFtraceEvent_default_instance_;
class MmVmscanKswapdWakeFtraceEvent;
struct MmVmscanKswapdWakeFtraceEventDefaultTypeInternal;
extern MmVmscanKswapdWakeFtraceEventDefaultTypeInternal _MmVmscanKswapdWakeFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::MmShrinkSlabEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmShrinkSlabEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::MmShrinkSlabStartFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmShrinkSlabStartFtraceEvent>(Arena*);
template <>
::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent>(Arena*);
template <>
::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent>(Arena*);
template <>
::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmVmscanKswapdSleepFtraceEvent>(Arena*);
template <>
::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MmVmscanKswapdWakeFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class MmVmscanDirectReclaimBeginFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent) */ {
 public:
  inline MmVmscanDirectReclaimBeginFtraceEvent() : MmVmscanDirectReclaimBeginFtraceEvent(nullptr) {}
  ~MmVmscanDirectReclaimBeginFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MmVmscanDirectReclaimBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MmVmscanDirectReclaimBeginFtraceEvent(const MmVmscanDirectReclaimBeginFtraceEvent& from);
  MmVmscanDirectReclaimBeginFtraceEvent(MmVmscanDirectReclaimBeginFtraceEvent&& from) noexcept
    : MmVmscanDirectReclaimBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmVmscanDirectReclaimBeginFtraceEvent& operator=(const MmVmscanDirectReclaimBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmVmscanDirectReclaimBeginFtraceEvent& operator=(MmVmscanDirectReclaimBeginFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MmVmscanDirectReclaimBeginFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MmVmscanDirectReclaimBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmVmscanDirectReclaimBeginFtraceEvent*>(
               &_MmVmscanDirectReclaimBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MmVmscanDirectReclaimBeginFtraceEvent& a, MmVmscanDirectReclaimBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmVmscanDirectReclaimBeginFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MmVmscanDirectReclaimBeginFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MmVmscanDirectReclaimBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MmVmscanDirectReclaimBeginFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MmVmscanDirectReclaimBeginFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MmVmscanDirectReclaimBeginFtraceEvent& from) {
    MmVmscanDirectReclaimBeginFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MmVmscanDirectReclaimBeginFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent";
  }
  protected:
  explicit MmVmscanDirectReclaimBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
    kMayWritepageFieldNumber = 2,
    kGfpFlagsFieldNumber = 3,
  };
  // optional int32 order = 1;
  bool has_order() const;
  void clear_order() ;
  ::int32_t order() const;
  void set_order(::int32_t value);

  private:
  ::int32_t _internal_order() const;
  void _internal_set_order(::int32_t value);

  public:
  // optional int32 may_writepage = 2;
  bool has_may_writepage() const;
  void clear_may_writepage() ;
  ::int32_t may_writepage() const;
  void set_may_writepage(::int32_t value);

  private:
  ::int32_t _internal_may_writepage() const;
  void _internal_set_may_writepage(::int32_t value);

  public:
  // optional uint32 gfp_flags = 3;
  bool has_gfp_flags() const;
  void clear_gfp_flags() ;
  ::uint32_t gfp_flags() const;
  void set_gfp_flags(::uint32_t value);

  private:
  ::uint32_t _internal_gfp_flags() const;
  void _internal_set_gfp_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t order_;
    ::int32_t may_writepage_;
    ::uint32_t gfp_flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
};// -------------------------------------------------------------------

class MmVmscanDirectReclaimEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent) */ {
 public:
  inline MmVmscanDirectReclaimEndFtraceEvent() : MmVmscanDirectReclaimEndFtraceEvent(nullptr) {}
  ~MmVmscanDirectReclaimEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MmVmscanDirectReclaimEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MmVmscanDirectReclaimEndFtraceEvent(const MmVmscanDirectReclaimEndFtraceEvent& from);
  MmVmscanDirectReclaimEndFtraceEvent(MmVmscanDirectReclaimEndFtraceEvent&& from) noexcept
    : MmVmscanDirectReclaimEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmVmscanDirectReclaimEndFtraceEvent& operator=(const MmVmscanDirectReclaimEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmVmscanDirectReclaimEndFtraceEvent& operator=(MmVmscanDirectReclaimEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MmVmscanDirectReclaimEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MmVmscanDirectReclaimEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmVmscanDirectReclaimEndFtraceEvent*>(
               &_MmVmscanDirectReclaimEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MmVmscanDirectReclaimEndFtraceEvent& a, MmVmscanDirectReclaimEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmVmscanDirectReclaimEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MmVmscanDirectReclaimEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MmVmscanDirectReclaimEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MmVmscanDirectReclaimEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MmVmscanDirectReclaimEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MmVmscanDirectReclaimEndFtraceEvent& from) {
    MmVmscanDirectReclaimEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MmVmscanDirectReclaimEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent";
  }
  protected:
  explicit MmVmscanDirectReclaimEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNrReclaimedFieldNumber = 1,
  };
  // optional uint64 nr_reclaimed = 1;
  bool has_nr_reclaimed() const;
  void clear_nr_reclaimed() ;
  ::uint64_t nr_reclaimed() const;
  void set_nr_reclaimed(::uint64_t value);

  private:
  ::uint64_t _internal_nr_reclaimed() const;
  void _internal_set_nr_reclaimed(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t nr_reclaimed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
};// -------------------------------------------------------------------

class MmVmscanKswapdWakeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MmVmscanKswapdWakeFtraceEvent) */ {
 public:
  inline MmVmscanKswapdWakeFtraceEvent() : MmVmscanKswapdWakeFtraceEvent(nullptr) {}
  ~MmVmscanKswapdWakeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MmVmscanKswapdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MmVmscanKswapdWakeFtraceEvent(const MmVmscanKswapdWakeFtraceEvent& from);
  MmVmscanKswapdWakeFtraceEvent(MmVmscanKswapdWakeFtraceEvent&& from) noexcept
    : MmVmscanKswapdWakeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmVmscanKswapdWakeFtraceEvent& operator=(const MmVmscanKswapdWakeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmVmscanKswapdWakeFtraceEvent& operator=(MmVmscanKswapdWakeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MmVmscanKswapdWakeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MmVmscanKswapdWakeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmVmscanKswapdWakeFtraceEvent*>(
               &_MmVmscanKswapdWakeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MmVmscanKswapdWakeFtraceEvent& a, MmVmscanKswapdWakeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmVmscanKswapdWakeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MmVmscanKswapdWakeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MmVmscanKswapdWakeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MmVmscanKswapdWakeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MmVmscanKswapdWakeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MmVmscanKswapdWakeFtraceEvent& from) {
    MmVmscanKswapdWakeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MmVmscanKswapdWakeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MmVmscanKswapdWakeFtraceEvent";
  }
  protected:
  explicit MmVmscanKswapdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
    kOrderFieldNumber = 2,
    kZidFieldNumber = 3,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid() ;
  ::int32_t nid() const;
  void set_nid(::int32_t value);

  private:
  ::int32_t _internal_nid() const;
  void _internal_set_nid(::int32_t value);

  public:
  // optional int32 order = 2;
  bool has_order() const;
  void clear_order() ;
  ::int32_t order() const;
  void set_order(::int32_t value);

  private:
  ::int32_t _internal_order() const;
  void _internal_set_order(::int32_t value);

  public:
  // optional int32 zid = 3;
  bool has_zid() const;
  void clear_zid() ;
  ::int32_t zid() const;
  void set_zid(::int32_t value);

  private:
  ::int32_t _internal_zid() const;
  void _internal_set_zid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t nid_;
    ::int32_t order_;
    ::int32_t zid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
};// -------------------------------------------------------------------

class MmVmscanKswapdSleepFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MmVmscanKswapdSleepFtraceEvent) */ {
 public:
  inline MmVmscanKswapdSleepFtraceEvent() : MmVmscanKswapdSleepFtraceEvent(nullptr) {}
  ~MmVmscanKswapdSleepFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MmVmscanKswapdSleepFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MmVmscanKswapdSleepFtraceEvent(const MmVmscanKswapdSleepFtraceEvent& from);
  MmVmscanKswapdSleepFtraceEvent(MmVmscanKswapdSleepFtraceEvent&& from) noexcept
    : MmVmscanKswapdSleepFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmVmscanKswapdSleepFtraceEvent& operator=(const MmVmscanKswapdSleepFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmVmscanKswapdSleepFtraceEvent& operator=(MmVmscanKswapdSleepFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MmVmscanKswapdSleepFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MmVmscanKswapdSleepFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmVmscanKswapdSleepFtraceEvent*>(
               &_MmVmscanKswapdSleepFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MmVmscanKswapdSleepFtraceEvent& a, MmVmscanKswapdSleepFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmVmscanKswapdSleepFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MmVmscanKswapdSleepFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MmVmscanKswapdSleepFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MmVmscanKswapdSleepFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MmVmscanKswapdSleepFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MmVmscanKswapdSleepFtraceEvent& from) {
    MmVmscanKswapdSleepFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MmVmscanKswapdSleepFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MmVmscanKswapdSleepFtraceEvent";
  }
  protected:
  explicit MmVmscanKswapdSleepFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNidFieldNumber = 1,
  };
  // optional int32 nid = 1;
  bool has_nid() const;
  void clear_nid() ;
  ::int32_t nid() const;
  void set_nid(::int32_t value);

  private:
  ::int32_t _internal_nid() const;
  void _internal_set_nid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t nid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
};// -------------------------------------------------------------------

class MmShrinkSlabStartFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MmShrinkSlabStartFtraceEvent) */ {
 public:
  inline MmShrinkSlabStartFtraceEvent() : MmShrinkSlabStartFtraceEvent(nullptr) {}
  ~MmShrinkSlabStartFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MmShrinkSlabStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MmShrinkSlabStartFtraceEvent(const MmShrinkSlabStartFtraceEvent& from);
  MmShrinkSlabStartFtraceEvent(MmShrinkSlabStartFtraceEvent&& from) noexcept
    : MmShrinkSlabStartFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmShrinkSlabStartFtraceEvent& operator=(const MmShrinkSlabStartFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmShrinkSlabStartFtraceEvent& operator=(MmShrinkSlabStartFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MmShrinkSlabStartFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MmShrinkSlabStartFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmShrinkSlabStartFtraceEvent*>(
               &_MmShrinkSlabStartFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MmShrinkSlabStartFtraceEvent& a, MmShrinkSlabStartFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmShrinkSlabStartFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MmShrinkSlabStartFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MmShrinkSlabStartFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MmShrinkSlabStartFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MmShrinkSlabStartFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MmShrinkSlabStartFtraceEvent& from) {
    MmShrinkSlabStartFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MmShrinkSlabStartFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MmShrinkSlabStartFtraceEvent";
  }
  protected:
  explicit MmShrinkSlabStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheItemsFieldNumber = 1,
    kDeltaFieldNumber = 2,
    kLruPgsFieldNumber = 4,
    kNrObjectsToShrinkFieldNumber = 5,
    kPgsScannedFieldNumber = 6,
    kGfpFlagsFieldNumber = 3,
    kNidFieldNumber = 10,
    kShrFieldNumber = 7,
    kShrinkFieldNumber = 8,
    kTotalScanFieldNumber = 9,
    kPriorityFieldNumber = 11,
  };
  // optional uint64 cache_items = 1;
  bool has_cache_items() const;
  void clear_cache_items() ;
  ::uint64_t cache_items() const;
  void set_cache_items(::uint64_t value);

  private:
  ::uint64_t _internal_cache_items() const;
  void _internal_set_cache_items(::uint64_t value);

  public:
  // optional uint64 delta = 2;
  bool has_delta() const;
  void clear_delta() ;
  ::uint64_t delta() const;
  void set_delta(::uint64_t value);

  private:
  ::uint64_t _internal_delta() const;
  void _internal_set_delta(::uint64_t value);

  public:
  // optional uint64 lru_pgs = 4;
  bool has_lru_pgs() const;
  void clear_lru_pgs() ;
  ::uint64_t lru_pgs() const;
  void set_lru_pgs(::uint64_t value);

  private:
  ::uint64_t _internal_lru_pgs() const;
  void _internal_set_lru_pgs(::uint64_t value);

  public:
  // optional int64 nr_objects_to_shrink = 5;
  bool has_nr_objects_to_shrink() const;
  void clear_nr_objects_to_shrink() ;
  ::int64_t nr_objects_to_shrink() const;
  void set_nr_objects_to_shrink(::int64_t value);

  private:
  ::int64_t _internal_nr_objects_to_shrink() const;
  void _internal_set_nr_objects_to_shrink(::int64_t value);

  public:
  // optional uint64 pgs_scanned = 6;
  bool has_pgs_scanned() const;
  void clear_pgs_scanned() ;
  ::uint64_t pgs_scanned() const;
  void set_pgs_scanned(::uint64_t value);

  private:
  ::uint64_t _internal_pgs_scanned() const;
  void _internal_set_pgs_scanned(::uint64_t value);

  public:
  // optional uint32 gfp_flags = 3;
  bool has_gfp_flags() const;
  void clear_gfp_flags() ;
  ::uint32_t gfp_flags() const;
  void set_gfp_flags(::uint32_t value);

  private:
  ::uint32_t _internal_gfp_flags() const;
  void _internal_set_gfp_flags(::uint32_t value);

  public:
  // optional int32 nid = 10;
  bool has_nid() const;
  void clear_nid() ;
  ::int32_t nid() const;
  void set_nid(::int32_t value);

  private:
  ::int32_t _internal_nid() const;
  void _internal_set_nid(::int32_t value);

  public:
  // optional uint64 shr = 7;
  bool has_shr() const;
  void clear_shr() ;
  ::uint64_t shr() const;
  void set_shr(::uint64_t value);

  private:
  ::uint64_t _internal_shr() const;
  void _internal_set_shr(::uint64_t value);

  public:
  // optional uint64 shrink = 8;
  bool has_shrink() const;
  void clear_shrink() ;
  ::uint64_t shrink() const;
  void set_shrink(::uint64_t value);

  private:
  ::uint64_t _internal_shrink() const;
  void _internal_set_shrink(::uint64_t value);

  public:
  // optional uint64 total_scan = 9;
  bool has_total_scan() const;
  void clear_total_scan() ;
  ::uint64_t total_scan() const;
  void set_total_scan(::uint64_t value);

  private:
  ::uint64_t _internal_total_scan() const;
  void _internal_set_total_scan(::uint64_t value);

  public:
  // optional int32 priority = 11;
  bool has_priority() const;
  void clear_priority() ;
  ::int32_t priority() const;
  void set_priority(::int32_t value);

  private:
  ::int32_t _internal_priority() const;
  void _internal_set_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MmShrinkSlabStartFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t cache_items_;
    ::uint64_t delta_;
    ::uint64_t lru_pgs_;
    ::int64_t nr_objects_to_shrink_;
    ::uint64_t pgs_scanned_;
    ::uint32_t gfp_flags_;
    ::int32_t nid_;
    ::uint64_t shr_;
    ::uint64_t shrink_;
    ::uint64_t total_scan_;
    ::int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
};// -------------------------------------------------------------------

class MmShrinkSlabEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MmShrinkSlabEndFtraceEvent) */ {
 public:
  inline MmShrinkSlabEndFtraceEvent() : MmShrinkSlabEndFtraceEvent(nullptr) {}
  ~MmShrinkSlabEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MmShrinkSlabEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MmShrinkSlabEndFtraceEvent(const MmShrinkSlabEndFtraceEvent& from);
  MmShrinkSlabEndFtraceEvent(MmShrinkSlabEndFtraceEvent&& from) noexcept
    : MmShrinkSlabEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MmShrinkSlabEndFtraceEvent& operator=(const MmShrinkSlabEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MmShrinkSlabEndFtraceEvent& operator=(MmShrinkSlabEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MmShrinkSlabEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MmShrinkSlabEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MmShrinkSlabEndFtraceEvent*>(
               &_MmShrinkSlabEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MmShrinkSlabEndFtraceEvent& a, MmShrinkSlabEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MmShrinkSlabEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MmShrinkSlabEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MmShrinkSlabEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MmShrinkSlabEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MmShrinkSlabEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MmShrinkSlabEndFtraceEvent& from) {
    MmShrinkSlabEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MmShrinkSlabEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MmShrinkSlabEndFtraceEvent";
  }
  protected:
  explicit MmShrinkSlabEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewScanFieldNumber = 1,
    kShrFieldNumber = 3,
    kShrinkFieldNumber = 4,
    kRetvalFieldNumber = 2,
    kNidFieldNumber = 7,
    kTotalScanFieldNumber = 5,
    kUnusedScanFieldNumber = 6,
  };
  // optional int64 new_scan = 1;
  bool has_new_scan() const;
  void clear_new_scan() ;
  ::int64_t new_scan() const;
  void set_new_scan(::int64_t value);

  private:
  ::int64_t _internal_new_scan() const;
  void _internal_set_new_scan(::int64_t value);

  public:
  // optional uint64 shr = 3;
  bool has_shr() const;
  void clear_shr() ;
  ::uint64_t shr() const;
  void set_shr(::uint64_t value);

  private:
  ::uint64_t _internal_shr() const;
  void _internal_set_shr(::uint64_t value);

  public:
  // optional uint64 shrink = 4;
  bool has_shrink() const;
  void clear_shrink() ;
  ::uint64_t shrink() const;
  void set_shrink(::uint64_t value);

  private:
  ::uint64_t _internal_shrink() const;
  void _internal_set_shrink(::uint64_t value);

  public:
  // optional int32 retval = 2;
  bool has_retval() const;
  void clear_retval() ;
  ::int32_t retval() const;
  void set_retval(::int32_t value);

  private:
  ::int32_t _internal_retval() const;
  void _internal_set_retval(::int32_t value);

  public:
  // optional int32 nid = 7;
  bool has_nid() const;
  void clear_nid() ;
  ::int32_t nid() const;
  void set_nid(::int32_t value);

  private:
  ::int32_t _internal_nid() const;
  void _internal_set_nid(::int32_t value);

  public:
  // optional int64 total_scan = 5;
  bool has_total_scan() const;
  void clear_total_scan() ;
  ::int64_t total_scan() const;
  void set_total_scan(::int64_t value);

  private:
  ::int64_t _internal_total_scan() const;
  void _internal_set_total_scan(::int64_t value);

  public:
  // optional int64 unused_scan = 6;
  bool has_unused_scan() const;
  void clear_unused_scan() ;
  ::int64_t unused_scan() const;
  void set_unused_scan(::int64_t value);

  private:
  ::int64_t _internal_unused_scan() const;
  void _internal_set_unused_scan(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MmShrinkSlabEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t new_scan_;
    ::uint64_t shr_;
    ::uint64_t shrink_;
    ::int32_t retval_;
    ::int32_t nid_;
    ::int64_t total_scan_;
    ::int64_t unused_scan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MmVmscanDirectReclaimBeginFtraceEvent

// optional int32 order = 1;
inline bool MmVmscanDirectReclaimBeginFtraceEvent::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::clear_order() {
  _impl_.order_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t MmVmscanDirectReclaimBeginFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent.order)
  return _internal_order();
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::set_order(::int32_t value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent.order)
}
inline ::int32_t MmVmscanDirectReclaimBeginFtraceEvent::_internal_order() const {
  return _impl_.order_;
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::_internal_set_order(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.order_ = value;
}

// optional int32 may_writepage = 2;
inline bool MmVmscanDirectReclaimBeginFtraceEvent::has_may_writepage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::clear_may_writepage() {
  _impl_.may_writepage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MmVmscanDirectReclaimBeginFtraceEvent::may_writepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent.may_writepage)
  return _internal_may_writepage();
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::set_may_writepage(::int32_t value) {
  _internal_set_may_writepage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent.may_writepage)
}
inline ::int32_t MmVmscanDirectReclaimBeginFtraceEvent::_internal_may_writepage() const {
  return _impl_.may_writepage_;
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::_internal_set_may_writepage(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.may_writepage_ = value;
}

// optional uint32 gfp_flags = 3;
inline bool MmVmscanDirectReclaimBeginFtraceEvent::has_gfp_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::clear_gfp_flags() {
  _impl_.gfp_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MmVmscanDirectReclaimBeginFtraceEvent::gfp_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent.gfp_flags)
  return _internal_gfp_flags();
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::set_gfp_flags(::uint32_t value) {
  _internal_set_gfp_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent.gfp_flags)
}
inline ::uint32_t MmVmscanDirectReclaimBeginFtraceEvent::_internal_gfp_flags() const {
  return _impl_.gfp_flags_;
}
inline void MmVmscanDirectReclaimBeginFtraceEvent::_internal_set_gfp_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gfp_flags_ = value;
}

// -------------------------------------------------------------------

// MmVmscanDirectReclaimEndFtraceEvent

// optional uint64 nr_reclaimed = 1;
inline bool MmVmscanDirectReclaimEndFtraceEvent::has_nr_reclaimed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MmVmscanDirectReclaimEndFtraceEvent::clear_nr_reclaimed() {
  _impl_.nr_reclaimed_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t MmVmscanDirectReclaimEndFtraceEvent::nr_reclaimed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent.nr_reclaimed)
  return _internal_nr_reclaimed();
}
inline void MmVmscanDirectReclaimEndFtraceEvent::set_nr_reclaimed(::uint64_t value) {
  _internal_set_nr_reclaimed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent.nr_reclaimed)
}
inline ::uint64_t MmVmscanDirectReclaimEndFtraceEvent::_internal_nr_reclaimed() const {
  return _impl_.nr_reclaimed_;
}
inline void MmVmscanDirectReclaimEndFtraceEvent::_internal_set_nr_reclaimed(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nr_reclaimed_ = value;
}

// -------------------------------------------------------------------

// MmVmscanKswapdWakeFtraceEvent

// optional int32 nid = 1;
inline bool MmVmscanKswapdWakeFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MmVmscanKswapdWakeFtraceEvent::clear_nid() {
  _impl_.nid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t MmVmscanKswapdWakeFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanKswapdWakeFtraceEvent.nid)
  return _internal_nid();
}
inline void MmVmscanKswapdWakeFtraceEvent::set_nid(::int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanKswapdWakeFtraceEvent.nid)
}
inline ::int32_t MmVmscanKswapdWakeFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void MmVmscanKswapdWakeFtraceEvent::_internal_set_nid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nid_ = value;
}

// optional int32 order = 2;
inline bool MmVmscanKswapdWakeFtraceEvent::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MmVmscanKswapdWakeFtraceEvent::clear_order() {
  _impl_.order_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MmVmscanKswapdWakeFtraceEvent::order() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanKswapdWakeFtraceEvent.order)
  return _internal_order();
}
inline void MmVmscanKswapdWakeFtraceEvent::set_order(::int32_t value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanKswapdWakeFtraceEvent.order)
}
inline ::int32_t MmVmscanKswapdWakeFtraceEvent::_internal_order() const {
  return _impl_.order_;
}
inline void MmVmscanKswapdWakeFtraceEvent::_internal_set_order(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.order_ = value;
}

// optional int32 zid = 3;
inline bool MmVmscanKswapdWakeFtraceEvent::has_zid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MmVmscanKswapdWakeFtraceEvent::clear_zid() {
  _impl_.zid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t MmVmscanKswapdWakeFtraceEvent::zid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanKswapdWakeFtraceEvent.zid)
  return _internal_zid();
}
inline void MmVmscanKswapdWakeFtraceEvent::set_zid(::int32_t value) {
  _internal_set_zid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanKswapdWakeFtraceEvent.zid)
}
inline ::int32_t MmVmscanKswapdWakeFtraceEvent::_internal_zid() const {
  return _impl_.zid_;
}
inline void MmVmscanKswapdWakeFtraceEvent::_internal_set_zid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zid_ = value;
}

// -------------------------------------------------------------------

// MmVmscanKswapdSleepFtraceEvent

// optional int32 nid = 1;
inline bool MmVmscanKswapdSleepFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MmVmscanKswapdSleepFtraceEvent::clear_nid() {
  _impl_.nid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t MmVmscanKswapdSleepFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmVmscanKswapdSleepFtraceEvent.nid)
  return _internal_nid();
}
inline void MmVmscanKswapdSleepFtraceEvent::set_nid(::int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmVmscanKswapdSleepFtraceEvent.nid)
}
inline ::int32_t MmVmscanKswapdSleepFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void MmVmscanKswapdSleepFtraceEvent::_internal_set_nid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nid_ = value;
}

// -------------------------------------------------------------------

// MmShrinkSlabStartFtraceEvent

// optional uint64 cache_items = 1;
inline bool MmShrinkSlabStartFtraceEvent::has_cache_items() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_cache_items() {
  _impl_.cache_items_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::cache_items() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.cache_items)
  return _internal_cache_items();
}
inline void MmShrinkSlabStartFtraceEvent::set_cache_items(::uint64_t value) {
  _internal_set_cache_items(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.cache_items)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_cache_items() const {
  return _impl_.cache_items_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_cache_items(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cache_items_ = value;
}

// optional uint64 delta = 2;
inline bool MmShrinkSlabStartFtraceEvent::has_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_delta() {
  _impl_.delta_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::delta() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.delta)
  return _internal_delta();
}
inline void MmShrinkSlabStartFtraceEvent::set_delta(::uint64_t value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.delta)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_delta() const {
  return _impl_.delta_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_delta(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delta_ = value;
}

// optional uint32 gfp_flags = 3;
inline bool MmShrinkSlabStartFtraceEvent::has_gfp_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_gfp_flags() {
  _impl_.gfp_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t MmShrinkSlabStartFtraceEvent::gfp_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.gfp_flags)
  return _internal_gfp_flags();
}
inline void MmShrinkSlabStartFtraceEvent::set_gfp_flags(::uint32_t value) {
  _internal_set_gfp_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.gfp_flags)
}
inline ::uint32_t MmShrinkSlabStartFtraceEvent::_internal_gfp_flags() const {
  return _impl_.gfp_flags_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_gfp_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.gfp_flags_ = value;
}

// optional uint64 lru_pgs = 4;
inline bool MmShrinkSlabStartFtraceEvent::has_lru_pgs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_lru_pgs() {
  _impl_.lru_pgs_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::lru_pgs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.lru_pgs)
  return _internal_lru_pgs();
}
inline void MmShrinkSlabStartFtraceEvent::set_lru_pgs(::uint64_t value) {
  _internal_set_lru_pgs(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.lru_pgs)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_lru_pgs() const {
  return _impl_.lru_pgs_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_lru_pgs(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lru_pgs_ = value;
}

// optional int64 nr_objects_to_shrink = 5;
inline bool MmShrinkSlabStartFtraceEvent::has_nr_objects_to_shrink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_nr_objects_to_shrink() {
  _impl_.nr_objects_to_shrink_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t MmShrinkSlabStartFtraceEvent::nr_objects_to_shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.nr_objects_to_shrink)
  return _internal_nr_objects_to_shrink();
}
inline void MmShrinkSlabStartFtraceEvent::set_nr_objects_to_shrink(::int64_t value) {
  _internal_set_nr_objects_to_shrink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.nr_objects_to_shrink)
}
inline ::int64_t MmShrinkSlabStartFtraceEvent::_internal_nr_objects_to_shrink() const {
  return _impl_.nr_objects_to_shrink_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_nr_objects_to_shrink(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nr_objects_to_shrink_ = value;
}

// optional uint64 pgs_scanned = 6;
inline bool MmShrinkSlabStartFtraceEvent::has_pgs_scanned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_pgs_scanned() {
  _impl_.pgs_scanned_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::pgs_scanned() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.pgs_scanned)
  return _internal_pgs_scanned();
}
inline void MmShrinkSlabStartFtraceEvent::set_pgs_scanned(::uint64_t value) {
  _internal_set_pgs_scanned(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.pgs_scanned)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_pgs_scanned() const {
  return _impl_.pgs_scanned_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_pgs_scanned(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pgs_scanned_ = value;
}

// optional uint64 shr = 7;
inline bool MmShrinkSlabStartFtraceEvent::has_shr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_shr() {
  _impl_.shr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::shr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.shr)
  return _internal_shr();
}
inline void MmShrinkSlabStartFtraceEvent::set_shr(::uint64_t value) {
  _internal_set_shr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.shr)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_shr() const {
  return _impl_.shr_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_shr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.shr_ = value;
}

// optional uint64 shrink = 8;
inline bool MmShrinkSlabStartFtraceEvent::has_shrink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_shrink() {
  _impl_.shrink_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.shrink)
  return _internal_shrink();
}
inline void MmShrinkSlabStartFtraceEvent::set_shrink(::uint64_t value) {
  _internal_set_shrink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.shrink)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_shrink() const {
  return _impl_.shrink_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_shrink(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.shrink_ = value;
}

// optional uint64 total_scan = 9;
inline bool MmShrinkSlabStartFtraceEvent::has_total_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_total_scan() {
  _impl_.total_scan_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::total_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.total_scan)
  return _internal_total_scan();
}
inline void MmShrinkSlabStartFtraceEvent::set_total_scan(::uint64_t value) {
  _internal_set_total_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.total_scan)
}
inline ::uint64_t MmShrinkSlabStartFtraceEvent::_internal_total_scan() const {
  return _impl_.total_scan_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_total_scan(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.total_scan_ = value;
}

// optional int32 nid = 10;
inline bool MmShrinkSlabStartFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_nid() {
  _impl_.nid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t MmShrinkSlabStartFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.nid)
  return _internal_nid();
}
inline void MmShrinkSlabStartFtraceEvent::set_nid(::int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.nid)
}
inline ::int32_t MmShrinkSlabStartFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_nid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.nid_ = value;
}

// optional int32 priority = 11;
inline bool MmShrinkSlabStartFtraceEvent::has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void MmShrinkSlabStartFtraceEvent::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t MmShrinkSlabStartFtraceEvent::priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabStartFtraceEvent.priority)
  return _internal_priority();
}
inline void MmShrinkSlabStartFtraceEvent::set_priority(::int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabStartFtraceEvent.priority)
}
inline ::int32_t MmShrinkSlabStartFtraceEvent::_internal_priority() const {
  return _impl_.priority_;
}
inline void MmShrinkSlabStartFtraceEvent::_internal_set_priority(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// MmShrinkSlabEndFtraceEvent

// optional int64 new_scan = 1;
inline bool MmShrinkSlabEndFtraceEvent::has_new_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_new_scan() {
  _impl_.new_scan_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t MmShrinkSlabEndFtraceEvent::new_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.new_scan)
  return _internal_new_scan();
}
inline void MmShrinkSlabEndFtraceEvent::set_new_scan(::int64_t value) {
  _internal_set_new_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.new_scan)
}
inline ::int64_t MmShrinkSlabEndFtraceEvent::_internal_new_scan() const {
  return _impl_.new_scan_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_new_scan(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_scan_ = value;
}

// optional int32 retval = 2;
inline bool MmShrinkSlabEndFtraceEvent::has_retval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_retval() {
  _impl_.retval_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t MmShrinkSlabEndFtraceEvent::retval() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.retval)
  return _internal_retval();
}
inline void MmShrinkSlabEndFtraceEvent::set_retval(::int32_t value) {
  _internal_set_retval(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.retval)
}
inline ::int32_t MmShrinkSlabEndFtraceEvent::_internal_retval() const {
  return _impl_.retval_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_retval(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.retval_ = value;
}

// optional uint64 shr = 3;
inline bool MmShrinkSlabEndFtraceEvent::has_shr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_shr() {
  _impl_.shr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t MmShrinkSlabEndFtraceEvent::shr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.shr)
  return _internal_shr();
}
inline void MmShrinkSlabEndFtraceEvent::set_shr(::uint64_t value) {
  _internal_set_shr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.shr)
}
inline ::uint64_t MmShrinkSlabEndFtraceEvent::_internal_shr() const {
  return _impl_.shr_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_shr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shr_ = value;
}

// optional uint64 shrink = 4;
inline bool MmShrinkSlabEndFtraceEvent::has_shrink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_shrink() {
  _impl_.shrink_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t MmShrinkSlabEndFtraceEvent::shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.shrink)
  return _internal_shrink();
}
inline void MmShrinkSlabEndFtraceEvent::set_shrink(::uint64_t value) {
  _internal_set_shrink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.shrink)
}
inline ::uint64_t MmShrinkSlabEndFtraceEvent::_internal_shrink() const {
  return _impl_.shrink_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_shrink(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.shrink_ = value;
}

// optional int64 total_scan = 5;
inline bool MmShrinkSlabEndFtraceEvent::has_total_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_total_scan() {
  _impl_.total_scan_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t MmShrinkSlabEndFtraceEvent::total_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.total_scan)
  return _internal_total_scan();
}
inline void MmShrinkSlabEndFtraceEvent::set_total_scan(::int64_t value) {
  _internal_set_total_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.total_scan)
}
inline ::int64_t MmShrinkSlabEndFtraceEvent::_internal_total_scan() const {
  return _impl_.total_scan_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_total_scan(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.total_scan_ = value;
}

// optional int64 unused_scan = 6;
inline bool MmShrinkSlabEndFtraceEvent::has_unused_scan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_unused_scan() {
  _impl_.unused_scan_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t MmShrinkSlabEndFtraceEvent::unused_scan() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.unused_scan)
  return _internal_unused_scan();
}
inline void MmShrinkSlabEndFtraceEvent::set_unused_scan(::int64_t value) {
  _internal_set_unused_scan(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.unused_scan)
}
inline ::int64_t MmShrinkSlabEndFtraceEvent::_internal_unused_scan() const {
  return _impl_.unused_scan_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_unused_scan(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.unused_scan_ = value;
}

// optional int32 nid = 7;
inline bool MmShrinkSlabEndFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MmShrinkSlabEndFtraceEvent::clear_nid() {
  _impl_.nid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t MmShrinkSlabEndFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MmShrinkSlabEndFtraceEvent.nid)
  return _internal_nid();
}
inline void MmShrinkSlabEndFtraceEvent::set_nid(::int32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MmShrinkSlabEndFtraceEvent.nid)
}
inline ::int32_t MmShrinkSlabEndFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void MmShrinkSlabEndFtraceEvent::_internal_set_nid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_2epb_2eh
