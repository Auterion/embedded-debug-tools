// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/trace/ftrace/android_fs.pb.h"
#include "protos/perfetto/trace/ftrace/binder.pb.h"
#include "protos/perfetto/trace/ftrace/block.pb.h"
#include "protos/perfetto/trace/ftrace/cgroup.pb.h"
#include "protos/perfetto/trace/ftrace/clk.pb.h"
#include "protos/perfetto/trace/ftrace/cma.pb.h"
#include "protos/perfetto/trace/ftrace/compaction.pb.h"
#include "protos/perfetto/trace/ftrace/cpuhp.pb.h"
#include "protos/perfetto/trace/ftrace/cros_ec.pb.h"
#include "protos/perfetto/trace/ftrace/dma_fence.pb.h"
#include "protos/perfetto/trace/ftrace/dmabuf_heap.pb.h"
#include "protos/perfetto/trace/ftrace/dpu.pb.h"
#include "protos/perfetto/trace/ftrace/drm.pb.h"
#include "protos/perfetto/trace/ftrace/ext4.pb.h"
#include "protos/perfetto/trace/ftrace/f2fs.pb.h"
#include "protos/perfetto/trace/ftrace/fastrpc.pb.h"
#include "protos/perfetto/trace/ftrace/fence.pb.h"
#include "protos/perfetto/trace/ftrace/filemap.pb.h"
#include "protos/perfetto/trace/ftrace/ftrace.pb.h"
#include "protos/perfetto/trace/ftrace/g2d.pb.h"
#include "protos/perfetto/trace/ftrace/gpu_mem.pb.h"
#include "protos/perfetto/trace/ftrace/gpu_scheduler.pb.h"
#include "protos/perfetto/trace/ftrace/hyp.pb.h"
#include "protos/perfetto/trace/ftrace/i2c.pb.h"
#include "protos/perfetto/trace/ftrace/ion.pb.h"
#include "protos/perfetto/trace/ftrace/ipi.pb.h"
#include "protos/perfetto/trace/ftrace/irq.pb.h"
#include "protos/perfetto/trace/ftrace/kmem.pb.h"
#include "protos/perfetto/trace/ftrace/kvm.pb.h"
#include "protos/perfetto/trace/ftrace/lowmemorykiller.pb.h"
#include "protos/perfetto/trace/ftrace/lwis.pb.h"
#include "protos/perfetto/trace/ftrace/mali.pb.h"
#include "protos/perfetto/trace/ftrace/mdss.pb.h"
#include "protos/perfetto/trace/ftrace/mm_event.pb.h"
#include "protos/perfetto/trace/ftrace/net.pb.h"
#include "protos/perfetto/trace/ftrace/oom.pb.h"
#include "protos/perfetto/trace/ftrace/panel.pb.h"
#include "protos/perfetto/trace/ftrace/power.pb.h"
#include "protos/perfetto/trace/ftrace/printk.pb.h"
#include "protos/perfetto/trace/ftrace/raw_syscalls.pb.h"
#include "protos/perfetto/trace/ftrace/regulator.pb.h"
#include "protos/perfetto/trace/ftrace/sched.pb.h"
#include "protos/perfetto/trace/ftrace/scm.pb.h"
#include "protos/perfetto/trace/ftrace/sde.pb.h"
#include "protos/perfetto/trace/ftrace/signal.pb.h"
#include "protos/perfetto/trace/ftrace/skb.pb.h"
#include "protos/perfetto/trace/ftrace/sock.pb.h"
#include "protos/perfetto/trace/ftrace/sync.pb.h"
#include "protos/perfetto/trace/ftrace/synthetic.pb.h"
#include "protos/perfetto/trace/ftrace/systrace.pb.h"
#include "protos/perfetto/trace/ftrace/task.pb.h"
#include "protos/perfetto/trace/ftrace/tcp.pb.h"
#include "protos/perfetto/trace/ftrace/thermal.pb.h"
#include "protos/perfetto/trace/ftrace/trusty.pb.h"
#include "protos/perfetto/trace/ftrace/ufs.pb.h"
#include "protos/perfetto/trace/ftrace/v4l2.pb.h"
#include "protos/perfetto/trace/ftrace/virtio_gpu.pb.h"
#include "protos/perfetto/trace/ftrace/virtio_video.pb.h"
#include "protos/perfetto/trace/ftrace/vmscan.pb.h"
#include "protos/perfetto/trace/ftrace/workqueue.pb.h"
#include "protos/perfetto/trace/ftrace/generic.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto;
namespace perfetto {
namespace protos {
class FtraceEvent;
struct FtraceEventDefaultTypeInternal;
extern FtraceEventDefaultTypeInternal _FtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::FtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class FtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEvent) */ {
 public:
  inline FtraceEvent() : FtraceEvent(nullptr) {}
  ~FtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceEvent(const FtraceEvent& from);
  FtraceEvent(FtraceEvent&& from) noexcept
    : FtraceEvent() {
    *this = ::std::move(from);
  }

  inline FtraceEvent& operator=(const FtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEvent& operator=(FtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kPrint = 3,
    kSchedSwitch = 4,
    kCpuFrequency = 11,
    kCpuFrequencyLimits = 12,
    kCpuIdle = 13,
    kClockEnable = 14,
    kClockDisable = 15,
    kClockSetRate = 16,
    kSchedWakeup = 17,
    kSchedBlockedReason = 18,
    kSchedCpuHotplug = 19,
    kSchedWaking = 20,
    kIpiEntry = 21,
    kIpiExit = 22,
    kIpiRaise = 23,
    kSoftirqEntry = 24,
    kSoftirqExit = 25,
    kSoftirqRaise = 26,
    kI2CRead = 27,
    kI2CWrite = 28,
    kI2CResult = 29,
    kI2CReply = 30,
    kSmbusRead = 31,
    kSmbusWrite = 32,
    kSmbusResult = 33,
    kSmbusReply = 34,
    kLowmemoryKill = 35,
    kIrqHandlerEntry = 36,
    kIrqHandlerExit = 37,
    kSyncPt = 38,
    kSyncTimeline = 39,
    kSyncWait = 40,
    kExt4DaWriteBegin = 41,
    kExt4DaWriteEnd = 42,
    kExt4SyncFileEnter = 43,
    kExt4SyncFileExit = 44,
    kBlockRqIssue = 45,
    kMmVmscanDirectReclaimBegin = 46,
    kMmVmscanDirectReclaimEnd = 47,
    kMmVmscanKswapdWake = 48,
    kMmVmscanKswapdSleep = 49,
    kBinderTransaction = 50,
    kBinderTransactionReceived = 51,
    kBinderSetPriority = 52,
    kBinderLock = 53,
    kBinderLocked = 54,
    kBinderUnlock = 55,
    kWorkqueueActivateWork = 56,
    kWorkqueueExecuteEnd = 57,
    kWorkqueueExecuteStart = 58,
    kWorkqueueQueueWork = 59,
    kRegulatorDisable = 60,
    kRegulatorDisableComplete = 61,
    kRegulatorEnable = 62,
    kRegulatorEnableComplete = 63,
    kRegulatorEnableDelay = 64,
    kRegulatorSetVoltage = 65,
    kRegulatorSetVoltageComplete = 66,
    kCgroupAttachTask = 67,
    kCgroupMkdir = 68,
    kCgroupRemount = 69,
    kCgroupRmdir = 70,
    kCgroupTransferTasks = 71,
    kCgroupDestroyRoot = 72,
    kCgroupRelease = 73,
    kCgroupRename = 74,
    kCgroupSetupRoot = 75,
    kMdpCmdKickoff = 76,
    kMdpCommit = 77,
    kMdpPerfSetOt = 78,
    kMdpSsppChange = 79,
    kTracingMarkWrite = 80,
    kMdpCmdPingpongDone = 81,
    kMdpCompareBw = 82,
    kMdpPerfSetPanicLuts = 83,
    kMdpSsppSet = 84,
    kMdpCmdReadptrDone = 85,
    kMdpMisrCrc = 86,
    kMdpPerfSetQosLuts = 87,
    kMdpTraceCounter = 88,
    kMdpCmdReleaseBw = 89,
    kMdpMixerUpdate = 90,
    kMdpPerfSetWmLevels = 91,
    kMdpVideoUnderrunDone = 92,
    kMdpCmdWaitPingpong = 93,
    kMdpPerfPrefillCalc = 94,
    kMdpPerfUpdateBus = 95,
    kRotatorBwAoAsContext = 96,
    kMmFilemapAddToPageCache = 97,
    kMmFilemapDeleteFromPageCache = 98,
    kMmCompactionBegin = 99,
    kMmCompactionDeferCompaction = 100,
    kMmCompactionDeferred = 101,
    kMmCompactionDeferReset = 102,
    kMmCompactionEnd = 103,
    kMmCompactionFinished = 104,
    kMmCompactionIsolateFreepages = 105,
    kMmCompactionIsolateMigratepages = 106,
    kMmCompactionKcompactdSleep = 107,
    kMmCompactionKcompactdWake = 108,
    kMmCompactionMigratepages = 109,
    kMmCompactionSuitable = 110,
    kMmCompactionTryToCompactPages = 111,
    kMmCompactionWakeupKcompactd = 112,
    kSuspendResume = 113,
    kSchedWakeupNew = 114,
    kBlockBioBackmerge = 115,
    kBlockBioBounce = 116,
    kBlockBioComplete = 117,
    kBlockBioFrontmerge = 118,
    kBlockBioQueue = 119,
    kBlockBioRemap = 120,
    kBlockDirtyBuffer = 121,
    kBlockGetrq = 122,
    kBlockPlug = 123,
    kBlockRqAbort = 124,
    kBlockRqComplete = 125,
    kBlockRqInsert = 126,
    kBlockRqRemap = 128,
    kBlockRqRequeue = 129,
    kBlockSleeprq = 130,
    kBlockSplit = 131,
    kBlockTouchBuffer = 132,
    kBlockUnplug = 133,
    kExt4AllocDaBlocks = 134,
    kExt4AllocateBlocks = 135,
    kExt4AllocateInode = 136,
    kExt4BeginOrderedTruncate = 137,
    kExt4CollapseRange = 138,
    kExt4DaReleaseSpace = 139,
    kExt4DaReserveSpace = 140,
    kExt4DaUpdateReserveSpace = 141,
    kExt4DaWritePages = 142,
    kExt4DaWritePagesExtent = 143,
    kExt4DirectIOEnter = 144,
    kExt4DirectIOExit = 145,
    kExt4DiscardBlocks = 146,
    kExt4DiscardPreallocations = 147,
    kExt4DropInode = 148,
    kExt4EsCacheExtent = 149,
    kExt4EsFindDelayedExtentRangeEnter = 150,
    kExt4EsFindDelayedExtentRangeExit = 151,
    kExt4EsInsertExtent = 152,
    kExt4EsLookupExtentEnter = 153,
    kExt4EsLookupExtentExit = 154,
    kExt4EsRemoveExtent = 155,
    kExt4EsShrink = 156,
    kExt4EsShrinkCount = 157,
    kExt4EsShrinkScanEnter = 158,
    kExt4EsShrinkScanExit = 159,
    kExt4EvictInode = 160,
    kExt4ExtConvertToInitializedEnter = 161,
    kExt4ExtConvertToInitializedFastpath = 162,
    kExt4ExtHandleUnwrittenExtents = 163,
    kExt4ExtInCache = 164,
    kExt4ExtLoadExtent = 165,
    kExt4ExtMapBlocksEnter = 166,
    kExt4ExtMapBlocksExit = 167,
    kExt4ExtPutInCache = 168,
    kExt4ExtRemoveSpace = 169,
    kExt4ExtRemoveSpaceDone = 170,
    kExt4ExtRmIdx = 171,
    kExt4ExtRmLeaf = 172,
    kExt4ExtShowExtent = 173,
    kExt4FallocateEnter = 174,
    kExt4FallocateExit = 175,
    kExt4FindDelallocRange = 176,
    kExt4Forget = 177,
    kExt4FreeBlocks = 178,
    kExt4FreeInode = 179,
    kExt4GetImpliedClusterAllocExit = 180,
    kExt4GetReservedClusterAlloc = 181,
    kExt4IndMapBlocksEnter = 182,
    kExt4IndMapBlocksExit = 183,
    kExt4InsertRange = 184,
    kExt4Invalidatepage = 185,
    kExt4JournalStart = 186,
    kExt4JournalStartReserved = 187,
    kExt4JournalledInvalidatepage = 188,
    kExt4JournalledWriteEnd = 189,
    kExt4LoadInode = 190,
    kExt4LoadInodeBitmap = 191,
    kExt4MarkInodeDirty = 192,
    kExt4MbBitmapLoad = 193,
    kExt4MbBuddyBitmapLoad = 194,
    kExt4MbDiscardPreallocations = 195,
    kExt4MbNewGroupPa = 196,
    kExt4MbNewInodePa = 197,
    kExt4MbReleaseGroupPa = 198,
    kExt4MbReleaseInodePa = 199,
    kExt4MballocAlloc = 200,
    kExt4MballocDiscard = 201,
    kExt4MballocFree = 202,
    kExt4MballocPrealloc = 203,
    kExt4OtherInodeUpdateTime = 204,
    kExt4PunchHole = 205,
    kExt4ReadBlockBitmapLoad = 206,
    kExt4Readpage = 207,
    kExt4Releasepage = 208,
    kExt4RemoveBlocks = 209,
    kExt4RequestBlocks = 210,
    kExt4RequestInode = 211,
    kExt4SyncFs = 212,
    kExt4TrimAllFree = 213,
    kExt4TrimExtent = 214,
    kExt4TruncateEnter = 215,
    kExt4TruncateExit = 216,
    kExt4UnlinkEnter = 217,
    kExt4UnlinkExit = 218,
    kExt4WriteBegin = 219,
    kExt4WriteEnd = 230,
    kExt4Writepage = 231,
    kExt4Writepages = 232,
    kExt4WritepagesResult = 233,
    kExt4ZeroRange = 234,
    kTaskNewtask = 235,
    kTaskRename = 236,
    kSchedProcessExec = 237,
    kSchedProcessExit = 238,
    kSchedProcessFork = 239,
    kSchedProcessFree = 240,
    kSchedProcessHang = 241,
    kSchedProcessWait = 242,
    kF2FsDoSubmitBio = 243,
    kF2FsEvictInode = 244,
    kF2FsFallocate = 245,
    kF2FsGetDataBlock = 246,
    kF2FsGetVictim = 247,
    kF2FsIget = 248,
    kF2FsIgetExit = 249,
    kF2FsNewInode = 250,
    kF2FsReadpage = 251,
    kF2FsReserveNewBlock = 252,
    kF2FsSetPageDirty = 253,
    kF2FsSubmitWritePage = 254,
    kF2FsSyncFileEnter = 255,
    kF2FsSyncFileExit = 256,
    kF2FsSyncFs = 257,
    kF2FsTruncate = 258,
    kF2FsTruncateBlocksEnter = 259,
    kF2FsTruncateBlocksExit = 260,
    kF2FsTruncateDataBlocksRange = 261,
    kF2FsTruncateInodeBlocksEnter = 262,
    kF2FsTruncateInodeBlocksExit = 263,
    kF2FsTruncateNode = 264,
    kF2FsTruncateNodesEnter = 265,
    kF2FsTruncateNodesExit = 266,
    kF2FsTruncatePartialNodes = 267,
    kF2FsUnlinkEnter = 268,
    kF2FsUnlinkExit = 269,
    kF2FsVmPageMkwrite = 270,
    kF2FsWriteBegin = 271,
    kF2FsWriteCheckpoint = 272,
    kF2FsWriteEnd = 273,
    kAllocPagesIommuEnd = 274,
    kAllocPagesIommuFail = 275,
    kAllocPagesIommuStart = 276,
    kAllocPagesSysEnd = 277,
    kAllocPagesSysFail = 278,
    kAllocPagesSysStart = 279,
    kDmaAllocContiguousRetry = 280,
    kIommuMapRange = 281,
    kIommuSecPtblMapRangeEnd = 282,
    kIommuSecPtblMapRangeStart = 283,
    kIonAllocBufferEnd = 284,
    kIonAllocBufferFail = 285,
    kIonAllocBufferFallback = 286,
    kIonAllocBufferStart = 287,
    kIonCpAllocRetry = 288,
    kIonCpSecureBufferEnd = 289,
    kIonCpSecureBufferStart = 290,
    kIonPrefetching = 291,
    kIonSecureCmaAddToPoolEnd = 292,
    kIonSecureCmaAddToPoolStart = 293,
    kIonSecureCmaAllocateEnd = 294,
    kIonSecureCmaAllocateStart = 295,
    kIonSecureCmaShrinkPoolEnd = 296,
    kIonSecureCmaShrinkPoolStart = 297,
    kKfree = 298,
    kKmalloc = 299,
    kKmallocNode = 300,
    kKmemCacheAlloc = 301,
    kKmemCacheAllocNode = 302,
    kKmemCacheFree = 303,
    kMigratePagesEnd = 304,
    kMigratePagesStart = 305,
    kMigrateRetry = 306,
    kMmPageAlloc = 307,
    kMmPageAllocExtfrag = 308,
    kMmPageAllocZoneLocked = 309,
    kMmPageFree = 310,
    kMmPageFreeBatched = 311,
    kMmPagePcpuDrain = 312,
    kRssStat = 313,
    kIonHeapShrink = 314,
    kIonHeapGrow = 315,
    kFenceInit = 316,
    kFenceDestroy = 317,
    kFenceEnableSignal = 318,
    kFenceSignaled = 319,
    kClkEnable = 320,
    kClkDisable = 321,
    kClkSetRate = 322,
    kBinderTransactionAllocBuf = 323,
    kSignalDeliver = 324,
    kSignalGenerate = 325,
    kOomScoreAdjUpdate = 326,
    kGeneric = 327,
    kMmEventRecord = 328,
    kSysEnter = 329,
    kSysExit = 330,
    kZero = 331,
    kGpuFrequency = 332,
    kSdeTracingMarkWrite = 333,
    kMarkVictim = 334,
    kIonStat = 335,
    kIonBufferCreate = 336,
    kIonBufferDestroy = 337,
    kScmCallStart = 338,
    kScmCallEnd = 339,
    kGpuMemTotal = 340,
    kThermalTemperature = 341,
    kCdevUpdate = 342,
    kCpuhpExit = 343,
    kCpuhpMultiEnter = 344,
    kCpuhpEnter = 345,
    kCpuhpLatency = 346,
    kFastrpcDmaStat = 347,
    kDpuTracingMarkWrite = 348,
    kG2DTracingMarkWrite = 349,
    kMaliTracingMarkWrite = 350,
    kDmaHeapStat = 351,
    kCpuhpPause = 352,
    kSchedPiSetprio = 353,
    kSdeSdeEvtlog = 354,
    kSdeSdePerfCalcCrtc = 355,
    kSdeSdePerfCrtcUpdate = 356,
    kSdeSdePerfSetQosLuts = 357,
    kSdeSdePerfUpdateBus = 358,
    kRssStatThrottled = 359,
    kNetifReceiveSkb = 360,
    kNetDevXmit = 361,
    kInetSockSetState = 362,
    kTcpRetransmitSkb = 363,
    kCrosEcSensorhubData = 364,
    kNapiGroReceiveEntry = 365,
    kNapiGroReceiveExit = 366,
    kKfreeSkb = 367,
    kKvmAccessFault = 368,
    kKvmAckIrq = 369,
    kKvmAgeHva = 370,
    kKvmAgePage = 371,
    kKvmArmClearDebug = 372,
    kKvmArmSetDreg32 = 373,
    kKvmArmSetRegset = 374,
    kKvmArmSetupDebug = 375,
    kKvmEntry = 376,
    kKvmExit = 377,
    kKvmFpu = 378,
    kKvmGetTimerMap = 379,
    kKvmGuestFault = 380,
    kKvmHandleSysReg = 381,
    kKvmHvcArm64 = 382,
    kKvmIrqLine = 383,
    kKvmMmio = 384,
    kKvmMmioEmulate = 385,
    kKvmSetGuestDebug = 386,
    kKvmSetIrq = 387,
    kKvmSetSpteHva = 388,
    kKvmSetWayFlush = 389,
    kKvmSysAccess = 390,
    kKvmTestAgeHva = 391,
    kKvmTimerEmulate = 392,
    kKvmTimerHrtimerExpire = 393,
    kKvmTimerRestoreState = 394,
    kKvmTimerSaveState = 395,
    kKvmTimerUpdateIrq = 396,
    kKvmToggleCache = 397,
    kKvmUnmapHvaRange = 398,
    kKvmUserspaceExit = 399,
    kKvmVcpuWakeup = 400,
    kKvmWfxArm64 = 401,
    kTrapReg = 402,
    kVgicUpdateIrqPending = 403,
    kWakeupSourceActivate = 404,
    kWakeupSourceDeactivate = 405,
    kUfshcdCommand = 406,
    kUfshcdClkGating = 407,
    kConsole = 408,
    kDrmVblankEvent = 409,
    kDrmVblankEventDelivered = 410,
    kDrmSchedJob = 411,
    kDrmRunJob = 412,
    kDrmSchedProcessJob = 413,
    kDmaFenceInit = 414,
    kDmaFenceEmit = 415,
    kDmaFenceSignaled = 416,
    kDmaFenceWaitStart = 417,
    kDmaFenceWaitEnd = 418,
    kF2FsIostat = 419,
    kF2FsIostatLatency = 420,
    kSchedCpuUtilCfs = 421,
    kV4L2Qbuf = 422,
    kV4L2Dqbuf = 423,
    kVb2V4L2BufQueue = 424,
    kVb2V4L2BufDone = 425,
    kVb2V4L2Qbuf = 426,
    kVb2V4L2Dqbuf = 427,
    kDsiCmdFifoStatus = 428,
    kDsiRx = 429,
    kDsiTx = 430,
    kAndroidFsDatareadEnd = 431,
    kAndroidFsDatareadStart = 432,
    kAndroidFsDatawriteEnd = 433,
    kAndroidFsDatawriteStart = 434,
    kAndroidFsFsyncEnd = 435,
    kAndroidFsFsyncStart = 436,
    kFuncgraphEntry = 437,
    kFuncgraphExit = 438,
    kVirtioVideoCmd = 439,
    kVirtioVideoCmdDone = 440,
    kVirtioVideoResourceQueue = 441,
    kVirtioVideoResourceQueueDone = 442,
    kMmShrinkSlabStart = 443,
    kMmShrinkSlabEnd = 444,
    kTrustySmc = 445,
    kTrustySmcDone = 446,
    kTrustyStdCall32 = 447,
    kTrustyStdCall32Done = 448,
    kTrustyShareMemory = 449,
    kTrustyShareMemoryDone = 450,
    kTrustyReclaimMemory = 451,
    kTrustyReclaimMemoryDone = 452,
    kTrustyIrq = 453,
    kTrustyIpcHandleEvent = 454,
    kTrustyIpcConnect = 455,
    kTrustyIpcConnectEnd = 456,
    kTrustyIpcWrite = 457,
    kTrustyIpcPoll = 458,
    kTrustyIpcRead = 460,
    kTrustyIpcReadEnd = 461,
    kTrustyIpcRx = 462,
    kTrustyEnqueueNop = 464,
    kCmaAllocStart = 465,
    kCmaAllocInfo = 466,
    kLwisTracingMarkWrite = 467,
    kVirtioGpuCmdQueue = 468,
    kVirtioGpuCmdResponse = 469,
    kMaliMaliKCPUCQSSET = 470,
    kMaliMaliKCPUCQSWAITSTART = 471,
    kMaliMaliKCPUCQSWAITEND = 472,
    kMaliMaliKCPUFENCESIGNAL = 473,
    kMaliMaliKCPUFENCEWAITSTART = 474,
    kMaliMaliKCPUFENCEWAITEND = 475,
    kHypEnter = 476,
    kHypExit = 477,
    kHostHcall = 478,
    kHostSmc = 479,
    kHostMemAbort = 480,
    kSuspendResumeMinimal = 481,
    kMaliMaliCSFINTERRUPTSTART = 482,
    kMaliMaliCSFINTERRUPTEND = 483,
    EVENT_NOT_SET = 0,
  };

  static inline const FtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FtraceEvent*>(
               &_FtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceEvent& a, FtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceEvent& from) {
    FtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceEvent";
  }
  protected:
  explicit FtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kPidFieldNumber = 2,
    kCommonFlagsFieldNumber = 5,
    kPrintFieldNumber = 3,
    kSchedSwitchFieldNumber = 4,
    kCpuFrequencyFieldNumber = 11,
    kCpuFrequencyLimitsFieldNumber = 12,
    kCpuIdleFieldNumber = 13,
    kClockEnableFieldNumber = 14,
    kClockDisableFieldNumber = 15,
    kClockSetRateFieldNumber = 16,
    kSchedWakeupFieldNumber = 17,
    kSchedBlockedReasonFieldNumber = 18,
    kSchedCpuHotplugFieldNumber = 19,
    kSchedWakingFieldNumber = 20,
    kIpiEntryFieldNumber = 21,
    kIpiExitFieldNumber = 22,
    kIpiRaiseFieldNumber = 23,
    kSoftirqEntryFieldNumber = 24,
    kSoftirqExitFieldNumber = 25,
    kSoftirqRaiseFieldNumber = 26,
    kI2CReadFieldNumber = 27,
    kI2CWriteFieldNumber = 28,
    kI2CResultFieldNumber = 29,
    kI2CReplyFieldNumber = 30,
    kSmbusReadFieldNumber = 31,
    kSmbusWriteFieldNumber = 32,
    kSmbusResultFieldNumber = 33,
    kSmbusReplyFieldNumber = 34,
    kLowmemoryKillFieldNumber = 35,
    kIrqHandlerEntryFieldNumber = 36,
    kIrqHandlerExitFieldNumber = 37,
    kSyncPtFieldNumber = 38,
    kSyncTimelineFieldNumber = 39,
    kSyncWaitFieldNumber = 40,
    kExt4DaWriteBeginFieldNumber = 41,
    kExt4DaWriteEndFieldNumber = 42,
    kExt4SyncFileEnterFieldNumber = 43,
    kExt4SyncFileExitFieldNumber = 44,
    kBlockRqIssueFieldNumber = 45,
    kMmVmscanDirectReclaimBeginFieldNumber = 46,
    kMmVmscanDirectReclaimEndFieldNumber = 47,
    kMmVmscanKswapdWakeFieldNumber = 48,
    kMmVmscanKswapdSleepFieldNumber = 49,
    kBinderTransactionFieldNumber = 50,
    kBinderTransactionReceivedFieldNumber = 51,
    kBinderSetPriorityFieldNumber = 52,
    kBinderLockFieldNumber = 53,
    kBinderLockedFieldNumber = 54,
    kBinderUnlockFieldNumber = 55,
    kWorkqueueActivateWorkFieldNumber = 56,
    kWorkqueueExecuteEndFieldNumber = 57,
    kWorkqueueExecuteStartFieldNumber = 58,
    kWorkqueueQueueWorkFieldNumber = 59,
    kRegulatorDisableFieldNumber = 60,
    kRegulatorDisableCompleteFieldNumber = 61,
    kRegulatorEnableFieldNumber = 62,
    kRegulatorEnableCompleteFieldNumber = 63,
    kRegulatorEnableDelayFieldNumber = 64,
    kRegulatorSetVoltageFieldNumber = 65,
    kRegulatorSetVoltageCompleteFieldNumber = 66,
    kCgroupAttachTaskFieldNumber = 67,
    kCgroupMkdirFieldNumber = 68,
    kCgroupRemountFieldNumber = 69,
    kCgroupRmdirFieldNumber = 70,
    kCgroupTransferTasksFieldNumber = 71,
    kCgroupDestroyRootFieldNumber = 72,
    kCgroupReleaseFieldNumber = 73,
    kCgroupRenameFieldNumber = 74,
    kCgroupSetupRootFieldNumber = 75,
    kMdpCmdKickoffFieldNumber = 76,
    kMdpCommitFieldNumber = 77,
    kMdpPerfSetOtFieldNumber = 78,
    kMdpSsppChangeFieldNumber = 79,
    kTracingMarkWriteFieldNumber = 80,
    kMdpCmdPingpongDoneFieldNumber = 81,
    kMdpCompareBwFieldNumber = 82,
    kMdpPerfSetPanicLutsFieldNumber = 83,
    kMdpSsppSetFieldNumber = 84,
    kMdpCmdReadptrDoneFieldNumber = 85,
    kMdpMisrCrcFieldNumber = 86,
    kMdpPerfSetQosLutsFieldNumber = 87,
    kMdpTraceCounterFieldNumber = 88,
    kMdpCmdReleaseBwFieldNumber = 89,
    kMdpMixerUpdateFieldNumber = 90,
    kMdpPerfSetWmLevelsFieldNumber = 91,
    kMdpVideoUnderrunDoneFieldNumber = 92,
    kMdpCmdWaitPingpongFieldNumber = 93,
    kMdpPerfPrefillCalcFieldNumber = 94,
    kMdpPerfUpdateBusFieldNumber = 95,
    kRotatorBwAoAsContextFieldNumber = 96,
    kMmFilemapAddToPageCacheFieldNumber = 97,
    kMmFilemapDeleteFromPageCacheFieldNumber = 98,
    kMmCompactionBeginFieldNumber = 99,
    kMmCompactionDeferCompactionFieldNumber = 100,
    kMmCompactionDeferredFieldNumber = 101,
    kMmCompactionDeferResetFieldNumber = 102,
    kMmCompactionEndFieldNumber = 103,
    kMmCompactionFinishedFieldNumber = 104,
    kMmCompactionIsolateFreepagesFieldNumber = 105,
    kMmCompactionIsolateMigratepagesFieldNumber = 106,
    kMmCompactionKcompactdSleepFieldNumber = 107,
    kMmCompactionKcompactdWakeFieldNumber = 108,
    kMmCompactionMigratepagesFieldNumber = 109,
    kMmCompactionSuitableFieldNumber = 110,
    kMmCompactionTryToCompactPagesFieldNumber = 111,
    kMmCompactionWakeupKcompactdFieldNumber = 112,
    kSuspendResumeFieldNumber = 113,
    kSchedWakeupNewFieldNumber = 114,
    kBlockBioBackmergeFieldNumber = 115,
    kBlockBioBounceFieldNumber = 116,
    kBlockBioCompleteFieldNumber = 117,
    kBlockBioFrontmergeFieldNumber = 118,
    kBlockBioQueueFieldNumber = 119,
    kBlockBioRemapFieldNumber = 120,
    kBlockDirtyBufferFieldNumber = 121,
    kBlockGetrqFieldNumber = 122,
    kBlockPlugFieldNumber = 123,
    kBlockRqAbortFieldNumber = 124,
    kBlockRqCompleteFieldNumber = 125,
    kBlockRqInsertFieldNumber = 126,
    kBlockRqRemapFieldNumber = 128,
    kBlockRqRequeueFieldNumber = 129,
    kBlockSleeprqFieldNumber = 130,
    kBlockSplitFieldNumber = 131,
    kBlockTouchBufferFieldNumber = 132,
    kBlockUnplugFieldNumber = 133,
    kExt4AllocDaBlocksFieldNumber = 134,
    kExt4AllocateBlocksFieldNumber = 135,
    kExt4AllocateInodeFieldNumber = 136,
    kExt4BeginOrderedTruncateFieldNumber = 137,
    kExt4CollapseRangeFieldNumber = 138,
    kExt4DaReleaseSpaceFieldNumber = 139,
    kExt4DaReserveSpaceFieldNumber = 140,
    kExt4DaUpdateReserveSpaceFieldNumber = 141,
    kExt4DaWritePagesFieldNumber = 142,
    kExt4DaWritePagesExtentFieldNumber = 143,
    kExt4DirectIOEnterFieldNumber = 144,
    kExt4DirectIOExitFieldNumber = 145,
    kExt4DiscardBlocksFieldNumber = 146,
    kExt4DiscardPreallocationsFieldNumber = 147,
    kExt4DropInodeFieldNumber = 148,
    kExt4EsCacheExtentFieldNumber = 149,
    kExt4EsFindDelayedExtentRangeEnterFieldNumber = 150,
    kExt4EsFindDelayedExtentRangeExitFieldNumber = 151,
    kExt4EsInsertExtentFieldNumber = 152,
    kExt4EsLookupExtentEnterFieldNumber = 153,
    kExt4EsLookupExtentExitFieldNumber = 154,
    kExt4EsRemoveExtentFieldNumber = 155,
    kExt4EsShrinkFieldNumber = 156,
    kExt4EsShrinkCountFieldNumber = 157,
    kExt4EsShrinkScanEnterFieldNumber = 158,
    kExt4EsShrinkScanExitFieldNumber = 159,
    kExt4EvictInodeFieldNumber = 160,
    kExt4ExtConvertToInitializedEnterFieldNumber = 161,
    kExt4ExtConvertToInitializedFastpathFieldNumber = 162,
    kExt4ExtHandleUnwrittenExtentsFieldNumber = 163,
    kExt4ExtInCacheFieldNumber = 164,
    kExt4ExtLoadExtentFieldNumber = 165,
    kExt4ExtMapBlocksEnterFieldNumber = 166,
    kExt4ExtMapBlocksExitFieldNumber = 167,
    kExt4ExtPutInCacheFieldNumber = 168,
    kExt4ExtRemoveSpaceFieldNumber = 169,
    kExt4ExtRemoveSpaceDoneFieldNumber = 170,
    kExt4ExtRmIdxFieldNumber = 171,
    kExt4ExtRmLeafFieldNumber = 172,
    kExt4ExtShowExtentFieldNumber = 173,
    kExt4FallocateEnterFieldNumber = 174,
    kExt4FallocateExitFieldNumber = 175,
    kExt4FindDelallocRangeFieldNumber = 176,
    kExt4ForgetFieldNumber = 177,
    kExt4FreeBlocksFieldNumber = 178,
    kExt4FreeInodeFieldNumber = 179,
    kExt4GetImpliedClusterAllocExitFieldNumber = 180,
    kExt4GetReservedClusterAllocFieldNumber = 181,
    kExt4IndMapBlocksEnterFieldNumber = 182,
    kExt4IndMapBlocksExitFieldNumber = 183,
    kExt4InsertRangeFieldNumber = 184,
    kExt4InvalidatepageFieldNumber = 185,
    kExt4JournalStartFieldNumber = 186,
    kExt4JournalStartReservedFieldNumber = 187,
    kExt4JournalledInvalidatepageFieldNumber = 188,
    kExt4JournalledWriteEndFieldNumber = 189,
    kExt4LoadInodeFieldNumber = 190,
    kExt4LoadInodeBitmapFieldNumber = 191,
    kExt4MarkInodeDirtyFieldNumber = 192,
    kExt4MbBitmapLoadFieldNumber = 193,
    kExt4MbBuddyBitmapLoadFieldNumber = 194,
    kExt4MbDiscardPreallocationsFieldNumber = 195,
    kExt4MbNewGroupPaFieldNumber = 196,
    kExt4MbNewInodePaFieldNumber = 197,
    kExt4MbReleaseGroupPaFieldNumber = 198,
    kExt4MbReleaseInodePaFieldNumber = 199,
    kExt4MballocAllocFieldNumber = 200,
    kExt4MballocDiscardFieldNumber = 201,
    kExt4MballocFreeFieldNumber = 202,
    kExt4MballocPreallocFieldNumber = 203,
    kExt4OtherInodeUpdateTimeFieldNumber = 204,
    kExt4PunchHoleFieldNumber = 205,
    kExt4ReadBlockBitmapLoadFieldNumber = 206,
    kExt4ReadpageFieldNumber = 207,
    kExt4ReleasepageFieldNumber = 208,
    kExt4RemoveBlocksFieldNumber = 209,
    kExt4RequestBlocksFieldNumber = 210,
    kExt4RequestInodeFieldNumber = 211,
    kExt4SyncFsFieldNumber = 212,
    kExt4TrimAllFreeFieldNumber = 213,
    kExt4TrimExtentFieldNumber = 214,
    kExt4TruncateEnterFieldNumber = 215,
    kExt4TruncateExitFieldNumber = 216,
    kExt4UnlinkEnterFieldNumber = 217,
    kExt4UnlinkExitFieldNumber = 218,
    kExt4WriteBeginFieldNumber = 219,
    kExt4WriteEndFieldNumber = 230,
    kExt4WritepageFieldNumber = 231,
    kExt4WritepagesFieldNumber = 232,
    kExt4WritepagesResultFieldNumber = 233,
    kExt4ZeroRangeFieldNumber = 234,
    kTaskNewtaskFieldNumber = 235,
    kTaskRenameFieldNumber = 236,
    kSchedProcessExecFieldNumber = 237,
    kSchedProcessExitFieldNumber = 238,
    kSchedProcessForkFieldNumber = 239,
    kSchedProcessFreeFieldNumber = 240,
    kSchedProcessHangFieldNumber = 241,
    kSchedProcessWaitFieldNumber = 242,
    kF2FsDoSubmitBioFieldNumber = 243,
    kF2FsEvictInodeFieldNumber = 244,
    kF2FsFallocateFieldNumber = 245,
    kF2FsGetDataBlockFieldNumber = 246,
    kF2FsGetVictimFieldNumber = 247,
    kF2FsIgetFieldNumber = 248,
    kF2FsIgetExitFieldNumber = 249,
    kF2FsNewInodeFieldNumber = 250,
    kF2FsReadpageFieldNumber = 251,
    kF2FsReserveNewBlockFieldNumber = 252,
    kF2FsSetPageDirtyFieldNumber = 253,
    kF2FsSubmitWritePageFieldNumber = 254,
    kF2FsSyncFileEnterFieldNumber = 255,
    kF2FsSyncFileExitFieldNumber = 256,
    kF2FsSyncFsFieldNumber = 257,
    kF2FsTruncateFieldNumber = 258,
    kF2FsTruncateBlocksEnterFieldNumber = 259,
    kF2FsTruncateBlocksExitFieldNumber = 260,
    kF2FsTruncateDataBlocksRangeFieldNumber = 261,
    kF2FsTruncateInodeBlocksEnterFieldNumber = 262,
    kF2FsTruncateInodeBlocksExitFieldNumber = 263,
    kF2FsTruncateNodeFieldNumber = 264,
    kF2FsTruncateNodesEnterFieldNumber = 265,
    kF2FsTruncateNodesExitFieldNumber = 266,
    kF2FsTruncatePartialNodesFieldNumber = 267,
    kF2FsUnlinkEnterFieldNumber = 268,
    kF2FsUnlinkExitFieldNumber = 269,
    kF2FsVmPageMkwriteFieldNumber = 270,
    kF2FsWriteBeginFieldNumber = 271,
    kF2FsWriteCheckpointFieldNumber = 272,
    kF2FsWriteEndFieldNumber = 273,
    kAllocPagesIommuEndFieldNumber = 274,
    kAllocPagesIommuFailFieldNumber = 275,
    kAllocPagesIommuStartFieldNumber = 276,
    kAllocPagesSysEndFieldNumber = 277,
    kAllocPagesSysFailFieldNumber = 278,
    kAllocPagesSysStartFieldNumber = 279,
    kDmaAllocContiguousRetryFieldNumber = 280,
    kIommuMapRangeFieldNumber = 281,
    kIommuSecPtblMapRangeEndFieldNumber = 282,
    kIommuSecPtblMapRangeStartFieldNumber = 283,
    kIonAllocBufferEndFieldNumber = 284,
    kIonAllocBufferFailFieldNumber = 285,
    kIonAllocBufferFallbackFieldNumber = 286,
    kIonAllocBufferStartFieldNumber = 287,
    kIonCpAllocRetryFieldNumber = 288,
    kIonCpSecureBufferEndFieldNumber = 289,
    kIonCpSecureBufferStartFieldNumber = 290,
    kIonPrefetchingFieldNumber = 291,
    kIonSecureCmaAddToPoolEndFieldNumber = 292,
    kIonSecureCmaAddToPoolStartFieldNumber = 293,
    kIonSecureCmaAllocateEndFieldNumber = 294,
    kIonSecureCmaAllocateStartFieldNumber = 295,
    kIonSecureCmaShrinkPoolEndFieldNumber = 296,
    kIonSecureCmaShrinkPoolStartFieldNumber = 297,
    kKfreeFieldNumber = 298,
    kKmallocFieldNumber = 299,
    kKmallocNodeFieldNumber = 300,
    kKmemCacheAllocFieldNumber = 301,
    kKmemCacheAllocNodeFieldNumber = 302,
    kKmemCacheFreeFieldNumber = 303,
    kMigratePagesEndFieldNumber = 304,
    kMigratePagesStartFieldNumber = 305,
    kMigrateRetryFieldNumber = 306,
    kMmPageAllocFieldNumber = 307,
    kMmPageAllocExtfragFieldNumber = 308,
    kMmPageAllocZoneLockedFieldNumber = 309,
    kMmPageFreeFieldNumber = 310,
    kMmPageFreeBatchedFieldNumber = 311,
    kMmPagePcpuDrainFieldNumber = 312,
    kRssStatFieldNumber = 313,
    kIonHeapShrinkFieldNumber = 314,
    kIonHeapGrowFieldNumber = 315,
    kFenceInitFieldNumber = 316,
    kFenceDestroyFieldNumber = 317,
    kFenceEnableSignalFieldNumber = 318,
    kFenceSignaledFieldNumber = 319,
    kClkEnableFieldNumber = 320,
    kClkDisableFieldNumber = 321,
    kClkSetRateFieldNumber = 322,
    kBinderTransactionAllocBufFieldNumber = 323,
    kSignalDeliverFieldNumber = 324,
    kSignalGenerateFieldNumber = 325,
    kOomScoreAdjUpdateFieldNumber = 326,
    kGenericFieldNumber = 327,
    kMmEventRecordFieldNumber = 328,
    kSysEnterFieldNumber = 329,
    kSysExitFieldNumber = 330,
    kZeroFieldNumber = 331,
    kGpuFrequencyFieldNumber = 332,
    kSdeTracingMarkWriteFieldNumber = 333,
    kMarkVictimFieldNumber = 334,
    kIonStatFieldNumber = 335,
    kIonBufferCreateFieldNumber = 336,
    kIonBufferDestroyFieldNumber = 337,
    kScmCallStartFieldNumber = 338,
    kScmCallEndFieldNumber = 339,
    kGpuMemTotalFieldNumber = 340,
    kThermalTemperatureFieldNumber = 341,
    kCdevUpdateFieldNumber = 342,
    kCpuhpExitFieldNumber = 343,
    kCpuhpMultiEnterFieldNumber = 344,
    kCpuhpEnterFieldNumber = 345,
    kCpuhpLatencyFieldNumber = 346,
    kFastrpcDmaStatFieldNumber = 347,
    kDpuTracingMarkWriteFieldNumber = 348,
    kG2DTracingMarkWriteFieldNumber = 349,
    kMaliTracingMarkWriteFieldNumber = 350,
    kDmaHeapStatFieldNumber = 351,
    kCpuhpPauseFieldNumber = 352,
    kSchedPiSetprioFieldNumber = 353,
    kSdeSdeEvtlogFieldNumber = 354,
    kSdeSdePerfCalcCrtcFieldNumber = 355,
    kSdeSdePerfCrtcUpdateFieldNumber = 356,
    kSdeSdePerfSetQosLutsFieldNumber = 357,
    kSdeSdePerfUpdateBusFieldNumber = 358,
    kRssStatThrottledFieldNumber = 359,
    kNetifReceiveSkbFieldNumber = 360,
    kNetDevXmitFieldNumber = 361,
    kInetSockSetStateFieldNumber = 362,
    kTcpRetransmitSkbFieldNumber = 363,
    kCrosEcSensorhubDataFieldNumber = 364,
    kNapiGroReceiveEntryFieldNumber = 365,
    kNapiGroReceiveExitFieldNumber = 366,
    kKfreeSkbFieldNumber = 367,
    kKvmAccessFaultFieldNumber = 368,
    kKvmAckIrqFieldNumber = 369,
    kKvmAgeHvaFieldNumber = 370,
    kKvmAgePageFieldNumber = 371,
    kKvmArmClearDebugFieldNumber = 372,
    kKvmArmSetDreg32FieldNumber = 373,
    kKvmArmSetRegsetFieldNumber = 374,
    kKvmArmSetupDebugFieldNumber = 375,
    kKvmEntryFieldNumber = 376,
    kKvmExitFieldNumber = 377,
    kKvmFpuFieldNumber = 378,
    kKvmGetTimerMapFieldNumber = 379,
    kKvmGuestFaultFieldNumber = 380,
    kKvmHandleSysRegFieldNumber = 381,
    kKvmHvcArm64FieldNumber = 382,
    kKvmIrqLineFieldNumber = 383,
    kKvmMmioFieldNumber = 384,
    kKvmMmioEmulateFieldNumber = 385,
    kKvmSetGuestDebugFieldNumber = 386,
    kKvmSetIrqFieldNumber = 387,
    kKvmSetSpteHvaFieldNumber = 388,
    kKvmSetWayFlushFieldNumber = 389,
    kKvmSysAccessFieldNumber = 390,
    kKvmTestAgeHvaFieldNumber = 391,
    kKvmTimerEmulateFieldNumber = 392,
    kKvmTimerHrtimerExpireFieldNumber = 393,
    kKvmTimerRestoreStateFieldNumber = 394,
    kKvmTimerSaveStateFieldNumber = 395,
    kKvmTimerUpdateIrqFieldNumber = 396,
    kKvmToggleCacheFieldNumber = 397,
    kKvmUnmapHvaRangeFieldNumber = 398,
    kKvmUserspaceExitFieldNumber = 399,
    kKvmVcpuWakeupFieldNumber = 400,
    kKvmWfxArm64FieldNumber = 401,
    kTrapRegFieldNumber = 402,
    kVgicUpdateIrqPendingFieldNumber = 403,
    kWakeupSourceActivateFieldNumber = 404,
    kWakeupSourceDeactivateFieldNumber = 405,
    kUfshcdCommandFieldNumber = 406,
    kUfshcdClkGatingFieldNumber = 407,
    kConsoleFieldNumber = 408,
    kDrmVblankEventFieldNumber = 409,
    kDrmVblankEventDeliveredFieldNumber = 410,
    kDrmSchedJobFieldNumber = 411,
    kDrmRunJobFieldNumber = 412,
    kDrmSchedProcessJobFieldNumber = 413,
    kDmaFenceInitFieldNumber = 414,
    kDmaFenceEmitFieldNumber = 415,
    kDmaFenceSignaledFieldNumber = 416,
    kDmaFenceWaitStartFieldNumber = 417,
    kDmaFenceWaitEndFieldNumber = 418,
    kF2FsIostatFieldNumber = 419,
    kF2FsIostatLatencyFieldNumber = 420,
    kSchedCpuUtilCfsFieldNumber = 421,
    kV4L2QbufFieldNumber = 422,
    kV4L2DqbufFieldNumber = 423,
    kVb2V4L2BufQueueFieldNumber = 424,
    kVb2V4L2BufDoneFieldNumber = 425,
    kVb2V4L2QbufFieldNumber = 426,
    kVb2V4L2DqbufFieldNumber = 427,
    kDsiCmdFifoStatusFieldNumber = 428,
    kDsiRxFieldNumber = 429,
    kDsiTxFieldNumber = 430,
    kAndroidFsDatareadEndFieldNumber = 431,
    kAndroidFsDatareadStartFieldNumber = 432,
    kAndroidFsDatawriteEndFieldNumber = 433,
    kAndroidFsDatawriteStartFieldNumber = 434,
    kAndroidFsFsyncEndFieldNumber = 435,
    kAndroidFsFsyncStartFieldNumber = 436,
    kFuncgraphEntryFieldNumber = 437,
    kFuncgraphExitFieldNumber = 438,
    kVirtioVideoCmdFieldNumber = 439,
    kVirtioVideoCmdDoneFieldNumber = 440,
    kVirtioVideoResourceQueueFieldNumber = 441,
    kVirtioVideoResourceQueueDoneFieldNumber = 442,
    kMmShrinkSlabStartFieldNumber = 443,
    kMmShrinkSlabEndFieldNumber = 444,
    kTrustySmcFieldNumber = 445,
    kTrustySmcDoneFieldNumber = 446,
    kTrustyStdCall32FieldNumber = 447,
    kTrustyStdCall32DoneFieldNumber = 448,
    kTrustyShareMemoryFieldNumber = 449,
    kTrustyShareMemoryDoneFieldNumber = 450,
    kTrustyReclaimMemoryFieldNumber = 451,
    kTrustyReclaimMemoryDoneFieldNumber = 452,
    kTrustyIrqFieldNumber = 453,
    kTrustyIpcHandleEventFieldNumber = 454,
    kTrustyIpcConnectFieldNumber = 455,
    kTrustyIpcConnectEndFieldNumber = 456,
    kTrustyIpcWriteFieldNumber = 457,
    kTrustyIpcPollFieldNumber = 458,
    kTrustyIpcReadFieldNumber = 460,
    kTrustyIpcReadEndFieldNumber = 461,
    kTrustyIpcRxFieldNumber = 462,
    kTrustyEnqueueNopFieldNumber = 464,
    kCmaAllocStartFieldNumber = 465,
    kCmaAllocInfoFieldNumber = 466,
    kLwisTracingMarkWriteFieldNumber = 467,
    kVirtioGpuCmdQueueFieldNumber = 468,
    kVirtioGpuCmdResponseFieldNumber = 469,
    kMaliMaliKCPUCQSSETFieldNumber = 470,
    kMaliMaliKCPUCQSWAITSTARTFieldNumber = 471,
    kMaliMaliKCPUCQSWAITENDFieldNumber = 472,
    kMaliMaliKCPUFENCESIGNALFieldNumber = 473,
    kMaliMaliKCPUFENCEWAITSTARTFieldNumber = 474,
    kMaliMaliKCPUFENCEWAITENDFieldNumber = 475,
    kHypEnterFieldNumber = 476,
    kHypExitFieldNumber = 477,
    kHostHcallFieldNumber = 478,
    kHostSmcFieldNumber = 479,
    kHostMemAbortFieldNumber = 480,
    kSuspendResumeMinimalFieldNumber = 481,
    kMaliMaliCSFINTERRUPTSTARTFieldNumber = 482,
    kMaliMaliCSFINTERRUPTENDFieldNumber = 483,
  };
  // optional uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // optional uint32 common_flags = 5;
  bool has_common_flags() const;
  void clear_common_flags() ;
  ::uint32_t common_flags() const;
  void set_common_flags(::uint32_t value);

  private:
  ::uint32_t _internal_common_flags() const;
  void _internal_set_common_flags(::uint32_t value);

  public:
  // .perfetto.protos.PrintFtraceEvent print = 3;
  bool has_print() const;
  private:
  bool _internal_has_print() const;

  public:
  void clear_print() ;
  const ::perfetto::protos::PrintFtraceEvent& print() const;
  PROTOBUF_NODISCARD ::perfetto::protos::PrintFtraceEvent* release_print();
  ::perfetto::protos::PrintFtraceEvent* mutable_print();
  void set_allocated_print(::perfetto::protos::PrintFtraceEvent* print);
  private:
  const ::perfetto::protos::PrintFtraceEvent& _internal_print() const;
  ::perfetto::protos::PrintFtraceEvent* _internal_mutable_print();
  public:
  void unsafe_arena_set_allocated_print(
      ::perfetto::protos::PrintFtraceEvent* print);
  ::perfetto::protos::PrintFtraceEvent* unsafe_arena_release_print();
  // .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
  bool has_sched_switch() const;
  private:
  bool _internal_has_sched_switch() const;

  public:
  void clear_sched_switch() ;
  const ::perfetto::protos::SchedSwitchFtraceEvent& sched_switch() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedSwitchFtraceEvent* release_sched_switch();
  ::perfetto::protos::SchedSwitchFtraceEvent* mutable_sched_switch();
  void set_allocated_sched_switch(::perfetto::protos::SchedSwitchFtraceEvent* sched_switch);
  private:
  const ::perfetto::protos::SchedSwitchFtraceEvent& _internal_sched_switch() const;
  ::perfetto::protos::SchedSwitchFtraceEvent* _internal_mutable_sched_switch();
  public:
  void unsafe_arena_set_allocated_sched_switch(
      ::perfetto::protos::SchedSwitchFtraceEvent* sched_switch);
  ::perfetto::protos::SchedSwitchFtraceEvent* unsafe_arena_release_sched_switch();
  // .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
  bool has_cpu_frequency() const;
  private:
  bool _internal_has_cpu_frequency() const;

  public:
  void clear_cpu_frequency() ;
  const ::perfetto::protos::CpuFrequencyFtraceEvent& cpu_frequency() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuFrequencyFtraceEvent* release_cpu_frequency();
  ::perfetto::protos::CpuFrequencyFtraceEvent* mutable_cpu_frequency();
  void set_allocated_cpu_frequency(::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency);
  private:
  const ::perfetto::protos::CpuFrequencyFtraceEvent& _internal_cpu_frequency() const;
  ::perfetto::protos::CpuFrequencyFtraceEvent* _internal_mutable_cpu_frequency();
  public:
  void unsafe_arena_set_allocated_cpu_frequency(
      ::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency);
  ::perfetto::protos::CpuFrequencyFtraceEvent* unsafe_arena_release_cpu_frequency();
  // .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
  bool has_cpu_frequency_limits() const;
  private:
  bool _internal_has_cpu_frequency_limits() const;

  public:
  void clear_cpu_frequency_limits() ;
  const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& cpu_frequency_limits() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* release_cpu_frequency_limits();
  ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* mutable_cpu_frequency_limits();
  void set_allocated_cpu_frequency_limits(::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits);
  private:
  const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& _internal_cpu_frequency_limits() const;
  ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* _internal_mutable_cpu_frequency_limits();
  public:
  void unsafe_arena_set_allocated_cpu_frequency_limits(
      ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits);
  ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* unsafe_arena_release_cpu_frequency_limits();
  // .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
  bool has_cpu_idle() const;
  private:
  bool _internal_has_cpu_idle() const;

  public:
  void clear_cpu_idle() ;
  const ::perfetto::protos::CpuIdleFtraceEvent& cpu_idle() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuIdleFtraceEvent* release_cpu_idle();
  ::perfetto::protos::CpuIdleFtraceEvent* mutable_cpu_idle();
  void set_allocated_cpu_idle(::perfetto::protos::CpuIdleFtraceEvent* cpu_idle);
  private:
  const ::perfetto::protos::CpuIdleFtraceEvent& _internal_cpu_idle() const;
  ::perfetto::protos::CpuIdleFtraceEvent* _internal_mutable_cpu_idle();
  public:
  void unsafe_arena_set_allocated_cpu_idle(
      ::perfetto::protos::CpuIdleFtraceEvent* cpu_idle);
  ::perfetto::protos::CpuIdleFtraceEvent* unsafe_arena_release_cpu_idle();
  // .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
  bool has_clock_enable() const;
  private:
  bool _internal_has_clock_enable() const;

  public:
  void clear_clock_enable() ;
  const ::perfetto::protos::ClockEnableFtraceEvent& clock_enable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClockEnableFtraceEvent* release_clock_enable();
  ::perfetto::protos::ClockEnableFtraceEvent* mutable_clock_enable();
  void set_allocated_clock_enable(::perfetto::protos::ClockEnableFtraceEvent* clock_enable);
  private:
  const ::perfetto::protos::ClockEnableFtraceEvent& _internal_clock_enable() const;
  ::perfetto::protos::ClockEnableFtraceEvent* _internal_mutable_clock_enable();
  public:
  void unsafe_arena_set_allocated_clock_enable(
      ::perfetto::protos::ClockEnableFtraceEvent* clock_enable);
  ::perfetto::protos::ClockEnableFtraceEvent* unsafe_arena_release_clock_enable();
  // .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
  bool has_clock_disable() const;
  private:
  bool _internal_has_clock_disable() const;

  public:
  void clear_clock_disable() ;
  const ::perfetto::protos::ClockDisableFtraceEvent& clock_disable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClockDisableFtraceEvent* release_clock_disable();
  ::perfetto::protos::ClockDisableFtraceEvent* mutable_clock_disable();
  void set_allocated_clock_disable(::perfetto::protos::ClockDisableFtraceEvent* clock_disable);
  private:
  const ::perfetto::protos::ClockDisableFtraceEvent& _internal_clock_disable() const;
  ::perfetto::protos::ClockDisableFtraceEvent* _internal_mutable_clock_disable();
  public:
  void unsafe_arena_set_allocated_clock_disable(
      ::perfetto::protos::ClockDisableFtraceEvent* clock_disable);
  ::perfetto::protos::ClockDisableFtraceEvent* unsafe_arena_release_clock_disable();
  // .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
  bool has_clock_set_rate() const;
  private:
  bool _internal_has_clock_set_rate() const;

  public:
  void clear_clock_set_rate() ;
  const ::perfetto::protos::ClockSetRateFtraceEvent& clock_set_rate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClockSetRateFtraceEvent* release_clock_set_rate();
  ::perfetto::protos::ClockSetRateFtraceEvent* mutable_clock_set_rate();
  void set_allocated_clock_set_rate(::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate);
  private:
  const ::perfetto::protos::ClockSetRateFtraceEvent& _internal_clock_set_rate() const;
  ::perfetto::protos::ClockSetRateFtraceEvent* _internal_mutable_clock_set_rate();
  public:
  void unsafe_arena_set_allocated_clock_set_rate(
      ::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate);
  ::perfetto::protos::ClockSetRateFtraceEvent* unsafe_arena_release_clock_set_rate();
  // .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
  bool has_sched_wakeup() const;
  private:
  bool _internal_has_sched_wakeup() const;

  public:
  void clear_sched_wakeup() ;
  const ::perfetto::protos::SchedWakeupFtraceEvent& sched_wakeup() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedWakeupFtraceEvent* release_sched_wakeup();
  ::perfetto::protos::SchedWakeupFtraceEvent* mutable_sched_wakeup();
  void set_allocated_sched_wakeup(::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup);
  private:
  const ::perfetto::protos::SchedWakeupFtraceEvent& _internal_sched_wakeup() const;
  ::perfetto::protos::SchedWakeupFtraceEvent* _internal_mutable_sched_wakeup();
  public:
  void unsafe_arena_set_allocated_sched_wakeup(
      ::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup);
  ::perfetto::protos::SchedWakeupFtraceEvent* unsafe_arena_release_sched_wakeup();
  // .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
  bool has_sched_blocked_reason() const;
  private:
  bool _internal_has_sched_blocked_reason() const;

  public:
  void clear_sched_blocked_reason() ;
  const ::perfetto::protos::SchedBlockedReasonFtraceEvent& sched_blocked_reason() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedBlockedReasonFtraceEvent* release_sched_blocked_reason();
  ::perfetto::protos::SchedBlockedReasonFtraceEvent* mutable_sched_blocked_reason();
  void set_allocated_sched_blocked_reason(::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason);
  private:
  const ::perfetto::protos::SchedBlockedReasonFtraceEvent& _internal_sched_blocked_reason() const;
  ::perfetto::protos::SchedBlockedReasonFtraceEvent* _internal_mutable_sched_blocked_reason();
  public:
  void unsafe_arena_set_allocated_sched_blocked_reason(
      ::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason);
  ::perfetto::protos::SchedBlockedReasonFtraceEvent* unsafe_arena_release_sched_blocked_reason();
  // .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
  bool has_sched_cpu_hotplug() const;
  private:
  bool _internal_has_sched_cpu_hotplug() const;

  public:
  void clear_sched_cpu_hotplug() ;
  const ::perfetto::protos::SchedCpuHotplugFtraceEvent& sched_cpu_hotplug() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedCpuHotplugFtraceEvent* release_sched_cpu_hotplug();
  ::perfetto::protos::SchedCpuHotplugFtraceEvent* mutable_sched_cpu_hotplug();
  void set_allocated_sched_cpu_hotplug(::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug);
  private:
  const ::perfetto::protos::SchedCpuHotplugFtraceEvent& _internal_sched_cpu_hotplug() const;
  ::perfetto::protos::SchedCpuHotplugFtraceEvent* _internal_mutable_sched_cpu_hotplug();
  public:
  void unsafe_arena_set_allocated_sched_cpu_hotplug(
      ::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug);
  ::perfetto::protos::SchedCpuHotplugFtraceEvent* unsafe_arena_release_sched_cpu_hotplug();
  // .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
  bool has_sched_waking() const;
  private:
  bool _internal_has_sched_waking() const;

  public:
  void clear_sched_waking() ;
  const ::perfetto::protos::SchedWakingFtraceEvent& sched_waking() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedWakingFtraceEvent* release_sched_waking();
  ::perfetto::protos::SchedWakingFtraceEvent* mutable_sched_waking();
  void set_allocated_sched_waking(::perfetto::protos::SchedWakingFtraceEvent* sched_waking);
  private:
  const ::perfetto::protos::SchedWakingFtraceEvent& _internal_sched_waking() const;
  ::perfetto::protos::SchedWakingFtraceEvent* _internal_mutable_sched_waking();
  public:
  void unsafe_arena_set_allocated_sched_waking(
      ::perfetto::protos::SchedWakingFtraceEvent* sched_waking);
  ::perfetto::protos::SchedWakingFtraceEvent* unsafe_arena_release_sched_waking();
  // .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
  bool has_ipi_entry() const;
  private:
  bool _internal_has_ipi_entry() const;

  public:
  void clear_ipi_entry() ;
  const ::perfetto::protos::IpiEntryFtraceEvent& ipi_entry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IpiEntryFtraceEvent* release_ipi_entry();
  ::perfetto::protos::IpiEntryFtraceEvent* mutable_ipi_entry();
  void set_allocated_ipi_entry(::perfetto::protos::IpiEntryFtraceEvent* ipi_entry);
  private:
  const ::perfetto::protos::IpiEntryFtraceEvent& _internal_ipi_entry() const;
  ::perfetto::protos::IpiEntryFtraceEvent* _internal_mutable_ipi_entry();
  public:
  void unsafe_arena_set_allocated_ipi_entry(
      ::perfetto::protos::IpiEntryFtraceEvent* ipi_entry);
  ::perfetto::protos::IpiEntryFtraceEvent* unsafe_arena_release_ipi_entry();
  // .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
  bool has_ipi_exit() const;
  private:
  bool _internal_has_ipi_exit() const;

  public:
  void clear_ipi_exit() ;
  const ::perfetto::protos::IpiExitFtraceEvent& ipi_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IpiExitFtraceEvent* release_ipi_exit();
  ::perfetto::protos::IpiExitFtraceEvent* mutable_ipi_exit();
  void set_allocated_ipi_exit(::perfetto::protos::IpiExitFtraceEvent* ipi_exit);
  private:
  const ::perfetto::protos::IpiExitFtraceEvent& _internal_ipi_exit() const;
  ::perfetto::protos::IpiExitFtraceEvent* _internal_mutable_ipi_exit();
  public:
  void unsafe_arena_set_allocated_ipi_exit(
      ::perfetto::protos::IpiExitFtraceEvent* ipi_exit);
  ::perfetto::protos::IpiExitFtraceEvent* unsafe_arena_release_ipi_exit();
  // .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
  bool has_ipi_raise() const;
  private:
  bool _internal_has_ipi_raise() const;

  public:
  void clear_ipi_raise() ;
  const ::perfetto::protos::IpiRaiseFtraceEvent& ipi_raise() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IpiRaiseFtraceEvent* release_ipi_raise();
  ::perfetto::protos::IpiRaiseFtraceEvent* mutable_ipi_raise();
  void set_allocated_ipi_raise(::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise);
  private:
  const ::perfetto::protos::IpiRaiseFtraceEvent& _internal_ipi_raise() const;
  ::perfetto::protos::IpiRaiseFtraceEvent* _internal_mutable_ipi_raise();
  public:
  void unsafe_arena_set_allocated_ipi_raise(
      ::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise);
  ::perfetto::protos::IpiRaiseFtraceEvent* unsafe_arena_release_ipi_raise();
  // .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
  bool has_softirq_entry() const;
  private:
  bool _internal_has_softirq_entry() const;

  public:
  void clear_softirq_entry() ;
  const ::perfetto::protos::SoftirqEntryFtraceEvent& softirq_entry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SoftirqEntryFtraceEvent* release_softirq_entry();
  ::perfetto::protos::SoftirqEntryFtraceEvent* mutable_softirq_entry();
  void set_allocated_softirq_entry(::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry);
  private:
  const ::perfetto::protos::SoftirqEntryFtraceEvent& _internal_softirq_entry() const;
  ::perfetto::protos::SoftirqEntryFtraceEvent* _internal_mutable_softirq_entry();
  public:
  void unsafe_arena_set_allocated_softirq_entry(
      ::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry);
  ::perfetto::protos::SoftirqEntryFtraceEvent* unsafe_arena_release_softirq_entry();
  // .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
  bool has_softirq_exit() const;
  private:
  bool _internal_has_softirq_exit() const;

  public:
  void clear_softirq_exit() ;
  const ::perfetto::protos::SoftirqExitFtraceEvent& softirq_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SoftirqExitFtraceEvent* release_softirq_exit();
  ::perfetto::protos::SoftirqExitFtraceEvent* mutable_softirq_exit();
  void set_allocated_softirq_exit(::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit);
  private:
  const ::perfetto::protos::SoftirqExitFtraceEvent& _internal_softirq_exit() const;
  ::perfetto::protos::SoftirqExitFtraceEvent* _internal_mutable_softirq_exit();
  public:
  void unsafe_arena_set_allocated_softirq_exit(
      ::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit);
  ::perfetto::protos::SoftirqExitFtraceEvent* unsafe_arena_release_softirq_exit();
  // .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
  bool has_softirq_raise() const;
  private:
  bool _internal_has_softirq_raise() const;

  public:
  void clear_softirq_raise() ;
  const ::perfetto::protos::SoftirqRaiseFtraceEvent& softirq_raise() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SoftirqRaiseFtraceEvent* release_softirq_raise();
  ::perfetto::protos::SoftirqRaiseFtraceEvent* mutable_softirq_raise();
  void set_allocated_softirq_raise(::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise);
  private:
  const ::perfetto::protos::SoftirqRaiseFtraceEvent& _internal_softirq_raise() const;
  ::perfetto::protos::SoftirqRaiseFtraceEvent* _internal_mutable_softirq_raise();
  public:
  void unsafe_arena_set_allocated_softirq_raise(
      ::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise);
  ::perfetto::protos::SoftirqRaiseFtraceEvent* unsafe_arena_release_softirq_raise();
  // .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
  bool has_i2c_read() const;
  private:
  bool _internal_has_i2c_read() const;

  public:
  void clear_i2c_read() ;
  const ::perfetto::protos::I2cReadFtraceEvent& i2c_read() const;
  PROTOBUF_NODISCARD ::perfetto::protos::I2cReadFtraceEvent* release_i2c_read();
  ::perfetto::protos::I2cReadFtraceEvent* mutable_i2c_read();
  void set_allocated_i2c_read(::perfetto::protos::I2cReadFtraceEvent* i2c_read);
  private:
  const ::perfetto::protos::I2cReadFtraceEvent& _internal_i2c_read() const;
  ::perfetto::protos::I2cReadFtraceEvent* _internal_mutable_i2c_read();
  public:
  void unsafe_arena_set_allocated_i2c_read(
      ::perfetto::protos::I2cReadFtraceEvent* i2c_read);
  ::perfetto::protos::I2cReadFtraceEvent* unsafe_arena_release_i2c_read();
  // .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
  bool has_i2c_write() const;
  private:
  bool _internal_has_i2c_write() const;

  public:
  void clear_i2c_write() ;
  const ::perfetto::protos::I2cWriteFtraceEvent& i2c_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::I2cWriteFtraceEvent* release_i2c_write();
  ::perfetto::protos::I2cWriteFtraceEvent* mutable_i2c_write();
  void set_allocated_i2c_write(::perfetto::protos::I2cWriteFtraceEvent* i2c_write);
  private:
  const ::perfetto::protos::I2cWriteFtraceEvent& _internal_i2c_write() const;
  ::perfetto::protos::I2cWriteFtraceEvent* _internal_mutable_i2c_write();
  public:
  void unsafe_arena_set_allocated_i2c_write(
      ::perfetto::protos::I2cWriteFtraceEvent* i2c_write);
  ::perfetto::protos::I2cWriteFtraceEvent* unsafe_arena_release_i2c_write();
  // .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
  bool has_i2c_result() const;
  private:
  bool _internal_has_i2c_result() const;

  public:
  void clear_i2c_result() ;
  const ::perfetto::protos::I2cResultFtraceEvent& i2c_result() const;
  PROTOBUF_NODISCARD ::perfetto::protos::I2cResultFtraceEvent* release_i2c_result();
  ::perfetto::protos::I2cResultFtraceEvent* mutable_i2c_result();
  void set_allocated_i2c_result(::perfetto::protos::I2cResultFtraceEvent* i2c_result);
  private:
  const ::perfetto::protos::I2cResultFtraceEvent& _internal_i2c_result() const;
  ::perfetto::protos::I2cResultFtraceEvent* _internal_mutable_i2c_result();
  public:
  void unsafe_arena_set_allocated_i2c_result(
      ::perfetto::protos::I2cResultFtraceEvent* i2c_result);
  ::perfetto::protos::I2cResultFtraceEvent* unsafe_arena_release_i2c_result();
  // .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
  bool has_i2c_reply() const;
  private:
  bool _internal_has_i2c_reply() const;

  public:
  void clear_i2c_reply() ;
  const ::perfetto::protos::I2cReplyFtraceEvent& i2c_reply() const;
  PROTOBUF_NODISCARD ::perfetto::protos::I2cReplyFtraceEvent* release_i2c_reply();
  ::perfetto::protos::I2cReplyFtraceEvent* mutable_i2c_reply();
  void set_allocated_i2c_reply(::perfetto::protos::I2cReplyFtraceEvent* i2c_reply);
  private:
  const ::perfetto::protos::I2cReplyFtraceEvent& _internal_i2c_reply() const;
  ::perfetto::protos::I2cReplyFtraceEvent* _internal_mutable_i2c_reply();
  public:
  void unsafe_arena_set_allocated_i2c_reply(
      ::perfetto::protos::I2cReplyFtraceEvent* i2c_reply);
  ::perfetto::protos::I2cReplyFtraceEvent* unsafe_arena_release_i2c_reply();
  // .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
  bool has_smbus_read() const;
  private:
  bool _internal_has_smbus_read() const;

  public:
  void clear_smbus_read() ;
  const ::perfetto::protos::SmbusReadFtraceEvent& smbus_read() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SmbusReadFtraceEvent* release_smbus_read();
  ::perfetto::protos::SmbusReadFtraceEvent* mutable_smbus_read();
  void set_allocated_smbus_read(::perfetto::protos::SmbusReadFtraceEvent* smbus_read);
  private:
  const ::perfetto::protos::SmbusReadFtraceEvent& _internal_smbus_read() const;
  ::perfetto::protos::SmbusReadFtraceEvent* _internal_mutable_smbus_read();
  public:
  void unsafe_arena_set_allocated_smbus_read(
      ::perfetto::protos::SmbusReadFtraceEvent* smbus_read);
  ::perfetto::protos::SmbusReadFtraceEvent* unsafe_arena_release_smbus_read();
  // .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
  bool has_smbus_write() const;
  private:
  bool _internal_has_smbus_write() const;

  public:
  void clear_smbus_write() ;
  const ::perfetto::protos::SmbusWriteFtraceEvent& smbus_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SmbusWriteFtraceEvent* release_smbus_write();
  ::perfetto::protos::SmbusWriteFtraceEvent* mutable_smbus_write();
  void set_allocated_smbus_write(::perfetto::protos::SmbusWriteFtraceEvent* smbus_write);
  private:
  const ::perfetto::protos::SmbusWriteFtraceEvent& _internal_smbus_write() const;
  ::perfetto::protos::SmbusWriteFtraceEvent* _internal_mutable_smbus_write();
  public:
  void unsafe_arena_set_allocated_smbus_write(
      ::perfetto::protos::SmbusWriteFtraceEvent* smbus_write);
  ::perfetto::protos::SmbusWriteFtraceEvent* unsafe_arena_release_smbus_write();
  // .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
  bool has_smbus_result() const;
  private:
  bool _internal_has_smbus_result() const;

  public:
  void clear_smbus_result() ;
  const ::perfetto::protos::SmbusResultFtraceEvent& smbus_result() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SmbusResultFtraceEvent* release_smbus_result();
  ::perfetto::protos::SmbusResultFtraceEvent* mutable_smbus_result();
  void set_allocated_smbus_result(::perfetto::protos::SmbusResultFtraceEvent* smbus_result);
  private:
  const ::perfetto::protos::SmbusResultFtraceEvent& _internal_smbus_result() const;
  ::perfetto::protos::SmbusResultFtraceEvent* _internal_mutable_smbus_result();
  public:
  void unsafe_arena_set_allocated_smbus_result(
      ::perfetto::protos::SmbusResultFtraceEvent* smbus_result);
  ::perfetto::protos::SmbusResultFtraceEvent* unsafe_arena_release_smbus_result();
  // .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
  bool has_smbus_reply() const;
  private:
  bool _internal_has_smbus_reply() const;

  public:
  void clear_smbus_reply() ;
  const ::perfetto::protos::SmbusReplyFtraceEvent& smbus_reply() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SmbusReplyFtraceEvent* release_smbus_reply();
  ::perfetto::protos::SmbusReplyFtraceEvent* mutable_smbus_reply();
  void set_allocated_smbus_reply(::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply);
  private:
  const ::perfetto::protos::SmbusReplyFtraceEvent& _internal_smbus_reply() const;
  ::perfetto::protos::SmbusReplyFtraceEvent* _internal_mutable_smbus_reply();
  public:
  void unsafe_arena_set_allocated_smbus_reply(
      ::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply);
  ::perfetto::protos::SmbusReplyFtraceEvent* unsafe_arena_release_smbus_reply();
  // .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
  bool has_lowmemory_kill() const;
  private:
  bool _internal_has_lowmemory_kill() const;

  public:
  void clear_lowmemory_kill() ;
  const ::perfetto::protos::LowmemoryKillFtraceEvent& lowmemory_kill() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LowmemoryKillFtraceEvent* release_lowmemory_kill();
  ::perfetto::protos::LowmemoryKillFtraceEvent* mutable_lowmemory_kill();
  void set_allocated_lowmemory_kill(::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill);
  private:
  const ::perfetto::protos::LowmemoryKillFtraceEvent& _internal_lowmemory_kill() const;
  ::perfetto::protos::LowmemoryKillFtraceEvent* _internal_mutable_lowmemory_kill();
  public:
  void unsafe_arena_set_allocated_lowmemory_kill(
      ::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill);
  ::perfetto::protos::LowmemoryKillFtraceEvent* unsafe_arena_release_lowmemory_kill();
  // .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
  bool has_irq_handler_entry() const;
  private:
  bool _internal_has_irq_handler_entry() const;

  public:
  void clear_irq_handler_entry() ;
  const ::perfetto::protos::IrqHandlerEntryFtraceEvent& irq_handler_entry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IrqHandlerEntryFtraceEvent* release_irq_handler_entry();
  ::perfetto::protos::IrqHandlerEntryFtraceEvent* mutable_irq_handler_entry();
  void set_allocated_irq_handler_entry(::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry);
  private:
  const ::perfetto::protos::IrqHandlerEntryFtraceEvent& _internal_irq_handler_entry() const;
  ::perfetto::protos::IrqHandlerEntryFtraceEvent* _internal_mutable_irq_handler_entry();
  public:
  void unsafe_arena_set_allocated_irq_handler_entry(
      ::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry);
  ::perfetto::protos::IrqHandlerEntryFtraceEvent* unsafe_arena_release_irq_handler_entry();
  // .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
  bool has_irq_handler_exit() const;
  private:
  bool _internal_has_irq_handler_exit() const;

  public:
  void clear_irq_handler_exit() ;
  const ::perfetto::protos::IrqHandlerExitFtraceEvent& irq_handler_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IrqHandlerExitFtraceEvent* release_irq_handler_exit();
  ::perfetto::protos::IrqHandlerExitFtraceEvent* mutable_irq_handler_exit();
  void set_allocated_irq_handler_exit(::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit);
  private:
  const ::perfetto::protos::IrqHandlerExitFtraceEvent& _internal_irq_handler_exit() const;
  ::perfetto::protos::IrqHandlerExitFtraceEvent* _internal_mutable_irq_handler_exit();
  public:
  void unsafe_arena_set_allocated_irq_handler_exit(
      ::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit);
  ::perfetto::protos::IrqHandlerExitFtraceEvent* unsafe_arena_release_irq_handler_exit();
  // .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
  bool has_sync_pt() const;
  private:
  bool _internal_has_sync_pt() const;

  public:
  void clear_sync_pt() ;
  const ::perfetto::protos::SyncPtFtraceEvent& sync_pt() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SyncPtFtraceEvent* release_sync_pt();
  ::perfetto::protos::SyncPtFtraceEvent* mutable_sync_pt();
  void set_allocated_sync_pt(::perfetto::protos::SyncPtFtraceEvent* sync_pt);
  private:
  const ::perfetto::protos::SyncPtFtraceEvent& _internal_sync_pt() const;
  ::perfetto::protos::SyncPtFtraceEvent* _internal_mutable_sync_pt();
  public:
  void unsafe_arena_set_allocated_sync_pt(
      ::perfetto::protos::SyncPtFtraceEvent* sync_pt);
  ::perfetto::protos::SyncPtFtraceEvent* unsafe_arena_release_sync_pt();
  // .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
  bool has_sync_timeline() const;
  private:
  bool _internal_has_sync_timeline() const;

  public:
  void clear_sync_timeline() ;
  const ::perfetto::protos::SyncTimelineFtraceEvent& sync_timeline() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SyncTimelineFtraceEvent* release_sync_timeline();
  ::perfetto::protos::SyncTimelineFtraceEvent* mutable_sync_timeline();
  void set_allocated_sync_timeline(::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline);
  private:
  const ::perfetto::protos::SyncTimelineFtraceEvent& _internal_sync_timeline() const;
  ::perfetto::protos::SyncTimelineFtraceEvent* _internal_mutable_sync_timeline();
  public:
  void unsafe_arena_set_allocated_sync_timeline(
      ::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline);
  ::perfetto::protos::SyncTimelineFtraceEvent* unsafe_arena_release_sync_timeline();
  // .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
  bool has_sync_wait() const;
  private:
  bool _internal_has_sync_wait() const;

  public:
  void clear_sync_wait() ;
  const ::perfetto::protos::SyncWaitFtraceEvent& sync_wait() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SyncWaitFtraceEvent* release_sync_wait();
  ::perfetto::protos::SyncWaitFtraceEvent* mutable_sync_wait();
  void set_allocated_sync_wait(::perfetto::protos::SyncWaitFtraceEvent* sync_wait);
  private:
  const ::perfetto::protos::SyncWaitFtraceEvent& _internal_sync_wait() const;
  ::perfetto::protos::SyncWaitFtraceEvent* _internal_mutable_sync_wait();
  public:
  void unsafe_arena_set_allocated_sync_wait(
      ::perfetto::protos::SyncWaitFtraceEvent* sync_wait);
  ::perfetto::protos::SyncWaitFtraceEvent* unsafe_arena_release_sync_wait();
  // .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
  bool has_ext4_da_write_begin() const;
  private:
  bool _internal_has_ext4_da_write_begin() const;

  public:
  void clear_ext4_da_write_begin() ;
  const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& ext4_da_write_begin() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* release_ext4_da_write_begin();
  ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* mutable_ext4_da_write_begin();
  void set_allocated_ext4_da_write_begin(::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin);
  private:
  const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& _internal_ext4_da_write_begin() const;
  ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* _internal_mutable_ext4_da_write_begin();
  public:
  void unsafe_arena_set_allocated_ext4_da_write_begin(
      ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin);
  ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* unsafe_arena_release_ext4_da_write_begin();
  // .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
  bool has_ext4_da_write_end() const;
  private:
  bool _internal_has_ext4_da_write_end() const;

  public:
  void clear_ext4_da_write_end() ;
  const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& ext4_da_write_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaWriteEndFtraceEvent* release_ext4_da_write_end();
  ::perfetto::protos::Ext4DaWriteEndFtraceEvent* mutable_ext4_da_write_end();
  void set_allocated_ext4_da_write_end(::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end);
  private:
  const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& _internal_ext4_da_write_end() const;
  ::perfetto::protos::Ext4DaWriteEndFtraceEvent* _internal_mutable_ext4_da_write_end();
  public:
  void unsafe_arena_set_allocated_ext4_da_write_end(
      ::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end);
  ::perfetto::protos::Ext4DaWriteEndFtraceEvent* unsafe_arena_release_ext4_da_write_end();
  // .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
  bool has_ext4_sync_file_enter() const;
  private:
  bool _internal_has_ext4_sync_file_enter() const;

  public:
  void clear_ext4_sync_file_enter() ;
  const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& ext4_sync_file_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* release_ext4_sync_file_enter();
  ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* mutable_ext4_sync_file_enter();
  void set_allocated_ext4_sync_file_enter(::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter);
  private:
  const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& _internal_ext4_sync_file_enter() const;
  ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* _internal_mutable_ext4_sync_file_enter();
  public:
  void unsafe_arena_set_allocated_ext4_sync_file_enter(
      ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter);
  ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* unsafe_arena_release_ext4_sync_file_enter();
  // .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
  bool has_ext4_sync_file_exit() const;
  private:
  bool _internal_has_ext4_sync_file_exit() const;

  public:
  void clear_ext4_sync_file_exit() ;
  const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& ext4_sync_file_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4SyncFileExitFtraceEvent* release_ext4_sync_file_exit();
  ::perfetto::protos::Ext4SyncFileExitFtraceEvent* mutable_ext4_sync_file_exit();
  void set_allocated_ext4_sync_file_exit(::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit);
  private:
  const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& _internal_ext4_sync_file_exit() const;
  ::perfetto::protos::Ext4SyncFileExitFtraceEvent* _internal_mutable_ext4_sync_file_exit();
  public:
  void unsafe_arena_set_allocated_ext4_sync_file_exit(
      ::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit);
  ::perfetto::protos::Ext4SyncFileExitFtraceEvent* unsafe_arena_release_ext4_sync_file_exit();
  // .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
  bool has_block_rq_issue() const;
  private:
  bool _internal_has_block_rq_issue() const;

  public:
  void clear_block_rq_issue() ;
  const ::perfetto::protos::BlockRqIssueFtraceEvent& block_rq_issue() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockRqIssueFtraceEvent* release_block_rq_issue();
  ::perfetto::protos::BlockRqIssueFtraceEvent* mutable_block_rq_issue();
  void set_allocated_block_rq_issue(::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue);
  private:
  const ::perfetto::protos::BlockRqIssueFtraceEvent& _internal_block_rq_issue() const;
  ::perfetto::protos::BlockRqIssueFtraceEvent* _internal_mutable_block_rq_issue();
  public:
  void unsafe_arena_set_allocated_block_rq_issue(
      ::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue);
  ::perfetto::protos::BlockRqIssueFtraceEvent* unsafe_arena_release_block_rq_issue();
  // .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
  bool has_mm_vmscan_direct_reclaim_begin() const;
  private:
  bool _internal_has_mm_vmscan_direct_reclaim_begin() const;

  public:
  void clear_mm_vmscan_direct_reclaim_begin() ;
  const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& mm_vmscan_direct_reclaim_begin() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* release_mm_vmscan_direct_reclaim_begin();
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mutable_mm_vmscan_direct_reclaim_begin();
  void set_allocated_mm_vmscan_direct_reclaim_begin(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin);
  private:
  const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& _internal_mm_vmscan_direct_reclaim_begin() const;
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* _internal_mutable_mm_vmscan_direct_reclaim_begin();
  public:
  void unsafe_arena_set_allocated_mm_vmscan_direct_reclaim_begin(
      ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin);
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* unsafe_arena_release_mm_vmscan_direct_reclaim_begin();
  // .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
  bool has_mm_vmscan_direct_reclaim_end() const;
  private:
  bool _internal_has_mm_vmscan_direct_reclaim_end() const;

  public:
  void clear_mm_vmscan_direct_reclaim_end() ;
  const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& mm_vmscan_direct_reclaim_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* release_mm_vmscan_direct_reclaim_end();
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mutable_mm_vmscan_direct_reclaim_end();
  void set_allocated_mm_vmscan_direct_reclaim_end(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end);
  private:
  const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& _internal_mm_vmscan_direct_reclaim_end() const;
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* _internal_mutable_mm_vmscan_direct_reclaim_end();
  public:
  void unsafe_arena_set_allocated_mm_vmscan_direct_reclaim_end(
      ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end);
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* unsafe_arena_release_mm_vmscan_direct_reclaim_end();
  // .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
  bool has_mm_vmscan_kswapd_wake() const;
  private:
  bool _internal_has_mm_vmscan_kswapd_wake() const;

  public:
  void clear_mm_vmscan_kswapd_wake() ;
  const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& mm_vmscan_kswapd_wake() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* release_mm_vmscan_kswapd_wake();
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mutable_mm_vmscan_kswapd_wake();
  void set_allocated_mm_vmscan_kswapd_wake(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake);
  private:
  const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& _internal_mm_vmscan_kswapd_wake() const;
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* _internal_mutable_mm_vmscan_kswapd_wake();
  public:
  void unsafe_arena_set_allocated_mm_vmscan_kswapd_wake(
      ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake);
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* unsafe_arena_release_mm_vmscan_kswapd_wake();
  // .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
  bool has_mm_vmscan_kswapd_sleep() const;
  private:
  bool _internal_has_mm_vmscan_kswapd_sleep() const;

  public:
  void clear_mm_vmscan_kswapd_sleep() ;
  const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& mm_vmscan_kswapd_sleep() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* release_mm_vmscan_kswapd_sleep();
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mutable_mm_vmscan_kswapd_sleep();
  void set_allocated_mm_vmscan_kswapd_sleep(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep);
  private:
  const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& _internal_mm_vmscan_kswapd_sleep() const;
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* _internal_mutable_mm_vmscan_kswapd_sleep();
  public:
  void unsafe_arena_set_allocated_mm_vmscan_kswapd_sleep(
      ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep);
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* unsafe_arena_release_mm_vmscan_kswapd_sleep();
  // .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
  bool has_binder_transaction() const;
  private:
  bool _internal_has_binder_transaction() const;

  public:
  void clear_binder_transaction() ;
  const ::perfetto::protos::BinderTransactionFtraceEvent& binder_transaction() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderTransactionFtraceEvent* release_binder_transaction();
  ::perfetto::protos::BinderTransactionFtraceEvent* mutable_binder_transaction();
  void set_allocated_binder_transaction(::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction);
  private:
  const ::perfetto::protos::BinderTransactionFtraceEvent& _internal_binder_transaction() const;
  ::perfetto::protos::BinderTransactionFtraceEvent* _internal_mutable_binder_transaction();
  public:
  void unsafe_arena_set_allocated_binder_transaction(
      ::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction);
  ::perfetto::protos::BinderTransactionFtraceEvent* unsafe_arena_release_binder_transaction();
  // .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
  bool has_binder_transaction_received() const;
  private:
  bool _internal_has_binder_transaction_received() const;

  public:
  void clear_binder_transaction_received() ;
  const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& binder_transaction_received() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderTransactionReceivedFtraceEvent* release_binder_transaction_received();
  ::perfetto::protos::BinderTransactionReceivedFtraceEvent* mutable_binder_transaction_received();
  void set_allocated_binder_transaction_received(::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received);
  private:
  const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& _internal_binder_transaction_received() const;
  ::perfetto::protos::BinderTransactionReceivedFtraceEvent* _internal_mutable_binder_transaction_received();
  public:
  void unsafe_arena_set_allocated_binder_transaction_received(
      ::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received);
  ::perfetto::protos::BinderTransactionReceivedFtraceEvent* unsafe_arena_release_binder_transaction_received();
  // .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
  bool has_binder_set_priority() const;
  private:
  bool _internal_has_binder_set_priority() const;

  public:
  void clear_binder_set_priority() ;
  const ::perfetto::protos::BinderSetPriorityFtraceEvent& binder_set_priority() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderSetPriorityFtraceEvent* release_binder_set_priority();
  ::perfetto::protos::BinderSetPriorityFtraceEvent* mutable_binder_set_priority();
  void set_allocated_binder_set_priority(::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority);
  private:
  const ::perfetto::protos::BinderSetPriorityFtraceEvent& _internal_binder_set_priority() const;
  ::perfetto::protos::BinderSetPriorityFtraceEvent* _internal_mutable_binder_set_priority();
  public:
  void unsafe_arena_set_allocated_binder_set_priority(
      ::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority);
  ::perfetto::protos::BinderSetPriorityFtraceEvent* unsafe_arena_release_binder_set_priority();
  // .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
  bool has_binder_lock() const;
  private:
  bool _internal_has_binder_lock() const;

  public:
  void clear_binder_lock() ;
  const ::perfetto::protos::BinderLockFtraceEvent& binder_lock() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderLockFtraceEvent* release_binder_lock();
  ::perfetto::protos::BinderLockFtraceEvent* mutable_binder_lock();
  void set_allocated_binder_lock(::perfetto::protos::BinderLockFtraceEvent* binder_lock);
  private:
  const ::perfetto::protos::BinderLockFtraceEvent& _internal_binder_lock() const;
  ::perfetto::protos::BinderLockFtraceEvent* _internal_mutable_binder_lock();
  public:
  void unsafe_arena_set_allocated_binder_lock(
      ::perfetto::protos::BinderLockFtraceEvent* binder_lock);
  ::perfetto::protos::BinderLockFtraceEvent* unsafe_arena_release_binder_lock();
  // .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
  bool has_binder_locked() const;
  private:
  bool _internal_has_binder_locked() const;

  public:
  void clear_binder_locked() ;
  const ::perfetto::protos::BinderLockedFtraceEvent& binder_locked() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderLockedFtraceEvent* release_binder_locked();
  ::perfetto::protos::BinderLockedFtraceEvent* mutable_binder_locked();
  void set_allocated_binder_locked(::perfetto::protos::BinderLockedFtraceEvent* binder_locked);
  private:
  const ::perfetto::protos::BinderLockedFtraceEvent& _internal_binder_locked() const;
  ::perfetto::protos::BinderLockedFtraceEvent* _internal_mutable_binder_locked();
  public:
  void unsafe_arena_set_allocated_binder_locked(
      ::perfetto::protos::BinderLockedFtraceEvent* binder_locked);
  ::perfetto::protos::BinderLockedFtraceEvent* unsafe_arena_release_binder_locked();
  // .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
  bool has_binder_unlock() const;
  private:
  bool _internal_has_binder_unlock() const;

  public:
  void clear_binder_unlock() ;
  const ::perfetto::protos::BinderUnlockFtraceEvent& binder_unlock() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderUnlockFtraceEvent* release_binder_unlock();
  ::perfetto::protos::BinderUnlockFtraceEvent* mutable_binder_unlock();
  void set_allocated_binder_unlock(::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock);
  private:
  const ::perfetto::protos::BinderUnlockFtraceEvent& _internal_binder_unlock() const;
  ::perfetto::protos::BinderUnlockFtraceEvent* _internal_mutable_binder_unlock();
  public:
  void unsafe_arena_set_allocated_binder_unlock(
      ::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock);
  ::perfetto::protos::BinderUnlockFtraceEvent* unsafe_arena_release_binder_unlock();
  // .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
  bool has_workqueue_activate_work() const;
  private:
  bool _internal_has_workqueue_activate_work() const;

  public:
  void clear_workqueue_activate_work() ;
  const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& workqueue_activate_work() const;
  PROTOBUF_NODISCARD ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* release_workqueue_activate_work();
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* mutable_workqueue_activate_work();
  void set_allocated_workqueue_activate_work(::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work);
  private:
  const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& _internal_workqueue_activate_work() const;
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* _internal_mutable_workqueue_activate_work();
  public:
  void unsafe_arena_set_allocated_workqueue_activate_work(
      ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work);
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* unsafe_arena_release_workqueue_activate_work();
  // .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
  bool has_workqueue_execute_end() const;
  private:
  bool _internal_has_workqueue_execute_end() const;

  public:
  void clear_workqueue_execute_end() ;
  const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& workqueue_execute_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* release_workqueue_execute_end();
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* mutable_workqueue_execute_end();
  void set_allocated_workqueue_execute_end(::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end);
  private:
  const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& _internal_workqueue_execute_end() const;
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* _internal_mutable_workqueue_execute_end();
  public:
  void unsafe_arena_set_allocated_workqueue_execute_end(
      ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end);
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* unsafe_arena_release_workqueue_execute_end();
  // .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
  bool has_workqueue_execute_start() const;
  private:
  bool _internal_has_workqueue_execute_start() const;

  public:
  void clear_workqueue_execute_start() ;
  const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& workqueue_execute_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* release_workqueue_execute_start();
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* mutable_workqueue_execute_start();
  void set_allocated_workqueue_execute_start(::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start);
  private:
  const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& _internal_workqueue_execute_start() const;
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* _internal_mutable_workqueue_execute_start();
  public:
  void unsafe_arena_set_allocated_workqueue_execute_start(
      ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start);
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* unsafe_arena_release_workqueue_execute_start();
  // .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
  bool has_workqueue_queue_work() const;
  private:
  bool _internal_has_workqueue_queue_work() const;

  public:
  void clear_workqueue_queue_work() ;
  const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& workqueue_queue_work() const;
  PROTOBUF_NODISCARD ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* release_workqueue_queue_work();
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* mutable_workqueue_queue_work();
  void set_allocated_workqueue_queue_work(::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work);
  private:
  const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& _internal_workqueue_queue_work() const;
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* _internal_mutable_workqueue_queue_work();
  public:
  void unsafe_arena_set_allocated_workqueue_queue_work(
      ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work);
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* unsafe_arena_release_workqueue_queue_work();
  // .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
  bool has_regulator_disable() const;
  private:
  bool _internal_has_regulator_disable() const;

  public:
  void clear_regulator_disable() ;
  const ::perfetto::protos::RegulatorDisableFtraceEvent& regulator_disable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorDisableFtraceEvent* release_regulator_disable();
  ::perfetto::protos::RegulatorDisableFtraceEvent* mutable_regulator_disable();
  void set_allocated_regulator_disable(::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable);
  private:
  const ::perfetto::protos::RegulatorDisableFtraceEvent& _internal_regulator_disable() const;
  ::perfetto::protos::RegulatorDisableFtraceEvent* _internal_mutable_regulator_disable();
  public:
  void unsafe_arena_set_allocated_regulator_disable(
      ::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable);
  ::perfetto::protos::RegulatorDisableFtraceEvent* unsafe_arena_release_regulator_disable();
  // .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
  bool has_regulator_disable_complete() const;
  private:
  bool _internal_has_regulator_disable_complete() const;

  public:
  void clear_regulator_disable_complete() ;
  const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& regulator_disable_complete() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* release_regulator_disable_complete();
  ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* mutable_regulator_disable_complete();
  void set_allocated_regulator_disable_complete(::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete);
  private:
  const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& _internal_regulator_disable_complete() const;
  ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* _internal_mutable_regulator_disable_complete();
  public:
  void unsafe_arena_set_allocated_regulator_disable_complete(
      ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete);
  ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* unsafe_arena_release_regulator_disable_complete();
  // .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
  bool has_regulator_enable() const;
  private:
  bool _internal_has_regulator_enable() const;

  public:
  void clear_regulator_enable() ;
  const ::perfetto::protos::RegulatorEnableFtraceEvent& regulator_enable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorEnableFtraceEvent* release_regulator_enable();
  ::perfetto::protos::RegulatorEnableFtraceEvent* mutable_regulator_enable();
  void set_allocated_regulator_enable(::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable);
  private:
  const ::perfetto::protos::RegulatorEnableFtraceEvent& _internal_regulator_enable() const;
  ::perfetto::protos::RegulatorEnableFtraceEvent* _internal_mutable_regulator_enable();
  public:
  void unsafe_arena_set_allocated_regulator_enable(
      ::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable);
  ::perfetto::protos::RegulatorEnableFtraceEvent* unsafe_arena_release_regulator_enable();
  // .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
  bool has_regulator_enable_complete() const;
  private:
  bool _internal_has_regulator_enable_complete() const;

  public:
  void clear_regulator_enable_complete() ;
  const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& regulator_enable_complete() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* release_regulator_enable_complete();
  ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* mutable_regulator_enable_complete();
  void set_allocated_regulator_enable_complete(::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete);
  private:
  const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& _internal_regulator_enable_complete() const;
  ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* _internal_mutable_regulator_enable_complete();
  public:
  void unsafe_arena_set_allocated_regulator_enable_complete(
      ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete);
  ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* unsafe_arena_release_regulator_enable_complete();
  // .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
  bool has_regulator_enable_delay() const;
  private:
  bool _internal_has_regulator_enable_delay() const;

  public:
  void clear_regulator_enable_delay() ;
  const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& regulator_enable_delay() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorEnableDelayFtraceEvent* release_regulator_enable_delay();
  ::perfetto::protos::RegulatorEnableDelayFtraceEvent* mutable_regulator_enable_delay();
  void set_allocated_regulator_enable_delay(::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay);
  private:
  const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& _internal_regulator_enable_delay() const;
  ::perfetto::protos::RegulatorEnableDelayFtraceEvent* _internal_mutable_regulator_enable_delay();
  public:
  void unsafe_arena_set_allocated_regulator_enable_delay(
      ::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay);
  ::perfetto::protos::RegulatorEnableDelayFtraceEvent* unsafe_arena_release_regulator_enable_delay();
  // .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
  bool has_regulator_set_voltage() const;
  private:
  bool _internal_has_regulator_set_voltage() const;

  public:
  void clear_regulator_set_voltage() ;
  const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& regulator_set_voltage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorSetVoltageFtraceEvent* release_regulator_set_voltage();
  ::perfetto::protos::RegulatorSetVoltageFtraceEvent* mutable_regulator_set_voltage();
  void set_allocated_regulator_set_voltage(::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage);
  private:
  const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& _internal_regulator_set_voltage() const;
  ::perfetto::protos::RegulatorSetVoltageFtraceEvent* _internal_mutable_regulator_set_voltage();
  public:
  void unsafe_arena_set_allocated_regulator_set_voltage(
      ::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage);
  ::perfetto::protos::RegulatorSetVoltageFtraceEvent* unsafe_arena_release_regulator_set_voltage();
  // .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
  bool has_regulator_set_voltage_complete() const;
  private:
  bool _internal_has_regulator_set_voltage_complete() const;

  public:
  void clear_regulator_set_voltage_complete() ;
  const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& regulator_set_voltage_complete() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* release_regulator_set_voltage_complete();
  ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* mutable_regulator_set_voltage_complete();
  void set_allocated_regulator_set_voltage_complete(::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete);
  private:
  const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& _internal_regulator_set_voltage_complete() const;
  ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* _internal_mutable_regulator_set_voltage_complete();
  public:
  void unsafe_arena_set_allocated_regulator_set_voltage_complete(
      ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete);
  ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* unsafe_arena_release_regulator_set_voltage_complete();
  // .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
  bool has_cgroup_attach_task() const;
  private:
  bool _internal_has_cgroup_attach_task() const;

  public:
  void clear_cgroup_attach_task() ;
  const ::perfetto::protos::CgroupAttachTaskFtraceEvent& cgroup_attach_task() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupAttachTaskFtraceEvent* release_cgroup_attach_task();
  ::perfetto::protos::CgroupAttachTaskFtraceEvent* mutable_cgroup_attach_task();
  void set_allocated_cgroup_attach_task(::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task);
  private:
  const ::perfetto::protos::CgroupAttachTaskFtraceEvent& _internal_cgroup_attach_task() const;
  ::perfetto::protos::CgroupAttachTaskFtraceEvent* _internal_mutable_cgroup_attach_task();
  public:
  void unsafe_arena_set_allocated_cgroup_attach_task(
      ::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task);
  ::perfetto::protos::CgroupAttachTaskFtraceEvent* unsafe_arena_release_cgroup_attach_task();
  // .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
  bool has_cgroup_mkdir() const;
  private:
  bool _internal_has_cgroup_mkdir() const;

  public:
  void clear_cgroup_mkdir() ;
  const ::perfetto::protos::CgroupMkdirFtraceEvent& cgroup_mkdir() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupMkdirFtraceEvent* release_cgroup_mkdir();
  ::perfetto::protos::CgroupMkdirFtraceEvent* mutable_cgroup_mkdir();
  void set_allocated_cgroup_mkdir(::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir);
  private:
  const ::perfetto::protos::CgroupMkdirFtraceEvent& _internal_cgroup_mkdir() const;
  ::perfetto::protos::CgroupMkdirFtraceEvent* _internal_mutable_cgroup_mkdir();
  public:
  void unsafe_arena_set_allocated_cgroup_mkdir(
      ::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir);
  ::perfetto::protos::CgroupMkdirFtraceEvent* unsafe_arena_release_cgroup_mkdir();
  // .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
  bool has_cgroup_remount() const;
  private:
  bool _internal_has_cgroup_remount() const;

  public:
  void clear_cgroup_remount() ;
  const ::perfetto::protos::CgroupRemountFtraceEvent& cgroup_remount() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupRemountFtraceEvent* release_cgroup_remount();
  ::perfetto::protos::CgroupRemountFtraceEvent* mutable_cgroup_remount();
  void set_allocated_cgroup_remount(::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount);
  private:
  const ::perfetto::protos::CgroupRemountFtraceEvent& _internal_cgroup_remount() const;
  ::perfetto::protos::CgroupRemountFtraceEvent* _internal_mutable_cgroup_remount();
  public:
  void unsafe_arena_set_allocated_cgroup_remount(
      ::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount);
  ::perfetto::protos::CgroupRemountFtraceEvent* unsafe_arena_release_cgroup_remount();
  // .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
  bool has_cgroup_rmdir() const;
  private:
  bool _internal_has_cgroup_rmdir() const;

  public:
  void clear_cgroup_rmdir() ;
  const ::perfetto::protos::CgroupRmdirFtraceEvent& cgroup_rmdir() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupRmdirFtraceEvent* release_cgroup_rmdir();
  ::perfetto::protos::CgroupRmdirFtraceEvent* mutable_cgroup_rmdir();
  void set_allocated_cgroup_rmdir(::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir);
  private:
  const ::perfetto::protos::CgroupRmdirFtraceEvent& _internal_cgroup_rmdir() const;
  ::perfetto::protos::CgroupRmdirFtraceEvent* _internal_mutable_cgroup_rmdir();
  public:
  void unsafe_arena_set_allocated_cgroup_rmdir(
      ::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir);
  ::perfetto::protos::CgroupRmdirFtraceEvent* unsafe_arena_release_cgroup_rmdir();
  // .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
  bool has_cgroup_transfer_tasks() const;
  private:
  bool _internal_has_cgroup_transfer_tasks() const;

  public:
  void clear_cgroup_transfer_tasks() ;
  const ::perfetto::protos::CgroupTransferTasksFtraceEvent& cgroup_transfer_tasks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupTransferTasksFtraceEvent* release_cgroup_transfer_tasks();
  ::perfetto::protos::CgroupTransferTasksFtraceEvent* mutable_cgroup_transfer_tasks();
  void set_allocated_cgroup_transfer_tasks(::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks);
  private:
  const ::perfetto::protos::CgroupTransferTasksFtraceEvent& _internal_cgroup_transfer_tasks() const;
  ::perfetto::protos::CgroupTransferTasksFtraceEvent* _internal_mutable_cgroup_transfer_tasks();
  public:
  void unsafe_arena_set_allocated_cgroup_transfer_tasks(
      ::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks);
  ::perfetto::protos::CgroupTransferTasksFtraceEvent* unsafe_arena_release_cgroup_transfer_tasks();
  // .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
  bool has_cgroup_destroy_root() const;
  private:
  bool _internal_has_cgroup_destroy_root() const;

  public:
  void clear_cgroup_destroy_root() ;
  const ::perfetto::protos::CgroupDestroyRootFtraceEvent& cgroup_destroy_root() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupDestroyRootFtraceEvent* release_cgroup_destroy_root();
  ::perfetto::protos::CgroupDestroyRootFtraceEvent* mutable_cgroup_destroy_root();
  void set_allocated_cgroup_destroy_root(::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root);
  private:
  const ::perfetto::protos::CgroupDestroyRootFtraceEvent& _internal_cgroup_destroy_root() const;
  ::perfetto::protos::CgroupDestroyRootFtraceEvent* _internal_mutable_cgroup_destroy_root();
  public:
  void unsafe_arena_set_allocated_cgroup_destroy_root(
      ::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root);
  ::perfetto::protos::CgroupDestroyRootFtraceEvent* unsafe_arena_release_cgroup_destroy_root();
  // .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
  bool has_cgroup_release() const;
  private:
  bool _internal_has_cgroup_release() const;

  public:
  void clear_cgroup_release() ;
  const ::perfetto::protos::CgroupReleaseFtraceEvent& cgroup_release() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupReleaseFtraceEvent* release_cgroup_release();
  ::perfetto::protos::CgroupReleaseFtraceEvent* mutable_cgroup_release();
  void set_allocated_cgroup_release(::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release);
  private:
  const ::perfetto::protos::CgroupReleaseFtraceEvent& _internal_cgroup_release() const;
  ::perfetto::protos::CgroupReleaseFtraceEvent* _internal_mutable_cgroup_release();
  public:
  void unsafe_arena_set_allocated_cgroup_release(
      ::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release);
  ::perfetto::protos::CgroupReleaseFtraceEvent* unsafe_arena_release_cgroup_release();
  // .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
  bool has_cgroup_rename() const;
  private:
  bool _internal_has_cgroup_rename() const;

  public:
  void clear_cgroup_rename() ;
  const ::perfetto::protos::CgroupRenameFtraceEvent& cgroup_rename() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupRenameFtraceEvent* release_cgroup_rename();
  ::perfetto::protos::CgroupRenameFtraceEvent* mutable_cgroup_rename();
  void set_allocated_cgroup_rename(::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename);
  private:
  const ::perfetto::protos::CgroupRenameFtraceEvent& _internal_cgroup_rename() const;
  ::perfetto::protos::CgroupRenameFtraceEvent* _internal_mutable_cgroup_rename();
  public:
  void unsafe_arena_set_allocated_cgroup_rename(
      ::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename);
  ::perfetto::protos::CgroupRenameFtraceEvent* unsafe_arena_release_cgroup_rename();
  // .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
  bool has_cgroup_setup_root() const;
  private:
  bool _internal_has_cgroup_setup_root() const;

  public:
  void clear_cgroup_setup_root() ;
  const ::perfetto::protos::CgroupSetupRootFtraceEvent& cgroup_setup_root() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CgroupSetupRootFtraceEvent* release_cgroup_setup_root();
  ::perfetto::protos::CgroupSetupRootFtraceEvent* mutable_cgroup_setup_root();
  void set_allocated_cgroup_setup_root(::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root);
  private:
  const ::perfetto::protos::CgroupSetupRootFtraceEvent& _internal_cgroup_setup_root() const;
  ::perfetto::protos::CgroupSetupRootFtraceEvent* _internal_mutable_cgroup_setup_root();
  public:
  void unsafe_arena_set_allocated_cgroup_setup_root(
      ::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root);
  ::perfetto::protos::CgroupSetupRootFtraceEvent* unsafe_arena_release_cgroup_setup_root();
  // .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
  bool has_mdp_cmd_kickoff() const;
  private:
  bool _internal_has_mdp_cmd_kickoff() const;

  public:
  void clear_mdp_cmd_kickoff() ;
  const ::perfetto::protos::MdpCmdKickoffFtraceEvent& mdp_cmd_kickoff() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCmdKickoffFtraceEvent* release_mdp_cmd_kickoff();
  ::perfetto::protos::MdpCmdKickoffFtraceEvent* mutable_mdp_cmd_kickoff();
  void set_allocated_mdp_cmd_kickoff(::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff);
  private:
  const ::perfetto::protos::MdpCmdKickoffFtraceEvent& _internal_mdp_cmd_kickoff() const;
  ::perfetto::protos::MdpCmdKickoffFtraceEvent* _internal_mutable_mdp_cmd_kickoff();
  public:
  void unsafe_arena_set_allocated_mdp_cmd_kickoff(
      ::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff);
  ::perfetto::protos::MdpCmdKickoffFtraceEvent* unsafe_arena_release_mdp_cmd_kickoff();
  // .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
  bool has_mdp_commit() const;
  private:
  bool _internal_has_mdp_commit() const;

  public:
  void clear_mdp_commit() ;
  const ::perfetto::protos::MdpCommitFtraceEvent& mdp_commit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCommitFtraceEvent* release_mdp_commit();
  ::perfetto::protos::MdpCommitFtraceEvent* mutable_mdp_commit();
  void set_allocated_mdp_commit(::perfetto::protos::MdpCommitFtraceEvent* mdp_commit);
  private:
  const ::perfetto::protos::MdpCommitFtraceEvent& _internal_mdp_commit() const;
  ::perfetto::protos::MdpCommitFtraceEvent* _internal_mutable_mdp_commit();
  public:
  void unsafe_arena_set_allocated_mdp_commit(
      ::perfetto::protos::MdpCommitFtraceEvent* mdp_commit);
  ::perfetto::protos::MdpCommitFtraceEvent* unsafe_arena_release_mdp_commit();
  // .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
  bool has_mdp_perf_set_ot() const;
  private:
  bool _internal_has_mdp_perf_set_ot() const;

  public:
  void clear_mdp_perf_set_ot() ;
  const ::perfetto::protos::MdpPerfSetOtFtraceEvent& mdp_perf_set_ot() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpPerfSetOtFtraceEvent* release_mdp_perf_set_ot();
  ::perfetto::protos::MdpPerfSetOtFtraceEvent* mutable_mdp_perf_set_ot();
  void set_allocated_mdp_perf_set_ot(::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot);
  private:
  const ::perfetto::protos::MdpPerfSetOtFtraceEvent& _internal_mdp_perf_set_ot() const;
  ::perfetto::protos::MdpPerfSetOtFtraceEvent* _internal_mutable_mdp_perf_set_ot();
  public:
  void unsafe_arena_set_allocated_mdp_perf_set_ot(
      ::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot);
  ::perfetto::protos::MdpPerfSetOtFtraceEvent* unsafe_arena_release_mdp_perf_set_ot();
  // .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
  bool has_mdp_sspp_change() const;
  private:
  bool _internal_has_mdp_sspp_change() const;

  public:
  void clear_mdp_sspp_change() ;
  const ::perfetto::protos::MdpSsppChangeFtraceEvent& mdp_sspp_change() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpSsppChangeFtraceEvent* release_mdp_sspp_change();
  ::perfetto::protos::MdpSsppChangeFtraceEvent* mutable_mdp_sspp_change();
  void set_allocated_mdp_sspp_change(::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change);
  private:
  const ::perfetto::protos::MdpSsppChangeFtraceEvent& _internal_mdp_sspp_change() const;
  ::perfetto::protos::MdpSsppChangeFtraceEvent* _internal_mutable_mdp_sspp_change();
  public:
  void unsafe_arena_set_allocated_mdp_sspp_change(
      ::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change);
  ::perfetto::protos::MdpSsppChangeFtraceEvent* unsafe_arena_release_mdp_sspp_change();
  // .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
  bool has_tracing_mark_write() const;
  private:
  bool _internal_has_tracing_mark_write() const;

  public:
  void clear_tracing_mark_write() ;
  const ::perfetto::protos::TracingMarkWriteFtraceEvent& tracing_mark_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TracingMarkWriteFtraceEvent* release_tracing_mark_write();
  ::perfetto::protos::TracingMarkWriteFtraceEvent* mutable_tracing_mark_write();
  void set_allocated_tracing_mark_write(::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write);
  private:
  const ::perfetto::protos::TracingMarkWriteFtraceEvent& _internal_tracing_mark_write() const;
  ::perfetto::protos::TracingMarkWriteFtraceEvent* _internal_mutable_tracing_mark_write();
  public:
  void unsafe_arena_set_allocated_tracing_mark_write(
      ::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write);
  ::perfetto::protos::TracingMarkWriteFtraceEvent* unsafe_arena_release_tracing_mark_write();
  // .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
  bool has_mdp_cmd_pingpong_done() const;
  private:
  bool _internal_has_mdp_cmd_pingpong_done() const;

  public:
  void clear_mdp_cmd_pingpong_done() ;
  const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& mdp_cmd_pingpong_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* release_mdp_cmd_pingpong_done();
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mutable_mdp_cmd_pingpong_done();
  void set_allocated_mdp_cmd_pingpong_done(::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done);
  private:
  const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& _internal_mdp_cmd_pingpong_done() const;
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* _internal_mutable_mdp_cmd_pingpong_done();
  public:
  void unsafe_arena_set_allocated_mdp_cmd_pingpong_done(
      ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done);
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* unsafe_arena_release_mdp_cmd_pingpong_done();
  // .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
  bool has_mdp_compare_bw() const;
  private:
  bool _internal_has_mdp_compare_bw() const;

  public:
  void clear_mdp_compare_bw() ;
  const ::perfetto::protos::MdpCompareBwFtraceEvent& mdp_compare_bw() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCompareBwFtraceEvent* release_mdp_compare_bw();
  ::perfetto::protos::MdpCompareBwFtraceEvent* mutable_mdp_compare_bw();
  void set_allocated_mdp_compare_bw(::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw);
  private:
  const ::perfetto::protos::MdpCompareBwFtraceEvent& _internal_mdp_compare_bw() const;
  ::perfetto::protos::MdpCompareBwFtraceEvent* _internal_mutable_mdp_compare_bw();
  public:
  void unsafe_arena_set_allocated_mdp_compare_bw(
      ::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw);
  ::perfetto::protos::MdpCompareBwFtraceEvent* unsafe_arena_release_mdp_compare_bw();
  // .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
  bool has_mdp_perf_set_panic_luts() const;
  private:
  bool _internal_has_mdp_perf_set_panic_luts() const;

  public:
  void clear_mdp_perf_set_panic_luts() ;
  const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& mdp_perf_set_panic_luts() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* release_mdp_perf_set_panic_luts();
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mutable_mdp_perf_set_panic_luts();
  void set_allocated_mdp_perf_set_panic_luts(::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts);
  private:
  const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& _internal_mdp_perf_set_panic_luts() const;
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* _internal_mutable_mdp_perf_set_panic_luts();
  public:
  void unsafe_arena_set_allocated_mdp_perf_set_panic_luts(
      ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts);
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* unsafe_arena_release_mdp_perf_set_panic_luts();
  // .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
  bool has_mdp_sspp_set() const;
  private:
  bool _internal_has_mdp_sspp_set() const;

  public:
  void clear_mdp_sspp_set() ;
  const ::perfetto::protos::MdpSsppSetFtraceEvent& mdp_sspp_set() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpSsppSetFtraceEvent* release_mdp_sspp_set();
  ::perfetto::protos::MdpSsppSetFtraceEvent* mutable_mdp_sspp_set();
  void set_allocated_mdp_sspp_set(::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set);
  private:
  const ::perfetto::protos::MdpSsppSetFtraceEvent& _internal_mdp_sspp_set() const;
  ::perfetto::protos::MdpSsppSetFtraceEvent* _internal_mutable_mdp_sspp_set();
  public:
  void unsafe_arena_set_allocated_mdp_sspp_set(
      ::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set);
  ::perfetto::protos::MdpSsppSetFtraceEvent* unsafe_arena_release_mdp_sspp_set();
  // .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
  bool has_mdp_cmd_readptr_done() const;
  private:
  bool _internal_has_mdp_cmd_readptr_done() const;

  public:
  void clear_mdp_cmd_readptr_done() ;
  const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& mdp_cmd_readptr_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* release_mdp_cmd_readptr_done();
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mutable_mdp_cmd_readptr_done();
  void set_allocated_mdp_cmd_readptr_done(::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done);
  private:
  const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& _internal_mdp_cmd_readptr_done() const;
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* _internal_mutable_mdp_cmd_readptr_done();
  public:
  void unsafe_arena_set_allocated_mdp_cmd_readptr_done(
      ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done);
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* unsafe_arena_release_mdp_cmd_readptr_done();
  // .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
  bool has_mdp_misr_crc() const;
  private:
  bool _internal_has_mdp_misr_crc() const;

  public:
  void clear_mdp_misr_crc() ;
  const ::perfetto::protos::MdpMisrCrcFtraceEvent& mdp_misr_crc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpMisrCrcFtraceEvent* release_mdp_misr_crc();
  ::perfetto::protos::MdpMisrCrcFtraceEvent* mutable_mdp_misr_crc();
  void set_allocated_mdp_misr_crc(::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc);
  private:
  const ::perfetto::protos::MdpMisrCrcFtraceEvent& _internal_mdp_misr_crc() const;
  ::perfetto::protos::MdpMisrCrcFtraceEvent* _internal_mutable_mdp_misr_crc();
  public:
  void unsafe_arena_set_allocated_mdp_misr_crc(
      ::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc);
  ::perfetto::protos::MdpMisrCrcFtraceEvent* unsafe_arena_release_mdp_misr_crc();
  // .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
  bool has_mdp_perf_set_qos_luts() const;
  private:
  bool _internal_has_mdp_perf_set_qos_luts() const;

  public:
  void clear_mdp_perf_set_qos_luts() ;
  const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& mdp_perf_set_qos_luts() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* release_mdp_perf_set_qos_luts();
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mutable_mdp_perf_set_qos_luts();
  void set_allocated_mdp_perf_set_qos_luts(::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts);
  private:
  const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& _internal_mdp_perf_set_qos_luts() const;
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* _internal_mutable_mdp_perf_set_qos_luts();
  public:
  void unsafe_arena_set_allocated_mdp_perf_set_qos_luts(
      ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts);
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* unsafe_arena_release_mdp_perf_set_qos_luts();
  // .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
  bool has_mdp_trace_counter() const;
  private:
  bool _internal_has_mdp_trace_counter() const;

  public:
  void clear_mdp_trace_counter() ;
  const ::perfetto::protos::MdpTraceCounterFtraceEvent& mdp_trace_counter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpTraceCounterFtraceEvent* release_mdp_trace_counter();
  ::perfetto::protos::MdpTraceCounterFtraceEvent* mutable_mdp_trace_counter();
  void set_allocated_mdp_trace_counter(::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter);
  private:
  const ::perfetto::protos::MdpTraceCounterFtraceEvent& _internal_mdp_trace_counter() const;
  ::perfetto::protos::MdpTraceCounterFtraceEvent* _internal_mutable_mdp_trace_counter();
  public:
  void unsafe_arena_set_allocated_mdp_trace_counter(
      ::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter);
  ::perfetto::protos::MdpTraceCounterFtraceEvent* unsafe_arena_release_mdp_trace_counter();
  // .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
  bool has_mdp_cmd_release_bw() const;
  private:
  bool _internal_has_mdp_cmd_release_bw() const;

  public:
  void clear_mdp_cmd_release_bw() ;
  const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& mdp_cmd_release_bw() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* release_mdp_cmd_release_bw();
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mutable_mdp_cmd_release_bw();
  void set_allocated_mdp_cmd_release_bw(::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw);
  private:
  const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& _internal_mdp_cmd_release_bw() const;
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* _internal_mutable_mdp_cmd_release_bw();
  public:
  void unsafe_arena_set_allocated_mdp_cmd_release_bw(
      ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw);
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* unsafe_arena_release_mdp_cmd_release_bw();
  // .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
  bool has_mdp_mixer_update() const;
  private:
  bool _internal_has_mdp_mixer_update() const;

  public:
  void clear_mdp_mixer_update() ;
  const ::perfetto::protos::MdpMixerUpdateFtraceEvent& mdp_mixer_update() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpMixerUpdateFtraceEvent* release_mdp_mixer_update();
  ::perfetto::protos::MdpMixerUpdateFtraceEvent* mutable_mdp_mixer_update();
  void set_allocated_mdp_mixer_update(::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update);
  private:
  const ::perfetto::protos::MdpMixerUpdateFtraceEvent& _internal_mdp_mixer_update() const;
  ::perfetto::protos::MdpMixerUpdateFtraceEvent* _internal_mutable_mdp_mixer_update();
  public:
  void unsafe_arena_set_allocated_mdp_mixer_update(
      ::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update);
  ::perfetto::protos::MdpMixerUpdateFtraceEvent* unsafe_arena_release_mdp_mixer_update();
  // .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
  bool has_mdp_perf_set_wm_levels() const;
  private:
  bool _internal_has_mdp_perf_set_wm_levels() const;

  public:
  void clear_mdp_perf_set_wm_levels() ;
  const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& mdp_perf_set_wm_levels() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* release_mdp_perf_set_wm_levels();
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mutable_mdp_perf_set_wm_levels();
  void set_allocated_mdp_perf_set_wm_levels(::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels);
  private:
  const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& _internal_mdp_perf_set_wm_levels() const;
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* _internal_mutable_mdp_perf_set_wm_levels();
  public:
  void unsafe_arena_set_allocated_mdp_perf_set_wm_levels(
      ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels);
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* unsafe_arena_release_mdp_perf_set_wm_levels();
  // .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
  bool has_mdp_video_underrun_done() const;
  private:
  bool _internal_has_mdp_video_underrun_done() const;

  public:
  void clear_mdp_video_underrun_done() ;
  const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& mdp_video_underrun_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* release_mdp_video_underrun_done();
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mutable_mdp_video_underrun_done();
  void set_allocated_mdp_video_underrun_done(::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done);
  private:
  const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& _internal_mdp_video_underrun_done() const;
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* _internal_mutable_mdp_video_underrun_done();
  public:
  void unsafe_arena_set_allocated_mdp_video_underrun_done(
      ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done);
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* unsafe_arena_release_mdp_video_underrun_done();
  // .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
  bool has_mdp_cmd_wait_pingpong() const;
  private:
  bool _internal_has_mdp_cmd_wait_pingpong() const;

  public:
  void clear_mdp_cmd_wait_pingpong() ;
  const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& mdp_cmd_wait_pingpong() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* release_mdp_cmd_wait_pingpong();
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mutable_mdp_cmd_wait_pingpong();
  void set_allocated_mdp_cmd_wait_pingpong(::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong);
  private:
  const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& _internal_mdp_cmd_wait_pingpong() const;
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* _internal_mutable_mdp_cmd_wait_pingpong();
  public:
  void unsafe_arena_set_allocated_mdp_cmd_wait_pingpong(
      ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong);
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* unsafe_arena_release_mdp_cmd_wait_pingpong();
  // .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
  bool has_mdp_perf_prefill_calc() const;
  private:
  bool _internal_has_mdp_perf_prefill_calc() const;

  public:
  void clear_mdp_perf_prefill_calc() ;
  const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& mdp_perf_prefill_calc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* release_mdp_perf_prefill_calc();
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mutable_mdp_perf_prefill_calc();
  void set_allocated_mdp_perf_prefill_calc(::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc);
  private:
  const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& _internal_mdp_perf_prefill_calc() const;
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* _internal_mutable_mdp_perf_prefill_calc();
  public:
  void unsafe_arena_set_allocated_mdp_perf_prefill_calc(
      ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc);
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* unsafe_arena_release_mdp_perf_prefill_calc();
  // .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
  bool has_mdp_perf_update_bus() const;
  private:
  bool _internal_has_mdp_perf_update_bus() const;

  public:
  void clear_mdp_perf_update_bus() ;
  const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& mdp_perf_update_bus() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* release_mdp_perf_update_bus();
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mutable_mdp_perf_update_bus();
  void set_allocated_mdp_perf_update_bus(::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus);
  private:
  const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& _internal_mdp_perf_update_bus() const;
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* _internal_mutable_mdp_perf_update_bus();
  public:
  void unsafe_arena_set_allocated_mdp_perf_update_bus(
      ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus);
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* unsafe_arena_release_mdp_perf_update_bus();
  // .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
  bool has_rotator_bw_ao_as_context() const;
  private:
  bool _internal_has_rotator_bw_ao_as_context() const;

  public:
  void clear_rotator_bw_ao_as_context() ;
  const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& rotator_bw_ao_as_context() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* release_rotator_bw_ao_as_context();
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* mutable_rotator_bw_ao_as_context();
  void set_allocated_rotator_bw_ao_as_context(::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context);
  private:
  const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& _internal_rotator_bw_ao_as_context() const;
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* _internal_mutable_rotator_bw_ao_as_context();
  public:
  void unsafe_arena_set_allocated_rotator_bw_ao_as_context(
      ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context);
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* unsafe_arena_release_rotator_bw_ao_as_context();
  // .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
  bool has_mm_filemap_add_to_page_cache() const;
  private:
  bool _internal_has_mm_filemap_add_to_page_cache() const;

  public:
  void clear_mm_filemap_add_to_page_cache() ;
  const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& mm_filemap_add_to_page_cache() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* release_mm_filemap_add_to_page_cache();
  ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mutable_mm_filemap_add_to_page_cache();
  void set_allocated_mm_filemap_add_to_page_cache(::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache);
  private:
  const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& _internal_mm_filemap_add_to_page_cache() const;
  ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* _internal_mutable_mm_filemap_add_to_page_cache();
  public:
  void unsafe_arena_set_allocated_mm_filemap_add_to_page_cache(
      ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache);
  ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* unsafe_arena_release_mm_filemap_add_to_page_cache();
  // .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
  bool has_mm_filemap_delete_from_page_cache() const;
  private:
  bool _internal_has_mm_filemap_delete_from_page_cache() const;

  public:
  void clear_mm_filemap_delete_from_page_cache() ;
  const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& mm_filemap_delete_from_page_cache() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* release_mm_filemap_delete_from_page_cache();
  ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mutable_mm_filemap_delete_from_page_cache();
  void set_allocated_mm_filemap_delete_from_page_cache(::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache);
  private:
  const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& _internal_mm_filemap_delete_from_page_cache() const;
  ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* _internal_mutable_mm_filemap_delete_from_page_cache();
  public:
  void unsafe_arena_set_allocated_mm_filemap_delete_from_page_cache(
      ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache);
  ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* unsafe_arena_release_mm_filemap_delete_from_page_cache();
  // .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
  bool has_mm_compaction_begin() const;
  private:
  bool _internal_has_mm_compaction_begin() const;

  public:
  void clear_mm_compaction_begin() ;
  const ::perfetto::protos::MmCompactionBeginFtraceEvent& mm_compaction_begin() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionBeginFtraceEvent* release_mm_compaction_begin();
  ::perfetto::protos::MmCompactionBeginFtraceEvent* mutable_mm_compaction_begin();
  void set_allocated_mm_compaction_begin(::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin);
  private:
  const ::perfetto::protos::MmCompactionBeginFtraceEvent& _internal_mm_compaction_begin() const;
  ::perfetto::protos::MmCompactionBeginFtraceEvent* _internal_mutable_mm_compaction_begin();
  public:
  void unsafe_arena_set_allocated_mm_compaction_begin(
      ::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin);
  ::perfetto::protos::MmCompactionBeginFtraceEvent* unsafe_arena_release_mm_compaction_begin();
  // .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
  bool has_mm_compaction_defer_compaction() const;
  private:
  bool _internal_has_mm_compaction_defer_compaction() const;

  public:
  void clear_mm_compaction_defer_compaction() ;
  const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& mm_compaction_defer_compaction() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* release_mm_compaction_defer_compaction();
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mutable_mm_compaction_defer_compaction();
  void set_allocated_mm_compaction_defer_compaction(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction);
  private:
  const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& _internal_mm_compaction_defer_compaction() const;
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* _internal_mutable_mm_compaction_defer_compaction();
  public:
  void unsafe_arena_set_allocated_mm_compaction_defer_compaction(
      ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction);
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* unsafe_arena_release_mm_compaction_defer_compaction();
  // .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
  bool has_mm_compaction_deferred() const;
  private:
  bool _internal_has_mm_compaction_deferred() const;

  public:
  void clear_mm_compaction_deferred() ;
  const ::perfetto::protos::MmCompactionDeferredFtraceEvent& mm_compaction_deferred() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionDeferredFtraceEvent* release_mm_compaction_deferred();
  ::perfetto::protos::MmCompactionDeferredFtraceEvent* mutable_mm_compaction_deferred();
  void set_allocated_mm_compaction_deferred(::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred);
  private:
  const ::perfetto::protos::MmCompactionDeferredFtraceEvent& _internal_mm_compaction_deferred() const;
  ::perfetto::protos::MmCompactionDeferredFtraceEvent* _internal_mutable_mm_compaction_deferred();
  public:
  void unsafe_arena_set_allocated_mm_compaction_deferred(
      ::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred);
  ::perfetto::protos::MmCompactionDeferredFtraceEvent* unsafe_arena_release_mm_compaction_deferred();
  // .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
  bool has_mm_compaction_defer_reset() const;
  private:
  bool _internal_has_mm_compaction_defer_reset() const;

  public:
  void clear_mm_compaction_defer_reset() ;
  const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& mm_compaction_defer_reset() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionDeferResetFtraceEvent* release_mm_compaction_defer_reset();
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent* mutable_mm_compaction_defer_reset();
  void set_allocated_mm_compaction_defer_reset(::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset);
  private:
  const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& _internal_mm_compaction_defer_reset() const;
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent* _internal_mutable_mm_compaction_defer_reset();
  public:
  void unsafe_arena_set_allocated_mm_compaction_defer_reset(
      ::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset);
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent* unsafe_arena_release_mm_compaction_defer_reset();
  // .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
  bool has_mm_compaction_end() const;
  private:
  bool _internal_has_mm_compaction_end() const;

  public:
  void clear_mm_compaction_end() ;
  const ::perfetto::protos::MmCompactionEndFtraceEvent& mm_compaction_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionEndFtraceEvent* release_mm_compaction_end();
  ::perfetto::protos::MmCompactionEndFtraceEvent* mutable_mm_compaction_end();
  void set_allocated_mm_compaction_end(::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end);
  private:
  const ::perfetto::protos::MmCompactionEndFtraceEvent& _internal_mm_compaction_end() const;
  ::perfetto::protos::MmCompactionEndFtraceEvent* _internal_mutable_mm_compaction_end();
  public:
  void unsafe_arena_set_allocated_mm_compaction_end(
      ::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end);
  ::perfetto::protos::MmCompactionEndFtraceEvent* unsafe_arena_release_mm_compaction_end();
  // .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
  bool has_mm_compaction_finished() const;
  private:
  bool _internal_has_mm_compaction_finished() const;

  public:
  void clear_mm_compaction_finished() ;
  const ::perfetto::protos::MmCompactionFinishedFtraceEvent& mm_compaction_finished() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionFinishedFtraceEvent* release_mm_compaction_finished();
  ::perfetto::protos::MmCompactionFinishedFtraceEvent* mutable_mm_compaction_finished();
  void set_allocated_mm_compaction_finished(::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished);
  private:
  const ::perfetto::protos::MmCompactionFinishedFtraceEvent& _internal_mm_compaction_finished() const;
  ::perfetto::protos::MmCompactionFinishedFtraceEvent* _internal_mutable_mm_compaction_finished();
  public:
  void unsafe_arena_set_allocated_mm_compaction_finished(
      ::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished);
  ::perfetto::protos::MmCompactionFinishedFtraceEvent* unsafe_arena_release_mm_compaction_finished();
  // .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
  bool has_mm_compaction_isolate_freepages() const;
  private:
  bool _internal_has_mm_compaction_isolate_freepages() const;

  public:
  void clear_mm_compaction_isolate_freepages() ;
  const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& mm_compaction_isolate_freepages() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* release_mm_compaction_isolate_freepages();
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mutable_mm_compaction_isolate_freepages();
  void set_allocated_mm_compaction_isolate_freepages(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages);
  private:
  const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& _internal_mm_compaction_isolate_freepages() const;
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* _internal_mutable_mm_compaction_isolate_freepages();
  public:
  void unsafe_arena_set_allocated_mm_compaction_isolate_freepages(
      ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages);
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* unsafe_arena_release_mm_compaction_isolate_freepages();
  // .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
  bool has_mm_compaction_isolate_migratepages() const;
  private:
  bool _internal_has_mm_compaction_isolate_migratepages() const;

  public:
  void clear_mm_compaction_isolate_migratepages() ;
  const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& mm_compaction_isolate_migratepages() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* release_mm_compaction_isolate_migratepages();
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mutable_mm_compaction_isolate_migratepages();
  void set_allocated_mm_compaction_isolate_migratepages(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages);
  private:
  const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& _internal_mm_compaction_isolate_migratepages() const;
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* _internal_mutable_mm_compaction_isolate_migratepages();
  public:
  void unsafe_arena_set_allocated_mm_compaction_isolate_migratepages(
      ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages);
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* unsafe_arena_release_mm_compaction_isolate_migratepages();
  // .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
  bool has_mm_compaction_kcompactd_sleep() const;
  private:
  bool _internal_has_mm_compaction_kcompactd_sleep() const;

  public:
  void clear_mm_compaction_kcompactd_sleep() ;
  const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& mm_compaction_kcompactd_sleep() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* release_mm_compaction_kcompactd_sleep();
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mutable_mm_compaction_kcompactd_sleep();
  void set_allocated_mm_compaction_kcompactd_sleep(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep);
  private:
  const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& _internal_mm_compaction_kcompactd_sleep() const;
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* _internal_mutable_mm_compaction_kcompactd_sleep();
  public:
  void unsafe_arena_set_allocated_mm_compaction_kcompactd_sleep(
      ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep);
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* unsafe_arena_release_mm_compaction_kcompactd_sleep();
  // .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
  bool has_mm_compaction_kcompactd_wake() const;
  private:
  bool _internal_has_mm_compaction_kcompactd_wake() const;

  public:
  void clear_mm_compaction_kcompactd_wake() ;
  const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& mm_compaction_kcompactd_wake() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* release_mm_compaction_kcompactd_wake();
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mutable_mm_compaction_kcompactd_wake();
  void set_allocated_mm_compaction_kcompactd_wake(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake);
  private:
  const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& _internal_mm_compaction_kcompactd_wake() const;
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* _internal_mutable_mm_compaction_kcompactd_wake();
  public:
  void unsafe_arena_set_allocated_mm_compaction_kcompactd_wake(
      ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake);
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* unsafe_arena_release_mm_compaction_kcompactd_wake();
  // .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
  bool has_mm_compaction_migratepages() const;
  private:
  bool _internal_has_mm_compaction_migratepages() const;

  public:
  void clear_mm_compaction_migratepages() ;
  const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& mm_compaction_migratepages() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* release_mm_compaction_migratepages();
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mutable_mm_compaction_migratepages();
  void set_allocated_mm_compaction_migratepages(::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages);
  private:
  const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& _internal_mm_compaction_migratepages() const;
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* _internal_mutable_mm_compaction_migratepages();
  public:
  void unsafe_arena_set_allocated_mm_compaction_migratepages(
      ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages);
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* unsafe_arena_release_mm_compaction_migratepages();
  // .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
  bool has_mm_compaction_suitable() const;
  private:
  bool _internal_has_mm_compaction_suitable() const;

  public:
  void clear_mm_compaction_suitable() ;
  const ::perfetto::protos::MmCompactionSuitableFtraceEvent& mm_compaction_suitable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionSuitableFtraceEvent* release_mm_compaction_suitable();
  ::perfetto::protos::MmCompactionSuitableFtraceEvent* mutable_mm_compaction_suitable();
  void set_allocated_mm_compaction_suitable(::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable);
  private:
  const ::perfetto::protos::MmCompactionSuitableFtraceEvent& _internal_mm_compaction_suitable() const;
  ::perfetto::protos::MmCompactionSuitableFtraceEvent* _internal_mutable_mm_compaction_suitable();
  public:
  void unsafe_arena_set_allocated_mm_compaction_suitable(
      ::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable);
  ::perfetto::protos::MmCompactionSuitableFtraceEvent* unsafe_arena_release_mm_compaction_suitable();
  // .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
  bool has_mm_compaction_try_to_compact_pages() const;
  private:
  bool _internal_has_mm_compaction_try_to_compact_pages() const;

  public:
  void clear_mm_compaction_try_to_compact_pages() ;
  const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& mm_compaction_try_to_compact_pages() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* release_mm_compaction_try_to_compact_pages();
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mutable_mm_compaction_try_to_compact_pages();
  void set_allocated_mm_compaction_try_to_compact_pages(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages);
  private:
  const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& _internal_mm_compaction_try_to_compact_pages() const;
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* _internal_mutable_mm_compaction_try_to_compact_pages();
  public:
  void unsafe_arena_set_allocated_mm_compaction_try_to_compact_pages(
      ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages);
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* unsafe_arena_release_mm_compaction_try_to_compact_pages();
  // .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
  bool has_mm_compaction_wakeup_kcompactd() const;
  private:
  bool _internal_has_mm_compaction_wakeup_kcompactd() const;

  public:
  void clear_mm_compaction_wakeup_kcompactd() ;
  const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& mm_compaction_wakeup_kcompactd() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* release_mm_compaction_wakeup_kcompactd();
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mutable_mm_compaction_wakeup_kcompactd();
  void set_allocated_mm_compaction_wakeup_kcompactd(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd);
  private:
  const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& _internal_mm_compaction_wakeup_kcompactd() const;
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* _internal_mutable_mm_compaction_wakeup_kcompactd();
  public:
  void unsafe_arena_set_allocated_mm_compaction_wakeup_kcompactd(
      ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd);
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* unsafe_arena_release_mm_compaction_wakeup_kcompactd();
  // .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
  bool has_suspend_resume() const;
  private:
  bool _internal_has_suspend_resume() const;

  public:
  void clear_suspend_resume() ;
  const ::perfetto::protos::SuspendResumeFtraceEvent& suspend_resume() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SuspendResumeFtraceEvent* release_suspend_resume();
  ::perfetto::protos::SuspendResumeFtraceEvent* mutable_suspend_resume();
  void set_allocated_suspend_resume(::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume);
  private:
  const ::perfetto::protos::SuspendResumeFtraceEvent& _internal_suspend_resume() const;
  ::perfetto::protos::SuspendResumeFtraceEvent* _internal_mutable_suspend_resume();
  public:
  void unsafe_arena_set_allocated_suspend_resume(
      ::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume);
  ::perfetto::protos::SuspendResumeFtraceEvent* unsafe_arena_release_suspend_resume();
  // .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
  bool has_sched_wakeup_new() const;
  private:
  bool _internal_has_sched_wakeup_new() const;

  public:
  void clear_sched_wakeup_new() ;
  const ::perfetto::protos::SchedWakeupNewFtraceEvent& sched_wakeup_new() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedWakeupNewFtraceEvent* release_sched_wakeup_new();
  ::perfetto::protos::SchedWakeupNewFtraceEvent* mutable_sched_wakeup_new();
  void set_allocated_sched_wakeup_new(::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new);
  private:
  const ::perfetto::protos::SchedWakeupNewFtraceEvent& _internal_sched_wakeup_new() const;
  ::perfetto::protos::SchedWakeupNewFtraceEvent* _internal_mutable_sched_wakeup_new();
  public:
  void unsafe_arena_set_allocated_sched_wakeup_new(
      ::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new);
  ::perfetto::protos::SchedWakeupNewFtraceEvent* unsafe_arena_release_sched_wakeup_new();
  // .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
  bool has_block_bio_backmerge() const;
  private:
  bool _internal_has_block_bio_backmerge() const;

  public:
  void clear_block_bio_backmerge() ;
  const ::perfetto::protos::BlockBioBackmergeFtraceEvent& block_bio_backmerge() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockBioBackmergeFtraceEvent* release_block_bio_backmerge();
  ::perfetto::protos::BlockBioBackmergeFtraceEvent* mutable_block_bio_backmerge();
  void set_allocated_block_bio_backmerge(::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge);
  private:
  const ::perfetto::protos::BlockBioBackmergeFtraceEvent& _internal_block_bio_backmerge() const;
  ::perfetto::protos::BlockBioBackmergeFtraceEvent* _internal_mutable_block_bio_backmerge();
  public:
  void unsafe_arena_set_allocated_block_bio_backmerge(
      ::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge);
  ::perfetto::protos::BlockBioBackmergeFtraceEvent* unsafe_arena_release_block_bio_backmerge();
  // .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
  bool has_block_bio_bounce() const;
  private:
  bool _internal_has_block_bio_bounce() const;

  public:
  void clear_block_bio_bounce() ;
  const ::perfetto::protos::BlockBioBounceFtraceEvent& block_bio_bounce() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockBioBounceFtraceEvent* release_block_bio_bounce();
  ::perfetto::protos::BlockBioBounceFtraceEvent* mutable_block_bio_bounce();
  void set_allocated_block_bio_bounce(::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce);
  private:
  const ::perfetto::protos::BlockBioBounceFtraceEvent& _internal_block_bio_bounce() const;
  ::perfetto::protos::BlockBioBounceFtraceEvent* _internal_mutable_block_bio_bounce();
  public:
  void unsafe_arena_set_allocated_block_bio_bounce(
      ::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce);
  ::perfetto::protos::BlockBioBounceFtraceEvent* unsafe_arena_release_block_bio_bounce();
  // .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
  bool has_block_bio_complete() const;
  private:
  bool _internal_has_block_bio_complete() const;

  public:
  void clear_block_bio_complete() ;
  const ::perfetto::protos::BlockBioCompleteFtraceEvent& block_bio_complete() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockBioCompleteFtraceEvent* release_block_bio_complete();
  ::perfetto::protos::BlockBioCompleteFtraceEvent* mutable_block_bio_complete();
  void set_allocated_block_bio_complete(::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete);
  private:
  const ::perfetto::protos::BlockBioCompleteFtraceEvent& _internal_block_bio_complete() const;
  ::perfetto::protos::BlockBioCompleteFtraceEvent* _internal_mutable_block_bio_complete();
  public:
  void unsafe_arena_set_allocated_block_bio_complete(
      ::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete);
  ::perfetto::protos::BlockBioCompleteFtraceEvent* unsafe_arena_release_block_bio_complete();
  // .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
  bool has_block_bio_frontmerge() const;
  private:
  bool _internal_has_block_bio_frontmerge() const;

  public:
  void clear_block_bio_frontmerge() ;
  const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& block_bio_frontmerge() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockBioFrontmergeFtraceEvent* release_block_bio_frontmerge();
  ::perfetto::protos::BlockBioFrontmergeFtraceEvent* mutable_block_bio_frontmerge();
  void set_allocated_block_bio_frontmerge(::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge);
  private:
  const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& _internal_block_bio_frontmerge() const;
  ::perfetto::protos::BlockBioFrontmergeFtraceEvent* _internal_mutable_block_bio_frontmerge();
  public:
  void unsafe_arena_set_allocated_block_bio_frontmerge(
      ::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge);
  ::perfetto::protos::BlockBioFrontmergeFtraceEvent* unsafe_arena_release_block_bio_frontmerge();
  // .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
  bool has_block_bio_queue() const;
  private:
  bool _internal_has_block_bio_queue() const;

  public:
  void clear_block_bio_queue() ;
  const ::perfetto::protos::BlockBioQueueFtraceEvent& block_bio_queue() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockBioQueueFtraceEvent* release_block_bio_queue();
  ::perfetto::protos::BlockBioQueueFtraceEvent* mutable_block_bio_queue();
  void set_allocated_block_bio_queue(::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue);
  private:
  const ::perfetto::protos::BlockBioQueueFtraceEvent& _internal_block_bio_queue() const;
  ::perfetto::protos::BlockBioQueueFtraceEvent* _internal_mutable_block_bio_queue();
  public:
  void unsafe_arena_set_allocated_block_bio_queue(
      ::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue);
  ::perfetto::protos::BlockBioQueueFtraceEvent* unsafe_arena_release_block_bio_queue();
  // .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
  bool has_block_bio_remap() const;
  private:
  bool _internal_has_block_bio_remap() const;

  public:
  void clear_block_bio_remap() ;
  const ::perfetto::protos::BlockBioRemapFtraceEvent& block_bio_remap() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockBioRemapFtraceEvent* release_block_bio_remap();
  ::perfetto::protos::BlockBioRemapFtraceEvent* mutable_block_bio_remap();
  void set_allocated_block_bio_remap(::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap);
  private:
  const ::perfetto::protos::BlockBioRemapFtraceEvent& _internal_block_bio_remap() const;
  ::perfetto::protos::BlockBioRemapFtraceEvent* _internal_mutable_block_bio_remap();
  public:
  void unsafe_arena_set_allocated_block_bio_remap(
      ::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap);
  ::perfetto::protos::BlockBioRemapFtraceEvent* unsafe_arena_release_block_bio_remap();
  // .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
  bool has_block_dirty_buffer() const;
  private:
  bool _internal_has_block_dirty_buffer() const;

  public:
  void clear_block_dirty_buffer() ;
  const ::perfetto::protos::BlockDirtyBufferFtraceEvent& block_dirty_buffer() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockDirtyBufferFtraceEvent* release_block_dirty_buffer();
  ::perfetto::protos::BlockDirtyBufferFtraceEvent* mutable_block_dirty_buffer();
  void set_allocated_block_dirty_buffer(::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer);
  private:
  const ::perfetto::protos::BlockDirtyBufferFtraceEvent& _internal_block_dirty_buffer() const;
  ::perfetto::protos::BlockDirtyBufferFtraceEvent* _internal_mutable_block_dirty_buffer();
  public:
  void unsafe_arena_set_allocated_block_dirty_buffer(
      ::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer);
  ::perfetto::protos::BlockDirtyBufferFtraceEvent* unsafe_arena_release_block_dirty_buffer();
  // .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
  bool has_block_getrq() const;
  private:
  bool _internal_has_block_getrq() const;

  public:
  void clear_block_getrq() ;
  const ::perfetto::protos::BlockGetrqFtraceEvent& block_getrq() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockGetrqFtraceEvent* release_block_getrq();
  ::perfetto::protos::BlockGetrqFtraceEvent* mutable_block_getrq();
  void set_allocated_block_getrq(::perfetto::protos::BlockGetrqFtraceEvent* block_getrq);
  private:
  const ::perfetto::protos::BlockGetrqFtraceEvent& _internal_block_getrq() const;
  ::perfetto::protos::BlockGetrqFtraceEvent* _internal_mutable_block_getrq();
  public:
  void unsafe_arena_set_allocated_block_getrq(
      ::perfetto::protos::BlockGetrqFtraceEvent* block_getrq);
  ::perfetto::protos::BlockGetrqFtraceEvent* unsafe_arena_release_block_getrq();
  // .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
  bool has_block_plug() const;
  private:
  bool _internal_has_block_plug() const;

  public:
  void clear_block_plug() ;
  const ::perfetto::protos::BlockPlugFtraceEvent& block_plug() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockPlugFtraceEvent* release_block_plug();
  ::perfetto::protos::BlockPlugFtraceEvent* mutable_block_plug();
  void set_allocated_block_plug(::perfetto::protos::BlockPlugFtraceEvent* block_plug);
  private:
  const ::perfetto::protos::BlockPlugFtraceEvent& _internal_block_plug() const;
  ::perfetto::protos::BlockPlugFtraceEvent* _internal_mutable_block_plug();
  public:
  void unsafe_arena_set_allocated_block_plug(
      ::perfetto::protos::BlockPlugFtraceEvent* block_plug);
  ::perfetto::protos::BlockPlugFtraceEvent* unsafe_arena_release_block_plug();
  // .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
  bool has_block_rq_abort() const;
  private:
  bool _internal_has_block_rq_abort() const;

  public:
  void clear_block_rq_abort() ;
  const ::perfetto::protos::BlockRqAbortFtraceEvent& block_rq_abort() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockRqAbortFtraceEvent* release_block_rq_abort();
  ::perfetto::protos::BlockRqAbortFtraceEvent* mutable_block_rq_abort();
  void set_allocated_block_rq_abort(::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort);
  private:
  const ::perfetto::protos::BlockRqAbortFtraceEvent& _internal_block_rq_abort() const;
  ::perfetto::protos::BlockRqAbortFtraceEvent* _internal_mutable_block_rq_abort();
  public:
  void unsafe_arena_set_allocated_block_rq_abort(
      ::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort);
  ::perfetto::protos::BlockRqAbortFtraceEvent* unsafe_arena_release_block_rq_abort();
  // .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
  bool has_block_rq_complete() const;
  private:
  bool _internal_has_block_rq_complete() const;

  public:
  void clear_block_rq_complete() ;
  const ::perfetto::protos::BlockRqCompleteFtraceEvent& block_rq_complete() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockRqCompleteFtraceEvent* release_block_rq_complete();
  ::perfetto::protos::BlockRqCompleteFtraceEvent* mutable_block_rq_complete();
  void set_allocated_block_rq_complete(::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete);
  private:
  const ::perfetto::protos::BlockRqCompleteFtraceEvent& _internal_block_rq_complete() const;
  ::perfetto::protos::BlockRqCompleteFtraceEvent* _internal_mutable_block_rq_complete();
  public:
  void unsafe_arena_set_allocated_block_rq_complete(
      ::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete);
  ::perfetto::protos::BlockRqCompleteFtraceEvent* unsafe_arena_release_block_rq_complete();
  // .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
  bool has_block_rq_insert() const;
  private:
  bool _internal_has_block_rq_insert() const;

  public:
  void clear_block_rq_insert() ;
  const ::perfetto::protos::BlockRqInsertFtraceEvent& block_rq_insert() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockRqInsertFtraceEvent* release_block_rq_insert();
  ::perfetto::protos::BlockRqInsertFtraceEvent* mutable_block_rq_insert();
  void set_allocated_block_rq_insert(::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert);
  private:
  const ::perfetto::protos::BlockRqInsertFtraceEvent& _internal_block_rq_insert() const;
  ::perfetto::protos::BlockRqInsertFtraceEvent* _internal_mutable_block_rq_insert();
  public:
  void unsafe_arena_set_allocated_block_rq_insert(
      ::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert);
  ::perfetto::protos::BlockRqInsertFtraceEvent* unsafe_arena_release_block_rq_insert();
  // .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
  bool has_block_rq_remap() const;
  private:
  bool _internal_has_block_rq_remap() const;

  public:
  void clear_block_rq_remap() ;
  const ::perfetto::protos::BlockRqRemapFtraceEvent& block_rq_remap() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockRqRemapFtraceEvent* release_block_rq_remap();
  ::perfetto::protos::BlockRqRemapFtraceEvent* mutable_block_rq_remap();
  void set_allocated_block_rq_remap(::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap);
  private:
  const ::perfetto::protos::BlockRqRemapFtraceEvent& _internal_block_rq_remap() const;
  ::perfetto::protos::BlockRqRemapFtraceEvent* _internal_mutable_block_rq_remap();
  public:
  void unsafe_arena_set_allocated_block_rq_remap(
      ::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap);
  ::perfetto::protos::BlockRqRemapFtraceEvent* unsafe_arena_release_block_rq_remap();
  // .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
  bool has_block_rq_requeue() const;
  private:
  bool _internal_has_block_rq_requeue() const;

  public:
  void clear_block_rq_requeue() ;
  const ::perfetto::protos::BlockRqRequeueFtraceEvent& block_rq_requeue() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockRqRequeueFtraceEvent* release_block_rq_requeue();
  ::perfetto::protos::BlockRqRequeueFtraceEvent* mutable_block_rq_requeue();
  void set_allocated_block_rq_requeue(::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue);
  private:
  const ::perfetto::protos::BlockRqRequeueFtraceEvent& _internal_block_rq_requeue() const;
  ::perfetto::protos::BlockRqRequeueFtraceEvent* _internal_mutable_block_rq_requeue();
  public:
  void unsafe_arena_set_allocated_block_rq_requeue(
      ::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue);
  ::perfetto::protos::BlockRqRequeueFtraceEvent* unsafe_arena_release_block_rq_requeue();
  // .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
  bool has_block_sleeprq() const;
  private:
  bool _internal_has_block_sleeprq() const;

  public:
  void clear_block_sleeprq() ;
  const ::perfetto::protos::BlockSleeprqFtraceEvent& block_sleeprq() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockSleeprqFtraceEvent* release_block_sleeprq();
  ::perfetto::protos::BlockSleeprqFtraceEvent* mutable_block_sleeprq();
  void set_allocated_block_sleeprq(::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq);
  private:
  const ::perfetto::protos::BlockSleeprqFtraceEvent& _internal_block_sleeprq() const;
  ::perfetto::protos::BlockSleeprqFtraceEvent* _internal_mutable_block_sleeprq();
  public:
  void unsafe_arena_set_allocated_block_sleeprq(
      ::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq);
  ::perfetto::protos::BlockSleeprqFtraceEvent* unsafe_arena_release_block_sleeprq();
  // .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
  bool has_block_split() const;
  private:
  bool _internal_has_block_split() const;

  public:
  void clear_block_split() ;
  const ::perfetto::protos::BlockSplitFtraceEvent& block_split() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockSplitFtraceEvent* release_block_split();
  ::perfetto::protos::BlockSplitFtraceEvent* mutable_block_split();
  void set_allocated_block_split(::perfetto::protos::BlockSplitFtraceEvent* block_split);
  private:
  const ::perfetto::protos::BlockSplitFtraceEvent& _internal_block_split() const;
  ::perfetto::protos::BlockSplitFtraceEvent* _internal_mutable_block_split();
  public:
  void unsafe_arena_set_allocated_block_split(
      ::perfetto::protos::BlockSplitFtraceEvent* block_split);
  ::perfetto::protos::BlockSplitFtraceEvent* unsafe_arena_release_block_split();
  // .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
  bool has_block_touch_buffer() const;
  private:
  bool _internal_has_block_touch_buffer() const;

  public:
  void clear_block_touch_buffer() ;
  const ::perfetto::protos::BlockTouchBufferFtraceEvent& block_touch_buffer() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockTouchBufferFtraceEvent* release_block_touch_buffer();
  ::perfetto::protos::BlockTouchBufferFtraceEvent* mutable_block_touch_buffer();
  void set_allocated_block_touch_buffer(::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer);
  private:
  const ::perfetto::protos::BlockTouchBufferFtraceEvent& _internal_block_touch_buffer() const;
  ::perfetto::protos::BlockTouchBufferFtraceEvent* _internal_mutable_block_touch_buffer();
  public:
  void unsafe_arena_set_allocated_block_touch_buffer(
      ::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer);
  ::perfetto::protos::BlockTouchBufferFtraceEvent* unsafe_arena_release_block_touch_buffer();
  // .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
  bool has_block_unplug() const;
  private:
  bool _internal_has_block_unplug() const;

  public:
  void clear_block_unplug() ;
  const ::perfetto::protos::BlockUnplugFtraceEvent& block_unplug() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BlockUnplugFtraceEvent* release_block_unplug();
  ::perfetto::protos::BlockUnplugFtraceEvent* mutable_block_unplug();
  void set_allocated_block_unplug(::perfetto::protos::BlockUnplugFtraceEvent* block_unplug);
  private:
  const ::perfetto::protos::BlockUnplugFtraceEvent& _internal_block_unplug() const;
  ::perfetto::protos::BlockUnplugFtraceEvent* _internal_mutable_block_unplug();
  public:
  void unsafe_arena_set_allocated_block_unplug(
      ::perfetto::protos::BlockUnplugFtraceEvent* block_unplug);
  ::perfetto::protos::BlockUnplugFtraceEvent* unsafe_arena_release_block_unplug();
  // .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
  bool has_ext4_alloc_da_blocks() const;
  private:
  bool _internal_has_ext4_alloc_da_blocks() const;

  public:
  void clear_ext4_alloc_da_blocks() ;
  const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& ext4_alloc_da_blocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* release_ext4_alloc_da_blocks();
  ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* mutable_ext4_alloc_da_blocks();
  void set_allocated_ext4_alloc_da_blocks(::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks);
  private:
  const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& _internal_ext4_alloc_da_blocks() const;
  ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* _internal_mutable_ext4_alloc_da_blocks();
  public:
  void unsafe_arena_set_allocated_ext4_alloc_da_blocks(
      ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks);
  ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* unsafe_arena_release_ext4_alloc_da_blocks();
  // .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
  bool has_ext4_allocate_blocks() const;
  private:
  bool _internal_has_ext4_allocate_blocks() const;

  public:
  void clear_ext4_allocate_blocks() ;
  const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& ext4_allocate_blocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* release_ext4_allocate_blocks();
  ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* mutable_ext4_allocate_blocks();
  void set_allocated_ext4_allocate_blocks(::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks);
  private:
  const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& _internal_ext4_allocate_blocks() const;
  ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* _internal_mutable_ext4_allocate_blocks();
  public:
  void unsafe_arena_set_allocated_ext4_allocate_blocks(
      ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks);
  ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* unsafe_arena_release_ext4_allocate_blocks();
  // .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
  bool has_ext4_allocate_inode() const;
  private:
  bool _internal_has_ext4_allocate_inode() const;

  public:
  void clear_ext4_allocate_inode() ;
  const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& ext4_allocate_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4AllocateInodeFtraceEvent* release_ext4_allocate_inode();
  ::perfetto::protos::Ext4AllocateInodeFtraceEvent* mutable_ext4_allocate_inode();
  void set_allocated_ext4_allocate_inode(::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode);
  private:
  const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& _internal_ext4_allocate_inode() const;
  ::perfetto::protos::Ext4AllocateInodeFtraceEvent* _internal_mutable_ext4_allocate_inode();
  public:
  void unsafe_arena_set_allocated_ext4_allocate_inode(
      ::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode);
  ::perfetto::protos::Ext4AllocateInodeFtraceEvent* unsafe_arena_release_ext4_allocate_inode();
  // .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
  bool has_ext4_begin_ordered_truncate() const;
  private:
  bool _internal_has_ext4_begin_ordered_truncate() const;

  public:
  void clear_ext4_begin_ordered_truncate() ;
  const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& ext4_begin_ordered_truncate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* release_ext4_begin_ordered_truncate();
  ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* mutable_ext4_begin_ordered_truncate();
  void set_allocated_ext4_begin_ordered_truncate(::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate);
  private:
  const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& _internal_ext4_begin_ordered_truncate() const;
  ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* _internal_mutable_ext4_begin_ordered_truncate();
  public:
  void unsafe_arena_set_allocated_ext4_begin_ordered_truncate(
      ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate);
  ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* unsafe_arena_release_ext4_begin_ordered_truncate();
  // .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
  bool has_ext4_collapse_range() const;
  private:
  bool _internal_has_ext4_collapse_range() const;

  public:
  void clear_ext4_collapse_range() ;
  const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& ext4_collapse_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4CollapseRangeFtraceEvent* release_ext4_collapse_range();
  ::perfetto::protos::Ext4CollapseRangeFtraceEvent* mutable_ext4_collapse_range();
  void set_allocated_ext4_collapse_range(::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range);
  private:
  const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& _internal_ext4_collapse_range() const;
  ::perfetto::protos::Ext4CollapseRangeFtraceEvent* _internal_mutable_ext4_collapse_range();
  public:
  void unsafe_arena_set_allocated_ext4_collapse_range(
      ::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range);
  ::perfetto::protos::Ext4CollapseRangeFtraceEvent* unsafe_arena_release_ext4_collapse_range();
  // .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
  bool has_ext4_da_release_space() const;
  private:
  bool _internal_has_ext4_da_release_space() const;

  public:
  void clear_ext4_da_release_space() ;
  const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& ext4_da_release_space() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* release_ext4_da_release_space();
  ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* mutable_ext4_da_release_space();
  void set_allocated_ext4_da_release_space(::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space);
  private:
  const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& _internal_ext4_da_release_space() const;
  ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* _internal_mutable_ext4_da_release_space();
  public:
  void unsafe_arena_set_allocated_ext4_da_release_space(
      ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space);
  ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* unsafe_arena_release_ext4_da_release_space();
  // .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
  bool has_ext4_da_reserve_space() const;
  private:
  bool _internal_has_ext4_da_reserve_space() const;

  public:
  void clear_ext4_da_reserve_space() ;
  const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& ext4_da_reserve_space() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* release_ext4_da_reserve_space();
  ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* mutable_ext4_da_reserve_space();
  void set_allocated_ext4_da_reserve_space(::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space);
  private:
  const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& _internal_ext4_da_reserve_space() const;
  ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* _internal_mutable_ext4_da_reserve_space();
  public:
  void unsafe_arena_set_allocated_ext4_da_reserve_space(
      ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space);
  ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* unsafe_arena_release_ext4_da_reserve_space();
  // .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
  bool has_ext4_da_update_reserve_space() const;
  private:
  bool _internal_has_ext4_da_update_reserve_space() const;

  public:
  void clear_ext4_da_update_reserve_space() ;
  const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& ext4_da_update_reserve_space() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* release_ext4_da_update_reserve_space();
  ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* mutable_ext4_da_update_reserve_space();
  void set_allocated_ext4_da_update_reserve_space(::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space);
  private:
  const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& _internal_ext4_da_update_reserve_space() const;
  ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* _internal_mutable_ext4_da_update_reserve_space();
  public:
  void unsafe_arena_set_allocated_ext4_da_update_reserve_space(
      ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space);
  ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* unsafe_arena_release_ext4_da_update_reserve_space();
  // .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
  bool has_ext4_da_write_pages() const;
  private:
  bool _internal_has_ext4_da_write_pages() const;

  public:
  void clear_ext4_da_write_pages() ;
  const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& ext4_da_write_pages() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaWritePagesFtraceEvent* release_ext4_da_write_pages();
  ::perfetto::protos::Ext4DaWritePagesFtraceEvent* mutable_ext4_da_write_pages();
  void set_allocated_ext4_da_write_pages(::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages);
  private:
  const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& _internal_ext4_da_write_pages() const;
  ::perfetto::protos::Ext4DaWritePagesFtraceEvent* _internal_mutable_ext4_da_write_pages();
  public:
  void unsafe_arena_set_allocated_ext4_da_write_pages(
      ::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages);
  ::perfetto::protos::Ext4DaWritePagesFtraceEvent* unsafe_arena_release_ext4_da_write_pages();
  // .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
  bool has_ext4_da_write_pages_extent() const;
  private:
  bool _internal_has_ext4_da_write_pages_extent() const;

  public:
  void clear_ext4_da_write_pages_extent() ;
  const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& ext4_da_write_pages_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* release_ext4_da_write_pages_extent();
  ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* mutable_ext4_da_write_pages_extent();
  void set_allocated_ext4_da_write_pages_extent(::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent);
  private:
  const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& _internal_ext4_da_write_pages_extent() const;
  ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* _internal_mutable_ext4_da_write_pages_extent();
  public:
  void unsafe_arena_set_allocated_ext4_da_write_pages_extent(
      ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent);
  ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* unsafe_arena_release_ext4_da_write_pages_extent();
  // .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
  bool has_ext4_direct_io_enter() const;
  private:
  bool _internal_has_ext4_direct_io_enter() const;

  public:
  void clear_ext4_direct_io_enter() ;
  const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& ext4_direct_io_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* release_ext4_direct_io_enter();
  ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* mutable_ext4_direct_io_enter();
  void set_allocated_ext4_direct_io_enter(::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter);
  private:
  const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& _internal_ext4_direct_io_enter() const;
  ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* _internal_mutable_ext4_direct_io_enter();
  public:
  void unsafe_arena_set_allocated_ext4_direct_io_enter(
      ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter);
  ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* unsafe_arena_release_ext4_direct_io_enter();
  // .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
  bool has_ext4_direct_io_exit() const;
  private:
  bool _internal_has_ext4_direct_io_exit() const;

  public:
  void clear_ext4_direct_io_exit() ;
  const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& ext4_direct_io_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DirectIOExitFtraceEvent* release_ext4_direct_io_exit();
  ::perfetto::protos::Ext4DirectIOExitFtraceEvent* mutable_ext4_direct_io_exit();
  void set_allocated_ext4_direct_io_exit(::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit);
  private:
  const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& _internal_ext4_direct_io_exit() const;
  ::perfetto::protos::Ext4DirectIOExitFtraceEvent* _internal_mutable_ext4_direct_io_exit();
  public:
  void unsafe_arena_set_allocated_ext4_direct_io_exit(
      ::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit);
  ::perfetto::protos::Ext4DirectIOExitFtraceEvent* unsafe_arena_release_ext4_direct_io_exit();
  // .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
  bool has_ext4_discard_blocks() const;
  private:
  bool _internal_has_ext4_discard_blocks() const;

  public:
  void clear_ext4_discard_blocks() ;
  const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& ext4_discard_blocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* release_ext4_discard_blocks();
  ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* mutable_ext4_discard_blocks();
  void set_allocated_ext4_discard_blocks(::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks);
  private:
  const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& _internal_ext4_discard_blocks() const;
  ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* _internal_mutable_ext4_discard_blocks();
  public:
  void unsafe_arena_set_allocated_ext4_discard_blocks(
      ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks);
  ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* unsafe_arena_release_ext4_discard_blocks();
  // .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
  bool has_ext4_discard_preallocations() const;
  private:
  bool _internal_has_ext4_discard_preallocations() const;

  public:
  void clear_ext4_discard_preallocations() ;
  const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& ext4_discard_preallocations() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* release_ext4_discard_preallocations();
  ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* mutable_ext4_discard_preallocations();
  void set_allocated_ext4_discard_preallocations(::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations);
  private:
  const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& _internal_ext4_discard_preallocations() const;
  ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* _internal_mutable_ext4_discard_preallocations();
  public:
  void unsafe_arena_set_allocated_ext4_discard_preallocations(
      ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations);
  ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* unsafe_arena_release_ext4_discard_preallocations();
  // .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
  bool has_ext4_drop_inode() const;
  private:
  bool _internal_has_ext4_drop_inode() const;

  public:
  void clear_ext4_drop_inode() ;
  const ::perfetto::protos::Ext4DropInodeFtraceEvent& ext4_drop_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4DropInodeFtraceEvent* release_ext4_drop_inode();
  ::perfetto::protos::Ext4DropInodeFtraceEvent* mutable_ext4_drop_inode();
  void set_allocated_ext4_drop_inode(::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode);
  private:
  const ::perfetto::protos::Ext4DropInodeFtraceEvent& _internal_ext4_drop_inode() const;
  ::perfetto::protos::Ext4DropInodeFtraceEvent* _internal_mutable_ext4_drop_inode();
  public:
  void unsafe_arena_set_allocated_ext4_drop_inode(
      ::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode);
  ::perfetto::protos::Ext4DropInodeFtraceEvent* unsafe_arena_release_ext4_drop_inode();
  // .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
  bool has_ext4_es_cache_extent() const;
  private:
  bool _internal_has_ext4_es_cache_extent() const;

  public:
  void clear_ext4_es_cache_extent() ;
  const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& ext4_es_cache_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* release_ext4_es_cache_extent();
  ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* mutable_ext4_es_cache_extent();
  void set_allocated_ext4_es_cache_extent(::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent);
  private:
  const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& _internal_ext4_es_cache_extent() const;
  ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* _internal_mutable_ext4_es_cache_extent();
  public:
  void unsafe_arena_set_allocated_ext4_es_cache_extent(
      ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent);
  ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* unsafe_arena_release_ext4_es_cache_extent();
  // .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
  bool has_ext4_es_find_delayed_extent_range_enter() const;
  private:
  bool _internal_has_ext4_es_find_delayed_extent_range_enter() const;

  public:
  void clear_ext4_es_find_delayed_extent_range_enter() ;
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& ext4_es_find_delayed_extent_range_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* release_ext4_es_find_delayed_extent_range_enter();
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* mutable_ext4_es_find_delayed_extent_range_enter();
  void set_allocated_ext4_es_find_delayed_extent_range_enter(::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter);
  private:
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& _internal_ext4_es_find_delayed_extent_range_enter() const;
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* _internal_mutable_ext4_es_find_delayed_extent_range_enter();
  public:
  void unsafe_arena_set_allocated_ext4_es_find_delayed_extent_range_enter(
      ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter);
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* unsafe_arena_release_ext4_es_find_delayed_extent_range_enter();
  // .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
  bool has_ext4_es_find_delayed_extent_range_exit() const;
  private:
  bool _internal_has_ext4_es_find_delayed_extent_range_exit() const;

  public:
  void clear_ext4_es_find_delayed_extent_range_exit() ;
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& ext4_es_find_delayed_extent_range_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* release_ext4_es_find_delayed_extent_range_exit();
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* mutable_ext4_es_find_delayed_extent_range_exit();
  void set_allocated_ext4_es_find_delayed_extent_range_exit(::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit);
  private:
  const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& _internal_ext4_es_find_delayed_extent_range_exit() const;
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* _internal_mutable_ext4_es_find_delayed_extent_range_exit();
  public:
  void unsafe_arena_set_allocated_ext4_es_find_delayed_extent_range_exit(
      ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit);
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* unsafe_arena_release_ext4_es_find_delayed_extent_range_exit();
  // .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
  bool has_ext4_es_insert_extent() const;
  private:
  bool _internal_has_ext4_es_insert_extent() const;

  public:
  void clear_ext4_es_insert_extent() ;
  const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& ext4_es_insert_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* release_ext4_es_insert_extent();
  ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* mutable_ext4_es_insert_extent();
  void set_allocated_ext4_es_insert_extent(::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent);
  private:
  const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& _internal_ext4_es_insert_extent() const;
  ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* _internal_mutable_ext4_es_insert_extent();
  public:
  void unsafe_arena_set_allocated_ext4_es_insert_extent(
      ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent);
  ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* unsafe_arena_release_ext4_es_insert_extent();
  // .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
  bool has_ext4_es_lookup_extent_enter() const;
  private:
  bool _internal_has_ext4_es_lookup_extent_enter() const;

  public:
  void clear_ext4_es_lookup_extent_enter() ;
  const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& ext4_es_lookup_extent_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* release_ext4_es_lookup_extent_enter();
  ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* mutable_ext4_es_lookup_extent_enter();
  void set_allocated_ext4_es_lookup_extent_enter(::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter);
  private:
  const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& _internal_ext4_es_lookup_extent_enter() const;
  ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* _internal_mutable_ext4_es_lookup_extent_enter();
  public:
  void unsafe_arena_set_allocated_ext4_es_lookup_extent_enter(
      ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter);
  ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* unsafe_arena_release_ext4_es_lookup_extent_enter();
  // .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
  bool has_ext4_es_lookup_extent_exit() const;
  private:
  bool _internal_has_ext4_es_lookup_extent_exit() const;

  public:
  void clear_ext4_es_lookup_extent_exit() ;
  const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& ext4_es_lookup_extent_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* release_ext4_es_lookup_extent_exit();
  ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* mutable_ext4_es_lookup_extent_exit();
  void set_allocated_ext4_es_lookup_extent_exit(::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit);
  private:
  const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& _internal_ext4_es_lookup_extent_exit() const;
  ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* _internal_mutable_ext4_es_lookup_extent_exit();
  public:
  void unsafe_arena_set_allocated_ext4_es_lookup_extent_exit(
      ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit);
  ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* unsafe_arena_release_ext4_es_lookup_extent_exit();
  // .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
  bool has_ext4_es_remove_extent() const;
  private:
  bool _internal_has_ext4_es_remove_extent() const;

  public:
  void clear_ext4_es_remove_extent() ;
  const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& ext4_es_remove_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* release_ext4_es_remove_extent();
  ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* mutable_ext4_es_remove_extent();
  void set_allocated_ext4_es_remove_extent(::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent);
  private:
  const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& _internal_ext4_es_remove_extent() const;
  ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* _internal_mutable_ext4_es_remove_extent();
  public:
  void unsafe_arena_set_allocated_ext4_es_remove_extent(
      ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent);
  ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* unsafe_arena_release_ext4_es_remove_extent();
  // .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
  bool has_ext4_es_shrink() const;
  private:
  bool _internal_has_ext4_es_shrink() const;

  public:
  void clear_ext4_es_shrink() ;
  const ::perfetto::protos::Ext4EsShrinkFtraceEvent& ext4_es_shrink() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsShrinkFtraceEvent* release_ext4_es_shrink();
  ::perfetto::protos::Ext4EsShrinkFtraceEvent* mutable_ext4_es_shrink();
  void set_allocated_ext4_es_shrink(::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink);
  private:
  const ::perfetto::protos::Ext4EsShrinkFtraceEvent& _internal_ext4_es_shrink() const;
  ::perfetto::protos::Ext4EsShrinkFtraceEvent* _internal_mutable_ext4_es_shrink();
  public:
  void unsafe_arena_set_allocated_ext4_es_shrink(
      ::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink);
  ::perfetto::protos::Ext4EsShrinkFtraceEvent* unsafe_arena_release_ext4_es_shrink();
  // .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
  bool has_ext4_es_shrink_count() const;
  private:
  bool _internal_has_ext4_es_shrink_count() const;

  public:
  void clear_ext4_es_shrink_count() ;
  const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& ext4_es_shrink_count() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* release_ext4_es_shrink_count();
  ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* mutable_ext4_es_shrink_count();
  void set_allocated_ext4_es_shrink_count(::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count);
  private:
  const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& _internal_ext4_es_shrink_count() const;
  ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* _internal_mutable_ext4_es_shrink_count();
  public:
  void unsafe_arena_set_allocated_ext4_es_shrink_count(
      ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count);
  ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* unsafe_arena_release_ext4_es_shrink_count();
  // .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
  bool has_ext4_es_shrink_scan_enter() const;
  private:
  bool _internal_has_ext4_es_shrink_scan_enter() const;

  public:
  void clear_ext4_es_shrink_scan_enter() ;
  const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& ext4_es_shrink_scan_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* release_ext4_es_shrink_scan_enter();
  ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* mutable_ext4_es_shrink_scan_enter();
  void set_allocated_ext4_es_shrink_scan_enter(::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter);
  private:
  const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& _internal_ext4_es_shrink_scan_enter() const;
  ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* _internal_mutable_ext4_es_shrink_scan_enter();
  public:
  void unsafe_arena_set_allocated_ext4_es_shrink_scan_enter(
      ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter);
  ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* unsafe_arena_release_ext4_es_shrink_scan_enter();
  // .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
  bool has_ext4_es_shrink_scan_exit() const;
  private:
  bool _internal_has_ext4_es_shrink_scan_exit() const;

  public:
  void clear_ext4_es_shrink_scan_exit() ;
  const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& ext4_es_shrink_scan_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* release_ext4_es_shrink_scan_exit();
  ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* mutable_ext4_es_shrink_scan_exit();
  void set_allocated_ext4_es_shrink_scan_exit(::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit);
  private:
  const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& _internal_ext4_es_shrink_scan_exit() const;
  ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* _internal_mutable_ext4_es_shrink_scan_exit();
  public:
  void unsafe_arena_set_allocated_ext4_es_shrink_scan_exit(
      ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit);
  ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* unsafe_arena_release_ext4_es_shrink_scan_exit();
  // .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
  bool has_ext4_evict_inode() const;
  private:
  bool _internal_has_ext4_evict_inode() const;

  public:
  void clear_ext4_evict_inode() ;
  const ::perfetto::protos::Ext4EvictInodeFtraceEvent& ext4_evict_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4EvictInodeFtraceEvent* release_ext4_evict_inode();
  ::perfetto::protos::Ext4EvictInodeFtraceEvent* mutable_ext4_evict_inode();
  void set_allocated_ext4_evict_inode(::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode);
  private:
  const ::perfetto::protos::Ext4EvictInodeFtraceEvent& _internal_ext4_evict_inode() const;
  ::perfetto::protos::Ext4EvictInodeFtraceEvent* _internal_mutable_ext4_evict_inode();
  public:
  void unsafe_arena_set_allocated_ext4_evict_inode(
      ::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode);
  ::perfetto::protos::Ext4EvictInodeFtraceEvent* unsafe_arena_release_ext4_evict_inode();
  // .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
  bool has_ext4_ext_convert_to_initialized_enter() const;
  private:
  bool _internal_has_ext4_ext_convert_to_initialized_enter() const;

  public:
  void clear_ext4_ext_convert_to_initialized_enter() ;
  const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& ext4_ext_convert_to_initialized_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* release_ext4_ext_convert_to_initialized_enter();
  ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* mutable_ext4_ext_convert_to_initialized_enter();
  void set_allocated_ext4_ext_convert_to_initialized_enter(::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter);
  private:
  const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& _internal_ext4_ext_convert_to_initialized_enter() const;
  ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* _internal_mutable_ext4_ext_convert_to_initialized_enter();
  public:
  void unsafe_arena_set_allocated_ext4_ext_convert_to_initialized_enter(
      ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter);
  ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* unsafe_arena_release_ext4_ext_convert_to_initialized_enter();
  // .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
  bool has_ext4_ext_convert_to_initialized_fastpath() const;
  private:
  bool _internal_has_ext4_ext_convert_to_initialized_fastpath() const;

  public:
  void clear_ext4_ext_convert_to_initialized_fastpath() ;
  const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& ext4_ext_convert_to_initialized_fastpath() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* release_ext4_ext_convert_to_initialized_fastpath();
  ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* mutable_ext4_ext_convert_to_initialized_fastpath();
  void set_allocated_ext4_ext_convert_to_initialized_fastpath(::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath);
  private:
  const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& _internal_ext4_ext_convert_to_initialized_fastpath() const;
  ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* _internal_mutable_ext4_ext_convert_to_initialized_fastpath();
  public:
  void unsafe_arena_set_allocated_ext4_ext_convert_to_initialized_fastpath(
      ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath);
  ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* unsafe_arena_release_ext4_ext_convert_to_initialized_fastpath();
  // .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
  bool has_ext4_ext_handle_unwritten_extents() const;
  private:
  bool _internal_has_ext4_ext_handle_unwritten_extents() const;

  public:
  void clear_ext4_ext_handle_unwritten_extents() ;
  const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& ext4_ext_handle_unwritten_extents() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* release_ext4_ext_handle_unwritten_extents();
  ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* mutable_ext4_ext_handle_unwritten_extents();
  void set_allocated_ext4_ext_handle_unwritten_extents(::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents);
  private:
  const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& _internal_ext4_ext_handle_unwritten_extents() const;
  ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* _internal_mutable_ext4_ext_handle_unwritten_extents();
  public:
  void unsafe_arena_set_allocated_ext4_ext_handle_unwritten_extents(
      ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents);
  ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* unsafe_arena_release_ext4_ext_handle_unwritten_extents();
  // .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
  bool has_ext4_ext_in_cache() const;
  private:
  bool _internal_has_ext4_ext_in_cache() const;

  public:
  void clear_ext4_ext_in_cache() ;
  const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& ext4_ext_in_cache() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtInCacheFtraceEvent* release_ext4_ext_in_cache();
  ::perfetto::protos::Ext4ExtInCacheFtraceEvent* mutable_ext4_ext_in_cache();
  void set_allocated_ext4_ext_in_cache(::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache);
  private:
  const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& _internal_ext4_ext_in_cache() const;
  ::perfetto::protos::Ext4ExtInCacheFtraceEvent* _internal_mutable_ext4_ext_in_cache();
  public:
  void unsafe_arena_set_allocated_ext4_ext_in_cache(
      ::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache);
  ::perfetto::protos::Ext4ExtInCacheFtraceEvent* unsafe_arena_release_ext4_ext_in_cache();
  // .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
  bool has_ext4_ext_load_extent() const;
  private:
  bool _internal_has_ext4_ext_load_extent() const;

  public:
  void clear_ext4_ext_load_extent() ;
  const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& ext4_ext_load_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* release_ext4_ext_load_extent();
  ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* mutable_ext4_ext_load_extent();
  void set_allocated_ext4_ext_load_extent(::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent);
  private:
  const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& _internal_ext4_ext_load_extent() const;
  ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* _internal_mutable_ext4_ext_load_extent();
  public:
  void unsafe_arena_set_allocated_ext4_ext_load_extent(
      ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent);
  ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* unsafe_arena_release_ext4_ext_load_extent();
  // .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
  bool has_ext4_ext_map_blocks_enter() const;
  private:
  bool _internal_has_ext4_ext_map_blocks_enter() const;

  public:
  void clear_ext4_ext_map_blocks_enter() ;
  const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& ext4_ext_map_blocks_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* release_ext4_ext_map_blocks_enter();
  ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* mutable_ext4_ext_map_blocks_enter();
  void set_allocated_ext4_ext_map_blocks_enter(::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter);
  private:
  const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& _internal_ext4_ext_map_blocks_enter() const;
  ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* _internal_mutable_ext4_ext_map_blocks_enter();
  public:
  void unsafe_arena_set_allocated_ext4_ext_map_blocks_enter(
      ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter);
  ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* unsafe_arena_release_ext4_ext_map_blocks_enter();
  // .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
  bool has_ext4_ext_map_blocks_exit() const;
  private:
  bool _internal_has_ext4_ext_map_blocks_exit() const;

  public:
  void clear_ext4_ext_map_blocks_exit() ;
  const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& ext4_ext_map_blocks_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* release_ext4_ext_map_blocks_exit();
  ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* mutable_ext4_ext_map_blocks_exit();
  void set_allocated_ext4_ext_map_blocks_exit(::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit);
  private:
  const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& _internal_ext4_ext_map_blocks_exit() const;
  ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* _internal_mutable_ext4_ext_map_blocks_exit();
  public:
  void unsafe_arena_set_allocated_ext4_ext_map_blocks_exit(
      ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit);
  ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* unsafe_arena_release_ext4_ext_map_blocks_exit();
  // .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
  bool has_ext4_ext_put_in_cache() const;
  private:
  bool _internal_has_ext4_ext_put_in_cache() const;

  public:
  void clear_ext4_ext_put_in_cache() ;
  const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& ext4_ext_put_in_cache() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* release_ext4_ext_put_in_cache();
  ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* mutable_ext4_ext_put_in_cache();
  void set_allocated_ext4_ext_put_in_cache(::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache);
  private:
  const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& _internal_ext4_ext_put_in_cache() const;
  ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* _internal_mutable_ext4_ext_put_in_cache();
  public:
  void unsafe_arena_set_allocated_ext4_ext_put_in_cache(
      ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache);
  ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* unsafe_arena_release_ext4_ext_put_in_cache();
  // .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
  bool has_ext4_ext_remove_space() const;
  private:
  bool _internal_has_ext4_ext_remove_space() const;

  public:
  void clear_ext4_ext_remove_space() ;
  const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& ext4_ext_remove_space() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* release_ext4_ext_remove_space();
  ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* mutable_ext4_ext_remove_space();
  void set_allocated_ext4_ext_remove_space(::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space);
  private:
  const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& _internal_ext4_ext_remove_space() const;
  ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* _internal_mutable_ext4_ext_remove_space();
  public:
  void unsafe_arena_set_allocated_ext4_ext_remove_space(
      ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space);
  ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* unsafe_arena_release_ext4_ext_remove_space();
  // .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
  bool has_ext4_ext_remove_space_done() const;
  private:
  bool _internal_has_ext4_ext_remove_space_done() const;

  public:
  void clear_ext4_ext_remove_space_done() ;
  const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& ext4_ext_remove_space_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* release_ext4_ext_remove_space_done();
  ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* mutable_ext4_ext_remove_space_done();
  void set_allocated_ext4_ext_remove_space_done(::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done);
  private:
  const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& _internal_ext4_ext_remove_space_done() const;
  ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* _internal_mutable_ext4_ext_remove_space_done();
  public:
  void unsafe_arena_set_allocated_ext4_ext_remove_space_done(
      ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done);
  ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* unsafe_arena_release_ext4_ext_remove_space_done();
  // .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
  bool has_ext4_ext_rm_idx() const;
  private:
  bool _internal_has_ext4_ext_rm_idx() const;

  public:
  void clear_ext4_ext_rm_idx() ;
  const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& ext4_ext_rm_idx() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* release_ext4_ext_rm_idx();
  ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* mutable_ext4_ext_rm_idx();
  void set_allocated_ext4_ext_rm_idx(::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx);
  private:
  const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& _internal_ext4_ext_rm_idx() const;
  ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* _internal_mutable_ext4_ext_rm_idx();
  public:
  void unsafe_arena_set_allocated_ext4_ext_rm_idx(
      ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx);
  ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* unsafe_arena_release_ext4_ext_rm_idx();
  // .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
  bool has_ext4_ext_rm_leaf() const;
  private:
  bool _internal_has_ext4_ext_rm_leaf() const;

  public:
  void clear_ext4_ext_rm_leaf() ;
  const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& ext4_ext_rm_leaf() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* release_ext4_ext_rm_leaf();
  ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* mutable_ext4_ext_rm_leaf();
  void set_allocated_ext4_ext_rm_leaf(::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf);
  private:
  const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& _internal_ext4_ext_rm_leaf() const;
  ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* _internal_mutable_ext4_ext_rm_leaf();
  public:
  void unsafe_arena_set_allocated_ext4_ext_rm_leaf(
      ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf);
  ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* unsafe_arena_release_ext4_ext_rm_leaf();
  // .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
  bool has_ext4_ext_show_extent() const;
  private:
  bool _internal_has_ext4_ext_show_extent() const;

  public:
  void clear_ext4_ext_show_extent() ;
  const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& ext4_ext_show_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* release_ext4_ext_show_extent();
  ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* mutable_ext4_ext_show_extent();
  void set_allocated_ext4_ext_show_extent(::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent);
  private:
  const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& _internal_ext4_ext_show_extent() const;
  ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* _internal_mutable_ext4_ext_show_extent();
  public:
  void unsafe_arena_set_allocated_ext4_ext_show_extent(
      ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent);
  ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* unsafe_arena_release_ext4_ext_show_extent();
  // .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
  bool has_ext4_fallocate_enter() const;
  private:
  bool _internal_has_ext4_fallocate_enter() const;

  public:
  void clear_ext4_fallocate_enter() ;
  const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& ext4_fallocate_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4FallocateEnterFtraceEvent* release_ext4_fallocate_enter();
  ::perfetto::protos::Ext4FallocateEnterFtraceEvent* mutable_ext4_fallocate_enter();
  void set_allocated_ext4_fallocate_enter(::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter);
  private:
  const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& _internal_ext4_fallocate_enter() const;
  ::perfetto::protos::Ext4FallocateEnterFtraceEvent* _internal_mutable_ext4_fallocate_enter();
  public:
  void unsafe_arena_set_allocated_ext4_fallocate_enter(
      ::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter);
  ::perfetto::protos::Ext4FallocateEnterFtraceEvent* unsafe_arena_release_ext4_fallocate_enter();
  // .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
  bool has_ext4_fallocate_exit() const;
  private:
  bool _internal_has_ext4_fallocate_exit() const;

  public:
  void clear_ext4_fallocate_exit() ;
  const ::perfetto::protos::Ext4FallocateExitFtraceEvent& ext4_fallocate_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4FallocateExitFtraceEvent* release_ext4_fallocate_exit();
  ::perfetto::protos::Ext4FallocateExitFtraceEvent* mutable_ext4_fallocate_exit();
  void set_allocated_ext4_fallocate_exit(::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit);
  private:
  const ::perfetto::protos::Ext4FallocateExitFtraceEvent& _internal_ext4_fallocate_exit() const;
  ::perfetto::protos::Ext4FallocateExitFtraceEvent* _internal_mutable_ext4_fallocate_exit();
  public:
  void unsafe_arena_set_allocated_ext4_fallocate_exit(
      ::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit);
  ::perfetto::protos::Ext4FallocateExitFtraceEvent* unsafe_arena_release_ext4_fallocate_exit();
  // .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
  bool has_ext4_find_delalloc_range() const;
  private:
  bool _internal_has_ext4_find_delalloc_range() const;

  public:
  void clear_ext4_find_delalloc_range() ;
  const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& ext4_find_delalloc_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* release_ext4_find_delalloc_range();
  ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* mutable_ext4_find_delalloc_range();
  void set_allocated_ext4_find_delalloc_range(::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range);
  private:
  const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& _internal_ext4_find_delalloc_range() const;
  ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* _internal_mutable_ext4_find_delalloc_range();
  public:
  void unsafe_arena_set_allocated_ext4_find_delalloc_range(
      ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range);
  ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* unsafe_arena_release_ext4_find_delalloc_range();
  // .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
  bool has_ext4_forget() const;
  private:
  bool _internal_has_ext4_forget() const;

  public:
  void clear_ext4_forget() ;
  const ::perfetto::protos::Ext4ForgetFtraceEvent& ext4_forget() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ForgetFtraceEvent* release_ext4_forget();
  ::perfetto::protos::Ext4ForgetFtraceEvent* mutable_ext4_forget();
  void set_allocated_ext4_forget(::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget);
  private:
  const ::perfetto::protos::Ext4ForgetFtraceEvent& _internal_ext4_forget() const;
  ::perfetto::protos::Ext4ForgetFtraceEvent* _internal_mutable_ext4_forget();
  public:
  void unsafe_arena_set_allocated_ext4_forget(
      ::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget);
  ::perfetto::protos::Ext4ForgetFtraceEvent* unsafe_arena_release_ext4_forget();
  // .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
  bool has_ext4_free_blocks() const;
  private:
  bool _internal_has_ext4_free_blocks() const;

  public:
  void clear_ext4_free_blocks() ;
  const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& ext4_free_blocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4FreeBlocksFtraceEvent* release_ext4_free_blocks();
  ::perfetto::protos::Ext4FreeBlocksFtraceEvent* mutable_ext4_free_blocks();
  void set_allocated_ext4_free_blocks(::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks);
  private:
  const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& _internal_ext4_free_blocks() const;
  ::perfetto::protos::Ext4FreeBlocksFtraceEvent* _internal_mutable_ext4_free_blocks();
  public:
  void unsafe_arena_set_allocated_ext4_free_blocks(
      ::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks);
  ::perfetto::protos::Ext4FreeBlocksFtraceEvent* unsafe_arena_release_ext4_free_blocks();
  // .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
  bool has_ext4_free_inode() const;
  private:
  bool _internal_has_ext4_free_inode() const;

  public:
  void clear_ext4_free_inode() ;
  const ::perfetto::protos::Ext4FreeInodeFtraceEvent& ext4_free_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4FreeInodeFtraceEvent* release_ext4_free_inode();
  ::perfetto::protos::Ext4FreeInodeFtraceEvent* mutable_ext4_free_inode();
  void set_allocated_ext4_free_inode(::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode);
  private:
  const ::perfetto::protos::Ext4FreeInodeFtraceEvent& _internal_ext4_free_inode() const;
  ::perfetto::protos::Ext4FreeInodeFtraceEvent* _internal_mutable_ext4_free_inode();
  public:
  void unsafe_arena_set_allocated_ext4_free_inode(
      ::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode);
  ::perfetto::protos::Ext4FreeInodeFtraceEvent* unsafe_arena_release_ext4_free_inode();
  // .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
  bool has_ext4_get_implied_cluster_alloc_exit() const;
  private:
  bool _internal_has_ext4_get_implied_cluster_alloc_exit() const;

  public:
  void clear_ext4_get_implied_cluster_alloc_exit() ;
  const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& ext4_get_implied_cluster_alloc_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* release_ext4_get_implied_cluster_alloc_exit();
  ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* mutable_ext4_get_implied_cluster_alloc_exit();
  void set_allocated_ext4_get_implied_cluster_alloc_exit(::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit);
  private:
  const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& _internal_ext4_get_implied_cluster_alloc_exit() const;
  ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* _internal_mutable_ext4_get_implied_cluster_alloc_exit();
  public:
  void unsafe_arena_set_allocated_ext4_get_implied_cluster_alloc_exit(
      ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit);
  ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* unsafe_arena_release_ext4_get_implied_cluster_alloc_exit();
  // .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
  bool has_ext4_get_reserved_cluster_alloc() const;
  private:
  bool _internal_has_ext4_get_reserved_cluster_alloc() const;

  public:
  void clear_ext4_get_reserved_cluster_alloc() ;
  const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& ext4_get_reserved_cluster_alloc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* release_ext4_get_reserved_cluster_alloc();
  ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* mutable_ext4_get_reserved_cluster_alloc();
  void set_allocated_ext4_get_reserved_cluster_alloc(::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc);
  private:
  const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& _internal_ext4_get_reserved_cluster_alloc() const;
  ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* _internal_mutable_ext4_get_reserved_cluster_alloc();
  public:
  void unsafe_arena_set_allocated_ext4_get_reserved_cluster_alloc(
      ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc);
  ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* unsafe_arena_release_ext4_get_reserved_cluster_alloc();
  // .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
  bool has_ext4_ind_map_blocks_enter() const;
  private:
  bool _internal_has_ext4_ind_map_blocks_enter() const;

  public:
  void clear_ext4_ind_map_blocks_enter() ;
  const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& ext4_ind_map_blocks_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* release_ext4_ind_map_blocks_enter();
  ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* mutable_ext4_ind_map_blocks_enter();
  void set_allocated_ext4_ind_map_blocks_enter(::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter);
  private:
  const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& _internal_ext4_ind_map_blocks_enter() const;
  ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* _internal_mutable_ext4_ind_map_blocks_enter();
  public:
  void unsafe_arena_set_allocated_ext4_ind_map_blocks_enter(
      ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter);
  ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* unsafe_arena_release_ext4_ind_map_blocks_enter();
  // .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
  bool has_ext4_ind_map_blocks_exit() const;
  private:
  bool _internal_has_ext4_ind_map_blocks_exit() const;

  public:
  void clear_ext4_ind_map_blocks_exit() ;
  const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& ext4_ind_map_blocks_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* release_ext4_ind_map_blocks_exit();
  ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* mutable_ext4_ind_map_blocks_exit();
  void set_allocated_ext4_ind_map_blocks_exit(::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit);
  private:
  const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& _internal_ext4_ind_map_blocks_exit() const;
  ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* _internal_mutable_ext4_ind_map_blocks_exit();
  public:
  void unsafe_arena_set_allocated_ext4_ind_map_blocks_exit(
      ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit);
  ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* unsafe_arena_release_ext4_ind_map_blocks_exit();
  // .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
  bool has_ext4_insert_range() const;
  private:
  bool _internal_has_ext4_insert_range() const;

  public:
  void clear_ext4_insert_range() ;
  const ::perfetto::protos::Ext4InsertRangeFtraceEvent& ext4_insert_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4InsertRangeFtraceEvent* release_ext4_insert_range();
  ::perfetto::protos::Ext4InsertRangeFtraceEvent* mutable_ext4_insert_range();
  void set_allocated_ext4_insert_range(::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range);
  private:
  const ::perfetto::protos::Ext4InsertRangeFtraceEvent& _internal_ext4_insert_range() const;
  ::perfetto::protos::Ext4InsertRangeFtraceEvent* _internal_mutable_ext4_insert_range();
  public:
  void unsafe_arena_set_allocated_ext4_insert_range(
      ::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range);
  ::perfetto::protos::Ext4InsertRangeFtraceEvent* unsafe_arena_release_ext4_insert_range();
  // .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
  bool has_ext4_invalidatepage() const;
  private:
  bool _internal_has_ext4_invalidatepage() const;

  public:
  void clear_ext4_invalidatepage() ;
  const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& ext4_invalidatepage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4InvalidatepageFtraceEvent* release_ext4_invalidatepage();
  ::perfetto::protos::Ext4InvalidatepageFtraceEvent* mutable_ext4_invalidatepage();
  void set_allocated_ext4_invalidatepage(::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage);
  private:
  const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& _internal_ext4_invalidatepage() const;
  ::perfetto::protos::Ext4InvalidatepageFtraceEvent* _internal_mutable_ext4_invalidatepage();
  public:
  void unsafe_arena_set_allocated_ext4_invalidatepage(
      ::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage);
  ::perfetto::protos::Ext4InvalidatepageFtraceEvent* unsafe_arena_release_ext4_invalidatepage();
  // .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
  bool has_ext4_journal_start() const;
  private:
  bool _internal_has_ext4_journal_start() const;

  public:
  void clear_ext4_journal_start() ;
  const ::perfetto::protos::Ext4JournalStartFtraceEvent& ext4_journal_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4JournalStartFtraceEvent* release_ext4_journal_start();
  ::perfetto::protos::Ext4JournalStartFtraceEvent* mutable_ext4_journal_start();
  void set_allocated_ext4_journal_start(::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start);
  private:
  const ::perfetto::protos::Ext4JournalStartFtraceEvent& _internal_ext4_journal_start() const;
  ::perfetto::protos::Ext4JournalStartFtraceEvent* _internal_mutable_ext4_journal_start();
  public:
  void unsafe_arena_set_allocated_ext4_journal_start(
      ::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start);
  ::perfetto::protos::Ext4JournalStartFtraceEvent* unsafe_arena_release_ext4_journal_start();
  // .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
  bool has_ext4_journal_start_reserved() const;
  private:
  bool _internal_has_ext4_journal_start_reserved() const;

  public:
  void clear_ext4_journal_start_reserved() ;
  const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& ext4_journal_start_reserved() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* release_ext4_journal_start_reserved();
  ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* mutable_ext4_journal_start_reserved();
  void set_allocated_ext4_journal_start_reserved(::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved);
  private:
  const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& _internal_ext4_journal_start_reserved() const;
  ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* _internal_mutable_ext4_journal_start_reserved();
  public:
  void unsafe_arena_set_allocated_ext4_journal_start_reserved(
      ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved);
  ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* unsafe_arena_release_ext4_journal_start_reserved();
  // .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
  bool has_ext4_journalled_invalidatepage() const;
  private:
  bool _internal_has_ext4_journalled_invalidatepage() const;

  public:
  void clear_ext4_journalled_invalidatepage() ;
  const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& ext4_journalled_invalidatepage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* release_ext4_journalled_invalidatepage();
  ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* mutable_ext4_journalled_invalidatepage();
  void set_allocated_ext4_journalled_invalidatepage(::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage);
  private:
  const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& _internal_ext4_journalled_invalidatepage() const;
  ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* _internal_mutable_ext4_journalled_invalidatepage();
  public:
  void unsafe_arena_set_allocated_ext4_journalled_invalidatepage(
      ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage);
  ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* unsafe_arena_release_ext4_journalled_invalidatepage();
  // .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
  bool has_ext4_journalled_write_end() const;
  private:
  bool _internal_has_ext4_journalled_write_end() const;

  public:
  void clear_ext4_journalled_write_end() ;
  const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& ext4_journalled_write_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* release_ext4_journalled_write_end();
  ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* mutable_ext4_journalled_write_end();
  void set_allocated_ext4_journalled_write_end(::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end);
  private:
  const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& _internal_ext4_journalled_write_end() const;
  ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* _internal_mutable_ext4_journalled_write_end();
  public:
  void unsafe_arena_set_allocated_ext4_journalled_write_end(
      ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end);
  ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* unsafe_arena_release_ext4_journalled_write_end();
  // .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
  bool has_ext4_load_inode() const;
  private:
  bool _internal_has_ext4_load_inode() const;

  public:
  void clear_ext4_load_inode() ;
  const ::perfetto::protos::Ext4LoadInodeFtraceEvent& ext4_load_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4LoadInodeFtraceEvent* release_ext4_load_inode();
  ::perfetto::protos::Ext4LoadInodeFtraceEvent* mutable_ext4_load_inode();
  void set_allocated_ext4_load_inode(::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode);
  private:
  const ::perfetto::protos::Ext4LoadInodeFtraceEvent& _internal_ext4_load_inode() const;
  ::perfetto::protos::Ext4LoadInodeFtraceEvent* _internal_mutable_ext4_load_inode();
  public:
  void unsafe_arena_set_allocated_ext4_load_inode(
      ::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode);
  ::perfetto::protos::Ext4LoadInodeFtraceEvent* unsafe_arena_release_ext4_load_inode();
  // .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
  bool has_ext4_load_inode_bitmap() const;
  private:
  bool _internal_has_ext4_load_inode_bitmap() const;

  public:
  void clear_ext4_load_inode_bitmap() ;
  const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& ext4_load_inode_bitmap() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* release_ext4_load_inode_bitmap();
  ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* mutable_ext4_load_inode_bitmap();
  void set_allocated_ext4_load_inode_bitmap(::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap);
  private:
  const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& _internal_ext4_load_inode_bitmap() const;
  ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* _internal_mutable_ext4_load_inode_bitmap();
  public:
  void unsafe_arena_set_allocated_ext4_load_inode_bitmap(
      ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap);
  ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* unsafe_arena_release_ext4_load_inode_bitmap();
  // .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
  bool has_ext4_mark_inode_dirty() const;
  private:
  bool _internal_has_ext4_mark_inode_dirty() const;

  public:
  void clear_ext4_mark_inode_dirty() ;
  const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& ext4_mark_inode_dirty() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* release_ext4_mark_inode_dirty();
  ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* mutable_ext4_mark_inode_dirty();
  void set_allocated_ext4_mark_inode_dirty(::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty);
  private:
  const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& _internal_ext4_mark_inode_dirty() const;
  ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* _internal_mutable_ext4_mark_inode_dirty();
  public:
  void unsafe_arena_set_allocated_ext4_mark_inode_dirty(
      ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty);
  ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* unsafe_arena_release_ext4_mark_inode_dirty();
  // .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
  bool has_ext4_mb_bitmap_load() const;
  private:
  bool _internal_has_ext4_mb_bitmap_load() const;

  public:
  void clear_ext4_mb_bitmap_load() ;
  const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& ext4_mb_bitmap_load() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* release_ext4_mb_bitmap_load();
  ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* mutable_ext4_mb_bitmap_load();
  void set_allocated_ext4_mb_bitmap_load(::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load);
  private:
  const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& _internal_ext4_mb_bitmap_load() const;
  ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* _internal_mutable_ext4_mb_bitmap_load();
  public:
  void unsafe_arena_set_allocated_ext4_mb_bitmap_load(
      ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load);
  ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* unsafe_arena_release_ext4_mb_bitmap_load();
  // .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
  bool has_ext4_mb_buddy_bitmap_load() const;
  private:
  bool _internal_has_ext4_mb_buddy_bitmap_load() const;

  public:
  void clear_ext4_mb_buddy_bitmap_load() ;
  const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& ext4_mb_buddy_bitmap_load() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* release_ext4_mb_buddy_bitmap_load();
  ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* mutable_ext4_mb_buddy_bitmap_load();
  void set_allocated_ext4_mb_buddy_bitmap_load(::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load);
  private:
  const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& _internal_ext4_mb_buddy_bitmap_load() const;
  ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* _internal_mutable_ext4_mb_buddy_bitmap_load();
  public:
  void unsafe_arena_set_allocated_ext4_mb_buddy_bitmap_load(
      ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load);
  ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* unsafe_arena_release_ext4_mb_buddy_bitmap_load();
  // .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
  bool has_ext4_mb_discard_preallocations() const;
  private:
  bool _internal_has_ext4_mb_discard_preallocations() const;

  public:
  void clear_ext4_mb_discard_preallocations() ;
  const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& ext4_mb_discard_preallocations() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* release_ext4_mb_discard_preallocations();
  ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* mutable_ext4_mb_discard_preallocations();
  void set_allocated_ext4_mb_discard_preallocations(::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations);
  private:
  const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& _internal_ext4_mb_discard_preallocations() const;
  ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* _internal_mutable_ext4_mb_discard_preallocations();
  public:
  void unsafe_arena_set_allocated_ext4_mb_discard_preallocations(
      ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations);
  ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* unsafe_arena_release_ext4_mb_discard_preallocations();
  // .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
  bool has_ext4_mb_new_group_pa() const;
  private:
  bool _internal_has_ext4_mb_new_group_pa() const;

  public:
  void clear_ext4_mb_new_group_pa() ;
  const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& ext4_mb_new_group_pa() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* release_ext4_mb_new_group_pa();
  ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* mutable_ext4_mb_new_group_pa();
  void set_allocated_ext4_mb_new_group_pa(::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa);
  private:
  const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& _internal_ext4_mb_new_group_pa() const;
  ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* _internal_mutable_ext4_mb_new_group_pa();
  public:
  void unsafe_arena_set_allocated_ext4_mb_new_group_pa(
      ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa);
  ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* unsafe_arena_release_ext4_mb_new_group_pa();
  // .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
  bool has_ext4_mb_new_inode_pa() const;
  private:
  bool _internal_has_ext4_mb_new_inode_pa() const;

  public:
  void clear_ext4_mb_new_inode_pa() ;
  const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& ext4_mb_new_inode_pa() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* release_ext4_mb_new_inode_pa();
  ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* mutable_ext4_mb_new_inode_pa();
  void set_allocated_ext4_mb_new_inode_pa(::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa);
  private:
  const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& _internal_ext4_mb_new_inode_pa() const;
  ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* _internal_mutable_ext4_mb_new_inode_pa();
  public:
  void unsafe_arena_set_allocated_ext4_mb_new_inode_pa(
      ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa);
  ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* unsafe_arena_release_ext4_mb_new_inode_pa();
  // .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
  bool has_ext4_mb_release_group_pa() const;
  private:
  bool _internal_has_ext4_mb_release_group_pa() const;

  public:
  void clear_ext4_mb_release_group_pa() ;
  const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& ext4_mb_release_group_pa() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* release_ext4_mb_release_group_pa();
  ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* mutable_ext4_mb_release_group_pa();
  void set_allocated_ext4_mb_release_group_pa(::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa);
  private:
  const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& _internal_ext4_mb_release_group_pa() const;
  ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* _internal_mutable_ext4_mb_release_group_pa();
  public:
  void unsafe_arena_set_allocated_ext4_mb_release_group_pa(
      ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa);
  ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* unsafe_arena_release_ext4_mb_release_group_pa();
  // .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
  bool has_ext4_mb_release_inode_pa() const;
  private:
  bool _internal_has_ext4_mb_release_inode_pa() const;

  public:
  void clear_ext4_mb_release_inode_pa() ;
  const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& ext4_mb_release_inode_pa() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* release_ext4_mb_release_inode_pa();
  ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* mutable_ext4_mb_release_inode_pa();
  void set_allocated_ext4_mb_release_inode_pa(::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa);
  private:
  const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& _internal_ext4_mb_release_inode_pa() const;
  ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* _internal_mutable_ext4_mb_release_inode_pa();
  public:
  void unsafe_arena_set_allocated_ext4_mb_release_inode_pa(
      ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa);
  ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* unsafe_arena_release_ext4_mb_release_inode_pa();
  // .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
  bool has_ext4_mballoc_alloc() const;
  private:
  bool _internal_has_ext4_mballoc_alloc() const;

  public:
  void clear_ext4_mballoc_alloc() ;
  const ::perfetto::protos::Ext4MballocAllocFtraceEvent& ext4_mballoc_alloc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MballocAllocFtraceEvent* release_ext4_mballoc_alloc();
  ::perfetto::protos::Ext4MballocAllocFtraceEvent* mutable_ext4_mballoc_alloc();
  void set_allocated_ext4_mballoc_alloc(::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc);
  private:
  const ::perfetto::protos::Ext4MballocAllocFtraceEvent& _internal_ext4_mballoc_alloc() const;
  ::perfetto::protos::Ext4MballocAllocFtraceEvent* _internal_mutable_ext4_mballoc_alloc();
  public:
  void unsafe_arena_set_allocated_ext4_mballoc_alloc(
      ::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc);
  ::perfetto::protos::Ext4MballocAllocFtraceEvent* unsafe_arena_release_ext4_mballoc_alloc();
  // .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
  bool has_ext4_mballoc_discard() const;
  private:
  bool _internal_has_ext4_mballoc_discard() const;

  public:
  void clear_ext4_mballoc_discard() ;
  const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& ext4_mballoc_discard() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MballocDiscardFtraceEvent* release_ext4_mballoc_discard();
  ::perfetto::protos::Ext4MballocDiscardFtraceEvent* mutable_ext4_mballoc_discard();
  void set_allocated_ext4_mballoc_discard(::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard);
  private:
  const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& _internal_ext4_mballoc_discard() const;
  ::perfetto::protos::Ext4MballocDiscardFtraceEvent* _internal_mutable_ext4_mballoc_discard();
  public:
  void unsafe_arena_set_allocated_ext4_mballoc_discard(
      ::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard);
  ::perfetto::protos::Ext4MballocDiscardFtraceEvent* unsafe_arena_release_ext4_mballoc_discard();
  // .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
  bool has_ext4_mballoc_free() const;
  private:
  bool _internal_has_ext4_mballoc_free() const;

  public:
  void clear_ext4_mballoc_free() ;
  const ::perfetto::protos::Ext4MballocFreeFtraceEvent& ext4_mballoc_free() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MballocFreeFtraceEvent* release_ext4_mballoc_free();
  ::perfetto::protos::Ext4MballocFreeFtraceEvent* mutable_ext4_mballoc_free();
  void set_allocated_ext4_mballoc_free(::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free);
  private:
  const ::perfetto::protos::Ext4MballocFreeFtraceEvent& _internal_ext4_mballoc_free() const;
  ::perfetto::protos::Ext4MballocFreeFtraceEvent* _internal_mutable_ext4_mballoc_free();
  public:
  void unsafe_arena_set_allocated_ext4_mballoc_free(
      ::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free);
  ::perfetto::protos::Ext4MballocFreeFtraceEvent* unsafe_arena_release_ext4_mballoc_free();
  // .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
  bool has_ext4_mballoc_prealloc() const;
  private:
  bool _internal_has_ext4_mballoc_prealloc() const;

  public:
  void clear_ext4_mballoc_prealloc() ;
  const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& ext4_mballoc_prealloc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4MballocPreallocFtraceEvent* release_ext4_mballoc_prealloc();
  ::perfetto::protos::Ext4MballocPreallocFtraceEvent* mutable_ext4_mballoc_prealloc();
  void set_allocated_ext4_mballoc_prealloc(::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc);
  private:
  const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& _internal_ext4_mballoc_prealloc() const;
  ::perfetto::protos::Ext4MballocPreallocFtraceEvent* _internal_mutable_ext4_mballoc_prealloc();
  public:
  void unsafe_arena_set_allocated_ext4_mballoc_prealloc(
      ::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc);
  ::perfetto::protos::Ext4MballocPreallocFtraceEvent* unsafe_arena_release_ext4_mballoc_prealloc();
  // .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
  bool has_ext4_other_inode_update_time() const;
  private:
  bool _internal_has_ext4_other_inode_update_time() const;

  public:
  void clear_ext4_other_inode_update_time() ;
  const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& ext4_other_inode_update_time() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* release_ext4_other_inode_update_time();
  ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* mutable_ext4_other_inode_update_time();
  void set_allocated_ext4_other_inode_update_time(::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time);
  private:
  const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& _internal_ext4_other_inode_update_time() const;
  ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* _internal_mutable_ext4_other_inode_update_time();
  public:
  void unsafe_arena_set_allocated_ext4_other_inode_update_time(
      ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time);
  ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* unsafe_arena_release_ext4_other_inode_update_time();
  // .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
  bool has_ext4_punch_hole() const;
  private:
  bool _internal_has_ext4_punch_hole() const;

  public:
  void clear_ext4_punch_hole() ;
  const ::perfetto::protos::Ext4PunchHoleFtraceEvent& ext4_punch_hole() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4PunchHoleFtraceEvent* release_ext4_punch_hole();
  ::perfetto::protos::Ext4PunchHoleFtraceEvent* mutable_ext4_punch_hole();
  void set_allocated_ext4_punch_hole(::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole);
  private:
  const ::perfetto::protos::Ext4PunchHoleFtraceEvent& _internal_ext4_punch_hole() const;
  ::perfetto::protos::Ext4PunchHoleFtraceEvent* _internal_mutable_ext4_punch_hole();
  public:
  void unsafe_arena_set_allocated_ext4_punch_hole(
      ::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole);
  ::perfetto::protos::Ext4PunchHoleFtraceEvent* unsafe_arena_release_ext4_punch_hole();
  // .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
  bool has_ext4_read_block_bitmap_load() const;
  private:
  bool _internal_has_ext4_read_block_bitmap_load() const;

  public:
  void clear_ext4_read_block_bitmap_load() ;
  const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& ext4_read_block_bitmap_load() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* release_ext4_read_block_bitmap_load();
  ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* mutable_ext4_read_block_bitmap_load();
  void set_allocated_ext4_read_block_bitmap_load(::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load);
  private:
  const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& _internal_ext4_read_block_bitmap_load() const;
  ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* _internal_mutable_ext4_read_block_bitmap_load();
  public:
  void unsafe_arena_set_allocated_ext4_read_block_bitmap_load(
      ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load);
  ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* unsafe_arena_release_ext4_read_block_bitmap_load();
  // .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
  bool has_ext4_readpage() const;
  private:
  bool _internal_has_ext4_readpage() const;

  public:
  void clear_ext4_readpage() ;
  const ::perfetto::protos::Ext4ReadpageFtraceEvent& ext4_readpage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ReadpageFtraceEvent* release_ext4_readpage();
  ::perfetto::protos::Ext4ReadpageFtraceEvent* mutable_ext4_readpage();
  void set_allocated_ext4_readpage(::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage);
  private:
  const ::perfetto::protos::Ext4ReadpageFtraceEvent& _internal_ext4_readpage() const;
  ::perfetto::protos::Ext4ReadpageFtraceEvent* _internal_mutable_ext4_readpage();
  public:
  void unsafe_arena_set_allocated_ext4_readpage(
      ::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage);
  ::perfetto::protos::Ext4ReadpageFtraceEvent* unsafe_arena_release_ext4_readpage();
  // .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
  bool has_ext4_releasepage() const;
  private:
  bool _internal_has_ext4_releasepage() const;

  public:
  void clear_ext4_releasepage() ;
  const ::perfetto::protos::Ext4ReleasepageFtraceEvent& ext4_releasepage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ReleasepageFtraceEvent* release_ext4_releasepage();
  ::perfetto::protos::Ext4ReleasepageFtraceEvent* mutable_ext4_releasepage();
  void set_allocated_ext4_releasepage(::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage);
  private:
  const ::perfetto::protos::Ext4ReleasepageFtraceEvent& _internal_ext4_releasepage() const;
  ::perfetto::protos::Ext4ReleasepageFtraceEvent* _internal_mutable_ext4_releasepage();
  public:
  void unsafe_arena_set_allocated_ext4_releasepage(
      ::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage);
  ::perfetto::protos::Ext4ReleasepageFtraceEvent* unsafe_arena_release_ext4_releasepage();
  // .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
  bool has_ext4_remove_blocks() const;
  private:
  bool _internal_has_ext4_remove_blocks() const;

  public:
  void clear_ext4_remove_blocks() ;
  const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& ext4_remove_blocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* release_ext4_remove_blocks();
  ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* mutable_ext4_remove_blocks();
  void set_allocated_ext4_remove_blocks(::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks);
  private:
  const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& _internal_ext4_remove_blocks() const;
  ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* _internal_mutable_ext4_remove_blocks();
  public:
  void unsafe_arena_set_allocated_ext4_remove_blocks(
      ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks);
  ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* unsafe_arena_release_ext4_remove_blocks();
  // .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
  bool has_ext4_request_blocks() const;
  private:
  bool _internal_has_ext4_request_blocks() const;

  public:
  void clear_ext4_request_blocks() ;
  const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& ext4_request_blocks() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4RequestBlocksFtraceEvent* release_ext4_request_blocks();
  ::perfetto::protos::Ext4RequestBlocksFtraceEvent* mutable_ext4_request_blocks();
  void set_allocated_ext4_request_blocks(::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks);
  private:
  const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& _internal_ext4_request_blocks() const;
  ::perfetto::protos::Ext4RequestBlocksFtraceEvent* _internal_mutable_ext4_request_blocks();
  public:
  void unsafe_arena_set_allocated_ext4_request_blocks(
      ::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks);
  ::perfetto::protos::Ext4RequestBlocksFtraceEvent* unsafe_arena_release_ext4_request_blocks();
  // .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
  bool has_ext4_request_inode() const;
  private:
  bool _internal_has_ext4_request_inode() const;

  public:
  void clear_ext4_request_inode() ;
  const ::perfetto::protos::Ext4RequestInodeFtraceEvent& ext4_request_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4RequestInodeFtraceEvent* release_ext4_request_inode();
  ::perfetto::protos::Ext4RequestInodeFtraceEvent* mutable_ext4_request_inode();
  void set_allocated_ext4_request_inode(::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode);
  private:
  const ::perfetto::protos::Ext4RequestInodeFtraceEvent& _internal_ext4_request_inode() const;
  ::perfetto::protos::Ext4RequestInodeFtraceEvent* _internal_mutable_ext4_request_inode();
  public:
  void unsafe_arena_set_allocated_ext4_request_inode(
      ::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode);
  ::perfetto::protos::Ext4RequestInodeFtraceEvent* unsafe_arena_release_ext4_request_inode();
  // .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
  bool has_ext4_sync_fs() const;
  private:
  bool _internal_has_ext4_sync_fs() const;

  public:
  void clear_ext4_sync_fs() ;
  const ::perfetto::protos::Ext4SyncFsFtraceEvent& ext4_sync_fs() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4SyncFsFtraceEvent* release_ext4_sync_fs();
  ::perfetto::protos::Ext4SyncFsFtraceEvent* mutable_ext4_sync_fs();
  void set_allocated_ext4_sync_fs(::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs);
  private:
  const ::perfetto::protos::Ext4SyncFsFtraceEvent& _internal_ext4_sync_fs() const;
  ::perfetto::protos::Ext4SyncFsFtraceEvent* _internal_mutable_ext4_sync_fs();
  public:
  void unsafe_arena_set_allocated_ext4_sync_fs(
      ::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs);
  ::perfetto::protos::Ext4SyncFsFtraceEvent* unsafe_arena_release_ext4_sync_fs();
  // .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
  bool has_ext4_trim_all_free() const;
  private:
  bool _internal_has_ext4_trim_all_free() const;

  public:
  void clear_ext4_trim_all_free() ;
  const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& ext4_trim_all_free() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* release_ext4_trim_all_free();
  ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* mutable_ext4_trim_all_free();
  void set_allocated_ext4_trim_all_free(::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free);
  private:
  const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& _internal_ext4_trim_all_free() const;
  ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* _internal_mutable_ext4_trim_all_free();
  public:
  void unsafe_arena_set_allocated_ext4_trim_all_free(
      ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free);
  ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* unsafe_arena_release_ext4_trim_all_free();
  // .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
  bool has_ext4_trim_extent() const;
  private:
  bool _internal_has_ext4_trim_extent() const;

  public:
  void clear_ext4_trim_extent() ;
  const ::perfetto::protos::Ext4TrimExtentFtraceEvent& ext4_trim_extent() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4TrimExtentFtraceEvent* release_ext4_trim_extent();
  ::perfetto::protos::Ext4TrimExtentFtraceEvent* mutable_ext4_trim_extent();
  void set_allocated_ext4_trim_extent(::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent);
  private:
  const ::perfetto::protos::Ext4TrimExtentFtraceEvent& _internal_ext4_trim_extent() const;
  ::perfetto::protos::Ext4TrimExtentFtraceEvent* _internal_mutable_ext4_trim_extent();
  public:
  void unsafe_arena_set_allocated_ext4_trim_extent(
      ::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent);
  ::perfetto::protos::Ext4TrimExtentFtraceEvent* unsafe_arena_release_ext4_trim_extent();
  // .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
  bool has_ext4_truncate_enter() const;
  private:
  bool _internal_has_ext4_truncate_enter() const;

  public:
  void clear_ext4_truncate_enter() ;
  const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& ext4_truncate_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4TruncateEnterFtraceEvent* release_ext4_truncate_enter();
  ::perfetto::protos::Ext4TruncateEnterFtraceEvent* mutable_ext4_truncate_enter();
  void set_allocated_ext4_truncate_enter(::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter);
  private:
  const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& _internal_ext4_truncate_enter() const;
  ::perfetto::protos::Ext4TruncateEnterFtraceEvent* _internal_mutable_ext4_truncate_enter();
  public:
  void unsafe_arena_set_allocated_ext4_truncate_enter(
      ::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter);
  ::perfetto::protos::Ext4TruncateEnterFtraceEvent* unsafe_arena_release_ext4_truncate_enter();
  // .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
  bool has_ext4_truncate_exit() const;
  private:
  bool _internal_has_ext4_truncate_exit() const;

  public:
  void clear_ext4_truncate_exit() ;
  const ::perfetto::protos::Ext4TruncateExitFtraceEvent& ext4_truncate_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4TruncateExitFtraceEvent* release_ext4_truncate_exit();
  ::perfetto::protos::Ext4TruncateExitFtraceEvent* mutable_ext4_truncate_exit();
  void set_allocated_ext4_truncate_exit(::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit);
  private:
  const ::perfetto::protos::Ext4TruncateExitFtraceEvent& _internal_ext4_truncate_exit() const;
  ::perfetto::protos::Ext4TruncateExitFtraceEvent* _internal_mutable_ext4_truncate_exit();
  public:
  void unsafe_arena_set_allocated_ext4_truncate_exit(
      ::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit);
  ::perfetto::protos::Ext4TruncateExitFtraceEvent* unsafe_arena_release_ext4_truncate_exit();
  // .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
  bool has_ext4_unlink_enter() const;
  private:
  bool _internal_has_ext4_unlink_enter() const;

  public:
  void clear_ext4_unlink_enter() ;
  const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& ext4_unlink_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* release_ext4_unlink_enter();
  ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* mutable_ext4_unlink_enter();
  void set_allocated_ext4_unlink_enter(::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter);
  private:
  const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& _internal_ext4_unlink_enter() const;
  ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* _internal_mutable_ext4_unlink_enter();
  public:
  void unsafe_arena_set_allocated_ext4_unlink_enter(
      ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter);
  ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* unsafe_arena_release_ext4_unlink_enter();
  // .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
  bool has_ext4_unlink_exit() const;
  private:
  bool _internal_has_ext4_unlink_exit() const;

  public:
  void clear_ext4_unlink_exit() ;
  const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& ext4_unlink_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4UnlinkExitFtraceEvent* release_ext4_unlink_exit();
  ::perfetto::protos::Ext4UnlinkExitFtraceEvent* mutable_ext4_unlink_exit();
  void set_allocated_ext4_unlink_exit(::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit);
  private:
  const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& _internal_ext4_unlink_exit() const;
  ::perfetto::protos::Ext4UnlinkExitFtraceEvent* _internal_mutable_ext4_unlink_exit();
  public:
  void unsafe_arena_set_allocated_ext4_unlink_exit(
      ::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit);
  ::perfetto::protos::Ext4UnlinkExitFtraceEvent* unsafe_arena_release_ext4_unlink_exit();
  // .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
  bool has_ext4_write_begin() const;
  private:
  bool _internal_has_ext4_write_begin() const;

  public:
  void clear_ext4_write_begin() ;
  const ::perfetto::protos::Ext4WriteBeginFtraceEvent& ext4_write_begin() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4WriteBeginFtraceEvent* release_ext4_write_begin();
  ::perfetto::protos::Ext4WriteBeginFtraceEvent* mutable_ext4_write_begin();
  void set_allocated_ext4_write_begin(::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin);
  private:
  const ::perfetto::protos::Ext4WriteBeginFtraceEvent& _internal_ext4_write_begin() const;
  ::perfetto::protos::Ext4WriteBeginFtraceEvent* _internal_mutable_ext4_write_begin();
  public:
  void unsafe_arena_set_allocated_ext4_write_begin(
      ::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin);
  ::perfetto::protos::Ext4WriteBeginFtraceEvent* unsafe_arena_release_ext4_write_begin();
  // .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
  bool has_ext4_write_end() const;
  private:
  bool _internal_has_ext4_write_end() const;

  public:
  void clear_ext4_write_end() ;
  const ::perfetto::protos::Ext4WriteEndFtraceEvent& ext4_write_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4WriteEndFtraceEvent* release_ext4_write_end();
  ::perfetto::protos::Ext4WriteEndFtraceEvent* mutable_ext4_write_end();
  void set_allocated_ext4_write_end(::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end);
  private:
  const ::perfetto::protos::Ext4WriteEndFtraceEvent& _internal_ext4_write_end() const;
  ::perfetto::protos::Ext4WriteEndFtraceEvent* _internal_mutable_ext4_write_end();
  public:
  void unsafe_arena_set_allocated_ext4_write_end(
      ::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end);
  ::perfetto::protos::Ext4WriteEndFtraceEvent* unsafe_arena_release_ext4_write_end();
  // .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
  bool has_ext4_writepage() const;
  private:
  bool _internal_has_ext4_writepage() const;

  public:
  void clear_ext4_writepage() ;
  const ::perfetto::protos::Ext4WritepageFtraceEvent& ext4_writepage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4WritepageFtraceEvent* release_ext4_writepage();
  ::perfetto::protos::Ext4WritepageFtraceEvent* mutable_ext4_writepage();
  void set_allocated_ext4_writepage(::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage);
  private:
  const ::perfetto::protos::Ext4WritepageFtraceEvent& _internal_ext4_writepage() const;
  ::perfetto::protos::Ext4WritepageFtraceEvent* _internal_mutable_ext4_writepage();
  public:
  void unsafe_arena_set_allocated_ext4_writepage(
      ::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage);
  ::perfetto::protos::Ext4WritepageFtraceEvent* unsafe_arena_release_ext4_writepage();
  // .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
  bool has_ext4_writepages() const;
  private:
  bool _internal_has_ext4_writepages() const;

  public:
  void clear_ext4_writepages() ;
  const ::perfetto::protos::Ext4WritepagesFtraceEvent& ext4_writepages() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4WritepagesFtraceEvent* release_ext4_writepages();
  ::perfetto::protos::Ext4WritepagesFtraceEvent* mutable_ext4_writepages();
  void set_allocated_ext4_writepages(::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages);
  private:
  const ::perfetto::protos::Ext4WritepagesFtraceEvent& _internal_ext4_writepages() const;
  ::perfetto::protos::Ext4WritepagesFtraceEvent* _internal_mutable_ext4_writepages();
  public:
  void unsafe_arena_set_allocated_ext4_writepages(
      ::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages);
  ::perfetto::protos::Ext4WritepagesFtraceEvent* unsafe_arena_release_ext4_writepages();
  // .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
  bool has_ext4_writepages_result() const;
  private:
  bool _internal_has_ext4_writepages_result() const;

  public:
  void clear_ext4_writepages_result() ;
  const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& ext4_writepages_result() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4WritepagesResultFtraceEvent* release_ext4_writepages_result();
  ::perfetto::protos::Ext4WritepagesResultFtraceEvent* mutable_ext4_writepages_result();
  void set_allocated_ext4_writepages_result(::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result);
  private:
  const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& _internal_ext4_writepages_result() const;
  ::perfetto::protos::Ext4WritepagesResultFtraceEvent* _internal_mutable_ext4_writepages_result();
  public:
  void unsafe_arena_set_allocated_ext4_writepages_result(
      ::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result);
  ::perfetto::protos::Ext4WritepagesResultFtraceEvent* unsafe_arena_release_ext4_writepages_result();
  // .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
  bool has_ext4_zero_range() const;
  private:
  bool _internal_has_ext4_zero_range() const;

  public:
  void clear_ext4_zero_range() ;
  const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& ext4_zero_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Ext4ZeroRangeFtraceEvent* release_ext4_zero_range();
  ::perfetto::protos::Ext4ZeroRangeFtraceEvent* mutable_ext4_zero_range();
  void set_allocated_ext4_zero_range(::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range);
  private:
  const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& _internal_ext4_zero_range() const;
  ::perfetto::protos::Ext4ZeroRangeFtraceEvent* _internal_mutable_ext4_zero_range();
  public:
  void unsafe_arena_set_allocated_ext4_zero_range(
      ::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range);
  ::perfetto::protos::Ext4ZeroRangeFtraceEvent* unsafe_arena_release_ext4_zero_range();
  // .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
  bool has_task_newtask() const;
  private:
  bool _internal_has_task_newtask() const;

  public:
  void clear_task_newtask() ;
  const ::perfetto::protos::TaskNewtaskFtraceEvent& task_newtask() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TaskNewtaskFtraceEvent* release_task_newtask();
  ::perfetto::protos::TaskNewtaskFtraceEvent* mutable_task_newtask();
  void set_allocated_task_newtask(::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask);
  private:
  const ::perfetto::protos::TaskNewtaskFtraceEvent& _internal_task_newtask() const;
  ::perfetto::protos::TaskNewtaskFtraceEvent* _internal_mutable_task_newtask();
  public:
  void unsafe_arena_set_allocated_task_newtask(
      ::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask);
  ::perfetto::protos::TaskNewtaskFtraceEvent* unsafe_arena_release_task_newtask();
  // .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
  bool has_task_rename() const;
  private:
  bool _internal_has_task_rename() const;

  public:
  void clear_task_rename() ;
  const ::perfetto::protos::TaskRenameFtraceEvent& task_rename() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TaskRenameFtraceEvent* release_task_rename();
  ::perfetto::protos::TaskRenameFtraceEvent* mutable_task_rename();
  void set_allocated_task_rename(::perfetto::protos::TaskRenameFtraceEvent* task_rename);
  private:
  const ::perfetto::protos::TaskRenameFtraceEvent& _internal_task_rename() const;
  ::perfetto::protos::TaskRenameFtraceEvent* _internal_mutable_task_rename();
  public:
  void unsafe_arena_set_allocated_task_rename(
      ::perfetto::protos::TaskRenameFtraceEvent* task_rename);
  ::perfetto::protos::TaskRenameFtraceEvent* unsafe_arena_release_task_rename();
  // .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
  bool has_sched_process_exec() const;
  private:
  bool _internal_has_sched_process_exec() const;

  public:
  void clear_sched_process_exec() ;
  const ::perfetto::protos::SchedProcessExecFtraceEvent& sched_process_exec() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedProcessExecFtraceEvent* release_sched_process_exec();
  ::perfetto::protos::SchedProcessExecFtraceEvent* mutable_sched_process_exec();
  void set_allocated_sched_process_exec(::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec);
  private:
  const ::perfetto::protos::SchedProcessExecFtraceEvent& _internal_sched_process_exec() const;
  ::perfetto::protos::SchedProcessExecFtraceEvent* _internal_mutable_sched_process_exec();
  public:
  void unsafe_arena_set_allocated_sched_process_exec(
      ::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec);
  ::perfetto::protos::SchedProcessExecFtraceEvent* unsafe_arena_release_sched_process_exec();
  // .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
  bool has_sched_process_exit() const;
  private:
  bool _internal_has_sched_process_exit() const;

  public:
  void clear_sched_process_exit() ;
  const ::perfetto::protos::SchedProcessExitFtraceEvent& sched_process_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedProcessExitFtraceEvent* release_sched_process_exit();
  ::perfetto::protos::SchedProcessExitFtraceEvent* mutable_sched_process_exit();
  void set_allocated_sched_process_exit(::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit);
  private:
  const ::perfetto::protos::SchedProcessExitFtraceEvent& _internal_sched_process_exit() const;
  ::perfetto::protos::SchedProcessExitFtraceEvent* _internal_mutable_sched_process_exit();
  public:
  void unsafe_arena_set_allocated_sched_process_exit(
      ::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit);
  ::perfetto::protos::SchedProcessExitFtraceEvent* unsafe_arena_release_sched_process_exit();
  // .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
  bool has_sched_process_fork() const;
  private:
  bool _internal_has_sched_process_fork() const;

  public:
  void clear_sched_process_fork() ;
  const ::perfetto::protos::SchedProcessForkFtraceEvent& sched_process_fork() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedProcessForkFtraceEvent* release_sched_process_fork();
  ::perfetto::protos::SchedProcessForkFtraceEvent* mutable_sched_process_fork();
  void set_allocated_sched_process_fork(::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork);
  private:
  const ::perfetto::protos::SchedProcessForkFtraceEvent& _internal_sched_process_fork() const;
  ::perfetto::protos::SchedProcessForkFtraceEvent* _internal_mutable_sched_process_fork();
  public:
  void unsafe_arena_set_allocated_sched_process_fork(
      ::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork);
  ::perfetto::protos::SchedProcessForkFtraceEvent* unsafe_arena_release_sched_process_fork();
  // .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
  bool has_sched_process_free() const;
  private:
  bool _internal_has_sched_process_free() const;

  public:
  void clear_sched_process_free() ;
  const ::perfetto::protos::SchedProcessFreeFtraceEvent& sched_process_free() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedProcessFreeFtraceEvent* release_sched_process_free();
  ::perfetto::protos::SchedProcessFreeFtraceEvent* mutable_sched_process_free();
  void set_allocated_sched_process_free(::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free);
  private:
  const ::perfetto::protos::SchedProcessFreeFtraceEvent& _internal_sched_process_free() const;
  ::perfetto::protos::SchedProcessFreeFtraceEvent* _internal_mutable_sched_process_free();
  public:
  void unsafe_arena_set_allocated_sched_process_free(
      ::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free);
  ::perfetto::protos::SchedProcessFreeFtraceEvent* unsafe_arena_release_sched_process_free();
  // .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
  bool has_sched_process_hang() const;
  private:
  bool _internal_has_sched_process_hang() const;

  public:
  void clear_sched_process_hang() ;
  const ::perfetto::protos::SchedProcessHangFtraceEvent& sched_process_hang() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedProcessHangFtraceEvent* release_sched_process_hang();
  ::perfetto::protos::SchedProcessHangFtraceEvent* mutable_sched_process_hang();
  void set_allocated_sched_process_hang(::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang);
  private:
  const ::perfetto::protos::SchedProcessHangFtraceEvent& _internal_sched_process_hang() const;
  ::perfetto::protos::SchedProcessHangFtraceEvent* _internal_mutable_sched_process_hang();
  public:
  void unsafe_arena_set_allocated_sched_process_hang(
      ::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang);
  ::perfetto::protos::SchedProcessHangFtraceEvent* unsafe_arena_release_sched_process_hang();
  // .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
  bool has_sched_process_wait() const;
  private:
  bool _internal_has_sched_process_wait() const;

  public:
  void clear_sched_process_wait() ;
  const ::perfetto::protos::SchedProcessWaitFtraceEvent& sched_process_wait() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedProcessWaitFtraceEvent* release_sched_process_wait();
  ::perfetto::protos::SchedProcessWaitFtraceEvent* mutable_sched_process_wait();
  void set_allocated_sched_process_wait(::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait);
  private:
  const ::perfetto::protos::SchedProcessWaitFtraceEvent& _internal_sched_process_wait() const;
  ::perfetto::protos::SchedProcessWaitFtraceEvent* _internal_mutable_sched_process_wait();
  public:
  void unsafe_arena_set_allocated_sched_process_wait(
      ::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait);
  ::perfetto::protos::SchedProcessWaitFtraceEvent* unsafe_arena_release_sched_process_wait();
  // .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
  bool has_f2fs_do_submit_bio() const;
  private:
  bool _internal_has_f2fs_do_submit_bio() const;

  public:
  void clear_f2fs_do_submit_bio() ;
  const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& f2fs_do_submit_bio() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* release_f2fs_do_submit_bio();
  ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* mutable_f2fs_do_submit_bio();
  void set_allocated_f2fs_do_submit_bio(::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio);
  private:
  const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& _internal_f2fs_do_submit_bio() const;
  ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* _internal_mutable_f2fs_do_submit_bio();
  public:
  void unsafe_arena_set_allocated_f2fs_do_submit_bio(
      ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio);
  ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* unsafe_arena_release_f2fs_do_submit_bio();
  // .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
  bool has_f2fs_evict_inode() const;
  private:
  bool _internal_has_f2fs_evict_inode() const;

  public:
  void clear_f2fs_evict_inode() ;
  const ::perfetto::protos::F2fsEvictInodeFtraceEvent& f2fs_evict_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsEvictInodeFtraceEvent* release_f2fs_evict_inode();
  ::perfetto::protos::F2fsEvictInodeFtraceEvent* mutable_f2fs_evict_inode();
  void set_allocated_f2fs_evict_inode(::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode);
  private:
  const ::perfetto::protos::F2fsEvictInodeFtraceEvent& _internal_f2fs_evict_inode() const;
  ::perfetto::protos::F2fsEvictInodeFtraceEvent* _internal_mutable_f2fs_evict_inode();
  public:
  void unsafe_arena_set_allocated_f2fs_evict_inode(
      ::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode);
  ::perfetto::protos::F2fsEvictInodeFtraceEvent* unsafe_arena_release_f2fs_evict_inode();
  // .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
  bool has_f2fs_fallocate() const;
  private:
  bool _internal_has_f2fs_fallocate() const;

  public:
  void clear_f2fs_fallocate() ;
  const ::perfetto::protos::F2fsFallocateFtraceEvent& f2fs_fallocate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsFallocateFtraceEvent* release_f2fs_fallocate();
  ::perfetto::protos::F2fsFallocateFtraceEvent* mutable_f2fs_fallocate();
  void set_allocated_f2fs_fallocate(::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate);
  private:
  const ::perfetto::protos::F2fsFallocateFtraceEvent& _internal_f2fs_fallocate() const;
  ::perfetto::protos::F2fsFallocateFtraceEvent* _internal_mutable_f2fs_fallocate();
  public:
  void unsafe_arena_set_allocated_f2fs_fallocate(
      ::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate);
  ::perfetto::protos::F2fsFallocateFtraceEvent* unsafe_arena_release_f2fs_fallocate();
  // .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
  bool has_f2fs_get_data_block() const;
  private:
  bool _internal_has_f2fs_get_data_block() const;

  public:
  void clear_f2fs_get_data_block() ;
  const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& f2fs_get_data_block() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsGetDataBlockFtraceEvent* release_f2fs_get_data_block();
  ::perfetto::protos::F2fsGetDataBlockFtraceEvent* mutable_f2fs_get_data_block();
  void set_allocated_f2fs_get_data_block(::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block);
  private:
  const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& _internal_f2fs_get_data_block() const;
  ::perfetto::protos::F2fsGetDataBlockFtraceEvent* _internal_mutable_f2fs_get_data_block();
  public:
  void unsafe_arena_set_allocated_f2fs_get_data_block(
      ::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block);
  ::perfetto::protos::F2fsGetDataBlockFtraceEvent* unsafe_arena_release_f2fs_get_data_block();
  // .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
  bool has_f2fs_get_victim() const;
  private:
  bool _internal_has_f2fs_get_victim() const;

  public:
  void clear_f2fs_get_victim() ;
  const ::perfetto::protos::F2fsGetVictimFtraceEvent& f2fs_get_victim() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsGetVictimFtraceEvent* release_f2fs_get_victim();
  ::perfetto::protos::F2fsGetVictimFtraceEvent* mutable_f2fs_get_victim();
  void set_allocated_f2fs_get_victim(::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim);
  private:
  const ::perfetto::protos::F2fsGetVictimFtraceEvent& _internal_f2fs_get_victim() const;
  ::perfetto::protos::F2fsGetVictimFtraceEvent* _internal_mutable_f2fs_get_victim();
  public:
  void unsafe_arena_set_allocated_f2fs_get_victim(
      ::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim);
  ::perfetto::protos::F2fsGetVictimFtraceEvent* unsafe_arena_release_f2fs_get_victim();
  // .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
  bool has_f2fs_iget() const;
  private:
  bool _internal_has_f2fs_iget() const;

  public:
  void clear_f2fs_iget() ;
  const ::perfetto::protos::F2fsIgetFtraceEvent& f2fs_iget() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsIgetFtraceEvent* release_f2fs_iget();
  ::perfetto::protos::F2fsIgetFtraceEvent* mutable_f2fs_iget();
  void set_allocated_f2fs_iget(::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget);
  private:
  const ::perfetto::protos::F2fsIgetFtraceEvent& _internal_f2fs_iget() const;
  ::perfetto::protos::F2fsIgetFtraceEvent* _internal_mutable_f2fs_iget();
  public:
  void unsafe_arena_set_allocated_f2fs_iget(
      ::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget);
  ::perfetto::protos::F2fsIgetFtraceEvent* unsafe_arena_release_f2fs_iget();
  // .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
  bool has_f2fs_iget_exit() const;
  private:
  bool _internal_has_f2fs_iget_exit() const;

  public:
  void clear_f2fs_iget_exit() ;
  const ::perfetto::protos::F2fsIgetExitFtraceEvent& f2fs_iget_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsIgetExitFtraceEvent* release_f2fs_iget_exit();
  ::perfetto::protos::F2fsIgetExitFtraceEvent* mutable_f2fs_iget_exit();
  void set_allocated_f2fs_iget_exit(::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit);
  private:
  const ::perfetto::protos::F2fsIgetExitFtraceEvent& _internal_f2fs_iget_exit() const;
  ::perfetto::protos::F2fsIgetExitFtraceEvent* _internal_mutable_f2fs_iget_exit();
  public:
  void unsafe_arena_set_allocated_f2fs_iget_exit(
      ::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit);
  ::perfetto::protos::F2fsIgetExitFtraceEvent* unsafe_arena_release_f2fs_iget_exit();
  // .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
  bool has_f2fs_new_inode() const;
  private:
  bool _internal_has_f2fs_new_inode() const;

  public:
  void clear_f2fs_new_inode() ;
  const ::perfetto::protos::F2fsNewInodeFtraceEvent& f2fs_new_inode() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsNewInodeFtraceEvent* release_f2fs_new_inode();
  ::perfetto::protos::F2fsNewInodeFtraceEvent* mutable_f2fs_new_inode();
  void set_allocated_f2fs_new_inode(::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode);
  private:
  const ::perfetto::protos::F2fsNewInodeFtraceEvent& _internal_f2fs_new_inode() const;
  ::perfetto::protos::F2fsNewInodeFtraceEvent* _internal_mutable_f2fs_new_inode();
  public:
  void unsafe_arena_set_allocated_f2fs_new_inode(
      ::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode);
  ::perfetto::protos::F2fsNewInodeFtraceEvent* unsafe_arena_release_f2fs_new_inode();
  // .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
  bool has_f2fs_readpage() const;
  private:
  bool _internal_has_f2fs_readpage() const;

  public:
  void clear_f2fs_readpage() ;
  const ::perfetto::protos::F2fsReadpageFtraceEvent& f2fs_readpage() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsReadpageFtraceEvent* release_f2fs_readpage();
  ::perfetto::protos::F2fsReadpageFtraceEvent* mutable_f2fs_readpage();
  void set_allocated_f2fs_readpage(::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage);
  private:
  const ::perfetto::protos::F2fsReadpageFtraceEvent& _internal_f2fs_readpage() const;
  ::perfetto::protos::F2fsReadpageFtraceEvent* _internal_mutable_f2fs_readpage();
  public:
  void unsafe_arena_set_allocated_f2fs_readpage(
      ::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage);
  ::perfetto::protos::F2fsReadpageFtraceEvent* unsafe_arena_release_f2fs_readpage();
  // .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
  bool has_f2fs_reserve_new_block() const;
  private:
  bool _internal_has_f2fs_reserve_new_block() const;

  public:
  void clear_f2fs_reserve_new_block() ;
  const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& f2fs_reserve_new_block() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* release_f2fs_reserve_new_block();
  ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* mutable_f2fs_reserve_new_block();
  void set_allocated_f2fs_reserve_new_block(::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block);
  private:
  const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& _internal_f2fs_reserve_new_block() const;
  ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* _internal_mutable_f2fs_reserve_new_block();
  public:
  void unsafe_arena_set_allocated_f2fs_reserve_new_block(
      ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block);
  ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* unsafe_arena_release_f2fs_reserve_new_block();
  // .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
  bool has_f2fs_set_page_dirty() const;
  private:
  bool _internal_has_f2fs_set_page_dirty() const;

  public:
  void clear_f2fs_set_page_dirty() ;
  const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& f2fs_set_page_dirty() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* release_f2fs_set_page_dirty();
  ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* mutable_f2fs_set_page_dirty();
  void set_allocated_f2fs_set_page_dirty(::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty);
  private:
  const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& _internal_f2fs_set_page_dirty() const;
  ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* _internal_mutable_f2fs_set_page_dirty();
  public:
  void unsafe_arena_set_allocated_f2fs_set_page_dirty(
      ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty);
  ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* unsafe_arena_release_f2fs_set_page_dirty();
  // .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
  bool has_f2fs_submit_write_page() const;
  private:
  bool _internal_has_f2fs_submit_write_page() const;

  public:
  void clear_f2fs_submit_write_page() ;
  const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& f2fs_submit_write_page() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* release_f2fs_submit_write_page();
  ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* mutable_f2fs_submit_write_page();
  void set_allocated_f2fs_submit_write_page(::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page);
  private:
  const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& _internal_f2fs_submit_write_page() const;
  ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* _internal_mutable_f2fs_submit_write_page();
  public:
  void unsafe_arena_set_allocated_f2fs_submit_write_page(
      ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page);
  ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* unsafe_arena_release_f2fs_submit_write_page();
  // .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
  bool has_f2fs_sync_file_enter() const;
  private:
  bool _internal_has_f2fs_sync_file_enter() const;

  public:
  void clear_f2fs_sync_file_enter() ;
  const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& f2fs_sync_file_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* release_f2fs_sync_file_enter();
  ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* mutable_f2fs_sync_file_enter();
  void set_allocated_f2fs_sync_file_enter(::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter);
  private:
  const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& _internal_f2fs_sync_file_enter() const;
  ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* _internal_mutable_f2fs_sync_file_enter();
  public:
  void unsafe_arena_set_allocated_f2fs_sync_file_enter(
      ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter);
  ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* unsafe_arena_release_f2fs_sync_file_enter();
  // .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
  bool has_f2fs_sync_file_exit() const;
  private:
  bool _internal_has_f2fs_sync_file_exit() const;

  public:
  void clear_f2fs_sync_file_exit() ;
  const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& f2fs_sync_file_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsSyncFileExitFtraceEvent* release_f2fs_sync_file_exit();
  ::perfetto::protos::F2fsSyncFileExitFtraceEvent* mutable_f2fs_sync_file_exit();
  void set_allocated_f2fs_sync_file_exit(::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit);
  private:
  const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& _internal_f2fs_sync_file_exit() const;
  ::perfetto::protos::F2fsSyncFileExitFtraceEvent* _internal_mutable_f2fs_sync_file_exit();
  public:
  void unsafe_arena_set_allocated_f2fs_sync_file_exit(
      ::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit);
  ::perfetto::protos::F2fsSyncFileExitFtraceEvent* unsafe_arena_release_f2fs_sync_file_exit();
  // .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
  bool has_f2fs_sync_fs() const;
  private:
  bool _internal_has_f2fs_sync_fs() const;

  public:
  void clear_f2fs_sync_fs() ;
  const ::perfetto::protos::F2fsSyncFsFtraceEvent& f2fs_sync_fs() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsSyncFsFtraceEvent* release_f2fs_sync_fs();
  ::perfetto::protos::F2fsSyncFsFtraceEvent* mutable_f2fs_sync_fs();
  void set_allocated_f2fs_sync_fs(::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs);
  private:
  const ::perfetto::protos::F2fsSyncFsFtraceEvent& _internal_f2fs_sync_fs() const;
  ::perfetto::protos::F2fsSyncFsFtraceEvent* _internal_mutable_f2fs_sync_fs();
  public:
  void unsafe_arena_set_allocated_f2fs_sync_fs(
      ::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs);
  ::perfetto::protos::F2fsSyncFsFtraceEvent* unsafe_arena_release_f2fs_sync_fs();
  // .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
  bool has_f2fs_truncate() const;
  private:
  bool _internal_has_f2fs_truncate() const;

  public:
  void clear_f2fs_truncate() ;
  const ::perfetto::protos::F2fsTruncateFtraceEvent& f2fs_truncate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateFtraceEvent* release_f2fs_truncate();
  ::perfetto::protos::F2fsTruncateFtraceEvent* mutable_f2fs_truncate();
  void set_allocated_f2fs_truncate(::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate);
  private:
  const ::perfetto::protos::F2fsTruncateFtraceEvent& _internal_f2fs_truncate() const;
  ::perfetto::protos::F2fsTruncateFtraceEvent* _internal_mutable_f2fs_truncate();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate(
      ::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate);
  ::perfetto::protos::F2fsTruncateFtraceEvent* unsafe_arena_release_f2fs_truncate();
  // .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
  bool has_f2fs_truncate_blocks_enter() const;
  private:
  bool _internal_has_f2fs_truncate_blocks_enter() const;

  public:
  void clear_f2fs_truncate_blocks_enter() ;
  const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& f2fs_truncate_blocks_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* release_f2fs_truncate_blocks_enter();
  ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* mutable_f2fs_truncate_blocks_enter();
  void set_allocated_f2fs_truncate_blocks_enter(::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter);
  private:
  const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& _internal_f2fs_truncate_blocks_enter() const;
  ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* _internal_mutable_f2fs_truncate_blocks_enter();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_blocks_enter(
      ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter);
  ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* unsafe_arena_release_f2fs_truncate_blocks_enter();
  // .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
  bool has_f2fs_truncate_blocks_exit() const;
  private:
  bool _internal_has_f2fs_truncate_blocks_exit() const;

  public:
  void clear_f2fs_truncate_blocks_exit() ;
  const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& f2fs_truncate_blocks_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* release_f2fs_truncate_blocks_exit();
  ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* mutable_f2fs_truncate_blocks_exit();
  void set_allocated_f2fs_truncate_blocks_exit(::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit);
  private:
  const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& _internal_f2fs_truncate_blocks_exit() const;
  ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* _internal_mutable_f2fs_truncate_blocks_exit();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_blocks_exit(
      ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit);
  ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* unsafe_arena_release_f2fs_truncate_blocks_exit();
  // .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
  bool has_f2fs_truncate_data_blocks_range() const;
  private:
  bool _internal_has_f2fs_truncate_data_blocks_range() const;

  public:
  void clear_f2fs_truncate_data_blocks_range() ;
  const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& f2fs_truncate_data_blocks_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* release_f2fs_truncate_data_blocks_range();
  ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* mutable_f2fs_truncate_data_blocks_range();
  void set_allocated_f2fs_truncate_data_blocks_range(::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range);
  private:
  const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& _internal_f2fs_truncate_data_blocks_range() const;
  ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* _internal_mutable_f2fs_truncate_data_blocks_range();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_data_blocks_range(
      ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range);
  ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* unsafe_arena_release_f2fs_truncate_data_blocks_range();
  // .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
  bool has_f2fs_truncate_inode_blocks_enter() const;
  private:
  bool _internal_has_f2fs_truncate_inode_blocks_enter() const;

  public:
  void clear_f2fs_truncate_inode_blocks_enter() ;
  const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& f2fs_truncate_inode_blocks_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* release_f2fs_truncate_inode_blocks_enter();
  ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* mutable_f2fs_truncate_inode_blocks_enter();
  void set_allocated_f2fs_truncate_inode_blocks_enter(::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter);
  private:
  const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& _internal_f2fs_truncate_inode_blocks_enter() const;
  ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* _internal_mutable_f2fs_truncate_inode_blocks_enter();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_inode_blocks_enter(
      ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter);
  ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* unsafe_arena_release_f2fs_truncate_inode_blocks_enter();
  // .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
  bool has_f2fs_truncate_inode_blocks_exit() const;
  private:
  bool _internal_has_f2fs_truncate_inode_blocks_exit() const;

  public:
  void clear_f2fs_truncate_inode_blocks_exit() ;
  const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& f2fs_truncate_inode_blocks_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* release_f2fs_truncate_inode_blocks_exit();
  ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* mutable_f2fs_truncate_inode_blocks_exit();
  void set_allocated_f2fs_truncate_inode_blocks_exit(::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit);
  private:
  const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& _internal_f2fs_truncate_inode_blocks_exit() const;
  ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* _internal_mutable_f2fs_truncate_inode_blocks_exit();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_inode_blocks_exit(
      ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit);
  ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* unsafe_arena_release_f2fs_truncate_inode_blocks_exit();
  // .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
  bool has_f2fs_truncate_node() const;
  private:
  bool _internal_has_f2fs_truncate_node() const;

  public:
  void clear_f2fs_truncate_node() ;
  const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& f2fs_truncate_node() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateNodeFtraceEvent* release_f2fs_truncate_node();
  ::perfetto::protos::F2fsTruncateNodeFtraceEvent* mutable_f2fs_truncate_node();
  void set_allocated_f2fs_truncate_node(::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node);
  private:
  const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& _internal_f2fs_truncate_node() const;
  ::perfetto::protos::F2fsTruncateNodeFtraceEvent* _internal_mutable_f2fs_truncate_node();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_node(
      ::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node);
  ::perfetto::protos::F2fsTruncateNodeFtraceEvent* unsafe_arena_release_f2fs_truncate_node();
  // .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
  bool has_f2fs_truncate_nodes_enter() const;
  private:
  bool _internal_has_f2fs_truncate_nodes_enter() const;

  public:
  void clear_f2fs_truncate_nodes_enter() ;
  const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& f2fs_truncate_nodes_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* release_f2fs_truncate_nodes_enter();
  ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* mutable_f2fs_truncate_nodes_enter();
  void set_allocated_f2fs_truncate_nodes_enter(::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter);
  private:
  const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& _internal_f2fs_truncate_nodes_enter() const;
  ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* _internal_mutable_f2fs_truncate_nodes_enter();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_nodes_enter(
      ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter);
  ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* unsafe_arena_release_f2fs_truncate_nodes_enter();
  // .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
  bool has_f2fs_truncate_nodes_exit() const;
  private:
  bool _internal_has_f2fs_truncate_nodes_exit() const;

  public:
  void clear_f2fs_truncate_nodes_exit() ;
  const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& f2fs_truncate_nodes_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* release_f2fs_truncate_nodes_exit();
  ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* mutable_f2fs_truncate_nodes_exit();
  void set_allocated_f2fs_truncate_nodes_exit(::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit);
  private:
  const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& _internal_f2fs_truncate_nodes_exit() const;
  ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* _internal_mutable_f2fs_truncate_nodes_exit();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_nodes_exit(
      ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit);
  ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* unsafe_arena_release_f2fs_truncate_nodes_exit();
  // .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
  bool has_f2fs_truncate_partial_nodes() const;
  private:
  bool _internal_has_f2fs_truncate_partial_nodes() const;

  public:
  void clear_f2fs_truncate_partial_nodes() ;
  const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& f2fs_truncate_partial_nodes() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* release_f2fs_truncate_partial_nodes();
  ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* mutable_f2fs_truncate_partial_nodes();
  void set_allocated_f2fs_truncate_partial_nodes(::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes);
  private:
  const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& _internal_f2fs_truncate_partial_nodes() const;
  ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* _internal_mutable_f2fs_truncate_partial_nodes();
  public:
  void unsafe_arena_set_allocated_f2fs_truncate_partial_nodes(
      ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes);
  ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* unsafe_arena_release_f2fs_truncate_partial_nodes();
  // .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
  bool has_f2fs_unlink_enter() const;
  private:
  bool _internal_has_f2fs_unlink_enter() const;

  public:
  void clear_f2fs_unlink_enter() ;
  const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& f2fs_unlink_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* release_f2fs_unlink_enter();
  ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* mutable_f2fs_unlink_enter();
  void set_allocated_f2fs_unlink_enter(::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter);
  private:
  const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& _internal_f2fs_unlink_enter() const;
  ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* _internal_mutable_f2fs_unlink_enter();
  public:
  void unsafe_arena_set_allocated_f2fs_unlink_enter(
      ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter);
  ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* unsafe_arena_release_f2fs_unlink_enter();
  // .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
  bool has_f2fs_unlink_exit() const;
  private:
  bool _internal_has_f2fs_unlink_exit() const;

  public:
  void clear_f2fs_unlink_exit() ;
  const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& f2fs_unlink_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsUnlinkExitFtraceEvent* release_f2fs_unlink_exit();
  ::perfetto::protos::F2fsUnlinkExitFtraceEvent* mutable_f2fs_unlink_exit();
  void set_allocated_f2fs_unlink_exit(::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit);
  private:
  const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& _internal_f2fs_unlink_exit() const;
  ::perfetto::protos::F2fsUnlinkExitFtraceEvent* _internal_mutable_f2fs_unlink_exit();
  public:
  void unsafe_arena_set_allocated_f2fs_unlink_exit(
      ::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit);
  ::perfetto::protos::F2fsUnlinkExitFtraceEvent* unsafe_arena_release_f2fs_unlink_exit();
  // .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
  bool has_f2fs_vm_page_mkwrite() const;
  private:
  bool _internal_has_f2fs_vm_page_mkwrite() const;

  public:
  void clear_f2fs_vm_page_mkwrite() ;
  const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& f2fs_vm_page_mkwrite() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* release_f2fs_vm_page_mkwrite();
  ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* mutable_f2fs_vm_page_mkwrite();
  void set_allocated_f2fs_vm_page_mkwrite(::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite);
  private:
  const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& _internal_f2fs_vm_page_mkwrite() const;
  ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* _internal_mutable_f2fs_vm_page_mkwrite();
  public:
  void unsafe_arena_set_allocated_f2fs_vm_page_mkwrite(
      ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite);
  ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* unsafe_arena_release_f2fs_vm_page_mkwrite();
  // .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
  bool has_f2fs_write_begin() const;
  private:
  bool _internal_has_f2fs_write_begin() const;

  public:
  void clear_f2fs_write_begin() ;
  const ::perfetto::protos::F2fsWriteBeginFtraceEvent& f2fs_write_begin() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsWriteBeginFtraceEvent* release_f2fs_write_begin();
  ::perfetto::protos::F2fsWriteBeginFtraceEvent* mutable_f2fs_write_begin();
  void set_allocated_f2fs_write_begin(::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin);
  private:
  const ::perfetto::protos::F2fsWriteBeginFtraceEvent& _internal_f2fs_write_begin() const;
  ::perfetto::protos::F2fsWriteBeginFtraceEvent* _internal_mutable_f2fs_write_begin();
  public:
  void unsafe_arena_set_allocated_f2fs_write_begin(
      ::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin);
  ::perfetto::protos::F2fsWriteBeginFtraceEvent* unsafe_arena_release_f2fs_write_begin();
  // .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
  bool has_f2fs_write_checkpoint() const;
  private:
  bool _internal_has_f2fs_write_checkpoint() const;

  public:
  void clear_f2fs_write_checkpoint() ;
  const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& f2fs_write_checkpoint() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* release_f2fs_write_checkpoint();
  ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* mutable_f2fs_write_checkpoint();
  void set_allocated_f2fs_write_checkpoint(::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint);
  private:
  const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& _internal_f2fs_write_checkpoint() const;
  ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* _internal_mutable_f2fs_write_checkpoint();
  public:
  void unsafe_arena_set_allocated_f2fs_write_checkpoint(
      ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint);
  ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* unsafe_arena_release_f2fs_write_checkpoint();
  // .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
  bool has_f2fs_write_end() const;
  private:
  bool _internal_has_f2fs_write_end() const;

  public:
  void clear_f2fs_write_end() ;
  const ::perfetto::protos::F2fsWriteEndFtraceEvent& f2fs_write_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsWriteEndFtraceEvent* release_f2fs_write_end();
  ::perfetto::protos::F2fsWriteEndFtraceEvent* mutable_f2fs_write_end();
  void set_allocated_f2fs_write_end(::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end);
  private:
  const ::perfetto::protos::F2fsWriteEndFtraceEvent& _internal_f2fs_write_end() const;
  ::perfetto::protos::F2fsWriteEndFtraceEvent* _internal_mutable_f2fs_write_end();
  public:
  void unsafe_arena_set_allocated_f2fs_write_end(
      ::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end);
  ::perfetto::protos::F2fsWriteEndFtraceEvent* unsafe_arena_release_f2fs_write_end();
  // .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
  bool has_alloc_pages_iommu_end() const;
  private:
  bool _internal_has_alloc_pages_iommu_end() const;

  public:
  void clear_alloc_pages_iommu_end() ;
  const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& alloc_pages_iommu_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AllocPagesIommuEndFtraceEvent* release_alloc_pages_iommu_end();
  ::perfetto::protos::AllocPagesIommuEndFtraceEvent* mutable_alloc_pages_iommu_end();
  void set_allocated_alloc_pages_iommu_end(::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end);
  private:
  const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& _internal_alloc_pages_iommu_end() const;
  ::perfetto::protos::AllocPagesIommuEndFtraceEvent* _internal_mutable_alloc_pages_iommu_end();
  public:
  void unsafe_arena_set_allocated_alloc_pages_iommu_end(
      ::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end);
  ::perfetto::protos::AllocPagesIommuEndFtraceEvent* unsafe_arena_release_alloc_pages_iommu_end();
  // .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
  bool has_alloc_pages_iommu_fail() const;
  private:
  bool _internal_has_alloc_pages_iommu_fail() const;

  public:
  void clear_alloc_pages_iommu_fail() ;
  const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& alloc_pages_iommu_fail() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AllocPagesIommuFailFtraceEvent* release_alloc_pages_iommu_fail();
  ::perfetto::protos::AllocPagesIommuFailFtraceEvent* mutable_alloc_pages_iommu_fail();
  void set_allocated_alloc_pages_iommu_fail(::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail);
  private:
  const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& _internal_alloc_pages_iommu_fail() const;
  ::perfetto::protos::AllocPagesIommuFailFtraceEvent* _internal_mutable_alloc_pages_iommu_fail();
  public:
  void unsafe_arena_set_allocated_alloc_pages_iommu_fail(
      ::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail);
  ::perfetto::protos::AllocPagesIommuFailFtraceEvent* unsafe_arena_release_alloc_pages_iommu_fail();
  // .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
  bool has_alloc_pages_iommu_start() const;
  private:
  bool _internal_has_alloc_pages_iommu_start() const;

  public:
  void clear_alloc_pages_iommu_start() ;
  const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& alloc_pages_iommu_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AllocPagesIommuStartFtraceEvent* release_alloc_pages_iommu_start();
  ::perfetto::protos::AllocPagesIommuStartFtraceEvent* mutable_alloc_pages_iommu_start();
  void set_allocated_alloc_pages_iommu_start(::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start);
  private:
  const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& _internal_alloc_pages_iommu_start() const;
  ::perfetto::protos::AllocPagesIommuStartFtraceEvent* _internal_mutable_alloc_pages_iommu_start();
  public:
  void unsafe_arena_set_allocated_alloc_pages_iommu_start(
      ::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start);
  ::perfetto::protos::AllocPagesIommuStartFtraceEvent* unsafe_arena_release_alloc_pages_iommu_start();
  // .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
  bool has_alloc_pages_sys_end() const;
  private:
  bool _internal_has_alloc_pages_sys_end() const;

  public:
  void clear_alloc_pages_sys_end() ;
  const ::perfetto::protos::AllocPagesSysEndFtraceEvent& alloc_pages_sys_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AllocPagesSysEndFtraceEvent* release_alloc_pages_sys_end();
  ::perfetto::protos::AllocPagesSysEndFtraceEvent* mutable_alloc_pages_sys_end();
  void set_allocated_alloc_pages_sys_end(::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end);
  private:
  const ::perfetto::protos::AllocPagesSysEndFtraceEvent& _internal_alloc_pages_sys_end() const;
  ::perfetto::protos::AllocPagesSysEndFtraceEvent* _internal_mutable_alloc_pages_sys_end();
  public:
  void unsafe_arena_set_allocated_alloc_pages_sys_end(
      ::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end);
  ::perfetto::protos::AllocPagesSysEndFtraceEvent* unsafe_arena_release_alloc_pages_sys_end();
  // .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
  bool has_alloc_pages_sys_fail() const;
  private:
  bool _internal_has_alloc_pages_sys_fail() const;

  public:
  void clear_alloc_pages_sys_fail() ;
  const ::perfetto::protos::AllocPagesSysFailFtraceEvent& alloc_pages_sys_fail() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AllocPagesSysFailFtraceEvent* release_alloc_pages_sys_fail();
  ::perfetto::protos::AllocPagesSysFailFtraceEvent* mutable_alloc_pages_sys_fail();
  void set_allocated_alloc_pages_sys_fail(::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail);
  private:
  const ::perfetto::protos::AllocPagesSysFailFtraceEvent& _internal_alloc_pages_sys_fail() const;
  ::perfetto::protos::AllocPagesSysFailFtraceEvent* _internal_mutable_alloc_pages_sys_fail();
  public:
  void unsafe_arena_set_allocated_alloc_pages_sys_fail(
      ::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail);
  ::perfetto::protos::AllocPagesSysFailFtraceEvent* unsafe_arena_release_alloc_pages_sys_fail();
  // .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
  bool has_alloc_pages_sys_start() const;
  private:
  bool _internal_has_alloc_pages_sys_start() const;

  public:
  void clear_alloc_pages_sys_start() ;
  const ::perfetto::protos::AllocPagesSysStartFtraceEvent& alloc_pages_sys_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AllocPagesSysStartFtraceEvent* release_alloc_pages_sys_start();
  ::perfetto::protos::AllocPagesSysStartFtraceEvent* mutable_alloc_pages_sys_start();
  void set_allocated_alloc_pages_sys_start(::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start);
  private:
  const ::perfetto::protos::AllocPagesSysStartFtraceEvent& _internal_alloc_pages_sys_start() const;
  ::perfetto::protos::AllocPagesSysStartFtraceEvent* _internal_mutable_alloc_pages_sys_start();
  public:
  void unsafe_arena_set_allocated_alloc_pages_sys_start(
      ::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start);
  ::perfetto::protos::AllocPagesSysStartFtraceEvent* unsafe_arena_release_alloc_pages_sys_start();
  // .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
  bool has_dma_alloc_contiguous_retry() const;
  private:
  bool _internal_has_dma_alloc_contiguous_retry() const;

  public:
  void clear_dma_alloc_contiguous_retry() ;
  const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& dma_alloc_contiguous_retry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* release_dma_alloc_contiguous_retry();
  ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* mutable_dma_alloc_contiguous_retry();
  void set_allocated_dma_alloc_contiguous_retry(::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry);
  private:
  const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& _internal_dma_alloc_contiguous_retry() const;
  ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* _internal_mutable_dma_alloc_contiguous_retry();
  public:
  void unsafe_arena_set_allocated_dma_alloc_contiguous_retry(
      ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry);
  ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* unsafe_arena_release_dma_alloc_contiguous_retry();
  // .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
  bool has_iommu_map_range() const;
  private:
  bool _internal_has_iommu_map_range() const;

  public:
  void clear_iommu_map_range() ;
  const ::perfetto::protos::IommuMapRangeFtraceEvent& iommu_map_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IommuMapRangeFtraceEvent* release_iommu_map_range();
  ::perfetto::protos::IommuMapRangeFtraceEvent* mutable_iommu_map_range();
  void set_allocated_iommu_map_range(::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range);
  private:
  const ::perfetto::protos::IommuMapRangeFtraceEvent& _internal_iommu_map_range() const;
  ::perfetto::protos::IommuMapRangeFtraceEvent* _internal_mutable_iommu_map_range();
  public:
  void unsafe_arena_set_allocated_iommu_map_range(
      ::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range);
  ::perfetto::protos::IommuMapRangeFtraceEvent* unsafe_arena_release_iommu_map_range();
  // .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
  bool has_iommu_sec_ptbl_map_range_end() const;
  private:
  bool _internal_has_iommu_sec_ptbl_map_range_end() const;

  public:
  void clear_iommu_sec_ptbl_map_range_end() ;
  const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& iommu_sec_ptbl_map_range_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* release_iommu_sec_ptbl_map_range_end();
  ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* mutable_iommu_sec_ptbl_map_range_end();
  void set_allocated_iommu_sec_ptbl_map_range_end(::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end);
  private:
  const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& _internal_iommu_sec_ptbl_map_range_end() const;
  ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* _internal_mutable_iommu_sec_ptbl_map_range_end();
  public:
  void unsafe_arena_set_allocated_iommu_sec_ptbl_map_range_end(
      ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end);
  ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* unsafe_arena_release_iommu_sec_ptbl_map_range_end();
  // .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
  bool has_iommu_sec_ptbl_map_range_start() const;
  private:
  bool _internal_has_iommu_sec_ptbl_map_range_start() const;

  public:
  void clear_iommu_sec_ptbl_map_range_start() ;
  const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& iommu_sec_ptbl_map_range_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* release_iommu_sec_ptbl_map_range_start();
  ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* mutable_iommu_sec_ptbl_map_range_start();
  void set_allocated_iommu_sec_ptbl_map_range_start(::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start);
  private:
  const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& _internal_iommu_sec_ptbl_map_range_start() const;
  ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* _internal_mutable_iommu_sec_ptbl_map_range_start();
  public:
  void unsafe_arena_set_allocated_iommu_sec_ptbl_map_range_start(
      ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start);
  ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* unsafe_arena_release_iommu_sec_ptbl_map_range_start();
  // .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
  bool has_ion_alloc_buffer_end() const;
  private:
  bool _internal_has_ion_alloc_buffer_end() const;

  public:
  void clear_ion_alloc_buffer_end() ;
  const ::perfetto::protos::IonAllocBufferEndFtraceEvent& ion_alloc_buffer_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonAllocBufferEndFtraceEvent* release_ion_alloc_buffer_end();
  ::perfetto::protos::IonAllocBufferEndFtraceEvent* mutable_ion_alloc_buffer_end();
  void set_allocated_ion_alloc_buffer_end(::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end);
  private:
  const ::perfetto::protos::IonAllocBufferEndFtraceEvent& _internal_ion_alloc_buffer_end() const;
  ::perfetto::protos::IonAllocBufferEndFtraceEvent* _internal_mutable_ion_alloc_buffer_end();
  public:
  void unsafe_arena_set_allocated_ion_alloc_buffer_end(
      ::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end);
  ::perfetto::protos::IonAllocBufferEndFtraceEvent* unsafe_arena_release_ion_alloc_buffer_end();
  // .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
  bool has_ion_alloc_buffer_fail() const;
  private:
  bool _internal_has_ion_alloc_buffer_fail() const;

  public:
  void clear_ion_alloc_buffer_fail() ;
  const ::perfetto::protos::IonAllocBufferFailFtraceEvent& ion_alloc_buffer_fail() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonAllocBufferFailFtraceEvent* release_ion_alloc_buffer_fail();
  ::perfetto::protos::IonAllocBufferFailFtraceEvent* mutable_ion_alloc_buffer_fail();
  void set_allocated_ion_alloc_buffer_fail(::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail);
  private:
  const ::perfetto::protos::IonAllocBufferFailFtraceEvent& _internal_ion_alloc_buffer_fail() const;
  ::perfetto::protos::IonAllocBufferFailFtraceEvent* _internal_mutable_ion_alloc_buffer_fail();
  public:
  void unsafe_arena_set_allocated_ion_alloc_buffer_fail(
      ::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail);
  ::perfetto::protos::IonAllocBufferFailFtraceEvent* unsafe_arena_release_ion_alloc_buffer_fail();
  // .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
  bool has_ion_alloc_buffer_fallback() const;
  private:
  bool _internal_has_ion_alloc_buffer_fallback() const;

  public:
  void clear_ion_alloc_buffer_fallback() ;
  const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& ion_alloc_buffer_fallback() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* release_ion_alloc_buffer_fallback();
  ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* mutable_ion_alloc_buffer_fallback();
  void set_allocated_ion_alloc_buffer_fallback(::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback);
  private:
  const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& _internal_ion_alloc_buffer_fallback() const;
  ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* _internal_mutable_ion_alloc_buffer_fallback();
  public:
  void unsafe_arena_set_allocated_ion_alloc_buffer_fallback(
      ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback);
  ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* unsafe_arena_release_ion_alloc_buffer_fallback();
  // .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
  bool has_ion_alloc_buffer_start() const;
  private:
  bool _internal_has_ion_alloc_buffer_start() const;

  public:
  void clear_ion_alloc_buffer_start() ;
  const ::perfetto::protos::IonAllocBufferStartFtraceEvent& ion_alloc_buffer_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonAllocBufferStartFtraceEvent* release_ion_alloc_buffer_start();
  ::perfetto::protos::IonAllocBufferStartFtraceEvent* mutable_ion_alloc_buffer_start();
  void set_allocated_ion_alloc_buffer_start(::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start);
  private:
  const ::perfetto::protos::IonAllocBufferStartFtraceEvent& _internal_ion_alloc_buffer_start() const;
  ::perfetto::protos::IonAllocBufferStartFtraceEvent* _internal_mutable_ion_alloc_buffer_start();
  public:
  void unsafe_arena_set_allocated_ion_alloc_buffer_start(
      ::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start);
  ::perfetto::protos::IonAllocBufferStartFtraceEvent* unsafe_arena_release_ion_alloc_buffer_start();
  // .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
  bool has_ion_cp_alloc_retry() const;
  private:
  bool _internal_has_ion_cp_alloc_retry() const;

  public:
  void clear_ion_cp_alloc_retry() ;
  const ::perfetto::protos::IonCpAllocRetryFtraceEvent& ion_cp_alloc_retry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonCpAllocRetryFtraceEvent* release_ion_cp_alloc_retry();
  ::perfetto::protos::IonCpAllocRetryFtraceEvent* mutable_ion_cp_alloc_retry();
  void set_allocated_ion_cp_alloc_retry(::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry);
  private:
  const ::perfetto::protos::IonCpAllocRetryFtraceEvent& _internal_ion_cp_alloc_retry() const;
  ::perfetto::protos::IonCpAllocRetryFtraceEvent* _internal_mutable_ion_cp_alloc_retry();
  public:
  void unsafe_arena_set_allocated_ion_cp_alloc_retry(
      ::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry);
  ::perfetto::protos::IonCpAllocRetryFtraceEvent* unsafe_arena_release_ion_cp_alloc_retry();
  // .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
  bool has_ion_cp_secure_buffer_end() const;
  private:
  bool _internal_has_ion_cp_secure_buffer_end() const;

  public:
  void clear_ion_cp_secure_buffer_end() ;
  const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& ion_cp_secure_buffer_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* release_ion_cp_secure_buffer_end();
  ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* mutable_ion_cp_secure_buffer_end();
  void set_allocated_ion_cp_secure_buffer_end(::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end);
  private:
  const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& _internal_ion_cp_secure_buffer_end() const;
  ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* _internal_mutable_ion_cp_secure_buffer_end();
  public:
  void unsafe_arena_set_allocated_ion_cp_secure_buffer_end(
      ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end);
  ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* unsafe_arena_release_ion_cp_secure_buffer_end();
  // .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
  bool has_ion_cp_secure_buffer_start() const;
  private:
  bool _internal_has_ion_cp_secure_buffer_start() const;

  public:
  void clear_ion_cp_secure_buffer_start() ;
  const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& ion_cp_secure_buffer_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* release_ion_cp_secure_buffer_start();
  ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* mutable_ion_cp_secure_buffer_start();
  void set_allocated_ion_cp_secure_buffer_start(::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start);
  private:
  const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& _internal_ion_cp_secure_buffer_start() const;
  ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* _internal_mutable_ion_cp_secure_buffer_start();
  public:
  void unsafe_arena_set_allocated_ion_cp_secure_buffer_start(
      ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start);
  ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* unsafe_arena_release_ion_cp_secure_buffer_start();
  // .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
  bool has_ion_prefetching() const;
  private:
  bool _internal_has_ion_prefetching() const;

  public:
  void clear_ion_prefetching() ;
  const ::perfetto::protos::IonPrefetchingFtraceEvent& ion_prefetching() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonPrefetchingFtraceEvent* release_ion_prefetching();
  ::perfetto::protos::IonPrefetchingFtraceEvent* mutable_ion_prefetching();
  void set_allocated_ion_prefetching(::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching);
  private:
  const ::perfetto::protos::IonPrefetchingFtraceEvent& _internal_ion_prefetching() const;
  ::perfetto::protos::IonPrefetchingFtraceEvent* _internal_mutable_ion_prefetching();
  public:
  void unsafe_arena_set_allocated_ion_prefetching(
      ::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching);
  ::perfetto::protos::IonPrefetchingFtraceEvent* unsafe_arena_release_ion_prefetching();
  // .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
  bool has_ion_secure_cma_add_to_pool_end() const;
  private:
  bool _internal_has_ion_secure_cma_add_to_pool_end() const;

  public:
  void clear_ion_secure_cma_add_to_pool_end() ;
  const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& ion_secure_cma_add_to_pool_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* release_ion_secure_cma_add_to_pool_end();
  ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* mutable_ion_secure_cma_add_to_pool_end();
  void set_allocated_ion_secure_cma_add_to_pool_end(::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end);
  private:
  const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& _internal_ion_secure_cma_add_to_pool_end() const;
  ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* _internal_mutable_ion_secure_cma_add_to_pool_end();
  public:
  void unsafe_arena_set_allocated_ion_secure_cma_add_to_pool_end(
      ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end);
  ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* unsafe_arena_release_ion_secure_cma_add_to_pool_end();
  // .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
  bool has_ion_secure_cma_add_to_pool_start() const;
  private:
  bool _internal_has_ion_secure_cma_add_to_pool_start() const;

  public:
  void clear_ion_secure_cma_add_to_pool_start() ;
  const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& ion_secure_cma_add_to_pool_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* release_ion_secure_cma_add_to_pool_start();
  ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* mutable_ion_secure_cma_add_to_pool_start();
  void set_allocated_ion_secure_cma_add_to_pool_start(::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start);
  private:
  const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& _internal_ion_secure_cma_add_to_pool_start() const;
  ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* _internal_mutable_ion_secure_cma_add_to_pool_start();
  public:
  void unsafe_arena_set_allocated_ion_secure_cma_add_to_pool_start(
      ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start);
  ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* unsafe_arena_release_ion_secure_cma_add_to_pool_start();
  // .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
  bool has_ion_secure_cma_allocate_end() const;
  private:
  bool _internal_has_ion_secure_cma_allocate_end() const;

  public:
  void clear_ion_secure_cma_allocate_end() ;
  const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& ion_secure_cma_allocate_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* release_ion_secure_cma_allocate_end();
  ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* mutable_ion_secure_cma_allocate_end();
  void set_allocated_ion_secure_cma_allocate_end(::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end);
  private:
  const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& _internal_ion_secure_cma_allocate_end() const;
  ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* _internal_mutable_ion_secure_cma_allocate_end();
  public:
  void unsafe_arena_set_allocated_ion_secure_cma_allocate_end(
      ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end);
  ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* unsafe_arena_release_ion_secure_cma_allocate_end();
  // .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
  bool has_ion_secure_cma_allocate_start() const;
  private:
  bool _internal_has_ion_secure_cma_allocate_start() const;

  public:
  void clear_ion_secure_cma_allocate_start() ;
  const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& ion_secure_cma_allocate_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* release_ion_secure_cma_allocate_start();
  ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* mutable_ion_secure_cma_allocate_start();
  void set_allocated_ion_secure_cma_allocate_start(::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start);
  private:
  const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& _internal_ion_secure_cma_allocate_start() const;
  ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* _internal_mutable_ion_secure_cma_allocate_start();
  public:
  void unsafe_arena_set_allocated_ion_secure_cma_allocate_start(
      ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start);
  ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* unsafe_arena_release_ion_secure_cma_allocate_start();
  // .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
  bool has_ion_secure_cma_shrink_pool_end() const;
  private:
  bool _internal_has_ion_secure_cma_shrink_pool_end() const;

  public:
  void clear_ion_secure_cma_shrink_pool_end() ;
  const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& ion_secure_cma_shrink_pool_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* release_ion_secure_cma_shrink_pool_end();
  ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* mutable_ion_secure_cma_shrink_pool_end();
  void set_allocated_ion_secure_cma_shrink_pool_end(::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end);
  private:
  const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& _internal_ion_secure_cma_shrink_pool_end() const;
  ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* _internal_mutable_ion_secure_cma_shrink_pool_end();
  public:
  void unsafe_arena_set_allocated_ion_secure_cma_shrink_pool_end(
      ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end);
  ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* unsafe_arena_release_ion_secure_cma_shrink_pool_end();
  // .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
  bool has_ion_secure_cma_shrink_pool_start() const;
  private:
  bool _internal_has_ion_secure_cma_shrink_pool_start() const;

  public:
  void clear_ion_secure_cma_shrink_pool_start() ;
  const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& ion_secure_cma_shrink_pool_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* release_ion_secure_cma_shrink_pool_start();
  ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* mutable_ion_secure_cma_shrink_pool_start();
  void set_allocated_ion_secure_cma_shrink_pool_start(::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start);
  private:
  const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& _internal_ion_secure_cma_shrink_pool_start() const;
  ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* _internal_mutable_ion_secure_cma_shrink_pool_start();
  public:
  void unsafe_arena_set_allocated_ion_secure_cma_shrink_pool_start(
      ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start);
  ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* unsafe_arena_release_ion_secure_cma_shrink_pool_start();
  // .perfetto.protos.KfreeFtraceEvent kfree = 298;
  bool has_kfree() const;
  private:
  bool _internal_has_kfree() const;

  public:
  void clear_kfree() ;
  const ::perfetto::protos::KfreeFtraceEvent& kfree() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KfreeFtraceEvent* release_kfree();
  ::perfetto::protos::KfreeFtraceEvent* mutable_kfree();
  void set_allocated_kfree(::perfetto::protos::KfreeFtraceEvent* kfree);
  private:
  const ::perfetto::protos::KfreeFtraceEvent& _internal_kfree() const;
  ::perfetto::protos::KfreeFtraceEvent* _internal_mutable_kfree();
  public:
  void unsafe_arena_set_allocated_kfree(
      ::perfetto::protos::KfreeFtraceEvent* kfree);
  ::perfetto::protos::KfreeFtraceEvent* unsafe_arena_release_kfree();
  // .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
  bool has_kmalloc() const;
  private:
  bool _internal_has_kmalloc() const;

  public:
  void clear_kmalloc() ;
  const ::perfetto::protos::KmallocFtraceEvent& kmalloc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KmallocFtraceEvent* release_kmalloc();
  ::perfetto::protos::KmallocFtraceEvent* mutable_kmalloc();
  void set_allocated_kmalloc(::perfetto::protos::KmallocFtraceEvent* kmalloc);
  private:
  const ::perfetto::protos::KmallocFtraceEvent& _internal_kmalloc() const;
  ::perfetto::protos::KmallocFtraceEvent* _internal_mutable_kmalloc();
  public:
  void unsafe_arena_set_allocated_kmalloc(
      ::perfetto::protos::KmallocFtraceEvent* kmalloc);
  ::perfetto::protos::KmallocFtraceEvent* unsafe_arena_release_kmalloc();
  // .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
  bool has_kmalloc_node() const;
  private:
  bool _internal_has_kmalloc_node() const;

  public:
  void clear_kmalloc_node() ;
  const ::perfetto::protos::KmallocNodeFtraceEvent& kmalloc_node() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KmallocNodeFtraceEvent* release_kmalloc_node();
  ::perfetto::protos::KmallocNodeFtraceEvent* mutable_kmalloc_node();
  void set_allocated_kmalloc_node(::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node);
  private:
  const ::perfetto::protos::KmallocNodeFtraceEvent& _internal_kmalloc_node() const;
  ::perfetto::protos::KmallocNodeFtraceEvent* _internal_mutable_kmalloc_node();
  public:
  void unsafe_arena_set_allocated_kmalloc_node(
      ::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node);
  ::perfetto::protos::KmallocNodeFtraceEvent* unsafe_arena_release_kmalloc_node();
  // .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
  bool has_kmem_cache_alloc() const;
  private:
  bool _internal_has_kmem_cache_alloc() const;

  public:
  void clear_kmem_cache_alloc() ;
  const ::perfetto::protos::KmemCacheAllocFtraceEvent& kmem_cache_alloc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KmemCacheAllocFtraceEvent* release_kmem_cache_alloc();
  ::perfetto::protos::KmemCacheAllocFtraceEvent* mutable_kmem_cache_alloc();
  void set_allocated_kmem_cache_alloc(::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc);
  private:
  const ::perfetto::protos::KmemCacheAllocFtraceEvent& _internal_kmem_cache_alloc() const;
  ::perfetto::protos::KmemCacheAllocFtraceEvent* _internal_mutable_kmem_cache_alloc();
  public:
  void unsafe_arena_set_allocated_kmem_cache_alloc(
      ::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc);
  ::perfetto::protos::KmemCacheAllocFtraceEvent* unsafe_arena_release_kmem_cache_alloc();
  // .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
  bool has_kmem_cache_alloc_node() const;
  private:
  bool _internal_has_kmem_cache_alloc_node() const;

  public:
  void clear_kmem_cache_alloc_node() ;
  const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& kmem_cache_alloc_node() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* release_kmem_cache_alloc_node();
  ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* mutable_kmem_cache_alloc_node();
  void set_allocated_kmem_cache_alloc_node(::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node);
  private:
  const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& _internal_kmem_cache_alloc_node() const;
  ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* _internal_mutable_kmem_cache_alloc_node();
  public:
  void unsafe_arena_set_allocated_kmem_cache_alloc_node(
      ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node);
  ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* unsafe_arena_release_kmem_cache_alloc_node();
  // .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
  bool has_kmem_cache_free() const;
  private:
  bool _internal_has_kmem_cache_free() const;

  public:
  void clear_kmem_cache_free() ;
  const ::perfetto::protos::KmemCacheFreeFtraceEvent& kmem_cache_free() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KmemCacheFreeFtraceEvent* release_kmem_cache_free();
  ::perfetto::protos::KmemCacheFreeFtraceEvent* mutable_kmem_cache_free();
  void set_allocated_kmem_cache_free(::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free);
  private:
  const ::perfetto::protos::KmemCacheFreeFtraceEvent& _internal_kmem_cache_free() const;
  ::perfetto::protos::KmemCacheFreeFtraceEvent* _internal_mutable_kmem_cache_free();
  public:
  void unsafe_arena_set_allocated_kmem_cache_free(
      ::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free);
  ::perfetto::protos::KmemCacheFreeFtraceEvent* unsafe_arena_release_kmem_cache_free();
  // .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
  bool has_migrate_pages_end() const;
  private:
  bool _internal_has_migrate_pages_end() const;

  public:
  void clear_migrate_pages_end() ;
  const ::perfetto::protos::MigratePagesEndFtraceEvent& migrate_pages_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MigratePagesEndFtraceEvent* release_migrate_pages_end();
  ::perfetto::protos::MigratePagesEndFtraceEvent* mutable_migrate_pages_end();
  void set_allocated_migrate_pages_end(::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end);
  private:
  const ::perfetto::protos::MigratePagesEndFtraceEvent& _internal_migrate_pages_end() const;
  ::perfetto::protos::MigratePagesEndFtraceEvent* _internal_mutable_migrate_pages_end();
  public:
  void unsafe_arena_set_allocated_migrate_pages_end(
      ::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end);
  ::perfetto::protos::MigratePagesEndFtraceEvent* unsafe_arena_release_migrate_pages_end();
  // .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
  bool has_migrate_pages_start() const;
  private:
  bool _internal_has_migrate_pages_start() const;

  public:
  void clear_migrate_pages_start() ;
  const ::perfetto::protos::MigratePagesStartFtraceEvent& migrate_pages_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MigratePagesStartFtraceEvent* release_migrate_pages_start();
  ::perfetto::protos::MigratePagesStartFtraceEvent* mutable_migrate_pages_start();
  void set_allocated_migrate_pages_start(::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start);
  private:
  const ::perfetto::protos::MigratePagesStartFtraceEvent& _internal_migrate_pages_start() const;
  ::perfetto::protos::MigratePagesStartFtraceEvent* _internal_mutable_migrate_pages_start();
  public:
  void unsafe_arena_set_allocated_migrate_pages_start(
      ::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start);
  ::perfetto::protos::MigratePagesStartFtraceEvent* unsafe_arena_release_migrate_pages_start();
  // .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
  bool has_migrate_retry() const;
  private:
  bool _internal_has_migrate_retry() const;

  public:
  void clear_migrate_retry() ;
  const ::perfetto::protos::MigrateRetryFtraceEvent& migrate_retry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MigrateRetryFtraceEvent* release_migrate_retry();
  ::perfetto::protos::MigrateRetryFtraceEvent* mutable_migrate_retry();
  void set_allocated_migrate_retry(::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry);
  private:
  const ::perfetto::protos::MigrateRetryFtraceEvent& _internal_migrate_retry() const;
  ::perfetto::protos::MigrateRetryFtraceEvent* _internal_mutable_migrate_retry();
  public:
  void unsafe_arena_set_allocated_migrate_retry(
      ::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry);
  ::perfetto::protos::MigrateRetryFtraceEvent* unsafe_arena_release_migrate_retry();
  // .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
  bool has_mm_page_alloc() const;
  private:
  bool _internal_has_mm_page_alloc() const;

  public:
  void clear_mm_page_alloc() ;
  const ::perfetto::protos::MmPageAllocFtraceEvent& mm_page_alloc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmPageAllocFtraceEvent* release_mm_page_alloc();
  ::perfetto::protos::MmPageAllocFtraceEvent* mutable_mm_page_alloc();
  void set_allocated_mm_page_alloc(::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc);
  private:
  const ::perfetto::protos::MmPageAllocFtraceEvent& _internal_mm_page_alloc() const;
  ::perfetto::protos::MmPageAllocFtraceEvent* _internal_mutable_mm_page_alloc();
  public:
  void unsafe_arena_set_allocated_mm_page_alloc(
      ::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc);
  ::perfetto::protos::MmPageAllocFtraceEvent* unsafe_arena_release_mm_page_alloc();
  // .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
  bool has_mm_page_alloc_extfrag() const;
  private:
  bool _internal_has_mm_page_alloc_extfrag() const;

  public:
  void clear_mm_page_alloc_extfrag() ;
  const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& mm_page_alloc_extfrag() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmPageAllocExtfragFtraceEvent* release_mm_page_alloc_extfrag();
  ::perfetto::protos::MmPageAllocExtfragFtraceEvent* mutable_mm_page_alloc_extfrag();
  void set_allocated_mm_page_alloc_extfrag(::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag);
  private:
  const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& _internal_mm_page_alloc_extfrag() const;
  ::perfetto::protos::MmPageAllocExtfragFtraceEvent* _internal_mutable_mm_page_alloc_extfrag();
  public:
  void unsafe_arena_set_allocated_mm_page_alloc_extfrag(
      ::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag);
  ::perfetto::protos::MmPageAllocExtfragFtraceEvent* unsafe_arena_release_mm_page_alloc_extfrag();
  // .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
  bool has_mm_page_alloc_zone_locked() const;
  private:
  bool _internal_has_mm_page_alloc_zone_locked() const;

  public:
  void clear_mm_page_alloc_zone_locked() ;
  const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& mm_page_alloc_zone_locked() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* release_mm_page_alloc_zone_locked();
  ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mutable_mm_page_alloc_zone_locked();
  void set_allocated_mm_page_alloc_zone_locked(::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked);
  private:
  const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& _internal_mm_page_alloc_zone_locked() const;
  ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* _internal_mutable_mm_page_alloc_zone_locked();
  public:
  void unsafe_arena_set_allocated_mm_page_alloc_zone_locked(
      ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked);
  ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* unsafe_arena_release_mm_page_alloc_zone_locked();
  // .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
  bool has_mm_page_free() const;
  private:
  bool _internal_has_mm_page_free() const;

  public:
  void clear_mm_page_free() ;
  const ::perfetto::protos::MmPageFreeFtraceEvent& mm_page_free() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmPageFreeFtraceEvent* release_mm_page_free();
  ::perfetto::protos::MmPageFreeFtraceEvent* mutable_mm_page_free();
  void set_allocated_mm_page_free(::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free);
  private:
  const ::perfetto::protos::MmPageFreeFtraceEvent& _internal_mm_page_free() const;
  ::perfetto::protos::MmPageFreeFtraceEvent* _internal_mutable_mm_page_free();
  public:
  void unsafe_arena_set_allocated_mm_page_free(
      ::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free);
  ::perfetto::protos::MmPageFreeFtraceEvent* unsafe_arena_release_mm_page_free();
  // .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
  bool has_mm_page_free_batched() const;
  private:
  bool _internal_has_mm_page_free_batched() const;

  public:
  void clear_mm_page_free_batched() ;
  const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& mm_page_free_batched() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmPageFreeBatchedFtraceEvent* release_mm_page_free_batched();
  ::perfetto::protos::MmPageFreeBatchedFtraceEvent* mutable_mm_page_free_batched();
  void set_allocated_mm_page_free_batched(::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched);
  private:
  const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& _internal_mm_page_free_batched() const;
  ::perfetto::protos::MmPageFreeBatchedFtraceEvent* _internal_mutable_mm_page_free_batched();
  public:
  void unsafe_arena_set_allocated_mm_page_free_batched(
      ::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched);
  ::perfetto::protos::MmPageFreeBatchedFtraceEvent* unsafe_arena_release_mm_page_free_batched();
  // .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
  bool has_mm_page_pcpu_drain() const;
  private:
  bool _internal_has_mm_page_pcpu_drain() const;

  public:
  void clear_mm_page_pcpu_drain() ;
  const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& mm_page_pcpu_drain() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmPagePcpuDrainFtraceEvent* release_mm_page_pcpu_drain();
  ::perfetto::protos::MmPagePcpuDrainFtraceEvent* mutable_mm_page_pcpu_drain();
  void set_allocated_mm_page_pcpu_drain(::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain);
  private:
  const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& _internal_mm_page_pcpu_drain() const;
  ::perfetto::protos::MmPagePcpuDrainFtraceEvent* _internal_mutable_mm_page_pcpu_drain();
  public:
  void unsafe_arena_set_allocated_mm_page_pcpu_drain(
      ::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain);
  ::perfetto::protos::MmPagePcpuDrainFtraceEvent* unsafe_arena_release_mm_page_pcpu_drain();
  // .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
  bool has_rss_stat() const;
  private:
  bool _internal_has_rss_stat() const;

  public:
  void clear_rss_stat() ;
  const ::perfetto::protos::RssStatFtraceEvent& rss_stat() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RssStatFtraceEvent* release_rss_stat();
  ::perfetto::protos::RssStatFtraceEvent* mutable_rss_stat();
  void set_allocated_rss_stat(::perfetto::protos::RssStatFtraceEvent* rss_stat);
  private:
  const ::perfetto::protos::RssStatFtraceEvent& _internal_rss_stat() const;
  ::perfetto::protos::RssStatFtraceEvent* _internal_mutable_rss_stat();
  public:
  void unsafe_arena_set_allocated_rss_stat(
      ::perfetto::protos::RssStatFtraceEvent* rss_stat);
  ::perfetto::protos::RssStatFtraceEvent* unsafe_arena_release_rss_stat();
  // .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
  bool has_ion_heap_shrink() const;
  private:
  bool _internal_has_ion_heap_shrink() const;

  public:
  void clear_ion_heap_shrink() ;
  const ::perfetto::protos::IonHeapShrinkFtraceEvent& ion_heap_shrink() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonHeapShrinkFtraceEvent* release_ion_heap_shrink();
  ::perfetto::protos::IonHeapShrinkFtraceEvent* mutable_ion_heap_shrink();
  void set_allocated_ion_heap_shrink(::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink);
  private:
  const ::perfetto::protos::IonHeapShrinkFtraceEvent& _internal_ion_heap_shrink() const;
  ::perfetto::protos::IonHeapShrinkFtraceEvent* _internal_mutable_ion_heap_shrink();
  public:
  void unsafe_arena_set_allocated_ion_heap_shrink(
      ::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink);
  ::perfetto::protos::IonHeapShrinkFtraceEvent* unsafe_arena_release_ion_heap_shrink();
  // .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
  bool has_ion_heap_grow() const;
  private:
  bool _internal_has_ion_heap_grow() const;

  public:
  void clear_ion_heap_grow() ;
  const ::perfetto::protos::IonHeapGrowFtraceEvent& ion_heap_grow() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonHeapGrowFtraceEvent* release_ion_heap_grow();
  ::perfetto::protos::IonHeapGrowFtraceEvent* mutable_ion_heap_grow();
  void set_allocated_ion_heap_grow(::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow);
  private:
  const ::perfetto::protos::IonHeapGrowFtraceEvent& _internal_ion_heap_grow() const;
  ::perfetto::protos::IonHeapGrowFtraceEvent* _internal_mutable_ion_heap_grow();
  public:
  void unsafe_arena_set_allocated_ion_heap_grow(
      ::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow);
  ::perfetto::protos::IonHeapGrowFtraceEvent* unsafe_arena_release_ion_heap_grow();
  // .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
  bool has_fence_init() const;
  private:
  bool _internal_has_fence_init() const;

  public:
  void clear_fence_init() ;
  const ::perfetto::protos::FenceInitFtraceEvent& fence_init() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FenceInitFtraceEvent* release_fence_init();
  ::perfetto::protos::FenceInitFtraceEvent* mutable_fence_init();
  void set_allocated_fence_init(::perfetto::protos::FenceInitFtraceEvent* fence_init);
  private:
  const ::perfetto::protos::FenceInitFtraceEvent& _internal_fence_init() const;
  ::perfetto::protos::FenceInitFtraceEvent* _internal_mutable_fence_init();
  public:
  void unsafe_arena_set_allocated_fence_init(
      ::perfetto::protos::FenceInitFtraceEvent* fence_init);
  ::perfetto::protos::FenceInitFtraceEvent* unsafe_arena_release_fence_init();
  // .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
  bool has_fence_destroy() const;
  private:
  bool _internal_has_fence_destroy() const;

  public:
  void clear_fence_destroy() ;
  const ::perfetto::protos::FenceDestroyFtraceEvent& fence_destroy() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FenceDestroyFtraceEvent* release_fence_destroy();
  ::perfetto::protos::FenceDestroyFtraceEvent* mutable_fence_destroy();
  void set_allocated_fence_destroy(::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy);
  private:
  const ::perfetto::protos::FenceDestroyFtraceEvent& _internal_fence_destroy() const;
  ::perfetto::protos::FenceDestroyFtraceEvent* _internal_mutable_fence_destroy();
  public:
  void unsafe_arena_set_allocated_fence_destroy(
      ::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy);
  ::perfetto::protos::FenceDestroyFtraceEvent* unsafe_arena_release_fence_destroy();
  // .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
  bool has_fence_enable_signal() const;
  private:
  bool _internal_has_fence_enable_signal() const;

  public:
  void clear_fence_enable_signal() ;
  const ::perfetto::protos::FenceEnableSignalFtraceEvent& fence_enable_signal() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FenceEnableSignalFtraceEvent* release_fence_enable_signal();
  ::perfetto::protos::FenceEnableSignalFtraceEvent* mutable_fence_enable_signal();
  void set_allocated_fence_enable_signal(::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal);
  private:
  const ::perfetto::protos::FenceEnableSignalFtraceEvent& _internal_fence_enable_signal() const;
  ::perfetto::protos::FenceEnableSignalFtraceEvent* _internal_mutable_fence_enable_signal();
  public:
  void unsafe_arena_set_allocated_fence_enable_signal(
      ::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal);
  ::perfetto::protos::FenceEnableSignalFtraceEvent* unsafe_arena_release_fence_enable_signal();
  // .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
  bool has_fence_signaled() const;
  private:
  bool _internal_has_fence_signaled() const;

  public:
  void clear_fence_signaled() ;
  const ::perfetto::protos::FenceSignaledFtraceEvent& fence_signaled() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FenceSignaledFtraceEvent* release_fence_signaled();
  ::perfetto::protos::FenceSignaledFtraceEvent* mutable_fence_signaled();
  void set_allocated_fence_signaled(::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled);
  private:
  const ::perfetto::protos::FenceSignaledFtraceEvent& _internal_fence_signaled() const;
  ::perfetto::protos::FenceSignaledFtraceEvent* _internal_mutable_fence_signaled();
  public:
  void unsafe_arena_set_allocated_fence_signaled(
      ::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled);
  ::perfetto::protos::FenceSignaledFtraceEvent* unsafe_arena_release_fence_signaled();
  // .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
  bool has_clk_enable() const;
  private:
  bool _internal_has_clk_enable() const;

  public:
  void clear_clk_enable() ;
  const ::perfetto::protos::ClkEnableFtraceEvent& clk_enable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClkEnableFtraceEvent* release_clk_enable();
  ::perfetto::protos::ClkEnableFtraceEvent* mutable_clk_enable();
  void set_allocated_clk_enable(::perfetto::protos::ClkEnableFtraceEvent* clk_enable);
  private:
  const ::perfetto::protos::ClkEnableFtraceEvent& _internal_clk_enable() const;
  ::perfetto::protos::ClkEnableFtraceEvent* _internal_mutable_clk_enable();
  public:
  void unsafe_arena_set_allocated_clk_enable(
      ::perfetto::protos::ClkEnableFtraceEvent* clk_enable);
  ::perfetto::protos::ClkEnableFtraceEvent* unsafe_arena_release_clk_enable();
  // .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
  bool has_clk_disable() const;
  private:
  bool _internal_has_clk_disable() const;

  public:
  void clear_clk_disable() ;
  const ::perfetto::protos::ClkDisableFtraceEvent& clk_disable() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClkDisableFtraceEvent* release_clk_disable();
  ::perfetto::protos::ClkDisableFtraceEvent* mutable_clk_disable();
  void set_allocated_clk_disable(::perfetto::protos::ClkDisableFtraceEvent* clk_disable);
  private:
  const ::perfetto::protos::ClkDisableFtraceEvent& _internal_clk_disable() const;
  ::perfetto::protos::ClkDisableFtraceEvent* _internal_mutable_clk_disable();
  public:
  void unsafe_arena_set_allocated_clk_disable(
      ::perfetto::protos::ClkDisableFtraceEvent* clk_disable);
  ::perfetto::protos::ClkDisableFtraceEvent* unsafe_arena_release_clk_disable();
  // .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
  bool has_clk_set_rate() const;
  private:
  bool _internal_has_clk_set_rate() const;

  public:
  void clear_clk_set_rate() ;
  const ::perfetto::protos::ClkSetRateFtraceEvent& clk_set_rate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ClkSetRateFtraceEvent* release_clk_set_rate();
  ::perfetto::protos::ClkSetRateFtraceEvent* mutable_clk_set_rate();
  void set_allocated_clk_set_rate(::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate);
  private:
  const ::perfetto::protos::ClkSetRateFtraceEvent& _internal_clk_set_rate() const;
  ::perfetto::protos::ClkSetRateFtraceEvent* _internal_mutable_clk_set_rate();
  public:
  void unsafe_arena_set_allocated_clk_set_rate(
      ::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate);
  ::perfetto::protos::ClkSetRateFtraceEvent* unsafe_arena_release_clk_set_rate();
  // .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
  bool has_binder_transaction_alloc_buf() const;
  private:
  bool _internal_has_binder_transaction_alloc_buf() const;

  public:
  void clear_binder_transaction_alloc_buf() ;
  const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& binder_transaction_alloc_buf() const;
  PROTOBUF_NODISCARD ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* release_binder_transaction_alloc_buf();
  ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* mutable_binder_transaction_alloc_buf();
  void set_allocated_binder_transaction_alloc_buf(::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf);
  private:
  const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& _internal_binder_transaction_alloc_buf() const;
  ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* _internal_mutable_binder_transaction_alloc_buf();
  public:
  void unsafe_arena_set_allocated_binder_transaction_alloc_buf(
      ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf);
  ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* unsafe_arena_release_binder_transaction_alloc_buf();
  // .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
  bool has_signal_deliver() const;
  private:
  bool _internal_has_signal_deliver() const;

  public:
  void clear_signal_deliver() ;
  const ::perfetto::protos::SignalDeliverFtraceEvent& signal_deliver() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SignalDeliverFtraceEvent* release_signal_deliver();
  ::perfetto::protos::SignalDeliverFtraceEvent* mutable_signal_deliver();
  void set_allocated_signal_deliver(::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver);
  private:
  const ::perfetto::protos::SignalDeliverFtraceEvent& _internal_signal_deliver() const;
  ::perfetto::protos::SignalDeliverFtraceEvent* _internal_mutable_signal_deliver();
  public:
  void unsafe_arena_set_allocated_signal_deliver(
      ::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver);
  ::perfetto::protos::SignalDeliverFtraceEvent* unsafe_arena_release_signal_deliver();
  // .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
  bool has_signal_generate() const;
  private:
  bool _internal_has_signal_generate() const;

  public:
  void clear_signal_generate() ;
  const ::perfetto::protos::SignalGenerateFtraceEvent& signal_generate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SignalGenerateFtraceEvent* release_signal_generate();
  ::perfetto::protos::SignalGenerateFtraceEvent* mutable_signal_generate();
  void set_allocated_signal_generate(::perfetto::protos::SignalGenerateFtraceEvent* signal_generate);
  private:
  const ::perfetto::protos::SignalGenerateFtraceEvent& _internal_signal_generate() const;
  ::perfetto::protos::SignalGenerateFtraceEvent* _internal_mutable_signal_generate();
  public:
  void unsafe_arena_set_allocated_signal_generate(
      ::perfetto::protos::SignalGenerateFtraceEvent* signal_generate);
  ::perfetto::protos::SignalGenerateFtraceEvent* unsafe_arena_release_signal_generate();
  // .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
  bool has_oom_score_adj_update() const;
  private:
  bool _internal_has_oom_score_adj_update() const;

  public:
  void clear_oom_score_adj_update() ;
  const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& oom_score_adj_update() const;
  PROTOBUF_NODISCARD ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* release_oom_score_adj_update();
  ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* mutable_oom_score_adj_update();
  void set_allocated_oom_score_adj_update(::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update);
  private:
  const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& _internal_oom_score_adj_update() const;
  ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* _internal_mutable_oom_score_adj_update();
  public:
  void unsafe_arena_set_allocated_oom_score_adj_update(
      ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update);
  ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* unsafe_arena_release_oom_score_adj_update();
  // .perfetto.protos.GenericFtraceEvent generic = 327;
  bool has_generic() const;
  private:
  bool _internal_has_generic() const;

  public:
  void clear_generic() ;
  const ::perfetto::protos::GenericFtraceEvent& generic() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GenericFtraceEvent* release_generic();
  ::perfetto::protos::GenericFtraceEvent* mutable_generic();
  void set_allocated_generic(::perfetto::protos::GenericFtraceEvent* generic);
  private:
  const ::perfetto::protos::GenericFtraceEvent& _internal_generic() const;
  ::perfetto::protos::GenericFtraceEvent* _internal_mutable_generic();
  public:
  void unsafe_arena_set_allocated_generic(
      ::perfetto::protos::GenericFtraceEvent* generic);
  ::perfetto::protos::GenericFtraceEvent* unsafe_arena_release_generic();
  // .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
  bool has_mm_event_record() const;
  private:
  bool _internal_has_mm_event_record() const;

  public:
  void clear_mm_event_record() ;
  const ::perfetto::protos::MmEventRecordFtraceEvent& mm_event_record() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmEventRecordFtraceEvent* release_mm_event_record();
  ::perfetto::protos::MmEventRecordFtraceEvent* mutable_mm_event_record();
  void set_allocated_mm_event_record(::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record);
  private:
  const ::perfetto::protos::MmEventRecordFtraceEvent& _internal_mm_event_record() const;
  ::perfetto::protos::MmEventRecordFtraceEvent* _internal_mutable_mm_event_record();
  public:
  void unsafe_arena_set_allocated_mm_event_record(
      ::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record);
  ::perfetto::protos::MmEventRecordFtraceEvent* unsafe_arena_release_mm_event_record();
  // .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
  bool has_sys_enter() const;
  private:
  bool _internal_has_sys_enter() const;

  public:
  void clear_sys_enter() ;
  const ::perfetto::protos::SysEnterFtraceEvent& sys_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SysEnterFtraceEvent* release_sys_enter();
  ::perfetto::protos::SysEnterFtraceEvent* mutable_sys_enter();
  void set_allocated_sys_enter(::perfetto::protos::SysEnterFtraceEvent* sys_enter);
  private:
  const ::perfetto::protos::SysEnterFtraceEvent& _internal_sys_enter() const;
  ::perfetto::protos::SysEnterFtraceEvent* _internal_mutable_sys_enter();
  public:
  void unsafe_arena_set_allocated_sys_enter(
      ::perfetto::protos::SysEnterFtraceEvent* sys_enter);
  ::perfetto::protos::SysEnterFtraceEvent* unsafe_arena_release_sys_enter();
  // .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
  bool has_sys_exit() const;
  private:
  bool _internal_has_sys_exit() const;

  public:
  void clear_sys_exit() ;
  const ::perfetto::protos::SysExitFtraceEvent& sys_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SysExitFtraceEvent* release_sys_exit();
  ::perfetto::protos::SysExitFtraceEvent* mutable_sys_exit();
  void set_allocated_sys_exit(::perfetto::protos::SysExitFtraceEvent* sys_exit);
  private:
  const ::perfetto::protos::SysExitFtraceEvent& _internal_sys_exit() const;
  ::perfetto::protos::SysExitFtraceEvent* _internal_mutable_sys_exit();
  public:
  void unsafe_arena_set_allocated_sys_exit(
      ::perfetto::protos::SysExitFtraceEvent* sys_exit);
  ::perfetto::protos::SysExitFtraceEvent* unsafe_arena_release_sys_exit();
  // .perfetto.protos.ZeroFtraceEvent zero = 331;
  bool has_zero() const;
  private:
  bool _internal_has_zero() const;

  public:
  void clear_zero() ;
  const ::perfetto::protos::ZeroFtraceEvent& zero() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ZeroFtraceEvent* release_zero();
  ::perfetto::protos::ZeroFtraceEvent* mutable_zero();
  void set_allocated_zero(::perfetto::protos::ZeroFtraceEvent* zero);
  private:
  const ::perfetto::protos::ZeroFtraceEvent& _internal_zero() const;
  ::perfetto::protos::ZeroFtraceEvent* _internal_mutable_zero();
  public:
  void unsafe_arena_set_allocated_zero(
      ::perfetto::protos::ZeroFtraceEvent* zero);
  ::perfetto::protos::ZeroFtraceEvent* unsafe_arena_release_zero();
  // .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
  bool has_gpu_frequency() const;
  private:
  bool _internal_has_gpu_frequency() const;

  public:
  void clear_gpu_frequency() ;
  const ::perfetto::protos::GpuFrequencyFtraceEvent& gpu_frequency() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuFrequencyFtraceEvent* release_gpu_frequency();
  ::perfetto::protos::GpuFrequencyFtraceEvent* mutable_gpu_frequency();
  void set_allocated_gpu_frequency(::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency);
  private:
  const ::perfetto::protos::GpuFrequencyFtraceEvent& _internal_gpu_frequency() const;
  ::perfetto::protos::GpuFrequencyFtraceEvent* _internal_mutable_gpu_frequency();
  public:
  void unsafe_arena_set_allocated_gpu_frequency(
      ::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency);
  ::perfetto::protos::GpuFrequencyFtraceEvent* unsafe_arena_release_gpu_frequency();
  // .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
  bool has_sde_tracing_mark_write() const;
  private:
  bool _internal_has_sde_tracing_mark_write() const;

  public:
  void clear_sde_tracing_mark_write() ;
  const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& sde_tracing_mark_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* release_sde_tracing_mark_write();
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* mutable_sde_tracing_mark_write();
  void set_allocated_sde_tracing_mark_write(::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write);
  private:
  const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& _internal_sde_tracing_mark_write() const;
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* _internal_mutable_sde_tracing_mark_write();
  public:
  void unsafe_arena_set_allocated_sde_tracing_mark_write(
      ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write);
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* unsafe_arena_release_sde_tracing_mark_write();
  // .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
  bool has_mark_victim() const;
  private:
  bool _internal_has_mark_victim() const;

  public:
  void clear_mark_victim() ;
  const ::perfetto::protos::MarkVictimFtraceEvent& mark_victim() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MarkVictimFtraceEvent* release_mark_victim();
  ::perfetto::protos::MarkVictimFtraceEvent* mutable_mark_victim();
  void set_allocated_mark_victim(::perfetto::protos::MarkVictimFtraceEvent* mark_victim);
  private:
  const ::perfetto::protos::MarkVictimFtraceEvent& _internal_mark_victim() const;
  ::perfetto::protos::MarkVictimFtraceEvent* _internal_mutable_mark_victim();
  public:
  void unsafe_arena_set_allocated_mark_victim(
      ::perfetto::protos::MarkVictimFtraceEvent* mark_victim);
  ::perfetto::protos::MarkVictimFtraceEvent* unsafe_arena_release_mark_victim();
  // .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
  bool has_ion_stat() const;
  private:
  bool _internal_has_ion_stat() const;

  public:
  void clear_ion_stat() ;
  const ::perfetto::protos::IonStatFtraceEvent& ion_stat() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonStatFtraceEvent* release_ion_stat();
  ::perfetto::protos::IonStatFtraceEvent* mutable_ion_stat();
  void set_allocated_ion_stat(::perfetto::protos::IonStatFtraceEvent* ion_stat);
  private:
  const ::perfetto::protos::IonStatFtraceEvent& _internal_ion_stat() const;
  ::perfetto::protos::IonStatFtraceEvent* _internal_mutable_ion_stat();
  public:
  void unsafe_arena_set_allocated_ion_stat(
      ::perfetto::protos::IonStatFtraceEvent* ion_stat);
  ::perfetto::protos::IonStatFtraceEvent* unsafe_arena_release_ion_stat();
  // .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
  bool has_ion_buffer_create() const;
  private:
  bool _internal_has_ion_buffer_create() const;

  public:
  void clear_ion_buffer_create() ;
  const ::perfetto::protos::IonBufferCreateFtraceEvent& ion_buffer_create() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonBufferCreateFtraceEvent* release_ion_buffer_create();
  ::perfetto::protos::IonBufferCreateFtraceEvent* mutable_ion_buffer_create();
  void set_allocated_ion_buffer_create(::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create);
  private:
  const ::perfetto::protos::IonBufferCreateFtraceEvent& _internal_ion_buffer_create() const;
  ::perfetto::protos::IonBufferCreateFtraceEvent* _internal_mutable_ion_buffer_create();
  public:
  void unsafe_arena_set_allocated_ion_buffer_create(
      ::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create);
  ::perfetto::protos::IonBufferCreateFtraceEvent* unsafe_arena_release_ion_buffer_create();
  // .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
  bool has_ion_buffer_destroy() const;
  private:
  bool _internal_has_ion_buffer_destroy() const;

  public:
  void clear_ion_buffer_destroy() ;
  const ::perfetto::protos::IonBufferDestroyFtraceEvent& ion_buffer_destroy() const;
  PROTOBUF_NODISCARD ::perfetto::protos::IonBufferDestroyFtraceEvent* release_ion_buffer_destroy();
  ::perfetto::protos::IonBufferDestroyFtraceEvent* mutable_ion_buffer_destroy();
  void set_allocated_ion_buffer_destroy(::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy);
  private:
  const ::perfetto::protos::IonBufferDestroyFtraceEvent& _internal_ion_buffer_destroy() const;
  ::perfetto::protos::IonBufferDestroyFtraceEvent* _internal_mutable_ion_buffer_destroy();
  public:
  void unsafe_arena_set_allocated_ion_buffer_destroy(
      ::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy);
  ::perfetto::protos::IonBufferDestroyFtraceEvent* unsafe_arena_release_ion_buffer_destroy();
  // .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
  bool has_scm_call_start() const;
  private:
  bool _internal_has_scm_call_start() const;

  public:
  void clear_scm_call_start() ;
  const ::perfetto::protos::ScmCallStartFtraceEvent& scm_call_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ScmCallStartFtraceEvent* release_scm_call_start();
  ::perfetto::protos::ScmCallStartFtraceEvent* mutable_scm_call_start();
  void set_allocated_scm_call_start(::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start);
  private:
  const ::perfetto::protos::ScmCallStartFtraceEvent& _internal_scm_call_start() const;
  ::perfetto::protos::ScmCallStartFtraceEvent* _internal_mutable_scm_call_start();
  public:
  void unsafe_arena_set_allocated_scm_call_start(
      ::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start);
  ::perfetto::protos::ScmCallStartFtraceEvent* unsafe_arena_release_scm_call_start();
  // .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
  bool has_scm_call_end() const;
  private:
  bool _internal_has_scm_call_end() const;

  public:
  void clear_scm_call_end() ;
  const ::perfetto::protos::ScmCallEndFtraceEvent& scm_call_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ScmCallEndFtraceEvent* release_scm_call_end();
  ::perfetto::protos::ScmCallEndFtraceEvent* mutable_scm_call_end();
  void set_allocated_scm_call_end(::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end);
  private:
  const ::perfetto::protos::ScmCallEndFtraceEvent& _internal_scm_call_end() const;
  ::perfetto::protos::ScmCallEndFtraceEvent* _internal_mutable_scm_call_end();
  public:
  void unsafe_arena_set_allocated_scm_call_end(
      ::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end);
  ::perfetto::protos::ScmCallEndFtraceEvent* unsafe_arena_release_scm_call_end();
  // .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
  bool has_gpu_mem_total() const;
  private:
  bool _internal_has_gpu_mem_total() const;

  public:
  void clear_gpu_mem_total() ;
  const ::perfetto::protos::GpuMemTotalFtraceEvent& gpu_mem_total() const;
  PROTOBUF_NODISCARD ::perfetto::protos::GpuMemTotalFtraceEvent* release_gpu_mem_total();
  ::perfetto::protos::GpuMemTotalFtraceEvent* mutable_gpu_mem_total();
  void set_allocated_gpu_mem_total(::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total);
  private:
  const ::perfetto::protos::GpuMemTotalFtraceEvent& _internal_gpu_mem_total() const;
  ::perfetto::protos::GpuMemTotalFtraceEvent* _internal_mutable_gpu_mem_total();
  public:
  void unsafe_arena_set_allocated_gpu_mem_total(
      ::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total);
  ::perfetto::protos::GpuMemTotalFtraceEvent* unsafe_arena_release_gpu_mem_total();
  // .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
  bool has_thermal_temperature() const;
  private:
  bool _internal_has_thermal_temperature() const;

  public:
  void clear_thermal_temperature() ;
  const ::perfetto::protos::ThermalTemperatureFtraceEvent& thermal_temperature() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ThermalTemperatureFtraceEvent* release_thermal_temperature();
  ::perfetto::protos::ThermalTemperatureFtraceEvent* mutable_thermal_temperature();
  void set_allocated_thermal_temperature(::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature);
  private:
  const ::perfetto::protos::ThermalTemperatureFtraceEvent& _internal_thermal_temperature() const;
  ::perfetto::protos::ThermalTemperatureFtraceEvent* _internal_mutable_thermal_temperature();
  public:
  void unsafe_arena_set_allocated_thermal_temperature(
      ::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature);
  ::perfetto::protos::ThermalTemperatureFtraceEvent* unsafe_arena_release_thermal_temperature();
  // .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
  bool has_cdev_update() const;
  private:
  bool _internal_has_cdev_update() const;

  public:
  void clear_cdev_update() ;
  const ::perfetto::protos::CdevUpdateFtraceEvent& cdev_update() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CdevUpdateFtraceEvent* release_cdev_update();
  ::perfetto::protos::CdevUpdateFtraceEvent* mutable_cdev_update();
  void set_allocated_cdev_update(::perfetto::protos::CdevUpdateFtraceEvent* cdev_update);
  private:
  const ::perfetto::protos::CdevUpdateFtraceEvent& _internal_cdev_update() const;
  ::perfetto::protos::CdevUpdateFtraceEvent* _internal_mutable_cdev_update();
  public:
  void unsafe_arena_set_allocated_cdev_update(
      ::perfetto::protos::CdevUpdateFtraceEvent* cdev_update);
  ::perfetto::protos::CdevUpdateFtraceEvent* unsafe_arena_release_cdev_update();
  // .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
  bool has_cpuhp_exit() const;
  private:
  bool _internal_has_cpuhp_exit() const;

  public:
  void clear_cpuhp_exit() ;
  const ::perfetto::protos::CpuhpExitFtraceEvent& cpuhp_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuhpExitFtraceEvent* release_cpuhp_exit();
  ::perfetto::protos::CpuhpExitFtraceEvent* mutable_cpuhp_exit();
  void set_allocated_cpuhp_exit(::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit);
  private:
  const ::perfetto::protos::CpuhpExitFtraceEvent& _internal_cpuhp_exit() const;
  ::perfetto::protos::CpuhpExitFtraceEvent* _internal_mutable_cpuhp_exit();
  public:
  void unsafe_arena_set_allocated_cpuhp_exit(
      ::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit);
  ::perfetto::protos::CpuhpExitFtraceEvent* unsafe_arena_release_cpuhp_exit();
  // .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
  bool has_cpuhp_multi_enter() const;
  private:
  bool _internal_has_cpuhp_multi_enter() const;

  public:
  void clear_cpuhp_multi_enter() ;
  const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& cpuhp_multi_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuhpMultiEnterFtraceEvent* release_cpuhp_multi_enter();
  ::perfetto::protos::CpuhpMultiEnterFtraceEvent* mutable_cpuhp_multi_enter();
  void set_allocated_cpuhp_multi_enter(::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter);
  private:
  const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& _internal_cpuhp_multi_enter() const;
  ::perfetto::protos::CpuhpMultiEnterFtraceEvent* _internal_mutable_cpuhp_multi_enter();
  public:
  void unsafe_arena_set_allocated_cpuhp_multi_enter(
      ::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter);
  ::perfetto::protos::CpuhpMultiEnterFtraceEvent* unsafe_arena_release_cpuhp_multi_enter();
  // .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
  bool has_cpuhp_enter() const;
  private:
  bool _internal_has_cpuhp_enter() const;

  public:
  void clear_cpuhp_enter() ;
  const ::perfetto::protos::CpuhpEnterFtraceEvent& cpuhp_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuhpEnterFtraceEvent* release_cpuhp_enter();
  ::perfetto::protos::CpuhpEnterFtraceEvent* mutable_cpuhp_enter();
  void set_allocated_cpuhp_enter(::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter);
  private:
  const ::perfetto::protos::CpuhpEnterFtraceEvent& _internal_cpuhp_enter() const;
  ::perfetto::protos::CpuhpEnterFtraceEvent* _internal_mutable_cpuhp_enter();
  public:
  void unsafe_arena_set_allocated_cpuhp_enter(
      ::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter);
  ::perfetto::protos::CpuhpEnterFtraceEvent* unsafe_arena_release_cpuhp_enter();
  // .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
  bool has_cpuhp_latency() const;
  private:
  bool _internal_has_cpuhp_latency() const;

  public:
  void clear_cpuhp_latency() ;
  const ::perfetto::protos::CpuhpLatencyFtraceEvent& cpuhp_latency() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuhpLatencyFtraceEvent* release_cpuhp_latency();
  ::perfetto::protos::CpuhpLatencyFtraceEvent* mutable_cpuhp_latency();
  void set_allocated_cpuhp_latency(::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency);
  private:
  const ::perfetto::protos::CpuhpLatencyFtraceEvent& _internal_cpuhp_latency() const;
  ::perfetto::protos::CpuhpLatencyFtraceEvent* _internal_mutable_cpuhp_latency();
  public:
  void unsafe_arena_set_allocated_cpuhp_latency(
      ::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency);
  ::perfetto::protos::CpuhpLatencyFtraceEvent* unsafe_arena_release_cpuhp_latency();
  // .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
  bool has_fastrpc_dma_stat() const;
  private:
  bool _internal_has_fastrpc_dma_stat() const;

  public:
  void clear_fastrpc_dma_stat() ;
  const ::perfetto::protos::FastrpcDmaStatFtraceEvent& fastrpc_dma_stat() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FastrpcDmaStatFtraceEvent* release_fastrpc_dma_stat();
  ::perfetto::protos::FastrpcDmaStatFtraceEvent* mutable_fastrpc_dma_stat();
  void set_allocated_fastrpc_dma_stat(::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat);
  private:
  const ::perfetto::protos::FastrpcDmaStatFtraceEvent& _internal_fastrpc_dma_stat() const;
  ::perfetto::protos::FastrpcDmaStatFtraceEvent* _internal_mutable_fastrpc_dma_stat();
  public:
  void unsafe_arena_set_allocated_fastrpc_dma_stat(
      ::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat);
  ::perfetto::protos::FastrpcDmaStatFtraceEvent* unsafe_arena_release_fastrpc_dma_stat();
  // .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
  bool has_dpu_tracing_mark_write() const;
  private:
  bool _internal_has_dpu_tracing_mark_write() const;

  public:
  void clear_dpu_tracing_mark_write() ;
  const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& dpu_tracing_mark_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* release_dpu_tracing_mark_write();
  ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* mutable_dpu_tracing_mark_write();
  void set_allocated_dpu_tracing_mark_write(::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write);
  private:
  const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& _internal_dpu_tracing_mark_write() const;
  ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* _internal_mutable_dpu_tracing_mark_write();
  public:
  void unsafe_arena_set_allocated_dpu_tracing_mark_write(
      ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write);
  ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* unsafe_arena_release_dpu_tracing_mark_write();
  // .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
  bool has_g2d_tracing_mark_write() const;
  private:
  bool _internal_has_g2d_tracing_mark_write() const;

  public:
  void clear_g2d_tracing_mark_write() ;
  const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& g2d_tracing_mark_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* release_g2d_tracing_mark_write();
  ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* mutable_g2d_tracing_mark_write();
  void set_allocated_g2d_tracing_mark_write(::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write);
  private:
  const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& _internal_g2d_tracing_mark_write() const;
  ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* _internal_mutable_g2d_tracing_mark_write();
  public:
  void unsafe_arena_set_allocated_g2d_tracing_mark_write(
      ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write);
  ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* unsafe_arena_release_g2d_tracing_mark_write();
  // .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
  bool has_mali_tracing_mark_write() const;
  private:
  bool _internal_has_mali_tracing_mark_write() const;

  public:
  void clear_mali_tracing_mark_write() ;
  const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& mali_tracing_mark_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* release_mali_tracing_mark_write();
  ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mutable_mali_tracing_mark_write();
  void set_allocated_mali_tracing_mark_write(::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write);
  private:
  const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& _internal_mali_tracing_mark_write() const;
  ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* _internal_mutable_mali_tracing_mark_write();
  public:
  void unsafe_arena_set_allocated_mali_tracing_mark_write(
      ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write);
  ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* unsafe_arena_release_mali_tracing_mark_write();
  // .perfetto.protos.DmaHeapStatFtraceEvent dma_heap_stat = 351;
  bool has_dma_heap_stat() const;
  private:
  bool _internal_has_dma_heap_stat() const;

  public:
  void clear_dma_heap_stat() ;
  const ::perfetto::protos::DmaHeapStatFtraceEvent& dma_heap_stat() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaHeapStatFtraceEvent* release_dma_heap_stat();
  ::perfetto::protos::DmaHeapStatFtraceEvent* mutable_dma_heap_stat();
  void set_allocated_dma_heap_stat(::perfetto::protos::DmaHeapStatFtraceEvent* dma_heap_stat);
  private:
  const ::perfetto::protos::DmaHeapStatFtraceEvent& _internal_dma_heap_stat() const;
  ::perfetto::protos::DmaHeapStatFtraceEvent* _internal_mutable_dma_heap_stat();
  public:
  void unsafe_arena_set_allocated_dma_heap_stat(
      ::perfetto::protos::DmaHeapStatFtraceEvent* dma_heap_stat);
  ::perfetto::protos::DmaHeapStatFtraceEvent* unsafe_arena_release_dma_heap_stat();
  // .perfetto.protos.CpuhpPauseFtraceEvent cpuhp_pause = 352;
  bool has_cpuhp_pause() const;
  private:
  bool _internal_has_cpuhp_pause() const;

  public:
  void clear_cpuhp_pause() ;
  const ::perfetto::protos::CpuhpPauseFtraceEvent& cpuhp_pause() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CpuhpPauseFtraceEvent* release_cpuhp_pause();
  ::perfetto::protos::CpuhpPauseFtraceEvent* mutable_cpuhp_pause();
  void set_allocated_cpuhp_pause(::perfetto::protos::CpuhpPauseFtraceEvent* cpuhp_pause);
  private:
  const ::perfetto::protos::CpuhpPauseFtraceEvent& _internal_cpuhp_pause() const;
  ::perfetto::protos::CpuhpPauseFtraceEvent* _internal_mutable_cpuhp_pause();
  public:
  void unsafe_arena_set_allocated_cpuhp_pause(
      ::perfetto::protos::CpuhpPauseFtraceEvent* cpuhp_pause);
  ::perfetto::protos::CpuhpPauseFtraceEvent* unsafe_arena_release_cpuhp_pause();
  // .perfetto.protos.SchedPiSetprioFtraceEvent sched_pi_setprio = 353;
  bool has_sched_pi_setprio() const;
  private:
  bool _internal_has_sched_pi_setprio() const;

  public:
  void clear_sched_pi_setprio() ;
  const ::perfetto::protos::SchedPiSetprioFtraceEvent& sched_pi_setprio() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedPiSetprioFtraceEvent* release_sched_pi_setprio();
  ::perfetto::protos::SchedPiSetprioFtraceEvent* mutable_sched_pi_setprio();
  void set_allocated_sched_pi_setprio(::perfetto::protos::SchedPiSetprioFtraceEvent* sched_pi_setprio);
  private:
  const ::perfetto::protos::SchedPiSetprioFtraceEvent& _internal_sched_pi_setprio() const;
  ::perfetto::protos::SchedPiSetprioFtraceEvent* _internal_mutable_sched_pi_setprio();
  public:
  void unsafe_arena_set_allocated_sched_pi_setprio(
      ::perfetto::protos::SchedPiSetprioFtraceEvent* sched_pi_setprio);
  ::perfetto::protos::SchedPiSetprioFtraceEvent* unsafe_arena_release_sched_pi_setprio();
  // .perfetto.protos.SdeSdeEvtlogFtraceEvent sde_sde_evtlog = 354;
  bool has_sde_sde_evtlog() const;
  private:
  bool _internal_has_sde_sde_evtlog() const;

  public:
  void clear_sde_sde_evtlog() ;
  const ::perfetto::protos::SdeSdeEvtlogFtraceEvent& sde_sde_evtlog() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SdeSdeEvtlogFtraceEvent* release_sde_sde_evtlog();
  ::perfetto::protos::SdeSdeEvtlogFtraceEvent* mutable_sde_sde_evtlog();
  void set_allocated_sde_sde_evtlog(::perfetto::protos::SdeSdeEvtlogFtraceEvent* sde_sde_evtlog);
  private:
  const ::perfetto::protos::SdeSdeEvtlogFtraceEvent& _internal_sde_sde_evtlog() const;
  ::perfetto::protos::SdeSdeEvtlogFtraceEvent* _internal_mutable_sde_sde_evtlog();
  public:
  void unsafe_arena_set_allocated_sde_sde_evtlog(
      ::perfetto::protos::SdeSdeEvtlogFtraceEvent* sde_sde_evtlog);
  ::perfetto::protos::SdeSdeEvtlogFtraceEvent* unsafe_arena_release_sde_sde_evtlog();
  // .perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent sde_sde_perf_calc_crtc = 355;
  bool has_sde_sde_perf_calc_crtc() const;
  private:
  bool _internal_has_sde_sde_perf_calc_crtc() const;

  public:
  void clear_sde_sde_perf_calc_crtc() ;
  const ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent& sde_sde_perf_calc_crtc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* release_sde_sde_perf_calc_crtc();
  ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* mutable_sde_sde_perf_calc_crtc();
  void set_allocated_sde_sde_perf_calc_crtc(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* sde_sde_perf_calc_crtc);
  private:
  const ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent& _internal_sde_sde_perf_calc_crtc() const;
  ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* _internal_mutable_sde_sde_perf_calc_crtc();
  public:
  void unsafe_arena_set_allocated_sde_sde_perf_calc_crtc(
      ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* sde_sde_perf_calc_crtc);
  ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* unsafe_arena_release_sde_sde_perf_calc_crtc();
  // .perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent sde_sde_perf_crtc_update = 356;
  bool has_sde_sde_perf_crtc_update() const;
  private:
  bool _internal_has_sde_sde_perf_crtc_update() const;

  public:
  void clear_sde_sde_perf_crtc_update() ;
  const ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent& sde_sde_perf_crtc_update() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* release_sde_sde_perf_crtc_update();
  ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* mutable_sde_sde_perf_crtc_update();
  void set_allocated_sde_sde_perf_crtc_update(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* sde_sde_perf_crtc_update);
  private:
  const ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent& _internal_sde_sde_perf_crtc_update() const;
  ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* _internal_mutable_sde_sde_perf_crtc_update();
  public:
  void unsafe_arena_set_allocated_sde_sde_perf_crtc_update(
      ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* sde_sde_perf_crtc_update);
  ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* unsafe_arena_release_sde_sde_perf_crtc_update();
  // .perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent sde_sde_perf_set_qos_luts = 357;
  bool has_sde_sde_perf_set_qos_luts() const;
  private:
  bool _internal_has_sde_sde_perf_set_qos_luts() const;

  public:
  void clear_sde_sde_perf_set_qos_luts() ;
  const ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent& sde_sde_perf_set_qos_luts() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* release_sde_sde_perf_set_qos_luts();
  ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* mutable_sde_sde_perf_set_qos_luts();
  void set_allocated_sde_sde_perf_set_qos_luts(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* sde_sde_perf_set_qos_luts);
  private:
  const ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent& _internal_sde_sde_perf_set_qos_luts() const;
  ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* _internal_mutable_sde_sde_perf_set_qos_luts();
  public:
  void unsafe_arena_set_allocated_sde_sde_perf_set_qos_luts(
      ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* sde_sde_perf_set_qos_luts);
  ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* unsafe_arena_release_sde_sde_perf_set_qos_luts();
  // .perfetto.protos.SdeSdePerfUpdateBusFtraceEvent sde_sde_perf_update_bus = 358;
  bool has_sde_sde_perf_update_bus() const;
  private:
  bool _internal_has_sde_sde_perf_update_bus() const;

  public:
  void clear_sde_sde_perf_update_bus() ;
  const ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent& sde_sde_perf_update_bus() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* release_sde_sde_perf_update_bus();
  ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* mutable_sde_sde_perf_update_bus();
  void set_allocated_sde_sde_perf_update_bus(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* sde_sde_perf_update_bus);
  private:
  const ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent& _internal_sde_sde_perf_update_bus() const;
  ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* _internal_mutable_sde_sde_perf_update_bus();
  public:
  void unsafe_arena_set_allocated_sde_sde_perf_update_bus(
      ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* sde_sde_perf_update_bus);
  ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* unsafe_arena_release_sde_sde_perf_update_bus();
  // .perfetto.protos.RssStatThrottledFtraceEvent rss_stat_throttled = 359;
  bool has_rss_stat_throttled() const;
  private:
  bool _internal_has_rss_stat_throttled() const;

  public:
  void clear_rss_stat_throttled() ;
  const ::perfetto::protos::RssStatThrottledFtraceEvent& rss_stat_throttled() const;
  PROTOBUF_NODISCARD ::perfetto::protos::RssStatThrottledFtraceEvent* release_rss_stat_throttled();
  ::perfetto::protos::RssStatThrottledFtraceEvent* mutable_rss_stat_throttled();
  void set_allocated_rss_stat_throttled(::perfetto::protos::RssStatThrottledFtraceEvent* rss_stat_throttled);
  private:
  const ::perfetto::protos::RssStatThrottledFtraceEvent& _internal_rss_stat_throttled() const;
  ::perfetto::protos::RssStatThrottledFtraceEvent* _internal_mutable_rss_stat_throttled();
  public:
  void unsafe_arena_set_allocated_rss_stat_throttled(
      ::perfetto::protos::RssStatThrottledFtraceEvent* rss_stat_throttled);
  ::perfetto::protos::RssStatThrottledFtraceEvent* unsafe_arena_release_rss_stat_throttled();
  // .perfetto.protos.NetifReceiveSkbFtraceEvent netif_receive_skb = 360;
  bool has_netif_receive_skb() const;
  private:
  bool _internal_has_netif_receive_skb() const;

  public:
  void clear_netif_receive_skb() ;
  const ::perfetto::protos::NetifReceiveSkbFtraceEvent& netif_receive_skb() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetifReceiveSkbFtraceEvent* release_netif_receive_skb();
  ::perfetto::protos::NetifReceiveSkbFtraceEvent* mutable_netif_receive_skb();
  void set_allocated_netif_receive_skb(::perfetto::protos::NetifReceiveSkbFtraceEvent* netif_receive_skb);
  private:
  const ::perfetto::protos::NetifReceiveSkbFtraceEvent& _internal_netif_receive_skb() const;
  ::perfetto::protos::NetifReceiveSkbFtraceEvent* _internal_mutable_netif_receive_skb();
  public:
  void unsafe_arena_set_allocated_netif_receive_skb(
      ::perfetto::protos::NetifReceiveSkbFtraceEvent* netif_receive_skb);
  ::perfetto::protos::NetifReceiveSkbFtraceEvent* unsafe_arena_release_netif_receive_skb();
  // .perfetto.protos.NetDevXmitFtraceEvent net_dev_xmit = 361;
  bool has_net_dev_xmit() const;
  private:
  bool _internal_has_net_dev_xmit() const;

  public:
  void clear_net_dev_xmit() ;
  const ::perfetto::protos::NetDevXmitFtraceEvent& net_dev_xmit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NetDevXmitFtraceEvent* release_net_dev_xmit();
  ::perfetto::protos::NetDevXmitFtraceEvent* mutable_net_dev_xmit();
  void set_allocated_net_dev_xmit(::perfetto::protos::NetDevXmitFtraceEvent* net_dev_xmit);
  private:
  const ::perfetto::protos::NetDevXmitFtraceEvent& _internal_net_dev_xmit() const;
  ::perfetto::protos::NetDevXmitFtraceEvent* _internal_mutable_net_dev_xmit();
  public:
  void unsafe_arena_set_allocated_net_dev_xmit(
      ::perfetto::protos::NetDevXmitFtraceEvent* net_dev_xmit);
  ::perfetto::protos::NetDevXmitFtraceEvent* unsafe_arena_release_net_dev_xmit();
  // .perfetto.protos.InetSockSetStateFtraceEvent inet_sock_set_state = 362;
  bool has_inet_sock_set_state() const;
  private:
  bool _internal_has_inet_sock_set_state() const;

  public:
  void clear_inet_sock_set_state() ;
  const ::perfetto::protos::InetSockSetStateFtraceEvent& inet_sock_set_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::InetSockSetStateFtraceEvent* release_inet_sock_set_state();
  ::perfetto::protos::InetSockSetStateFtraceEvent* mutable_inet_sock_set_state();
  void set_allocated_inet_sock_set_state(::perfetto::protos::InetSockSetStateFtraceEvent* inet_sock_set_state);
  private:
  const ::perfetto::protos::InetSockSetStateFtraceEvent& _internal_inet_sock_set_state() const;
  ::perfetto::protos::InetSockSetStateFtraceEvent* _internal_mutable_inet_sock_set_state();
  public:
  void unsafe_arena_set_allocated_inet_sock_set_state(
      ::perfetto::protos::InetSockSetStateFtraceEvent* inet_sock_set_state);
  ::perfetto::protos::InetSockSetStateFtraceEvent* unsafe_arena_release_inet_sock_set_state();
  // .perfetto.protos.TcpRetransmitSkbFtraceEvent tcp_retransmit_skb = 363;
  bool has_tcp_retransmit_skb() const;
  private:
  bool _internal_has_tcp_retransmit_skb() const;

  public:
  void clear_tcp_retransmit_skb() ;
  const ::perfetto::protos::TcpRetransmitSkbFtraceEvent& tcp_retransmit_skb() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TcpRetransmitSkbFtraceEvent* release_tcp_retransmit_skb();
  ::perfetto::protos::TcpRetransmitSkbFtraceEvent* mutable_tcp_retransmit_skb();
  void set_allocated_tcp_retransmit_skb(::perfetto::protos::TcpRetransmitSkbFtraceEvent* tcp_retransmit_skb);
  private:
  const ::perfetto::protos::TcpRetransmitSkbFtraceEvent& _internal_tcp_retransmit_skb() const;
  ::perfetto::protos::TcpRetransmitSkbFtraceEvent* _internal_mutable_tcp_retransmit_skb();
  public:
  void unsafe_arena_set_allocated_tcp_retransmit_skb(
      ::perfetto::protos::TcpRetransmitSkbFtraceEvent* tcp_retransmit_skb);
  ::perfetto::protos::TcpRetransmitSkbFtraceEvent* unsafe_arena_release_tcp_retransmit_skb();
  // .perfetto.protos.CrosEcSensorhubDataFtraceEvent cros_ec_sensorhub_data = 364;
  bool has_cros_ec_sensorhub_data() const;
  private:
  bool _internal_has_cros_ec_sensorhub_data() const;

  public:
  void clear_cros_ec_sensorhub_data() ;
  const ::perfetto::protos::CrosEcSensorhubDataFtraceEvent& cros_ec_sensorhub_data() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* release_cros_ec_sensorhub_data();
  ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* mutable_cros_ec_sensorhub_data();
  void set_allocated_cros_ec_sensorhub_data(::perfetto::protos::CrosEcSensorhubDataFtraceEvent* cros_ec_sensorhub_data);
  private:
  const ::perfetto::protos::CrosEcSensorhubDataFtraceEvent& _internal_cros_ec_sensorhub_data() const;
  ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* _internal_mutable_cros_ec_sensorhub_data();
  public:
  void unsafe_arena_set_allocated_cros_ec_sensorhub_data(
      ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* cros_ec_sensorhub_data);
  ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* unsafe_arena_release_cros_ec_sensorhub_data();
  // .perfetto.protos.NapiGroReceiveEntryFtraceEvent napi_gro_receive_entry = 365;
  bool has_napi_gro_receive_entry() const;
  private:
  bool _internal_has_napi_gro_receive_entry() const;

  public:
  void clear_napi_gro_receive_entry() ;
  const ::perfetto::protos::NapiGroReceiveEntryFtraceEvent& napi_gro_receive_entry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* release_napi_gro_receive_entry();
  ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* mutable_napi_gro_receive_entry();
  void set_allocated_napi_gro_receive_entry(::perfetto::protos::NapiGroReceiveEntryFtraceEvent* napi_gro_receive_entry);
  private:
  const ::perfetto::protos::NapiGroReceiveEntryFtraceEvent& _internal_napi_gro_receive_entry() const;
  ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* _internal_mutable_napi_gro_receive_entry();
  public:
  void unsafe_arena_set_allocated_napi_gro_receive_entry(
      ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* napi_gro_receive_entry);
  ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* unsafe_arena_release_napi_gro_receive_entry();
  // .perfetto.protos.NapiGroReceiveExitFtraceEvent napi_gro_receive_exit = 366;
  bool has_napi_gro_receive_exit() const;
  private:
  bool _internal_has_napi_gro_receive_exit() const;

  public:
  void clear_napi_gro_receive_exit() ;
  const ::perfetto::protos::NapiGroReceiveExitFtraceEvent& napi_gro_receive_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::NapiGroReceiveExitFtraceEvent* release_napi_gro_receive_exit();
  ::perfetto::protos::NapiGroReceiveExitFtraceEvent* mutable_napi_gro_receive_exit();
  void set_allocated_napi_gro_receive_exit(::perfetto::protos::NapiGroReceiveExitFtraceEvent* napi_gro_receive_exit);
  private:
  const ::perfetto::protos::NapiGroReceiveExitFtraceEvent& _internal_napi_gro_receive_exit() const;
  ::perfetto::protos::NapiGroReceiveExitFtraceEvent* _internal_mutable_napi_gro_receive_exit();
  public:
  void unsafe_arena_set_allocated_napi_gro_receive_exit(
      ::perfetto::protos::NapiGroReceiveExitFtraceEvent* napi_gro_receive_exit);
  ::perfetto::protos::NapiGroReceiveExitFtraceEvent* unsafe_arena_release_napi_gro_receive_exit();
  // .perfetto.protos.KfreeSkbFtraceEvent kfree_skb = 367;
  bool has_kfree_skb() const;
  private:
  bool _internal_has_kfree_skb() const;

  public:
  void clear_kfree_skb() ;
  const ::perfetto::protos::KfreeSkbFtraceEvent& kfree_skb() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KfreeSkbFtraceEvent* release_kfree_skb();
  ::perfetto::protos::KfreeSkbFtraceEvent* mutable_kfree_skb();
  void set_allocated_kfree_skb(::perfetto::protos::KfreeSkbFtraceEvent* kfree_skb);
  private:
  const ::perfetto::protos::KfreeSkbFtraceEvent& _internal_kfree_skb() const;
  ::perfetto::protos::KfreeSkbFtraceEvent* _internal_mutable_kfree_skb();
  public:
  void unsafe_arena_set_allocated_kfree_skb(
      ::perfetto::protos::KfreeSkbFtraceEvent* kfree_skb);
  ::perfetto::protos::KfreeSkbFtraceEvent* unsafe_arena_release_kfree_skb();
  // .perfetto.protos.KvmAccessFaultFtraceEvent kvm_access_fault = 368;
  bool has_kvm_access_fault() const;
  private:
  bool _internal_has_kvm_access_fault() const;

  public:
  void clear_kvm_access_fault() ;
  const ::perfetto::protos::KvmAccessFaultFtraceEvent& kvm_access_fault() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmAccessFaultFtraceEvent* release_kvm_access_fault();
  ::perfetto::protos::KvmAccessFaultFtraceEvent* mutable_kvm_access_fault();
  void set_allocated_kvm_access_fault(::perfetto::protos::KvmAccessFaultFtraceEvent* kvm_access_fault);
  private:
  const ::perfetto::protos::KvmAccessFaultFtraceEvent& _internal_kvm_access_fault() const;
  ::perfetto::protos::KvmAccessFaultFtraceEvent* _internal_mutable_kvm_access_fault();
  public:
  void unsafe_arena_set_allocated_kvm_access_fault(
      ::perfetto::protos::KvmAccessFaultFtraceEvent* kvm_access_fault);
  ::perfetto::protos::KvmAccessFaultFtraceEvent* unsafe_arena_release_kvm_access_fault();
  // .perfetto.protos.KvmAckIrqFtraceEvent kvm_ack_irq = 369;
  bool has_kvm_ack_irq() const;
  private:
  bool _internal_has_kvm_ack_irq() const;

  public:
  void clear_kvm_ack_irq() ;
  const ::perfetto::protos::KvmAckIrqFtraceEvent& kvm_ack_irq() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmAckIrqFtraceEvent* release_kvm_ack_irq();
  ::perfetto::protos::KvmAckIrqFtraceEvent* mutable_kvm_ack_irq();
  void set_allocated_kvm_ack_irq(::perfetto::protos::KvmAckIrqFtraceEvent* kvm_ack_irq);
  private:
  const ::perfetto::protos::KvmAckIrqFtraceEvent& _internal_kvm_ack_irq() const;
  ::perfetto::protos::KvmAckIrqFtraceEvent* _internal_mutable_kvm_ack_irq();
  public:
  void unsafe_arena_set_allocated_kvm_ack_irq(
      ::perfetto::protos::KvmAckIrqFtraceEvent* kvm_ack_irq);
  ::perfetto::protos::KvmAckIrqFtraceEvent* unsafe_arena_release_kvm_ack_irq();
  // .perfetto.protos.KvmAgeHvaFtraceEvent kvm_age_hva = 370;
  bool has_kvm_age_hva() const;
  private:
  bool _internal_has_kvm_age_hva() const;

  public:
  void clear_kvm_age_hva() ;
  const ::perfetto::protos::KvmAgeHvaFtraceEvent& kvm_age_hva() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmAgeHvaFtraceEvent* release_kvm_age_hva();
  ::perfetto::protos::KvmAgeHvaFtraceEvent* mutable_kvm_age_hva();
  void set_allocated_kvm_age_hva(::perfetto::protos::KvmAgeHvaFtraceEvent* kvm_age_hva);
  private:
  const ::perfetto::protos::KvmAgeHvaFtraceEvent& _internal_kvm_age_hva() const;
  ::perfetto::protos::KvmAgeHvaFtraceEvent* _internal_mutable_kvm_age_hva();
  public:
  void unsafe_arena_set_allocated_kvm_age_hva(
      ::perfetto::protos::KvmAgeHvaFtraceEvent* kvm_age_hva);
  ::perfetto::protos::KvmAgeHvaFtraceEvent* unsafe_arena_release_kvm_age_hva();
  // .perfetto.protos.KvmAgePageFtraceEvent kvm_age_page = 371;
  bool has_kvm_age_page() const;
  private:
  bool _internal_has_kvm_age_page() const;

  public:
  void clear_kvm_age_page() ;
  const ::perfetto::protos::KvmAgePageFtraceEvent& kvm_age_page() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmAgePageFtraceEvent* release_kvm_age_page();
  ::perfetto::protos::KvmAgePageFtraceEvent* mutable_kvm_age_page();
  void set_allocated_kvm_age_page(::perfetto::protos::KvmAgePageFtraceEvent* kvm_age_page);
  private:
  const ::perfetto::protos::KvmAgePageFtraceEvent& _internal_kvm_age_page() const;
  ::perfetto::protos::KvmAgePageFtraceEvent* _internal_mutable_kvm_age_page();
  public:
  void unsafe_arena_set_allocated_kvm_age_page(
      ::perfetto::protos::KvmAgePageFtraceEvent* kvm_age_page);
  ::perfetto::protos::KvmAgePageFtraceEvent* unsafe_arena_release_kvm_age_page();
  // .perfetto.protos.KvmArmClearDebugFtraceEvent kvm_arm_clear_debug = 372;
  bool has_kvm_arm_clear_debug() const;
  private:
  bool _internal_has_kvm_arm_clear_debug() const;

  public:
  void clear_kvm_arm_clear_debug() ;
  const ::perfetto::protos::KvmArmClearDebugFtraceEvent& kvm_arm_clear_debug() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmArmClearDebugFtraceEvent* release_kvm_arm_clear_debug();
  ::perfetto::protos::KvmArmClearDebugFtraceEvent* mutable_kvm_arm_clear_debug();
  void set_allocated_kvm_arm_clear_debug(::perfetto::protos::KvmArmClearDebugFtraceEvent* kvm_arm_clear_debug);
  private:
  const ::perfetto::protos::KvmArmClearDebugFtraceEvent& _internal_kvm_arm_clear_debug() const;
  ::perfetto::protos::KvmArmClearDebugFtraceEvent* _internal_mutable_kvm_arm_clear_debug();
  public:
  void unsafe_arena_set_allocated_kvm_arm_clear_debug(
      ::perfetto::protos::KvmArmClearDebugFtraceEvent* kvm_arm_clear_debug);
  ::perfetto::protos::KvmArmClearDebugFtraceEvent* unsafe_arena_release_kvm_arm_clear_debug();
  // .perfetto.protos.KvmArmSetDreg32FtraceEvent kvm_arm_set_dreg32 = 373;
  bool has_kvm_arm_set_dreg32() const;
  private:
  bool _internal_has_kvm_arm_set_dreg32() const;

  public:
  void clear_kvm_arm_set_dreg32() ;
  const ::perfetto::protos::KvmArmSetDreg32FtraceEvent& kvm_arm_set_dreg32() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmArmSetDreg32FtraceEvent* release_kvm_arm_set_dreg32();
  ::perfetto::protos::KvmArmSetDreg32FtraceEvent* mutable_kvm_arm_set_dreg32();
  void set_allocated_kvm_arm_set_dreg32(::perfetto::protos::KvmArmSetDreg32FtraceEvent* kvm_arm_set_dreg32);
  private:
  const ::perfetto::protos::KvmArmSetDreg32FtraceEvent& _internal_kvm_arm_set_dreg32() const;
  ::perfetto::protos::KvmArmSetDreg32FtraceEvent* _internal_mutable_kvm_arm_set_dreg32();
  public:
  void unsafe_arena_set_allocated_kvm_arm_set_dreg32(
      ::perfetto::protos::KvmArmSetDreg32FtraceEvent* kvm_arm_set_dreg32);
  ::perfetto::protos::KvmArmSetDreg32FtraceEvent* unsafe_arena_release_kvm_arm_set_dreg32();
  // .perfetto.protos.KvmArmSetRegsetFtraceEvent kvm_arm_set_regset = 374;
  bool has_kvm_arm_set_regset() const;
  private:
  bool _internal_has_kvm_arm_set_regset() const;

  public:
  void clear_kvm_arm_set_regset() ;
  const ::perfetto::protos::KvmArmSetRegsetFtraceEvent& kvm_arm_set_regset() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmArmSetRegsetFtraceEvent* release_kvm_arm_set_regset();
  ::perfetto::protos::KvmArmSetRegsetFtraceEvent* mutable_kvm_arm_set_regset();
  void set_allocated_kvm_arm_set_regset(::perfetto::protos::KvmArmSetRegsetFtraceEvent* kvm_arm_set_regset);
  private:
  const ::perfetto::protos::KvmArmSetRegsetFtraceEvent& _internal_kvm_arm_set_regset() const;
  ::perfetto::protos::KvmArmSetRegsetFtraceEvent* _internal_mutable_kvm_arm_set_regset();
  public:
  void unsafe_arena_set_allocated_kvm_arm_set_regset(
      ::perfetto::protos::KvmArmSetRegsetFtraceEvent* kvm_arm_set_regset);
  ::perfetto::protos::KvmArmSetRegsetFtraceEvent* unsafe_arena_release_kvm_arm_set_regset();
  // .perfetto.protos.KvmArmSetupDebugFtraceEvent kvm_arm_setup_debug = 375;
  bool has_kvm_arm_setup_debug() const;
  private:
  bool _internal_has_kvm_arm_setup_debug() const;

  public:
  void clear_kvm_arm_setup_debug() ;
  const ::perfetto::protos::KvmArmSetupDebugFtraceEvent& kvm_arm_setup_debug() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmArmSetupDebugFtraceEvent* release_kvm_arm_setup_debug();
  ::perfetto::protos::KvmArmSetupDebugFtraceEvent* mutable_kvm_arm_setup_debug();
  void set_allocated_kvm_arm_setup_debug(::perfetto::protos::KvmArmSetupDebugFtraceEvent* kvm_arm_setup_debug);
  private:
  const ::perfetto::protos::KvmArmSetupDebugFtraceEvent& _internal_kvm_arm_setup_debug() const;
  ::perfetto::protos::KvmArmSetupDebugFtraceEvent* _internal_mutable_kvm_arm_setup_debug();
  public:
  void unsafe_arena_set_allocated_kvm_arm_setup_debug(
      ::perfetto::protos::KvmArmSetupDebugFtraceEvent* kvm_arm_setup_debug);
  ::perfetto::protos::KvmArmSetupDebugFtraceEvent* unsafe_arena_release_kvm_arm_setup_debug();
  // .perfetto.protos.KvmEntryFtraceEvent kvm_entry = 376;
  bool has_kvm_entry() const;
  private:
  bool _internal_has_kvm_entry() const;

  public:
  void clear_kvm_entry() ;
  const ::perfetto::protos::KvmEntryFtraceEvent& kvm_entry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmEntryFtraceEvent* release_kvm_entry();
  ::perfetto::protos::KvmEntryFtraceEvent* mutable_kvm_entry();
  void set_allocated_kvm_entry(::perfetto::protos::KvmEntryFtraceEvent* kvm_entry);
  private:
  const ::perfetto::protos::KvmEntryFtraceEvent& _internal_kvm_entry() const;
  ::perfetto::protos::KvmEntryFtraceEvent* _internal_mutable_kvm_entry();
  public:
  void unsafe_arena_set_allocated_kvm_entry(
      ::perfetto::protos::KvmEntryFtraceEvent* kvm_entry);
  ::perfetto::protos::KvmEntryFtraceEvent* unsafe_arena_release_kvm_entry();
  // .perfetto.protos.KvmExitFtraceEvent kvm_exit = 377;
  bool has_kvm_exit() const;
  private:
  bool _internal_has_kvm_exit() const;

  public:
  void clear_kvm_exit() ;
  const ::perfetto::protos::KvmExitFtraceEvent& kvm_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmExitFtraceEvent* release_kvm_exit();
  ::perfetto::protos::KvmExitFtraceEvent* mutable_kvm_exit();
  void set_allocated_kvm_exit(::perfetto::protos::KvmExitFtraceEvent* kvm_exit);
  private:
  const ::perfetto::protos::KvmExitFtraceEvent& _internal_kvm_exit() const;
  ::perfetto::protos::KvmExitFtraceEvent* _internal_mutable_kvm_exit();
  public:
  void unsafe_arena_set_allocated_kvm_exit(
      ::perfetto::protos::KvmExitFtraceEvent* kvm_exit);
  ::perfetto::protos::KvmExitFtraceEvent* unsafe_arena_release_kvm_exit();
  // .perfetto.protos.KvmFpuFtraceEvent kvm_fpu = 378;
  bool has_kvm_fpu() const;
  private:
  bool _internal_has_kvm_fpu() const;

  public:
  void clear_kvm_fpu() ;
  const ::perfetto::protos::KvmFpuFtraceEvent& kvm_fpu() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmFpuFtraceEvent* release_kvm_fpu();
  ::perfetto::protos::KvmFpuFtraceEvent* mutable_kvm_fpu();
  void set_allocated_kvm_fpu(::perfetto::protos::KvmFpuFtraceEvent* kvm_fpu);
  private:
  const ::perfetto::protos::KvmFpuFtraceEvent& _internal_kvm_fpu() const;
  ::perfetto::protos::KvmFpuFtraceEvent* _internal_mutable_kvm_fpu();
  public:
  void unsafe_arena_set_allocated_kvm_fpu(
      ::perfetto::protos::KvmFpuFtraceEvent* kvm_fpu);
  ::perfetto::protos::KvmFpuFtraceEvent* unsafe_arena_release_kvm_fpu();
  // .perfetto.protos.KvmGetTimerMapFtraceEvent kvm_get_timer_map = 379;
  bool has_kvm_get_timer_map() const;
  private:
  bool _internal_has_kvm_get_timer_map() const;

  public:
  void clear_kvm_get_timer_map() ;
  const ::perfetto::protos::KvmGetTimerMapFtraceEvent& kvm_get_timer_map() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmGetTimerMapFtraceEvent* release_kvm_get_timer_map();
  ::perfetto::protos::KvmGetTimerMapFtraceEvent* mutable_kvm_get_timer_map();
  void set_allocated_kvm_get_timer_map(::perfetto::protos::KvmGetTimerMapFtraceEvent* kvm_get_timer_map);
  private:
  const ::perfetto::protos::KvmGetTimerMapFtraceEvent& _internal_kvm_get_timer_map() const;
  ::perfetto::protos::KvmGetTimerMapFtraceEvent* _internal_mutable_kvm_get_timer_map();
  public:
  void unsafe_arena_set_allocated_kvm_get_timer_map(
      ::perfetto::protos::KvmGetTimerMapFtraceEvent* kvm_get_timer_map);
  ::perfetto::protos::KvmGetTimerMapFtraceEvent* unsafe_arena_release_kvm_get_timer_map();
  // .perfetto.protos.KvmGuestFaultFtraceEvent kvm_guest_fault = 380;
  bool has_kvm_guest_fault() const;
  private:
  bool _internal_has_kvm_guest_fault() const;

  public:
  void clear_kvm_guest_fault() ;
  const ::perfetto::protos::KvmGuestFaultFtraceEvent& kvm_guest_fault() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmGuestFaultFtraceEvent* release_kvm_guest_fault();
  ::perfetto::protos::KvmGuestFaultFtraceEvent* mutable_kvm_guest_fault();
  void set_allocated_kvm_guest_fault(::perfetto::protos::KvmGuestFaultFtraceEvent* kvm_guest_fault);
  private:
  const ::perfetto::protos::KvmGuestFaultFtraceEvent& _internal_kvm_guest_fault() const;
  ::perfetto::protos::KvmGuestFaultFtraceEvent* _internal_mutable_kvm_guest_fault();
  public:
  void unsafe_arena_set_allocated_kvm_guest_fault(
      ::perfetto::protos::KvmGuestFaultFtraceEvent* kvm_guest_fault);
  ::perfetto::protos::KvmGuestFaultFtraceEvent* unsafe_arena_release_kvm_guest_fault();
  // .perfetto.protos.KvmHandleSysRegFtraceEvent kvm_handle_sys_reg = 381;
  bool has_kvm_handle_sys_reg() const;
  private:
  bool _internal_has_kvm_handle_sys_reg() const;

  public:
  void clear_kvm_handle_sys_reg() ;
  const ::perfetto::protos::KvmHandleSysRegFtraceEvent& kvm_handle_sys_reg() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmHandleSysRegFtraceEvent* release_kvm_handle_sys_reg();
  ::perfetto::protos::KvmHandleSysRegFtraceEvent* mutable_kvm_handle_sys_reg();
  void set_allocated_kvm_handle_sys_reg(::perfetto::protos::KvmHandleSysRegFtraceEvent* kvm_handle_sys_reg);
  private:
  const ::perfetto::protos::KvmHandleSysRegFtraceEvent& _internal_kvm_handle_sys_reg() const;
  ::perfetto::protos::KvmHandleSysRegFtraceEvent* _internal_mutable_kvm_handle_sys_reg();
  public:
  void unsafe_arena_set_allocated_kvm_handle_sys_reg(
      ::perfetto::protos::KvmHandleSysRegFtraceEvent* kvm_handle_sys_reg);
  ::perfetto::protos::KvmHandleSysRegFtraceEvent* unsafe_arena_release_kvm_handle_sys_reg();
  // .perfetto.protos.KvmHvcArm64FtraceEvent kvm_hvc_arm64 = 382;
  bool has_kvm_hvc_arm64() const;
  private:
  bool _internal_has_kvm_hvc_arm64() const;

  public:
  void clear_kvm_hvc_arm64() ;
  const ::perfetto::protos::KvmHvcArm64FtraceEvent& kvm_hvc_arm64() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmHvcArm64FtraceEvent* release_kvm_hvc_arm64();
  ::perfetto::protos::KvmHvcArm64FtraceEvent* mutable_kvm_hvc_arm64();
  void set_allocated_kvm_hvc_arm64(::perfetto::protos::KvmHvcArm64FtraceEvent* kvm_hvc_arm64);
  private:
  const ::perfetto::protos::KvmHvcArm64FtraceEvent& _internal_kvm_hvc_arm64() const;
  ::perfetto::protos::KvmHvcArm64FtraceEvent* _internal_mutable_kvm_hvc_arm64();
  public:
  void unsafe_arena_set_allocated_kvm_hvc_arm64(
      ::perfetto::protos::KvmHvcArm64FtraceEvent* kvm_hvc_arm64);
  ::perfetto::protos::KvmHvcArm64FtraceEvent* unsafe_arena_release_kvm_hvc_arm64();
  // .perfetto.protos.KvmIrqLineFtraceEvent kvm_irq_line = 383;
  bool has_kvm_irq_line() const;
  private:
  bool _internal_has_kvm_irq_line() const;

  public:
  void clear_kvm_irq_line() ;
  const ::perfetto::protos::KvmIrqLineFtraceEvent& kvm_irq_line() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmIrqLineFtraceEvent* release_kvm_irq_line();
  ::perfetto::protos::KvmIrqLineFtraceEvent* mutable_kvm_irq_line();
  void set_allocated_kvm_irq_line(::perfetto::protos::KvmIrqLineFtraceEvent* kvm_irq_line);
  private:
  const ::perfetto::protos::KvmIrqLineFtraceEvent& _internal_kvm_irq_line() const;
  ::perfetto::protos::KvmIrqLineFtraceEvent* _internal_mutable_kvm_irq_line();
  public:
  void unsafe_arena_set_allocated_kvm_irq_line(
      ::perfetto::protos::KvmIrqLineFtraceEvent* kvm_irq_line);
  ::perfetto::protos::KvmIrqLineFtraceEvent* unsafe_arena_release_kvm_irq_line();
  // .perfetto.protos.KvmMmioFtraceEvent kvm_mmio = 384;
  bool has_kvm_mmio() const;
  private:
  bool _internal_has_kvm_mmio() const;

  public:
  void clear_kvm_mmio() ;
  const ::perfetto::protos::KvmMmioFtraceEvent& kvm_mmio() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmMmioFtraceEvent* release_kvm_mmio();
  ::perfetto::protos::KvmMmioFtraceEvent* mutable_kvm_mmio();
  void set_allocated_kvm_mmio(::perfetto::protos::KvmMmioFtraceEvent* kvm_mmio);
  private:
  const ::perfetto::protos::KvmMmioFtraceEvent& _internal_kvm_mmio() const;
  ::perfetto::protos::KvmMmioFtraceEvent* _internal_mutable_kvm_mmio();
  public:
  void unsafe_arena_set_allocated_kvm_mmio(
      ::perfetto::protos::KvmMmioFtraceEvent* kvm_mmio);
  ::perfetto::protos::KvmMmioFtraceEvent* unsafe_arena_release_kvm_mmio();
  // .perfetto.protos.KvmMmioEmulateFtraceEvent kvm_mmio_emulate = 385;
  bool has_kvm_mmio_emulate() const;
  private:
  bool _internal_has_kvm_mmio_emulate() const;

  public:
  void clear_kvm_mmio_emulate() ;
  const ::perfetto::protos::KvmMmioEmulateFtraceEvent& kvm_mmio_emulate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmMmioEmulateFtraceEvent* release_kvm_mmio_emulate();
  ::perfetto::protos::KvmMmioEmulateFtraceEvent* mutable_kvm_mmio_emulate();
  void set_allocated_kvm_mmio_emulate(::perfetto::protos::KvmMmioEmulateFtraceEvent* kvm_mmio_emulate);
  private:
  const ::perfetto::protos::KvmMmioEmulateFtraceEvent& _internal_kvm_mmio_emulate() const;
  ::perfetto::protos::KvmMmioEmulateFtraceEvent* _internal_mutable_kvm_mmio_emulate();
  public:
  void unsafe_arena_set_allocated_kvm_mmio_emulate(
      ::perfetto::protos::KvmMmioEmulateFtraceEvent* kvm_mmio_emulate);
  ::perfetto::protos::KvmMmioEmulateFtraceEvent* unsafe_arena_release_kvm_mmio_emulate();
  // .perfetto.protos.KvmSetGuestDebugFtraceEvent kvm_set_guest_debug = 386;
  bool has_kvm_set_guest_debug() const;
  private:
  bool _internal_has_kvm_set_guest_debug() const;

  public:
  void clear_kvm_set_guest_debug() ;
  const ::perfetto::protos::KvmSetGuestDebugFtraceEvent& kvm_set_guest_debug() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmSetGuestDebugFtraceEvent* release_kvm_set_guest_debug();
  ::perfetto::protos::KvmSetGuestDebugFtraceEvent* mutable_kvm_set_guest_debug();
  void set_allocated_kvm_set_guest_debug(::perfetto::protos::KvmSetGuestDebugFtraceEvent* kvm_set_guest_debug);
  private:
  const ::perfetto::protos::KvmSetGuestDebugFtraceEvent& _internal_kvm_set_guest_debug() const;
  ::perfetto::protos::KvmSetGuestDebugFtraceEvent* _internal_mutable_kvm_set_guest_debug();
  public:
  void unsafe_arena_set_allocated_kvm_set_guest_debug(
      ::perfetto::protos::KvmSetGuestDebugFtraceEvent* kvm_set_guest_debug);
  ::perfetto::protos::KvmSetGuestDebugFtraceEvent* unsafe_arena_release_kvm_set_guest_debug();
  // .perfetto.protos.KvmSetIrqFtraceEvent kvm_set_irq = 387;
  bool has_kvm_set_irq() const;
  private:
  bool _internal_has_kvm_set_irq() const;

  public:
  void clear_kvm_set_irq() ;
  const ::perfetto::protos::KvmSetIrqFtraceEvent& kvm_set_irq() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmSetIrqFtraceEvent* release_kvm_set_irq();
  ::perfetto::protos::KvmSetIrqFtraceEvent* mutable_kvm_set_irq();
  void set_allocated_kvm_set_irq(::perfetto::protos::KvmSetIrqFtraceEvent* kvm_set_irq);
  private:
  const ::perfetto::protos::KvmSetIrqFtraceEvent& _internal_kvm_set_irq() const;
  ::perfetto::protos::KvmSetIrqFtraceEvent* _internal_mutable_kvm_set_irq();
  public:
  void unsafe_arena_set_allocated_kvm_set_irq(
      ::perfetto::protos::KvmSetIrqFtraceEvent* kvm_set_irq);
  ::perfetto::protos::KvmSetIrqFtraceEvent* unsafe_arena_release_kvm_set_irq();
  // .perfetto.protos.KvmSetSpteHvaFtraceEvent kvm_set_spte_hva = 388;
  bool has_kvm_set_spte_hva() const;
  private:
  bool _internal_has_kvm_set_spte_hva() const;

  public:
  void clear_kvm_set_spte_hva() ;
  const ::perfetto::protos::KvmSetSpteHvaFtraceEvent& kvm_set_spte_hva() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmSetSpteHvaFtraceEvent* release_kvm_set_spte_hva();
  ::perfetto::protos::KvmSetSpteHvaFtraceEvent* mutable_kvm_set_spte_hva();
  void set_allocated_kvm_set_spte_hva(::perfetto::protos::KvmSetSpteHvaFtraceEvent* kvm_set_spte_hva);
  private:
  const ::perfetto::protos::KvmSetSpteHvaFtraceEvent& _internal_kvm_set_spte_hva() const;
  ::perfetto::protos::KvmSetSpteHvaFtraceEvent* _internal_mutable_kvm_set_spte_hva();
  public:
  void unsafe_arena_set_allocated_kvm_set_spte_hva(
      ::perfetto::protos::KvmSetSpteHvaFtraceEvent* kvm_set_spte_hva);
  ::perfetto::protos::KvmSetSpteHvaFtraceEvent* unsafe_arena_release_kvm_set_spte_hva();
  // .perfetto.protos.KvmSetWayFlushFtraceEvent kvm_set_way_flush = 389;
  bool has_kvm_set_way_flush() const;
  private:
  bool _internal_has_kvm_set_way_flush() const;

  public:
  void clear_kvm_set_way_flush() ;
  const ::perfetto::protos::KvmSetWayFlushFtraceEvent& kvm_set_way_flush() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmSetWayFlushFtraceEvent* release_kvm_set_way_flush();
  ::perfetto::protos::KvmSetWayFlushFtraceEvent* mutable_kvm_set_way_flush();
  void set_allocated_kvm_set_way_flush(::perfetto::protos::KvmSetWayFlushFtraceEvent* kvm_set_way_flush);
  private:
  const ::perfetto::protos::KvmSetWayFlushFtraceEvent& _internal_kvm_set_way_flush() const;
  ::perfetto::protos::KvmSetWayFlushFtraceEvent* _internal_mutable_kvm_set_way_flush();
  public:
  void unsafe_arena_set_allocated_kvm_set_way_flush(
      ::perfetto::protos::KvmSetWayFlushFtraceEvent* kvm_set_way_flush);
  ::perfetto::protos::KvmSetWayFlushFtraceEvent* unsafe_arena_release_kvm_set_way_flush();
  // .perfetto.protos.KvmSysAccessFtraceEvent kvm_sys_access = 390;
  bool has_kvm_sys_access() const;
  private:
  bool _internal_has_kvm_sys_access() const;

  public:
  void clear_kvm_sys_access() ;
  const ::perfetto::protos::KvmSysAccessFtraceEvent& kvm_sys_access() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmSysAccessFtraceEvent* release_kvm_sys_access();
  ::perfetto::protos::KvmSysAccessFtraceEvent* mutable_kvm_sys_access();
  void set_allocated_kvm_sys_access(::perfetto::protos::KvmSysAccessFtraceEvent* kvm_sys_access);
  private:
  const ::perfetto::protos::KvmSysAccessFtraceEvent& _internal_kvm_sys_access() const;
  ::perfetto::protos::KvmSysAccessFtraceEvent* _internal_mutable_kvm_sys_access();
  public:
  void unsafe_arena_set_allocated_kvm_sys_access(
      ::perfetto::protos::KvmSysAccessFtraceEvent* kvm_sys_access);
  ::perfetto::protos::KvmSysAccessFtraceEvent* unsafe_arena_release_kvm_sys_access();
  // .perfetto.protos.KvmTestAgeHvaFtraceEvent kvm_test_age_hva = 391;
  bool has_kvm_test_age_hva() const;
  private:
  bool _internal_has_kvm_test_age_hva() const;

  public:
  void clear_kvm_test_age_hva() ;
  const ::perfetto::protos::KvmTestAgeHvaFtraceEvent& kvm_test_age_hva() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmTestAgeHvaFtraceEvent* release_kvm_test_age_hva();
  ::perfetto::protos::KvmTestAgeHvaFtraceEvent* mutable_kvm_test_age_hva();
  void set_allocated_kvm_test_age_hva(::perfetto::protos::KvmTestAgeHvaFtraceEvent* kvm_test_age_hva);
  private:
  const ::perfetto::protos::KvmTestAgeHvaFtraceEvent& _internal_kvm_test_age_hva() const;
  ::perfetto::protos::KvmTestAgeHvaFtraceEvent* _internal_mutable_kvm_test_age_hva();
  public:
  void unsafe_arena_set_allocated_kvm_test_age_hva(
      ::perfetto::protos::KvmTestAgeHvaFtraceEvent* kvm_test_age_hva);
  ::perfetto::protos::KvmTestAgeHvaFtraceEvent* unsafe_arena_release_kvm_test_age_hva();
  // .perfetto.protos.KvmTimerEmulateFtraceEvent kvm_timer_emulate = 392;
  bool has_kvm_timer_emulate() const;
  private:
  bool _internal_has_kvm_timer_emulate() const;

  public:
  void clear_kvm_timer_emulate() ;
  const ::perfetto::protos::KvmTimerEmulateFtraceEvent& kvm_timer_emulate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmTimerEmulateFtraceEvent* release_kvm_timer_emulate();
  ::perfetto::protos::KvmTimerEmulateFtraceEvent* mutable_kvm_timer_emulate();
  void set_allocated_kvm_timer_emulate(::perfetto::protos::KvmTimerEmulateFtraceEvent* kvm_timer_emulate);
  private:
  const ::perfetto::protos::KvmTimerEmulateFtraceEvent& _internal_kvm_timer_emulate() const;
  ::perfetto::protos::KvmTimerEmulateFtraceEvent* _internal_mutable_kvm_timer_emulate();
  public:
  void unsafe_arena_set_allocated_kvm_timer_emulate(
      ::perfetto::protos::KvmTimerEmulateFtraceEvent* kvm_timer_emulate);
  ::perfetto::protos::KvmTimerEmulateFtraceEvent* unsafe_arena_release_kvm_timer_emulate();
  // .perfetto.protos.KvmTimerHrtimerExpireFtraceEvent kvm_timer_hrtimer_expire = 393;
  bool has_kvm_timer_hrtimer_expire() const;
  private:
  bool _internal_has_kvm_timer_hrtimer_expire() const;

  public:
  void clear_kvm_timer_hrtimer_expire() ;
  const ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent& kvm_timer_hrtimer_expire() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* release_kvm_timer_hrtimer_expire();
  ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* mutable_kvm_timer_hrtimer_expire();
  void set_allocated_kvm_timer_hrtimer_expire(::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* kvm_timer_hrtimer_expire);
  private:
  const ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent& _internal_kvm_timer_hrtimer_expire() const;
  ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* _internal_mutable_kvm_timer_hrtimer_expire();
  public:
  void unsafe_arena_set_allocated_kvm_timer_hrtimer_expire(
      ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* kvm_timer_hrtimer_expire);
  ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* unsafe_arena_release_kvm_timer_hrtimer_expire();
  // .perfetto.protos.KvmTimerRestoreStateFtraceEvent kvm_timer_restore_state = 394;
  bool has_kvm_timer_restore_state() const;
  private:
  bool _internal_has_kvm_timer_restore_state() const;

  public:
  void clear_kvm_timer_restore_state() ;
  const ::perfetto::protos::KvmTimerRestoreStateFtraceEvent& kvm_timer_restore_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* release_kvm_timer_restore_state();
  ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* mutable_kvm_timer_restore_state();
  void set_allocated_kvm_timer_restore_state(::perfetto::protos::KvmTimerRestoreStateFtraceEvent* kvm_timer_restore_state);
  private:
  const ::perfetto::protos::KvmTimerRestoreStateFtraceEvent& _internal_kvm_timer_restore_state() const;
  ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* _internal_mutable_kvm_timer_restore_state();
  public:
  void unsafe_arena_set_allocated_kvm_timer_restore_state(
      ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* kvm_timer_restore_state);
  ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* unsafe_arena_release_kvm_timer_restore_state();
  // .perfetto.protos.KvmTimerSaveStateFtraceEvent kvm_timer_save_state = 395;
  bool has_kvm_timer_save_state() const;
  private:
  bool _internal_has_kvm_timer_save_state() const;

  public:
  void clear_kvm_timer_save_state() ;
  const ::perfetto::protos::KvmTimerSaveStateFtraceEvent& kvm_timer_save_state() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmTimerSaveStateFtraceEvent* release_kvm_timer_save_state();
  ::perfetto::protos::KvmTimerSaveStateFtraceEvent* mutable_kvm_timer_save_state();
  void set_allocated_kvm_timer_save_state(::perfetto::protos::KvmTimerSaveStateFtraceEvent* kvm_timer_save_state);
  private:
  const ::perfetto::protos::KvmTimerSaveStateFtraceEvent& _internal_kvm_timer_save_state() const;
  ::perfetto::protos::KvmTimerSaveStateFtraceEvent* _internal_mutable_kvm_timer_save_state();
  public:
  void unsafe_arena_set_allocated_kvm_timer_save_state(
      ::perfetto::protos::KvmTimerSaveStateFtraceEvent* kvm_timer_save_state);
  ::perfetto::protos::KvmTimerSaveStateFtraceEvent* unsafe_arena_release_kvm_timer_save_state();
  // .perfetto.protos.KvmTimerUpdateIrqFtraceEvent kvm_timer_update_irq = 396;
  bool has_kvm_timer_update_irq() const;
  private:
  bool _internal_has_kvm_timer_update_irq() const;

  public:
  void clear_kvm_timer_update_irq() ;
  const ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent& kvm_timer_update_irq() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* release_kvm_timer_update_irq();
  ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* mutable_kvm_timer_update_irq();
  void set_allocated_kvm_timer_update_irq(::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* kvm_timer_update_irq);
  private:
  const ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent& _internal_kvm_timer_update_irq() const;
  ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* _internal_mutable_kvm_timer_update_irq();
  public:
  void unsafe_arena_set_allocated_kvm_timer_update_irq(
      ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* kvm_timer_update_irq);
  ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* unsafe_arena_release_kvm_timer_update_irq();
  // .perfetto.protos.KvmToggleCacheFtraceEvent kvm_toggle_cache = 397;
  bool has_kvm_toggle_cache() const;
  private:
  bool _internal_has_kvm_toggle_cache() const;

  public:
  void clear_kvm_toggle_cache() ;
  const ::perfetto::protos::KvmToggleCacheFtraceEvent& kvm_toggle_cache() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmToggleCacheFtraceEvent* release_kvm_toggle_cache();
  ::perfetto::protos::KvmToggleCacheFtraceEvent* mutable_kvm_toggle_cache();
  void set_allocated_kvm_toggle_cache(::perfetto::protos::KvmToggleCacheFtraceEvent* kvm_toggle_cache);
  private:
  const ::perfetto::protos::KvmToggleCacheFtraceEvent& _internal_kvm_toggle_cache() const;
  ::perfetto::protos::KvmToggleCacheFtraceEvent* _internal_mutable_kvm_toggle_cache();
  public:
  void unsafe_arena_set_allocated_kvm_toggle_cache(
      ::perfetto::protos::KvmToggleCacheFtraceEvent* kvm_toggle_cache);
  ::perfetto::protos::KvmToggleCacheFtraceEvent* unsafe_arena_release_kvm_toggle_cache();
  // .perfetto.protos.KvmUnmapHvaRangeFtraceEvent kvm_unmap_hva_range = 398;
  bool has_kvm_unmap_hva_range() const;
  private:
  bool _internal_has_kvm_unmap_hva_range() const;

  public:
  void clear_kvm_unmap_hva_range() ;
  const ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent& kvm_unmap_hva_range() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* release_kvm_unmap_hva_range();
  ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* mutable_kvm_unmap_hva_range();
  void set_allocated_kvm_unmap_hva_range(::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* kvm_unmap_hva_range);
  private:
  const ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent& _internal_kvm_unmap_hva_range() const;
  ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* _internal_mutable_kvm_unmap_hva_range();
  public:
  void unsafe_arena_set_allocated_kvm_unmap_hva_range(
      ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* kvm_unmap_hva_range);
  ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* unsafe_arena_release_kvm_unmap_hva_range();
  // .perfetto.protos.KvmUserspaceExitFtraceEvent kvm_userspace_exit = 399;
  bool has_kvm_userspace_exit() const;
  private:
  bool _internal_has_kvm_userspace_exit() const;

  public:
  void clear_kvm_userspace_exit() ;
  const ::perfetto::protos::KvmUserspaceExitFtraceEvent& kvm_userspace_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmUserspaceExitFtraceEvent* release_kvm_userspace_exit();
  ::perfetto::protos::KvmUserspaceExitFtraceEvent* mutable_kvm_userspace_exit();
  void set_allocated_kvm_userspace_exit(::perfetto::protos::KvmUserspaceExitFtraceEvent* kvm_userspace_exit);
  private:
  const ::perfetto::protos::KvmUserspaceExitFtraceEvent& _internal_kvm_userspace_exit() const;
  ::perfetto::protos::KvmUserspaceExitFtraceEvent* _internal_mutable_kvm_userspace_exit();
  public:
  void unsafe_arena_set_allocated_kvm_userspace_exit(
      ::perfetto::protos::KvmUserspaceExitFtraceEvent* kvm_userspace_exit);
  ::perfetto::protos::KvmUserspaceExitFtraceEvent* unsafe_arena_release_kvm_userspace_exit();
  // .perfetto.protos.KvmVcpuWakeupFtraceEvent kvm_vcpu_wakeup = 400;
  bool has_kvm_vcpu_wakeup() const;
  private:
  bool _internal_has_kvm_vcpu_wakeup() const;

  public:
  void clear_kvm_vcpu_wakeup() ;
  const ::perfetto::protos::KvmVcpuWakeupFtraceEvent& kvm_vcpu_wakeup() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmVcpuWakeupFtraceEvent* release_kvm_vcpu_wakeup();
  ::perfetto::protos::KvmVcpuWakeupFtraceEvent* mutable_kvm_vcpu_wakeup();
  void set_allocated_kvm_vcpu_wakeup(::perfetto::protos::KvmVcpuWakeupFtraceEvent* kvm_vcpu_wakeup);
  private:
  const ::perfetto::protos::KvmVcpuWakeupFtraceEvent& _internal_kvm_vcpu_wakeup() const;
  ::perfetto::protos::KvmVcpuWakeupFtraceEvent* _internal_mutable_kvm_vcpu_wakeup();
  public:
  void unsafe_arena_set_allocated_kvm_vcpu_wakeup(
      ::perfetto::protos::KvmVcpuWakeupFtraceEvent* kvm_vcpu_wakeup);
  ::perfetto::protos::KvmVcpuWakeupFtraceEvent* unsafe_arena_release_kvm_vcpu_wakeup();
  // .perfetto.protos.KvmWfxArm64FtraceEvent kvm_wfx_arm64 = 401;
  bool has_kvm_wfx_arm64() const;
  private:
  bool _internal_has_kvm_wfx_arm64() const;

  public:
  void clear_kvm_wfx_arm64() ;
  const ::perfetto::protos::KvmWfxArm64FtraceEvent& kvm_wfx_arm64() const;
  PROTOBUF_NODISCARD ::perfetto::protos::KvmWfxArm64FtraceEvent* release_kvm_wfx_arm64();
  ::perfetto::protos::KvmWfxArm64FtraceEvent* mutable_kvm_wfx_arm64();
  void set_allocated_kvm_wfx_arm64(::perfetto::protos::KvmWfxArm64FtraceEvent* kvm_wfx_arm64);
  private:
  const ::perfetto::protos::KvmWfxArm64FtraceEvent& _internal_kvm_wfx_arm64() const;
  ::perfetto::protos::KvmWfxArm64FtraceEvent* _internal_mutable_kvm_wfx_arm64();
  public:
  void unsafe_arena_set_allocated_kvm_wfx_arm64(
      ::perfetto::protos::KvmWfxArm64FtraceEvent* kvm_wfx_arm64);
  ::perfetto::protos::KvmWfxArm64FtraceEvent* unsafe_arena_release_kvm_wfx_arm64();
  // .perfetto.protos.TrapRegFtraceEvent trap_reg = 402;
  bool has_trap_reg() const;
  private:
  bool _internal_has_trap_reg() const;

  public:
  void clear_trap_reg() ;
  const ::perfetto::protos::TrapRegFtraceEvent& trap_reg() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrapRegFtraceEvent* release_trap_reg();
  ::perfetto::protos::TrapRegFtraceEvent* mutable_trap_reg();
  void set_allocated_trap_reg(::perfetto::protos::TrapRegFtraceEvent* trap_reg);
  private:
  const ::perfetto::protos::TrapRegFtraceEvent& _internal_trap_reg() const;
  ::perfetto::protos::TrapRegFtraceEvent* _internal_mutable_trap_reg();
  public:
  void unsafe_arena_set_allocated_trap_reg(
      ::perfetto::protos::TrapRegFtraceEvent* trap_reg);
  ::perfetto::protos::TrapRegFtraceEvent* unsafe_arena_release_trap_reg();
  // .perfetto.protos.VgicUpdateIrqPendingFtraceEvent vgic_update_irq_pending = 403;
  bool has_vgic_update_irq_pending() const;
  private:
  bool _internal_has_vgic_update_irq_pending() const;

  public:
  void clear_vgic_update_irq_pending() ;
  const ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent& vgic_update_irq_pending() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* release_vgic_update_irq_pending();
  ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* mutable_vgic_update_irq_pending();
  void set_allocated_vgic_update_irq_pending(::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* vgic_update_irq_pending);
  private:
  const ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent& _internal_vgic_update_irq_pending() const;
  ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* _internal_mutable_vgic_update_irq_pending();
  public:
  void unsafe_arena_set_allocated_vgic_update_irq_pending(
      ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* vgic_update_irq_pending);
  ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* unsafe_arena_release_vgic_update_irq_pending();
  // .perfetto.protos.WakeupSourceActivateFtraceEvent wakeup_source_activate = 404;
  bool has_wakeup_source_activate() const;
  private:
  bool _internal_has_wakeup_source_activate() const;

  public:
  void clear_wakeup_source_activate() ;
  const ::perfetto::protos::WakeupSourceActivateFtraceEvent& wakeup_source_activate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::WakeupSourceActivateFtraceEvent* release_wakeup_source_activate();
  ::perfetto::protos::WakeupSourceActivateFtraceEvent* mutable_wakeup_source_activate();
  void set_allocated_wakeup_source_activate(::perfetto::protos::WakeupSourceActivateFtraceEvent* wakeup_source_activate);
  private:
  const ::perfetto::protos::WakeupSourceActivateFtraceEvent& _internal_wakeup_source_activate() const;
  ::perfetto::protos::WakeupSourceActivateFtraceEvent* _internal_mutable_wakeup_source_activate();
  public:
  void unsafe_arena_set_allocated_wakeup_source_activate(
      ::perfetto::protos::WakeupSourceActivateFtraceEvent* wakeup_source_activate);
  ::perfetto::protos::WakeupSourceActivateFtraceEvent* unsafe_arena_release_wakeup_source_activate();
  // .perfetto.protos.WakeupSourceDeactivateFtraceEvent wakeup_source_deactivate = 405;
  bool has_wakeup_source_deactivate() const;
  private:
  bool _internal_has_wakeup_source_deactivate() const;

  public:
  void clear_wakeup_source_deactivate() ;
  const ::perfetto::protos::WakeupSourceDeactivateFtraceEvent& wakeup_source_deactivate() const;
  PROTOBUF_NODISCARD ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* release_wakeup_source_deactivate();
  ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* mutable_wakeup_source_deactivate();
  void set_allocated_wakeup_source_deactivate(::perfetto::protos::WakeupSourceDeactivateFtraceEvent* wakeup_source_deactivate);
  private:
  const ::perfetto::protos::WakeupSourceDeactivateFtraceEvent& _internal_wakeup_source_deactivate() const;
  ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* _internal_mutable_wakeup_source_deactivate();
  public:
  void unsafe_arena_set_allocated_wakeup_source_deactivate(
      ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* wakeup_source_deactivate);
  ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* unsafe_arena_release_wakeup_source_deactivate();
  // .perfetto.protos.UfshcdCommandFtraceEvent ufshcd_command = 406;
  bool has_ufshcd_command() const;
  private:
  bool _internal_has_ufshcd_command() const;

  public:
  void clear_ufshcd_command() ;
  const ::perfetto::protos::UfshcdCommandFtraceEvent& ufshcd_command() const;
  PROTOBUF_NODISCARD ::perfetto::protos::UfshcdCommandFtraceEvent* release_ufshcd_command();
  ::perfetto::protos::UfshcdCommandFtraceEvent* mutable_ufshcd_command();
  void set_allocated_ufshcd_command(::perfetto::protos::UfshcdCommandFtraceEvent* ufshcd_command);
  private:
  const ::perfetto::protos::UfshcdCommandFtraceEvent& _internal_ufshcd_command() const;
  ::perfetto::protos::UfshcdCommandFtraceEvent* _internal_mutable_ufshcd_command();
  public:
  void unsafe_arena_set_allocated_ufshcd_command(
      ::perfetto::protos::UfshcdCommandFtraceEvent* ufshcd_command);
  ::perfetto::protos::UfshcdCommandFtraceEvent* unsafe_arena_release_ufshcd_command();
  // .perfetto.protos.UfshcdClkGatingFtraceEvent ufshcd_clk_gating = 407;
  bool has_ufshcd_clk_gating() const;
  private:
  bool _internal_has_ufshcd_clk_gating() const;

  public:
  void clear_ufshcd_clk_gating() ;
  const ::perfetto::protos::UfshcdClkGatingFtraceEvent& ufshcd_clk_gating() const;
  PROTOBUF_NODISCARD ::perfetto::protos::UfshcdClkGatingFtraceEvent* release_ufshcd_clk_gating();
  ::perfetto::protos::UfshcdClkGatingFtraceEvent* mutable_ufshcd_clk_gating();
  void set_allocated_ufshcd_clk_gating(::perfetto::protos::UfshcdClkGatingFtraceEvent* ufshcd_clk_gating);
  private:
  const ::perfetto::protos::UfshcdClkGatingFtraceEvent& _internal_ufshcd_clk_gating() const;
  ::perfetto::protos::UfshcdClkGatingFtraceEvent* _internal_mutable_ufshcd_clk_gating();
  public:
  void unsafe_arena_set_allocated_ufshcd_clk_gating(
      ::perfetto::protos::UfshcdClkGatingFtraceEvent* ufshcd_clk_gating);
  ::perfetto::protos::UfshcdClkGatingFtraceEvent* unsafe_arena_release_ufshcd_clk_gating();
  // .perfetto.protos.ConsoleFtraceEvent console = 408;
  bool has_console() const;
  private:
  bool _internal_has_console() const;

  public:
  void clear_console() ;
  const ::perfetto::protos::ConsoleFtraceEvent& console() const;
  PROTOBUF_NODISCARD ::perfetto::protos::ConsoleFtraceEvent* release_console();
  ::perfetto::protos::ConsoleFtraceEvent* mutable_console();
  void set_allocated_console(::perfetto::protos::ConsoleFtraceEvent* console);
  private:
  const ::perfetto::protos::ConsoleFtraceEvent& _internal_console() const;
  ::perfetto::protos::ConsoleFtraceEvent* _internal_mutable_console();
  public:
  void unsafe_arena_set_allocated_console(
      ::perfetto::protos::ConsoleFtraceEvent* console);
  ::perfetto::protos::ConsoleFtraceEvent* unsafe_arena_release_console();
  // .perfetto.protos.DrmVblankEventFtraceEvent drm_vblank_event = 409;
  bool has_drm_vblank_event() const;
  private:
  bool _internal_has_drm_vblank_event() const;

  public:
  void clear_drm_vblank_event() ;
  const ::perfetto::protos::DrmVblankEventFtraceEvent& drm_vblank_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DrmVblankEventFtraceEvent* release_drm_vblank_event();
  ::perfetto::protos::DrmVblankEventFtraceEvent* mutable_drm_vblank_event();
  void set_allocated_drm_vblank_event(::perfetto::protos::DrmVblankEventFtraceEvent* drm_vblank_event);
  private:
  const ::perfetto::protos::DrmVblankEventFtraceEvent& _internal_drm_vblank_event() const;
  ::perfetto::protos::DrmVblankEventFtraceEvent* _internal_mutable_drm_vblank_event();
  public:
  void unsafe_arena_set_allocated_drm_vblank_event(
      ::perfetto::protos::DrmVblankEventFtraceEvent* drm_vblank_event);
  ::perfetto::protos::DrmVblankEventFtraceEvent* unsafe_arena_release_drm_vblank_event();
  // .perfetto.protos.DrmVblankEventDeliveredFtraceEvent drm_vblank_event_delivered = 410;
  bool has_drm_vblank_event_delivered() const;
  private:
  bool _internal_has_drm_vblank_event_delivered() const;

  public:
  void clear_drm_vblank_event_delivered() ;
  const ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent& drm_vblank_event_delivered() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* release_drm_vblank_event_delivered();
  ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* mutable_drm_vblank_event_delivered();
  void set_allocated_drm_vblank_event_delivered(::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* drm_vblank_event_delivered);
  private:
  const ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent& _internal_drm_vblank_event_delivered() const;
  ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* _internal_mutable_drm_vblank_event_delivered();
  public:
  void unsafe_arena_set_allocated_drm_vblank_event_delivered(
      ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* drm_vblank_event_delivered);
  ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* unsafe_arena_release_drm_vblank_event_delivered();
  // .perfetto.protos.DrmSchedJobFtraceEvent drm_sched_job = 411;
  bool has_drm_sched_job() const;
  private:
  bool _internal_has_drm_sched_job() const;

  public:
  void clear_drm_sched_job() ;
  const ::perfetto::protos::DrmSchedJobFtraceEvent& drm_sched_job() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DrmSchedJobFtraceEvent* release_drm_sched_job();
  ::perfetto::protos::DrmSchedJobFtraceEvent* mutable_drm_sched_job();
  void set_allocated_drm_sched_job(::perfetto::protos::DrmSchedJobFtraceEvent* drm_sched_job);
  private:
  const ::perfetto::protos::DrmSchedJobFtraceEvent& _internal_drm_sched_job() const;
  ::perfetto::protos::DrmSchedJobFtraceEvent* _internal_mutable_drm_sched_job();
  public:
  void unsafe_arena_set_allocated_drm_sched_job(
      ::perfetto::protos::DrmSchedJobFtraceEvent* drm_sched_job);
  ::perfetto::protos::DrmSchedJobFtraceEvent* unsafe_arena_release_drm_sched_job();
  // .perfetto.protos.DrmRunJobFtraceEvent drm_run_job = 412;
  bool has_drm_run_job() const;
  private:
  bool _internal_has_drm_run_job() const;

  public:
  void clear_drm_run_job() ;
  const ::perfetto::protos::DrmRunJobFtraceEvent& drm_run_job() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DrmRunJobFtraceEvent* release_drm_run_job();
  ::perfetto::protos::DrmRunJobFtraceEvent* mutable_drm_run_job();
  void set_allocated_drm_run_job(::perfetto::protos::DrmRunJobFtraceEvent* drm_run_job);
  private:
  const ::perfetto::protos::DrmRunJobFtraceEvent& _internal_drm_run_job() const;
  ::perfetto::protos::DrmRunJobFtraceEvent* _internal_mutable_drm_run_job();
  public:
  void unsafe_arena_set_allocated_drm_run_job(
      ::perfetto::protos::DrmRunJobFtraceEvent* drm_run_job);
  ::perfetto::protos::DrmRunJobFtraceEvent* unsafe_arena_release_drm_run_job();
  // .perfetto.protos.DrmSchedProcessJobFtraceEvent drm_sched_process_job = 413;
  bool has_drm_sched_process_job() const;
  private:
  bool _internal_has_drm_sched_process_job() const;

  public:
  void clear_drm_sched_process_job() ;
  const ::perfetto::protos::DrmSchedProcessJobFtraceEvent& drm_sched_process_job() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DrmSchedProcessJobFtraceEvent* release_drm_sched_process_job();
  ::perfetto::protos::DrmSchedProcessJobFtraceEvent* mutable_drm_sched_process_job();
  void set_allocated_drm_sched_process_job(::perfetto::protos::DrmSchedProcessJobFtraceEvent* drm_sched_process_job);
  private:
  const ::perfetto::protos::DrmSchedProcessJobFtraceEvent& _internal_drm_sched_process_job() const;
  ::perfetto::protos::DrmSchedProcessJobFtraceEvent* _internal_mutable_drm_sched_process_job();
  public:
  void unsafe_arena_set_allocated_drm_sched_process_job(
      ::perfetto::protos::DrmSchedProcessJobFtraceEvent* drm_sched_process_job);
  ::perfetto::protos::DrmSchedProcessJobFtraceEvent* unsafe_arena_release_drm_sched_process_job();
  // .perfetto.protos.DmaFenceInitFtraceEvent dma_fence_init = 414;
  bool has_dma_fence_init() const;
  private:
  bool _internal_has_dma_fence_init() const;

  public:
  void clear_dma_fence_init() ;
  const ::perfetto::protos::DmaFenceInitFtraceEvent& dma_fence_init() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaFenceInitFtraceEvent* release_dma_fence_init();
  ::perfetto::protos::DmaFenceInitFtraceEvent* mutable_dma_fence_init();
  void set_allocated_dma_fence_init(::perfetto::protos::DmaFenceInitFtraceEvent* dma_fence_init);
  private:
  const ::perfetto::protos::DmaFenceInitFtraceEvent& _internal_dma_fence_init() const;
  ::perfetto::protos::DmaFenceInitFtraceEvent* _internal_mutable_dma_fence_init();
  public:
  void unsafe_arena_set_allocated_dma_fence_init(
      ::perfetto::protos::DmaFenceInitFtraceEvent* dma_fence_init);
  ::perfetto::protos::DmaFenceInitFtraceEvent* unsafe_arena_release_dma_fence_init();
  // .perfetto.protos.DmaFenceEmitFtraceEvent dma_fence_emit = 415;
  bool has_dma_fence_emit() const;
  private:
  bool _internal_has_dma_fence_emit() const;

  public:
  void clear_dma_fence_emit() ;
  const ::perfetto::protos::DmaFenceEmitFtraceEvent& dma_fence_emit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaFenceEmitFtraceEvent* release_dma_fence_emit();
  ::perfetto::protos::DmaFenceEmitFtraceEvent* mutable_dma_fence_emit();
  void set_allocated_dma_fence_emit(::perfetto::protos::DmaFenceEmitFtraceEvent* dma_fence_emit);
  private:
  const ::perfetto::protos::DmaFenceEmitFtraceEvent& _internal_dma_fence_emit() const;
  ::perfetto::protos::DmaFenceEmitFtraceEvent* _internal_mutable_dma_fence_emit();
  public:
  void unsafe_arena_set_allocated_dma_fence_emit(
      ::perfetto::protos::DmaFenceEmitFtraceEvent* dma_fence_emit);
  ::perfetto::protos::DmaFenceEmitFtraceEvent* unsafe_arena_release_dma_fence_emit();
  // .perfetto.protos.DmaFenceSignaledFtraceEvent dma_fence_signaled = 416;
  bool has_dma_fence_signaled() const;
  private:
  bool _internal_has_dma_fence_signaled() const;

  public:
  void clear_dma_fence_signaled() ;
  const ::perfetto::protos::DmaFenceSignaledFtraceEvent& dma_fence_signaled() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaFenceSignaledFtraceEvent* release_dma_fence_signaled();
  ::perfetto::protos::DmaFenceSignaledFtraceEvent* mutable_dma_fence_signaled();
  void set_allocated_dma_fence_signaled(::perfetto::protos::DmaFenceSignaledFtraceEvent* dma_fence_signaled);
  private:
  const ::perfetto::protos::DmaFenceSignaledFtraceEvent& _internal_dma_fence_signaled() const;
  ::perfetto::protos::DmaFenceSignaledFtraceEvent* _internal_mutable_dma_fence_signaled();
  public:
  void unsafe_arena_set_allocated_dma_fence_signaled(
      ::perfetto::protos::DmaFenceSignaledFtraceEvent* dma_fence_signaled);
  ::perfetto::protos::DmaFenceSignaledFtraceEvent* unsafe_arena_release_dma_fence_signaled();
  // .perfetto.protos.DmaFenceWaitStartFtraceEvent dma_fence_wait_start = 417;
  bool has_dma_fence_wait_start() const;
  private:
  bool _internal_has_dma_fence_wait_start() const;

  public:
  void clear_dma_fence_wait_start() ;
  const ::perfetto::protos::DmaFenceWaitStartFtraceEvent& dma_fence_wait_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaFenceWaitStartFtraceEvent* release_dma_fence_wait_start();
  ::perfetto::protos::DmaFenceWaitStartFtraceEvent* mutable_dma_fence_wait_start();
  void set_allocated_dma_fence_wait_start(::perfetto::protos::DmaFenceWaitStartFtraceEvent* dma_fence_wait_start);
  private:
  const ::perfetto::protos::DmaFenceWaitStartFtraceEvent& _internal_dma_fence_wait_start() const;
  ::perfetto::protos::DmaFenceWaitStartFtraceEvent* _internal_mutable_dma_fence_wait_start();
  public:
  void unsafe_arena_set_allocated_dma_fence_wait_start(
      ::perfetto::protos::DmaFenceWaitStartFtraceEvent* dma_fence_wait_start);
  ::perfetto::protos::DmaFenceWaitStartFtraceEvent* unsafe_arena_release_dma_fence_wait_start();
  // .perfetto.protos.DmaFenceWaitEndFtraceEvent dma_fence_wait_end = 418;
  bool has_dma_fence_wait_end() const;
  private:
  bool _internal_has_dma_fence_wait_end() const;

  public:
  void clear_dma_fence_wait_end() ;
  const ::perfetto::protos::DmaFenceWaitEndFtraceEvent& dma_fence_wait_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DmaFenceWaitEndFtraceEvent* release_dma_fence_wait_end();
  ::perfetto::protos::DmaFenceWaitEndFtraceEvent* mutable_dma_fence_wait_end();
  void set_allocated_dma_fence_wait_end(::perfetto::protos::DmaFenceWaitEndFtraceEvent* dma_fence_wait_end);
  private:
  const ::perfetto::protos::DmaFenceWaitEndFtraceEvent& _internal_dma_fence_wait_end() const;
  ::perfetto::protos::DmaFenceWaitEndFtraceEvent* _internal_mutable_dma_fence_wait_end();
  public:
  void unsafe_arena_set_allocated_dma_fence_wait_end(
      ::perfetto::protos::DmaFenceWaitEndFtraceEvent* dma_fence_wait_end);
  ::perfetto::protos::DmaFenceWaitEndFtraceEvent* unsafe_arena_release_dma_fence_wait_end();
  // .perfetto.protos.F2fsIostatFtraceEvent f2fs_iostat = 419;
  bool has_f2fs_iostat() const;
  private:
  bool _internal_has_f2fs_iostat() const;

  public:
  void clear_f2fs_iostat() ;
  const ::perfetto::protos::F2fsIostatFtraceEvent& f2fs_iostat() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsIostatFtraceEvent* release_f2fs_iostat();
  ::perfetto::protos::F2fsIostatFtraceEvent* mutable_f2fs_iostat();
  void set_allocated_f2fs_iostat(::perfetto::protos::F2fsIostatFtraceEvent* f2fs_iostat);
  private:
  const ::perfetto::protos::F2fsIostatFtraceEvent& _internal_f2fs_iostat() const;
  ::perfetto::protos::F2fsIostatFtraceEvent* _internal_mutable_f2fs_iostat();
  public:
  void unsafe_arena_set_allocated_f2fs_iostat(
      ::perfetto::protos::F2fsIostatFtraceEvent* f2fs_iostat);
  ::perfetto::protos::F2fsIostatFtraceEvent* unsafe_arena_release_f2fs_iostat();
  // .perfetto.protos.F2fsIostatLatencyFtraceEvent f2fs_iostat_latency = 420;
  bool has_f2fs_iostat_latency() const;
  private:
  bool _internal_has_f2fs_iostat_latency() const;

  public:
  void clear_f2fs_iostat_latency() ;
  const ::perfetto::protos::F2fsIostatLatencyFtraceEvent& f2fs_iostat_latency() const;
  PROTOBUF_NODISCARD ::perfetto::protos::F2fsIostatLatencyFtraceEvent* release_f2fs_iostat_latency();
  ::perfetto::protos::F2fsIostatLatencyFtraceEvent* mutable_f2fs_iostat_latency();
  void set_allocated_f2fs_iostat_latency(::perfetto::protos::F2fsIostatLatencyFtraceEvent* f2fs_iostat_latency);
  private:
  const ::perfetto::protos::F2fsIostatLatencyFtraceEvent& _internal_f2fs_iostat_latency() const;
  ::perfetto::protos::F2fsIostatLatencyFtraceEvent* _internal_mutable_f2fs_iostat_latency();
  public:
  void unsafe_arena_set_allocated_f2fs_iostat_latency(
      ::perfetto::protos::F2fsIostatLatencyFtraceEvent* f2fs_iostat_latency);
  ::perfetto::protos::F2fsIostatLatencyFtraceEvent* unsafe_arena_release_f2fs_iostat_latency();
  // .perfetto.protos.SchedCpuUtilCfsFtraceEvent sched_cpu_util_cfs = 421;
  bool has_sched_cpu_util_cfs() const;
  private:
  bool _internal_has_sched_cpu_util_cfs() const;

  public:
  void clear_sched_cpu_util_cfs() ;
  const ::perfetto::protos::SchedCpuUtilCfsFtraceEvent& sched_cpu_util_cfs() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* release_sched_cpu_util_cfs();
  ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* mutable_sched_cpu_util_cfs();
  void set_allocated_sched_cpu_util_cfs(::perfetto::protos::SchedCpuUtilCfsFtraceEvent* sched_cpu_util_cfs);
  private:
  const ::perfetto::protos::SchedCpuUtilCfsFtraceEvent& _internal_sched_cpu_util_cfs() const;
  ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* _internal_mutable_sched_cpu_util_cfs();
  public:
  void unsafe_arena_set_allocated_sched_cpu_util_cfs(
      ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* sched_cpu_util_cfs);
  ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* unsafe_arena_release_sched_cpu_util_cfs();
  // .perfetto.protos.V4l2QbufFtraceEvent v4l2_qbuf = 422;
  bool has_v4l2_qbuf() const;
  private:
  bool _internal_has_v4l2_qbuf() const;

  public:
  void clear_v4l2_qbuf() ;
  const ::perfetto::protos::V4l2QbufFtraceEvent& v4l2_qbuf() const;
  PROTOBUF_NODISCARD ::perfetto::protos::V4l2QbufFtraceEvent* release_v4l2_qbuf();
  ::perfetto::protos::V4l2QbufFtraceEvent* mutable_v4l2_qbuf();
  void set_allocated_v4l2_qbuf(::perfetto::protos::V4l2QbufFtraceEvent* v4l2_qbuf);
  private:
  const ::perfetto::protos::V4l2QbufFtraceEvent& _internal_v4l2_qbuf() const;
  ::perfetto::protos::V4l2QbufFtraceEvent* _internal_mutable_v4l2_qbuf();
  public:
  void unsafe_arena_set_allocated_v4l2_qbuf(
      ::perfetto::protos::V4l2QbufFtraceEvent* v4l2_qbuf);
  ::perfetto::protos::V4l2QbufFtraceEvent* unsafe_arena_release_v4l2_qbuf();
  // .perfetto.protos.V4l2DqbufFtraceEvent v4l2_dqbuf = 423;
  bool has_v4l2_dqbuf() const;
  private:
  bool _internal_has_v4l2_dqbuf() const;

  public:
  void clear_v4l2_dqbuf() ;
  const ::perfetto::protos::V4l2DqbufFtraceEvent& v4l2_dqbuf() const;
  PROTOBUF_NODISCARD ::perfetto::protos::V4l2DqbufFtraceEvent* release_v4l2_dqbuf();
  ::perfetto::protos::V4l2DqbufFtraceEvent* mutable_v4l2_dqbuf();
  void set_allocated_v4l2_dqbuf(::perfetto::protos::V4l2DqbufFtraceEvent* v4l2_dqbuf);
  private:
  const ::perfetto::protos::V4l2DqbufFtraceEvent& _internal_v4l2_dqbuf() const;
  ::perfetto::protos::V4l2DqbufFtraceEvent* _internal_mutable_v4l2_dqbuf();
  public:
  void unsafe_arena_set_allocated_v4l2_dqbuf(
      ::perfetto::protos::V4l2DqbufFtraceEvent* v4l2_dqbuf);
  ::perfetto::protos::V4l2DqbufFtraceEvent* unsafe_arena_release_v4l2_dqbuf();
  // .perfetto.protos.Vb2V4l2BufQueueFtraceEvent vb2_v4l2_buf_queue = 424;
  bool has_vb2_v4l2_buf_queue() const;
  private:
  bool _internal_has_vb2_v4l2_buf_queue() const;

  public:
  void clear_vb2_v4l2_buf_queue() ;
  const ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent& vb2_v4l2_buf_queue() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* release_vb2_v4l2_buf_queue();
  ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* mutable_vb2_v4l2_buf_queue();
  void set_allocated_vb2_v4l2_buf_queue(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* vb2_v4l2_buf_queue);
  private:
  const ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent& _internal_vb2_v4l2_buf_queue() const;
  ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* _internal_mutable_vb2_v4l2_buf_queue();
  public:
  void unsafe_arena_set_allocated_vb2_v4l2_buf_queue(
      ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* vb2_v4l2_buf_queue);
  ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* unsafe_arena_release_vb2_v4l2_buf_queue();
  // .perfetto.protos.Vb2V4l2BufDoneFtraceEvent vb2_v4l2_buf_done = 425;
  bool has_vb2_v4l2_buf_done() const;
  private:
  bool _internal_has_vb2_v4l2_buf_done() const;

  public:
  void clear_vb2_v4l2_buf_done() ;
  const ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent& vb2_v4l2_buf_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* release_vb2_v4l2_buf_done();
  ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* mutable_vb2_v4l2_buf_done();
  void set_allocated_vb2_v4l2_buf_done(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* vb2_v4l2_buf_done);
  private:
  const ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent& _internal_vb2_v4l2_buf_done() const;
  ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* _internal_mutable_vb2_v4l2_buf_done();
  public:
  void unsafe_arena_set_allocated_vb2_v4l2_buf_done(
      ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* vb2_v4l2_buf_done);
  ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* unsafe_arena_release_vb2_v4l2_buf_done();
  // .perfetto.protos.Vb2V4l2QbufFtraceEvent vb2_v4l2_qbuf = 426;
  bool has_vb2_v4l2_qbuf() const;
  private:
  bool _internal_has_vb2_v4l2_qbuf() const;

  public:
  void clear_vb2_v4l2_qbuf() ;
  const ::perfetto::protos::Vb2V4l2QbufFtraceEvent& vb2_v4l2_qbuf() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Vb2V4l2QbufFtraceEvent* release_vb2_v4l2_qbuf();
  ::perfetto::protos::Vb2V4l2QbufFtraceEvent* mutable_vb2_v4l2_qbuf();
  void set_allocated_vb2_v4l2_qbuf(::perfetto::protos::Vb2V4l2QbufFtraceEvent* vb2_v4l2_qbuf);
  private:
  const ::perfetto::protos::Vb2V4l2QbufFtraceEvent& _internal_vb2_v4l2_qbuf() const;
  ::perfetto::protos::Vb2V4l2QbufFtraceEvent* _internal_mutable_vb2_v4l2_qbuf();
  public:
  void unsafe_arena_set_allocated_vb2_v4l2_qbuf(
      ::perfetto::protos::Vb2V4l2QbufFtraceEvent* vb2_v4l2_qbuf);
  ::perfetto::protos::Vb2V4l2QbufFtraceEvent* unsafe_arena_release_vb2_v4l2_qbuf();
  // .perfetto.protos.Vb2V4l2DqbufFtraceEvent vb2_v4l2_dqbuf = 427;
  bool has_vb2_v4l2_dqbuf() const;
  private:
  bool _internal_has_vb2_v4l2_dqbuf() const;

  public:
  void clear_vb2_v4l2_dqbuf() ;
  const ::perfetto::protos::Vb2V4l2DqbufFtraceEvent& vb2_v4l2_dqbuf() const;
  PROTOBUF_NODISCARD ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* release_vb2_v4l2_dqbuf();
  ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* mutable_vb2_v4l2_dqbuf();
  void set_allocated_vb2_v4l2_dqbuf(::perfetto::protos::Vb2V4l2DqbufFtraceEvent* vb2_v4l2_dqbuf);
  private:
  const ::perfetto::protos::Vb2V4l2DqbufFtraceEvent& _internal_vb2_v4l2_dqbuf() const;
  ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* _internal_mutable_vb2_v4l2_dqbuf();
  public:
  void unsafe_arena_set_allocated_vb2_v4l2_dqbuf(
      ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* vb2_v4l2_dqbuf);
  ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* unsafe_arena_release_vb2_v4l2_dqbuf();
  // .perfetto.protos.DsiCmdFifoStatusFtraceEvent dsi_cmd_fifo_status = 428;
  bool has_dsi_cmd_fifo_status() const;
  private:
  bool _internal_has_dsi_cmd_fifo_status() const;

  public:
  void clear_dsi_cmd_fifo_status() ;
  const ::perfetto::protos::DsiCmdFifoStatusFtraceEvent& dsi_cmd_fifo_status() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* release_dsi_cmd_fifo_status();
  ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* mutable_dsi_cmd_fifo_status();
  void set_allocated_dsi_cmd_fifo_status(::perfetto::protos::DsiCmdFifoStatusFtraceEvent* dsi_cmd_fifo_status);
  private:
  const ::perfetto::protos::DsiCmdFifoStatusFtraceEvent& _internal_dsi_cmd_fifo_status() const;
  ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* _internal_mutable_dsi_cmd_fifo_status();
  public:
  void unsafe_arena_set_allocated_dsi_cmd_fifo_status(
      ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* dsi_cmd_fifo_status);
  ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* unsafe_arena_release_dsi_cmd_fifo_status();
  // .perfetto.protos.DsiRxFtraceEvent dsi_rx = 429;
  bool has_dsi_rx() const;
  private:
  bool _internal_has_dsi_rx() const;

  public:
  void clear_dsi_rx() ;
  const ::perfetto::protos::DsiRxFtraceEvent& dsi_rx() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DsiRxFtraceEvent* release_dsi_rx();
  ::perfetto::protos::DsiRxFtraceEvent* mutable_dsi_rx();
  void set_allocated_dsi_rx(::perfetto::protos::DsiRxFtraceEvent* dsi_rx);
  private:
  const ::perfetto::protos::DsiRxFtraceEvent& _internal_dsi_rx() const;
  ::perfetto::protos::DsiRxFtraceEvent* _internal_mutable_dsi_rx();
  public:
  void unsafe_arena_set_allocated_dsi_rx(
      ::perfetto::protos::DsiRxFtraceEvent* dsi_rx);
  ::perfetto::protos::DsiRxFtraceEvent* unsafe_arena_release_dsi_rx();
  // .perfetto.protos.DsiTxFtraceEvent dsi_tx = 430;
  bool has_dsi_tx() const;
  private:
  bool _internal_has_dsi_tx() const;

  public:
  void clear_dsi_tx() ;
  const ::perfetto::protos::DsiTxFtraceEvent& dsi_tx() const;
  PROTOBUF_NODISCARD ::perfetto::protos::DsiTxFtraceEvent* release_dsi_tx();
  ::perfetto::protos::DsiTxFtraceEvent* mutable_dsi_tx();
  void set_allocated_dsi_tx(::perfetto::protos::DsiTxFtraceEvent* dsi_tx);
  private:
  const ::perfetto::protos::DsiTxFtraceEvent& _internal_dsi_tx() const;
  ::perfetto::protos::DsiTxFtraceEvent* _internal_mutable_dsi_tx();
  public:
  void unsafe_arena_set_allocated_dsi_tx(
      ::perfetto::protos::DsiTxFtraceEvent* dsi_tx);
  ::perfetto::protos::DsiTxFtraceEvent* unsafe_arena_release_dsi_tx();
  // .perfetto.protos.AndroidFsDatareadEndFtraceEvent android_fs_dataread_end = 431;
  bool has_android_fs_dataread_end() const;
  private:
  bool _internal_has_android_fs_dataread_end() const;

  public:
  void clear_android_fs_dataread_end() ;
  const ::perfetto::protos::AndroidFsDatareadEndFtraceEvent& android_fs_dataread_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* release_android_fs_dataread_end();
  ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* mutable_android_fs_dataread_end();
  void set_allocated_android_fs_dataread_end(::perfetto::protos::AndroidFsDatareadEndFtraceEvent* android_fs_dataread_end);
  private:
  const ::perfetto::protos::AndroidFsDatareadEndFtraceEvent& _internal_android_fs_dataread_end() const;
  ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* _internal_mutable_android_fs_dataread_end();
  public:
  void unsafe_arena_set_allocated_android_fs_dataread_end(
      ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* android_fs_dataread_end);
  ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* unsafe_arena_release_android_fs_dataread_end();
  // .perfetto.protos.AndroidFsDatareadStartFtraceEvent android_fs_dataread_start = 432;
  bool has_android_fs_dataread_start() const;
  private:
  bool _internal_has_android_fs_dataread_start() const;

  public:
  void clear_android_fs_dataread_start() ;
  const ::perfetto::protos::AndroidFsDatareadStartFtraceEvent& android_fs_dataread_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* release_android_fs_dataread_start();
  ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* mutable_android_fs_dataread_start();
  void set_allocated_android_fs_dataread_start(::perfetto::protos::AndroidFsDatareadStartFtraceEvent* android_fs_dataread_start);
  private:
  const ::perfetto::protos::AndroidFsDatareadStartFtraceEvent& _internal_android_fs_dataread_start() const;
  ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* _internal_mutable_android_fs_dataread_start();
  public:
  void unsafe_arena_set_allocated_android_fs_dataread_start(
      ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* android_fs_dataread_start);
  ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* unsafe_arena_release_android_fs_dataread_start();
  // .perfetto.protos.AndroidFsDatawriteEndFtraceEvent android_fs_datawrite_end = 433;
  bool has_android_fs_datawrite_end() const;
  private:
  bool _internal_has_android_fs_datawrite_end() const;

  public:
  void clear_android_fs_datawrite_end() ;
  const ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent& android_fs_datawrite_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* release_android_fs_datawrite_end();
  ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* mutable_android_fs_datawrite_end();
  void set_allocated_android_fs_datawrite_end(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* android_fs_datawrite_end);
  private:
  const ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent& _internal_android_fs_datawrite_end() const;
  ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* _internal_mutable_android_fs_datawrite_end();
  public:
  void unsafe_arena_set_allocated_android_fs_datawrite_end(
      ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* android_fs_datawrite_end);
  ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* unsafe_arena_release_android_fs_datawrite_end();
  // .perfetto.protos.AndroidFsDatawriteStartFtraceEvent android_fs_datawrite_start = 434;
  bool has_android_fs_datawrite_start() const;
  private:
  bool _internal_has_android_fs_datawrite_start() const;

  public:
  void clear_android_fs_datawrite_start() ;
  const ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent& android_fs_datawrite_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* release_android_fs_datawrite_start();
  ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* mutable_android_fs_datawrite_start();
  void set_allocated_android_fs_datawrite_start(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* android_fs_datawrite_start);
  private:
  const ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent& _internal_android_fs_datawrite_start() const;
  ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* _internal_mutable_android_fs_datawrite_start();
  public:
  void unsafe_arena_set_allocated_android_fs_datawrite_start(
      ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* android_fs_datawrite_start);
  ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* unsafe_arena_release_android_fs_datawrite_start();
  // .perfetto.protos.AndroidFsFsyncEndFtraceEvent android_fs_fsync_end = 435;
  bool has_android_fs_fsync_end() const;
  private:
  bool _internal_has_android_fs_fsync_end() const;

  public:
  void clear_android_fs_fsync_end() ;
  const ::perfetto::protos::AndroidFsFsyncEndFtraceEvent& android_fs_fsync_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* release_android_fs_fsync_end();
  ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* mutable_android_fs_fsync_end();
  void set_allocated_android_fs_fsync_end(::perfetto::protos::AndroidFsFsyncEndFtraceEvent* android_fs_fsync_end);
  private:
  const ::perfetto::protos::AndroidFsFsyncEndFtraceEvent& _internal_android_fs_fsync_end() const;
  ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* _internal_mutable_android_fs_fsync_end();
  public:
  void unsafe_arena_set_allocated_android_fs_fsync_end(
      ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* android_fs_fsync_end);
  ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* unsafe_arena_release_android_fs_fsync_end();
  // .perfetto.protos.AndroidFsFsyncStartFtraceEvent android_fs_fsync_start = 436;
  bool has_android_fs_fsync_start() const;
  private:
  bool _internal_has_android_fs_fsync_start() const;

  public:
  void clear_android_fs_fsync_start() ;
  const ::perfetto::protos::AndroidFsFsyncStartFtraceEvent& android_fs_fsync_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* release_android_fs_fsync_start();
  ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* mutable_android_fs_fsync_start();
  void set_allocated_android_fs_fsync_start(::perfetto::protos::AndroidFsFsyncStartFtraceEvent* android_fs_fsync_start);
  private:
  const ::perfetto::protos::AndroidFsFsyncStartFtraceEvent& _internal_android_fs_fsync_start() const;
  ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* _internal_mutable_android_fs_fsync_start();
  public:
  void unsafe_arena_set_allocated_android_fs_fsync_start(
      ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* android_fs_fsync_start);
  ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* unsafe_arena_release_android_fs_fsync_start();
  // .perfetto.protos.FuncgraphEntryFtraceEvent funcgraph_entry = 437;
  bool has_funcgraph_entry() const;
  private:
  bool _internal_has_funcgraph_entry() const;

  public:
  void clear_funcgraph_entry() ;
  const ::perfetto::protos::FuncgraphEntryFtraceEvent& funcgraph_entry() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FuncgraphEntryFtraceEvent* release_funcgraph_entry();
  ::perfetto::protos::FuncgraphEntryFtraceEvent* mutable_funcgraph_entry();
  void set_allocated_funcgraph_entry(::perfetto::protos::FuncgraphEntryFtraceEvent* funcgraph_entry);
  private:
  const ::perfetto::protos::FuncgraphEntryFtraceEvent& _internal_funcgraph_entry() const;
  ::perfetto::protos::FuncgraphEntryFtraceEvent* _internal_mutable_funcgraph_entry();
  public:
  void unsafe_arena_set_allocated_funcgraph_entry(
      ::perfetto::protos::FuncgraphEntryFtraceEvent* funcgraph_entry);
  ::perfetto::protos::FuncgraphEntryFtraceEvent* unsafe_arena_release_funcgraph_entry();
  // .perfetto.protos.FuncgraphExitFtraceEvent funcgraph_exit = 438;
  bool has_funcgraph_exit() const;
  private:
  bool _internal_has_funcgraph_exit() const;

  public:
  void clear_funcgraph_exit() ;
  const ::perfetto::protos::FuncgraphExitFtraceEvent& funcgraph_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FuncgraphExitFtraceEvent* release_funcgraph_exit();
  ::perfetto::protos::FuncgraphExitFtraceEvent* mutable_funcgraph_exit();
  void set_allocated_funcgraph_exit(::perfetto::protos::FuncgraphExitFtraceEvent* funcgraph_exit);
  private:
  const ::perfetto::protos::FuncgraphExitFtraceEvent& _internal_funcgraph_exit() const;
  ::perfetto::protos::FuncgraphExitFtraceEvent* _internal_mutable_funcgraph_exit();
  public:
  void unsafe_arena_set_allocated_funcgraph_exit(
      ::perfetto::protos::FuncgraphExitFtraceEvent* funcgraph_exit);
  ::perfetto::protos::FuncgraphExitFtraceEvent* unsafe_arena_release_funcgraph_exit();
  // .perfetto.protos.VirtioVideoCmdFtraceEvent virtio_video_cmd = 439;
  bool has_virtio_video_cmd() const;
  private:
  bool _internal_has_virtio_video_cmd() const;

  public:
  void clear_virtio_video_cmd() ;
  const ::perfetto::protos::VirtioVideoCmdFtraceEvent& virtio_video_cmd() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VirtioVideoCmdFtraceEvent* release_virtio_video_cmd();
  ::perfetto::protos::VirtioVideoCmdFtraceEvent* mutable_virtio_video_cmd();
  void set_allocated_virtio_video_cmd(::perfetto::protos::VirtioVideoCmdFtraceEvent* virtio_video_cmd);
  private:
  const ::perfetto::protos::VirtioVideoCmdFtraceEvent& _internal_virtio_video_cmd() const;
  ::perfetto::protos::VirtioVideoCmdFtraceEvent* _internal_mutable_virtio_video_cmd();
  public:
  void unsafe_arena_set_allocated_virtio_video_cmd(
      ::perfetto::protos::VirtioVideoCmdFtraceEvent* virtio_video_cmd);
  ::perfetto::protos::VirtioVideoCmdFtraceEvent* unsafe_arena_release_virtio_video_cmd();
  // .perfetto.protos.VirtioVideoCmdDoneFtraceEvent virtio_video_cmd_done = 440;
  bool has_virtio_video_cmd_done() const;
  private:
  bool _internal_has_virtio_video_cmd_done() const;

  public:
  void clear_virtio_video_cmd_done() ;
  const ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent& virtio_video_cmd_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* release_virtio_video_cmd_done();
  ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* mutable_virtio_video_cmd_done();
  void set_allocated_virtio_video_cmd_done(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* virtio_video_cmd_done);
  private:
  const ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent& _internal_virtio_video_cmd_done() const;
  ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* _internal_mutable_virtio_video_cmd_done();
  public:
  void unsafe_arena_set_allocated_virtio_video_cmd_done(
      ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* virtio_video_cmd_done);
  ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* unsafe_arena_release_virtio_video_cmd_done();
  // .perfetto.protos.VirtioVideoResourceQueueFtraceEvent virtio_video_resource_queue = 441;
  bool has_virtio_video_resource_queue() const;
  private:
  bool _internal_has_virtio_video_resource_queue() const;

  public:
  void clear_virtio_video_resource_queue() ;
  const ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent& virtio_video_resource_queue() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* release_virtio_video_resource_queue();
  ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* mutable_virtio_video_resource_queue();
  void set_allocated_virtio_video_resource_queue(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* virtio_video_resource_queue);
  private:
  const ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent& _internal_virtio_video_resource_queue() const;
  ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* _internal_mutable_virtio_video_resource_queue();
  public:
  void unsafe_arena_set_allocated_virtio_video_resource_queue(
      ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* virtio_video_resource_queue);
  ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* unsafe_arena_release_virtio_video_resource_queue();
  // .perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent virtio_video_resource_queue_done = 442;
  bool has_virtio_video_resource_queue_done() const;
  private:
  bool _internal_has_virtio_video_resource_queue_done() const;

  public:
  void clear_virtio_video_resource_queue_done() ;
  const ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent& virtio_video_resource_queue_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* release_virtio_video_resource_queue_done();
  ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* mutable_virtio_video_resource_queue_done();
  void set_allocated_virtio_video_resource_queue_done(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* virtio_video_resource_queue_done);
  private:
  const ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent& _internal_virtio_video_resource_queue_done() const;
  ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* _internal_mutable_virtio_video_resource_queue_done();
  public:
  void unsafe_arena_set_allocated_virtio_video_resource_queue_done(
      ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* virtio_video_resource_queue_done);
  ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* unsafe_arena_release_virtio_video_resource_queue_done();
  // .perfetto.protos.MmShrinkSlabStartFtraceEvent mm_shrink_slab_start = 443;
  bool has_mm_shrink_slab_start() const;
  private:
  bool _internal_has_mm_shrink_slab_start() const;

  public:
  void clear_mm_shrink_slab_start() ;
  const ::perfetto::protos::MmShrinkSlabStartFtraceEvent& mm_shrink_slab_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmShrinkSlabStartFtraceEvent* release_mm_shrink_slab_start();
  ::perfetto::protos::MmShrinkSlabStartFtraceEvent* mutable_mm_shrink_slab_start();
  void set_allocated_mm_shrink_slab_start(::perfetto::protos::MmShrinkSlabStartFtraceEvent* mm_shrink_slab_start);
  private:
  const ::perfetto::protos::MmShrinkSlabStartFtraceEvent& _internal_mm_shrink_slab_start() const;
  ::perfetto::protos::MmShrinkSlabStartFtraceEvent* _internal_mutable_mm_shrink_slab_start();
  public:
  void unsafe_arena_set_allocated_mm_shrink_slab_start(
      ::perfetto::protos::MmShrinkSlabStartFtraceEvent* mm_shrink_slab_start);
  ::perfetto::protos::MmShrinkSlabStartFtraceEvent* unsafe_arena_release_mm_shrink_slab_start();
  // .perfetto.protos.MmShrinkSlabEndFtraceEvent mm_shrink_slab_end = 444;
  bool has_mm_shrink_slab_end() const;
  private:
  bool _internal_has_mm_shrink_slab_end() const;

  public:
  void clear_mm_shrink_slab_end() ;
  const ::perfetto::protos::MmShrinkSlabEndFtraceEvent& mm_shrink_slab_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MmShrinkSlabEndFtraceEvent* release_mm_shrink_slab_end();
  ::perfetto::protos::MmShrinkSlabEndFtraceEvent* mutable_mm_shrink_slab_end();
  void set_allocated_mm_shrink_slab_end(::perfetto::protos::MmShrinkSlabEndFtraceEvent* mm_shrink_slab_end);
  private:
  const ::perfetto::protos::MmShrinkSlabEndFtraceEvent& _internal_mm_shrink_slab_end() const;
  ::perfetto::protos::MmShrinkSlabEndFtraceEvent* _internal_mutable_mm_shrink_slab_end();
  public:
  void unsafe_arena_set_allocated_mm_shrink_slab_end(
      ::perfetto::protos::MmShrinkSlabEndFtraceEvent* mm_shrink_slab_end);
  ::perfetto::protos::MmShrinkSlabEndFtraceEvent* unsafe_arena_release_mm_shrink_slab_end();
  // .perfetto.protos.TrustySmcFtraceEvent trusty_smc = 445;
  bool has_trusty_smc() const;
  private:
  bool _internal_has_trusty_smc() const;

  public:
  void clear_trusty_smc() ;
  const ::perfetto::protos::TrustySmcFtraceEvent& trusty_smc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustySmcFtraceEvent* release_trusty_smc();
  ::perfetto::protos::TrustySmcFtraceEvent* mutable_trusty_smc();
  void set_allocated_trusty_smc(::perfetto::protos::TrustySmcFtraceEvent* trusty_smc);
  private:
  const ::perfetto::protos::TrustySmcFtraceEvent& _internal_trusty_smc() const;
  ::perfetto::protos::TrustySmcFtraceEvent* _internal_mutable_trusty_smc();
  public:
  void unsafe_arena_set_allocated_trusty_smc(
      ::perfetto::protos::TrustySmcFtraceEvent* trusty_smc);
  ::perfetto::protos::TrustySmcFtraceEvent* unsafe_arena_release_trusty_smc();
  // .perfetto.protos.TrustySmcDoneFtraceEvent trusty_smc_done = 446;
  bool has_trusty_smc_done() const;
  private:
  bool _internal_has_trusty_smc_done() const;

  public:
  void clear_trusty_smc_done() ;
  const ::perfetto::protos::TrustySmcDoneFtraceEvent& trusty_smc_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustySmcDoneFtraceEvent* release_trusty_smc_done();
  ::perfetto::protos::TrustySmcDoneFtraceEvent* mutable_trusty_smc_done();
  void set_allocated_trusty_smc_done(::perfetto::protos::TrustySmcDoneFtraceEvent* trusty_smc_done);
  private:
  const ::perfetto::protos::TrustySmcDoneFtraceEvent& _internal_trusty_smc_done() const;
  ::perfetto::protos::TrustySmcDoneFtraceEvent* _internal_mutable_trusty_smc_done();
  public:
  void unsafe_arena_set_allocated_trusty_smc_done(
      ::perfetto::protos::TrustySmcDoneFtraceEvent* trusty_smc_done);
  ::perfetto::protos::TrustySmcDoneFtraceEvent* unsafe_arena_release_trusty_smc_done();
  // .perfetto.protos.TrustyStdCall32FtraceEvent trusty_std_call32 = 447;
  bool has_trusty_std_call32() const;
  private:
  bool _internal_has_trusty_std_call32() const;

  public:
  void clear_trusty_std_call32() ;
  const ::perfetto::protos::TrustyStdCall32FtraceEvent& trusty_std_call32() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyStdCall32FtraceEvent* release_trusty_std_call32();
  ::perfetto::protos::TrustyStdCall32FtraceEvent* mutable_trusty_std_call32();
  void set_allocated_trusty_std_call32(::perfetto::protos::TrustyStdCall32FtraceEvent* trusty_std_call32);
  private:
  const ::perfetto::protos::TrustyStdCall32FtraceEvent& _internal_trusty_std_call32() const;
  ::perfetto::protos::TrustyStdCall32FtraceEvent* _internal_mutable_trusty_std_call32();
  public:
  void unsafe_arena_set_allocated_trusty_std_call32(
      ::perfetto::protos::TrustyStdCall32FtraceEvent* trusty_std_call32);
  ::perfetto::protos::TrustyStdCall32FtraceEvent* unsafe_arena_release_trusty_std_call32();
  // .perfetto.protos.TrustyStdCall32DoneFtraceEvent trusty_std_call32_done = 448;
  bool has_trusty_std_call32_done() const;
  private:
  bool _internal_has_trusty_std_call32_done() const;

  public:
  void clear_trusty_std_call32_done() ;
  const ::perfetto::protos::TrustyStdCall32DoneFtraceEvent& trusty_std_call32_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* release_trusty_std_call32_done();
  ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* mutable_trusty_std_call32_done();
  void set_allocated_trusty_std_call32_done(::perfetto::protos::TrustyStdCall32DoneFtraceEvent* trusty_std_call32_done);
  private:
  const ::perfetto::protos::TrustyStdCall32DoneFtraceEvent& _internal_trusty_std_call32_done() const;
  ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* _internal_mutable_trusty_std_call32_done();
  public:
  void unsafe_arena_set_allocated_trusty_std_call32_done(
      ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* trusty_std_call32_done);
  ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* unsafe_arena_release_trusty_std_call32_done();
  // .perfetto.protos.TrustyShareMemoryFtraceEvent trusty_share_memory = 449;
  bool has_trusty_share_memory() const;
  private:
  bool _internal_has_trusty_share_memory() const;

  public:
  void clear_trusty_share_memory() ;
  const ::perfetto::protos::TrustyShareMemoryFtraceEvent& trusty_share_memory() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyShareMemoryFtraceEvent* release_trusty_share_memory();
  ::perfetto::protos::TrustyShareMemoryFtraceEvent* mutable_trusty_share_memory();
  void set_allocated_trusty_share_memory(::perfetto::protos::TrustyShareMemoryFtraceEvent* trusty_share_memory);
  private:
  const ::perfetto::protos::TrustyShareMemoryFtraceEvent& _internal_trusty_share_memory() const;
  ::perfetto::protos::TrustyShareMemoryFtraceEvent* _internal_mutable_trusty_share_memory();
  public:
  void unsafe_arena_set_allocated_trusty_share_memory(
      ::perfetto::protos::TrustyShareMemoryFtraceEvent* trusty_share_memory);
  ::perfetto::protos::TrustyShareMemoryFtraceEvent* unsafe_arena_release_trusty_share_memory();
  // .perfetto.protos.TrustyShareMemoryDoneFtraceEvent trusty_share_memory_done = 450;
  bool has_trusty_share_memory_done() const;
  private:
  bool _internal_has_trusty_share_memory_done() const;

  public:
  void clear_trusty_share_memory_done() ;
  const ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent& trusty_share_memory_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* release_trusty_share_memory_done();
  ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* mutable_trusty_share_memory_done();
  void set_allocated_trusty_share_memory_done(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* trusty_share_memory_done);
  private:
  const ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent& _internal_trusty_share_memory_done() const;
  ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* _internal_mutable_trusty_share_memory_done();
  public:
  void unsafe_arena_set_allocated_trusty_share_memory_done(
      ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* trusty_share_memory_done);
  ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* unsafe_arena_release_trusty_share_memory_done();
  // .perfetto.protos.TrustyReclaimMemoryFtraceEvent trusty_reclaim_memory = 451;
  bool has_trusty_reclaim_memory() const;
  private:
  bool _internal_has_trusty_reclaim_memory() const;

  public:
  void clear_trusty_reclaim_memory() ;
  const ::perfetto::protos::TrustyReclaimMemoryFtraceEvent& trusty_reclaim_memory() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* release_trusty_reclaim_memory();
  ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* mutable_trusty_reclaim_memory();
  void set_allocated_trusty_reclaim_memory(::perfetto::protos::TrustyReclaimMemoryFtraceEvent* trusty_reclaim_memory);
  private:
  const ::perfetto::protos::TrustyReclaimMemoryFtraceEvent& _internal_trusty_reclaim_memory() const;
  ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* _internal_mutable_trusty_reclaim_memory();
  public:
  void unsafe_arena_set_allocated_trusty_reclaim_memory(
      ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* trusty_reclaim_memory);
  ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* unsafe_arena_release_trusty_reclaim_memory();
  // .perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent trusty_reclaim_memory_done = 452;
  bool has_trusty_reclaim_memory_done() const;
  private:
  bool _internal_has_trusty_reclaim_memory_done() const;

  public:
  void clear_trusty_reclaim_memory_done() ;
  const ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent& trusty_reclaim_memory_done() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* release_trusty_reclaim_memory_done();
  ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* mutable_trusty_reclaim_memory_done();
  void set_allocated_trusty_reclaim_memory_done(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* trusty_reclaim_memory_done);
  private:
  const ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent& _internal_trusty_reclaim_memory_done() const;
  ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* _internal_mutable_trusty_reclaim_memory_done();
  public:
  void unsafe_arena_set_allocated_trusty_reclaim_memory_done(
      ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* trusty_reclaim_memory_done);
  ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* unsafe_arena_release_trusty_reclaim_memory_done();
  // .perfetto.protos.TrustyIrqFtraceEvent trusty_irq = 453;
  bool has_trusty_irq() const;
  private:
  bool _internal_has_trusty_irq() const;

  public:
  void clear_trusty_irq() ;
  const ::perfetto::protos::TrustyIrqFtraceEvent& trusty_irq() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIrqFtraceEvent* release_trusty_irq();
  ::perfetto::protos::TrustyIrqFtraceEvent* mutable_trusty_irq();
  void set_allocated_trusty_irq(::perfetto::protos::TrustyIrqFtraceEvent* trusty_irq);
  private:
  const ::perfetto::protos::TrustyIrqFtraceEvent& _internal_trusty_irq() const;
  ::perfetto::protos::TrustyIrqFtraceEvent* _internal_mutable_trusty_irq();
  public:
  void unsafe_arena_set_allocated_trusty_irq(
      ::perfetto::protos::TrustyIrqFtraceEvent* trusty_irq);
  ::perfetto::protos::TrustyIrqFtraceEvent* unsafe_arena_release_trusty_irq();
  // .perfetto.protos.TrustyIpcHandleEventFtraceEvent trusty_ipc_handle_event = 454;
  bool has_trusty_ipc_handle_event() const;
  private:
  bool _internal_has_trusty_ipc_handle_event() const;

  public:
  void clear_trusty_ipc_handle_event() ;
  const ::perfetto::protos::TrustyIpcHandleEventFtraceEvent& trusty_ipc_handle_event() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* release_trusty_ipc_handle_event();
  ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* mutable_trusty_ipc_handle_event();
  void set_allocated_trusty_ipc_handle_event(::perfetto::protos::TrustyIpcHandleEventFtraceEvent* trusty_ipc_handle_event);
  private:
  const ::perfetto::protos::TrustyIpcHandleEventFtraceEvent& _internal_trusty_ipc_handle_event() const;
  ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* _internal_mutable_trusty_ipc_handle_event();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_handle_event(
      ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* trusty_ipc_handle_event);
  ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* unsafe_arena_release_trusty_ipc_handle_event();
  // .perfetto.protos.TrustyIpcConnectFtraceEvent trusty_ipc_connect = 455;
  bool has_trusty_ipc_connect() const;
  private:
  bool _internal_has_trusty_ipc_connect() const;

  public:
  void clear_trusty_ipc_connect() ;
  const ::perfetto::protos::TrustyIpcConnectFtraceEvent& trusty_ipc_connect() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcConnectFtraceEvent* release_trusty_ipc_connect();
  ::perfetto::protos::TrustyIpcConnectFtraceEvent* mutable_trusty_ipc_connect();
  void set_allocated_trusty_ipc_connect(::perfetto::protos::TrustyIpcConnectFtraceEvent* trusty_ipc_connect);
  private:
  const ::perfetto::protos::TrustyIpcConnectFtraceEvent& _internal_trusty_ipc_connect() const;
  ::perfetto::protos::TrustyIpcConnectFtraceEvent* _internal_mutable_trusty_ipc_connect();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_connect(
      ::perfetto::protos::TrustyIpcConnectFtraceEvent* trusty_ipc_connect);
  ::perfetto::protos::TrustyIpcConnectFtraceEvent* unsafe_arena_release_trusty_ipc_connect();
  // .perfetto.protos.TrustyIpcConnectEndFtraceEvent trusty_ipc_connect_end = 456;
  bool has_trusty_ipc_connect_end() const;
  private:
  bool _internal_has_trusty_ipc_connect_end() const;

  public:
  void clear_trusty_ipc_connect_end() ;
  const ::perfetto::protos::TrustyIpcConnectEndFtraceEvent& trusty_ipc_connect_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* release_trusty_ipc_connect_end();
  ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* mutable_trusty_ipc_connect_end();
  void set_allocated_trusty_ipc_connect_end(::perfetto::protos::TrustyIpcConnectEndFtraceEvent* trusty_ipc_connect_end);
  private:
  const ::perfetto::protos::TrustyIpcConnectEndFtraceEvent& _internal_trusty_ipc_connect_end() const;
  ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* _internal_mutable_trusty_ipc_connect_end();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_connect_end(
      ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* trusty_ipc_connect_end);
  ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* unsafe_arena_release_trusty_ipc_connect_end();
  // .perfetto.protos.TrustyIpcWriteFtraceEvent trusty_ipc_write = 457;
  bool has_trusty_ipc_write() const;
  private:
  bool _internal_has_trusty_ipc_write() const;

  public:
  void clear_trusty_ipc_write() ;
  const ::perfetto::protos::TrustyIpcWriteFtraceEvent& trusty_ipc_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcWriteFtraceEvent* release_trusty_ipc_write();
  ::perfetto::protos::TrustyIpcWriteFtraceEvent* mutable_trusty_ipc_write();
  void set_allocated_trusty_ipc_write(::perfetto::protos::TrustyIpcWriteFtraceEvent* trusty_ipc_write);
  private:
  const ::perfetto::protos::TrustyIpcWriteFtraceEvent& _internal_trusty_ipc_write() const;
  ::perfetto::protos::TrustyIpcWriteFtraceEvent* _internal_mutable_trusty_ipc_write();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_write(
      ::perfetto::protos::TrustyIpcWriteFtraceEvent* trusty_ipc_write);
  ::perfetto::protos::TrustyIpcWriteFtraceEvent* unsafe_arena_release_trusty_ipc_write();
  // .perfetto.protos.TrustyIpcPollFtraceEvent trusty_ipc_poll = 458;
  bool has_trusty_ipc_poll() const;
  private:
  bool _internal_has_trusty_ipc_poll() const;

  public:
  void clear_trusty_ipc_poll() ;
  const ::perfetto::protos::TrustyIpcPollFtraceEvent& trusty_ipc_poll() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcPollFtraceEvent* release_trusty_ipc_poll();
  ::perfetto::protos::TrustyIpcPollFtraceEvent* mutable_trusty_ipc_poll();
  void set_allocated_trusty_ipc_poll(::perfetto::protos::TrustyIpcPollFtraceEvent* trusty_ipc_poll);
  private:
  const ::perfetto::protos::TrustyIpcPollFtraceEvent& _internal_trusty_ipc_poll() const;
  ::perfetto::protos::TrustyIpcPollFtraceEvent* _internal_mutable_trusty_ipc_poll();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_poll(
      ::perfetto::protos::TrustyIpcPollFtraceEvent* trusty_ipc_poll);
  ::perfetto::protos::TrustyIpcPollFtraceEvent* unsafe_arena_release_trusty_ipc_poll();
  // .perfetto.protos.TrustyIpcReadFtraceEvent trusty_ipc_read = 460;
  bool has_trusty_ipc_read() const;
  private:
  bool _internal_has_trusty_ipc_read() const;

  public:
  void clear_trusty_ipc_read() ;
  const ::perfetto::protos::TrustyIpcReadFtraceEvent& trusty_ipc_read() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcReadFtraceEvent* release_trusty_ipc_read();
  ::perfetto::protos::TrustyIpcReadFtraceEvent* mutable_trusty_ipc_read();
  void set_allocated_trusty_ipc_read(::perfetto::protos::TrustyIpcReadFtraceEvent* trusty_ipc_read);
  private:
  const ::perfetto::protos::TrustyIpcReadFtraceEvent& _internal_trusty_ipc_read() const;
  ::perfetto::protos::TrustyIpcReadFtraceEvent* _internal_mutable_trusty_ipc_read();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_read(
      ::perfetto::protos::TrustyIpcReadFtraceEvent* trusty_ipc_read);
  ::perfetto::protos::TrustyIpcReadFtraceEvent* unsafe_arena_release_trusty_ipc_read();
  // .perfetto.protos.TrustyIpcReadEndFtraceEvent trusty_ipc_read_end = 461;
  bool has_trusty_ipc_read_end() const;
  private:
  bool _internal_has_trusty_ipc_read_end() const;

  public:
  void clear_trusty_ipc_read_end() ;
  const ::perfetto::protos::TrustyIpcReadEndFtraceEvent& trusty_ipc_read_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcReadEndFtraceEvent* release_trusty_ipc_read_end();
  ::perfetto::protos::TrustyIpcReadEndFtraceEvent* mutable_trusty_ipc_read_end();
  void set_allocated_trusty_ipc_read_end(::perfetto::protos::TrustyIpcReadEndFtraceEvent* trusty_ipc_read_end);
  private:
  const ::perfetto::protos::TrustyIpcReadEndFtraceEvent& _internal_trusty_ipc_read_end() const;
  ::perfetto::protos::TrustyIpcReadEndFtraceEvent* _internal_mutable_trusty_ipc_read_end();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_read_end(
      ::perfetto::protos::TrustyIpcReadEndFtraceEvent* trusty_ipc_read_end);
  ::perfetto::protos::TrustyIpcReadEndFtraceEvent* unsafe_arena_release_trusty_ipc_read_end();
  // .perfetto.protos.TrustyIpcRxFtraceEvent trusty_ipc_rx = 462;
  bool has_trusty_ipc_rx() const;
  private:
  bool _internal_has_trusty_ipc_rx() const;

  public:
  void clear_trusty_ipc_rx() ;
  const ::perfetto::protos::TrustyIpcRxFtraceEvent& trusty_ipc_rx() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyIpcRxFtraceEvent* release_trusty_ipc_rx();
  ::perfetto::protos::TrustyIpcRxFtraceEvent* mutable_trusty_ipc_rx();
  void set_allocated_trusty_ipc_rx(::perfetto::protos::TrustyIpcRxFtraceEvent* trusty_ipc_rx);
  private:
  const ::perfetto::protos::TrustyIpcRxFtraceEvent& _internal_trusty_ipc_rx() const;
  ::perfetto::protos::TrustyIpcRxFtraceEvent* _internal_mutable_trusty_ipc_rx();
  public:
  void unsafe_arena_set_allocated_trusty_ipc_rx(
      ::perfetto::protos::TrustyIpcRxFtraceEvent* trusty_ipc_rx);
  ::perfetto::protos::TrustyIpcRxFtraceEvent* unsafe_arena_release_trusty_ipc_rx();
  // .perfetto.protos.TrustyEnqueueNopFtraceEvent trusty_enqueue_nop = 464;
  bool has_trusty_enqueue_nop() const;
  private:
  bool _internal_has_trusty_enqueue_nop() const;

  public:
  void clear_trusty_enqueue_nop() ;
  const ::perfetto::protos::TrustyEnqueueNopFtraceEvent& trusty_enqueue_nop() const;
  PROTOBUF_NODISCARD ::perfetto::protos::TrustyEnqueueNopFtraceEvent* release_trusty_enqueue_nop();
  ::perfetto::protos::TrustyEnqueueNopFtraceEvent* mutable_trusty_enqueue_nop();
  void set_allocated_trusty_enqueue_nop(::perfetto::protos::TrustyEnqueueNopFtraceEvent* trusty_enqueue_nop);
  private:
  const ::perfetto::protos::TrustyEnqueueNopFtraceEvent& _internal_trusty_enqueue_nop() const;
  ::perfetto::protos::TrustyEnqueueNopFtraceEvent* _internal_mutable_trusty_enqueue_nop();
  public:
  void unsafe_arena_set_allocated_trusty_enqueue_nop(
      ::perfetto::protos::TrustyEnqueueNopFtraceEvent* trusty_enqueue_nop);
  ::perfetto::protos::TrustyEnqueueNopFtraceEvent* unsafe_arena_release_trusty_enqueue_nop();
  // .perfetto.protos.CmaAllocStartFtraceEvent cma_alloc_start = 465;
  bool has_cma_alloc_start() const;
  private:
  bool _internal_has_cma_alloc_start() const;

  public:
  void clear_cma_alloc_start() ;
  const ::perfetto::protos::CmaAllocStartFtraceEvent& cma_alloc_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CmaAllocStartFtraceEvent* release_cma_alloc_start();
  ::perfetto::protos::CmaAllocStartFtraceEvent* mutable_cma_alloc_start();
  void set_allocated_cma_alloc_start(::perfetto::protos::CmaAllocStartFtraceEvent* cma_alloc_start);
  private:
  const ::perfetto::protos::CmaAllocStartFtraceEvent& _internal_cma_alloc_start() const;
  ::perfetto::protos::CmaAllocStartFtraceEvent* _internal_mutable_cma_alloc_start();
  public:
  void unsafe_arena_set_allocated_cma_alloc_start(
      ::perfetto::protos::CmaAllocStartFtraceEvent* cma_alloc_start);
  ::perfetto::protos::CmaAllocStartFtraceEvent* unsafe_arena_release_cma_alloc_start();
  // .perfetto.protos.CmaAllocInfoFtraceEvent cma_alloc_info = 466;
  bool has_cma_alloc_info() const;
  private:
  bool _internal_has_cma_alloc_info() const;

  public:
  void clear_cma_alloc_info() ;
  const ::perfetto::protos::CmaAllocInfoFtraceEvent& cma_alloc_info() const;
  PROTOBUF_NODISCARD ::perfetto::protos::CmaAllocInfoFtraceEvent* release_cma_alloc_info();
  ::perfetto::protos::CmaAllocInfoFtraceEvent* mutable_cma_alloc_info();
  void set_allocated_cma_alloc_info(::perfetto::protos::CmaAllocInfoFtraceEvent* cma_alloc_info);
  private:
  const ::perfetto::protos::CmaAllocInfoFtraceEvent& _internal_cma_alloc_info() const;
  ::perfetto::protos::CmaAllocInfoFtraceEvent* _internal_mutable_cma_alloc_info();
  public:
  void unsafe_arena_set_allocated_cma_alloc_info(
      ::perfetto::protos::CmaAllocInfoFtraceEvent* cma_alloc_info);
  ::perfetto::protos::CmaAllocInfoFtraceEvent* unsafe_arena_release_cma_alloc_info();
  // .perfetto.protos.LwisTracingMarkWriteFtraceEvent lwis_tracing_mark_write = 467;
  bool has_lwis_tracing_mark_write() const;
  private:
  bool _internal_has_lwis_tracing_mark_write() const;

  public:
  void clear_lwis_tracing_mark_write() ;
  const ::perfetto::protos::LwisTracingMarkWriteFtraceEvent& lwis_tracing_mark_write() const;
  PROTOBUF_NODISCARD ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* release_lwis_tracing_mark_write();
  ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* mutable_lwis_tracing_mark_write();
  void set_allocated_lwis_tracing_mark_write(::perfetto::protos::LwisTracingMarkWriteFtraceEvent* lwis_tracing_mark_write);
  private:
  const ::perfetto::protos::LwisTracingMarkWriteFtraceEvent& _internal_lwis_tracing_mark_write() const;
  ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* _internal_mutable_lwis_tracing_mark_write();
  public:
  void unsafe_arena_set_allocated_lwis_tracing_mark_write(
      ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* lwis_tracing_mark_write);
  ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* unsafe_arena_release_lwis_tracing_mark_write();
  // .perfetto.protos.VirtioGpuCmdQueueFtraceEvent virtio_gpu_cmd_queue = 468;
  bool has_virtio_gpu_cmd_queue() const;
  private:
  bool _internal_has_virtio_gpu_cmd_queue() const;

  public:
  void clear_virtio_gpu_cmd_queue() ;
  const ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent& virtio_gpu_cmd_queue() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* release_virtio_gpu_cmd_queue();
  ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* mutable_virtio_gpu_cmd_queue();
  void set_allocated_virtio_gpu_cmd_queue(::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* virtio_gpu_cmd_queue);
  private:
  const ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent& _internal_virtio_gpu_cmd_queue() const;
  ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* _internal_mutable_virtio_gpu_cmd_queue();
  public:
  void unsafe_arena_set_allocated_virtio_gpu_cmd_queue(
      ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* virtio_gpu_cmd_queue);
  ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* unsafe_arena_release_virtio_gpu_cmd_queue();
  // .perfetto.protos.VirtioGpuCmdResponseFtraceEvent virtio_gpu_cmd_response = 469;
  bool has_virtio_gpu_cmd_response() const;
  private:
  bool _internal_has_virtio_gpu_cmd_response() const;

  public:
  void clear_virtio_gpu_cmd_response() ;
  const ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent& virtio_gpu_cmd_response() const;
  PROTOBUF_NODISCARD ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* release_virtio_gpu_cmd_response();
  ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* mutable_virtio_gpu_cmd_response();
  void set_allocated_virtio_gpu_cmd_response(::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* virtio_gpu_cmd_response);
  private:
  const ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent& _internal_virtio_gpu_cmd_response() const;
  ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* _internal_mutable_virtio_gpu_cmd_response();
  public:
  void unsafe_arena_set_allocated_virtio_gpu_cmd_response(
      ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* virtio_gpu_cmd_response);
  ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* unsafe_arena_release_virtio_gpu_cmd_response();
  // .perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent mali_mali_KCPU_CQS_SET = 470;
  bool has_mali_mali_kcpu_cqs_set() const;
  private:
  bool _internal_has_mali_mali_kcpu_cqs_set() const;

  public:
  void clear_mali_mali_kcpu_cqs_set() ;
  const ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent& mali_mali_kcpu_cqs_set() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* release_mali_mali_kcpu_cqs_set();
  ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* mutable_mali_mali_kcpu_cqs_set();
  void set_allocated_mali_mali_kcpu_cqs_set(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* mali_mali_kcpu_cqs_set);
  private:
  const ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent& _internal_mali_mali_kcpu_cqs_set() const;
  ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* _internal_mutable_mali_mali_kcpu_cqs_set();
  public:
  void unsafe_arena_set_allocated_mali_mali_kcpu_cqs_set(
      ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* mali_mali_kcpu_cqs_set);
  ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* unsafe_arena_release_mali_mali_kcpu_cqs_set();
  // .perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent mali_mali_KCPU_CQS_WAIT_START = 471;
  bool has_mali_mali_kcpu_cqs_wait_start() const;
  private:
  bool _internal_has_mali_mali_kcpu_cqs_wait_start() const;

  public:
  void clear_mali_mali_kcpu_cqs_wait_start() ;
  const ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent& mali_mali_kcpu_cqs_wait_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* release_mali_mali_kcpu_cqs_wait_start();
  ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* mutable_mali_mali_kcpu_cqs_wait_start();
  void set_allocated_mali_mali_kcpu_cqs_wait_start(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* mali_mali_kcpu_cqs_wait_start);
  private:
  const ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent& _internal_mali_mali_kcpu_cqs_wait_start() const;
  ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* _internal_mutable_mali_mali_kcpu_cqs_wait_start();
  public:
  void unsafe_arena_set_allocated_mali_mali_kcpu_cqs_wait_start(
      ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* mali_mali_kcpu_cqs_wait_start);
  ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* unsafe_arena_release_mali_mali_kcpu_cqs_wait_start();
  // .perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent mali_mali_KCPU_CQS_WAIT_END = 472;
  bool has_mali_mali_kcpu_cqs_wait_end() const;
  private:
  bool _internal_has_mali_mali_kcpu_cqs_wait_end() const;

  public:
  void clear_mali_mali_kcpu_cqs_wait_end() ;
  const ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent& mali_mali_kcpu_cqs_wait_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* release_mali_mali_kcpu_cqs_wait_end();
  ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* mutable_mali_mali_kcpu_cqs_wait_end();
  void set_allocated_mali_mali_kcpu_cqs_wait_end(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* mali_mali_kcpu_cqs_wait_end);
  private:
  const ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent& _internal_mali_mali_kcpu_cqs_wait_end() const;
  ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* _internal_mutable_mali_mali_kcpu_cqs_wait_end();
  public:
  void unsafe_arena_set_allocated_mali_mali_kcpu_cqs_wait_end(
      ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* mali_mali_kcpu_cqs_wait_end);
  ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* unsafe_arena_release_mali_mali_kcpu_cqs_wait_end();
  // .perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent mali_mali_KCPU_FENCE_SIGNAL = 473;
  bool has_mali_mali_kcpu_fence_signal() const;
  private:
  bool _internal_has_mali_mali_kcpu_fence_signal() const;

  public:
  void clear_mali_mali_kcpu_fence_signal() ;
  const ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent& mali_mali_kcpu_fence_signal() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* release_mali_mali_kcpu_fence_signal();
  ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* mutable_mali_mali_kcpu_fence_signal();
  void set_allocated_mali_mali_kcpu_fence_signal(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* mali_mali_kcpu_fence_signal);
  private:
  const ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent& _internal_mali_mali_kcpu_fence_signal() const;
  ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* _internal_mutable_mali_mali_kcpu_fence_signal();
  public:
  void unsafe_arena_set_allocated_mali_mali_kcpu_fence_signal(
      ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* mali_mali_kcpu_fence_signal);
  ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* unsafe_arena_release_mali_mali_kcpu_fence_signal();
  // .perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent mali_mali_KCPU_FENCE_WAIT_START = 474;
  bool has_mali_mali_kcpu_fence_wait_start() const;
  private:
  bool _internal_has_mali_mali_kcpu_fence_wait_start() const;

  public:
  void clear_mali_mali_kcpu_fence_wait_start() ;
  const ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent& mali_mali_kcpu_fence_wait_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* release_mali_mali_kcpu_fence_wait_start();
  ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* mutable_mali_mali_kcpu_fence_wait_start();
  void set_allocated_mali_mali_kcpu_fence_wait_start(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* mali_mali_kcpu_fence_wait_start);
  private:
  const ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent& _internal_mali_mali_kcpu_fence_wait_start() const;
  ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* _internal_mutable_mali_mali_kcpu_fence_wait_start();
  public:
  void unsafe_arena_set_allocated_mali_mali_kcpu_fence_wait_start(
      ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* mali_mali_kcpu_fence_wait_start);
  ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* unsafe_arena_release_mali_mali_kcpu_fence_wait_start();
  // .perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent mali_mali_KCPU_FENCE_WAIT_END = 475;
  bool has_mali_mali_kcpu_fence_wait_end() const;
  private:
  bool _internal_has_mali_mali_kcpu_fence_wait_end() const;

  public:
  void clear_mali_mali_kcpu_fence_wait_end() ;
  const ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent& mali_mali_kcpu_fence_wait_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* release_mali_mali_kcpu_fence_wait_end();
  ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* mutable_mali_mali_kcpu_fence_wait_end();
  void set_allocated_mali_mali_kcpu_fence_wait_end(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* mali_mali_kcpu_fence_wait_end);
  private:
  const ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent& _internal_mali_mali_kcpu_fence_wait_end() const;
  ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* _internal_mutable_mali_mali_kcpu_fence_wait_end();
  public:
  void unsafe_arena_set_allocated_mali_mali_kcpu_fence_wait_end(
      ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* mali_mali_kcpu_fence_wait_end);
  ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* unsafe_arena_release_mali_mali_kcpu_fence_wait_end();
  // .perfetto.protos.HypEnterFtraceEvent hyp_enter = 476;
  bool has_hyp_enter() const;
  private:
  bool _internal_has_hyp_enter() const;

  public:
  void clear_hyp_enter() ;
  const ::perfetto::protos::HypEnterFtraceEvent& hyp_enter() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HypEnterFtraceEvent* release_hyp_enter();
  ::perfetto::protos::HypEnterFtraceEvent* mutable_hyp_enter();
  void set_allocated_hyp_enter(::perfetto::protos::HypEnterFtraceEvent* hyp_enter);
  private:
  const ::perfetto::protos::HypEnterFtraceEvent& _internal_hyp_enter() const;
  ::perfetto::protos::HypEnterFtraceEvent* _internal_mutable_hyp_enter();
  public:
  void unsafe_arena_set_allocated_hyp_enter(
      ::perfetto::protos::HypEnterFtraceEvent* hyp_enter);
  ::perfetto::protos::HypEnterFtraceEvent* unsafe_arena_release_hyp_enter();
  // .perfetto.protos.HypExitFtraceEvent hyp_exit = 477;
  bool has_hyp_exit() const;
  private:
  bool _internal_has_hyp_exit() const;

  public:
  void clear_hyp_exit() ;
  const ::perfetto::protos::HypExitFtraceEvent& hyp_exit() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HypExitFtraceEvent* release_hyp_exit();
  ::perfetto::protos::HypExitFtraceEvent* mutable_hyp_exit();
  void set_allocated_hyp_exit(::perfetto::protos::HypExitFtraceEvent* hyp_exit);
  private:
  const ::perfetto::protos::HypExitFtraceEvent& _internal_hyp_exit() const;
  ::perfetto::protos::HypExitFtraceEvent* _internal_mutable_hyp_exit();
  public:
  void unsafe_arena_set_allocated_hyp_exit(
      ::perfetto::protos::HypExitFtraceEvent* hyp_exit);
  ::perfetto::protos::HypExitFtraceEvent* unsafe_arena_release_hyp_exit();
  // .perfetto.protos.HostHcallFtraceEvent host_hcall = 478;
  bool has_host_hcall() const;
  private:
  bool _internal_has_host_hcall() const;

  public:
  void clear_host_hcall() ;
  const ::perfetto::protos::HostHcallFtraceEvent& host_hcall() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HostHcallFtraceEvent* release_host_hcall();
  ::perfetto::protos::HostHcallFtraceEvent* mutable_host_hcall();
  void set_allocated_host_hcall(::perfetto::protos::HostHcallFtraceEvent* host_hcall);
  private:
  const ::perfetto::protos::HostHcallFtraceEvent& _internal_host_hcall() const;
  ::perfetto::protos::HostHcallFtraceEvent* _internal_mutable_host_hcall();
  public:
  void unsafe_arena_set_allocated_host_hcall(
      ::perfetto::protos::HostHcallFtraceEvent* host_hcall);
  ::perfetto::protos::HostHcallFtraceEvent* unsafe_arena_release_host_hcall();
  // .perfetto.protos.HostSmcFtraceEvent host_smc = 479;
  bool has_host_smc() const;
  private:
  bool _internal_has_host_smc() const;

  public:
  void clear_host_smc() ;
  const ::perfetto::protos::HostSmcFtraceEvent& host_smc() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HostSmcFtraceEvent* release_host_smc();
  ::perfetto::protos::HostSmcFtraceEvent* mutable_host_smc();
  void set_allocated_host_smc(::perfetto::protos::HostSmcFtraceEvent* host_smc);
  private:
  const ::perfetto::protos::HostSmcFtraceEvent& _internal_host_smc() const;
  ::perfetto::protos::HostSmcFtraceEvent* _internal_mutable_host_smc();
  public:
  void unsafe_arena_set_allocated_host_smc(
      ::perfetto::protos::HostSmcFtraceEvent* host_smc);
  ::perfetto::protos::HostSmcFtraceEvent* unsafe_arena_release_host_smc();
  // .perfetto.protos.HostMemAbortFtraceEvent host_mem_abort = 480;
  bool has_host_mem_abort() const;
  private:
  bool _internal_has_host_mem_abort() const;

  public:
  void clear_host_mem_abort() ;
  const ::perfetto::protos::HostMemAbortFtraceEvent& host_mem_abort() const;
  PROTOBUF_NODISCARD ::perfetto::protos::HostMemAbortFtraceEvent* release_host_mem_abort();
  ::perfetto::protos::HostMemAbortFtraceEvent* mutable_host_mem_abort();
  void set_allocated_host_mem_abort(::perfetto::protos::HostMemAbortFtraceEvent* host_mem_abort);
  private:
  const ::perfetto::protos::HostMemAbortFtraceEvent& _internal_host_mem_abort() const;
  ::perfetto::protos::HostMemAbortFtraceEvent* _internal_mutable_host_mem_abort();
  public:
  void unsafe_arena_set_allocated_host_mem_abort(
      ::perfetto::protos::HostMemAbortFtraceEvent* host_mem_abort);
  ::perfetto::protos::HostMemAbortFtraceEvent* unsafe_arena_release_host_mem_abort();
  // .perfetto.protos.SuspendResumeMinimalFtraceEvent suspend_resume_minimal = 481;
  bool has_suspend_resume_minimal() const;
  private:
  bool _internal_has_suspend_resume_minimal() const;

  public:
  void clear_suspend_resume_minimal() ;
  const ::perfetto::protos::SuspendResumeMinimalFtraceEvent& suspend_resume_minimal() const;
  PROTOBUF_NODISCARD ::perfetto::protos::SuspendResumeMinimalFtraceEvent* release_suspend_resume_minimal();
  ::perfetto::protos::SuspendResumeMinimalFtraceEvent* mutable_suspend_resume_minimal();
  void set_allocated_suspend_resume_minimal(::perfetto::protos::SuspendResumeMinimalFtraceEvent* suspend_resume_minimal);
  private:
  const ::perfetto::protos::SuspendResumeMinimalFtraceEvent& _internal_suspend_resume_minimal() const;
  ::perfetto::protos::SuspendResumeMinimalFtraceEvent* _internal_mutable_suspend_resume_minimal();
  public:
  void unsafe_arena_set_allocated_suspend_resume_minimal(
      ::perfetto::protos::SuspendResumeMinimalFtraceEvent* suspend_resume_minimal);
  ::perfetto::protos::SuspendResumeMinimalFtraceEvent* unsafe_arena_release_suspend_resume_minimal();
  // .perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent mali_mali_CSF_INTERRUPT_START = 482;
  bool has_mali_mali_csf_interrupt_start() const;
  private:
  bool _internal_has_mali_mali_csf_interrupt_start() const;

  public:
  void clear_mali_mali_csf_interrupt_start() ;
  const ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent& mali_mali_csf_interrupt_start() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* release_mali_mali_csf_interrupt_start();
  ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* mutable_mali_mali_csf_interrupt_start();
  void set_allocated_mali_mali_csf_interrupt_start(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* mali_mali_csf_interrupt_start);
  private:
  const ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent& _internal_mali_mali_csf_interrupt_start() const;
  ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* _internal_mutable_mali_mali_csf_interrupt_start();
  public:
  void unsafe_arena_set_allocated_mali_mali_csf_interrupt_start(
      ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* mali_mali_csf_interrupt_start);
  ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* unsafe_arena_release_mali_mali_csf_interrupt_start();
  // .perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent mali_mali_CSF_INTERRUPT_END = 483;
  bool has_mali_mali_csf_interrupt_end() const;
  private:
  bool _internal_has_mali_mali_csf_interrupt_end() const;

  public:
  void clear_mali_mali_csf_interrupt_end() ;
  const ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent& mali_mali_csf_interrupt_end() const;
  PROTOBUF_NODISCARD ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* release_mali_mali_csf_interrupt_end();
  ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* mutable_mali_mali_csf_interrupt_end();
  void set_allocated_mali_mali_csf_interrupt_end(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* mali_mali_csf_interrupt_end);
  private:
  const ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent& _internal_mali_mali_csf_interrupt_end() const;
  ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* _internal_mutable_mali_mali_csf_interrupt_end();
  public:
  void unsafe_arena_set_allocated_mali_mali_csf_interrupt_end(
      ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* mali_mali_csf_interrupt_end);
  ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* unsafe_arena_release_mali_mali_csf_interrupt_end();
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEvent)
 private:
  class _Internal;
  void set_has_print();
  void set_has_sched_switch();
  void set_has_cpu_frequency();
  void set_has_cpu_frequency_limits();
  void set_has_cpu_idle();
  void set_has_clock_enable();
  void set_has_clock_disable();
  void set_has_clock_set_rate();
  void set_has_sched_wakeup();
  void set_has_sched_blocked_reason();
  void set_has_sched_cpu_hotplug();
  void set_has_sched_waking();
  void set_has_ipi_entry();
  void set_has_ipi_exit();
  void set_has_ipi_raise();
  void set_has_softirq_entry();
  void set_has_softirq_exit();
  void set_has_softirq_raise();
  void set_has_i2c_read();
  void set_has_i2c_write();
  void set_has_i2c_result();
  void set_has_i2c_reply();
  void set_has_smbus_read();
  void set_has_smbus_write();
  void set_has_smbus_result();
  void set_has_smbus_reply();
  void set_has_lowmemory_kill();
  void set_has_irq_handler_entry();
  void set_has_irq_handler_exit();
  void set_has_sync_pt();
  void set_has_sync_timeline();
  void set_has_sync_wait();
  void set_has_ext4_da_write_begin();
  void set_has_ext4_da_write_end();
  void set_has_ext4_sync_file_enter();
  void set_has_ext4_sync_file_exit();
  void set_has_block_rq_issue();
  void set_has_mm_vmscan_direct_reclaim_begin();
  void set_has_mm_vmscan_direct_reclaim_end();
  void set_has_mm_vmscan_kswapd_wake();
  void set_has_mm_vmscan_kswapd_sleep();
  void set_has_binder_transaction();
  void set_has_binder_transaction_received();
  void set_has_binder_set_priority();
  void set_has_binder_lock();
  void set_has_binder_locked();
  void set_has_binder_unlock();
  void set_has_workqueue_activate_work();
  void set_has_workqueue_execute_end();
  void set_has_workqueue_execute_start();
  void set_has_workqueue_queue_work();
  void set_has_regulator_disable();
  void set_has_regulator_disable_complete();
  void set_has_regulator_enable();
  void set_has_regulator_enable_complete();
  void set_has_regulator_enable_delay();
  void set_has_regulator_set_voltage();
  void set_has_regulator_set_voltage_complete();
  void set_has_cgroup_attach_task();
  void set_has_cgroup_mkdir();
  void set_has_cgroup_remount();
  void set_has_cgroup_rmdir();
  void set_has_cgroup_transfer_tasks();
  void set_has_cgroup_destroy_root();
  void set_has_cgroup_release();
  void set_has_cgroup_rename();
  void set_has_cgroup_setup_root();
  void set_has_mdp_cmd_kickoff();
  void set_has_mdp_commit();
  void set_has_mdp_perf_set_ot();
  void set_has_mdp_sspp_change();
  void set_has_tracing_mark_write();
  void set_has_mdp_cmd_pingpong_done();
  void set_has_mdp_compare_bw();
  void set_has_mdp_perf_set_panic_luts();
  void set_has_mdp_sspp_set();
  void set_has_mdp_cmd_readptr_done();
  void set_has_mdp_misr_crc();
  void set_has_mdp_perf_set_qos_luts();
  void set_has_mdp_trace_counter();
  void set_has_mdp_cmd_release_bw();
  void set_has_mdp_mixer_update();
  void set_has_mdp_perf_set_wm_levels();
  void set_has_mdp_video_underrun_done();
  void set_has_mdp_cmd_wait_pingpong();
  void set_has_mdp_perf_prefill_calc();
  void set_has_mdp_perf_update_bus();
  void set_has_rotator_bw_ao_as_context();
  void set_has_mm_filemap_add_to_page_cache();
  void set_has_mm_filemap_delete_from_page_cache();
  void set_has_mm_compaction_begin();
  void set_has_mm_compaction_defer_compaction();
  void set_has_mm_compaction_deferred();
  void set_has_mm_compaction_defer_reset();
  void set_has_mm_compaction_end();
  void set_has_mm_compaction_finished();
  void set_has_mm_compaction_isolate_freepages();
  void set_has_mm_compaction_isolate_migratepages();
  void set_has_mm_compaction_kcompactd_sleep();
  void set_has_mm_compaction_kcompactd_wake();
  void set_has_mm_compaction_migratepages();
  void set_has_mm_compaction_suitable();
  void set_has_mm_compaction_try_to_compact_pages();
  void set_has_mm_compaction_wakeup_kcompactd();
  void set_has_suspend_resume();
  void set_has_sched_wakeup_new();
  void set_has_block_bio_backmerge();
  void set_has_block_bio_bounce();
  void set_has_block_bio_complete();
  void set_has_block_bio_frontmerge();
  void set_has_block_bio_queue();
  void set_has_block_bio_remap();
  void set_has_block_dirty_buffer();
  void set_has_block_getrq();
  void set_has_block_plug();
  void set_has_block_rq_abort();
  void set_has_block_rq_complete();
  void set_has_block_rq_insert();
  void set_has_block_rq_remap();
  void set_has_block_rq_requeue();
  void set_has_block_sleeprq();
  void set_has_block_split();
  void set_has_block_touch_buffer();
  void set_has_block_unplug();
  void set_has_ext4_alloc_da_blocks();
  void set_has_ext4_allocate_blocks();
  void set_has_ext4_allocate_inode();
  void set_has_ext4_begin_ordered_truncate();
  void set_has_ext4_collapse_range();
  void set_has_ext4_da_release_space();
  void set_has_ext4_da_reserve_space();
  void set_has_ext4_da_update_reserve_space();
  void set_has_ext4_da_write_pages();
  void set_has_ext4_da_write_pages_extent();
  void set_has_ext4_direct_io_enter();
  void set_has_ext4_direct_io_exit();
  void set_has_ext4_discard_blocks();
  void set_has_ext4_discard_preallocations();
  void set_has_ext4_drop_inode();
  void set_has_ext4_es_cache_extent();
  void set_has_ext4_es_find_delayed_extent_range_enter();
  void set_has_ext4_es_find_delayed_extent_range_exit();
  void set_has_ext4_es_insert_extent();
  void set_has_ext4_es_lookup_extent_enter();
  void set_has_ext4_es_lookup_extent_exit();
  void set_has_ext4_es_remove_extent();
  void set_has_ext4_es_shrink();
  void set_has_ext4_es_shrink_count();
  void set_has_ext4_es_shrink_scan_enter();
  void set_has_ext4_es_shrink_scan_exit();
  void set_has_ext4_evict_inode();
  void set_has_ext4_ext_convert_to_initialized_enter();
  void set_has_ext4_ext_convert_to_initialized_fastpath();
  void set_has_ext4_ext_handle_unwritten_extents();
  void set_has_ext4_ext_in_cache();
  void set_has_ext4_ext_load_extent();
  void set_has_ext4_ext_map_blocks_enter();
  void set_has_ext4_ext_map_blocks_exit();
  void set_has_ext4_ext_put_in_cache();
  void set_has_ext4_ext_remove_space();
  void set_has_ext4_ext_remove_space_done();
  void set_has_ext4_ext_rm_idx();
  void set_has_ext4_ext_rm_leaf();
  void set_has_ext4_ext_show_extent();
  void set_has_ext4_fallocate_enter();
  void set_has_ext4_fallocate_exit();
  void set_has_ext4_find_delalloc_range();
  void set_has_ext4_forget();
  void set_has_ext4_free_blocks();
  void set_has_ext4_free_inode();
  void set_has_ext4_get_implied_cluster_alloc_exit();
  void set_has_ext4_get_reserved_cluster_alloc();
  void set_has_ext4_ind_map_blocks_enter();
  void set_has_ext4_ind_map_blocks_exit();
  void set_has_ext4_insert_range();
  void set_has_ext4_invalidatepage();
  void set_has_ext4_journal_start();
  void set_has_ext4_journal_start_reserved();
  void set_has_ext4_journalled_invalidatepage();
  void set_has_ext4_journalled_write_end();
  void set_has_ext4_load_inode();
  void set_has_ext4_load_inode_bitmap();
  void set_has_ext4_mark_inode_dirty();
  void set_has_ext4_mb_bitmap_load();
  void set_has_ext4_mb_buddy_bitmap_load();
  void set_has_ext4_mb_discard_preallocations();
  void set_has_ext4_mb_new_group_pa();
  void set_has_ext4_mb_new_inode_pa();
  void set_has_ext4_mb_release_group_pa();
  void set_has_ext4_mb_release_inode_pa();
  void set_has_ext4_mballoc_alloc();
  void set_has_ext4_mballoc_discard();
  void set_has_ext4_mballoc_free();
  void set_has_ext4_mballoc_prealloc();
  void set_has_ext4_other_inode_update_time();
  void set_has_ext4_punch_hole();
  void set_has_ext4_read_block_bitmap_load();
  void set_has_ext4_readpage();
  void set_has_ext4_releasepage();
  void set_has_ext4_remove_blocks();
  void set_has_ext4_request_blocks();
  void set_has_ext4_request_inode();
  void set_has_ext4_sync_fs();
  void set_has_ext4_trim_all_free();
  void set_has_ext4_trim_extent();
  void set_has_ext4_truncate_enter();
  void set_has_ext4_truncate_exit();
  void set_has_ext4_unlink_enter();
  void set_has_ext4_unlink_exit();
  void set_has_ext4_write_begin();
  void set_has_ext4_write_end();
  void set_has_ext4_writepage();
  void set_has_ext4_writepages();
  void set_has_ext4_writepages_result();
  void set_has_ext4_zero_range();
  void set_has_task_newtask();
  void set_has_task_rename();
  void set_has_sched_process_exec();
  void set_has_sched_process_exit();
  void set_has_sched_process_fork();
  void set_has_sched_process_free();
  void set_has_sched_process_hang();
  void set_has_sched_process_wait();
  void set_has_f2fs_do_submit_bio();
  void set_has_f2fs_evict_inode();
  void set_has_f2fs_fallocate();
  void set_has_f2fs_get_data_block();
  void set_has_f2fs_get_victim();
  void set_has_f2fs_iget();
  void set_has_f2fs_iget_exit();
  void set_has_f2fs_new_inode();
  void set_has_f2fs_readpage();
  void set_has_f2fs_reserve_new_block();
  void set_has_f2fs_set_page_dirty();
  void set_has_f2fs_submit_write_page();
  void set_has_f2fs_sync_file_enter();
  void set_has_f2fs_sync_file_exit();
  void set_has_f2fs_sync_fs();
  void set_has_f2fs_truncate();
  void set_has_f2fs_truncate_blocks_enter();
  void set_has_f2fs_truncate_blocks_exit();
  void set_has_f2fs_truncate_data_blocks_range();
  void set_has_f2fs_truncate_inode_blocks_enter();
  void set_has_f2fs_truncate_inode_blocks_exit();
  void set_has_f2fs_truncate_node();
  void set_has_f2fs_truncate_nodes_enter();
  void set_has_f2fs_truncate_nodes_exit();
  void set_has_f2fs_truncate_partial_nodes();
  void set_has_f2fs_unlink_enter();
  void set_has_f2fs_unlink_exit();
  void set_has_f2fs_vm_page_mkwrite();
  void set_has_f2fs_write_begin();
  void set_has_f2fs_write_checkpoint();
  void set_has_f2fs_write_end();
  void set_has_alloc_pages_iommu_end();
  void set_has_alloc_pages_iommu_fail();
  void set_has_alloc_pages_iommu_start();
  void set_has_alloc_pages_sys_end();
  void set_has_alloc_pages_sys_fail();
  void set_has_alloc_pages_sys_start();
  void set_has_dma_alloc_contiguous_retry();
  void set_has_iommu_map_range();
  void set_has_iommu_sec_ptbl_map_range_end();
  void set_has_iommu_sec_ptbl_map_range_start();
  void set_has_ion_alloc_buffer_end();
  void set_has_ion_alloc_buffer_fail();
  void set_has_ion_alloc_buffer_fallback();
  void set_has_ion_alloc_buffer_start();
  void set_has_ion_cp_alloc_retry();
  void set_has_ion_cp_secure_buffer_end();
  void set_has_ion_cp_secure_buffer_start();
  void set_has_ion_prefetching();
  void set_has_ion_secure_cma_add_to_pool_end();
  void set_has_ion_secure_cma_add_to_pool_start();
  void set_has_ion_secure_cma_allocate_end();
  void set_has_ion_secure_cma_allocate_start();
  void set_has_ion_secure_cma_shrink_pool_end();
  void set_has_ion_secure_cma_shrink_pool_start();
  void set_has_kfree();
  void set_has_kmalloc();
  void set_has_kmalloc_node();
  void set_has_kmem_cache_alloc();
  void set_has_kmem_cache_alloc_node();
  void set_has_kmem_cache_free();
  void set_has_migrate_pages_end();
  void set_has_migrate_pages_start();
  void set_has_migrate_retry();
  void set_has_mm_page_alloc();
  void set_has_mm_page_alloc_extfrag();
  void set_has_mm_page_alloc_zone_locked();
  void set_has_mm_page_free();
  void set_has_mm_page_free_batched();
  void set_has_mm_page_pcpu_drain();
  void set_has_rss_stat();
  void set_has_ion_heap_shrink();
  void set_has_ion_heap_grow();
  void set_has_fence_init();
  void set_has_fence_destroy();
  void set_has_fence_enable_signal();
  void set_has_fence_signaled();
  void set_has_clk_enable();
  void set_has_clk_disable();
  void set_has_clk_set_rate();
  void set_has_binder_transaction_alloc_buf();
  void set_has_signal_deliver();
  void set_has_signal_generate();
  void set_has_oom_score_adj_update();
  void set_has_generic();
  void set_has_mm_event_record();
  void set_has_sys_enter();
  void set_has_sys_exit();
  void set_has_zero();
  void set_has_gpu_frequency();
  void set_has_sde_tracing_mark_write();
  void set_has_mark_victim();
  void set_has_ion_stat();
  void set_has_ion_buffer_create();
  void set_has_ion_buffer_destroy();
  void set_has_scm_call_start();
  void set_has_scm_call_end();
  void set_has_gpu_mem_total();
  void set_has_thermal_temperature();
  void set_has_cdev_update();
  void set_has_cpuhp_exit();
  void set_has_cpuhp_multi_enter();
  void set_has_cpuhp_enter();
  void set_has_cpuhp_latency();
  void set_has_fastrpc_dma_stat();
  void set_has_dpu_tracing_mark_write();
  void set_has_g2d_tracing_mark_write();
  void set_has_mali_tracing_mark_write();
  void set_has_dma_heap_stat();
  void set_has_cpuhp_pause();
  void set_has_sched_pi_setprio();
  void set_has_sde_sde_evtlog();
  void set_has_sde_sde_perf_calc_crtc();
  void set_has_sde_sde_perf_crtc_update();
  void set_has_sde_sde_perf_set_qos_luts();
  void set_has_sde_sde_perf_update_bus();
  void set_has_rss_stat_throttled();
  void set_has_netif_receive_skb();
  void set_has_net_dev_xmit();
  void set_has_inet_sock_set_state();
  void set_has_tcp_retransmit_skb();
  void set_has_cros_ec_sensorhub_data();
  void set_has_napi_gro_receive_entry();
  void set_has_napi_gro_receive_exit();
  void set_has_kfree_skb();
  void set_has_kvm_access_fault();
  void set_has_kvm_ack_irq();
  void set_has_kvm_age_hva();
  void set_has_kvm_age_page();
  void set_has_kvm_arm_clear_debug();
  void set_has_kvm_arm_set_dreg32();
  void set_has_kvm_arm_set_regset();
  void set_has_kvm_arm_setup_debug();
  void set_has_kvm_entry();
  void set_has_kvm_exit();
  void set_has_kvm_fpu();
  void set_has_kvm_get_timer_map();
  void set_has_kvm_guest_fault();
  void set_has_kvm_handle_sys_reg();
  void set_has_kvm_hvc_arm64();
  void set_has_kvm_irq_line();
  void set_has_kvm_mmio();
  void set_has_kvm_mmio_emulate();
  void set_has_kvm_set_guest_debug();
  void set_has_kvm_set_irq();
  void set_has_kvm_set_spte_hva();
  void set_has_kvm_set_way_flush();
  void set_has_kvm_sys_access();
  void set_has_kvm_test_age_hva();
  void set_has_kvm_timer_emulate();
  void set_has_kvm_timer_hrtimer_expire();
  void set_has_kvm_timer_restore_state();
  void set_has_kvm_timer_save_state();
  void set_has_kvm_timer_update_irq();
  void set_has_kvm_toggle_cache();
  void set_has_kvm_unmap_hva_range();
  void set_has_kvm_userspace_exit();
  void set_has_kvm_vcpu_wakeup();
  void set_has_kvm_wfx_arm64();
  void set_has_trap_reg();
  void set_has_vgic_update_irq_pending();
  void set_has_wakeup_source_activate();
  void set_has_wakeup_source_deactivate();
  void set_has_ufshcd_command();
  void set_has_ufshcd_clk_gating();
  void set_has_console();
  void set_has_drm_vblank_event();
  void set_has_drm_vblank_event_delivered();
  void set_has_drm_sched_job();
  void set_has_drm_run_job();
  void set_has_drm_sched_process_job();
  void set_has_dma_fence_init();
  void set_has_dma_fence_emit();
  void set_has_dma_fence_signaled();
  void set_has_dma_fence_wait_start();
  void set_has_dma_fence_wait_end();
  void set_has_f2fs_iostat();
  void set_has_f2fs_iostat_latency();
  void set_has_sched_cpu_util_cfs();
  void set_has_v4l2_qbuf();
  void set_has_v4l2_dqbuf();
  void set_has_vb2_v4l2_buf_queue();
  void set_has_vb2_v4l2_buf_done();
  void set_has_vb2_v4l2_qbuf();
  void set_has_vb2_v4l2_dqbuf();
  void set_has_dsi_cmd_fifo_status();
  void set_has_dsi_rx();
  void set_has_dsi_tx();
  void set_has_android_fs_dataread_end();
  void set_has_android_fs_dataread_start();
  void set_has_android_fs_datawrite_end();
  void set_has_android_fs_datawrite_start();
  void set_has_android_fs_fsync_end();
  void set_has_android_fs_fsync_start();
  void set_has_funcgraph_entry();
  void set_has_funcgraph_exit();
  void set_has_virtio_video_cmd();
  void set_has_virtio_video_cmd_done();
  void set_has_virtio_video_resource_queue();
  void set_has_virtio_video_resource_queue_done();
  void set_has_mm_shrink_slab_start();
  void set_has_mm_shrink_slab_end();
  void set_has_trusty_smc();
  void set_has_trusty_smc_done();
  void set_has_trusty_std_call32();
  void set_has_trusty_std_call32_done();
  void set_has_trusty_share_memory();
  void set_has_trusty_share_memory_done();
  void set_has_trusty_reclaim_memory();
  void set_has_trusty_reclaim_memory_done();
  void set_has_trusty_irq();
  void set_has_trusty_ipc_handle_event();
  void set_has_trusty_ipc_connect();
  void set_has_trusty_ipc_connect_end();
  void set_has_trusty_ipc_write();
  void set_has_trusty_ipc_poll();
  void set_has_trusty_ipc_read();
  void set_has_trusty_ipc_read_end();
  void set_has_trusty_ipc_rx();
  void set_has_trusty_enqueue_nop();
  void set_has_cma_alloc_start();
  void set_has_cma_alloc_info();
  void set_has_lwis_tracing_mark_write();
  void set_has_virtio_gpu_cmd_queue();
  void set_has_virtio_gpu_cmd_response();
  void set_has_mali_mali_kcpu_cqs_set();
  void set_has_mali_mali_kcpu_cqs_wait_start();
  void set_has_mali_mali_kcpu_cqs_wait_end();
  void set_has_mali_mali_kcpu_fence_signal();
  void set_has_mali_mali_kcpu_fence_wait_start();
  void set_has_mali_mali_kcpu_fence_wait_end();
  void set_has_hyp_enter();
  void set_has_hyp_exit();
  void set_has_host_hcall();
  void set_has_host_smc();
  void set_has_host_mem_abort();
  void set_has_suspend_resume_minimal();
  void set_has_mali_mali_csf_interrupt_start();
  void set_has_mali_mali_csf_interrupt_end();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t timestamp_;
    ::uint32_t pid_;
    ::uint32_t common_flags_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::perfetto::protos::PrintFtraceEvent* print_;
      ::perfetto::protos::SchedSwitchFtraceEvent* sched_switch_;
      ::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency_;
      ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits_;
      ::perfetto::protos::CpuIdleFtraceEvent* cpu_idle_;
      ::perfetto::protos::ClockEnableFtraceEvent* clock_enable_;
      ::perfetto::protos::ClockDisableFtraceEvent* clock_disable_;
      ::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate_;
      ::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup_;
      ::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason_;
      ::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug_;
      ::perfetto::protos::SchedWakingFtraceEvent* sched_waking_;
      ::perfetto::protos::IpiEntryFtraceEvent* ipi_entry_;
      ::perfetto::protos::IpiExitFtraceEvent* ipi_exit_;
      ::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise_;
      ::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry_;
      ::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit_;
      ::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise_;
      ::perfetto::protos::I2cReadFtraceEvent* i2c_read_;
      ::perfetto::protos::I2cWriteFtraceEvent* i2c_write_;
      ::perfetto::protos::I2cResultFtraceEvent* i2c_result_;
      ::perfetto::protos::I2cReplyFtraceEvent* i2c_reply_;
      ::perfetto::protos::SmbusReadFtraceEvent* smbus_read_;
      ::perfetto::protos::SmbusWriteFtraceEvent* smbus_write_;
      ::perfetto::protos::SmbusResultFtraceEvent* smbus_result_;
      ::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply_;
      ::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill_;
      ::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry_;
      ::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit_;
      ::perfetto::protos::SyncPtFtraceEvent* sync_pt_;
      ::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline_;
      ::perfetto::protos::SyncWaitFtraceEvent* sync_wait_;
      ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin_;
      ::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end_;
      ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter_;
      ::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit_;
      ::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue_;
      ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin_;
      ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end_;
      ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake_;
      ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep_;
      ::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction_;
      ::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received_;
      ::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority_;
      ::perfetto::protos::BinderLockFtraceEvent* binder_lock_;
      ::perfetto::protos::BinderLockedFtraceEvent* binder_locked_;
      ::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock_;
      ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work_;
      ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end_;
      ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start_;
      ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work_;
      ::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable_;
      ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete_;
      ::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable_;
      ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete_;
      ::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay_;
      ::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage_;
      ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete_;
      ::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task_;
      ::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir_;
      ::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount_;
      ::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir_;
      ::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks_;
      ::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root_;
      ::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release_;
      ::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename_;
      ::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root_;
      ::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff_;
      ::perfetto::protos::MdpCommitFtraceEvent* mdp_commit_;
      ::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot_;
      ::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change_;
      ::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write_;
      ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done_;
      ::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw_;
      ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts_;
      ::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set_;
      ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done_;
      ::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc_;
      ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts_;
      ::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter_;
      ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw_;
      ::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update_;
      ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels_;
      ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done_;
      ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong_;
      ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc_;
      ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus_;
      ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context_;
      ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache_;
      ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache_;
      ::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin_;
      ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction_;
      ::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred_;
      ::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset_;
      ::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end_;
      ::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished_;
      ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages_;
      ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages_;
      ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep_;
      ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake_;
      ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages_;
      ::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable_;
      ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages_;
      ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd_;
      ::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume_;
      ::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new_;
      ::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge_;
      ::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce_;
      ::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete_;
      ::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge_;
      ::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue_;
      ::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap_;
      ::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer_;
      ::perfetto::protos::BlockGetrqFtraceEvent* block_getrq_;
      ::perfetto::protos::BlockPlugFtraceEvent* block_plug_;
      ::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort_;
      ::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete_;
      ::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert_;
      ::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap_;
      ::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue_;
      ::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq_;
      ::perfetto::protos::BlockSplitFtraceEvent* block_split_;
      ::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer_;
      ::perfetto::protos::BlockUnplugFtraceEvent* block_unplug_;
      ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks_;
      ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks_;
      ::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode_;
      ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate_;
      ::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range_;
      ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space_;
      ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space_;
      ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space_;
      ::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages_;
      ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent_;
      ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter_;
      ::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit_;
      ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks_;
      ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations_;
      ::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode_;
      ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent_;
      ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter_;
      ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit_;
      ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent_;
      ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter_;
      ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit_;
      ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent_;
      ::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink_;
      ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count_;
      ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter_;
      ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit_;
      ::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode_;
      ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter_;
      ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath_;
      ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents_;
      ::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache_;
      ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent_;
      ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter_;
      ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit_;
      ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache_;
      ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space_;
      ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done_;
      ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx_;
      ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf_;
      ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent_;
      ::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter_;
      ::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit_;
      ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range_;
      ::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget_;
      ::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks_;
      ::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode_;
      ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit_;
      ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc_;
      ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter_;
      ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit_;
      ::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range_;
      ::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage_;
      ::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start_;
      ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved_;
      ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage_;
      ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end_;
      ::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode_;
      ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap_;
      ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty_;
      ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load_;
      ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load_;
      ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations_;
      ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa_;
      ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa_;
      ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa_;
      ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa_;
      ::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc_;
      ::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard_;
      ::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free_;
      ::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc_;
      ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time_;
      ::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole_;
      ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load_;
      ::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage_;
      ::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage_;
      ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks_;
      ::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks_;
      ::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode_;
      ::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs_;
      ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free_;
      ::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent_;
      ::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter_;
      ::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit_;
      ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter_;
      ::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit_;
      ::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin_;
      ::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end_;
      ::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage_;
      ::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages_;
      ::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result_;
      ::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range_;
      ::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask_;
      ::perfetto::protos::TaskRenameFtraceEvent* task_rename_;
      ::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec_;
      ::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit_;
      ::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork_;
      ::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free_;
      ::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang_;
      ::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait_;
      ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio_;
      ::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode_;
      ::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate_;
      ::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block_;
      ::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim_;
      ::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget_;
      ::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit_;
      ::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode_;
      ::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage_;
      ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block_;
      ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty_;
      ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page_;
      ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter_;
      ::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit_;
      ::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs_;
      ::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate_;
      ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter_;
      ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit_;
      ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range_;
      ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter_;
      ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit_;
      ::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node_;
      ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter_;
      ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit_;
      ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes_;
      ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter_;
      ::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit_;
      ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite_;
      ::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin_;
      ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint_;
      ::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end_;
      ::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end_;
      ::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail_;
      ::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start_;
      ::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end_;
      ::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail_;
      ::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start_;
      ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry_;
      ::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range_;
      ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end_;
      ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start_;
      ::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end_;
      ::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail_;
      ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback_;
      ::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start_;
      ::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry_;
      ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end_;
      ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start_;
      ::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching_;
      ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end_;
      ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start_;
      ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end_;
      ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start_;
      ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end_;
      ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start_;
      ::perfetto::protos::KfreeFtraceEvent* kfree_;
      ::perfetto::protos::KmallocFtraceEvent* kmalloc_;
      ::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node_;
      ::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc_;
      ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node_;
      ::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free_;
      ::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end_;
      ::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start_;
      ::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry_;
      ::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc_;
      ::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag_;
      ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked_;
      ::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free_;
      ::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched_;
      ::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain_;
      ::perfetto::protos::RssStatFtraceEvent* rss_stat_;
      ::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink_;
      ::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow_;
      ::perfetto::protos::FenceInitFtraceEvent* fence_init_;
      ::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy_;
      ::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal_;
      ::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled_;
      ::perfetto::protos::ClkEnableFtraceEvent* clk_enable_;
      ::perfetto::protos::ClkDisableFtraceEvent* clk_disable_;
      ::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate_;
      ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf_;
      ::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver_;
      ::perfetto::protos::SignalGenerateFtraceEvent* signal_generate_;
      ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update_;
      ::perfetto::protos::GenericFtraceEvent* generic_;
      ::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record_;
      ::perfetto::protos::SysEnterFtraceEvent* sys_enter_;
      ::perfetto::protos::SysExitFtraceEvent* sys_exit_;
      ::perfetto::protos::ZeroFtraceEvent* zero_;
      ::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency_;
      ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write_;
      ::perfetto::protos::MarkVictimFtraceEvent* mark_victim_;
      ::perfetto::protos::IonStatFtraceEvent* ion_stat_;
      ::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create_;
      ::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy_;
      ::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start_;
      ::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end_;
      ::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total_;
      ::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature_;
      ::perfetto::protos::CdevUpdateFtraceEvent* cdev_update_;
      ::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit_;
      ::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter_;
      ::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter_;
      ::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency_;
      ::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat_;
      ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write_;
      ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write_;
      ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write_;
      ::perfetto::protos::DmaHeapStatFtraceEvent* dma_heap_stat_;
      ::perfetto::protos::CpuhpPauseFtraceEvent* cpuhp_pause_;
      ::perfetto::protos::SchedPiSetprioFtraceEvent* sched_pi_setprio_;
      ::perfetto::protos::SdeSdeEvtlogFtraceEvent* sde_sde_evtlog_;
      ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* sde_sde_perf_calc_crtc_;
      ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* sde_sde_perf_crtc_update_;
      ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* sde_sde_perf_set_qos_luts_;
      ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* sde_sde_perf_update_bus_;
      ::perfetto::protos::RssStatThrottledFtraceEvent* rss_stat_throttled_;
      ::perfetto::protos::NetifReceiveSkbFtraceEvent* netif_receive_skb_;
      ::perfetto::protos::NetDevXmitFtraceEvent* net_dev_xmit_;
      ::perfetto::protos::InetSockSetStateFtraceEvent* inet_sock_set_state_;
      ::perfetto::protos::TcpRetransmitSkbFtraceEvent* tcp_retransmit_skb_;
      ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* cros_ec_sensorhub_data_;
      ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* napi_gro_receive_entry_;
      ::perfetto::protos::NapiGroReceiveExitFtraceEvent* napi_gro_receive_exit_;
      ::perfetto::protos::KfreeSkbFtraceEvent* kfree_skb_;
      ::perfetto::protos::KvmAccessFaultFtraceEvent* kvm_access_fault_;
      ::perfetto::protos::KvmAckIrqFtraceEvent* kvm_ack_irq_;
      ::perfetto::protos::KvmAgeHvaFtraceEvent* kvm_age_hva_;
      ::perfetto::protos::KvmAgePageFtraceEvent* kvm_age_page_;
      ::perfetto::protos::KvmArmClearDebugFtraceEvent* kvm_arm_clear_debug_;
      ::perfetto::protos::KvmArmSetDreg32FtraceEvent* kvm_arm_set_dreg32_;
      ::perfetto::protos::KvmArmSetRegsetFtraceEvent* kvm_arm_set_regset_;
      ::perfetto::protos::KvmArmSetupDebugFtraceEvent* kvm_arm_setup_debug_;
      ::perfetto::protos::KvmEntryFtraceEvent* kvm_entry_;
      ::perfetto::protos::KvmExitFtraceEvent* kvm_exit_;
      ::perfetto::protos::KvmFpuFtraceEvent* kvm_fpu_;
      ::perfetto::protos::KvmGetTimerMapFtraceEvent* kvm_get_timer_map_;
      ::perfetto::protos::KvmGuestFaultFtraceEvent* kvm_guest_fault_;
      ::perfetto::protos::KvmHandleSysRegFtraceEvent* kvm_handle_sys_reg_;
      ::perfetto::protos::KvmHvcArm64FtraceEvent* kvm_hvc_arm64_;
      ::perfetto::protos::KvmIrqLineFtraceEvent* kvm_irq_line_;
      ::perfetto::protos::KvmMmioFtraceEvent* kvm_mmio_;
      ::perfetto::protos::KvmMmioEmulateFtraceEvent* kvm_mmio_emulate_;
      ::perfetto::protos::KvmSetGuestDebugFtraceEvent* kvm_set_guest_debug_;
      ::perfetto::protos::KvmSetIrqFtraceEvent* kvm_set_irq_;
      ::perfetto::protos::KvmSetSpteHvaFtraceEvent* kvm_set_spte_hva_;
      ::perfetto::protos::KvmSetWayFlushFtraceEvent* kvm_set_way_flush_;
      ::perfetto::protos::KvmSysAccessFtraceEvent* kvm_sys_access_;
      ::perfetto::protos::KvmTestAgeHvaFtraceEvent* kvm_test_age_hva_;
      ::perfetto::protos::KvmTimerEmulateFtraceEvent* kvm_timer_emulate_;
      ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* kvm_timer_hrtimer_expire_;
      ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* kvm_timer_restore_state_;
      ::perfetto::protos::KvmTimerSaveStateFtraceEvent* kvm_timer_save_state_;
      ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* kvm_timer_update_irq_;
      ::perfetto::protos::KvmToggleCacheFtraceEvent* kvm_toggle_cache_;
      ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* kvm_unmap_hva_range_;
      ::perfetto::protos::KvmUserspaceExitFtraceEvent* kvm_userspace_exit_;
      ::perfetto::protos::KvmVcpuWakeupFtraceEvent* kvm_vcpu_wakeup_;
      ::perfetto::protos::KvmWfxArm64FtraceEvent* kvm_wfx_arm64_;
      ::perfetto::protos::TrapRegFtraceEvent* trap_reg_;
      ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* vgic_update_irq_pending_;
      ::perfetto::protos::WakeupSourceActivateFtraceEvent* wakeup_source_activate_;
      ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* wakeup_source_deactivate_;
      ::perfetto::protos::UfshcdCommandFtraceEvent* ufshcd_command_;
      ::perfetto::protos::UfshcdClkGatingFtraceEvent* ufshcd_clk_gating_;
      ::perfetto::protos::ConsoleFtraceEvent* console_;
      ::perfetto::protos::DrmVblankEventFtraceEvent* drm_vblank_event_;
      ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* drm_vblank_event_delivered_;
      ::perfetto::protos::DrmSchedJobFtraceEvent* drm_sched_job_;
      ::perfetto::protos::DrmRunJobFtraceEvent* drm_run_job_;
      ::perfetto::protos::DrmSchedProcessJobFtraceEvent* drm_sched_process_job_;
      ::perfetto::protos::DmaFenceInitFtraceEvent* dma_fence_init_;
      ::perfetto::protos::DmaFenceEmitFtraceEvent* dma_fence_emit_;
      ::perfetto::protos::DmaFenceSignaledFtraceEvent* dma_fence_signaled_;
      ::perfetto::protos::DmaFenceWaitStartFtraceEvent* dma_fence_wait_start_;
      ::perfetto::protos::DmaFenceWaitEndFtraceEvent* dma_fence_wait_end_;
      ::perfetto::protos::F2fsIostatFtraceEvent* f2fs_iostat_;
      ::perfetto::protos::F2fsIostatLatencyFtraceEvent* f2fs_iostat_latency_;
      ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* sched_cpu_util_cfs_;
      ::perfetto::protos::V4l2QbufFtraceEvent* v4l2_qbuf_;
      ::perfetto::protos::V4l2DqbufFtraceEvent* v4l2_dqbuf_;
      ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* vb2_v4l2_buf_queue_;
      ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* vb2_v4l2_buf_done_;
      ::perfetto::protos::Vb2V4l2QbufFtraceEvent* vb2_v4l2_qbuf_;
      ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* vb2_v4l2_dqbuf_;
      ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* dsi_cmd_fifo_status_;
      ::perfetto::protos::DsiRxFtraceEvent* dsi_rx_;
      ::perfetto::protos::DsiTxFtraceEvent* dsi_tx_;
      ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* android_fs_dataread_end_;
      ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* android_fs_dataread_start_;
      ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* android_fs_datawrite_end_;
      ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* android_fs_datawrite_start_;
      ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* android_fs_fsync_end_;
      ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* android_fs_fsync_start_;
      ::perfetto::protos::FuncgraphEntryFtraceEvent* funcgraph_entry_;
      ::perfetto::protos::FuncgraphExitFtraceEvent* funcgraph_exit_;
      ::perfetto::protos::VirtioVideoCmdFtraceEvent* virtio_video_cmd_;
      ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* virtio_video_cmd_done_;
      ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* virtio_video_resource_queue_;
      ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* virtio_video_resource_queue_done_;
      ::perfetto::protos::MmShrinkSlabStartFtraceEvent* mm_shrink_slab_start_;
      ::perfetto::protos::MmShrinkSlabEndFtraceEvent* mm_shrink_slab_end_;
      ::perfetto::protos::TrustySmcFtraceEvent* trusty_smc_;
      ::perfetto::protos::TrustySmcDoneFtraceEvent* trusty_smc_done_;
      ::perfetto::protos::TrustyStdCall32FtraceEvent* trusty_std_call32_;
      ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* trusty_std_call32_done_;
      ::perfetto::protos::TrustyShareMemoryFtraceEvent* trusty_share_memory_;
      ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* trusty_share_memory_done_;
      ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* trusty_reclaim_memory_;
      ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* trusty_reclaim_memory_done_;
      ::perfetto::protos::TrustyIrqFtraceEvent* trusty_irq_;
      ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* trusty_ipc_handle_event_;
      ::perfetto::protos::TrustyIpcConnectFtraceEvent* trusty_ipc_connect_;
      ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* trusty_ipc_connect_end_;
      ::perfetto::protos::TrustyIpcWriteFtraceEvent* trusty_ipc_write_;
      ::perfetto::protos::TrustyIpcPollFtraceEvent* trusty_ipc_poll_;
      ::perfetto::protos::TrustyIpcReadFtraceEvent* trusty_ipc_read_;
      ::perfetto::protos::TrustyIpcReadEndFtraceEvent* trusty_ipc_read_end_;
      ::perfetto::protos::TrustyIpcRxFtraceEvent* trusty_ipc_rx_;
      ::perfetto::protos::TrustyEnqueueNopFtraceEvent* trusty_enqueue_nop_;
      ::perfetto::protos::CmaAllocStartFtraceEvent* cma_alloc_start_;
      ::perfetto::protos::CmaAllocInfoFtraceEvent* cma_alloc_info_;
      ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* lwis_tracing_mark_write_;
      ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* virtio_gpu_cmd_queue_;
      ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* virtio_gpu_cmd_response_;
      ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* mali_mali_kcpu_cqs_set_;
      ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* mali_mali_kcpu_cqs_wait_start_;
      ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* mali_mali_kcpu_cqs_wait_end_;
      ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* mali_mali_kcpu_fence_signal_;
      ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* mali_mali_kcpu_fence_wait_start_;
      ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* mali_mali_kcpu_fence_wait_end_;
      ::perfetto::protos::HypEnterFtraceEvent* hyp_enter_;
      ::perfetto::protos::HypExitFtraceEvent* hyp_exit_;
      ::perfetto::protos::HostHcallFtraceEvent* host_hcall_;
      ::perfetto::protos::HostSmcFtraceEvent* host_smc_;
      ::perfetto::protos::HostMemAbortFtraceEvent* host_mem_abort_;
      ::perfetto::protos::SuspendResumeMinimalFtraceEvent* suspend_resume_minimal_;
      ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* mali_mali_csf_interrupt_start_;
      ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* mali_mali_csf_interrupt_end_;
    } event_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FtraceEvent

// optional uint64 timestamp = 1;
inline bool FtraceEvent::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t FtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void FtraceEvent::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEvent.timestamp)
}
inline ::uint64_t FtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void FtraceEvent::_internal_set_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}

// optional uint32 pid = 2;
inline bool FtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FtraceEvent::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t FtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.pid)
  return _internal_pid();
}
inline void FtraceEvent::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEvent.pid)
}
inline ::uint32_t FtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void FtraceEvent::_internal_set_pid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional uint32 common_flags = 5;
inline bool FtraceEvent::has_common_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FtraceEvent::clear_common_flags() {
  _impl_.common_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FtraceEvent::common_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.common_flags)
  return _internal_common_flags();
}
inline void FtraceEvent::set_common_flags(::uint32_t value) {
  _internal_set_common_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEvent.common_flags)
}
inline ::uint32_t FtraceEvent::_internal_common_flags() const {
  return _impl_.common_flags_;
}
inline void FtraceEvent::_internal_set_common_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.common_flags_ = value;
}

// .perfetto.protos.PrintFtraceEvent print = 3;
inline bool FtraceEvent::has_print() const {
  return event_case() == kPrint;
}
inline bool FtraceEvent::_internal_has_print() const {
  return event_case() == kPrint;
}
inline void FtraceEvent::set_has_print() {
  _impl_._oneof_case_[0] = kPrint;
}
inline ::perfetto::protos::PrintFtraceEvent* FtraceEvent::release_print() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.print)
  if (event_case() == kPrint) {
    clear_has_event();
    ::perfetto::protos::PrintFtraceEvent* temp = _impl_.event_.print_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.print_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::PrintFtraceEvent& FtraceEvent::_internal_print() const {
  return event_case() == kPrint
      ? *_impl_.event_.print_
      : reinterpret_cast<::perfetto::protos::PrintFtraceEvent&>(::perfetto::protos::_PrintFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::PrintFtraceEvent& FtraceEvent::print() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.print)
  return _internal_print();
}
inline ::perfetto::protos::PrintFtraceEvent* FtraceEvent::unsafe_arena_release_print() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.print)
  if (event_case() == kPrint) {
    clear_has_event();
    ::perfetto::protos::PrintFtraceEvent* temp = _impl_.event_.print_;
    _impl_.event_.print_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_print(::perfetto::protos::PrintFtraceEvent* print) {
  clear_event();
  if (print) {
    set_has_print();
    _impl_.event_.print_ = print;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.print)
}
inline ::perfetto::protos::PrintFtraceEvent* FtraceEvent::_internal_mutable_print() {
  if (event_case() != kPrint) {
    clear_event();
    set_has_print();
    _impl_.event_.print_ = CreateMaybeMessage< ::perfetto::protos::PrintFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.print_;
}
inline ::perfetto::protos::PrintFtraceEvent* FtraceEvent::mutable_print() {
  ::perfetto::protos::PrintFtraceEvent* _msg = _internal_mutable_print();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.print)
  return _msg;
}

// .perfetto.protos.SchedSwitchFtraceEvent sched_switch = 4;
inline bool FtraceEvent::has_sched_switch() const {
  return event_case() == kSchedSwitch;
}
inline bool FtraceEvent::_internal_has_sched_switch() const {
  return event_case() == kSchedSwitch;
}
inline void FtraceEvent::set_has_sched_switch() {
  _impl_._oneof_case_[0] = kSchedSwitch;
}
inline ::perfetto::protos::SchedSwitchFtraceEvent* FtraceEvent::release_sched_switch() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_switch)
  if (event_case() == kSchedSwitch) {
    clear_has_event();
    ::perfetto::protos::SchedSwitchFtraceEvent* temp = _impl_.event_.sched_switch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_switch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedSwitchFtraceEvent& FtraceEvent::_internal_sched_switch() const {
  return event_case() == kSchedSwitch
      ? *_impl_.event_.sched_switch_
      : reinterpret_cast<::perfetto::protos::SchedSwitchFtraceEvent&>(::perfetto::protos::_SchedSwitchFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedSwitchFtraceEvent& FtraceEvent::sched_switch() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_switch)
  return _internal_sched_switch();
}
inline ::perfetto::protos::SchedSwitchFtraceEvent* FtraceEvent::unsafe_arena_release_sched_switch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_switch)
  if (event_case() == kSchedSwitch) {
    clear_has_event();
    ::perfetto::protos::SchedSwitchFtraceEvent* temp = _impl_.event_.sched_switch_;
    _impl_.event_.sched_switch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_switch(::perfetto::protos::SchedSwitchFtraceEvent* sched_switch) {
  clear_event();
  if (sched_switch) {
    set_has_sched_switch();
    _impl_.event_.sched_switch_ = sched_switch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_switch)
}
inline ::perfetto::protos::SchedSwitchFtraceEvent* FtraceEvent::_internal_mutable_sched_switch() {
  if (event_case() != kSchedSwitch) {
    clear_event();
    set_has_sched_switch();
    _impl_.event_.sched_switch_ = CreateMaybeMessage< ::perfetto::protos::SchedSwitchFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_switch_;
}
inline ::perfetto::protos::SchedSwitchFtraceEvent* FtraceEvent::mutable_sched_switch() {
  ::perfetto::protos::SchedSwitchFtraceEvent* _msg = _internal_mutable_sched_switch();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_switch)
  return _msg;
}

// .perfetto.protos.CpuFrequencyFtraceEvent cpu_frequency = 11;
inline bool FtraceEvent::has_cpu_frequency() const {
  return event_case() == kCpuFrequency;
}
inline bool FtraceEvent::_internal_has_cpu_frequency() const {
  return event_case() == kCpuFrequency;
}
inline void FtraceEvent::set_has_cpu_frequency() {
  _impl_._oneof_case_[0] = kCpuFrequency;
}
inline ::perfetto::protos::CpuFrequencyFtraceEvent* FtraceEvent::release_cpu_frequency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpu_frequency)
  if (event_case() == kCpuFrequency) {
    clear_has_event();
    ::perfetto::protos::CpuFrequencyFtraceEvent* temp = _impl_.event_.cpu_frequency_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpu_frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuFrequencyFtraceEvent& FtraceEvent::_internal_cpu_frequency() const {
  return event_case() == kCpuFrequency
      ? *_impl_.event_.cpu_frequency_
      : reinterpret_cast<::perfetto::protos::CpuFrequencyFtraceEvent&>(::perfetto::protos::_CpuFrequencyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuFrequencyFtraceEvent& FtraceEvent::cpu_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpu_frequency)
  return _internal_cpu_frequency();
}
inline ::perfetto::protos::CpuFrequencyFtraceEvent* FtraceEvent::unsafe_arena_release_cpu_frequency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpu_frequency)
  if (event_case() == kCpuFrequency) {
    clear_has_event();
    ::perfetto::protos::CpuFrequencyFtraceEvent* temp = _impl_.event_.cpu_frequency_;
    _impl_.event_.cpu_frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpu_frequency(::perfetto::protos::CpuFrequencyFtraceEvent* cpu_frequency) {
  clear_event();
  if (cpu_frequency) {
    set_has_cpu_frequency();
    _impl_.event_.cpu_frequency_ = cpu_frequency;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpu_frequency)
}
inline ::perfetto::protos::CpuFrequencyFtraceEvent* FtraceEvent::_internal_mutable_cpu_frequency() {
  if (event_case() != kCpuFrequency) {
    clear_event();
    set_has_cpu_frequency();
    _impl_.event_.cpu_frequency_ = CreateMaybeMessage< ::perfetto::protos::CpuFrequencyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpu_frequency_;
}
inline ::perfetto::protos::CpuFrequencyFtraceEvent* FtraceEvent::mutable_cpu_frequency() {
  ::perfetto::protos::CpuFrequencyFtraceEvent* _msg = _internal_mutable_cpu_frequency();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpu_frequency)
  return _msg;
}

// .perfetto.protos.CpuFrequencyLimitsFtraceEvent cpu_frequency_limits = 12;
inline bool FtraceEvent::has_cpu_frequency_limits() const {
  return event_case() == kCpuFrequencyLimits;
}
inline bool FtraceEvent::_internal_has_cpu_frequency_limits() const {
  return event_case() == kCpuFrequencyLimits;
}
inline void FtraceEvent::set_has_cpu_frequency_limits() {
  _impl_._oneof_case_[0] = kCpuFrequencyLimits;
}
inline ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* FtraceEvent::release_cpu_frequency_limits() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  if (event_case() == kCpuFrequencyLimits) {
    clear_has_event();
    ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* temp = _impl_.event_.cpu_frequency_limits_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpu_frequency_limits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& FtraceEvent::_internal_cpu_frequency_limits() const {
  return event_case() == kCpuFrequencyLimits
      ? *_impl_.event_.cpu_frequency_limits_
      : reinterpret_cast<::perfetto::protos::CpuFrequencyLimitsFtraceEvent&>(::perfetto::protos::_CpuFrequencyLimitsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuFrequencyLimitsFtraceEvent& FtraceEvent::cpu_frequency_limits() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  return _internal_cpu_frequency_limits();
}
inline ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* FtraceEvent::unsafe_arena_release_cpu_frequency_limits() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  if (event_case() == kCpuFrequencyLimits) {
    clear_has_event();
    ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* temp = _impl_.event_.cpu_frequency_limits_;
    _impl_.event_.cpu_frequency_limits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpu_frequency_limits(::perfetto::protos::CpuFrequencyLimitsFtraceEvent* cpu_frequency_limits) {
  clear_event();
  if (cpu_frequency_limits) {
    set_has_cpu_frequency_limits();
    _impl_.event_.cpu_frequency_limits_ = cpu_frequency_limits;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpu_frequency_limits)
}
inline ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* FtraceEvent::_internal_mutable_cpu_frequency_limits() {
  if (event_case() != kCpuFrequencyLimits) {
    clear_event();
    set_has_cpu_frequency_limits();
    _impl_.event_.cpu_frequency_limits_ = CreateMaybeMessage< ::perfetto::protos::CpuFrequencyLimitsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpu_frequency_limits_;
}
inline ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* FtraceEvent::mutable_cpu_frequency_limits() {
  ::perfetto::protos::CpuFrequencyLimitsFtraceEvent* _msg = _internal_mutable_cpu_frequency_limits();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpu_frequency_limits)
  return _msg;
}

// .perfetto.protos.CpuIdleFtraceEvent cpu_idle = 13;
inline bool FtraceEvent::has_cpu_idle() const {
  return event_case() == kCpuIdle;
}
inline bool FtraceEvent::_internal_has_cpu_idle() const {
  return event_case() == kCpuIdle;
}
inline void FtraceEvent::set_has_cpu_idle() {
  _impl_._oneof_case_[0] = kCpuIdle;
}
inline ::perfetto::protos::CpuIdleFtraceEvent* FtraceEvent::release_cpu_idle() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpu_idle)
  if (event_case() == kCpuIdle) {
    clear_has_event();
    ::perfetto::protos::CpuIdleFtraceEvent* temp = _impl_.event_.cpu_idle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpu_idle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuIdleFtraceEvent& FtraceEvent::_internal_cpu_idle() const {
  return event_case() == kCpuIdle
      ? *_impl_.event_.cpu_idle_
      : reinterpret_cast<::perfetto::protos::CpuIdleFtraceEvent&>(::perfetto::protos::_CpuIdleFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuIdleFtraceEvent& FtraceEvent::cpu_idle() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpu_idle)
  return _internal_cpu_idle();
}
inline ::perfetto::protos::CpuIdleFtraceEvent* FtraceEvent::unsafe_arena_release_cpu_idle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpu_idle)
  if (event_case() == kCpuIdle) {
    clear_has_event();
    ::perfetto::protos::CpuIdleFtraceEvent* temp = _impl_.event_.cpu_idle_;
    _impl_.event_.cpu_idle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpu_idle(::perfetto::protos::CpuIdleFtraceEvent* cpu_idle) {
  clear_event();
  if (cpu_idle) {
    set_has_cpu_idle();
    _impl_.event_.cpu_idle_ = cpu_idle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpu_idle)
}
inline ::perfetto::protos::CpuIdleFtraceEvent* FtraceEvent::_internal_mutable_cpu_idle() {
  if (event_case() != kCpuIdle) {
    clear_event();
    set_has_cpu_idle();
    _impl_.event_.cpu_idle_ = CreateMaybeMessage< ::perfetto::protos::CpuIdleFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpu_idle_;
}
inline ::perfetto::protos::CpuIdleFtraceEvent* FtraceEvent::mutable_cpu_idle() {
  ::perfetto::protos::CpuIdleFtraceEvent* _msg = _internal_mutable_cpu_idle();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpu_idle)
  return _msg;
}

// .perfetto.protos.ClockEnableFtraceEvent clock_enable = 14;
inline bool FtraceEvent::has_clock_enable() const {
  return event_case() == kClockEnable;
}
inline bool FtraceEvent::_internal_has_clock_enable() const {
  return event_case() == kClockEnable;
}
inline void FtraceEvent::set_has_clock_enable() {
  _impl_._oneof_case_[0] = kClockEnable;
}
inline ::perfetto::protos::ClockEnableFtraceEvent* FtraceEvent::release_clock_enable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clock_enable)
  if (event_case() == kClockEnable) {
    clear_has_event();
    ::perfetto::protos::ClockEnableFtraceEvent* temp = _impl_.event_.clock_enable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.clock_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockEnableFtraceEvent& FtraceEvent::_internal_clock_enable() const {
  return event_case() == kClockEnable
      ? *_impl_.event_.clock_enable_
      : reinterpret_cast<::perfetto::protos::ClockEnableFtraceEvent&>(::perfetto::protos::_ClockEnableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ClockEnableFtraceEvent& FtraceEvent::clock_enable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clock_enable)
  return _internal_clock_enable();
}
inline ::perfetto::protos::ClockEnableFtraceEvent* FtraceEvent::unsafe_arena_release_clock_enable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.clock_enable)
  if (event_case() == kClockEnable) {
    clear_has_event();
    ::perfetto::protos::ClockEnableFtraceEvent* temp = _impl_.event_.clock_enable_;
    _impl_.event_.clock_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_clock_enable(::perfetto::protos::ClockEnableFtraceEvent* clock_enable) {
  clear_event();
  if (clock_enable) {
    set_has_clock_enable();
    _impl_.event_.clock_enable_ = clock_enable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.clock_enable)
}
inline ::perfetto::protos::ClockEnableFtraceEvent* FtraceEvent::_internal_mutable_clock_enable() {
  if (event_case() != kClockEnable) {
    clear_event();
    set_has_clock_enable();
    _impl_.event_.clock_enable_ = CreateMaybeMessage< ::perfetto::protos::ClockEnableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.clock_enable_;
}
inline ::perfetto::protos::ClockEnableFtraceEvent* FtraceEvent::mutable_clock_enable() {
  ::perfetto::protos::ClockEnableFtraceEvent* _msg = _internal_mutable_clock_enable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clock_enable)
  return _msg;
}

// .perfetto.protos.ClockDisableFtraceEvent clock_disable = 15;
inline bool FtraceEvent::has_clock_disable() const {
  return event_case() == kClockDisable;
}
inline bool FtraceEvent::_internal_has_clock_disable() const {
  return event_case() == kClockDisable;
}
inline void FtraceEvent::set_has_clock_disable() {
  _impl_._oneof_case_[0] = kClockDisable;
}
inline ::perfetto::protos::ClockDisableFtraceEvent* FtraceEvent::release_clock_disable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clock_disable)
  if (event_case() == kClockDisable) {
    clear_has_event();
    ::perfetto::protos::ClockDisableFtraceEvent* temp = _impl_.event_.clock_disable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.clock_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockDisableFtraceEvent& FtraceEvent::_internal_clock_disable() const {
  return event_case() == kClockDisable
      ? *_impl_.event_.clock_disable_
      : reinterpret_cast<::perfetto::protos::ClockDisableFtraceEvent&>(::perfetto::protos::_ClockDisableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ClockDisableFtraceEvent& FtraceEvent::clock_disable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clock_disable)
  return _internal_clock_disable();
}
inline ::perfetto::protos::ClockDisableFtraceEvent* FtraceEvent::unsafe_arena_release_clock_disable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.clock_disable)
  if (event_case() == kClockDisable) {
    clear_has_event();
    ::perfetto::protos::ClockDisableFtraceEvent* temp = _impl_.event_.clock_disable_;
    _impl_.event_.clock_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_clock_disable(::perfetto::protos::ClockDisableFtraceEvent* clock_disable) {
  clear_event();
  if (clock_disable) {
    set_has_clock_disable();
    _impl_.event_.clock_disable_ = clock_disable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.clock_disable)
}
inline ::perfetto::protos::ClockDisableFtraceEvent* FtraceEvent::_internal_mutable_clock_disable() {
  if (event_case() != kClockDisable) {
    clear_event();
    set_has_clock_disable();
    _impl_.event_.clock_disable_ = CreateMaybeMessage< ::perfetto::protos::ClockDisableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.clock_disable_;
}
inline ::perfetto::protos::ClockDisableFtraceEvent* FtraceEvent::mutable_clock_disable() {
  ::perfetto::protos::ClockDisableFtraceEvent* _msg = _internal_mutable_clock_disable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clock_disable)
  return _msg;
}

// .perfetto.protos.ClockSetRateFtraceEvent clock_set_rate = 16;
inline bool FtraceEvent::has_clock_set_rate() const {
  return event_case() == kClockSetRate;
}
inline bool FtraceEvent::_internal_has_clock_set_rate() const {
  return event_case() == kClockSetRate;
}
inline void FtraceEvent::set_has_clock_set_rate() {
  _impl_._oneof_case_[0] = kClockSetRate;
}
inline ::perfetto::protos::ClockSetRateFtraceEvent* FtraceEvent::release_clock_set_rate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clock_set_rate)
  if (event_case() == kClockSetRate) {
    clear_has_event();
    ::perfetto::protos::ClockSetRateFtraceEvent* temp = _impl_.event_.clock_set_rate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.clock_set_rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClockSetRateFtraceEvent& FtraceEvent::_internal_clock_set_rate() const {
  return event_case() == kClockSetRate
      ? *_impl_.event_.clock_set_rate_
      : reinterpret_cast<::perfetto::protos::ClockSetRateFtraceEvent&>(::perfetto::protos::_ClockSetRateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ClockSetRateFtraceEvent& FtraceEvent::clock_set_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clock_set_rate)
  return _internal_clock_set_rate();
}
inline ::perfetto::protos::ClockSetRateFtraceEvent* FtraceEvent::unsafe_arena_release_clock_set_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.clock_set_rate)
  if (event_case() == kClockSetRate) {
    clear_has_event();
    ::perfetto::protos::ClockSetRateFtraceEvent* temp = _impl_.event_.clock_set_rate_;
    _impl_.event_.clock_set_rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_clock_set_rate(::perfetto::protos::ClockSetRateFtraceEvent* clock_set_rate) {
  clear_event();
  if (clock_set_rate) {
    set_has_clock_set_rate();
    _impl_.event_.clock_set_rate_ = clock_set_rate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.clock_set_rate)
}
inline ::perfetto::protos::ClockSetRateFtraceEvent* FtraceEvent::_internal_mutable_clock_set_rate() {
  if (event_case() != kClockSetRate) {
    clear_event();
    set_has_clock_set_rate();
    _impl_.event_.clock_set_rate_ = CreateMaybeMessage< ::perfetto::protos::ClockSetRateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.clock_set_rate_;
}
inline ::perfetto::protos::ClockSetRateFtraceEvent* FtraceEvent::mutable_clock_set_rate() {
  ::perfetto::protos::ClockSetRateFtraceEvent* _msg = _internal_mutable_clock_set_rate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clock_set_rate)
  return _msg;
}

// .perfetto.protos.SchedWakeupFtraceEvent sched_wakeup = 17;
inline bool FtraceEvent::has_sched_wakeup() const {
  return event_case() == kSchedWakeup;
}
inline bool FtraceEvent::_internal_has_sched_wakeup() const {
  return event_case() == kSchedWakeup;
}
inline void FtraceEvent::set_has_sched_wakeup() {
  _impl_._oneof_case_[0] = kSchedWakeup;
}
inline ::perfetto::protos::SchedWakeupFtraceEvent* FtraceEvent::release_sched_wakeup() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_wakeup)
  if (event_case() == kSchedWakeup) {
    clear_has_event();
    ::perfetto::protos::SchedWakeupFtraceEvent* temp = _impl_.event_.sched_wakeup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedWakeupFtraceEvent& FtraceEvent::_internal_sched_wakeup() const {
  return event_case() == kSchedWakeup
      ? *_impl_.event_.sched_wakeup_
      : reinterpret_cast<::perfetto::protos::SchedWakeupFtraceEvent&>(::perfetto::protos::_SchedWakeupFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedWakeupFtraceEvent& FtraceEvent::sched_wakeup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_wakeup)
  return _internal_sched_wakeup();
}
inline ::perfetto::protos::SchedWakeupFtraceEvent* FtraceEvent::unsafe_arena_release_sched_wakeup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_wakeup)
  if (event_case() == kSchedWakeup) {
    clear_has_event();
    ::perfetto::protos::SchedWakeupFtraceEvent* temp = _impl_.event_.sched_wakeup_;
    _impl_.event_.sched_wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_wakeup(::perfetto::protos::SchedWakeupFtraceEvent* sched_wakeup) {
  clear_event();
  if (sched_wakeup) {
    set_has_sched_wakeup();
    _impl_.event_.sched_wakeup_ = sched_wakeup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_wakeup)
}
inline ::perfetto::protos::SchedWakeupFtraceEvent* FtraceEvent::_internal_mutable_sched_wakeup() {
  if (event_case() != kSchedWakeup) {
    clear_event();
    set_has_sched_wakeup();
    _impl_.event_.sched_wakeup_ = CreateMaybeMessage< ::perfetto::protos::SchedWakeupFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_wakeup_;
}
inline ::perfetto::protos::SchedWakeupFtraceEvent* FtraceEvent::mutable_sched_wakeup() {
  ::perfetto::protos::SchedWakeupFtraceEvent* _msg = _internal_mutable_sched_wakeup();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_wakeup)
  return _msg;
}

// .perfetto.protos.SchedBlockedReasonFtraceEvent sched_blocked_reason = 18;
inline bool FtraceEvent::has_sched_blocked_reason() const {
  return event_case() == kSchedBlockedReason;
}
inline bool FtraceEvent::_internal_has_sched_blocked_reason() const {
  return event_case() == kSchedBlockedReason;
}
inline void FtraceEvent::set_has_sched_blocked_reason() {
  _impl_._oneof_case_[0] = kSchedBlockedReason;
}
inline ::perfetto::protos::SchedBlockedReasonFtraceEvent* FtraceEvent::release_sched_blocked_reason() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_blocked_reason)
  if (event_case() == kSchedBlockedReason) {
    clear_has_event();
    ::perfetto::protos::SchedBlockedReasonFtraceEvent* temp = _impl_.event_.sched_blocked_reason_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_blocked_reason_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedBlockedReasonFtraceEvent& FtraceEvent::_internal_sched_blocked_reason() const {
  return event_case() == kSchedBlockedReason
      ? *_impl_.event_.sched_blocked_reason_
      : reinterpret_cast<::perfetto::protos::SchedBlockedReasonFtraceEvent&>(::perfetto::protos::_SchedBlockedReasonFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedBlockedReasonFtraceEvent& FtraceEvent::sched_blocked_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_blocked_reason)
  return _internal_sched_blocked_reason();
}
inline ::perfetto::protos::SchedBlockedReasonFtraceEvent* FtraceEvent::unsafe_arena_release_sched_blocked_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_blocked_reason)
  if (event_case() == kSchedBlockedReason) {
    clear_has_event();
    ::perfetto::protos::SchedBlockedReasonFtraceEvent* temp = _impl_.event_.sched_blocked_reason_;
    _impl_.event_.sched_blocked_reason_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_blocked_reason(::perfetto::protos::SchedBlockedReasonFtraceEvent* sched_blocked_reason) {
  clear_event();
  if (sched_blocked_reason) {
    set_has_sched_blocked_reason();
    _impl_.event_.sched_blocked_reason_ = sched_blocked_reason;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_blocked_reason)
}
inline ::perfetto::protos::SchedBlockedReasonFtraceEvent* FtraceEvent::_internal_mutable_sched_blocked_reason() {
  if (event_case() != kSchedBlockedReason) {
    clear_event();
    set_has_sched_blocked_reason();
    _impl_.event_.sched_blocked_reason_ = CreateMaybeMessage< ::perfetto::protos::SchedBlockedReasonFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_blocked_reason_;
}
inline ::perfetto::protos::SchedBlockedReasonFtraceEvent* FtraceEvent::mutable_sched_blocked_reason() {
  ::perfetto::protos::SchedBlockedReasonFtraceEvent* _msg = _internal_mutable_sched_blocked_reason();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_blocked_reason)
  return _msg;
}

// .perfetto.protos.SchedCpuHotplugFtraceEvent sched_cpu_hotplug = 19;
inline bool FtraceEvent::has_sched_cpu_hotplug() const {
  return event_case() == kSchedCpuHotplug;
}
inline bool FtraceEvent::_internal_has_sched_cpu_hotplug() const {
  return event_case() == kSchedCpuHotplug;
}
inline void FtraceEvent::set_has_sched_cpu_hotplug() {
  _impl_._oneof_case_[0] = kSchedCpuHotplug;
}
inline ::perfetto::protos::SchedCpuHotplugFtraceEvent* FtraceEvent::release_sched_cpu_hotplug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  if (event_case() == kSchedCpuHotplug) {
    clear_has_event();
    ::perfetto::protos::SchedCpuHotplugFtraceEvent* temp = _impl_.event_.sched_cpu_hotplug_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_cpu_hotplug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedCpuHotplugFtraceEvent& FtraceEvent::_internal_sched_cpu_hotplug() const {
  return event_case() == kSchedCpuHotplug
      ? *_impl_.event_.sched_cpu_hotplug_
      : reinterpret_cast<::perfetto::protos::SchedCpuHotplugFtraceEvent&>(::perfetto::protos::_SchedCpuHotplugFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedCpuHotplugFtraceEvent& FtraceEvent::sched_cpu_hotplug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  return _internal_sched_cpu_hotplug();
}
inline ::perfetto::protos::SchedCpuHotplugFtraceEvent* FtraceEvent::unsafe_arena_release_sched_cpu_hotplug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  if (event_case() == kSchedCpuHotplug) {
    clear_has_event();
    ::perfetto::protos::SchedCpuHotplugFtraceEvent* temp = _impl_.event_.sched_cpu_hotplug_;
    _impl_.event_.sched_cpu_hotplug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_cpu_hotplug(::perfetto::protos::SchedCpuHotplugFtraceEvent* sched_cpu_hotplug) {
  clear_event();
  if (sched_cpu_hotplug) {
    set_has_sched_cpu_hotplug();
    _impl_.event_.sched_cpu_hotplug_ = sched_cpu_hotplug;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
}
inline ::perfetto::protos::SchedCpuHotplugFtraceEvent* FtraceEvent::_internal_mutable_sched_cpu_hotplug() {
  if (event_case() != kSchedCpuHotplug) {
    clear_event();
    set_has_sched_cpu_hotplug();
    _impl_.event_.sched_cpu_hotplug_ = CreateMaybeMessage< ::perfetto::protos::SchedCpuHotplugFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_cpu_hotplug_;
}
inline ::perfetto::protos::SchedCpuHotplugFtraceEvent* FtraceEvent::mutable_sched_cpu_hotplug() {
  ::perfetto::protos::SchedCpuHotplugFtraceEvent* _msg = _internal_mutable_sched_cpu_hotplug();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_cpu_hotplug)
  return _msg;
}

// .perfetto.protos.SchedWakingFtraceEvent sched_waking = 20;
inline bool FtraceEvent::has_sched_waking() const {
  return event_case() == kSchedWaking;
}
inline bool FtraceEvent::_internal_has_sched_waking() const {
  return event_case() == kSchedWaking;
}
inline void FtraceEvent::set_has_sched_waking() {
  _impl_._oneof_case_[0] = kSchedWaking;
}
inline ::perfetto::protos::SchedWakingFtraceEvent* FtraceEvent::release_sched_waking() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_waking)
  if (event_case() == kSchedWaking) {
    clear_has_event();
    ::perfetto::protos::SchedWakingFtraceEvent* temp = _impl_.event_.sched_waking_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_waking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedWakingFtraceEvent& FtraceEvent::_internal_sched_waking() const {
  return event_case() == kSchedWaking
      ? *_impl_.event_.sched_waking_
      : reinterpret_cast<::perfetto::protos::SchedWakingFtraceEvent&>(::perfetto::protos::_SchedWakingFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedWakingFtraceEvent& FtraceEvent::sched_waking() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_waking)
  return _internal_sched_waking();
}
inline ::perfetto::protos::SchedWakingFtraceEvent* FtraceEvent::unsafe_arena_release_sched_waking() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_waking)
  if (event_case() == kSchedWaking) {
    clear_has_event();
    ::perfetto::protos::SchedWakingFtraceEvent* temp = _impl_.event_.sched_waking_;
    _impl_.event_.sched_waking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_waking(::perfetto::protos::SchedWakingFtraceEvent* sched_waking) {
  clear_event();
  if (sched_waking) {
    set_has_sched_waking();
    _impl_.event_.sched_waking_ = sched_waking;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_waking)
}
inline ::perfetto::protos::SchedWakingFtraceEvent* FtraceEvent::_internal_mutable_sched_waking() {
  if (event_case() != kSchedWaking) {
    clear_event();
    set_has_sched_waking();
    _impl_.event_.sched_waking_ = CreateMaybeMessage< ::perfetto::protos::SchedWakingFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_waking_;
}
inline ::perfetto::protos::SchedWakingFtraceEvent* FtraceEvent::mutable_sched_waking() {
  ::perfetto::protos::SchedWakingFtraceEvent* _msg = _internal_mutable_sched_waking();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_waking)
  return _msg;
}

// .perfetto.protos.IpiEntryFtraceEvent ipi_entry = 21;
inline bool FtraceEvent::has_ipi_entry() const {
  return event_case() == kIpiEntry;
}
inline bool FtraceEvent::_internal_has_ipi_entry() const {
  return event_case() == kIpiEntry;
}
inline void FtraceEvent::set_has_ipi_entry() {
  _impl_._oneof_case_[0] = kIpiEntry;
}
inline ::perfetto::protos::IpiEntryFtraceEvent* FtraceEvent::release_ipi_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ipi_entry)
  if (event_case() == kIpiEntry) {
    clear_has_event();
    ::perfetto::protos::IpiEntryFtraceEvent* temp = _impl_.event_.ipi_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ipi_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IpiEntryFtraceEvent& FtraceEvent::_internal_ipi_entry() const {
  return event_case() == kIpiEntry
      ? *_impl_.event_.ipi_entry_
      : reinterpret_cast<::perfetto::protos::IpiEntryFtraceEvent&>(::perfetto::protos::_IpiEntryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IpiEntryFtraceEvent& FtraceEvent::ipi_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ipi_entry)
  return _internal_ipi_entry();
}
inline ::perfetto::protos::IpiEntryFtraceEvent* FtraceEvent::unsafe_arena_release_ipi_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ipi_entry)
  if (event_case() == kIpiEntry) {
    clear_has_event();
    ::perfetto::protos::IpiEntryFtraceEvent* temp = _impl_.event_.ipi_entry_;
    _impl_.event_.ipi_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ipi_entry(::perfetto::protos::IpiEntryFtraceEvent* ipi_entry) {
  clear_event();
  if (ipi_entry) {
    set_has_ipi_entry();
    _impl_.event_.ipi_entry_ = ipi_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ipi_entry)
}
inline ::perfetto::protos::IpiEntryFtraceEvent* FtraceEvent::_internal_mutable_ipi_entry() {
  if (event_case() != kIpiEntry) {
    clear_event();
    set_has_ipi_entry();
    _impl_.event_.ipi_entry_ = CreateMaybeMessage< ::perfetto::protos::IpiEntryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ipi_entry_;
}
inline ::perfetto::protos::IpiEntryFtraceEvent* FtraceEvent::mutable_ipi_entry() {
  ::perfetto::protos::IpiEntryFtraceEvent* _msg = _internal_mutable_ipi_entry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ipi_entry)
  return _msg;
}

// .perfetto.protos.IpiExitFtraceEvent ipi_exit = 22;
inline bool FtraceEvent::has_ipi_exit() const {
  return event_case() == kIpiExit;
}
inline bool FtraceEvent::_internal_has_ipi_exit() const {
  return event_case() == kIpiExit;
}
inline void FtraceEvent::set_has_ipi_exit() {
  _impl_._oneof_case_[0] = kIpiExit;
}
inline ::perfetto::protos::IpiExitFtraceEvent* FtraceEvent::release_ipi_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ipi_exit)
  if (event_case() == kIpiExit) {
    clear_has_event();
    ::perfetto::protos::IpiExitFtraceEvent* temp = _impl_.event_.ipi_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ipi_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IpiExitFtraceEvent& FtraceEvent::_internal_ipi_exit() const {
  return event_case() == kIpiExit
      ? *_impl_.event_.ipi_exit_
      : reinterpret_cast<::perfetto::protos::IpiExitFtraceEvent&>(::perfetto::protos::_IpiExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IpiExitFtraceEvent& FtraceEvent::ipi_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ipi_exit)
  return _internal_ipi_exit();
}
inline ::perfetto::protos::IpiExitFtraceEvent* FtraceEvent::unsafe_arena_release_ipi_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ipi_exit)
  if (event_case() == kIpiExit) {
    clear_has_event();
    ::perfetto::protos::IpiExitFtraceEvent* temp = _impl_.event_.ipi_exit_;
    _impl_.event_.ipi_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ipi_exit(::perfetto::protos::IpiExitFtraceEvent* ipi_exit) {
  clear_event();
  if (ipi_exit) {
    set_has_ipi_exit();
    _impl_.event_.ipi_exit_ = ipi_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ipi_exit)
}
inline ::perfetto::protos::IpiExitFtraceEvent* FtraceEvent::_internal_mutable_ipi_exit() {
  if (event_case() != kIpiExit) {
    clear_event();
    set_has_ipi_exit();
    _impl_.event_.ipi_exit_ = CreateMaybeMessage< ::perfetto::protos::IpiExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ipi_exit_;
}
inline ::perfetto::protos::IpiExitFtraceEvent* FtraceEvent::mutable_ipi_exit() {
  ::perfetto::protos::IpiExitFtraceEvent* _msg = _internal_mutable_ipi_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ipi_exit)
  return _msg;
}

// .perfetto.protos.IpiRaiseFtraceEvent ipi_raise = 23;
inline bool FtraceEvent::has_ipi_raise() const {
  return event_case() == kIpiRaise;
}
inline bool FtraceEvent::_internal_has_ipi_raise() const {
  return event_case() == kIpiRaise;
}
inline void FtraceEvent::set_has_ipi_raise() {
  _impl_._oneof_case_[0] = kIpiRaise;
}
inline ::perfetto::protos::IpiRaiseFtraceEvent* FtraceEvent::release_ipi_raise() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ipi_raise)
  if (event_case() == kIpiRaise) {
    clear_has_event();
    ::perfetto::protos::IpiRaiseFtraceEvent* temp = _impl_.event_.ipi_raise_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ipi_raise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IpiRaiseFtraceEvent& FtraceEvent::_internal_ipi_raise() const {
  return event_case() == kIpiRaise
      ? *_impl_.event_.ipi_raise_
      : reinterpret_cast<::perfetto::protos::IpiRaiseFtraceEvent&>(::perfetto::protos::_IpiRaiseFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IpiRaiseFtraceEvent& FtraceEvent::ipi_raise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ipi_raise)
  return _internal_ipi_raise();
}
inline ::perfetto::protos::IpiRaiseFtraceEvent* FtraceEvent::unsafe_arena_release_ipi_raise() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ipi_raise)
  if (event_case() == kIpiRaise) {
    clear_has_event();
    ::perfetto::protos::IpiRaiseFtraceEvent* temp = _impl_.event_.ipi_raise_;
    _impl_.event_.ipi_raise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ipi_raise(::perfetto::protos::IpiRaiseFtraceEvent* ipi_raise) {
  clear_event();
  if (ipi_raise) {
    set_has_ipi_raise();
    _impl_.event_.ipi_raise_ = ipi_raise;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ipi_raise)
}
inline ::perfetto::protos::IpiRaiseFtraceEvent* FtraceEvent::_internal_mutable_ipi_raise() {
  if (event_case() != kIpiRaise) {
    clear_event();
    set_has_ipi_raise();
    _impl_.event_.ipi_raise_ = CreateMaybeMessage< ::perfetto::protos::IpiRaiseFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ipi_raise_;
}
inline ::perfetto::protos::IpiRaiseFtraceEvent* FtraceEvent::mutable_ipi_raise() {
  ::perfetto::protos::IpiRaiseFtraceEvent* _msg = _internal_mutable_ipi_raise();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ipi_raise)
  return _msg;
}

// .perfetto.protos.SoftirqEntryFtraceEvent softirq_entry = 24;
inline bool FtraceEvent::has_softirq_entry() const {
  return event_case() == kSoftirqEntry;
}
inline bool FtraceEvent::_internal_has_softirq_entry() const {
  return event_case() == kSoftirqEntry;
}
inline void FtraceEvent::set_has_softirq_entry() {
  _impl_._oneof_case_[0] = kSoftirqEntry;
}
inline ::perfetto::protos::SoftirqEntryFtraceEvent* FtraceEvent::release_softirq_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.softirq_entry)
  if (event_case() == kSoftirqEntry) {
    clear_has_event();
    ::perfetto::protos::SoftirqEntryFtraceEvent* temp = _impl_.event_.softirq_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.softirq_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SoftirqEntryFtraceEvent& FtraceEvent::_internal_softirq_entry() const {
  return event_case() == kSoftirqEntry
      ? *_impl_.event_.softirq_entry_
      : reinterpret_cast<::perfetto::protos::SoftirqEntryFtraceEvent&>(::perfetto::protos::_SoftirqEntryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SoftirqEntryFtraceEvent& FtraceEvent::softirq_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.softirq_entry)
  return _internal_softirq_entry();
}
inline ::perfetto::protos::SoftirqEntryFtraceEvent* FtraceEvent::unsafe_arena_release_softirq_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.softirq_entry)
  if (event_case() == kSoftirqEntry) {
    clear_has_event();
    ::perfetto::protos::SoftirqEntryFtraceEvent* temp = _impl_.event_.softirq_entry_;
    _impl_.event_.softirq_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_softirq_entry(::perfetto::protos::SoftirqEntryFtraceEvent* softirq_entry) {
  clear_event();
  if (softirq_entry) {
    set_has_softirq_entry();
    _impl_.event_.softirq_entry_ = softirq_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.softirq_entry)
}
inline ::perfetto::protos::SoftirqEntryFtraceEvent* FtraceEvent::_internal_mutable_softirq_entry() {
  if (event_case() != kSoftirqEntry) {
    clear_event();
    set_has_softirq_entry();
    _impl_.event_.softirq_entry_ = CreateMaybeMessage< ::perfetto::protos::SoftirqEntryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.softirq_entry_;
}
inline ::perfetto::protos::SoftirqEntryFtraceEvent* FtraceEvent::mutable_softirq_entry() {
  ::perfetto::protos::SoftirqEntryFtraceEvent* _msg = _internal_mutable_softirq_entry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.softirq_entry)
  return _msg;
}

// .perfetto.protos.SoftirqExitFtraceEvent softirq_exit = 25;
inline bool FtraceEvent::has_softirq_exit() const {
  return event_case() == kSoftirqExit;
}
inline bool FtraceEvent::_internal_has_softirq_exit() const {
  return event_case() == kSoftirqExit;
}
inline void FtraceEvent::set_has_softirq_exit() {
  _impl_._oneof_case_[0] = kSoftirqExit;
}
inline ::perfetto::protos::SoftirqExitFtraceEvent* FtraceEvent::release_softirq_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.softirq_exit)
  if (event_case() == kSoftirqExit) {
    clear_has_event();
    ::perfetto::protos::SoftirqExitFtraceEvent* temp = _impl_.event_.softirq_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.softirq_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SoftirqExitFtraceEvent& FtraceEvent::_internal_softirq_exit() const {
  return event_case() == kSoftirqExit
      ? *_impl_.event_.softirq_exit_
      : reinterpret_cast<::perfetto::protos::SoftirqExitFtraceEvent&>(::perfetto::protos::_SoftirqExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SoftirqExitFtraceEvent& FtraceEvent::softirq_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.softirq_exit)
  return _internal_softirq_exit();
}
inline ::perfetto::protos::SoftirqExitFtraceEvent* FtraceEvent::unsafe_arena_release_softirq_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.softirq_exit)
  if (event_case() == kSoftirqExit) {
    clear_has_event();
    ::perfetto::protos::SoftirqExitFtraceEvent* temp = _impl_.event_.softirq_exit_;
    _impl_.event_.softirq_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_softirq_exit(::perfetto::protos::SoftirqExitFtraceEvent* softirq_exit) {
  clear_event();
  if (softirq_exit) {
    set_has_softirq_exit();
    _impl_.event_.softirq_exit_ = softirq_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.softirq_exit)
}
inline ::perfetto::protos::SoftirqExitFtraceEvent* FtraceEvent::_internal_mutable_softirq_exit() {
  if (event_case() != kSoftirqExit) {
    clear_event();
    set_has_softirq_exit();
    _impl_.event_.softirq_exit_ = CreateMaybeMessage< ::perfetto::protos::SoftirqExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.softirq_exit_;
}
inline ::perfetto::protos::SoftirqExitFtraceEvent* FtraceEvent::mutable_softirq_exit() {
  ::perfetto::protos::SoftirqExitFtraceEvent* _msg = _internal_mutable_softirq_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.softirq_exit)
  return _msg;
}

// .perfetto.protos.SoftirqRaiseFtraceEvent softirq_raise = 26;
inline bool FtraceEvent::has_softirq_raise() const {
  return event_case() == kSoftirqRaise;
}
inline bool FtraceEvent::_internal_has_softirq_raise() const {
  return event_case() == kSoftirqRaise;
}
inline void FtraceEvent::set_has_softirq_raise() {
  _impl_._oneof_case_[0] = kSoftirqRaise;
}
inline ::perfetto::protos::SoftirqRaiseFtraceEvent* FtraceEvent::release_softirq_raise() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.softirq_raise)
  if (event_case() == kSoftirqRaise) {
    clear_has_event();
    ::perfetto::protos::SoftirqRaiseFtraceEvent* temp = _impl_.event_.softirq_raise_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.softirq_raise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SoftirqRaiseFtraceEvent& FtraceEvent::_internal_softirq_raise() const {
  return event_case() == kSoftirqRaise
      ? *_impl_.event_.softirq_raise_
      : reinterpret_cast<::perfetto::protos::SoftirqRaiseFtraceEvent&>(::perfetto::protos::_SoftirqRaiseFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SoftirqRaiseFtraceEvent& FtraceEvent::softirq_raise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.softirq_raise)
  return _internal_softirq_raise();
}
inline ::perfetto::protos::SoftirqRaiseFtraceEvent* FtraceEvent::unsafe_arena_release_softirq_raise() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.softirq_raise)
  if (event_case() == kSoftirqRaise) {
    clear_has_event();
    ::perfetto::protos::SoftirqRaiseFtraceEvent* temp = _impl_.event_.softirq_raise_;
    _impl_.event_.softirq_raise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_softirq_raise(::perfetto::protos::SoftirqRaiseFtraceEvent* softirq_raise) {
  clear_event();
  if (softirq_raise) {
    set_has_softirq_raise();
    _impl_.event_.softirq_raise_ = softirq_raise;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.softirq_raise)
}
inline ::perfetto::protos::SoftirqRaiseFtraceEvent* FtraceEvent::_internal_mutable_softirq_raise() {
  if (event_case() != kSoftirqRaise) {
    clear_event();
    set_has_softirq_raise();
    _impl_.event_.softirq_raise_ = CreateMaybeMessage< ::perfetto::protos::SoftirqRaiseFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.softirq_raise_;
}
inline ::perfetto::protos::SoftirqRaiseFtraceEvent* FtraceEvent::mutable_softirq_raise() {
  ::perfetto::protos::SoftirqRaiseFtraceEvent* _msg = _internal_mutable_softirq_raise();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.softirq_raise)
  return _msg;
}

// .perfetto.protos.I2cReadFtraceEvent i2c_read = 27;
inline bool FtraceEvent::has_i2c_read() const {
  return event_case() == kI2CRead;
}
inline bool FtraceEvent::_internal_has_i2c_read() const {
  return event_case() == kI2CRead;
}
inline void FtraceEvent::set_has_i2c_read() {
  _impl_._oneof_case_[0] = kI2CRead;
}
inline ::perfetto::protos::I2cReadFtraceEvent* FtraceEvent::release_i2c_read() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_read)
  if (event_case() == kI2CRead) {
    clear_has_event();
    ::perfetto::protos::I2cReadFtraceEvent* temp = _impl_.event_.i2c_read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.i2c_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cReadFtraceEvent& FtraceEvent::_internal_i2c_read() const {
  return event_case() == kI2CRead
      ? *_impl_.event_.i2c_read_
      : reinterpret_cast<::perfetto::protos::I2cReadFtraceEvent&>(::perfetto::protos::_I2cReadFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::I2cReadFtraceEvent& FtraceEvent::i2c_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_read)
  return _internal_i2c_read();
}
inline ::perfetto::protos::I2cReadFtraceEvent* FtraceEvent::unsafe_arena_release_i2c_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.i2c_read)
  if (event_case() == kI2CRead) {
    clear_has_event();
    ::perfetto::protos::I2cReadFtraceEvent* temp = _impl_.event_.i2c_read_;
    _impl_.event_.i2c_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_i2c_read(::perfetto::protos::I2cReadFtraceEvent* i2c_read) {
  clear_event();
  if (i2c_read) {
    set_has_i2c_read();
    _impl_.event_.i2c_read_ = i2c_read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.i2c_read)
}
inline ::perfetto::protos::I2cReadFtraceEvent* FtraceEvent::_internal_mutable_i2c_read() {
  if (event_case() != kI2CRead) {
    clear_event();
    set_has_i2c_read();
    _impl_.event_.i2c_read_ = CreateMaybeMessage< ::perfetto::protos::I2cReadFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.i2c_read_;
}
inline ::perfetto::protos::I2cReadFtraceEvent* FtraceEvent::mutable_i2c_read() {
  ::perfetto::protos::I2cReadFtraceEvent* _msg = _internal_mutable_i2c_read();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_read)
  return _msg;
}

// .perfetto.protos.I2cWriteFtraceEvent i2c_write = 28;
inline bool FtraceEvent::has_i2c_write() const {
  return event_case() == kI2CWrite;
}
inline bool FtraceEvent::_internal_has_i2c_write() const {
  return event_case() == kI2CWrite;
}
inline void FtraceEvent::set_has_i2c_write() {
  _impl_._oneof_case_[0] = kI2CWrite;
}
inline ::perfetto::protos::I2cWriteFtraceEvent* FtraceEvent::release_i2c_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_write)
  if (event_case() == kI2CWrite) {
    clear_has_event();
    ::perfetto::protos::I2cWriteFtraceEvent* temp = _impl_.event_.i2c_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.i2c_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cWriteFtraceEvent& FtraceEvent::_internal_i2c_write() const {
  return event_case() == kI2CWrite
      ? *_impl_.event_.i2c_write_
      : reinterpret_cast<::perfetto::protos::I2cWriteFtraceEvent&>(::perfetto::protos::_I2cWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::I2cWriteFtraceEvent& FtraceEvent::i2c_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_write)
  return _internal_i2c_write();
}
inline ::perfetto::protos::I2cWriteFtraceEvent* FtraceEvent::unsafe_arena_release_i2c_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.i2c_write)
  if (event_case() == kI2CWrite) {
    clear_has_event();
    ::perfetto::protos::I2cWriteFtraceEvent* temp = _impl_.event_.i2c_write_;
    _impl_.event_.i2c_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_i2c_write(::perfetto::protos::I2cWriteFtraceEvent* i2c_write) {
  clear_event();
  if (i2c_write) {
    set_has_i2c_write();
    _impl_.event_.i2c_write_ = i2c_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.i2c_write)
}
inline ::perfetto::protos::I2cWriteFtraceEvent* FtraceEvent::_internal_mutable_i2c_write() {
  if (event_case() != kI2CWrite) {
    clear_event();
    set_has_i2c_write();
    _impl_.event_.i2c_write_ = CreateMaybeMessage< ::perfetto::protos::I2cWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.i2c_write_;
}
inline ::perfetto::protos::I2cWriteFtraceEvent* FtraceEvent::mutable_i2c_write() {
  ::perfetto::protos::I2cWriteFtraceEvent* _msg = _internal_mutable_i2c_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_write)
  return _msg;
}

// .perfetto.protos.I2cResultFtraceEvent i2c_result = 29;
inline bool FtraceEvent::has_i2c_result() const {
  return event_case() == kI2CResult;
}
inline bool FtraceEvent::_internal_has_i2c_result() const {
  return event_case() == kI2CResult;
}
inline void FtraceEvent::set_has_i2c_result() {
  _impl_._oneof_case_[0] = kI2CResult;
}
inline ::perfetto::protos::I2cResultFtraceEvent* FtraceEvent::release_i2c_result() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_result)
  if (event_case() == kI2CResult) {
    clear_has_event();
    ::perfetto::protos::I2cResultFtraceEvent* temp = _impl_.event_.i2c_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.i2c_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cResultFtraceEvent& FtraceEvent::_internal_i2c_result() const {
  return event_case() == kI2CResult
      ? *_impl_.event_.i2c_result_
      : reinterpret_cast<::perfetto::protos::I2cResultFtraceEvent&>(::perfetto::protos::_I2cResultFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::I2cResultFtraceEvent& FtraceEvent::i2c_result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_result)
  return _internal_i2c_result();
}
inline ::perfetto::protos::I2cResultFtraceEvent* FtraceEvent::unsafe_arena_release_i2c_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.i2c_result)
  if (event_case() == kI2CResult) {
    clear_has_event();
    ::perfetto::protos::I2cResultFtraceEvent* temp = _impl_.event_.i2c_result_;
    _impl_.event_.i2c_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_i2c_result(::perfetto::protos::I2cResultFtraceEvent* i2c_result) {
  clear_event();
  if (i2c_result) {
    set_has_i2c_result();
    _impl_.event_.i2c_result_ = i2c_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.i2c_result)
}
inline ::perfetto::protos::I2cResultFtraceEvent* FtraceEvent::_internal_mutable_i2c_result() {
  if (event_case() != kI2CResult) {
    clear_event();
    set_has_i2c_result();
    _impl_.event_.i2c_result_ = CreateMaybeMessage< ::perfetto::protos::I2cResultFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.i2c_result_;
}
inline ::perfetto::protos::I2cResultFtraceEvent* FtraceEvent::mutable_i2c_result() {
  ::perfetto::protos::I2cResultFtraceEvent* _msg = _internal_mutable_i2c_result();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_result)
  return _msg;
}

// .perfetto.protos.I2cReplyFtraceEvent i2c_reply = 30;
inline bool FtraceEvent::has_i2c_reply() const {
  return event_case() == kI2CReply;
}
inline bool FtraceEvent::_internal_has_i2c_reply() const {
  return event_case() == kI2CReply;
}
inline void FtraceEvent::set_has_i2c_reply() {
  _impl_._oneof_case_[0] = kI2CReply;
}
inline ::perfetto::protos::I2cReplyFtraceEvent* FtraceEvent::release_i2c_reply() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.i2c_reply)
  if (event_case() == kI2CReply) {
    clear_has_event();
    ::perfetto::protos::I2cReplyFtraceEvent* temp = _impl_.event_.i2c_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.i2c_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::I2cReplyFtraceEvent& FtraceEvent::_internal_i2c_reply() const {
  return event_case() == kI2CReply
      ? *_impl_.event_.i2c_reply_
      : reinterpret_cast<::perfetto::protos::I2cReplyFtraceEvent&>(::perfetto::protos::_I2cReplyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::I2cReplyFtraceEvent& FtraceEvent::i2c_reply() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.i2c_reply)
  return _internal_i2c_reply();
}
inline ::perfetto::protos::I2cReplyFtraceEvent* FtraceEvent::unsafe_arena_release_i2c_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.i2c_reply)
  if (event_case() == kI2CReply) {
    clear_has_event();
    ::perfetto::protos::I2cReplyFtraceEvent* temp = _impl_.event_.i2c_reply_;
    _impl_.event_.i2c_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_i2c_reply(::perfetto::protos::I2cReplyFtraceEvent* i2c_reply) {
  clear_event();
  if (i2c_reply) {
    set_has_i2c_reply();
    _impl_.event_.i2c_reply_ = i2c_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.i2c_reply)
}
inline ::perfetto::protos::I2cReplyFtraceEvent* FtraceEvent::_internal_mutable_i2c_reply() {
  if (event_case() != kI2CReply) {
    clear_event();
    set_has_i2c_reply();
    _impl_.event_.i2c_reply_ = CreateMaybeMessage< ::perfetto::protos::I2cReplyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.i2c_reply_;
}
inline ::perfetto::protos::I2cReplyFtraceEvent* FtraceEvent::mutable_i2c_reply() {
  ::perfetto::protos::I2cReplyFtraceEvent* _msg = _internal_mutable_i2c_reply();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.i2c_reply)
  return _msg;
}

// .perfetto.protos.SmbusReadFtraceEvent smbus_read = 31;
inline bool FtraceEvent::has_smbus_read() const {
  return event_case() == kSmbusRead;
}
inline bool FtraceEvent::_internal_has_smbus_read() const {
  return event_case() == kSmbusRead;
}
inline void FtraceEvent::set_has_smbus_read() {
  _impl_._oneof_case_[0] = kSmbusRead;
}
inline ::perfetto::protos::SmbusReadFtraceEvent* FtraceEvent::release_smbus_read() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_read)
  if (event_case() == kSmbusRead) {
    clear_has_event();
    ::perfetto::protos::SmbusReadFtraceEvent* temp = _impl_.event_.smbus_read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.smbus_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusReadFtraceEvent& FtraceEvent::_internal_smbus_read() const {
  return event_case() == kSmbusRead
      ? *_impl_.event_.smbus_read_
      : reinterpret_cast<::perfetto::protos::SmbusReadFtraceEvent&>(::perfetto::protos::_SmbusReadFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SmbusReadFtraceEvent& FtraceEvent::smbus_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_read)
  return _internal_smbus_read();
}
inline ::perfetto::protos::SmbusReadFtraceEvent* FtraceEvent::unsafe_arena_release_smbus_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.smbus_read)
  if (event_case() == kSmbusRead) {
    clear_has_event();
    ::perfetto::protos::SmbusReadFtraceEvent* temp = _impl_.event_.smbus_read_;
    _impl_.event_.smbus_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_smbus_read(::perfetto::protos::SmbusReadFtraceEvent* smbus_read) {
  clear_event();
  if (smbus_read) {
    set_has_smbus_read();
    _impl_.event_.smbus_read_ = smbus_read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.smbus_read)
}
inline ::perfetto::protos::SmbusReadFtraceEvent* FtraceEvent::_internal_mutable_smbus_read() {
  if (event_case() != kSmbusRead) {
    clear_event();
    set_has_smbus_read();
    _impl_.event_.smbus_read_ = CreateMaybeMessage< ::perfetto::protos::SmbusReadFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.smbus_read_;
}
inline ::perfetto::protos::SmbusReadFtraceEvent* FtraceEvent::mutable_smbus_read() {
  ::perfetto::protos::SmbusReadFtraceEvent* _msg = _internal_mutable_smbus_read();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_read)
  return _msg;
}

// .perfetto.protos.SmbusWriteFtraceEvent smbus_write = 32;
inline bool FtraceEvent::has_smbus_write() const {
  return event_case() == kSmbusWrite;
}
inline bool FtraceEvent::_internal_has_smbus_write() const {
  return event_case() == kSmbusWrite;
}
inline void FtraceEvent::set_has_smbus_write() {
  _impl_._oneof_case_[0] = kSmbusWrite;
}
inline ::perfetto::protos::SmbusWriteFtraceEvent* FtraceEvent::release_smbus_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_write)
  if (event_case() == kSmbusWrite) {
    clear_has_event();
    ::perfetto::protos::SmbusWriteFtraceEvent* temp = _impl_.event_.smbus_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.smbus_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusWriteFtraceEvent& FtraceEvent::_internal_smbus_write() const {
  return event_case() == kSmbusWrite
      ? *_impl_.event_.smbus_write_
      : reinterpret_cast<::perfetto::protos::SmbusWriteFtraceEvent&>(::perfetto::protos::_SmbusWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SmbusWriteFtraceEvent& FtraceEvent::smbus_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_write)
  return _internal_smbus_write();
}
inline ::perfetto::protos::SmbusWriteFtraceEvent* FtraceEvent::unsafe_arena_release_smbus_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.smbus_write)
  if (event_case() == kSmbusWrite) {
    clear_has_event();
    ::perfetto::protos::SmbusWriteFtraceEvent* temp = _impl_.event_.smbus_write_;
    _impl_.event_.smbus_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_smbus_write(::perfetto::protos::SmbusWriteFtraceEvent* smbus_write) {
  clear_event();
  if (smbus_write) {
    set_has_smbus_write();
    _impl_.event_.smbus_write_ = smbus_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.smbus_write)
}
inline ::perfetto::protos::SmbusWriteFtraceEvent* FtraceEvent::_internal_mutable_smbus_write() {
  if (event_case() != kSmbusWrite) {
    clear_event();
    set_has_smbus_write();
    _impl_.event_.smbus_write_ = CreateMaybeMessage< ::perfetto::protos::SmbusWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.smbus_write_;
}
inline ::perfetto::protos::SmbusWriteFtraceEvent* FtraceEvent::mutable_smbus_write() {
  ::perfetto::protos::SmbusWriteFtraceEvent* _msg = _internal_mutable_smbus_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_write)
  return _msg;
}

// .perfetto.protos.SmbusResultFtraceEvent smbus_result = 33;
inline bool FtraceEvent::has_smbus_result() const {
  return event_case() == kSmbusResult;
}
inline bool FtraceEvent::_internal_has_smbus_result() const {
  return event_case() == kSmbusResult;
}
inline void FtraceEvent::set_has_smbus_result() {
  _impl_._oneof_case_[0] = kSmbusResult;
}
inline ::perfetto::protos::SmbusResultFtraceEvent* FtraceEvent::release_smbus_result() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_result)
  if (event_case() == kSmbusResult) {
    clear_has_event();
    ::perfetto::protos::SmbusResultFtraceEvent* temp = _impl_.event_.smbus_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.smbus_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusResultFtraceEvent& FtraceEvent::_internal_smbus_result() const {
  return event_case() == kSmbusResult
      ? *_impl_.event_.smbus_result_
      : reinterpret_cast<::perfetto::protos::SmbusResultFtraceEvent&>(::perfetto::protos::_SmbusResultFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SmbusResultFtraceEvent& FtraceEvent::smbus_result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_result)
  return _internal_smbus_result();
}
inline ::perfetto::protos::SmbusResultFtraceEvent* FtraceEvent::unsafe_arena_release_smbus_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.smbus_result)
  if (event_case() == kSmbusResult) {
    clear_has_event();
    ::perfetto::protos::SmbusResultFtraceEvent* temp = _impl_.event_.smbus_result_;
    _impl_.event_.smbus_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_smbus_result(::perfetto::protos::SmbusResultFtraceEvent* smbus_result) {
  clear_event();
  if (smbus_result) {
    set_has_smbus_result();
    _impl_.event_.smbus_result_ = smbus_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.smbus_result)
}
inline ::perfetto::protos::SmbusResultFtraceEvent* FtraceEvent::_internal_mutable_smbus_result() {
  if (event_case() != kSmbusResult) {
    clear_event();
    set_has_smbus_result();
    _impl_.event_.smbus_result_ = CreateMaybeMessage< ::perfetto::protos::SmbusResultFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.smbus_result_;
}
inline ::perfetto::protos::SmbusResultFtraceEvent* FtraceEvent::mutable_smbus_result() {
  ::perfetto::protos::SmbusResultFtraceEvent* _msg = _internal_mutable_smbus_result();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_result)
  return _msg;
}

// .perfetto.protos.SmbusReplyFtraceEvent smbus_reply = 34;
inline bool FtraceEvent::has_smbus_reply() const {
  return event_case() == kSmbusReply;
}
inline bool FtraceEvent::_internal_has_smbus_reply() const {
  return event_case() == kSmbusReply;
}
inline void FtraceEvent::set_has_smbus_reply() {
  _impl_._oneof_case_[0] = kSmbusReply;
}
inline ::perfetto::protos::SmbusReplyFtraceEvent* FtraceEvent::release_smbus_reply() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.smbus_reply)
  if (event_case() == kSmbusReply) {
    clear_has_event();
    ::perfetto::protos::SmbusReplyFtraceEvent* temp = _impl_.event_.smbus_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.smbus_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SmbusReplyFtraceEvent& FtraceEvent::_internal_smbus_reply() const {
  return event_case() == kSmbusReply
      ? *_impl_.event_.smbus_reply_
      : reinterpret_cast<::perfetto::protos::SmbusReplyFtraceEvent&>(::perfetto::protos::_SmbusReplyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SmbusReplyFtraceEvent& FtraceEvent::smbus_reply() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.smbus_reply)
  return _internal_smbus_reply();
}
inline ::perfetto::protos::SmbusReplyFtraceEvent* FtraceEvent::unsafe_arena_release_smbus_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.smbus_reply)
  if (event_case() == kSmbusReply) {
    clear_has_event();
    ::perfetto::protos::SmbusReplyFtraceEvent* temp = _impl_.event_.smbus_reply_;
    _impl_.event_.smbus_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_smbus_reply(::perfetto::protos::SmbusReplyFtraceEvent* smbus_reply) {
  clear_event();
  if (smbus_reply) {
    set_has_smbus_reply();
    _impl_.event_.smbus_reply_ = smbus_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.smbus_reply)
}
inline ::perfetto::protos::SmbusReplyFtraceEvent* FtraceEvent::_internal_mutable_smbus_reply() {
  if (event_case() != kSmbusReply) {
    clear_event();
    set_has_smbus_reply();
    _impl_.event_.smbus_reply_ = CreateMaybeMessage< ::perfetto::protos::SmbusReplyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.smbus_reply_;
}
inline ::perfetto::protos::SmbusReplyFtraceEvent* FtraceEvent::mutable_smbus_reply() {
  ::perfetto::protos::SmbusReplyFtraceEvent* _msg = _internal_mutable_smbus_reply();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.smbus_reply)
  return _msg;
}

// .perfetto.protos.LowmemoryKillFtraceEvent lowmemory_kill = 35;
inline bool FtraceEvent::has_lowmemory_kill() const {
  return event_case() == kLowmemoryKill;
}
inline bool FtraceEvent::_internal_has_lowmemory_kill() const {
  return event_case() == kLowmemoryKill;
}
inline void FtraceEvent::set_has_lowmemory_kill() {
  _impl_._oneof_case_[0] = kLowmemoryKill;
}
inline ::perfetto::protos::LowmemoryKillFtraceEvent* FtraceEvent::release_lowmemory_kill() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.lowmemory_kill)
  if (event_case() == kLowmemoryKill) {
    clear_has_event();
    ::perfetto::protos::LowmemoryKillFtraceEvent* temp = _impl_.event_.lowmemory_kill_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.lowmemory_kill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::LowmemoryKillFtraceEvent& FtraceEvent::_internal_lowmemory_kill() const {
  return event_case() == kLowmemoryKill
      ? *_impl_.event_.lowmemory_kill_
      : reinterpret_cast<::perfetto::protos::LowmemoryKillFtraceEvent&>(::perfetto::protos::_LowmemoryKillFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::LowmemoryKillFtraceEvent& FtraceEvent::lowmemory_kill() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.lowmemory_kill)
  return _internal_lowmemory_kill();
}
inline ::perfetto::protos::LowmemoryKillFtraceEvent* FtraceEvent::unsafe_arena_release_lowmemory_kill() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.lowmemory_kill)
  if (event_case() == kLowmemoryKill) {
    clear_has_event();
    ::perfetto::protos::LowmemoryKillFtraceEvent* temp = _impl_.event_.lowmemory_kill_;
    _impl_.event_.lowmemory_kill_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_lowmemory_kill(::perfetto::protos::LowmemoryKillFtraceEvent* lowmemory_kill) {
  clear_event();
  if (lowmemory_kill) {
    set_has_lowmemory_kill();
    _impl_.event_.lowmemory_kill_ = lowmemory_kill;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.lowmemory_kill)
}
inline ::perfetto::protos::LowmemoryKillFtraceEvent* FtraceEvent::_internal_mutable_lowmemory_kill() {
  if (event_case() != kLowmemoryKill) {
    clear_event();
    set_has_lowmemory_kill();
    _impl_.event_.lowmemory_kill_ = CreateMaybeMessage< ::perfetto::protos::LowmemoryKillFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.lowmemory_kill_;
}
inline ::perfetto::protos::LowmemoryKillFtraceEvent* FtraceEvent::mutable_lowmemory_kill() {
  ::perfetto::protos::LowmemoryKillFtraceEvent* _msg = _internal_mutable_lowmemory_kill();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.lowmemory_kill)
  return _msg;
}

// .perfetto.protos.IrqHandlerEntryFtraceEvent irq_handler_entry = 36;
inline bool FtraceEvent::has_irq_handler_entry() const {
  return event_case() == kIrqHandlerEntry;
}
inline bool FtraceEvent::_internal_has_irq_handler_entry() const {
  return event_case() == kIrqHandlerEntry;
}
inline void FtraceEvent::set_has_irq_handler_entry() {
  _impl_._oneof_case_[0] = kIrqHandlerEntry;
}
inline ::perfetto::protos::IrqHandlerEntryFtraceEvent* FtraceEvent::release_irq_handler_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.irq_handler_entry)
  if (event_case() == kIrqHandlerEntry) {
    clear_has_event();
    ::perfetto::protos::IrqHandlerEntryFtraceEvent* temp = _impl_.event_.irq_handler_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.irq_handler_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IrqHandlerEntryFtraceEvent& FtraceEvent::_internal_irq_handler_entry() const {
  return event_case() == kIrqHandlerEntry
      ? *_impl_.event_.irq_handler_entry_
      : reinterpret_cast<::perfetto::protos::IrqHandlerEntryFtraceEvent&>(::perfetto::protos::_IrqHandlerEntryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IrqHandlerEntryFtraceEvent& FtraceEvent::irq_handler_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.irq_handler_entry)
  return _internal_irq_handler_entry();
}
inline ::perfetto::protos::IrqHandlerEntryFtraceEvent* FtraceEvent::unsafe_arena_release_irq_handler_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.irq_handler_entry)
  if (event_case() == kIrqHandlerEntry) {
    clear_has_event();
    ::perfetto::protos::IrqHandlerEntryFtraceEvent* temp = _impl_.event_.irq_handler_entry_;
    _impl_.event_.irq_handler_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_irq_handler_entry(::perfetto::protos::IrqHandlerEntryFtraceEvent* irq_handler_entry) {
  clear_event();
  if (irq_handler_entry) {
    set_has_irq_handler_entry();
    _impl_.event_.irq_handler_entry_ = irq_handler_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.irq_handler_entry)
}
inline ::perfetto::protos::IrqHandlerEntryFtraceEvent* FtraceEvent::_internal_mutable_irq_handler_entry() {
  if (event_case() != kIrqHandlerEntry) {
    clear_event();
    set_has_irq_handler_entry();
    _impl_.event_.irq_handler_entry_ = CreateMaybeMessage< ::perfetto::protos::IrqHandlerEntryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.irq_handler_entry_;
}
inline ::perfetto::protos::IrqHandlerEntryFtraceEvent* FtraceEvent::mutable_irq_handler_entry() {
  ::perfetto::protos::IrqHandlerEntryFtraceEvent* _msg = _internal_mutable_irq_handler_entry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.irq_handler_entry)
  return _msg;
}

// .perfetto.protos.IrqHandlerExitFtraceEvent irq_handler_exit = 37;
inline bool FtraceEvent::has_irq_handler_exit() const {
  return event_case() == kIrqHandlerExit;
}
inline bool FtraceEvent::_internal_has_irq_handler_exit() const {
  return event_case() == kIrqHandlerExit;
}
inline void FtraceEvent::set_has_irq_handler_exit() {
  _impl_._oneof_case_[0] = kIrqHandlerExit;
}
inline ::perfetto::protos::IrqHandlerExitFtraceEvent* FtraceEvent::release_irq_handler_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.irq_handler_exit)
  if (event_case() == kIrqHandlerExit) {
    clear_has_event();
    ::perfetto::protos::IrqHandlerExitFtraceEvent* temp = _impl_.event_.irq_handler_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.irq_handler_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IrqHandlerExitFtraceEvent& FtraceEvent::_internal_irq_handler_exit() const {
  return event_case() == kIrqHandlerExit
      ? *_impl_.event_.irq_handler_exit_
      : reinterpret_cast<::perfetto::protos::IrqHandlerExitFtraceEvent&>(::perfetto::protos::_IrqHandlerExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IrqHandlerExitFtraceEvent& FtraceEvent::irq_handler_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.irq_handler_exit)
  return _internal_irq_handler_exit();
}
inline ::perfetto::protos::IrqHandlerExitFtraceEvent* FtraceEvent::unsafe_arena_release_irq_handler_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.irq_handler_exit)
  if (event_case() == kIrqHandlerExit) {
    clear_has_event();
    ::perfetto::protos::IrqHandlerExitFtraceEvent* temp = _impl_.event_.irq_handler_exit_;
    _impl_.event_.irq_handler_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_irq_handler_exit(::perfetto::protos::IrqHandlerExitFtraceEvent* irq_handler_exit) {
  clear_event();
  if (irq_handler_exit) {
    set_has_irq_handler_exit();
    _impl_.event_.irq_handler_exit_ = irq_handler_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.irq_handler_exit)
}
inline ::perfetto::protos::IrqHandlerExitFtraceEvent* FtraceEvent::_internal_mutable_irq_handler_exit() {
  if (event_case() != kIrqHandlerExit) {
    clear_event();
    set_has_irq_handler_exit();
    _impl_.event_.irq_handler_exit_ = CreateMaybeMessage< ::perfetto::protos::IrqHandlerExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.irq_handler_exit_;
}
inline ::perfetto::protos::IrqHandlerExitFtraceEvent* FtraceEvent::mutable_irq_handler_exit() {
  ::perfetto::protos::IrqHandlerExitFtraceEvent* _msg = _internal_mutable_irq_handler_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.irq_handler_exit)
  return _msg;
}

// .perfetto.protos.SyncPtFtraceEvent sync_pt = 38;
inline bool FtraceEvent::has_sync_pt() const {
  return event_case() == kSyncPt;
}
inline bool FtraceEvent::_internal_has_sync_pt() const {
  return event_case() == kSyncPt;
}
inline void FtraceEvent::set_has_sync_pt() {
  _impl_._oneof_case_[0] = kSyncPt;
}
inline ::perfetto::protos::SyncPtFtraceEvent* FtraceEvent::release_sync_pt() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sync_pt)
  if (event_case() == kSyncPt) {
    clear_has_event();
    ::perfetto::protos::SyncPtFtraceEvent* temp = _impl_.event_.sync_pt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sync_pt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SyncPtFtraceEvent& FtraceEvent::_internal_sync_pt() const {
  return event_case() == kSyncPt
      ? *_impl_.event_.sync_pt_
      : reinterpret_cast<::perfetto::protos::SyncPtFtraceEvent&>(::perfetto::protos::_SyncPtFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SyncPtFtraceEvent& FtraceEvent::sync_pt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sync_pt)
  return _internal_sync_pt();
}
inline ::perfetto::protos::SyncPtFtraceEvent* FtraceEvent::unsafe_arena_release_sync_pt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sync_pt)
  if (event_case() == kSyncPt) {
    clear_has_event();
    ::perfetto::protos::SyncPtFtraceEvent* temp = _impl_.event_.sync_pt_;
    _impl_.event_.sync_pt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sync_pt(::perfetto::protos::SyncPtFtraceEvent* sync_pt) {
  clear_event();
  if (sync_pt) {
    set_has_sync_pt();
    _impl_.event_.sync_pt_ = sync_pt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sync_pt)
}
inline ::perfetto::protos::SyncPtFtraceEvent* FtraceEvent::_internal_mutable_sync_pt() {
  if (event_case() != kSyncPt) {
    clear_event();
    set_has_sync_pt();
    _impl_.event_.sync_pt_ = CreateMaybeMessage< ::perfetto::protos::SyncPtFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sync_pt_;
}
inline ::perfetto::protos::SyncPtFtraceEvent* FtraceEvent::mutable_sync_pt() {
  ::perfetto::protos::SyncPtFtraceEvent* _msg = _internal_mutable_sync_pt();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sync_pt)
  return _msg;
}

// .perfetto.protos.SyncTimelineFtraceEvent sync_timeline = 39;
inline bool FtraceEvent::has_sync_timeline() const {
  return event_case() == kSyncTimeline;
}
inline bool FtraceEvent::_internal_has_sync_timeline() const {
  return event_case() == kSyncTimeline;
}
inline void FtraceEvent::set_has_sync_timeline() {
  _impl_._oneof_case_[0] = kSyncTimeline;
}
inline ::perfetto::protos::SyncTimelineFtraceEvent* FtraceEvent::release_sync_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sync_timeline)
  if (event_case() == kSyncTimeline) {
    clear_has_event();
    ::perfetto::protos::SyncTimelineFtraceEvent* temp = _impl_.event_.sync_timeline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sync_timeline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SyncTimelineFtraceEvent& FtraceEvent::_internal_sync_timeline() const {
  return event_case() == kSyncTimeline
      ? *_impl_.event_.sync_timeline_
      : reinterpret_cast<::perfetto::protos::SyncTimelineFtraceEvent&>(::perfetto::protos::_SyncTimelineFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SyncTimelineFtraceEvent& FtraceEvent::sync_timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sync_timeline)
  return _internal_sync_timeline();
}
inline ::perfetto::protos::SyncTimelineFtraceEvent* FtraceEvent::unsafe_arena_release_sync_timeline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sync_timeline)
  if (event_case() == kSyncTimeline) {
    clear_has_event();
    ::perfetto::protos::SyncTimelineFtraceEvent* temp = _impl_.event_.sync_timeline_;
    _impl_.event_.sync_timeline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sync_timeline(::perfetto::protos::SyncTimelineFtraceEvent* sync_timeline) {
  clear_event();
  if (sync_timeline) {
    set_has_sync_timeline();
    _impl_.event_.sync_timeline_ = sync_timeline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sync_timeline)
}
inline ::perfetto::protos::SyncTimelineFtraceEvent* FtraceEvent::_internal_mutable_sync_timeline() {
  if (event_case() != kSyncTimeline) {
    clear_event();
    set_has_sync_timeline();
    _impl_.event_.sync_timeline_ = CreateMaybeMessage< ::perfetto::protos::SyncTimelineFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sync_timeline_;
}
inline ::perfetto::protos::SyncTimelineFtraceEvent* FtraceEvent::mutable_sync_timeline() {
  ::perfetto::protos::SyncTimelineFtraceEvent* _msg = _internal_mutable_sync_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sync_timeline)
  return _msg;
}

// .perfetto.protos.SyncWaitFtraceEvent sync_wait = 40;
inline bool FtraceEvent::has_sync_wait() const {
  return event_case() == kSyncWait;
}
inline bool FtraceEvent::_internal_has_sync_wait() const {
  return event_case() == kSyncWait;
}
inline void FtraceEvent::set_has_sync_wait() {
  _impl_._oneof_case_[0] = kSyncWait;
}
inline ::perfetto::protos::SyncWaitFtraceEvent* FtraceEvent::release_sync_wait() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sync_wait)
  if (event_case() == kSyncWait) {
    clear_has_event();
    ::perfetto::protos::SyncWaitFtraceEvent* temp = _impl_.event_.sync_wait_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sync_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SyncWaitFtraceEvent& FtraceEvent::_internal_sync_wait() const {
  return event_case() == kSyncWait
      ? *_impl_.event_.sync_wait_
      : reinterpret_cast<::perfetto::protos::SyncWaitFtraceEvent&>(::perfetto::protos::_SyncWaitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SyncWaitFtraceEvent& FtraceEvent::sync_wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sync_wait)
  return _internal_sync_wait();
}
inline ::perfetto::protos::SyncWaitFtraceEvent* FtraceEvent::unsafe_arena_release_sync_wait() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sync_wait)
  if (event_case() == kSyncWait) {
    clear_has_event();
    ::perfetto::protos::SyncWaitFtraceEvent* temp = _impl_.event_.sync_wait_;
    _impl_.event_.sync_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sync_wait(::perfetto::protos::SyncWaitFtraceEvent* sync_wait) {
  clear_event();
  if (sync_wait) {
    set_has_sync_wait();
    _impl_.event_.sync_wait_ = sync_wait;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sync_wait)
}
inline ::perfetto::protos::SyncWaitFtraceEvent* FtraceEvent::_internal_mutable_sync_wait() {
  if (event_case() != kSyncWait) {
    clear_event();
    set_has_sync_wait();
    _impl_.event_.sync_wait_ = CreateMaybeMessage< ::perfetto::protos::SyncWaitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sync_wait_;
}
inline ::perfetto::protos::SyncWaitFtraceEvent* FtraceEvent::mutable_sync_wait() {
  ::perfetto::protos::SyncWaitFtraceEvent* _msg = _internal_mutable_sync_wait();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sync_wait)
  return _msg;
}

// .perfetto.protos.Ext4DaWriteBeginFtraceEvent ext4_da_write_begin = 41;
inline bool FtraceEvent::has_ext4_da_write_begin() const {
  return event_case() == kExt4DaWriteBegin;
}
inline bool FtraceEvent::_internal_has_ext4_da_write_begin() const {
  return event_case() == kExt4DaWriteBegin;
}
inline void FtraceEvent::set_has_ext4_da_write_begin() {
  _impl_._oneof_case_[0] = kExt4DaWriteBegin;
}
inline ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* FtraceEvent::release_ext4_da_write_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  if (event_case() == kExt4DaWriteBegin) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* temp = _impl_.event_.ext4_da_write_begin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& FtraceEvent::_internal_ext4_da_write_begin() const {
  return event_case() == kExt4DaWriteBegin
      ? *_impl_.event_.ext4_da_write_begin_
      : reinterpret_cast<::perfetto::protos::Ext4DaWriteBeginFtraceEvent&>(::perfetto::protos::_Ext4DaWriteBeginFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaWriteBeginFtraceEvent& FtraceEvent::ext4_da_write_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  return _internal_ext4_da_write_begin();
}
inline ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_write_begin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  if (event_case() == kExt4DaWriteBegin) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* temp = _impl_.event_.ext4_da_write_begin_;
    _impl_.event_.ext4_da_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_write_begin(::perfetto::protos::Ext4DaWriteBeginFtraceEvent* ext4_da_write_begin) {
  clear_event();
  if (ext4_da_write_begin) {
    set_has_ext4_da_write_begin();
    _impl_.event_.ext4_da_write_begin_ = ext4_da_write_begin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_begin)
}
inline ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_write_begin() {
  if (event_case() != kExt4DaWriteBegin) {
    clear_event();
    set_has_ext4_da_write_begin();
    _impl_.event_.ext4_da_write_begin_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWriteBeginFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_write_begin_;
}
inline ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* FtraceEvent::mutable_ext4_da_write_begin() {
  ::perfetto::protos::Ext4DaWriteBeginFtraceEvent* _msg = _internal_mutable_ext4_da_write_begin();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_begin)
  return _msg;
}

// .perfetto.protos.Ext4DaWriteEndFtraceEvent ext4_da_write_end = 42;
inline bool FtraceEvent::has_ext4_da_write_end() const {
  return event_case() == kExt4DaWriteEnd;
}
inline bool FtraceEvent::_internal_has_ext4_da_write_end() const {
  return event_case() == kExt4DaWriteEnd;
}
inline void FtraceEvent::set_has_ext4_da_write_end() {
  _impl_._oneof_case_[0] = kExt4DaWriteEnd;
}
inline ::perfetto::protos::Ext4DaWriteEndFtraceEvent* FtraceEvent::release_ext4_da_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_end)
  if (event_case() == kExt4DaWriteEnd) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWriteEndFtraceEvent* temp = _impl_.event_.ext4_da_write_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& FtraceEvent::_internal_ext4_da_write_end() const {
  return event_case() == kExt4DaWriteEnd
      ? *_impl_.event_.ext4_da_write_end_
      : reinterpret_cast<::perfetto::protos::Ext4DaWriteEndFtraceEvent&>(::perfetto::protos::_Ext4DaWriteEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaWriteEndFtraceEvent& FtraceEvent::ext4_da_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_end)
  return _internal_ext4_da_write_end();
}
inline ::perfetto::protos::Ext4DaWriteEndFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_write_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_write_end)
  if (event_case() == kExt4DaWriteEnd) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWriteEndFtraceEvent* temp = _impl_.event_.ext4_da_write_end_;
    _impl_.event_.ext4_da_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_write_end(::perfetto::protos::Ext4DaWriteEndFtraceEvent* ext4_da_write_end) {
  clear_event();
  if (ext4_da_write_end) {
    set_has_ext4_da_write_end();
    _impl_.event_.ext4_da_write_end_ = ext4_da_write_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_end)
}
inline ::perfetto::protos::Ext4DaWriteEndFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_write_end() {
  if (event_case() != kExt4DaWriteEnd) {
    clear_event();
    set_has_ext4_da_write_end();
    _impl_.event_.ext4_da_write_end_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWriteEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_write_end_;
}
inline ::perfetto::protos::Ext4DaWriteEndFtraceEvent* FtraceEvent::mutable_ext4_da_write_end() {
  ::perfetto::protos::Ext4DaWriteEndFtraceEvent* _msg = _internal_mutable_ext4_da_write_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_end)
  return _msg;
}

// .perfetto.protos.Ext4SyncFileEnterFtraceEvent ext4_sync_file_enter = 43;
inline bool FtraceEvent::has_ext4_sync_file_enter() const {
  return event_case() == kExt4SyncFileEnter;
}
inline bool FtraceEvent::_internal_has_ext4_sync_file_enter() const {
  return event_case() == kExt4SyncFileEnter;
}
inline void FtraceEvent::set_has_ext4_sync_file_enter() {
  _impl_._oneof_case_[0] = kExt4SyncFileEnter;
}
inline ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* FtraceEvent::release_ext4_sync_file_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  if (event_case() == kExt4SyncFileEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* temp = _impl_.event_.ext4_sync_file_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_sync_file_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& FtraceEvent::_internal_ext4_sync_file_enter() const {
  return event_case() == kExt4SyncFileEnter
      ? *_impl_.event_.ext4_sync_file_enter_
      : reinterpret_cast<::perfetto::protos::Ext4SyncFileEnterFtraceEvent&>(::perfetto::protos::_Ext4SyncFileEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4SyncFileEnterFtraceEvent& FtraceEvent::ext4_sync_file_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  return _internal_ext4_sync_file_enter();
}
inline ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_sync_file_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  if (event_case() == kExt4SyncFileEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* temp = _impl_.event_.ext4_sync_file_enter_;
    _impl_.event_.ext4_sync_file_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_sync_file_enter(::perfetto::protos::Ext4SyncFileEnterFtraceEvent* ext4_sync_file_enter) {
  clear_event();
  if (ext4_sync_file_enter) {
    set_has_ext4_sync_file_enter();
    _impl_.event_.ext4_sync_file_enter_ = ext4_sync_file_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
}
inline ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_sync_file_enter() {
  if (event_case() != kExt4SyncFileEnter) {
    clear_event();
    set_has_ext4_sync_file_enter();
    _impl_.event_.ext4_sync_file_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4SyncFileEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_sync_file_enter_;
}
inline ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* FtraceEvent::mutable_ext4_sync_file_enter() {
  ::perfetto::protos::Ext4SyncFileEnterFtraceEvent* _msg = _internal_mutable_ext4_sync_file_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_sync_file_enter)
  return _msg;
}

// .perfetto.protos.Ext4SyncFileExitFtraceEvent ext4_sync_file_exit = 44;
inline bool FtraceEvent::has_ext4_sync_file_exit() const {
  return event_case() == kExt4SyncFileExit;
}
inline bool FtraceEvent::_internal_has_ext4_sync_file_exit() const {
  return event_case() == kExt4SyncFileExit;
}
inline void FtraceEvent::set_has_ext4_sync_file_exit() {
  _impl_._oneof_case_[0] = kExt4SyncFileExit;
}
inline ::perfetto::protos::Ext4SyncFileExitFtraceEvent* FtraceEvent::release_ext4_sync_file_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  if (event_case() == kExt4SyncFileExit) {
    clear_has_event();
    ::perfetto::protos::Ext4SyncFileExitFtraceEvent* temp = _impl_.event_.ext4_sync_file_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_sync_file_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& FtraceEvent::_internal_ext4_sync_file_exit() const {
  return event_case() == kExt4SyncFileExit
      ? *_impl_.event_.ext4_sync_file_exit_
      : reinterpret_cast<::perfetto::protos::Ext4SyncFileExitFtraceEvent&>(::perfetto::protos::_Ext4SyncFileExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4SyncFileExitFtraceEvent& FtraceEvent::ext4_sync_file_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  return _internal_ext4_sync_file_exit();
}
inline ::perfetto::protos::Ext4SyncFileExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_sync_file_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  if (event_case() == kExt4SyncFileExit) {
    clear_has_event();
    ::perfetto::protos::Ext4SyncFileExitFtraceEvent* temp = _impl_.event_.ext4_sync_file_exit_;
    _impl_.event_.ext4_sync_file_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_sync_file_exit(::perfetto::protos::Ext4SyncFileExitFtraceEvent* ext4_sync_file_exit) {
  clear_event();
  if (ext4_sync_file_exit) {
    set_has_ext4_sync_file_exit();
    _impl_.event_.ext4_sync_file_exit_ = ext4_sync_file_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
}
inline ::perfetto::protos::Ext4SyncFileExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_sync_file_exit() {
  if (event_case() != kExt4SyncFileExit) {
    clear_event();
    set_has_ext4_sync_file_exit();
    _impl_.event_.ext4_sync_file_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4SyncFileExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_sync_file_exit_;
}
inline ::perfetto::protos::Ext4SyncFileExitFtraceEvent* FtraceEvent::mutable_ext4_sync_file_exit() {
  ::perfetto::protos::Ext4SyncFileExitFtraceEvent* _msg = _internal_mutable_ext4_sync_file_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_sync_file_exit)
  return _msg;
}

// .perfetto.protos.BlockRqIssueFtraceEvent block_rq_issue = 45;
inline bool FtraceEvent::has_block_rq_issue() const {
  return event_case() == kBlockRqIssue;
}
inline bool FtraceEvent::_internal_has_block_rq_issue() const {
  return event_case() == kBlockRqIssue;
}
inline void FtraceEvent::set_has_block_rq_issue() {
  _impl_._oneof_case_[0] = kBlockRqIssue;
}
inline ::perfetto::protos::BlockRqIssueFtraceEvent* FtraceEvent::release_block_rq_issue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_issue)
  if (event_case() == kBlockRqIssue) {
    clear_has_event();
    ::perfetto::protos::BlockRqIssueFtraceEvent* temp = _impl_.event_.block_rq_issue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_rq_issue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqIssueFtraceEvent& FtraceEvent::_internal_block_rq_issue() const {
  return event_case() == kBlockRqIssue
      ? *_impl_.event_.block_rq_issue_
      : reinterpret_cast<::perfetto::protos::BlockRqIssueFtraceEvent&>(::perfetto::protos::_BlockRqIssueFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockRqIssueFtraceEvent& FtraceEvent::block_rq_issue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_issue)
  return _internal_block_rq_issue();
}
inline ::perfetto::protos::BlockRqIssueFtraceEvent* FtraceEvent::unsafe_arena_release_block_rq_issue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_rq_issue)
  if (event_case() == kBlockRqIssue) {
    clear_has_event();
    ::perfetto::protos::BlockRqIssueFtraceEvent* temp = _impl_.event_.block_rq_issue_;
    _impl_.event_.block_rq_issue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_rq_issue(::perfetto::protos::BlockRqIssueFtraceEvent* block_rq_issue) {
  clear_event();
  if (block_rq_issue) {
    set_has_block_rq_issue();
    _impl_.event_.block_rq_issue_ = block_rq_issue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_rq_issue)
}
inline ::perfetto::protos::BlockRqIssueFtraceEvent* FtraceEvent::_internal_mutable_block_rq_issue() {
  if (event_case() != kBlockRqIssue) {
    clear_event();
    set_has_block_rq_issue();
    _impl_.event_.block_rq_issue_ = CreateMaybeMessage< ::perfetto::protos::BlockRqIssueFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_rq_issue_;
}
inline ::perfetto::protos::BlockRqIssueFtraceEvent* FtraceEvent::mutable_block_rq_issue() {
  ::perfetto::protos::BlockRqIssueFtraceEvent* _msg = _internal_mutable_block_rq_issue();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_issue)
  return _msg;
}

// .perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent mm_vmscan_direct_reclaim_begin = 46;
inline bool FtraceEvent::has_mm_vmscan_direct_reclaim_begin() const {
  return event_case() == kMmVmscanDirectReclaimBegin;
}
inline bool FtraceEvent::_internal_has_mm_vmscan_direct_reclaim_begin() const {
  return event_case() == kMmVmscanDirectReclaimBegin;
}
inline void FtraceEvent::set_has_mm_vmscan_direct_reclaim_begin() {
  _impl_._oneof_case_[0] = kMmVmscanDirectReclaimBegin;
}
inline ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::release_mm_vmscan_direct_reclaim_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  if (event_case() == kMmVmscanDirectReclaimBegin) {
    clear_has_event();
    ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* temp = _impl_.event_.mm_vmscan_direct_reclaim_begin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_vmscan_direct_reclaim_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& FtraceEvent::_internal_mm_vmscan_direct_reclaim_begin() const {
  return event_case() == kMmVmscanDirectReclaimBegin
      ? *_impl_.event_.mm_vmscan_direct_reclaim_begin_
      : reinterpret_cast<::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent&>(::perfetto::protos::_MmVmscanDirectReclaimBeginFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent& FtraceEvent::mm_vmscan_direct_reclaim_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  return _internal_mm_vmscan_direct_reclaim_begin();
}
inline ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::unsafe_arena_release_mm_vmscan_direct_reclaim_begin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  if (event_case() == kMmVmscanDirectReclaimBegin) {
    clear_has_event();
    ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* temp = _impl_.event_.mm_vmscan_direct_reclaim_begin_;
    _impl_.event_.mm_vmscan_direct_reclaim_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_vmscan_direct_reclaim_begin(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* mm_vmscan_direct_reclaim_begin) {
  clear_event();
  if (mm_vmscan_direct_reclaim_begin) {
    set_has_mm_vmscan_direct_reclaim_begin();
    _impl_.event_.mm_vmscan_direct_reclaim_begin_ = mm_vmscan_direct_reclaim_begin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
}
inline ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::_internal_mutable_mm_vmscan_direct_reclaim_begin() {
  if (event_case() != kMmVmscanDirectReclaimBegin) {
    clear_event();
    set_has_mm_vmscan_direct_reclaim_begin();
    _impl_.event_.mm_vmscan_direct_reclaim_begin_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_vmscan_direct_reclaim_begin_;
}
inline ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* FtraceEvent::mutable_mm_vmscan_direct_reclaim_begin() {
  ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent* _msg = _internal_mutable_mm_vmscan_direct_reclaim_begin();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin)
  return _msg;
}

// .perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent mm_vmscan_direct_reclaim_end = 47;
inline bool FtraceEvent::has_mm_vmscan_direct_reclaim_end() const {
  return event_case() == kMmVmscanDirectReclaimEnd;
}
inline bool FtraceEvent::_internal_has_mm_vmscan_direct_reclaim_end() const {
  return event_case() == kMmVmscanDirectReclaimEnd;
}
inline void FtraceEvent::set_has_mm_vmscan_direct_reclaim_end() {
  _impl_._oneof_case_[0] = kMmVmscanDirectReclaimEnd;
}
inline ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::release_mm_vmscan_direct_reclaim_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  if (event_case() == kMmVmscanDirectReclaimEnd) {
    clear_has_event();
    ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* temp = _impl_.event_.mm_vmscan_direct_reclaim_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_vmscan_direct_reclaim_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& FtraceEvent::_internal_mm_vmscan_direct_reclaim_end() const {
  return event_case() == kMmVmscanDirectReclaimEnd
      ? *_impl_.event_.mm_vmscan_direct_reclaim_end_
      : reinterpret_cast<::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent&>(::perfetto::protos::_MmVmscanDirectReclaimEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent& FtraceEvent::mm_vmscan_direct_reclaim_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  return _internal_mm_vmscan_direct_reclaim_end();
}
inline ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::unsafe_arena_release_mm_vmscan_direct_reclaim_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  if (event_case() == kMmVmscanDirectReclaimEnd) {
    clear_has_event();
    ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* temp = _impl_.event_.mm_vmscan_direct_reclaim_end_;
    _impl_.event_.mm_vmscan_direct_reclaim_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_vmscan_direct_reclaim_end(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* mm_vmscan_direct_reclaim_end) {
  clear_event();
  if (mm_vmscan_direct_reclaim_end) {
    set_has_mm_vmscan_direct_reclaim_end();
    _impl_.event_.mm_vmscan_direct_reclaim_end_ = mm_vmscan_direct_reclaim_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
}
inline ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::_internal_mutable_mm_vmscan_direct_reclaim_end() {
  if (event_case() != kMmVmscanDirectReclaimEnd) {
    clear_event();
    set_has_mm_vmscan_direct_reclaim_end();
    _impl_.event_.mm_vmscan_direct_reclaim_end_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_vmscan_direct_reclaim_end_;
}
inline ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* FtraceEvent::mutable_mm_vmscan_direct_reclaim_end() {
  ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent* _msg = _internal_mutable_mm_vmscan_direct_reclaim_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end)
  return _msg;
}

// .perfetto.protos.MmVmscanKswapdWakeFtraceEvent mm_vmscan_kswapd_wake = 48;
inline bool FtraceEvent::has_mm_vmscan_kswapd_wake() const {
  return event_case() == kMmVmscanKswapdWake;
}
inline bool FtraceEvent::_internal_has_mm_vmscan_kswapd_wake() const {
  return event_case() == kMmVmscanKswapdWake;
}
inline void FtraceEvent::set_has_mm_vmscan_kswapd_wake() {
  _impl_._oneof_case_[0] = kMmVmscanKswapdWake;
}
inline ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* FtraceEvent::release_mm_vmscan_kswapd_wake() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  if (event_case() == kMmVmscanKswapdWake) {
    clear_has_event();
    ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* temp = _impl_.event_.mm_vmscan_kswapd_wake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_vmscan_kswapd_wake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& FtraceEvent::_internal_mm_vmscan_kswapd_wake() const {
  return event_case() == kMmVmscanKswapdWake
      ? *_impl_.event_.mm_vmscan_kswapd_wake_
      : reinterpret_cast<::perfetto::protos::MmVmscanKswapdWakeFtraceEvent&>(::perfetto::protos::_MmVmscanKswapdWakeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent& FtraceEvent::mm_vmscan_kswapd_wake() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  return _internal_mm_vmscan_kswapd_wake();
}
inline ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* FtraceEvent::unsafe_arena_release_mm_vmscan_kswapd_wake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  if (event_case() == kMmVmscanKswapdWake) {
    clear_has_event();
    ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* temp = _impl_.event_.mm_vmscan_kswapd_wake_;
    _impl_.event_.mm_vmscan_kswapd_wake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_vmscan_kswapd_wake(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* mm_vmscan_kswapd_wake) {
  clear_event();
  if (mm_vmscan_kswapd_wake) {
    set_has_mm_vmscan_kswapd_wake();
    _impl_.event_.mm_vmscan_kswapd_wake_ = mm_vmscan_kswapd_wake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
}
inline ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* FtraceEvent::_internal_mutable_mm_vmscan_kswapd_wake() {
  if (event_case() != kMmVmscanKswapdWake) {
    clear_event();
    set_has_mm_vmscan_kswapd_wake();
    _impl_.event_.mm_vmscan_kswapd_wake_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_vmscan_kswapd_wake_;
}
inline ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* FtraceEvent::mutable_mm_vmscan_kswapd_wake() {
  ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent* _msg = _internal_mutable_mm_vmscan_kswapd_wake();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake)
  return _msg;
}

// .perfetto.protos.MmVmscanKswapdSleepFtraceEvent mm_vmscan_kswapd_sleep = 49;
inline bool FtraceEvent::has_mm_vmscan_kswapd_sleep() const {
  return event_case() == kMmVmscanKswapdSleep;
}
inline bool FtraceEvent::_internal_has_mm_vmscan_kswapd_sleep() const {
  return event_case() == kMmVmscanKswapdSleep;
}
inline void FtraceEvent::set_has_mm_vmscan_kswapd_sleep() {
  _impl_._oneof_case_[0] = kMmVmscanKswapdSleep;
}
inline ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* FtraceEvent::release_mm_vmscan_kswapd_sleep() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  if (event_case() == kMmVmscanKswapdSleep) {
    clear_has_event();
    ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* temp = _impl_.event_.mm_vmscan_kswapd_sleep_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_vmscan_kswapd_sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& FtraceEvent::_internal_mm_vmscan_kswapd_sleep() const {
  return event_case() == kMmVmscanKswapdSleep
      ? *_impl_.event_.mm_vmscan_kswapd_sleep_
      : reinterpret_cast<::perfetto::protos::MmVmscanKswapdSleepFtraceEvent&>(::perfetto::protos::_MmVmscanKswapdSleepFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent& FtraceEvent::mm_vmscan_kswapd_sleep() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  return _internal_mm_vmscan_kswapd_sleep();
}
inline ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* FtraceEvent::unsafe_arena_release_mm_vmscan_kswapd_sleep() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  if (event_case() == kMmVmscanKswapdSleep) {
    clear_has_event();
    ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* temp = _impl_.event_.mm_vmscan_kswapd_sleep_;
    _impl_.event_.mm_vmscan_kswapd_sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_vmscan_kswapd_sleep(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* mm_vmscan_kswapd_sleep) {
  clear_event();
  if (mm_vmscan_kswapd_sleep) {
    set_has_mm_vmscan_kswapd_sleep();
    _impl_.event_.mm_vmscan_kswapd_sleep_ = mm_vmscan_kswapd_sleep;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
}
inline ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* FtraceEvent::_internal_mutable_mm_vmscan_kswapd_sleep() {
  if (event_case() != kMmVmscanKswapdSleep) {
    clear_event();
    set_has_mm_vmscan_kswapd_sleep();
    _impl_.event_.mm_vmscan_kswapd_sleep_ = CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_vmscan_kswapd_sleep_;
}
inline ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* FtraceEvent::mutable_mm_vmscan_kswapd_sleep() {
  ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent* _msg = _internal_mutable_mm_vmscan_kswapd_sleep();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep)
  return _msg;
}

// .perfetto.protos.BinderTransactionFtraceEvent binder_transaction = 50;
inline bool FtraceEvent::has_binder_transaction() const {
  return event_case() == kBinderTransaction;
}
inline bool FtraceEvent::_internal_has_binder_transaction() const {
  return event_case() == kBinderTransaction;
}
inline void FtraceEvent::set_has_binder_transaction() {
  _impl_._oneof_case_[0] = kBinderTransaction;
}
inline ::perfetto::protos::BinderTransactionFtraceEvent* FtraceEvent::release_binder_transaction() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_transaction)
  if (event_case() == kBinderTransaction) {
    clear_has_event();
    ::perfetto::protos::BinderTransactionFtraceEvent* temp = _impl_.event_.binder_transaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderTransactionFtraceEvent& FtraceEvent::_internal_binder_transaction() const {
  return event_case() == kBinderTransaction
      ? *_impl_.event_.binder_transaction_
      : reinterpret_cast<::perfetto::protos::BinderTransactionFtraceEvent&>(::perfetto::protos::_BinderTransactionFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderTransactionFtraceEvent& FtraceEvent::binder_transaction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_transaction)
  return _internal_binder_transaction();
}
inline ::perfetto::protos::BinderTransactionFtraceEvent* FtraceEvent::unsafe_arena_release_binder_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_transaction)
  if (event_case() == kBinderTransaction) {
    clear_has_event();
    ::perfetto::protos::BinderTransactionFtraceEvent* temp = _impl_.event_.binder_transaction_;
    _impl_.event_.binder_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_transaction(::perfetto::protos::BinderTransactionFtraceEvent* binder_transaction) {
  clear_event();
  if (binder_transaction) {
    set_has_binder_transaction();
    _impl_.event_.binder_transaction_ = binder_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_transaction)
}
inline ::perfetto::protos::BinderTransactionFtraceEvent* FtraceEvent::_internal_mutable_binder_transaction() {
  if (event_case() != kBinderTransaction) {
    clear_event();
    set_has_binder_transaction();
    _impl_.event_.binder_transaction_ = CreateMaybeMessage< ::perfetto::protos::BinderTransactionFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_transaction_;
}
inline ::perfetto::protos::BinderTransactionFtraceEvent* FtraceEvent::mutable_binder_transaction() {
  ::perfetto::protos::BinderTransactionFtraceEvent* _msg = _internal_mutable_binder_transaction();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_transaction)
  return _msg;
}

// .perfetto.protos.BinderTransactionReceivedFtraceEvent binder_transaction_received = 51;
inline bool FtraceEvent::has_binder_transaction_received() const {
  return event_case() == kBinderTransactionReceived;
}
inline bool FtraceEvent::_internal_has_binder_transaction_received() const {
  return event_case() == kBinderTransactionReceived;
}
inline void FtraceEvent::set_has_binder_transaction_received() {
  _impl_._oneof_case_[0] = kBinderTransactionReceived;
}
inline ::perfetto::protos::BinderTransactionReceivedFtraceEvent* FtraceEvent::release_binder_transaction_received() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_transaction_received)
  if (event_case() == kBinderTransactionReceived) {
    clear_has_event();
    ::perfetto::protos::BinderTransactionReceivedFtraceEvent* temp = _impl_.event_.binder_transaction_received_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_transaction_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& FtraceEvent::_internal_binder_transaction_received() const {
  return event_case() == kBinderTransactionReceived
      ? *_impl_.event_.binder_transaction_received_
      : reinterpret_cast<::perfetto::protos::BinderTransactionReceivedFtraceEvent&>(::perfetto::protos::_BinderTransactionReceivedFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderTransactionReceivedFtraceEvent& FtraceEvent::binder_transaction_received() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_transaction_received)
  return _internal_binder_transaction_received();
}
inline ::perfetto::protos::BinderTransactionReceivedFtraceEvent* FtraceEvent::unsafe_arena_release_binder_transaction_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_transaction_received)
  if (event_case() == kBinderTransactionReceived) {
    clear_has_event();
    ::perfetto::protos::BinderTransactionReceivedFtraceEvent* temp = _impl_.event_.binder_transaction_received_;
    _impl_.event_.binder_transaction_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_transaction_received(::perfetto::protos::BinderTransactionReceivedFtraceEvent* binder_transaction_received) {
  clear_event();
  if (binder_transaction_received) {
    set_has_binder_transaction_received();
    _impl_.event_.binder_transaction_received_ = binder_transaction_received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_transaction_received)
}
inline ::perfetto::protos::BinderTransactionReceivedFtraceEvent* FtraceEvent::_internal_mutable_binder_transaction_received() {
  if (event_case() != kBinderTransactionReceived) {
    clear_event();
    set_has_binder_transaction_received();
    _impl_.event_.binder_transaction_received_ = CreateMaybeMessage< ::perfetto::protos::BinderTransactionReceivedFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_transaction_received_;
}
inline ::perfetto::protos::BinderTransactionReceivedFtraceEvent* FtraceEvent::mutable_binder_transaction_received() {
  ::perfetto::protos::BinderTransactionReceivedFtraceEvent* _msg = _internal_mutable_binder_transaction_received();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_transaction_received)
  return _msg;
}

// .perfetto.protos.BinderSetPriorityFtraceEvent binder_set_priority = 52;
inline bool FtraceEvent::has_binder_set_priority() const {
  return event_case() == kBinderSetPriority;
}
inline bool FtraceEvent::_internal_has_binder_set_priority() const {
  return event_case() == kBinderSetPriority;
}
inline void FtraceEvent::set_has_binder_set_priority() {
  _impl_._oneof_case_[0] = kBinderSetPriority;
}
inline ::perfetto::protos::BinderSetPriorityFtraceEvent* FtraceEvent::release_binder_set_priority() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_set_priority)
  if (event_case() == kBinderSetPriority) {
    clear_has_event();
    ::perfetto::protos::BinderSetPriorityFtraceEvent* temp = _impl_.event_.binder_set_priority_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_set_priority_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderSetPriorityFtraceEvent& FtraceEvent::_internal_binder_set_priority() const {
  return event_case() == kBinderSetPriority
      ? *_impl_.event_.binder_set_priority_
      : reinterpret_cast<::perfetto::protos::BinderSetPriorityFtraceEvent&>(::perfetto::protos::_BinderSetPriorityFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderSetPriorityFtraceEvent& FtraceEvent::binder_set_priority() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_set_priority)
  return _internal_binder_set_priority();
}
inline ::perfetto::protos::BinderSetPriorityFtraceEvent* FtraceEvent::unsafe_arena_release_binder_set_priority() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_set_priority)
  if (event_case() == kBinderSetPriority) {
    clear_has_event();
    ::perfetto::protos::BinderSetPriorityFtraceEvent* temp = _impl_.event_.binder_set_priority_;
    _impl_.event_.binder_set_priority_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_set_priority(::perfetto::protos::BinderSetPriorityFtraceEvent* binder_set_priority) {
  clear_event();
  if (binder_set_priority) {
    set_has_binder_set_priority();
    _impl_.event_.binder_set_priority_ = binder_set_priority;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_set_priority)
}
inline ::perfetto::protos::BinderSetPriorityFtraceEvent* FtraceEvent::_internal_mutable_binder_set_priority() {
  if (event_case() != kBinderSetPriority) {
    clear_event();
    set_has_binder_set_priority();
    _impl_.event_.binder_set_priority_ = CreateMaybeMessage< ::perfetto::protos::BinderSetPriorityFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_set_priority_;
}
inline ::perfetto::protos::BinderSetPriorityFtraceEvent* FtraceEvent::mutable_binder_set_priority() {
  ::perfetto::protos::BinderSetPriorityFtraceEvent* _msg = _internal_mutable_binder_set_priority();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_set_priority)
  return _msg;
}

// .perfetto.protos.BinderLockFtraceEvent binder_lock = 53;
inline bool FtraceEvent::has_binder_lock() const {
  return event_case() == kBinderLock;
}
inline bool FtraceEvent::_internal_has_binder_lock() const {
  return event_case() == kBinderLock;
}
inline void FtraceEvent::set_has_binder_lock() {
  _impl_._oneof_case_[0] = kBinderLock;
}
inline ::perfetto::protos::BinderLockFtraceEvent* FtraceEvent::release_binder_lock() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_lock)
  if (event_case() == kBinderLock) {
    clear_has_event();
    ::perfetto::protos::BinderLockFtraceEvent* temp = _impl_.event_.binder_lock_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_lock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderLockFtraceEvent& FtraceEvent::_internal_binder_lock() const {
  return event_case() == kBinderLock
      ? *_impl_.event_.binder_lock_
      : reinterpret_cast<::perfetto::protos::BinderLockFtraceEvent&>(::perfetto::protos::_BinderLockFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderLockFtraceEvent& FtraceEvent::binder_lock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_lock)
  return _internal_binder_lock();
}
inline ::perfetto::protos::BinderLockFtraceEvent* FtraceEvent::unsafe_arena_release_binder_lock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_lock)
  if (event_case() == kBinderLock) {
    clear_has_event();
    ::perfetto::protos::BinderLockFtraceEvent* temp = _impl_.event_.binder_lock_;
    _impl_.event_.binder_lock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_lock(::perfetto::protos::BinderLockFtraceEvent* binder_lock) {
  clear_event();
  if (binder_lock) {
    set_has_binder_lock();
    _impl_.event_.binder_lock_ = binder_lock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_lock)
}
inline ::perfetto::protos::BinderLockFtraceEvent* FtraceEvent::_internal_mutable_binder_lock() {
  if (event_case() != kBinderLock) {
    clear_event();
    set_has_binder_lock();
    _impl_.event_.binder_lock_ = CreateMaybeMessage< ::perfetto::protos::BinderLockFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_lock_;
}
inline ::perfetto::protos::BinderLockFtraceEvent* FtraceEvent::mutable_binder_lock() {
  ::perfetto::protos::BinderLockFtraceEvent* _msg = _internal_mutable_binder_lock();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_lock)
  return _msg;
}

// .perfetto.protos.BinderLockedFtraceEvent binder_locked = 54;
inline bool FtraceEvent::has_binder_locked() const {
  return event_case() == kBinderLocked;
}
inline bool FtraceEvent::_internal_has_binder_locked() const {
  return event_case() == kBinderLocked;
}
inline void FtraceEvent::set_has_binder_locked() {
  _impl_._oneof_case_[0] = kBinderLocked;
}
inline ::perfetto::protos::BinderLockedFtraceEvent* FtraceEvent::release_binder_locked() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_locked)
  if (event_case() == kBinderLocked) {
    clear_has_event();
    ::perfetto::protos::BinderLockedFtraceEvent* temp = _impl_.event_.binder_locked_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderLockedFtraceEvent& FtraceEvent::_internal_binder_locked() const {
  return event_case() == kBinderLocked
      ? *_impl_.event_.binder_locked_
      : reinterpret_cast<::perfetto::protos::BinderLockedFtraceEvent&>(::perfetto::protos::_BinderLockedFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderLockedFtraceEvent& FtraceEvent::binder_locked() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_locked)
  return _internal_binder_locked();
}
inline ::perfetto::protos::BinderLockedFtraceEvent* FtraceEvent::unsafe_arena_release_binder_locked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_locked)
  if (event_case() == kBinderLocked) {
    clear_has_event();
    ::perfetto::protos::BinderLockedFtraceEvent* temp = _impl_.event_.binder_locked_;
    _impl_.event_.binder_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_locked(::perfetto::protos::BinderLockedFtraceEvent* binder_locked) {
  clear_event();
  if (binder_locked) {
    set_has_binder_locked();
    _impl_.event_.binder_locked_ = binder_locked;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_locked)
}
inline ::perfetto::protos::BinderLockedFtraceEvent* FtraceEvent::_internal_mutable_binder_locked() {
  if (event_case() != kBinderLocked) {
    clear_event();
    set_has_binder_locked();
    _impl_.event_.binder_locked_ = CreateMaybeMessage< ::perfetto::protos::BinderLockedFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_locked_;
}
inline ::perfetto::protos::BinderLockedFtraceEvent* FtraceEvent::mutable_binder_locked() {
  ::perfetto::protos::BinderLockedFtraceEvent* _msg = _internal_mutable_binder_locked();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_locked)
  return _msg;
}

// .perfetto.protos.BinderUnlockFtraceEvent binder_unlock = 55;
inline bool FtraceEvent::has_binder_unlock() const {
  return event_case() == kBinderUnlock;
}
inline bool FtraceEvent::_internal_has_binder_unlock() const {
  return event_case() == kBinderUnlock;
}
inline void FtraceEvent::set_has_binder_unlock() {
  _impl_._oneof_case_[0] = kBinderUnlock;
}
inline ::perfetto::protos::BinderUnlockFtraceEvent* FtraceEvent::release_binder_unlock() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_unlock)
  if (event_case() == kBinderUnlock) {
    clear_has_event();
    ::perfetto::protos::BinderUnlockFtraceEvent* temp = _impl_.event_.binder_unlock_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_unlock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderUnlockFtraceEvent& FtraceEvent::_internal_binder_unlock() const {
  return event_case() == kBinderUnlock
      ? *_impl_.event_.binder_unlock_
      : reinterpret_cast<::perfetto::protos::BinderUnlockFtraceEvent&>(::perfetto::protos::_BinderUnlockFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderUnlockFtraceEvent& FtraceEvent::binder_unlock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_unlock)
  return _internal_binder_unlock();
}
inline ::perfetto::protos::BinderUnlockFtraceEvent* FtraceEvent::unsafe_arena_release_binder_unlock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_unlock)
  if (event_case() == kBinderUnlock) {
    clear_has_event();
    ::perfetto::protos::BinderUnlockFtraceEvent* temp = _impl_.event_.binder_unlock_;
    _impl_.event_.binder_unlock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_unlock(::perfetto::protos::BinderUnlockFtraceEvent* binder_unlock) {
  clear_event();
  if (binder_unlock) {
    set_has_binder_unlock();
    _impl_.event_.binder_unlock_ = binder_unlock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_unlock)
}
inline ::perfetto::protos::BinderUnlockFtraceEvent* FtraceEvent::_internal_mutable_binder_unlock() {
  if (event_case() != kBinderUnlock) {
    clear_event();
    set_has_binder_unlock();
    _impl_.event_.binder_unlock_ = CreateMaybeMessage< ::perfetto::protos::BinderUnlockFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_unlock_;
}
inline ::perfetto::protos::BinderUnlockFtraceEvent* FtraceEvent::mutable_binder_unlock() {
  ::perfetto::protos::BinderUnlockFtraceEvent* _msg = _internal_mutable_binder_unlock();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_unlock)
  return _msg;
}

// .perfetto.protos.WorkqueueActivateWorkFtraceEvent workqueue_activate_work = 56;
inline bool FtraceEvent::has_workqueue_activate_work() const {
  return event_case() == kWorkqueueActivateWork;
}
inline bool FtraceEvent::_internal_has_workqueue_activate_work() const {
  return event_case() == kWorkqueueActivateWork;
}
inline void FtraceEvent::set_has_workqueue_activate_work() {
  _impl_._oneof_case_[0] = kWorkqueueActivateWork;
}
inline ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* FtraceEvent::release_workqueue_activate_work() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_activate_work)
  if (event_case() == kWorkqueueActivateWork) {
    clear_has_event();
    ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* temp = _impl_.event_.workqueue_activate_work_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.workqueue_activate_work_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& FtraceEvent::_internal_workqueue_activate_work() const {
  return event_case() == kWorkqueueActivateWork
      ? *_impl_.event_.workqueue_activate_work_
      : reinterpret_cast<::perfetto::protos::WorkqueueActivateWorkFtraceEvent&>(::perfetto::protos::_WorkqueueActivateWorkFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::WorkqueueActivateWorkFtraceEvent& FtraceEvent::workqueue_activate_work() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_activate_work)
  return _internal_workqueue_activate_work();
}
inline ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* FtraceEvent::unsafe_arena_release_workqueue_activate_work() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.workqueue_activate_work)
  if (event_case() == kWorkqueueActivateWork) {
    clear_has_event();
    ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* temp = _impl_.event_.workqueue_activate_work_;
    _impl_.event_.workqueue_activate_work_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_workqueue_activate_work(::perfetto::protos::WorkqueueActivateWorkFtraceEvent* workqueue_activate_work) {
  clear_event();
  if (workqueue_activate_work) {
    set_has_workqueue_activate_work();
    _impl_.event_.workqueue_activate_work_ = workqueue_activate_work;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.workqueue_activate_work)
}
inline ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* FtraceEvent::_internal_mutable_workqueue_activate_work() {
  if (event_case() != kWorkqueueActivateWork) {
    clear_event();
    set_has_workqueue_activate_work();
    _impl_.event_.workqueue_activate_work_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueActivateWorkFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.workqueue_activate_work_;
}
inline ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* FtraceEvent::mutable_workqueue_activate_work() {
  ::perfetto::protos::WorkqueueActivateWorkFtraceEvent* _msg = _internal_mutable_workqueue_activate_work();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_activate_work)
  return _msg;
}

// .perfetto.protos.WorkqueueExecuteEndFtraceEvent workqueue_execute_end = 57;
inline bool FtraceEvent::has_workqueue_execute_end() const {
  return event_case() == kWorkqueueExecuteEnd;
}
inline bool FtraceEvent::_internal_has_workqueue_execute_end() const {
  return event_case() == kWorkqueueExecuteEnd;
}
inline void FtraceEvent::set_has_workqueue_execute_end() {
  _impl_._oneof_case_[0] = kWorkqueueExecuteEnd;
}
inline ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* FtraceEvent::release_workqueue_execute_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_execute_end)
  if (event_case() == kWorkqueueExecuteEnd) {
    clear_has_event();
    ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* temp = _impl_.event_.workqueue_execute_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.workqueue_execute_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& FtraceEvent::_internal_workqueue_execute_end() const {
  return event_case() == kWorkqueueExecuteEnd
      ? *_impl_.event_.workqueue_execute_end_
      : reinterpret_cast<::perfetto::protos::WorkqueueExecuteEndFtraceEvent&>(::perfetto::protos::_WorkqueueExecuteEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::WorkqueueExecuteEndFtraceEvent& FtraceEvent::workqueue_execute_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_execute_end)
  return _internal_workqueue_execute_end();
}
inline ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* FtraceEvent::unsafe_arena_release_workqueue_execute_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.workqueue_execute_end)
  if (event_case() == kWorkqueueExecuteEnd) {
    clear_has_event();
    ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* temp = _impl_.event_.workqueue_execute_end_;
    _impl_.event_.workqueue_execute_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_workqueue_execute_end(::perfetto::protos::WorkqueueExecuteEndFtraceEvent* workqueue_execute_end) {
  clear_event();
  if (workqueue_execute_end) {
    set_has_workqueue_execute_end();
    _impl_.event_.workqueue_execute_end_ = workqueue_execute_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.workqueue_execute_end)
}
inline ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* FtraceEvent::_internal_mutable_workqueue_execute_end() {
  if (event_case() != kWorkqueueExecuteEnd) {
    clear_event();
    set_has_workqueue_execute_end();
    _impl_.event_.workqueue_execute_end_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.workqueue_execute_end_;
}
inline ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* FtraceEvent::mutable_workqueue_execute_end() {
  ::perfetto::protos::WorkqueueExecuteEndFtraceEvent* _msg = _internal_mutable_workqueue_execute_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_execute_end)
  return _msg;
}

// .perfetto.protos.WorkqueueExecuteStartFtraceEvent workqueue_execute_start = 58;
inline bool FtraceEvent::has_workqueue_execute_start() const {
  return event_case() == kWorkqueueExecuteStart;
}
inline bool FtraceEvent::_internal_has_workqueue_execute_start() const {
  return event_case() == kWorkqueueExecuteStart;
}
inline void FtraceEvent::set_has_workqueue_execute_start() {
  _impl_._oneof_case_[0] = kWorkqueueExecuteStart;
}
inline ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* FtraceEvent::release_workqueue_execute_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_execute_start)
  if (event_case() == kWorkqueueExecuteStart) {
    clear_has_event();
    ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* temp = _impl_.event_.workqueue_execute_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.workqueue_execute_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& FtraceEvent::_internal_workqueue_execute_start() const {
  return event_case() == kWorkqueueExecuteStart
      ? *_impl_.event_.workqueue_execute_start_
      : reinterpret_cast<::perfetto::protos::WorkqueueExecuteStartFtraceEvent&>(::perfetto::protos::_WorkqueueExecuteStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::WorkqueueExecuteStartFtraceEvent& FtraceEvent::workqueue_execute_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_execute_start)
  return _internal_workqueue_execute_start();
}
inline ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* FtraceEvent::unsafe_arena_release_workqueue_execute_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.workqueue_execute_start)
  if (event_case() == kWorkqueueExecuteStart) {
    clear_has_event();
    ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* temp = _impl_.event_.workqueue_execute_start_;
    _impl_.event_.workqueue_execute_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_workqueue_execute_start(::perfetto::protos::WorkqueueExecuteStartFtraceEvent* workqueue_execute_start) {
  clear_event();
  if (workqueue_execute_start) {
    set_has_workqueue_execute_start();
    _impl_.event_.workqueue_execute_start_ = workqueue_execute_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.workqueue_execute_start)
}
inline ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* FtraceEvent::_internal_mutable_workqueue_execute_start() {
  if (event_case() != kWorkqueueExecuteStart) {
    clear_event();
    set_has_workqueue_execute_start();
    _impl_.event_.workqueue_execute_start_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueExecuteStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.workqueue_execute_start_;
}
inline ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* FtraceEvent::mutable_workqueue_execute_start() {
  ::perfetto::protos::WorkqueueExecuteStartFtraceEvent* _msg = _internal_mutable_workqueue_execute_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_execute_start)
  return _msg;
}

// .perfetto.protos.WorkqueueQueueWorkFtraceEvent workqueue_queue_work = 59;
inline bool FtraceEvent::has_workqueue_queue_work() const {
  return event_case() == kWorkqueueQueueWork;
}
inline bool FtraceEvent::_internal_has_workqueue_queue_work() const {
  return event_case() == kWorkqueueQueueWork;
}
inline void FtraceEvent::set_has_workqueue_queue_work() {
  _impl_._oneof_case_[0] = kWorkqueueQueueWork;
}
inline ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* FtraceEvent::release_workqueue_queue_work() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.workqueue_queue_work)
  if (event_case() == kWorkqueueQueueWork) {
    clear_has_event();
    ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* temp = _impl_.event_.workqueue_queue_work_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.workqueue_queue_work_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& FtraceEvent::_internal_workqueue_queue_work() const {
  return event_case() == kWorkqueueQueueWork
      ? *_impl_.event_.workqueue_queue_work_
      : reinterpret_cast<::perfetto::protos::WorkqueueQueueWorkFtraceEvent&>(::perfetto::protos::_WorkqueueQueueWorkFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::WorkqueueQueueWorkFtraceEvent& FtraceEvent::workqueue_queue_work() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.workqueue_queue_work)
  return _internal_workqueue_queue_work();
}
inline ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* FtraceEvent::unsafe_arena_release_workqueue_queue_work() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.workqueue_queue_work)
  if (event_case() == kWorkqueueQueueWork) {
    clear_has_event();
    ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* temp = _impl_.event_.workqueue_queue_work_;
    _impl_.event_.workqueue_queue_work_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_workqueue_queue_work(::perfetto::protos::WorkqueueQueueWorkFtraceEvent* workqueue_queue_work) {
  clear_event();
  if (workqueue_queue_work) {
    set_has_workqueue_queue_work();
    _impl_.event_.workqueue_queue_work_ = workqueue_queue_work;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.workqueue_queue_work)
}
inline ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* FtraceEvent::_internal_mutable_workqueue_queue_work() {
  if (event_case() != kWorkqueueQueueWork) {
    clear_event();
    set_has_workqueue_queue_work();
    _impl_.event_.workqueue_queue_work_ = CreateMaybeMessage< ::perfetto::protos::WorkqueueQueueWorkFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.workqueue_queue_work_;
}
inline ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* FtraceEvent::mutable_workqueue_queue_work() {
  ::perfetto::protos::WorkqueueQueueWorkFtraceEvent* _msg = _internal_mutable_workqueue_queue_work();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.workqueue_queue_work)
  return _msg;
}

// .perfetto.protos.RegulatorDisableFtraceEvent regulator_disable = 60;
inline bool FtraceEvent::has_regulator_disable() const {
  return event_case() == kRegulatorDisable;
}
inline bool FtraceEvent::_internal_has_regulator_disable() const {
  return event_case() == kRegulatorDisable;
}
inline void FtraceEvent::set_has_regulator_disable() {
  _impl_._oneof_case_[0] = kRegulatorDisable;
}
inline ::perfetto::protos::RegulatorDisableFtraceEvent* FtraceEvent::release_regulator_disable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_disable)
  if (event_case() == kRegulatorDisable) {
    clear_has_event();
    ::perfetto::protos::RegulatorDisableFtraceEvent* temp = _impl_.event_.regulator_disable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorDisableFtraceEvent& FtraceEvent::_internal_regulator_disable() const {
  return event_case() == kRegulatorDisable
      ? *_impl_.event_.regulator_disable_
      : reinterpret_cast<::perfetto::protos::RegulatorDisableFtraceEvent&>(::perfetto::protos::_RegulatorDisableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorDisableFtraceEvent& FtraceEvent::regulator_disable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_disable)
  return _internal_regulator_disable();
}
inline ::perfetto::protos::RegulatorDisableFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_disable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_disable)
  if (event_case() == kRegulatorDisable) {
    clear_has_event();
    ::perfetto::protos::RegulatorDisableFtraceEvent* temp = _impl_.event_.regulator_disable_;
    _impl_.event_.regulator_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_disable(::perfetto::protos::RegulatorDisableFtraceEvent* regulator_disable) {
  clear_event();
  if (regulator_disable) {
    set_has_regulator_disable();
    _impl_.event_.regulator_disable_ = regulator_disable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_disable)
}
inline ::perfetto::protos::RegulatorDisableFtraceEvent* FtraceEvent::_internal_mutable_regulator_disable() {
  if (event_case() != kRegulatorDisable) {
    clear_event();
    set_has_regulator_disable();
    _impl_.event_.regulator_disable_ = CreateMaybeMessage< ::perfetto::protos::RegulatorDisableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_disable_;
}
inline ::perfetto::protos::RegulatorDisableFtraceEvent* FtraceEvent::mutable_regulator_disable() {
  ::perfetto::protos::RegulatorDisableFtraceEvent* _msg = _internal_mutable_regulator_disable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_disable)
  return _msg;
}

// .perfetto.protos.RegulatorDisableCompleteFtraceEvent regulator_disable_complete = 61;
inline bool FtraceEvent::has_regulator_disable_complete() const {
  return event_case() == kRegulatorDisableComplete;
}
inline bool FtraceEvent::_internal_has_regulator_disable_complete() const {
  return event_case() == kRegulatorDisableComplete;
}
inline void FtraceEvent::set_has_regulator_disable_complete() {
  _impl_._oneof_case_[0] = kRegulatorDisableComplete;
}
inline ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* FtraceEvent::release_regulator_disable_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_disable_complete)
  if (event_case() == kRegulatorDisableComplete) {
    clear_has_event();
    ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* temp = _impl_.event_.regulator_disable_complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_disable_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& FtraceEvent::_internal_regulator_disable_complete() const {
  return event_case() == kRegulatorDisableComplete
      ? *_impl_.event_.regulator_disable_complete_
      : reinterpret_cast<::perfetto::protos::RegulatorDisableCompleteFtraceEvent&>(::perfetto::protos::_RegulatorDisableCompleteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorDisableCompleteFtraceEvent& FtraceEvent::regulator_disable_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_disable_complete)
  return _internal_regulator_disable_complete();
}
inline ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_disable_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_disable_complete)
  if (event_case() == kRegulatorDisableComplete) {
    clear_has_event();
    ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* temp = _impl_.event_.regulator_disable_complete_;
    _impl_.event_.regulator_disable_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_disable_complete(::perfetto::protos::RegulatorDisableCompleteFtraceEvent* regulator_disable_complete) {
  clear_event();
  if (regulator_disable_complete) {
    set_has_regulator_disable_complete();
    _impl_.event_.regulator_disable_complete_ = regulator_disable_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_disable_complete)
}
inline ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* FtraceEvent::_internal_mutable_regulator_disable_complete() {
  if (event_case() != kRegulatorDisableComplete) {
    clear_event();
    set_has_regulator_disable_complete();
    _impl_.event_.regulator_disable_complete_ = CreateMaybeMessage< ::perfetto::protos::RegulatorDisableCompleteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_disable_complete_;
}
inline ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* FtraceEvent::mutable_regulator_disable_complete() {
  ::perfetto::protos::RegulatorDisableCompleteFtraceEvent* _msg = _internal_mutable_regulator_disable_complete();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_disable_complete)
  return _msg;
}

// .perfetto.protos.RegulatorEnableFtraceEvent regulator_enable = 62;
inline bool FtraceEvent::has_regulator_enable() const {
  return event_case() == kRegulatorEnable;
}
inline bool FtraceEvent::_internal_has_regulator_enable() const {
  return event_case() == kRegulatorEnable;
}
inline void FtraceEvent::set_has_regulator_enable() {
  _impl_._oneof_case_[0] = kRegulatorEnable;
}
inline ::perfetto::protos::RegulatorEnableFtraceEvent* FtraceEvent::release_regulator_enable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_enable)
  if (event_case() == kRegulatorEnable) {
    clear_has_event();
    ::perfetto::protos::RegulatorEnableFtraceEvent* temp = _impl_.event_.regulator_enable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorEnableFtraceEvent& FtraceEvent::_internal_regulator_enable() const {
  return event_case() == kRegulatorEnable
      ? *_impl_.event_.regulator_enable_
      : reinterpret_cast<::perfetto::protos::RegulatorEnableFtraceEvent&>(::perfetto::protos::_RegulatorEnableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorEnableFtraceEvent& FtraceEvent::regulator_enable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_enable)
  return _internal_regulator_enable();
}
inline ::perfetto::protos::RegulatorEnableFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_enable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_enable)
  if (event_case() == kRegulatorEnable) {
    clear_has_event();
    ::perfetto::protos::RegulatorEnableFtraceEvent* temp = _impl_.event_.regulator_enable_;
    _impl_.event_.regulator_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_enable(::perfetto::protos::RegulatorEnableFtraceEvent* regulator_enable) {
  clear_event();
  if (regulator_enable) {
    set_has_regulator_enable();
    _impl_.event_.regulator_enable_ = regulator_enable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_enable)
}
inline ::perfetto::protos::RegulatorEnableFtraceEvent* FtraceEvent::_internal_mutable_regulator_enable() {
  if (event_case() != kRegulatorEnable) {
    clear_event();
    set_has_regulator_enable();
    _impl_.event_.regulator_enable_ = CreateMaybeMessage< ::perfetto::protos::RegulatorEnableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_enable_;
}
inline ::perfetto::protos::RegulatorEnableFtraceEvent* FtraceEvent::mutable_regulator_enable() {
  ::perfetto::protos::RegulatorEnableFtraceEvent* _msg = _internal_mutable_regulator_enable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_enable)
  return _msg;
}

// .perfetto.protos.RegulatorEnableCompleteFtraceEvent regulator_enable_complete = 63;
inline bool FtraceEvent::has_regulator_enable_complete() const {
  return event_case() == kRegulatorEnableComplete;
}
inline bool FtraceEvent::_internal_has_regulator_enable_complete() const {
  return event_case() == kRegulatorEnableComplete;
}
inline void FtraceEvent::set_has_regulator_enable_complete() {
  _impl_._oneof_case_[0] = kRegulatorEnableComplete;
}
inline ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* FtraceEvent::release_regulator_enable_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_enable_complete)
  if (event_case() == kRegulatorEnableComplete) {
    clear_has_event();
    ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* temp = _impl_.event_.regulator_enable_complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_enable_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& FtraceEvent::_internal_regulator_enable_complete() const {
  return event_case() == kRegulatorEnableComplete
      ? *_impl_.event_.regulator_enable_complete_
      : reinterpret_cast<::perfetto::protos::RegulatorEnableCompleteFtraceEvent&>(::perfetto::protos::_RegulatorEnableCompleteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorEnableCompleteFtraceEvent& FtraceEvent::regulator_enable_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_enable_complete)
  return _internal_regulator_enable_complete();
}
inline ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_enable_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_enable_complete)
  if (event_case() == kRegulatorEnableComplete) {
    clear_has_event();
    ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* temp = _impl_.event_.regulator_enable_complete_;
    _impl_.event_.regulator_enable_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_enable_complete(::perfetto::protos::RegulatorEnableCompleteFtraceEvent* regulator_enable_complete) {
  clear_event();
  if (regulator_enable_complete) {
    set_has_regulator_enable_complete();
    _impl_.event_.regulator_enable_complete_ = regulator_enable_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_enable_complete)
}
inline ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* FtraceEvent::_internal_mutable_regulator_enable_complete() {
  if (event_case() != kRegulatorEnableComplete) {
    clear_event();
    set_has_regulator_enable_complete();
    _impl_.event_.regulator_enable_complete_ = CreateMaybeMessage< ::perfetto::protos::RegulatorEnableCompleteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_enable_complete_;
}
inline ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* FtraceEvent::mutable_regulator_enable_complete() {
  ::perfetto::protos::RegulatorEnableCompleteFtraceEvent* _msg = _internal_mutable_regulator_enable_complete();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_enable_complete)
  return _msg;
}

// .perfetto.protos.RegulatorEnableDelayFtraceEvent regulator_enable_delay = 64;
inline bool FtraceEvent::has_regulator_enable_delay() const {
  return event_case() == kRegulatorEnableDelay;
}
inline bool FtraceEvent::_internal_has_regulator_enable_delay() const {
  return event_case() == kRegulatorEnableDelay;
}
inline void FtraceEvent::set_has_regulator_enable_delay() {
  _impl_._oneof_case_[0] = kRegulatorEnableDelay;
}
inline ::perfetto::protos::RegulatorEnableDelayFtraceEvent* FtraceEvent::release_regulator_enable_delay() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_enable_delay)
  if (event_case() == kRegulatorEnableDelay) {
    clear_has_event();
    ::perfetto::protos::RegulatorEnableDelayFtraceEvent* temp = _impl_.event_.regulator_enable_delay_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_enable_delay_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& FtraceEvent::_internal_regulator_enable_delay() const {
  return event_case() == kRegulatorEnableDelay
      ? *_impl_.event_.regulator_enable_delay_
      : reinterpret_cast<::perfetto::protos::RegulatorEnableDelayFtraceEvent&>(::perfetto::protos::_RegulatorEnableDelayFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorEnableDelayFtraceEvent& FtraceEvent::regulator_enable_delay() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_enable_delay)
  return _internal_regulator_enable_delay();
}
inline ::perfetto::protos::RegulatorEnableDelayFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_enable_delay() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_enable_delay)
  if (event_case() == kRegulatorEnableDelay) {
    clear_has_event();
    ::perfetto::protos::RegulatorEnableDelayFtraceEvent* temp = _impl_.event_.regulator_enable_delay_;
    _impl_.event_.regulator_enable_delay_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_enable_delay(::perfetto::protos::RegulatorEnableDelayFtraceEvent* regulator_enable_delay) {
  clear_event();
  if (regulator_enable_delay) {
    set_has_regulator_enable_delay();
    _impl_.event_.regulator_enable_delay_ = regulator_enable_delay;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_enable_delay)
}
inline ::perfetto::protos::RegulatorEnableDelayFtraceEvent* FtraceEvent::_internal_mutable_regulator_enable_delay() {
  if (event_case() != kRegulatorEnableDelay) {
    clear_event();
    set_has_regulator_enable_delay();
    _impl_.event_.regulator_enable_delay_ = CreateMaybeMessage< ::perfetto::protos::RegulatorEnableDelayFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_enable_delay_;
}
inline ::perfetto::protos::RegulatorEnableDelayFtraceEvent* FtraceEvent::mutable_regulator_enable_delay() {
  ::perfetto::protos::RegulatorEnableDelayFtraceEvent* _msg = _internal_mutable_regulator_enable_delay();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_enable_delay)
  return _msg;
}

// .perfetto.protos.RegulatorSetVoltageFtraceEvent regulator_set_voltage = 65;
inline bool FtraceEvent::has_regulator_set_voltage() const {
  return event_case() == kRegulatorSetVoltage;
}
inline bool FtraceEvent::_internal_has_regulator_set_voltage() const {
  return event_case() == kRegulatorSetVoltage;
}
inline void FtraceEvent::set_has_regulator_set_voltage() {
  _impl_._oneof_case_[0] = kRegulatorSetVoltage;
}
inline ::perfetto::protos::RegulatorSetVoltageFtraceEvent* FtraceEvent::release_regulator_set_voltage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_set_voltage)
  if (event_case() == kRegulatorSetVoltage) {
    clear_has_event();
    ::perfetto::protos::RegulatorSetVoltageFtraceEvent* temp = _impl_.event_.regulator_set_voltage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_set_voltage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& FtraceEvent::_internal_regulator_set_voltage() const {
  return event_case() == kRegulatorSetVoltage
      ? *_impl_.event_.regulator_set_voltage_
      : reinterpret_cast<::perfetto::protos::RegulatorSetVoltageFtraceEvent&>(::perfetto::protos::_RegulatorSetVoltageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorSetVoltageFtraceEvent& FtraceEvent::regulator_set_voltage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_set_voltage)
  return _internal_regulator_set_voltage();
}
inline ::perfetto::protos::RegulatorSetVoltageFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_set_voltage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_set_voltage)
  if (event_case() == kRegulatorSetVoltage) {
    clear_has_event();
    ::perfetto::protos::RegulatorSetVoltageFtraceEvent* temp = _impl_.event_.regulator_set_voltage_;
    _impl_.event_.regulator_set_voltage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_set_voltage(::perfetto::protos::RegulatorSetVoltageFtraceEvent* regulator_set_voltage) {
  clear_event();
  if (regulator_set_voltage) {
    set_has_regulator_set_voltage();
    _impl_.event_.regulator_set_voltage_ = regulator_set_voltage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_set_voltage)
}
inline ::perfetto::protos::RegulatorSetVoltageFtraceEvent* FtraceEvent::_internal_mutable_regulator_set_voltage() {
  if (event_case() != kRegulatorSetVoltage) {
    clear_event();
    set_has_regulator_set_voltage();
    _impl_.event_.regulator_set_voltage_ = CreateMaybeMessage< ::perfetto::protos::RegulatorSetVoltageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_set_voltage_;
}
inline ::perfetto::protos::RegulatorSetVoltageFtraceEvent* FtraceEvent::mutable_regulator_set_voltage() {
  ::perfetto::protos::RegulatorSetVoltageFtraceEvent* _msg = _internal_mutable_regulator_set_voltage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_set_voltage)
  return _msg;
}

// .perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent regulator_set_voltage_complete = 66;
inline bool FtraceEvent::has_regulator_set_voltage_complete() const {
  return event_case() == kRegulatorSetVoltageComplete;
}
inline bool FtraceEvent::_internal_has_regulator_set_voltage_complete() const {
  return event_case() == kRegulatorSetVoltageComplete;
}
inline void FtraceEvent::set_has_regulator_set_voltage_complete() {
  _impl_._oneof_case_[0] = kRegulatorSetVoltageComplete;
}
inline ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::release_regulator_set_voltage_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  if (event_case() == kRegulatorSetVoltageComplete) {
    clear_has_event();
    ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* temp = _impl_.event_.regulator_set_voltage_complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.regulator_set_voltage_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& FtraceEvent::_internal_regulator_set_voltage_complete() const {
  return event_case() == kRegulatorSetVoltageComplete
      ? *_impl_.event_.regulator_set_voltage_complete_
      : reinterpret_cast<::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent&>(::perfetto::protos::_RegulatorSetVoltageCompleteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent& FtraceEvent::regulator_set_voltage_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  return _internal_regulator_set_voltage_complete();
}
inline ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::unsafe_arena_release_regulator_set_voltage_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  if (event_case() == kRegulatorSetVoltageComplete) {
    clear_has_event();
    ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* temp = _impl_.event_.regulator_set_voltage_complete_;
    _impl_.event_.regulator_set_voltage_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_regulator_set_voltage_complete(::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* regulator_set_voltage_complete) {
  clear_event();
  if (regulator_set_voltage_complete) {
    set_has_regulator_set_voltage_complete();
    _impl_.event_.regulator_set_voltage_complete_ = regulator_set_voltage_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
}
inline ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::_internal_mutable_regulator_set_voltage_complete() {
  if (event_case() != kRegulatorSetVoltageComplete) {
    clear_event();
    set_has_regulator_set_voltage_complete();
    _impl_.event_.regulator_set_voltage_complete_ = CreateMaybeMessage< ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.regulator_set_voltage_complete_;
}
inline ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* FtraceEvent::mutable_regulator_set_voltage_complete() {
  ::perfetto::protos::RegulatorSetVoltageCompleteFtraceEvent* _msg = _internal_mutable_regulator_set_voltage_complete();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.regulator_set_voltage_complete)
  return _msg;
}

// .perfetto.protos.CgroupAttachTaskFtraceEvent cgroup_attach_task = 67;
inline bool FtraceEvent::has_cgroup_attach_task() const {
  return event_case() == kCgroupAttachTask;
}
inline bool FtraceEvent::_internal_has_cgroup_attach_task() const {
  return event_case() == kCgroupAttachTask;
}
inline void FtraceEvent::set_has_cgroup_attach_task() {
  _impl_._oneof_case_[0] = kCgroupAttachTask;
}
inline ::perfetto::protos::CgroupAttachTaskFtraceEvent* FtraceEvent::release_cgroup_attach_task() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_attach_task)
  if (event_case() == kCgroupAttachTask) {
    clear_has_event();
    ::perfetto::protos::CgroupAttachTaskFtraceEvent* temp = _impl_.event_.cgroup_attach_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_attach_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupAttachTaskFtraceEvent& FtraceEvent::_internal_cgroup_attach_task() const {
  return event_case() == kCgroupAttachTask
      ? *_impl_.event_.cgroup_attach_task_
      : reinterpret_cast<::perfetto::protos::CgroupAttachTaskFtraceEvent&>(::perfetto::protos::_CgroupAttachTaskFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupAttachTaskFtraceEvent& FtraceEvent::cgroup_attach_task() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_attach_task)
  return _internal_cgroup_attach_task();
}
inline ::perfetto::protos::CgroupAttachTaskFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_attach_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_attach_task)
  if (event_case() == kCgroupAttachTask) {
    clear_has_event();
    ::perfetto::protos::CgroupAttachTaskFtraceEvent* temp = _impl_.event_.cgroup_attach_task_;
    _impl_.event_.cgroup_attach_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_attach_task(::perfetto::protos::CgroupAttachTaskFtraceEvent* cgroup_attach_task) {
  clear_event();
  if (cgroup_attach_task) {
    set_has_cgroup_attach_task();
    _impl_.event_.cgroup_attach_task_ = cgroup_attach_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_attach_task)
}
inline ::perfetto::protos::CgroupAttachTaskFtraceEvent* FtraceEvent::_internal_mutable_cgroup_attach_task() {
  if (event_case() != kCgroupAttachTask) {
    clear_event();
    set_has_cgroup_attach_task();
    _impl_.event_.cgroup_attach_task_ = CreateMaybeMessage< ::perfetto::protos::CgroupAttachTaskFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_attach_task_;
}
inline ::perfetto::protos::CgroupAttachTaskFtraceEvent* FtraceEvent::mutable_cgroup_attach_task() {
  ::perfetto::protos::CgroupAttachTaskFtraceEvent* _msg = _internal_mutable_cgroup_attach_task();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_attach_task)
  return _msg;
}

// .perfetto.protos.CgroupMkdirFtraceEvent cgroup_mkdir = 68;
inline bool FtraceEvent::has_cgroup_mkdir() const {
  return event_case() == kCgroupMkdir;
}
inline bool FtraceEvent::_internal_has_cgroup_mkdir() const {
  return event_case() == kCgroupMkdir;
}
inline void FtraceEvent::set_has_cgroup_mkdir() {
  _impl_._oneof_case_[0] = kCgroupMkdir;
}
inline ::perfetto::protos::CgroupMkdirFtraceEvent* FtraceEvent::release_cgroup_mkdir() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_mkdir)
  if (event_case() == kCgroupMkdir) {
    clear_has_event();
    ::perfetto::protos::CgroupMkdirFtraceEvent* temp = _impl_.event_.cgroup_mkdir_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupMkdirFtraceEvent& FtraceEvent::_internal_cgroup_mkdir() const {
  return event_case() == kCgroupMkdir
      ? *_impl_.event_.cgroup_mkdir_
      : reinterpret_cast<::perfetto::protos::CgroupMkdirFtraceEvent&>(::perfetto::protos::_CgroupMkdirFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupMkdirFtraceEvent& FtraceEvent::cgroup_mkdir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_mkdir)
  return _internal_cgroup_mkdir();
}
inline ::perfetto::protos::CgroupMkdirFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_mkdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_mkdir)
  if (event_case() == kCgroupMkdir) {
    clear_has_event();
    ::perfetto::protos::CgroupMkdirFtraceEvent* temp = _impl_.event_.cgroup_mkdir_;
    _impl_.event_.cgroup_mkdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_mkdir(::perfetto::protos::CgroupMkdirFtraceEvent* cgroup_mkdir) {
  clear_event();
  if (cgroup_mkdir) {
    set_has_cgroup_mkdir();
    _impl_.event_.cgroup_mkdir_ = cgroup_mkdir;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_mkdir)
}
inline ::perfetto::protos::CgroupMkdirFtraceEvent* FtraceEvent::_internal_mutable_cgroup_mkdir() {
  if (event_case() != kCgroupMkdir) {
    clear_event();
    set_has_cgroup_mkdir();
    _impl_.event_.cgroup_mkdir_ = CreateMaybeMessage< ::perfetto::protos::CgroupMkdirFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_mkdir_;
}
inline ::perfetto::protos::CgroupMkdirFtraceEvent* FtraceEvent::mutable_cgroup_mkdir() {
  ::perfetto::protos::CgroupMkdirFtraceEvent* _msg = _internal_mutable_cgroup_mkdir();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_mkdir)
  return _msg;
}

// .perfetto.protos.CgroupRemountFtraceEvent cgroup_remount = 69;
inline bool FtraceEvent::has_cgroup_remount() const {
  return event_case() == kCgroupRemount;
}
inline bool FtraceEvent::_internal_has_cgroup_remount() const {
  return event_case() == kCgroupRemount;
}
inline void FtraceEvent::set_has_cgroup_remount() {
  _impl_._oneof_case_[0] = kCgroupRemount;
}
inline ::perfetto::protos::CgroupRemountFtraceEvent* FtraceEvent::release_cgroup_remount() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_remount)
  if (event_case() == kCgroupRemount) {
    clear_has_event();
    ::perfetto::protos::CgroupRemountFtraceEvent* temp = _impl_.event_.cgroup_remount_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_remount_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupRemountFtraceEvent& FtraceEvent::_internal_cgroup_remount() const {
  return event_case() == kCgroupRemount
      ? *_impl_.event_.cgroup_remount_
      : reinterpret_cast<::perfetto::protos::CgroupRemountFtraceEvent&>(::perfetto::protos::_CgroupRemountFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupRemountFtraceEvent& FtraceEvent::cgroup_remount() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_remount)
  return _internal_cgroup_remount();
}
inline ::perfetto::protos::CgroupRemountFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_remount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_remount)
  if (event_case() == kCgroupRemount) {
    clear_has_event();
    ::perfetto::protos::CgroupRemountFtraceEvent* temp = _impl_.event_.cgroup_remount_;
    _impl_.event_.cgroup_remount_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_remount(::perfetto::protos::CgroupRemountFtraceEvent* cgroup_remount) {
  clear_event();
  if (cgroup_remount) {
    set_has_cgroup_remount();
    _impl_.event_.cgroup_remount_ = cgroup_remount;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_remount)
}
inline ::perfetto::protos::CgroupRemountFtraceEvent* FtraceEvent::_internal_mutable_cgroup_remount() {
  if (event_case() != kCgroupRemount) {
    clear_event();
    set_has_cgroup_remount();
    _impl_.event_.cgroup_remount_ = CreateMaybeMessage< ::perfetto::protos::CgroupRemountFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_remount_;
}
inline ::perfetto::protos::CgroupRemountFtraceEvent* FtraceEvent::mutable_cgroup_remount() {
  ::perfetto::protos::CgroupRemountFtraceEvent* _msg = _internal_mutable_cgroup_remount();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_remount)
  return _msg;
}

// .perfetto.protos.CgroupRmdirFtraceEvent cgroup_rmdir = 70;
inline bool FtraceEvent::has_cgroup_rmdir() const {
  return event_case() == kCgroupRmdir;
}
inline bool FtraceEvent::_internal_has_cgroup_rmdir() const {
  return event_case() == kCgroupRmdir;
}
inline void FtraceEvent::set_has_cgroup_rmdir() {
  _impl_._oneof_case_[0] = kCgroupRmdir;
}
inline ::perfetto::protos::CgroupRmdirFtraceEvent* FtraceEvent::release_cgroup_rmdir() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_rmdir)
  if (event_case() == kCgroupRmdir) {
    clear_has_event();
    ::perfetto::protos::CgroupRmdirFtraceEvent* temp = _impl_.event_.cgroup_rmdir_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_rmdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupRmdirFtraceEvent& FtraceEvent::_internal_cgroup_rmdir() const {
  return event_case() == kCgroupRmdir
      ? *_impl_.event_.cgroup_rmdir_
      : reinterpret_cast<::perfetto::protos::CgroupRmdirFtraceEvent&>(::perfetto::protos::_CgroupRmdirFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupRmdirFtraceEvent& FtraceEvent::cgroup_rmdir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_rmdir)
  return _internal_cgroup_rmdir();
}
inline ::perfetto::protos::CgroupRmdirFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_rmdir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_rmdir)
  if (event_case() == kCgroupRmdir) {
    clear_has_event();
    ::perfetto::protos::CgroupRmdirFtraceEvent* temp = _impl_.event_.cgroup_rmdir_;
    _impl_.event_.cgroup_rmdir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_rmdir(::perfetto::protos::CgroupRmdirFtraceEvent* cgroup_rmdir) {
  clear_event();
  if (cgroup_rmdir) {
    set_has_cgroup_rmdir();
    _impl_.event_.cgroup_rmdir_ = cgroup_rmdir;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_rmdir)
}
inline ::perfetto::protos::CgroupRmdirFtraceEvent* FtraceEvent::_internal_mutable_cgroup_rmdir() {
  if (event_case() != kCgroupRmdir) {
    clear_event();
    set_has_cgroup_rmdir();
    _impl_.event_.cgroup_rmdir_ = CreateMaybeMessage< ::perfetto::protos::CgroupRmdirFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_rmdir_;
}
inline ::perfetto::protos::CgroupRmdirFtraceEvent* FtraceEvent::mutable_cgroup_rmdir() {
  ::perfetto::protos::CgroupRmdirFtraceEvent* _msg = _internal_mutable_cgroup_rmdir();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_rmdir)
  return _msg;
}

// .perfetto.protos.CgroupTransferTasksFtraceEvent cgroup_transfer_tasks = 71;
inline bool FtraceEvent::has_cgroup_transfer_tasks() const {
  return event_case() == kCgroupTransferTasks;
}
inline bool FtraceEvent::_internal_has_cgroup_transfer_tasks() const {
  return event_case() == kCgroupTransferTasks;
}
inline void FtraceEvent::set_has_cgroup_transfer_tasks() {
  _impl_._oneof_case_[0] = kCgroupTransferTasks;
}
inline ::perfetto::protos::CgroupTransferTasksFtraceEvent* FtraceEvent::release_cgroup_transfer_tasks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  if (event_case() == kCgroupTransferTasks) {
    clear_has_event();
    ::perfetto::protos::CgroupTransferTasksFtraceEvent* temp = _impl_.event_.cgroup_transfer_tasks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_transfer_tasks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupTransferTasksFtraceEvent& FtraceEvent::_internal_cgroup_transfer_tasks() const {
  return event_case() == kCgroupTransferTasks
      ? *_impl_.event_.cgroup_transfer_tasks_
      : reinterpret_cast<::perfetto::protos::CgroupTransferTasksFtraceEvent&>(::perfetto::protos::_CgroupTransferTasksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupTransferTasksFtraceEvent& FtraceEvent::cgroup_transfer_tasks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  return _internal_cgroup_transfer_tasks();
}
inline ::perfetto::protos::CgroupTransferTasksFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_transfer_tasks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  if (event_case() == kCgroupTransferTasks) {
    clear_has_event();
    ::perfetto::protos::CgroupTransferTasksFtraceEvent* temp = _impl_.event_.cgroup_transfer_tasks_;
    _impl_.event_.cgroup_transfer_tasks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_transfer_tasks(::perfetto::protos::CgroupTransferTasksFtraceEvent* cgroup_transfer_tasks) {
  clear_event();
  if (cgroup_transfer_tasks) {
    set_has_cgroup_transfer_tasks();
    _impl_.event_.cgroup_transfer_tasks_ = cgroup_transfer_tasks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
}
inline ::perfetto::protos::CgroupTransferTasksFtraceEvent* FtraceEvent::_internal_mutable_cgroup_transfer_tasks() {
  if (event_case() != kCgroupTransferTasks) {
    clear_event();
    set_has_cgroup_transfer_tasks();
    _impl_.event_.cgroup_transfer_tasks_ = CreateMaybeMessage< ::perfetto::protos::CgroupTransferTasksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_transfer_tasks_;
}
inline ::perfetto::protos::CgroupTransferTasksFtraceEvent* FtraceEvent::mutable_cgroup_transfer_tasks() {
  ::perfetto::protos::CgroupTransferTasksFtraceEvent* _msg = _internal_mutable_cgroup_transfer_tasks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_transfer_tasks)
  return _msg;
}

// .perfetto.protos.CgroupDestroyRootFtraceEvent cgroup_destroy_root = 72;
inline bool FtraceEvent::has_cgroup_destroy_root() const {
  return event_case() == kCgroupDestroyRoot;
}
inline bool FtraceEvent::_internal_has_cgroup_destroy_root() const {
  return event_case() == kCgroupDestroyRoot;
}
inline void FtraceEvent::set_has_cgroup_destroy_root() {
  _impl_._oneof_case_[0] = kCgroupDestroyRoot;
}
inline ::perfetto::protos::CgroupDestroyRootFtraceEvent* FtraceEvent::release_cgroup_destroy_root() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  if (event_case() == kCgroupDestroyRoot) {
    clear_has_event();
    ::perfetto::protos::CgroupDestroyRootFtraceEvent* temp = _impl_.event_.cgroup_destroy_root_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_destroy_root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupDestroyRootFtraceEvent& FtraceEvent::_internal_cgroup_destroy_root() const {
  return event_case() == kCgroupDestroyRoot
      ? *_impl_.event_.cgroup_destroy_root_
      : reinterpret_cast<::perfetto::protos::CgroupDestroyRootFtraceEvent&>(::perfetto::protos::_CgroupDestroyRootFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupDestroyRootFtraceEvent& FtraceEvent::cgroup_destroy_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  return _internal_cgroup_destroy_root();
}
inline ::perfetto::protos::CgroupDestroyRootFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_destroy_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  if (event_case() == kCgroupDestroyRoot) {
    clear_has_event();
    ::perfetto::protos::CgroupDestroyRootFtraceEvent* temp = _impl_.event_.cgroup_destroy_root_;
    _impl_.event_.cgroup_destroy_root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_destroy_root(::perfetto::protos::CgroupDestroyRootFtraceEvent* cgroup_destroy_root) {
  clear_event();
  if (cgroup_destroy_root) {
    set_has_cgroup_destroy_root();
    _impl_.event_.cgroup_destroy_root_ = cgroup_destroy_root;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_destroy_root)
}
inline ::perfetto::protos::CgroupDestroyRootFtraceEvent* FtraceEvent::_internal_mutable_cgroup_destroy_root() {
  if (event_case() != kCgroupDestroyRoot) {
    clear_event();
    set_has_cgroup_destroy_root();
    _impl_.event_.cgroup_destroy_root_ = CreateMaybeMessage< ::perfetto::protos::CgroupDestroyRootFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_destroy_root_;
}
inline ::perfetto::protos::CgroupDestroyRootFtraceEvent* FtraceEvent::mutable_cgroup_destroy_root() {
  ::perfetto::protos::CgroupDestroyRootFtraceEvent* _msg = _internal_mutable_cgroup_destroy_root();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_destroy_root)
  return _msg;
}

// .perfetto.protos.CgroupReleaseFtraceEvent cgroup_release = 73;
inline bool FtraceEvent::has_cgroup_release() const {
  return event_case() == kCgroupRelease;
}
inline bool FtraceEvent::_internal_has_cgroup_release() const {
  return event_case() == kCgroupRelease;
}
inline void FtraceEvent::set_has_cgroup_release() {
  _impl_._oneof_case_[0] = kCgroupRelease;
}
inline ::perfetto::protos::CgroupReleaseFtraceEvent* FtraceEvent::release_cgroup_release() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_release)
  if (event_case() == kCgroupRelease) {
    clear_has_event();
    ::perfetto::protos::CgroupReleaseFtraceEvent* temp = _impl_.event_.cgroup_release_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_release_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupReleaseFtraceEvent& FtraceEvent::_internal_cgroup_release() const {
  return event_case() == kCgroupRelease
      ? *_impl_.event_.cgroup_release_
      : reinterpret_cast<::perfetto::protos::CgroupReleaseFtraceEvent&>(::perfetto::protos::_CgroupReleaseFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupReleaseFtraceEvent& FtraceEvent::cgroup_release() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_release)
  return _internal_cgroup_release();
}
inline ::perfetto::protos::CgroupReleaseFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_release() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_release)
  if (event_case() == kCgroupRelease) {
    clear_has_event();
    ::perfetto::protos::CgroupReleaseFtraceEvent* temp = _impl_.event_.cgroup_release_;
    _impl_.event_.cgroup_release_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_release(::perfetto::protos::CgroupReleaseFtraceEvent* cgroup_release) {
  clear_event();
  if (cgroup_release) {
    set_has_cgroup_release();
    _impl_.event_.cgroup_release_ = cgroup_release;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_release)
}
inline ::perfetto::protos::CgroupReleaseFtraceEvent* FtraceEvent::_internal_mutable_cgroup_release() {
  if (event_case() != kCgroupRelease) {
    clear_event();
    set_has_cgroup_release();
    _impl_.event_.cgroup_release_ = CreateMaybeMessage< ::perfetto::protos::CgroupReleaseFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_release_;
}
inline ::perfetto::protos::CgroupReleaseFtraceEvent* FtraceEvent::mutable_cgroup_release() {
  ::perfetto::protos::CgroupReleaseFtraceEvent* _msg = _internal_mutable_cgroup_release();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_release)
  return _msg;
}

// .perfetto.protos.CgroupRenameFtraceEvent cgroup_rename = 74;
inline bool FtraceEvent::has_cgroup_rename() const {
  return event_case() == kCgroupRename;
}
inline bool FtraceEvent::_internal_has_cgroup_rename() const {
  return event_case() == kCgroupRename;
}
inline void FtraceEvent::set_has_cgroup_rename() {
  _impl_._oneof_case_[0] = kCgroupRename;
}
inline ::perfetto::protos::CgroupRenameFtraceEvent* FtraceEvent::release_cgroup_rename() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_rename)
  if (event_case() == kCgroupRename) {
    clear_has_event();
    ::perfetto::protos::CgroupRenameFtraceEvent* temp = _impl_.event_.cgroup_rename_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupRenameFtraceEvent& FtraceEvent::_internal_cgroup_rename() const {
  return event_case() == kCgroupRename
      ? *_impl_.event_.cgroup_rename_
      : reinterpret_cast<::perfetto::protos::CgroupRenameFtraceEvent&>(::perfetto::protos::_CgroupRenameFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupRenameFtraceEvent& FtraceEvent::cgroup_rename() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_rename)
  return _internal_cgroup_rename();
}
inline ::perfetto::protos::CgroupRenameFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_rename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_rename)
  if (event_case() == kCgroupRename) {
    clear_has_event();
    ::perfetto::protos::CgroupRenameFtraceEvent* temp = _impl_.event_.cgroup_rename_;
    _impl_.event_.cgroup_rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_rename(::perfetto::protos::CgroupRenameFtraceEvent* cgroup_rename) {
  clear_event();
  if (cgroup_rename) {
    set_has_cgroup_rename();
    _impl_.event_.cgroup_rename_ = cgroup_rename;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_rename)
}
inline ::perfetto::protos::CgroupRenameFtraceEvent* FtraceEvent::_internal_mutable_cgroup_rename() {
  if (event_case() != kCgroupRename) {
    clear_event();
    set_has_cgroup_rename();
    _impl_.event_.cgroup_rename_ = CreateMaybeMessage< ::perfetto::protos::CgroupRenameFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_rename_;
}
inline ::perfetto::protos::CgroupRenameFtraceEvent* FtraceEvent::mutable_cgroup_rename() {
  ::perfetto::protos::CgroupRenameFtraceEvent* _msg = _internal_mutable_cgroup_rename();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_rename)
  return _msg;
}

// .perfetto.protos.CgroupSetupRootFtraceEvent cgroup_setup_root = 75;
inline bool FtraceEvent::has_cgroup_setup_root() const {
  return event_case() == kCgroupSetupRoot;
}
inline bool FtraceEvent::_internal_has_cgroup_setup_root() const {
  return event_case() == kCgroupSetupRoot;
}
inline void FtraceEvent::set_has_cgroup_setup_root() {
  _impl_._oneof_case_[0] = kCgroupSetupRoot;
}
inline ::perfetto::protos::CgroupSetupRootFtraceEvent* FtraceEvent::release_cgroup_setup_root() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cgroup_setup_root)
  if (event_case() == kCgroupSetupRoot) {
    clear_has_event();
    ::perfetto::protos::CgroupSetupRootFtraceEvent* temp = _impl_.event_.cgroup_setup_root_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cgroup_setup_root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CgroupSetupRootFtraceEvent& FtraceEvent::_internal_cgroup_setup_root() const {
  return event_case() == kCgroupSetupRoot
      ? *_impl_.event_.cgroup_setup_root_
      : reinterpret_cast<::perfetto::protos::CgroupSetupRootFtraceEvent&>(::perfetto::protos::_CgroupSetupRootFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CgroupSetupRootFtraceEvent& FtraceEvent::cgroup_setup_root() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cgroup_setup_root)
  return _internal_cgroup_setup_root();
}
inline ::perfetto::protos::CgroupSetupRootFtraceEvent* FtraceEvent::unsafe_arena_release_cgroup_setup_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cgroup_setup_root)
  if (event_case() == kCgroupSetupRoot) {
    clear_has_event();
    ::perfetto::protos::CgroupSetupRootFtraceEvent* temp = _impl_.event_.cgroup_setup_root_;
    _impl_.event_.cgroup_setup_root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cgroup_setup_root(::perfetto::protos::CgroupSetupRootFtraceEvent* cgroup_setup_root) {
  clear_event();
  if (cgroup_setup_root) {
    set_has_cgroup_setup_root();
    _impl_.event_.cgroup_setup_root_ = cgroup_setup_root;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cgroup_setup_root)
}
inline ::perfetto::protos::CgroupSetupRootFtraceEvent* FtraceEvent::_internal_mutable_cgroup_setup_root() {
  if (event_case() != kCgroupSetupRoot) {
    clear_event();
    set_has_cgroup_setup_root();
    _impl_.event_.cgroup_setup_root_ = CreateMaybeMessage< ::perfetto::protos::CgroupSetupRootFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cgroup_setup_root_;
}
inline ::perfetto::protos::CgroupSetupRootFtraceEvent* FtraceEvent::mutable_cgroup_setup_root() {
  ::perfetto::protos::CgroupSetupRootFtraceEvent* _msg = _internal_mutable_cgroup_setup_root();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cgroup_setup_root)
  return _msg;
}

// .perfetto.protos.MdpCmdKickoffFtraceEvent mdp_cmd_kickoff = 76;
inline bool FtraceEvent::has_mdp_cmd_kickoff() const {
  return event_case() == kMdpCmdKickoff;
}
inline bool FtraceEvent::_internal_has_mdp_cmd_kickoff() const {
  return event_case() == kMdpCmdKickoff;
}
inline void FtraceEvent::set_has_mdp_cmd_kickoff() {
  _impl_._oneof_case_[0] = kMdpCmdKickoff;
}
inline ::perfetto::protos::MdpCmdKickoffFtraceEvent* FtraceEvent::release_mdp_cmd_kickoff() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  if (event_case() == kMdpCmdKickoff) {
    clear_has_event();
    ::perfetto::protos::MdpCmdKickoffFtraceEvent* temp = _impl_.event_.mdp_cmd_kickoff_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_cmd_kickoff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdKickoffFtraceEvent& FtraceEvent::_internal_mdp_cmd_kickoff() const {
  return event_case() == kMdpCmdKickoff
      ? *_impl_.event_.mdp_cmd_kickoff_
      : reinterpret_cast<::perfetto::protos::MdpCmdKickoffFtraceEvent&>(::perfetto::protos::_MdpCmdKickoffFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCmdKickoffFtraceEvent& FtraceEvent::mdp_cmd_kickoff() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  return _internal_mdp_cmd_kickoff();
}
inline ::perfetto::protos::MdpCmdKickoffFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_cmd_kickoff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  if (event_case() == kMdpCmdKickoff) {
    clear_has_event();
    ::perfetto::protos::MdpCmdKickoffFtraceEvent* temp = _impl_.event_.mdp_cmd_kickoff_;
    _impl_.event_.mdp_cmd_kickoff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_cmd_kickoff(::perfetto::protos::MdpCmdKickoffFtraceEvent* mdp_cmd_kickoff) {
  clear_event();
  if (mdp_cmd_kickoff) {
    set_has_mdp_cmd_kickoff();
    _impl_.event_.mdp_cmd_kickoff_ = mdp_cmd_kickoff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
}
inline ::perfetto::protos::MdpCmdKickoffFtraceEvent* FtraceEvent::_internal_mutable_mdp_cmd_kickoff() {
  if (event_case() != kMdpCmdKickoff) {
    clear_event();
    set_has_mdp_cmd_kickoff();
    _impl_.event_.mdp_cmd_kickoff_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdKickoffFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_cmd_kickoff_;
}
inline ::perfetto::protos::MdpCmdKickoffFtraceEvent* FtraceEvent::mutable_mdp_cmd_kickoff() {
  ::perfetto::protos::MdpCmdKickoffFtraceEvent* _msg = _internal_mutable_mdp_cmd_kickoff();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_kickoff)
  return _msg;
}

// .perfetto.protos.MdpCommitFtraceEvent mdp_commit = 77;
inline bool FtraceEvent::has_mdp_commit() const {
  return event_case() == kMdpCommit;
}
inline bool FtraceEvent::_internal_has_mdp_commit() const {
  return event_case() == kMdpCommit;
}
inline void FtraceEvent::set_has_mdp_commit() {
  _impl_._oneof_case_[0] = kMdpCommit;
}
inline ::perfetto::protos::MdpCommitFtraceEvent* FtraceEvent::release_mdp_commit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_commit)
  if (event_case() == kMdpCommit) {
    clear_has_event();
    ::perfetto::protos::MdpCommitFtraceEvent* temp = _impl_.event_.mdp_commit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCommitFtraceEvent& FtraceEvent::_internal_mdp_commit() const {
  return event_case() == kMdpCommit
      ? *_impl_.event_.mdp_commit_
      : reinterpret_cast<::perfetto::protos::MdpCommitFtraceEvent&>(::perfetto::protos::_MdpCommitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCommitFtraceEvent& FtraceEvent::mdp_commit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_commit)
  return _internal_mdp_commit();
}
inline ::perfetto::protos::MdpCommitFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_commit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_commit)
  if (event_case() == kMdpCommit) {
    clear_has_event();
    ::perfetto::protos::MdpCommitFtraceEvent* temp = _impl_.event_.mdp_commit_;
    _impl_.event_.mdp_commit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_commit(::perfetto::protos::MdpCommitFtraceEvent* mdp_commit) {
  clear_event();
  if (mdp_commit) {
    set_has_mdp_commit();
    _impl_.event_.mdp_commit_ = mdp_commit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_commit)
}
inline ::perfetto::protos::MdpCommitFtraceEvent* FtraceEvent::_internal_mutable_mdp_commit() {
  if (event_case() != kMdpCommit) {
    clear_event();
    set_has_mdp_commit();
    _impl_.event_.mdp_commit_ = CreateMaybeMessage< ::perfetto::protos::MdpCommitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_commit_;
}
inline ::perfetto::protos::MdpCommitFtraceEvent* FtraceEvent::mutable_mdp_commit() {
  ::perfetto::protos::MdpCommitFtraceEvent* _msg = _internal_mutable_mdp_commit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_commit)
  return _msg;
}

// .perfetto.protos.MdpPerfSetOtFtraceEvent mdp_perf_set_ot = 78;
inline bool FtraceEvent::has_mdp_perf_set_ot() const {
  return event_case() == kMdpPerfSetOt;
}
inline bool FtraceEvent::_internal_has_mdp_perf_set_ot() const {
  return event_case() == kMdpPerfSetOt;
}
inline void FtraceEvent::set_has_mdp_perf_set_ot() {
  _impl_._oneof_case_[0] = kMdpPerfSetOt;
}
inline ::perfetto::protos::MdpPerfSetOtFtraceEvent* FtraceEvent::release_mdp_perf_set_ot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  if (event_case() == kMdpPerfSetOt) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetOtFtraceEvent* temp = _impl_.event_.mdp_perf_set_ot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_perf_set_ot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetOtFtraceEvent& FtraceEvent::_internal_mdp_perf_set_ot() const {
  return event_case() == kMdpPerfSetOt
      ? *_impl_.event_.mdp_perf_set_ot_
      : reinterpret_cast<::perfetto::protos::MdpPerfSetOtFtraceEvent&>(::perfetto::protos::_MdpPerfSetOtFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpPerfSetOtFtraceEvent& FtraceEvent::mdp_perf_set_ot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  return _internal_mdp_perf_set_ot();
}
inline ::perfetto::protos::MdpPerfSetOtFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_perf_set_ot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  if (event_case() == kMdpPerfSetOt) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetOtFtraceEvent* temp = _impl_.event_.mdp_perf_set_ot_;
    _impl_.event_.mdp_perf_set_ot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_perf_set_ot(::perfetto::protos::MdpPerfSetOtFtraceEvent* mdp_perf_set_ot) {
  clear_event();
  if (mdp_perf_set_ot) {
    set_has_mdp_perf_set_ot();
    _impl_.event_.mdp_perf_set_ot_ = mdp_perf_set_ot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
}
inline ::perfetto::protos::MdpPerfSetOtFtraceEvent* FtraceEvent::_internal_mutable_mdp_perf_set_ot() {
  if (event_case() != kMdpPerfSetOt) {
    clear_event();
    set_has_mdp_perf_set_ot();
    _impl_.event_.mdp_perf_set_ot_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetOtFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_perf_set_ot_;
}
inline ::perfetto::protos::MdpPerfSetOtFtraceEvent* FtraceEvent::mutable_mdp_perf_set_ot() {
  ::perfetto::protos::MdpPerfSetOtFtraceEvent* _msg = _internal_mutable_mdp_perf_set_ot();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_ot)
  return _msg;
}

// .perfetto.protos.MdpSsppChangeFtraceEvent mdp_sspp_change = 79;
inline bool FtraceEvent::has_mdp_sspp_change() const {
  return event_case() == kMdpSsppChange;
}
inline bool FtraceEvent::_internal_has_mdp_sspp_change() const {
  return event_case() == kMdpSsppChange;
}
inline void FtraceEvent::set_has_mdp_sspp_change() {
  _impl_._oneof_case_[0] = kMdpSsppChange;
}
inline ::perfetto::protos::MdpSsppChangeFtraceEvent* FtraceEvent::release_mdp_sspp_change() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_sspp_change)
  if (event_case() == kMdpSsppChange) {
    clear_has_event();
    ::perfetto::protos::MdpSsppChangeFtraceEvent* temp = _impl_.event_.mdp_sspp_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_sspp_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpSsppChangeFtraceEvent& FtraceEvent::_internal_mdp_sspp_change() const {
  return event_case() == kMdpSsppChange
      ? *_impl_.event_.mdp_sspp_change_
      : reinterpret_cast<::perfetto::protos::MdpSsppChangeFtraceEvent&>(::perfetto::protos::_MdpSsppChangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpSsppChangeFtraceEvent& FtraceEvent::mdp_sspp_change() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_sspp_change)
  return _internal_mdp_sspp_change();
}
inline ::perfetto::protos::MdpSsppChangeFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_sspp_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_sspp_change)
  if (event_case() == kMdpSsppChange) {
    clear_has_event();
    ::perfetto::protos::MdpSsppChangeFtraceEvent* temp = _impl_.event_.mdp_sspp_change_;
    _impl_.event_.mdp_sspp_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_sspp_change(::perfetto::protos::MdpSsppChangeFtraceEvent* mdp_sspp_change) {
  clear_event();
  if (mdp_sspp_change) {
    set_has_mdp_sspp_change();
    _impl_.event_.mdp_sspp_change_ = mdp_sspp_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_sspp_change)
}
inline ::perfetto::protos::MdpSsppChangeFtraceEvent* FtraceEvent::_internal_mutable_mdp_sspp_change() {
  if (event_case() != kMdpSsppChange) {
    clear_event();
    set_has_mdp_sspp_change();
    _impl_.event_.mdp_sspp_change_ = CreateMaybeMessage< ::perfetto::protos::MdpSsppChangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_sspp_change_;
}
inline ::perfetto::protos::MdpSsppChangeFtraceEvent* FtraceEvent::mutable_mdp_sspp_change() {
  ::perfetto::protos::MdpSsppChangeFtraceEvent* _msg = _internal_mutable_mdp_sspp_change();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_sspp_change)
  return _msg;
}

// .perfetto.protos.TracingMarkWriteFtraceEvent tracing_mark_write = 80;
inline bool FtraceEvent::has_tracing_mark_write() const {
  return event_case() == kTracingMarkWrite;
}
inline bool FtraceEvent::_internal_has_tracing_mark_write() const {
  return event_case() == kTracingMarkWrite;
}
inline void FtraceEvent::set_has_tracing_mark_write() {
  _impl_._oneof_case_[0] = kTracingMarkWrite;
}
inline ::perfetto::protos::TracingMarkWriteFtraceEvent* FtraceEvent::release_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.tracing_mark_write)
  if (event_case() == kTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::TracingMarkWriteFtraceEvent* temp = _impl_.event_.tracing_mark_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TracingMarkWriteFtraceEvent& FtraceEvent::_internal_tracing_mark_write() const {
  return event_case() == kTracingMarkWrite
      ? *_impl_.event_.tracing_mark_write_
      : reinterpret_cast<::perfetto::protos::TracingMarkWriteFtraceEvent&>(::perfetto::protos::_TracingMarkWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TracingMarkWriteFtraceEvent& FtraceEvent::tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.tracing_mark_write)
  return _internal_tracing_mark_write();
}
inline ::perfetto::protos::TracingMarkWriteFtraceEvent* FtraceEvent::unsafe_arena_release_tracing_mark_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.tracing_mark_write)
  if (event_case() == kTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::TracingMarkWriteFtraceEvent* temp = _impl_.event_.tracing_mark_write_;
    _impl_.event_.tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_tracing_mark_write(::perfetto::protos::TracingMarkWriteFtraceEvent* tracing_mark_write) {
  clear_event();
  if (tracing_mark_write) {
    set_has_tracing_mark_write();
    _impl_.event_.tracing_mark_write_ = tracing_mark_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.tracing_mark_write)
}
inline ::perfetto::protos::TracingMarkWriteFtraceEvent* FtraceEvent::_internal_mutable_tracing_mark_write() {
  if (event_case() != kTracingMarkWrite) {
    clear_event();
    set_has_tracing_mark_write();
    _impl_.event_.tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::TracingMarkWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.tracing_mark_write_;
}
inline ::perfetto::protos::TracingMarkWriteFtraceEvent* FtraceEvent::mutable_tracing_mark_write() {
  ::perfetto::protos::TracingMarkWriteFtraceEvent* _msg = _internal_mutable_tracing_mark_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.tracing_mark_write)
  return _msg;
}

// .perfetto.protos.MdpCmdPingpongDoneFtraceEvent mdp_cmd_pingpong_done = 81;
inline bool FtraceEvent::has_mdp_cmd_pingpong_done() const {
  return event_case() == kMdpCmdPingpongDone;
}
inline bool FtraceEvent::_internal_has_mdp_cmd_pingpong_done() const {
  return event_case() == kMdpCmdPingpongDone;
}
inline void FtraceEvent::set_has_mdp_cmd_pingpong_done() {
  _impl_._oneof_case_[0] = kMdpCmdPingpongDone;
}
inline ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* FtraceEvent::release_mdp_cmd_pingpong_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  if (event_case() == kMdpCmdPingpongDone) {
    clear_has_event();
    ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* temp = _impl_.event_.mdp_cmd_pingpong_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_cmd_pingpong_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& FtraceEvent::_internal_mdp_cmd_pingpong_done() const {
  return event_case() == kMdpCmdPingpongDone
      ? *_impl_.event_.mdp_cmd_pingpong_done_
      : reinterpret_cast<::perfetto::protos::MdpCmdPingpongDoneFtraceEvent&>(::perfetto::protos::_MdpCmdPingpongDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent& FtraceEvent::mdp_cmd_pingpong_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  return _internal_mdp_cmd_pingpong_done();
}
inline ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_cmd_pingpong_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  if (event_case() == kMdpCmdPingpongDone) {
    clear_has_event();
    ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* temp = _impl_.event_.mdp_cmd_pingpong_done_;
    _impl_.event_.mdp_cmd_pingpong_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_cmd_pingpong_done(::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* mdp_cmd_pingpong_done) {
  clear_event();
  if (mdp_cmd_pingpong_done) {
    set_has_mdp_cmd_pingpong_done();
    _impl_.event_.mdp_cmd_pingpong_done_ = mdp_cmd_pingpong_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
}
inline ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* FtraceEvent::_internal_mutable_mdp_cmd_pingpong_done() {
  if (event_case() != kMdpCmdPingpongDone) {
    clear_event();
    set_has_mdp_cmd_pingpong_done();
    _impl_.event_.mdp_cmd_pingpong_done_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_cmd_pingpong_done_;
}
inline ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* FtraceEvent::mutable_mdp_cmd_pingpong_done() {
  ::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* _msg = _internal_mutable_mdp_cmd_pingpong_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done)
  return _msg;
}

// .perfetto.protos.MdpCompareBwFtraceEvent mdp_compare_bw = 82;
inline bool FtraceEvent::has_mdp_compare_bw() const {
  return event_case() == kMdpCompareBw;
}
inline bool FtraceEvent::_internal_has_mdp_compare_bw() const {
  return event_case() == kMdpCompareBw;
}
inline void FtraceEvent::set_has_mdp_compare_bw() {
  _impl_._oneof_case_[0] = kMdpCompareBw;
}
inline ::perfetto::protos::MdpCompareBwFtraceEvent* FtraceEvent::release_mdp_compare_bw() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_compare_bw)
  if (event_case() == kMdpCompareBw) {
    clear_has_event();
    ::perfetto::protos::MdpCompareBwFtraceEvent* temp = _impl_.event_.mdp_compare_bw_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_compare_bw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCompareBwFtraceEvent& FtraceEvent::_internal_mdp_compare_bw() const {
  return event_case() == kMdpCompareBw
      ? *_impl_.event_.mdp_compare_bw_
      : reinterpret_cast<::perfetto::protos::MdpCompareBwFtraceEvent&>(::perfetto::protos::_MdpCompareBwFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCompareBwFtraceEvent& FtraceEvent::mdp_compare_bw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_compare_bw)
  return _internal_mdp_compare_bw();
}
inline ::perfetto::protos::MdpCompareBwFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_compare_bw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_compare_bw)
  if (event_case() == kMdpCompareBw) {
    clear_has_event();
    ::perfetto::protos::MdpCompareBwFtraceEvent* temp = _impl_.event_.mdp_compare_bw_;
    _impl_.event_.mdp_compare_bw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_compare_bw(::perfetto::protos::MdpCompareBwFtraceEvent* mdp_compare_bw) {
  clear_event();
  if (mdp_compare_bw) {
    set_has_mdp_compare_bw();
    _impl_.event_.mdp_compare_bw_ = mdp_compare_bw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_compare_bw)
}
inline ::perfetto::protos::MdpCompareBwFtraceEvent* FtraceEvent::_internal_mutable_mdp_compare_bw() {
  if (event_case() != kMdpCompareBw) {
    clear_event();
    set_has_mdp_compare_bw();
    _impl_.event_.mdp_compare_bw_ = CreateMaybeMessage< ::perfetto::protos::MdpCompareBwFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_compare_bw_;
}
inline ::perfetto::protos::MdpCompareBwFtraceEvent* FtraceEvent::mutable_mdp_compare_bw() {
  ::perfetto::protos::MdpCompareBwFtraceEvent* _msg = _internal_mutable_mdp_compare_bw();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_compare_bw)
  return _msg;
}

// .perfetto.protos.MdpPerfSetPanicLutsFtraceEvent mdp_perf_set_panic_luts = 83;
inline bool FtraceEvent::has_mdp_perf_set_panic_luts() const {
  return event_case() == kMdpPerfSetPanicLuts;
}
inline bool FtraceEvent::_internal_has_mdp_perf_set_panic_luts() const {
  return event_case() == kMdpPerfSetPanicLuts;
}
inline void FtraceEvent::set_has_mdp_perf_set_panic_luts() {
  _impl_._oneof_case_[0] = kMdpPerfSetPanicLuts;
}
inline ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::release_mdp_perf_set_panic_luts() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  if (event_case() == kMdpPerfSetPanicLuts) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* temp = _impl_.event_.mdp_perf_set_panic_luts_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_perf_set_panic_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& FtraceEvent::_internal_mdp_perf_set_panic_luts() const {
  return event_case() == kMdpPerfSetPanicLuts
      ? *_impl_.event_.mdp_perf_set_panic_luts_
      : reinterpret_cast<::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent&>(::perfetto::protos::_MdpPerfSetPanicLutsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent& FtraceEvent::mdp_perf_set_panic_luts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  return _internal_mdp_perf_set_panic_luts();
}
inline ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_perf_set_panic_luts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  if (event_case() == kMdpPerfSetPanicLuts) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* temp = _impl_.event_.mdp_perf_set_panic_luts_;
    _impl_.event_.mdp_perf_set_panic_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_perf_set_panic_luts(::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* mdp_perf_set_panic_luts) {
  clear_event();
  if (mdp_perf_set_panic_luts) {
    set_has_mdp_perf_set_panic_luts();
    _impl_.event_.mdp_perf_set_panic_luts_ = mdp_perf_set_panic_luts;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
}
inline ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::_internal_mutable_mdp_perf_set_panic_luts() {
  if (event_case() != kMdpPerfSetPanicLuts) {
    clear_event();
    set_has_mdp_perf_set_panic_luts();
    _impl_.event_.mdp_perf_set_panic_luts_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_perf_set_panic_luts_;
}
inline ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* FtraceEvent::mutable_mdp_perf_set_panic_luts() {
  ::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* _msg = _internal_mutable_mdp_perf_set_panic_luts();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts)
  return _msg;
}

// .perfetto.protos.MdpSsppSetFtraceEvent mdp_sspp_set = 84;
inline bool FtraceEvent::has_mdp_sspp_set() const {
  return event_case() == kMdpSsppSet;
}
inline bool FtraceEvent::_internal_has_mdp_sspp_set() const {
  return event_case() == kMdpSsppSet;
}
inline void FtraceEvent::set_has_mdp_sspp_set() {
  _impl_._oneof_case_[0] = kMdpSsppSet;
}
inline ::perfetto::protos::MdpSsppSetFtraceEvent* FtraceEvent::release_mdp_sspp_set() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_sspp_set)
  if (event_case() == kMdpSsppSet) {
    clear_has_event();
    ::perfetto::protos::MdpSsppSetFtraceEvent* temp = _impl_.event_.mdp_sspp_set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_sspp_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpSsppSetFtraceEvent& FtraceEvent::_internal_mdp_sspp_set() const {
  return event_case() == kMdpSsppSet
      ? *_impl_.event_.mdp_sspp_set_
      : reinterpret_cast<::perfetto::protos::MdpSsppSetFtraceEvent&>(::perfetto::protos::_MdpSsppSetFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpSsppSetFtraceEvent& FtraceEvent::mdp_sspp_set() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_sspp_set)
  return _internal_mdp_sspp_set();
}
inline ::perfetto::protos::MdpSsppSetFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_sspp_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_sspp_set)
  if (event_case() == kMdpSsppSet) {
    clear_has_event();
    ::perfetto::protos::MdpSsppSetFtraceEvent* temp = _impl_.event_.mdp_sspp_set_;
    _impl_.event_.mdp_sspp_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_sspp_set(::perfetto::protos::MdpSsppSetFtraceEvent* mdp_sspp_set) {
  clear_event();
  if (mdp_sspp_set) {
    set_has_mdp_sspp_set();
    _impl_.event_.mdp_sspp_set_ = mdp_sspp_set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_sspp_set)
}
inline ::perfetto::protos::MdpSsppSetFtraceEvent* FtraceEvent::_internal_mutable_mdp_sspp_set() {
  if (event_case() != kMdpSsppSet) {
    clear_event();
    set_has_mdp_sspp_set();
    _impl_.event_.mdp_sspp_set_ = CreateMaybeMessage< ::perfetto::protos::MdpSsppSetFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_sspp_set_;
}
inline ::perfetto::protos::MdpSsppSetFtraceEvent* FtraceEvent::mutable_mdp_sspp_set() {
  ::perfetto::protos::MdpSsppSetFtraceEvent* _msg = _internal_mutable_mdp_sspp_set();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_sspp_set)
  return _msg;
}

// .perfetto.protos.MdpCmdReadptrDoneFtraceEvent mdp_cmd_readptr_done = 85;
inline bool FtraceEvent::has_mdp_cmd_readptr_done() const {
  return event_case() == kMdpCmdReadptrDone;
}
inline bool FtraceEvent::_internal_has_mdp_cmd_readptr_done() const {
  return event_case() == kMdpCmdReadptrDone;
}
inline void FtraceEvent::set_has_mdp_cmd_readptr_done() {
  _impl_._oneof_case_[0] = kMdpCmdReadptrDone;
}
inline ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* FtraceEvent::release_mdp_cmd_readptr_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  if (event_case() == kMdpCmdReadptrDone) {
    clear_has_event();
    ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* temp = _impl_.event_.mdp_cmd_readptr_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_cmd_readptr_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& FtraceEvent::_internal_mdp_cmd_readptr_done() const {
  return event_case() == kMdpCmdReadptrDone
      ? *_impl_.event_.mdp_cmd_readptr_done_
      : reinterpret_cast<::perfetto::protos::MdpCmdReadptrDoneFtraceEvent&>(::perfetto::protos::_MdpCmdReadptrDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent& FtraceEvent::mdp_cmd_readptr_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  return _internal_mdp_cmd_readptr_done();
}
inline ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_cmd_readptr_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  if (event_case() == kMdpCmdReadptrDone) {
    clear_has_event();
    ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* temp = _impl_.event_.mdp_cmd_readptr_done_;
    _impl_.event_.mdp_cmd_readptr_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_cmd_readptr_done(::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* mdp_cmd_readptr_done) {
  clear_event();
  if (mdp_cmd_readptr_done) {
    set_has_mdp_cmd_readptr_done();
    _impl_.event_.mdp_cmd_readptr_done_ = mdp_cmd_readptr_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
}
inline ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* FtraceEvent::_internal_mutable_mdp_cmd_readptr_done() {
  if (event_case() != kMdpCmdReadptrDone) {
    clear_event();
    set_has_mdp_cmd_readptr_done();
    _impl_.event_.mdp_cmd_readptr_done_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_cmd_readptr_done_;
}
inline ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* FtraceEvent::mutable_mdp_cmd_readptr_done() {
  ::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* _msg = _internal_mutable_mdp_cmd_readptr_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_readptr_done)
  return _msg;
}

// .perfetto.protos.MdpMisrCrcFtraceEvent mdp_misr_crc = 86;
inline bool FtraceEvent::has_mdp_misr_crc() const {
  return event_case() == kMdpMisrCrc;
}
inline bool FtraceEvent::_internal_has_mdp_misr_crc() const {
  return event_case() == kMdpMisrCrc;
}
inline void FtraceEvent::set_has_mdp_misr_crc() {
  _impl_._oneof_case_[0] = kMdpMisrCrc;
}
inline ::perfetto::protos::MdpMisrCrcFtraceEvent* FtraceEvent::release_mdp_misr_crc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_misr_crc)
  if (event_case() == kMdpMisrCrc) {
    clear_has_event();
    ::perfetto::protos::MdpMisrCrcFtraceEvent* temp = _impl_.event_.mdp_misr_crc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_misr_crc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpMisrCrcFtraceEvent& FtraceEvent::_internal_mdp_misr_crc() const {
  return event_case() == kMdpMisrCrc
      ? *_impl_.event_.mdp_misr_crc_
      : reinterpret_cast<::perfetto::protos::MdpMisrCrcFtraceEvent&>(::perfetto::protos::_MdpMisrCrcFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpMisrCrcFtraceEvent& FtraceEvent::mdp_misr_crc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_misr_crc)
  return _internal_mdp_misr_crc();
}
inline ::perfetto::protos::MdpMisrCrcFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_misr_crc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_misr_crc)
  if (event_case() == kMdpMisrCrc) {
    clear_has_event();
    ::perfetto::protos::MdpMisrCrcFtraceEvent* temp = _impl_.event_.mdp_misr_crc_;
    _impl_.event_.mdp_misr_crc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_misr_crc(::perfetto::protos::MdpMisrCrcFtraceEvent* mdp_misr_crc) {
  clear_event();
  if (mdp_misr_crc) {
    set_has_mdp_misr_crc();
    _impl_.event_.mdp_misr_crc_ = mdp_misr_crc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_misr_crc)
}
inline ::perfetto::protos::MdpMisrCrcFtraceEvent* FtraceEvent::_internal_mutable_mdp_misr_crc() {
  if (event_case() != kMdpMisrCrc) {
    clear_event();
    set_has_mdp_misr_crc();
    _impl_.event_.mdp_misr_crc_ = CreateMaybeMessage< ::perfetto::protos::MdpMisrCrcFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_misr_crc_;
}
inline ::perfetto::protos::MdpMisrCrcFtraceEvent* FtraceEvent::mutable_mdp_misr_crc() {
  ::perfetto::protos::MdpMisrCrcFtraceEvent* _msg = _internal_mutable_mdp_misr_crc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_misr_crc)
  return _msg;
}

// .perfetto.protos.MdpPerfSetQosLutsFtraceEvent mdp_perf_set_qos_luts = 87;
inline bool FtraceEvent::has_mdp_perf_set_qos_luts() const {
  return event_case() == kMdpPerfSetQosLuts;
}
inline bool FtraceEvent::_internal_has_mdp_perf_set_qos_luts() const {
  return event_case() == kMdpPerfSetQosLuts;
}
inline void FtraceEvent::set_has_mdp_perf_set_qos_luts() {
  _impl_._oneof_case_[0] = kMdpPerfSetQosLuts;
}
inline ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* FtraceEvent::release_mdp_perf_set_qos_luts() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  if (event_case() == kMdpPerfSetQosLuts) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* temp = _impl_.event_.mdp_perf_set_qos_luts_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_perf_set_qos_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& FtraceEvent::_internal_mdp_perf_set_qos_luts() const {
  return event_case() == kMdpPerfSetQosLuts
      ? *_impl_.event_.mdp_perf_set_qos_luts_
      : reinterpret_cast<::perfetto::protos::MdpPerfSetQosLutsFtraceEvent&>(::perfetto::protos::_MdpPerfSetQosLutsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent& FtraceEvent::mdp_perf_set_qos_luts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  return _internal_mdp_perf_set_qos_luts();
}
inline ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_perf_set_qos_luts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  if (event_case() == kMdpPerfSetQosLuts) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* temp = _impl_.event_.mdp_perf_set_qos_luts_;
    _impl_.event_.mdp_perf_set_qos_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_perf_set_qos_luts(::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* mdp_perf_set_qos_luts) {
  clear_event();
  if (mdp_perf_set_qos_luts) {
    set_has_mdp_perf_set_qos_luts();
    _impl_.event_.mdp_perf_set_qos_luts_ = mdp_perf_set_qos_luts;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
}
inline ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* FtraceEvent::_internal_mutable_mdp_perf_set_qos_luts() {
  if (event_case() != kMdpPerfSetQosLuts) {
    clear_event();
    set_has_mdp_perf_set_qos_luts();
    _impl_.event_.mdp_perf_set_qos_luts_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_perf_set_qos_luts_;
}
inline ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* FtraceEvent::mutable_mdp_perf_set_qos_luts() {
  ::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* _msg = _internal_mutable_mdp_perf_set_qos_luts();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts)
  return _msg;
}

// .perfetto.protos.MdpTraceCounterFtraceEvent mdp_trace_counter = 88;
inline bool FtraceEvent::has_mdp_trace_counter() const {
  return event_case() == kMdpTraceCounter;
}
inline bool FtraceEvent::_internal_has_mdp_trace_counter() const {
  return event_case() == kMdpTraceCounter;
}
inline void FtraceEvent::set_has_mdp_trace_counter() {
  _impl_._oneof_case_[0] = kMdpTraceCounter;
}
inline ::perfetto::protos::MdpTraceCounterFtraceEvent* FtraceEvent::release_mdp_trace_counter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_trace_counter)
  if (event_case() == kMdpTraceCounter) {
    clear_has_event();
    ::perfetto::protos::MdpTraceCounterFtraceEvent* temp = _impl_.event_.mdp_trace_counter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_trace_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpTraceCounterFtraceEvent& FtraceEvent::_internal_mdp_trace_counter() const {
  return event_case() == kMdpTraceCounter
      ? *_impl_.event_.mdp_trace_counter_
      : reinterpret_cast<::perfetto::protos::MdpTraceCounterFtraceEvent&>(::perfetto::protos::_MdpTraceCounterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpTraceCounterFtraceEvent& FtraceEvent::mdp_trace_counter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_trace_counter)
  return _internal_mdp_trace_counter();
}
inline ::perfetto::protos::MdpTraceCounterFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_trace_counter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_trace_counter)
  if (event_case() == kMdpTraceCounter) {
    clear_has_event();
    ::perfetto::protos::MdpTraceCounterFtraceEvent* temp = _impl_.event_.mdp_trace_counter_;
    _impl_.event_.mdp_trace_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_trace_counter(::perfetto::protos::MdpTraceCounterFtraceEvent* mdp_trace_counter) {
  clear_event();
  if (mdp_trace_counter) {
    set_has_mdp_trace_counter();
    _impl_.event_.mdp_trace_counter_ = mdp_trace_counter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_trace_counter)
}
inline ::perfetto::protos::MdpTraceCounterFtraceEvent* FtraceEvent::_internal_mutable_mdp_trace_counter() {
  if (event_case() != kMdpTraceCounter) {
    clear_event();
    set_has_mdp_trace_counter();
    _impl_.event_.mdp_trace_counter_ = CreateMaybeMessage< ::perfetto::protos::MdpTraceCounterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_trace_counter_;
}
inline ::perfetto::protos::MdpTraceCounterFtraceEvent* FtraceEvent::mutable_mdp_trace_counter() {
  ::perfetto::protos::MdpTraceCounterFtraceEvent* _msg = _internal_mutable_mdp_trace_counter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_trace_counter)
  return _msg;
}

// .perfetto.protos.MdpCmdReleaseBwFtraceEvent mdp_cmd_release_bw = 89;
inline bool FtraceEvent::has_mdp_cmd_release_bw() const {
  return event_case() == kMdpCmdReleaseBw;
}
inline bool FtraceEvent::_internal_has_mdp_cmd_release_bw() const {
  return event_case() == kMdpCmdReleaseBw;
}
inline void FtraceEvent::set_has_mdp_cmd_release_bw() {
  _impl_._oneof_case_[0] = kMdpCmdReleaseBw;
}
inline ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* FtraceEvent::release_mdp_cmd_release_bw() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  if (event_case() == kMdpCmdReleaseBw) {
    clear_has_event();
    ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* temp = _impl_.event_.mdp_cmd_release_bw_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_cmd_release_bw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& FtraceEvent::_internal_mdp_cmd_release_bw() const {
  return event_case() == kMdpCmdReleaseBw
      ? *_impl_.event_.mdp_cmd_release_bw_
      : reinterpret_cast<::perfetto::protos::MdpCmdReleaseBwFtraceEvent&>(::perfetto::protos::_MdpCmdReleaseBwFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCmdReleaseBwFtraceEvent& FtraceEvent::mdp_cmd_release_bw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  return _internal_mdp_cmd_release_bw();
}
inline ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_cmd_release_bw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  if (event_case() == kMdpCmdReleaseBw) {
    clear_has_event();
    ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* temp = _impl_.event_.mdp_cmd_release_bw_;
    _impl_.event_.mdp_cmd_release_bw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_cmd_release_bw(::perfetto::protos::MdpCmdReleaseBwFtraceEvent* mdp_cmd_release_bw) {
  clear_event();
  if (mdp_cmd_release_bw) {
    set_has_mdp_cmd_release_bw();
    _impl_.event_.mdp_cmd_release_bw_ = mdp_cmd_release_bw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
}
inline ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* FtraceEvent::_internal_mutable_mdp_cmd_release_bw() {
  if (event_case() != kMdpCmdReleaseBw) {
    clear_event();
    set_has_mdp_cmd_release_bw();
    _impl_.event_.mdp_cmd_release_bw_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdReleaseBwFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_cmd_release_bw_;
}
inline ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* FtraceEvent::mutable_mdp_cmd_release_bw() {
  ::perfetto::protos::MdpCmdReleaseBwFtraceEvent* _msg = _internal_mutable_mdp_cmd_release_bw();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_release_bw)
  return _msg;
}

// .perfetto.protos.MdpMixerUpdateFtraceEvent mdp_mixer_update = 90;
inline bool FtraceEvent::has_mdp_mixer_update() const {
  return event_case() == kMdpMixerUpdate;
}
inline bool FtraceEvent::_internal_has_mdp_mixer_update() const {
  return event_case() == kMdpMixerUpdate;
}
inline void FtraceEvent::set_has_mdp_mixer_update() {
  _impl_._oneof_case_[0] = kMdpMixerUpdate;
}
inline ::perfetto::protos::MdpMixerUpdateFtraceEvent* FtraceEvent::release_mdp_mixer_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_mixer_update)
  if (event_case() == kMdpMixerUpdate) {
    clear_has_event();
    ::perfetto::protos::MdpMixerUpdateFtraceEvent* temp = _impl_.event_.mdp_mixer_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_mixer_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpMixerUpdateFtraceEvent& FtraceEvent::_internal_mdp_mixer_update() const {
  return event_case() == kMdpMixerUpdate
      ? *_impl_.event_.mdp_mixer_update_
      : reinterpret_cast<::perfetto::protos::MdpMixerUpdateFtraceEvent&>(::perfetto::protos::_MdpMixerUpdateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpMixerUpdateFtraceEvent& FtraceEvent::mdp_mixer_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_mixer_update)
  return _internal_mdp_mixer_update();
}
inline ::perfetto::protos::MdpMixerUpdateFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_mixer_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_mixer_update)
  if (event_case() == kMdpMixerUpdate) {
    clear_has_event();
    ::perfetto::protos::MdpMixerUpdateFtraceEvent* temp = _impl_.event_.mdp_mixer_update_;
    _impl_.event_.mdp_mixer_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_mixer_update(::perfetto::protos::MdpMixerUpdateFtraceEvent* mdp_mixer_update) {
  clear_event();
  if (mdp_mixer_update) {
    set_has_mdp_mixer_update();
    _impl_.event_.mdp_mixer_update_ = mdp_mixer_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_mixer_update)
}
inline ::perfetto::protos::MdpMixerUpdateFtraceEvent* FtraceEvent::_internal_mutable_mdp_mixer_update() {
  if (event_case() != kMdpMixerUpdate) {
    clear_event();
    set_has_mdp_mixer_update();
    _impl_.event_.mdp_mixer_update_ = CreateMaybeMessage< ::perfetto::protos::MdpMixerUpdateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_mixer_update_;
}
inline ::perfetto::protos::MdpMixerUpdateFtraceEvent* FtraceEvent::mutable_mdp_mixer_update() {
  ::perfetto::protos::MdpMixerUpdateFtraceEvent* _msg = _internal_mutable_mdp_mixer_update();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_mixer_update)
  return _msg;
}

// .perfetto.protos.MdpPerfSetWmLevelsFtraceEvent mdp_perf_set_wm_levels = 91;
inline bool FtraceEvent::has_mdp_perf_set_wm_levels() const {
  return event_case() == kMdpPerfSetWmLevels;
}
inline bool FtraceEvent::_internal_has_mdp_perf_set_wm_levels() const {
  return event_case() == kMdpPerfSetWmLevels;
}
inline void FtraceEvent::set_has_mdp_perf_set_wm_levels() {
  _impl_._oneof_case_[0] = kMdpPerfSetWmLevels;
}
inline ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::release_mdp_perf_set_wm_levels() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  if (event_case() == kMdpPerfSetWmLevels) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* temp = _impl_.event_.mdp_perf_set_wm_levels_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_perf_set_wm_levels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& FtraceEvent::_internal_mdp_perf_set_wm_levels() const {
  return event_case() == kMdpPerfSetWmLevels
      ? *_impl_.event_.mdp_perf_set_wm_levels_
      : reinterpret_cast<::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent&>(::perfetto::protos::_MdpPerfSetWmLevelsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent& FtraceEvent::mdp_perf_set_wm_levels() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  return _internal_mdp_perf_set_wm_levels();
}
inline ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_perf_set_wm_levels() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  if (event_case() == kMdpPerfSetWmLevels) {
    clear_has_event();
    ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* temp = _impl_.event_.mdp_perf_set_wm_levels_;
    _impl_.event_.mdp_perf_set_wm_levels_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_perf_set_wm_levels(::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* mdp_perf_set_wm_levels) {
  clear_event();
  if (mdp_perf_set_wm_levels) {
    set_has_mdp_perf_set_wm_levels();
    _impl_.event_.mdp_perf_set_wm_levels_ = mdp_perf_set_wm_levels;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
}
inline ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::_internal_mutable_mdp_perf_set_wm_levels() {
  if (event_case() != kMdpPerfSetWmLevels) {
    clear_event();
    set_has_mdp_perf_set_wm_levels();
    _impl_.event_.mdp_perf_set_wm_levels_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_perf_set_wm_levels_;
}
inline ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* FtraceEvent::mutable_mdp_perf_set_wm_levels() {
  ::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* _msg = _internal_mutable_mdp_perf_set_wm_levels();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels)
  return _msg;
}

// .perfetto.protos.MdpVideoUnderrunDoneFtraceEvent mdp_video_underrun_done = 92;
inline bool FtraceEvent::has_mdp_video_underrun_done() const {
  return event_case() == kMdpVideoUnderrunDone;
}
inline bool FtraceEvent::_internal_has_mdp_video_underrun_done() const {
  return event_case() == kMdpVideoUnderrunDone;
}
inline void FtraceEvent::set_has_mdp_video_underrun_done() {
  _impl_._oneof_case_[0] = kMdpVideoUnderrunDone;
}
inline ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::release_mdp_video_underrun_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  if (event_case() == kMdpVideoUnderrunDone) {
    clear_has_event();
    ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* temp = _impl_.event_.mdp_video_underrun_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_video_underrun_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& FtraceEvent::_internal_mdp_video_underrun_done() const {
  return event_case() == kMdpVideoUnderrunDone
      ? *_impl_.event_.mdp_video_underrun_done_
      : reinterpret_cast<::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent&>(::perfetto::protos::_MdpVideoUnderrunDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent& FtraceEvent::mdp_video_underrun_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  return _internal_mdp_video_underrun_done();
}
inline ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_video_underrun_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  if (event_case() == kMdpVideoUnderrunDone) {
    clear_has_event();
    ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* temp = _impl_.event_.mdp_video_underrun_done_;
    _impl_.event_.mdp_video_underrun_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_video_underrun_done(::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* mdp_video_underrun_done) {
  clear_event();
  if (mdp_video_underrun_done) {
    set_has_mdp_video_underrun_done();
    _impl_.event_.mdp_video_underrun_done_ = mdp_video_underrun_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
}
inline ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::_internal_mutable_mdp_video_underrun_done() {
  if (event_case() != kMdpVideoUnderrunDone) {
    clear_event();
    set_has_mdp_video_underrun_done();
    _impl_.event_.mdp_video_underrun_done_ = CreateMaybeMessage< ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_video_underrun_done_;
}
inline ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* FtraceEvent::mutable_mdp_video_underrun_done() {
  ::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* _msg = _internal_mutable_mdp_video_underrun_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_video_underrun_done)
  return _msg;
}

// .perfetto.protos.MdpCmdWaitPingpongFtraceEvent mdp_cmd_wait_pingpong = 93;
inline bool FtraceEvent::has_mdp_cmd_wait_pingpong() const {
  return event_case() == kMdpCmdWaitPingpong;
}
inline bool FtraceEvent::_internal_has_mdp_cmd_wait_pingpong() const {
  return event_case() == kMdpCmdWaitPingpong;
}
inline void FtraceEvent::set_has_mdp_cmd_wait_pingpong() {
  _impl_._oneof_case_[0] = kMdpCmdWaitPingpong;
}
inline ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* FtraceEvent::release_mdp_cmd_wait_pingpong() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  if (event_case() == kMdpCmdWaitPingpong) {
    clear_has_event();
    ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* temp = _impl_.event_.mdp_cmd_wait_pingpong_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_cmd_wait_pingpong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& FtraceEvent::_internal_mdp_cmd_wait_pingpong() const {
  return event_case() == kMdpCmdWaitPingpong
      ? *_impl_.event_.mdp_cmd_wait_pingpong_
      : reinterpret_cast<::perfetto::protos::MdpCmdWaitPingpongFtraceEvent&>(::perfetto::protos::_MdpCmdWaitPingpongFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent& FtraceEvent::mdp_cmd_wait_pingpong() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  return _internal_mdp_cmd_wait_pingpong();
}
inline ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_cmd_wait_pingpong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  if (event_case() == kMdpCmdWaitPingpong) {
    clear_has_event();
    ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* temp = _impl_.event_.mdp_cmd_wait_pingpong_;
    _impl_.event_.mdp_cmd_wait_pingpong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_cmd_wait_pingpong(::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* mdp_cmd_wait_pingpong) {
  clear_event();
  if (mdp_cmd_wait_pingpong) {
    set_has_mdp_cmd_wait_pingpong();
    _impl_.event_.mdp_cmd_wait_pingpong_ = mdp_cmd_wait_pingpong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
}
inline ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* FtraceEvent::_internal_mutable_mdp_cmd_wait_pingpong() {
  if (event_case() != kMdpCmdWaitPingpong) {
    clear_event();
    set_has_mdp_cmd_wait_pingpong();
    _impl_.event_.mdp_cmd_wait_pingpong_ = CreateMaybeMessage< ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_cmd_wait_pingpong_;
}
inline ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* FtraceEvent::mutable_mdp_cmd_wait_pingpong() {
  ::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* _msg = _internal_mutable_mdp_cmd_wait_pingpong();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong)
  return _msg;
}

// .perfetto.protos.MdpPerfPrefillCalcFtraceEvent mdp_perf_prefill_calc = 94;
inline bool FtraceEvent::has_mdp_perf_prefill_calc() const {
  return event_case() == kMdpPerfPrefillCalc;
}
inline bool FtraceEvent::_internal_has_mdp_perf_prefill_calc() const {
  return event_case() == kMdpPerfPrefillCalc;
}
inline void FtraceEvent::set_has_mdp_perf_prefill_calc() {
  _impl_._oneof_case_[0] = kMdpPerfPrefillCalc;
}
inline ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* FtraceEvent::release_mdp_perf_prefill_calc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  if (event_case() == kMdpPerfPrefillCalc) {
    clear_has_event();
    ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* temp = _impl_.event_.mdp_perf_prefill_calc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_perf_prefill_calc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& FtraceEvent::_internal_mdp_perf_prefill_calc() const {
  return event_case() == kMdpPerfPrefillCalc
      ? *_impl_.event_.mdp_perf_prefill_calc_
      : reinterpret_cast<::perfetto::protos::MdpPerfPrefillCalcFtraceEvent&>(::perfetto::protos::_MdpPerfPrefillCalcFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent& FtraceEvent::mdp_perf_prefill_calc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  return _internal_mdp_perf_prefill_calc();
}
inline ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_perf_prefill_calc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  if (event_case() == kMdpPerfPrefillCalc) {
    clear_has_event();
    ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* temp = _impl_.event_.mdp_perf_prefill_calc_;
    _impl_.event_.mdp_perf_prefill_calc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_perf_prefill_calc(::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* mdp_perf_prefill_calc) {
  clear_event();
  if (mdp_perf_prefill_calc) {
    set_has_mdp_perf_prefill_calc();
    _impl_.event_.mdp_perf_prefill_calc_ = mdp_perf_prefill_calc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
}
inline ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* FtraceEvent::_internal_mutable_mdp_perf_prefill_calc() {
  if (event_case() != kMdpPerfPrefillCalc) {
    clear_event();
    set_has_mdp_perf_prefill_calc();
    _impl_.event_.mdp_perf_prefill_calc_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_perf_prefill_calc_;
}
inline ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* FtraceEvent::mutable_mdp_perf_prefill_calc() {
  ::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* _msg = _internal_mutable_mdp_perf_prefill_calc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_prefill_calc)
  return _msg;
}

// .perfetto.protos.MdpPerfUpdateBusFtraceEvent mdp_perf_update_bus = 95;
inline bool FtraceEvent::has_mdp_perf_update_bus() const {
  return event_case() == kMdpPerfUpdateBus;
}
inline bool FtraceEvent::_internal_has_mdp_perf_update_bus() const {
  return event_case() == kMdpPerfUpdateBus;
}
inline void FtraceEvent::set_has_mdp_perf_update_bus() {
  _impl_._oneof_case_[0] = kMdpPerfUpdateBus;
}
inline ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* FtraceEvent::release_mdp_perf_update_bus() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  if (event_case() == kMdpPerfUpdateBus) {
    clear_has_event();
    ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* temp = _impl_.event_.mdp_perf_update_bus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mdp_perf_update_bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& FtraceEvent::_internal_mdp_perf_update_bus() const {
  return event_case() == kMdpPerfUpdateBus
      ? *_impl_.event_.mdp_perf_update_bus_
      : reinterpret_cast<::perfetto::protos::MdpPerfUpdateBusFtraceEvent&>(::perfetto::protos::_MdpPerfUpdateBusFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MdpPerfUpdateBusFtraceEvent& FtraceEvent::mdp_perf_update_bus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  return _internal_mdp_perf_update_bus();
}
inline ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* FtraceEvent::unsafe_arena_release_mdp_perf_update_bus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  if (event_case() == kMdpPerfUpdateBus) {
    clear_has_event();
    ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* temp = _impl_.event_.mdp_perf_update_bus_;
    _impl_.event_.mdp_perf_update_bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mdp_perf_update_bus(::perfetto::protos::MdpPerfUpdateBusFtraceEvent* mdp_perf_update_bus) {
  clear_event();
  if (mdp_perf_update_bus) {
    set_has_mdp_perf_update_bus();
    _impl_.event_.mdp_perf_update_bus_ = mdp_perf_update_bus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
}
inline ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* FtraceEvent::_internal_mutable_mdp_perf_update_bus() {
  if (event_case() != kMdpPerfUpdateBus) {
    clear_event();
    set_has_mdp_perf_update_bus();
    _impl_.event_.mdp_perf_update_bus_ = CreateMaybeMessage< ::perfetto::protos::MdpPerfUpdateBusFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mdp_perf_update_bus_;
}
inline ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* FtraceEvent::mutable_mdp_perf_update_bus() {
  ::perfetto::protos::MdpPerfUpdateBusFtraceEvent* _msg = _internal_mutable_mdp_perf_update_bus();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mdp_perf_update_bus)
  return _msg;
}

// .perfetto.protos.RotatorBwAoAsContextFtraceEvent rotator_bw_ao_as_context = 96;
inline bool FtraceEvent::has_rotator_bw_ao_as_context() const {
  return event_case() == kRotatorBwAoAsContext;
}
inline bool FtraceEvent::_internal_has_rotator_bw_ao_as_context() const {
  return event_case() == kRotatorBwAoAsContext;
}
inline void FtraceEvent::set_has_rotator_bw_ao_as_context() {
  _impl_._oneof_case_[0] = kRotatorBwAoAsContext;
}
inline ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* FtraceEvent::release_rotator_bw_ao_as_context() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  if (event_case() == kRotatorBwAoAsContext) {
    clear_has_event();
    ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* temp = _impl_.event_.rotator_bw_ao_as_context_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.rotator_bw_ao_as_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& FtraceEvent::_internal_rotator_bw_ao_as_context() const {
  return event_case() == kRotatorBwAoAsContext
      ? *_impl_.event_.rotator_bw_ao_as_context_
      : reinterpret_cast<::perfetto::protos::RotatorBwAoAsContextFtraceEvent&>(::perfetto::protos::_RotatorBwAoAsContextFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RotatorBwAoAsContextFtraceEvent& FtraceEvent::rotator_bw_ao_as_context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  return _internal_rotator_bw_ao_as_context();
}
inline ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* FtraceEvent::unsafe_arena_release_rotator_bw_ao_as_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  if (event_case() == kRotatorBwAoAsContext) {
    clear_has_event();
    ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* temp = _impl_.event_.rotator_bw_ao_as_context_;
    _impl_.event_.rotator_bw_ao_as_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_rotator_bw_ao_as_context(::perfetto::protos::RotatorBwAoAsContextFtraceEvent* rotator_bw_ao_as_context) {
  clear_event();
  if (rotator_bw_ao_as_context) {
    set_has_rotator_bw_ao_as_context();
    _impl_.event_.rotator_bw_ao_as_context_ = rotator_bw_ao_as_context;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
}
inline ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* FtraceEvent::_internal_mutable_rotator_bw_ao_as_context() {
  if (event_case() != kRotatorBwAoAsContext) {
    clear_event();
    set_has_rotator_bw_ao_as_context();
    _impl_.event_.rotator_bw_ao_as_context_ = CreateMaybeMessage< ::perfetto::protos::RotatorBwAoAsContextFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.rotator_bw_ao_as_context_;
}
inline ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* FtraceEvent::mutable_rotator_bw_ao_as_context() {
  ::perfetto::protos::RotatorBwAoAsContextFtraceEvent* _msg = _internal_mutable_rotator_bw_ao_as_context();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.rotator_bw_ao_as_context)
  return _msg;
}

// .perfetto.protos.MmFilemapAddToPageCacheFtraceEvent mm_filemap_add_to_page_cache = 97;
inline bool FtraceEvent::has_mm_filemap_add_to_page_cache() const {
  return event_case() == kMmFilemapAddToPageCache;
}
inline bool FtraceEvent::_internal_has_mm_filemap_add_to_page_cache() const {
  return event_case() == kMmFilemapAddToPageCache;
}
inline void FtraceEvent::set_has_mm_filemap_add_to_page_cache() {
  _impl_._oneof_case_[0] = kMmFilemapAddToPageCache;
}
inline ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::release_mm_filemap_add_to_page_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  if (event_case() == kMmFilemapAddToPageCache) {
    clear_has_event();
    ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* temp = _impl_.event_.mm_filemap_add_to_page_cache_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_filemap_add_to_page_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& FtraceEvent::_internal_mm_filemap_add_to_page_cache() const {
  return event_case() == kMmFilemapAddToPageCache
      ? *_impl_.event_.mm_filemap_add_to_page_cache_
      : reinterpret_cast<::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent&>(::perfetto::protos::_MmFilemapAddToPageCacheFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent& FtraceEvent::mm_filemap_add_to_page_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  return _internal_mm_filemap_add_to_page_cache();
}
inline ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::unsafe_arena_release_mm_filemap_add_to_page_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  if (event_case() == kMmFilemapAddToPageCache) {
    clear_has_event();
    ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* temp = _impl_.event_.mm_filemap_add_to_page_cache_;
    _impl_.event_.mm_filemap_add_to_page_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_filemap_add_to_page_cache(::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* mm_filemap_add_to_page_cache) {
  clear_event();
  if (mm_filemap_add_to_page_cache) {
    set_has_mm_filemap_add_to_page_cache();
    _impl_.event_.mm_filemap_add_to_page_cache_ = mm_filemap_add_to_page_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
}
inline ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::_internal_mutable_mm_filemap_add_to_page_cache() {
  if (event_case() != kMmFilemapAddToPageCache) {
    clear_event();
    set_has_mm_filemap_add_to_page_cache();
    _impl_.event_.mm_filemap_add_to_page_cache_ = CreateMaybeMessage< ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_filemap_add_to_page_cache_;
}
inline ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* FtraceEvent::mutable_mm_filemap_add_to_page_cache() {
  ::perfetto::protos::MmFilemapAddToPageCacheFtraceEvent* _msg = _internal_mutable_mm_filemap_add_to_page_cache();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache)
  return _msg;
}

// .perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent mm_filemap_delete_from_page_cache = 98;
inline bool FtraceEvent::has_mm_filemap_delete_from_page_cache() const {
  return event_case() == kMmFilemapDeleteFromPageCache;
}
inline bool FtraceEvent::_internal_has_mm_filemap_delete_from_page_cache() const {
  return event_case() == kMmFilemapDeleteFromPageCache;
}
inline void FtraceEvent::set_has_mm_filemap_delete_from_page_cache() {
  _impl_._oneof_case_[0] = kMmFilemapDeleteFromPageCache;
}
inline ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::release_mm_filemap_delete_from_page_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  if (event_case() == kMmFilemapDeleteFromPageCache) {
    clear_has_event();
    ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* temp = _impl_.event_.mm_filemap_delete_from_page_cache_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_filemap_delete_from_page_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& FtraceEvent::_internal_mm_filemap_delete_from_page_cache() const {
  return event_case() == kMmFilemapDeleteFromPageCache
      ? *_impl_.event_.mm_filemap_delete_from_page_cache_
      : reinterpret_cast<::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent&>(::perfetto::protos::_MmFilemapDeleteFromPageCacheFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent& FtraceEvent::mm_filemap_delete_from_page_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  return _internal_mm_filemap_delete_from_page_cache();
}
inline ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::unsafe_arena_release_mm_filemap_delete_from_page_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  if (event_case() == kMmFilemapDeleteFromPageCache) {
    clear_has_event();
    ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* temp = _impl_.event_.mm_filemap_delete_from_page_cache_;
    _impl_.event_.mm_filemap_delete_from_page_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_filemap_delete_from_page_cache(::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* mm_filemap_delete_from_page_cache) {
  clear_event();
  if (mm_filemap_delete_from_page_cache) {
    set_has_mm_filemap_delete_from_page_cache();
    _impl_.event_.mm_filemap_delete_from_page_cache_ = mm_filemap_delete_from_page_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
}
inline ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::_internal_mutable_mm_filemap_delete_from_page_cache() {
  if (event_case() != kMmFilemapDeleteFromPageCache) {
    clear_event();
    set_has_mm_filemap_delete_from_page_cache();
    _impl_.event_.mm_filemap_delete_from_page_cache_ = CreateMaybeMessage< ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_filemap_delete_from_page_cache_;
}
inline ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* FtraceEvent::mutable_mm_filemap_delete_from_page_cache() {
  ::perfetto::protos::MmFilemapDeleteFromPageCacheFtraceEvent* _msg = _internal_mutable_mm_filemap_delete_from_page_cache();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache)
  return _msg;
}

// .perfetto.protos.MmCompactionBeginFtraceEvent mm_compaction_begin = 99;
inline bool FtraceEvent::has_mm_compaction_begin() const {
  return event_case() == kMmCompactionBegin;
}
inline bool FtraceEvent::_internal_has_mm_compaction_begin() const {
  return event_case() == kMmCompactionBegin;
}
inline void FtraceEvent::set_has_mm_compaction_begin() {
  _impl_._oneof_case_[0] = kMmCompactionBegin;
}
inline ::perfetto::protos::MmCompactionBeginFtraceEvent* FtraceEvent::release_mm_compaction_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_begin)
  if (event_case() == kMmCompactionBegin) {
    clear_has_event();
    ::perfetto::protos::MmCompactionBeginFtraceEvent* temp = _impl_.event_.mm_compaction_begin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionBeginFtraceEvent& FtraceEvent::_internal_mm_compaction_begin() const {
  return event_case() == kMmCompactionBegin
      ? *_impl_.event_.mm_compaction_begin_
      : reinterpret_cast<::perfetto::protos::MmCompactionBeginFtraceEvent&>(::perfetto::protos::_MmCompactionBeginFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionBeginFtraceEvent& FtraceEvent::mm_compaction_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_begin)
  return _internal_mm_compaction_begin();
}
inline ::perfetto::protos::MmCompactionBeginFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_begin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_begin)
  if (event_case() == kMmCompactionBegin) {
    clear_has_event();
    ::perfetto::protos::MmCompactionBeginFtraceEvent* temp = _impl_.event_.mm_compaction_begin_;
    _impl_.event_.mm_compaction_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_begin(::perfetto::protos::MmCompactionBeginFtraceEvent* mm_compaction_begin) {
  clear_event();
  if (mm_compaction_begin) {
    set_has_mm_compaction_begin();
    _impl_.event_.mm_compaction_begin_ = mm_compaction_begin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_begin)
}
inline ::perfetto::protos::MmCompactionBeginFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_begin() {
  if (event_case() != kMmCompactionBegin) {
    clear_event();
    set_has_mm_compaction_begin();
    _impl_.event_.mm_compaction_begin_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionBeginFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_begin_;
}
inline ::perfetto::protos::MmCompactionBeginFtraceEvent* FtraceEvent::mutable_mm_compaction_begin() {
  ::perfetto::protos::MmCompactionBeginFtraceEvent* _msg = _internal_mutable_mm_compaction_begin();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_begin)
  return _msg;
}

// .perfetto.protos.MmCompactionDeferCompactionFtraceEvent mm_compaction_defer_compaction = 100;
inline bool FtraceEvent::has_mm_compaction_defer_compaction() const {
  return event_case() == kMmCompactionDeferCompaction;
}
inline bool FtraceEvent::_internal_has_mm_compaction_defer_compaction() const {
  return event_case() == kMmCompactionDeferCompaction;
}
inline void FtraceEvent::set_has_mm_compaction_defer_compaction() {
  _impl_._oneof_case_[0] = kMmCompactionDeferCompaction;
}
inline ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* FtraceEvent::release_mm_compaction_defer_compaction() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  if (event_case() == kMmCompactionDeferCompaction) {
    clear_has_event();
    ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* temp = _impl_.event_.mm_compaction_defer_compaction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_defer_compaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& FtraceEvent::_internal_mm_compaction_defer_compaction() const {
  return event_case() == kMmCompactionDeferCompaction
      ? *_impl_.event_.mm_compaction_defer_compaction_
      : reinterpret_cast<::perfetto::protos::MmCompactionDeferCompactionFtraceEvent&>(::perfetto::protos::_MmCompactionDeferCompactionFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent& FtraceEvent::mm_compaction_defer_compaction() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  return _internal_mm_compaction_defer_compaction();
}
inline ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_defer_compaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  if (event_case() == kMmCompactionDeferCompaction) {
    clear_has_event();
    ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* temp = _impl_.event_.mm_compaction_defer_compaction_;
    _impl_.event_.mm_compaction_defer_compaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_defer_compaction(::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* mm_compaction_defer_compaction) {
  clear_event();
  if (mm_compaction_defer_compaction) {
    set_has_mm_compaction_defer_compaction();
    _impl_.event_.mm_compaction_defer_compaction_ = mm_compaction_defer_compaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
}
inline ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_defer_compaction() {
  if (event_case() != kMmCompactionDeferCompaction) {
    clear_event();
    set_has_mm_compaction_defer_compaction();
    _impl_.event_.mm_compaction_defer_compaction_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_defer_compaction_;
}
inline ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* FtraceEvent::mutable_mm_compaction_defer_compaction() {
  ::perfetto::protos::MmCompactionDeferCompactionFtraceEvent* _msg = _internal_mutable_mm_compaction_defer_compaction();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_defer_compaction)
  return _msg;
}

// .perfetto.protos.MmCompactionDeferredFtraceEvent mm_compaction_deferred = 101;
inline bool FtraceEvent::has_mm_compaction_deferred() const {
  return event_case() == kMmCompactionDeferred;
}
inline bool FtraceEvent::_internal_has_mm_compaction_deferred() const {
  return event_case() == kMmCompactionDeferred;
}
inline void FtraceEvent::set_has_mm_compaction_deferred() {
  _impl_._oneof_case_[0] = kMmCompactionDeferred;
}
inline ::perfetto::protos::MmCompactionDeferredFtraceEvent* FtraceEvent::release_mm_compaction_deferred() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  if (event_case() == kMmCompactionDeferred) {
    clear_has_event();
    ::perfetto::protos::MmCompactionDeferredFtraceEvent* temp = _impl_.event_.mm_compaction_deferred_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_deferred_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionDeferredFtraceEvent& FtraceEvent::_internal_mm_compaction_deferred() const {
  return event_case() == kMmCompactionDeferred
      ? *_impl_.event_.mm_compaction_deferred_
      : reinterpret_cast<::perfetto::protos::MmCompactionDeferredFtraceEvent&>(::perfetto::protos::_MmCompactionDeferredFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionDeferredFtraceEvent& FtraceEvent::mm_compaction_deferred() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  return _internal_mm_compaction_deferred();
}
inline ::perfetto::protos::MmCompactionDeferredFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_deferred() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  if (event_case() == kMmCompactionDeferred) {
    clear_has_event();
    ::perfetto::protos::MmCompactionDeferredFtraceEvent* temp = _impl_.event_.mm_compaction_deferred_;
    _impl_.event_.mm_compaction_deferred_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_deferred(::perfetto::protos::MmCompactionDeferredFtraceEvent* mm_compaction_deferred) {
  clear_event();
  if (mm_compaction_deferred) {
    set_has_mm_compaction_deferred();
    _impl_.event_.mm_compaction_deferred_ = mm_compaction_deferred;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_deferred)
}
inline ::perfetto::protos::MmCompactionDeferredFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_deferred() {
  if (event_case() != kMmCompactionDeferred) {
    clear_event();
    set_has_mm_compaction_deferred();
    _impl_.event_.mm_compaction_deferred_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferredFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_deferred_;
}
inline ::perfetto::protos::MmCompactionDeferredFtraceEvent* FtraceEvent::mutable_mm_compaction_deferred() {
  ::perfetto::protos::MmCompactionDeferredFtraceEvent* _msg = _internal_mutable_mm_compaction_deferred();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_deferred)
  return _msg;
}

// .perfetto.protos.MmCompactionDeferResetFtraceEvent mm_compaction_defer_reset = 102;
inline bool FtraceEvent::has_mm_compaction_defer_reset() const {
  return event_case() == kMmCompactionDeferReset;
}
inline bool FtraceEvent::_internal_has_mm_compaction_defer_reset() const {
  return event_case() == kMmCompactionDeferReset;
}
inline void FtraceEvent::set_has_mm_compaction_defer_reset() {
  _impl_._oneof_case_[0] = kMmCompactionDeferReset;
}
inline ::perfetto::protos::MmCompactionDeferResetFtraceEvent* FtraceEvent::release_mm_compaction_defer_reset() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  if (event_case() == kMmCompactionDeferReset) {
    clear_has_event();
    ::perfetto::protos::MmCompactionDeferResetFtraceEvent* temp = _impl_.event_.mm_compaction_defer_reset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_defer_reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& FtraceEvent::_internal_mm_compaction_defer_reset() const {
  return event_case() == kMmCompactionDeferReset
      ? *_impl_.event_.mm_compaction_defer_reset_
      : reinterpret_cast<::perfetto::protos::MmCompactionDeferResetFtraceEvent&>(::perfetto::protos::_MmCompactionDeferResetFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionDeferResetFtraceEvent& FtraceEvent::mm_compaction_defer_reset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  return _internal_mm_compaction_defer_reset();
}
inline ::perfetto::protos::MmCompactionDeferResetFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_defer_reset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  if (event_case() == kMmCompactionDeferReset) {
    clear_has_event();
    ::perfetto::protos::MmCompactionDeferResetFtraceEvent* temp = _impl_.event_.mm_compaction_defer_reset_;
    _impl_.event_.mm_compaction_defer_reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_defer_reset(::perfetto::protos::MmCompactionDeferResetFtraceEvent* mm_compaction_defer_reset) {
  clear_event();
  if (mm_compaction_defer_reset) {
    set_has_mm_compaction_defer_reset();
    _impl_.event_.mm_compaction_defer_reset_ = mm_compaction_defer_reset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
}
inline ::perfetto::protos::MmCompactionDeferResetFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_defer_reset() {
  if (event_case() != kMmCompactionDeferReset) {
    clear_event();
    set_has_mm_compaction_defer_reset();
    _impl_.event_.mm_compaction_defer_reset_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionDeferResetFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_defer_reset_;
}
inline ::perfetto::protos::MmCompactionDeferResetFtraceEvent* FtraceEvent::mutable_mm_compaction_defer_reset() {
  ::perfetto::protos::MmCompactionDeferResetFtraceEvent* _msg = _internal_mutable_mm_compaction_defer_reset();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_defer_reset)
  return _msg;
}

// .perfetto.protos.MmCompactionEndFtraceEvent mm_compaction_end = 103;
inline bool FtraceEvent::has_mm_compaction_end() const {
  return event_case() == kMmCompactionEnd;
}
inline bool FtraceEvent::_internal_has_mm_compaction_end() const {
  return event_case() == kMmCompactionEnd;
}
inline void FtraceEvent::set_has_mm_compaction_end() {
  _impl_._oneof_case_[0] = kMmCompactionEnd;
}
inline ::perfetto::protos::MmCompactionEndFtraceEvent* FtraceEvent::release_mm_compaction_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_end)
  if (event_case() == kMmCompactionEnd) {
    clear_has_event();
    ::perfetto::protos::MmCompactionEndFtraceEvent* temp = _impl_.event_.mm_compaction_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionEndFtraceEvent& FtraceEvent::_internal_mm_compaction_end() const {
  return event_case() == kMmCompactionEnd
      ? *_impl_.event_.mm_compaction_end_
      : reinterpret_cast<::perfetto::protos::MmCompactionEndFtraceEvent&>(::perfetto::protos::_MmCompactionEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionEndFtraceEvent& FtraceEvent::mm_compaction_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_end)
  return _internal_mm_compaction_end();
}
inline ::perfetto::protos::MmCompactionEndFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_end)
  if (event_case() == kMmCompactionEnd) {
    clear_has_event();
    ::perfetto::protos::MmCompactionEndFtraceEvent* temp = _impl_.event_.mm_compaction_end_;
    _impl_.event_.mm_compaction_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_end(::perfetto::protos::MmCompactionEndFtraceEvent* mm_compaction_end) {
  clear_event();
  if (mm_compaction_end) {
    set_has_mm_compaction_end();
    _impl_.event_.mm_compaction_end_ = mm_compaction_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_end)
}
inline ::perfetto::protos::MmCompactionEndFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_end() {
  if (event_case() != kMmCompactionEnd) {
    clear_event();
    set_has_mm_compaction_end();
    _impl_.event_.mm_compaction_end_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_end_;
}
inline ::perfetto::protos::MmCompactionEndFtraceEvent* FtraceEvent::mutable_mm_compaction_end() {
  ::perfetto::protos::MmCompactionEndFtraceEvent* _msg = _internal_mutable_mm_compaction_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_end)
  return _msg;
}

// .perfetto.protos.MmCompactionFinishedFtraceEvent mm_compaction_finished = 104;
inline bool FtraceEvent::has_mm_compaction_finished() const {
  return event_case() == kMmCompactionFinished;
}
inline bool FtraceEvent::_internal_has_mm_compaction_finished() const {
  return event_case() == kMmCompactionFinished;
}
inline void FtraceEvent::set_has_mm_compaction_finished() {
  _impl_._oneof_case_[0] = kMmCompactionFinished;
}
inline ::perfetto::protos::MmCompactionFinishedFtraceEvent* FtraceEvent::release_mm_compaction_finished() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_finished)
  if (event_case() == kMmCompactionFinished) {
    clear_has_event();
    ::perfetto::protos::MmCompactionFinishedFtraceEvent* temp = _impl_.event_.mm_compaction_finished_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionFinishedFtraceEvent& FtraceEvent::_internal_mm_compaction_finished() const {
  return event_case() == kMmCompactionFinished
      ? *_impl_.event_.mm_compaction_finished_
      : reinterpret_cast<::perfetto::protos::MmCompactionFinishedFtraceEvent&>(::perfetto::protos::_MmCompactionFinishedFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionFinishedFtraceEvent& FtraceEvent::mm_compaction_finished() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_finished)
  return _internal_mm_compaction_finished();
}
inline ::perfetto::protos::MmCompactionFinishedFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_finished() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_finished)
  if (event_case() == kMmCompactionFinished) {
    clear_has_event();
    ::perfetto::protos::MmCompactionFinishedFtraceEvent* temp = _impl_.event_.mm_compaction_finished_;
    _impl_.event_.mm_compaction_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_finished(::perfetto::protos::MmCompactionFinishedFtraceEvent* mm_compaction_finished) {
  clear_event();
  if (mm_compaction_finished) {
    set_has_mm_compaction_finished();
    _impl_.event_.mm_compaction_finished_ = mm_compaction_finished;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_finished)
}
inline ::perfetto::protos::MmCompactionFinishedFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_finished() {
  if (event_case() != kMmCompactionFinished) {
    clear_event();
    set_has_mm_compaction_finished();
    _impl_.event_.mm_compaction_finished_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionFinishedFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_finished_;
}
inline ::perfetto::protos::MmCompactionFinishedFtraceEvent* FtraceEvent::mutable_mm_compaction_finished() {
  ::perfetto::protos::MmCompactionFinishedFtraceEvent* _msg = _internal_mutable_mm_compaction_finished();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_finished)
  return _msg;
}

// .perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent mm_compaction_isolate_freepages = 105;
inline bool FtraceEvent::has_mm_compaction_isolate_freepages() const {
  return event_case() == kMmCompactionIsolateFreepages;
}
inline bool FtraceEvent::_internal_has_mm_compaction_isolate_freepages() const {
  return event_case() == kMmCompactionIsolateFreepages;
}
inline void FtraceEvent::set_has_mm_compaction_isolate_freepages() {
  _impl_._oneof_case_[0] = kMmCompactionIsolateFreepages;
}
inline ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::release_mm_compaction_isolate_freepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  if (event_case() == kMmCompactionIsolateFreepages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* temp = _impl_.event_.mm_compaction_isolate_freepages_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_isolate_freepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& FtraceEvent::_internal_mm_compaction_isolate_freepages() const {
  return event_case() == kMmCompactionIsolateFreepages
      ? *_impl_.event_.mm_compaction_isolate_freepages_
      : reinterpret_cast<::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent&>(::perfetto::protos::_MmCompactionIsolateFreepagesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent& FtraceEvent::mm_compaction_isolate_freepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  return _internal_mm_compaction_isolate_freepages();
}
inline ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_isolate_freepages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  if (event_case() == kMmCompactionIsolateFreepages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* temp = _impl_.event_.mm_compaction_isolate_freepages_;
    _impl_.event_.mm_compaction_isolate_freepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_isolate_freepages(::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* mm_compaction_isolate_freepages) {
  clear_event();
  if (mm_compaction_isolate_freepages) {
    set_has_mm_compaction_isolate_freepages();
    _impl_.event_.mm_compaction_isolate_freepages_ = mm_compaction_isolate_freepages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
}
inline ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_isolate_freepages() {
  if (event_case() != kMmCompactionIsolateFreepages) {
    clear_event();
    set_has_mm_compaction_isolate_freepages();
    _impl_.event_.mm_compaction_isolate_freepages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_isolate_freepages_;
}
inline ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* FtraceEvent::mutable_mm_compaction_isolate_freepages() {
  ::perfetto::protos::MmCompactionIsolateFreepagesFtraceEvent* _msg = _internal_mutable_mm_compaction_isolate_freepages();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages)
  return _msg;
}

// .perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent mm_compaction_isolate_migratepages = 106;
inline bool FtraceEvent::has_mm_compaction_isolate_migratepages() const {
  return event_case() == kMmCompactionIsolateMigratepages;
}
inline bool FtraceEvent::_internal_has_mm_compaction_isolate_migratepages() const {
  return event_case() == kMmCompactionIsolateMigratepages;
}
inline void FtraceEvent::set_has_mm_compaction_isolate_migratepages() {
  _impl_._oneof_case_[0] = kMmCompactionIsolateMigratepages;
}
inline ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::release_mm_compaction_isolate_migratepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  if (event_case() == kMmCompactionIsolateMigratepages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* temp = _impl_.event_.mm_compaction_isolate_migratepages_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_isolate_migratepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& FtraceEvent::_internal_mm_compaction_isolate_migratepages() const {
  return event_case() == kMmCompactionIsolateMigratepages
      ? *_impl_.event_.mm_compaction_isolate_migratepages_
      : reinterpret_cast<::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent&>(::perfetto::protos::_MmCompactionIsolateMigratepagesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent& FtraceEvent::mm_compaction_isolate_migratepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  return _internal_mm_compaction_isolate_migratepages();
}
inline ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_isolate_migratepages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  if (event_case() == kMmCompactionIsolateMigratepages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* temp = _impl_.event_.mm_compaction_isolate_migratepages_;
    _impl_.event_.mm_compaction_isolate_migratepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_isolate_migratepages(::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* mm_compaction_isolate_migratepages) {
  clear_event();
  if (mm_compaction_isolate_migratepages) {
    set_has_mm_compaction_isolate_migratepages();
    _impl_.event_.mm_compaction_isolate_migratepages_ = mm_compaction_isolate_migratepages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
}
inline ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_isolate_migratepages() {
  if (event_case() != kMmCompactionIsolateMigratepages) {
    clear_event();
    set_has_mm_compaction_isolate_migratepages();
    _impl_.event_.mm_compaction_isolate_migratepages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_isolate_migratepages_;
}
inline ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* FtraceEvent::mutable_mm_compaction_isolate_migratepages() {
  ::perfetto::protos::MmCompactionIsolateMigratepagesFtraceEvent* _msg = _internal_mutable_mm_compaction_isolate_migratepages();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages)
  return _msg;
}

// .perfetto.protos.MmCompactionKcompactdSleepFtraceEvent mm_compaction_kcompactd_sleep = 107;
inline bool FtraceEvent::has_mm_compaction_kcompactd_sleep() const {
  return event_case() == kMmCompactionKcompactdSleep;
}
inline bool FtraceEvent::_internal_has_mm_compaction_kcompactd_sleep() const {
  return event_case() == kMmCompactionKcompactdSleep;
}
inline void FtraceEvent::set_has_mm_compaction_kcompactd_sleep() {
  _impl_._oneof_case_[0] = kMmCompactionKcompactdSleep;
}
inline ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::release_mm_compaction_kcompactd_sleep() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  if (event_case() == kMmCompactionKcompactdSleep) {
    clear_has_event();
    ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* temp = _impl_.event_.mm_compaction_kcompactd_sleep_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_kcompactd_sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& FtraceEvent::_internal_mm_compaction_kcompactd_sleep() const {
  return event_case() == kMmCompactionKcompactdSleep
      ? *_impl_.event_.mm_compaction_kcompactd_sleep_
      : reinterpret_cast<::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent&>(::perfetto::protos::_MmCompactionKcompactdSleepFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent& FtraceEvent::mm_compaction_kcompactd_sleep() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  return _internal_mm_compaction_kcompactd_sleep();
}
inline ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_kcompactd_sleep() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  if (event_case() == kMmCompactionKcompactdSleep) {
    clear_has_event();
    ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* temp = _impl_.event_.mm_compaction_kcompactd_sleep_;
    _impl_.event_.mm_compaction_kcompactd_sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_kcompactd_sleep(::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* mm_compaction_kcompactd_sleep) {
  clear_event();
  if (mm_compaction_kcompactd_sleep) {
    set_has_mm_compaction_kcompactd_sleep();
    _impl_.event_.mm_compaction_kcompactd_sleep_ = mm_compaction_kcompactd_sleep;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
}
inline ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_kcompactd_sleep() {
  if (event_case() != kMmCompactionKcompactdSleep) {
    clear_event();
    set_has_mm_compaction_kcompactd_sleep();
    _impl_.event_.mm_compaction_kcompactd_sleep_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_kcompactd_sleep_;
}
inline ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* FtraceEvent::mutable_mm_compaction_kcompactd_sleep() {
  ::perfetto::protos::MmCompactionKcompactdSleepFtraceEvent* _msg = _internal_mutable_mm_compaction_kcompactd_sleep();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep)
  return _msg;
}

// .perfetto.protos.MmCompactionKcompactdWakeFtraceEvent mm_compaction_kcompactd_wake = 108;
inline bool FtraceEvent::has_mm_compaction_kcompactd_wake() const {
  return event_case() == kMmCompactionKcompactdWake;
}
inline bool FtraceEvent::_internal_has_mm_compaction_kcompactd_wake() const {
  return event_case() == kMmCompactionKcompactdWake;
}
inline void FtraceEvent::set_has_mm_compaction_kcompactd_wake() {
  _impl_._oneof_case_[0] = kMmCompactionKcompactdWake;
}
inline ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::release_mm_compaction_kcompactd_wake() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  if (event_case() == kMmCompactionKcompactdWake) {
    clear_has_event();
    ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* temp = _impl_.event_.mm_compaction_kcompactd_wake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_kcompactd_wake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& FtraceEvent::_internal_mm_compaction_kcompactd_wake() const {
  return event_case() == kMmCompactionKcompactdWake
      ? *_impl_.event_.mm_compaction_kcompactd_wake_
      : reinterpret_cast<::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent&>(::perfetto::protos::_MmCompactionKcompactdWakeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent& FtraceEvent::mm_compaction_kcompactd_wake() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  return _internal_mm_compaction_kcompactd_wake();
}
inline ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_kcompactd_wake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  if (event_case() == kMmCompactionKcompactdWake) {
    clear_has_event();
    ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* temp = _impl_.event_.mm_compaction_kcompactd_wake_;
    _impl_.event_.mm_compaction_kcompactd_wake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_kcompactd_wake(::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* mm_compaction_kcompactd_wake) {
  clear_event();
  if (mm_compaction_kcompactd_wake) {
    set_has_mm_compaction_kcompactd_wake();
    _impl_.event_.mm_compaction_kcompactd_wake_ = mm_compaction_kcompactd_wake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
}
inline ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_kcompactd_wake() {
  if (event_case() != kMmCompactionKcompactdWake) {
    clear_event();
    set_has_mm_compaction_kcompactd_wake();
    _impl_.event_.mm_compaction_kcompactd_wake_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_kcompactd_wake_;
}
inline ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* FtraceEvent::mutable_mm_compaction_kcompactd_wake() {
  ::perfetto::protos::MmCompactionKcompactdWakeFtraceEvent* _msg = _internal_mutable_mm_compaction_kcompactd_wake();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake)
  return _msg;
}

// .perfetto.protos.MmCompactionMigratepagesFtraceEvent mm_compaction_migratepages = 109;
inline bool FtraceEvent::has_mm_compaction_migratepages() const {
  return event_case() == kMmCompactionMigratepages;
}
inline bool FtraceEvent::_internal_has_mm_compaction_migratepages() const {
  return event_case() == kMmCompactionMigratepages;
}
inline void FtraceEvent::set_has_mm_compaction_migratepages() {
  _impl_._oneof_case_[0] = kMmCompactionMigratepages;
}
inline ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* FtraceEvent::release_mm_compaction_migratepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  if (event_case() == kMmCompactionMigratepages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* temp = _impl_.event_.mm_compaction_migratepages_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_migratepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& FtraceEvent::_internal_mm_compaction_migratepages() const {
  return event_case() == kMmCompactionMigratepages
      ? *_impl_.event_.mm_compaction_migratepages_
      : reinterpret_cast<::perfetto::protos::MmCompactionMigratepagesFtraceEvent&>(::perfetto::protos::_MmCompactionMigratepagesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionMigratepagesFtraceEvent& FtraceEvent::mm_compaction_migratepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  return _internal_mm_compaction_migratepages();
}
inline ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_migratepages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  if (event_case() == kMmCompactionMigratepages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* temp = _impl_.event_.mm_compaction_migratepages_;
    _impl_.event_.mm_compaction_migratepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_migratepages(::perfetto::protos::MmCompactionMigratepagesFtraceEvent* mm_compaction_migratepages) {
  clear_event();
  if (mm_compaction_migratepages) {
    set_has_mm_compaction_migratepages();
    _impl_.event_.mm_compaction_migratepages_ = mm_compaction_migratepages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
}
inline ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_migratepages() {
  if (event_case() != kMmCompactionMigratepages) {
    clear_event();
    set_has_mm_compaction_migratepages();
    _impl_.event_.mm_compaction_migratepages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionMigratepagesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_migratepages_;
}
inline ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* FtraceEvent::mutable_mm_compaction_migratepages() {
  ::perfetto::protos::MmCompactionMigratepagesFtraceEvent* _msg = _internal_mutable_mm_compaction_migratepages();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_migratepages)
  return _msg;
}

// .perfetto.protos.MmCompactionSuitableFtraceEvent mm_compaction_suitable = 110;
inline bool FtraceEvent::has_mm_compaction_suitable() const {
  return event_case() == kMmCompactionSuitable;
}
inline bool FtraceEvent::_internal_has_mm_compaction_suitable() const {
  return event_case() == kMmCompactionSuitable;
}
inline void FtraceEvent::set_has_mm_compaction_suitable() {
  _impl_._oneof_case_[0] = kMmCompactionSuitable;
}
inline ::perfetto::protos::MmCompactionSuitableFtraceEvent* FtraceEvent::release_mm_compaction_suitable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  if (event_case() == kMmCompactionSuitable) {
    clear_has_event();
    ::perfetto::protos::MmCompactionSuitableFtraceEvent* temp = _impl_.event_.mm_compaction_suitable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_suitable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionSuitableFtraceEvent& FtraceEvent::_internal_mm_compaction_suitable() const {
  return event_case() == kMmCompactionSuitable
      ? *_impl_.event_.mm_compaction_suitable_
      : reinterpret_cast<::perfetto::protos::MmCompactionSuitableFtraceEvent&>(::perfetto::protos::_MmCompactionSuitableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionSuitableFtraceEvent& FtraceEvent::mm_compaction_suitable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  return _internal_mm_compaction_suitable();
}
inline ::perfetto::protos::MmCompactionSuitableFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_suitable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  if (event_case() == kMmCompactionSuitable) {
    clear_has_event();
    ::perfetto::protos::MmCompactionSuitableFtraceEvent* temp = _impl_.event_.mm_compaction_suitable_;
    _impl_.event_.mm_compaction_suitable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_suitable(::perfetto::protos::MmCompactionSuitableFtraceEvent* mm_compaction_suitable) {
  clear_event();
  if (mm_compaction_suitable) {
    set_has_mm_compaction_suitable();
    _impl_.event_.mm_compaction_suitable_ = mm_compaction_suitable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_suitable)
}
inline ::perfetto::protos::MmCompactionSuitableFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_suitable() {
  if (event_case() != kMmCompactionSuitable) {
    clear_event();
    set_has_mm_compaction_suitable();
    _impl_.event_.mm_compaction_suitable_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionSuitableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_suitable_;
}
inline ::perfetto::protos::MmCompactionSuitableFtraceEvent* FtraceEvent::mutable_mm_compaction_suitable() {
  ::perfetto::protos::MmCompactionSuitableFtraceEvent* _msg = _internal_mutable_mm_compaction_suitable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_suitable)
  return _msg;
}

// .perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent mm_compaction_try_to_compact_pages = 111;
inline bool FtraceEvent::has_mm_compaction_try_to_compact_pages() const {
  return event_case() == kMmCompactionTryToCompactPages;
}
inline bool FtraceEvent::_internal_has_mm_compaction_try_to_compact_pages() const {
  return event_case() == kMmCompactionTryToCompactPages;
}
inline void FtraceEvent::set_has_mm_compaction_try_to_compact_pages() {
  _impl_._oneof_case_[0] = kMmCompactionTryToCompactPages;
}
inline ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::release_mm_compaction_try_to_compact_pages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  if (event_case() == kMmCompactionTryToCompactPages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* temp = _impl_.event_.mm_compaction_try_to_compact_pages_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_try_to_compact_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& FtraceEvent::_internal_mm_compaction_try_to_compact_pages() const {
  return event_case() == kMmCompactionTryToCompactPages
      ? *_impl_.event_.mm_compaction_try_to_compact_pages_
      : reinterpret_cast<::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent&>(::perfetto::protos::_MmCompactionTryToCompactPagesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent& FtraceEvent::mm_compaction_try_to_compact_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  return _internal_mm_compaction_try_to_compact_pages();
}
inline ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_try_to_compact_pages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  if (event_case() == kMmCompactionTryToCompactPages) {
    clear_has_event();
    ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* temp = _impl_.event_.mm_compaction_try_to_compact_pages_;
    _impl_.event_.mm_compaction_try_to_compact_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_try_to_compact_pages(::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* mm_compaction_try_to_compact_pages) {
  clear_event();
  if (mm_compaction_try_to_compact_pages) {
    set_has_mm_compaction_try_to_compact_pages();
    _impl_.event_.mm_compaction_try_to_compact_pages_ = mm_compaction_try_to_compact_pages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
}
inline ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_try_to_compact_pages() {
  if (event_case() != kMmCompactionTryToCompactPages) {
    clear_event();
    set_has_mm_compaction_try_to_compact_pages();
    _impl_.event_.mm_compaction_try_to_compact_pages_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_try_to_compact_pages_;
}
inline ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* FtraceEvent::mutable_mm_compaction_try_to_compact_pages() {
  ::perfetto::protos::MmCompactionTryToCompactPagesFtraceEvent* _msg = _internal_mutable_mm_compaction_try_to_compact_pages();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages)
  return _msg;
}

// .perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent mm_compaction_wakeup_kcompactd = 112;
inline bool FtraceEvent::has_mm_compaction_wakeup_kcompactd() const {
  return event_case() == kMmCompactionWakeupKcompactd;
}
inline bool FtraceEvent::_internal_has_mm_compaction_wakeup_kcompactd() const {
  return event_case() == kMmCompactionWakeupKcompactd;
}
inline void FtraceEvent::set_has_mm_compaction_wakeup_kcompactd() {
  _impl_._oneof_case_[0] = kMmCompactionWakeupKcompactd;
}
inline ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::release_mm_compaction_wakeup_kcompactd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  if (event_case() == kMmCompactionWakeupKcompactd) {
    clear_has_event();
    ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* temp = _impl_.event_.mm_compaction_wakeup_kcompactd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_compaction_wakeup_kcompactd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& FtraceEvent::_internal_mm_compaction_wakeup_kcompactd() const {
  return event_case() == kMmCompactionWakeupKcompactd
      ? *_impl_.event_.mm_compaction_wakeup_kcompactd_
      : reinterpret_cast<::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent&>(::perfetto::protos::_MmCompactionWakeupKcompactdFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent& FtraceEvent::mm_compaction_wakeup_kcompactd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  return _internal_mm_compaction_wakeup_kcompactd();
}
inline ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::unsafe_arena_release_mm_compaction_wakeup_kcompactd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  if (event_case() == kMmCompactionWakeupKcompactd) {
    clear_has_event();
    ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* temp = _impl_.event_.mm_compaction_wakeup_kcompactd_;
    _impl_.event_.mm_compaction_wakeup_kcompactd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_compaction_wakeup_kcompactd(::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* mm_compaction_wakeup_kcompactd) {
  clear_event();
  if (mm_compaction_wakeup_kcompactd) {
    set_has_mm_compaction_wakeup_kcompactd();
    _impl_.event_.mm_compaction_wakeup_kcompactd_ = mm_compaction_wakeup_kcompactd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
}
inline ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::_internal_mutable_mm_compaction_wakeup_kcompactd() {
  if (event_case() != kMmCompactionWakeupKcompactd) {
    clear_event();
    set_has_mm_compaction_wakeup_kcompactd();
    _impl_.event_.mm_compaction_wakeup_kcompactd_ = CreateMaybeMessage< ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_compaction_wakeup_kcompactd_;
}
inline ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* FtraceEvent::mutable_mm_compaction_wakeup_kcompactd() {
  ::perfetto::protos::MmCompactionWakeupKcompactdFtraceEvent* _msg = _internal_mutable_mm_compaction_wakeup_kcompactd();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd)
  return _msg;
}

// .perfetto.protos.SuspendResumeFtraceEvent suspend_resume = 113;
inline bool FtraceEvent::has_suspend_resume() const {
  return event_case() == kSuspendResume;
}
inline bool FtraceEvent::_internal_has_suspend_resume() const {
  return event_case() == kSuspendResume;
}
inline void FtraceEvent::set_has_suspend_resume() {
  _impl_._oneof_case_[0] = kSuspendResume;
}
inline ::perfetto::protos::SuspendResumeFtraceEvent* FtraceEvent::release_suspend_resume() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.suspend_resume)
  if (event_case() == kSuspendResume) {
    clear_has_event();
    ::perfetto::protos::SuspendResumeFtraceEvent* temp = _impl_.event_.suspend_resume_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.suspend_resume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SuspendResumeFtraceEvent& FtraceEvent::_internal_suspend_resume() const {
  return event_case() == kSuspendResume
      ? *_impl_.event_.suspend_resume_
      : reinterpret_cast<::perfetto::protos::SuspendResumeFtraceEvent&>(::perfetto::protos::_SuspendResumeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SuspendResumeFtraceEvent& FtraceEvent::suspend_resume() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.suspend_resume)
  return _internal_suspend_resume();
}
inline ::perfetto::protos::SuspendResumeFtraceEvent* FtraceEvent::unsafe_arena_release_suspend_resume() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.suspend_resume)
  if (event_case() == kSuspendResume) {
    clear_has_event();
    ::perfetto::protos::SuspendResumeFtraceEvent* temp = _impl_.event_.suspend_resume_;
    _impl_.event_.suspend_resume_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_suspend_resume(::perfetto::protos::SuspendResumeFtraceEvent* suspend_resume) {
  clear_event();
  if (suspend_resume) {
    set_has_suspend_resume();
    _impl_.event_.suspend_resume_ = suspend_resume;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.suspend_resume)
}
inline ::perfetto::protos::SuspendResumeFtraceEvent* FtraceEvent::_internal_mutable_suspend_resume() {
  if (event_case() != kSuspendResume) {
    clear_event();
    set_has_suspend_resume();
    _impl_.event_.suspend_resume_ = CreateMaybeMessage< ::perfetto::protos::SuspendResumeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.suspend_resume_;
}
inline ::perfetto::protos::SuspendResumeFtraceEvent* FtraceEvent::mutable_suspend_resume() {
  ::perfetto::protos::SuspendResumeFtraceEvent* _msg = _internal_mutable_suspend_resume();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.suspend_resume)
  return _msg;
}

// .perfetto.protos.SchedWakeupNewFtraceEvent sched_wakeup_new = 114;
inline bool FtraceEvent::has_sched_wakeup_new() const {
  return event_case() == kSchedWakeupNew;
}
inline bool FtraceEvent::_internal_has_sched_wakeup_new() const {
  return event_case() == kSchedWakeupNew;
}
inline void FtraceEvent::set_has_sched_wakeup_new() {
  _impl_._oneof_case_[0] = kSchedWakeupNew;
}
inline ::perfetto::protos::SchedWakeupNewFtraceEvent* FtraceEvent::release_sched_wakeup_new() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_wakeup_new)
  if (event_case() == kSchedWakeupNew) {
    clear_has_event();
    ::perfetto::protos::SchedWakeupNewFtraceEvent* temp = _impl_.event_.sched_wakeup_new_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_wakeup_new_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedWakeupNewFtraceEvent& FtraceEvent::_internal_sched_wakeup_new() const {
  return event_case() == kSchedWakeupNew
      ? *_impl_.event_.sched_wakeup_new_
      : reinterpret_cast<::perfetto::protos::SchedWakeupNewFtraceEvent&>(::perfetto::protos::_SchedWakeupNewFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedWakeupNewFtraceEvent& FtraceEvent::sched_wakeup_new() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_wakeup_new)
  return _internal_sched_wakeup_new();
}
inline ::perfetto::protos::SchedWakeupNewFtraceEvent* FtraceEvent::unsafe_arena_release_sched_wakeup_new() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_wakeup_new)
  if (event_case() == kSchedWakeupNew) {
    clear_has_event();
    ::perfetto::protos::SchedWakeupNewFtraceEvent* temp = _impl_.event_.sched_wakeup_new_;
    _impl_.event_.sched_wakeup_new_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_wakeup_new(::perfetto::protos::SchedWakeupNewFtraceEvent* sched_wakeup_new) {
  clear_event();
  if (sched_wakeup_new) {
    set_has_sched_wakeup_new();
    _impl_.event_.sched_wakeup_new_ = sched_wakeup_new;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_wakeup_new)
}
inline ::perfetto::protos::SchedWakeupNewFtraceEvent* FtraceEvent::_internal_mutable_sched_wakeup_new() {
  if (event_case() != kSchedWakeupNew) {
    clear_event();
    set_has_sched_wakeup_new();
    _impl_.event_.sched_wakeup_new_ = CreateMaybeMessage< ::perfetto::protos::SchedWakeupNewFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_wakeup_new_;
}
inline ::perfetto::protos::SchedWakeupNewFtraceEvent* FtraceEvent::mutable_sched_wakeup_new() {
  ::perfetto::protos::SchedWakeupNewFtraceEvent* _msg = _internal_mutable_sched_wakeup_new();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_wakeup_new)
  return _msg;
}

// .perfetto.protos.BlockBioBackmergeFtraceEvent block_bio_backmerge = 115;
inline bool FtraceEvent::has_block_bio_backmerge() const {
  return event_case() == kBlockBioBackmerge;
}
inline bool FtraceEvent::_internal_has_block_bio_backmerge() const {
  return event_case() == kBlockBioBackmerge;
}
inline void FtraceEvent::set_has_block_bio_backmerge() {
  _impl_._oneof_case_[0] = kBlockBioBackmerge;
}
inline ::perfetto::protos::BlockBioBackmergeFtraceEvent* FtraceEvent::release_block_bio_backmerge() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_backmerge)
  if (event_case() == kBlockBioBackmerge) {
    clear_has_event();
    ::perfetto::protos::BlockBioBackmergeFtraceEvent* temp = _impl_.event_.block_bio_backmerge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_bio_backmerge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioBackmergeFtraceEvent& FtraceEvent::_internal_block_bio_backmerge() const {
  return event_case() == kBlockBioBackmerge
      ? *_impl_.event_.block_bio_backmerge_
      : reinterpret_cast<::perfetto::protos::BlockBioBackmergeFtraceEvent&>(::perfetto::protos::_BlockBioBackmergeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockBioBackmergeFtraceEvent& FtraceEvent::block_bio_backmerge() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_backmerge)
  return _internal_block_bio_backmerge();
}
inline ::perfetto::protos::BlockBioBackmergeFtraceEvent* FtraceEvent::unsafe_arena_release_block_bio_backmerge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_bio_backmerge)
  if (event_case() == kBlockBioBackmerge) {
    clear_has_event();
    ::perfetto::protos::BlockBioBackmergeFtraceEvent* temp = _impl_.event_.block_bio_backmerge_;
    _impl_.event_.block_bio_backmerge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_bio_backmerge(::perfetto::protos::BlockBioBackmergeFtraceEvent* block_bio_backmerge) {
  clear_event();
  if (block_bio_backmerge) {
    set_has_block_bio_backmerge();
    _impl_.event_.block_bio_backmerge_ = block_bio_backmerge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_bio_backmerge)
}
inline ::perfetto::protos::BlockBioBackmergeFtraceEvent* FtraceEvent::_internal_mutable_block_bio_backmerge() {
  if (event_case() != kBlockBioBackmerge) {
    clear_event();
    set_has_block_bio_backmerge();
    _impl_.event_.block_bio_backmerge_ = CreateMaybeMessage< ::perfetto::protos::BlockBioBackmergeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_bio_backmerge_;
}
inline ::perfetto::protos::BlockBioBackmergeFtraceEvent* FtraceEvent::mutable_block_bio_backmerge() {
  ::perfetto::protos::BlockBioBackmergeFtraceEvent* _msg = _internal_mutable_block_bio_backmerge();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_backmerge)
  return _msg;
}

// .perfetto.protos.BlockBioBounceFtraceEvent block_bio_bounce = 116;
inline bool FtraceEvent::has_block_bio_bounce() const {
  return event_case() == kBlockBioBounce;
}
inline bool FtraceEvent::_internal_has_block_bio_bounce() const {
  return event_case() == kBlockBioBounce;
}
inline void FtraceEvent::set_has_block_bio_bounce() {
  _impl_._oneof_case_[0] = kBlockBioBounce;
}
inline ::perfetto::protos::BlockBioBounceFtraceEvent* FtraceEvent::release_block_bio_bounce() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_bounce)
  if (event_case() == kBlockBioBounce) {
    clear_has_event();
    ::perfetto::protos::BlockBioBounceFtraceEvent* temp = _impl_.event_.block_bio_bounce_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_bio_bounce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioBounceFtraceEvent& FtraceEvent::_internal_block_bio_bounce() const {
  return event_case() == kBlockBioBounce
      ? *_impl_.event_.block_bio_bounce_
      : reinterpret_cast<::perfetto::protos::BlockBioBounceFtraceEvent&>(::perfetto::protos::_BlockBioBounceFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockBioBounceFtraceEvent& FtraceEvent::block_bio_bounce() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_bounce)
  return _internal_block_bio_bounce();
}
inline ::perfetto::protos::BlockBioBounceFtraceEvent* FtraceEvent::unsafe_arena_release_block_bio_bounce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_bio_bounce)
  if (event_case() == kBlockBioBounce) {
    clear_has_event();
    ::perfetto::protos::BlockBioBounceFtraceEvent* temp = _impl_.event_.block_bio_bounce_;
    _impl_.event_.block_bio_bounce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_bio_bounce(::perfetto::protos::BlockBioBounceFtraceEvent* block_bio_bounce) {
  clear_event();
  if (block_bio_bounce) {
    set_has_block_bio_bounce();
    _impl_.event_.block_bio_bounce_ = block_bio_bounce;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_bio_bounce)
}
inline ::perfetto::protos::BlockBioBounceFtraceEvent* FtraceEvent::_internal_mutable_block_bio_bounce() {
  if (event_case() != kBlockBioBounce) {
    clear_event();
    set_has_block_bio_bounce();
    _impl_.event_.block_bio_bounce_ = CreateMaybeMessage< ::perfetto::protos::BlockBioBounceFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_bio_bounce_;
}
inline ::perfetto::protos::BlockBioBounceFtraceEvent* FtraceEvent::mutable_block_bio_bounce() {
  ::perfetto::protos::BlockBioBounceFtraceEvent* _msg = _internal_mutable_block_bio_bounce();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_bounce)
  return _msg;
}

// .perfetto.protos.BlockBioCompleteFtraceEvent block_bio_complete = 117;
inline bool FtraceEvent::has_block_bio_complete() const {
  return event_case() == kBlockBioComplete;
}
inline bool FtraceEvent::_internal_has_block_bio_complete() const {
  return event_case() == kBlockBioComplete;
}
inline void FtraceEvent::set_has_block_bio_complete() {
  _impl_._oneof_case_[0] = kBlockBioComplete;
}
inline ::perfetto::protos::BlockBioCompleteFtraceEvent* FtraceEvent::release_block_bio_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_complete)
  if (event_case() == kBlockBioComplete) {
    clear_has_event();
    ::perfetto::protos::BlockBioCompleteFtraceEvent* temp = _impl_.event_.block_bio_complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_bio_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioCompleteFtraceEvent& FtraceEvent::_internal_block_bio_complete() const {
  return event_case() == kBlockBioComplete
      ? *_impl_.event_.block_bio_complete_
      : reinterpret_cast<::perfetto::protos::BlockBioCompleteFtraceEvent&>(::perfetto::protos::_BlockBioCompleteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockBioCompleteFtraceEvent& FtraceEvent::block_bio_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_complete)
  return _internal_block_bio_complete();
}
inline ::perfetto::protos::BlockBioCompleteFtraceEvent* FtraceEvent::unsafe_arena_release_block_bio_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_bio_complete)
  if (event_case() == kBlockBioComplete) {
    clear_has_event();
    ::perfetto::protos::BlockBioCompleteFtraceEvent* temp = _impl_.event_.block_bio_complete_;
    _impl_.event_.block_bio_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_bio_complete(::perfetto::protos::BlockBioCompleteFtraceEvent* block_bio_complete) {
  clear_event();
  if (block_bio_complete) {
    set_has_block_bio_complete();
    _impl_.event_.block_bio_complete_ = block_bio_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_bio_complete)
}
inline ::perfetto::protos::BlockBioCompleteFtraceEvent* FtraceEvent::_internal_mutable_block_bio_complete() {
  if (event_case() != kBlockBioComplete) {
    clear_event();
    set_has_block_bio_complete();
    _impl_.event_.block_bio_complete_ = CreateMaybeMessage< ::perfetto::protos::BlockBioCompleteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_bio_complete_;
}
inline ::perfetto::protos::BlockBioCompleteFtraceEvent* FtraceEvent::mutable_block_bio_complete() {
  ::perfetto::protos::BlockBioCompleteFtraceEvent* _msg = _internal_mutable_block_bio_complete();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_complete)
  return _msg;
}

// .perfetto.protos.BlockBioFrontmergeFtraceEvent block_bio_frontmerge = 118;
inline bool FtraceEvent::has_block_bio_frontmerge() const {
  return event_case() == kBlockBioFrontmerge;
}
inline bool FtraceEvent::_internal_has_block_bio_frontmerge() const {
  return event_case() == kBlockBioFrontmerge;
}
inline void FtraceEvent::set_has_block_bio_frontmerge() {
  _impl_._oneof_case_[0] = kBlockBioFrontmerge;
}
inline ::perfetto::protos::BlockBioFrontmergeFtraceEvent* FtraceEvent::release_block_bio_frontmerge() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  if (event_case() == kBlockBioFrontmerge) {
    clear_has_event();
    ::perfetto::protos::BlockBioFrontmergeFtraceEvent* temp = _impl_.event_.block_bio_frontmerge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_bio_frontmerge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& FtraceEvent::_internal_block_bio_frontmerge() const {
  return event_case() == kBlockBioFrontmerge
      ? *_impl_.event_.block_bio_frontmerge_
      : reinterpret_cast<::perfetto::protos::BlockBioFrontmergeFtraceEvent&>(::perfetto::protos::_BlockBioFrontmergeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockBioFrontmergeFtraceEvent& FtraceEvent::block_bio_frontmerge() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  return _internal_block_bio_frontmerge();
}
inline ::perfetto::protos::BlockBioFrontmergeFtraceEvent* FtraceEvent::unsafe_arena_release_block_bio_frontmerge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  if (event_case() == kBlockBioFrontmerge) {
    clear_has_event();
    ::perfetto::protos::BlockBioFrontmergeFtraceEvent* temp = _impl_.event_.block_bio_frontmerge_;
    _impl_.event_.block_bio_frontmerge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_bio_frontmerge(::perfetto::protos::BlockBioFrontmergeFtraceEvent* block_bio_frontmerge) {
  clear_event();
  if (block_bio_frontmerge) {
    set_has_block_bio_frontmerge();
    _impl_.event_.block_bio_frontmerge_ = block_bio_frontmerge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_bio_frontmerge)
}
inline ::perfetto::protos::BlockBioFrontmergeFtraceEvent* FtraceEvent::_internal_mutable_block_bio_frontmerge() {
  if (event_case() != kBlockBioFrontmerge) {
    clear_event();
    set_has_block_bio_frontmerge();
    _impl_.event_.block_bio_frontmerge_ = CreateMaybeMessage< ::perfetto::protos::BlockBioFrontmergeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_bio_frontmerge_;
}
inline ::perfetto::protos::BlockBioFrontmergeFtraceEvent* FtraceEvent::mutable_block_bio_frontmerge() {
  ::perfetto::protos::BlockBioFrontmergeFtraceEvent* _msg = _internal_mutable_block_bio_frontmerge();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_frontmerge)
  return _msg;
}

// .perfetto.protos.BlockBioQueueFtraceEvent block_bio_queue = 119;
inline bool FtraceEvent::has_block_bio_queue() const {
  return event_case() == kBlockBioQueue;
}
inline bool FtraceEvent::_internal_has_block_bio_queue() const {
  return event_case() == kBlockBioQueue;
}
inline void FtraceEvent::set_has_block_bio_queue() {
  _impl_._oneof_case_[0] = kBlockBioQueue;
}
inline ::perfetto::protos::BlockBioQueueFtraceEvent* FtraceEvent::release_block_bio_queue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_queue)
  if (event_case() == kBlockBioQueue) {
    clear_has_event();
    ::perfetto::protos::BlockBioQueueFtraceEvent* temp = _impl_.event_.block_bio_queue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_bio_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioQueueFtraceEvent& FtraceEvent::_internal_block_bio_queue() const {
  return event_case() == kBlockBioQueue
      ? *_impl_.event_.block_bio_queue_
      : reinterpret_cast<::perfetto::protos::BlockBioQueueFtraceEvent&>(::perfetto::protos::_BlockBioQueueFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockBioQueueFtraceEvent& FtraceEvent::block_bio_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_queue)
  return _internal_block_bio_queue();
}
inline ::perfetto::protos::BlockBioQueueFtraceEvent* FtraceEvent::unsafe_arena_release_block_bio_queue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_bio_queue)
  if (event_case() == kBlockBioQueue) {
    clear_has_event();
    ::perfetto::protos::BlockBioQueueFtraceEvent* temp = _impl_.event_.block_bio_queue_;
    _impl_.event_.block_bio_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_bio_queue(::perfetto::protos::BlockBioQueueFtraceEvent* block_bio_queue) {
  clear_event();
  if (block_bio_queue) {
    set_has_block_bio_queue();
    _impl_.event_.block_bio_queue_ = block_bio_queue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_bio_queue)
}
inline ::perfetto::protos::BlockBioQueueFtraceEvent* FtraceEvent::_internal_mutable_block_bio_queue() {
  if (event_case() != kBlockBioQueue) {
    clear_event();
    set_has_block_bio_queue();
    _impl_.event_.block_bio_queue_ = CreateMaybeMessage< ::perfetto::protos::BlockBioQueueFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_bio_queue_;
}
inline ::perfetto::protos::BlockBioQueueFtraceEvent* FtraceEvent::mutable_block_bio_queue() {
  ::perfetto::protos::BlockBioQueueFtraceEvent* _msg = _internal_mutable_block_bio_queue();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_queue)
  return _msg;
}

// .perfetto.protos.BlockBioRemapFtraceEvent block_bio_remap = 120;
inline bool FtraceEvent::has_block_bio_remap() const {
  return event_case() == kBlockBioRemap;
}
inline bool FtraceEvent::_internal_has_block_bio_remap() const {
  return event_case() == kBlockBioRemap;
}
inline void FtraceEvent::set_has_block_bio_remap() {
  _impl_._oneof_case_[0] = kBlockBioRemap;
}
inline ::perfetto::protos::BlockBioRemapFtraceEvent* FtraceEvent::release_block_bio_remap() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_bio_remap)
  if (event_case() == kBlockBioRemap) {
    clear_has_event();
    ::perfetto::protos::BlockBioRemapFtraceEvent* temp = _impl_.event_.block_bio_remap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_bio_remap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockBioRemapFtraceEvent& FtraceEvent::_internal_block_bio_remap() const {
  return event_case() == kBlockBioRemap
      ? *_impl_.event_.block_bio_remap_
      : reinterpret_cast<::perfetto::protos::BlockBioRemapFtraceEvent&>(::perfetto::protos::_BlockBioRemapFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockBioRemapFtraceEvent& FtraceEvent::block_bio_remap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_bio_remap)
  return _internal_block_bio_remap();
}
inline ::perfetto::protos::BlockBioRemapFtraceEvent* FtraceEvent::unsafe_arena_release_block_bio_remap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_bio_remap)
  if (event_case() == kBlockBioRemap) {
    clear_has_event();
    ::perfetto::protos::BlockBioRemapFtraceEvent* temp = _impl_.event_.block_bio_remap_;
    _impl_.event_.block_bio_remap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_bio_remap(::perfetto::protos::BlockBioRemapFtraceEvent* block_bio_remap) {
  clear_event();
  if (block_bio_remap) {
    set_has_block_bio_remap();
    _impl_.event_.block_bio_remap_ = block_bio_remap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_bio_remap)
}
inline ::perfetto::protos::BlockBioRemapFtraceEvent* FtraceEvent::_internal_mutable_block_bio_remap() {
  if (event_case() != kBlockBioRemap) {
    clear_event();
    set_has_block_bio_remap();
    _impl_.event_.block_bio_remap_ = CreateMaybeMessage< ::perfetto::protos::BlockBioRemapFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_bio_remap_;
}
inline ::perfetto::protos::BlockBioRemapFtraceEvent* FtraceEvent::mutable_block_bio_remap() {
  ::perfetto::protos::BlockBioRemapFtraceEvent* _msg = _internal_mutable_block_bio_remap();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_bio_remap)
  return _msg;
}

// .perfetto.protos.BlockDirtyBufferFtraceEvent block_dirty_buffer = 121;
inline bool FtraceEvent::has_block_dirty_buffer() const {
  return event_case() == kBlockDirtyBuffer;
}
inline bool FtraceEvent::_internal_has_block_dirty_buffer() const {
  return event_case() == kBlockDirtyBuffer;
}
inline void FtraceEvent::set_has_block_dirty_buffer() {
  _impl_._oneof_case_[0] = kBlockDirtyBuffer;
}
inline ::perfetto::protos::BlockDirtyBufferFtraceEvent* FtraceEvent::release_block_dirty_buffer() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_dirty_buffer)
  if (event_case() == kBlockDirtyBuffer) {
    clear_has_event();
    ::perfetto::protos::BlockDirtyBufferFtraceEvent* temp = _impl_.event_.block_dirty_buffer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_dirty_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockDirtyBufferFtraceEvent& FtraceEvent::_internal_block_dirty_buffer() const {
  return event_case() == kBlockDirtyBuffer
      ? *_impl_.event_.block_dirty_buffer_
      : reinterpret_cast<::perfetto::protos::BlockDirtyBufferFtraceEvent&>(::perfetto::protos::_BlockDirtyBufferFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockDirtyBufferFtraceEvent& FtraceEvent::block_dirty_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_dirty_buffer)
  return _internal_block_dirty_buffer();
}
inline ::perfetto::protos::BlockDirtyBufferFtraceEvent* FtraceEvent::unsafe_arena_release_block_dirty_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_dirty_buffer)
  if (event_case() == kBlockDirtyBuffer) {
    clear_has_event();
    ::perfetto::protos::BlockDirtyBufferFtraceEvent* temp = _impl_.event_.block_dirty_buffer_;
    _impl_.event_.block_dirty_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_dirty_buffer(::perfetto::protos::BlockDirtyBufferFtraceEvent* block_dirty_buffer) {
  clear_event();
  if (block_dirty_buffer) {
    set_has_block_dirty_buffer();
    _impl_.event_.block_dirty_buffer_ = block_dirty_buffer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_dirty_buffer)
}
inline ::perfetto::protos::BlockDirtyBufferFtraceEvent* FtraceEvent::_internal_mutable_block_dirty_buffer() {
  if (event_case() != kBlockDirtyBuffer) {
    clear_event();
    set_has_block_dirty_buffer();
    _impl_.event_.block_dirty_buffer_ = CreateMaybeMessage< ::perfetto::protos::BlockDirtyBufferFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_dirty_buffer_;
}
inline ::perfetto::protos::BlockDirtyBufferFtraceEvent* FtraceEvent::mutable_block_dirty_buffer() {
  ::perfetto::protos::BlockDirtyBufferFtraceEvent* _msg = _internal_mutable_block_dirty_buffer();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_dirty_buffer)
  return _msg;
}

// .perfetto.protos.BlockGetrqFtraceEvent block_getrq = 122;
inline bool FtraceEvent::has_block_getrq() const {
  return event_case() == kBlockGetrq;
}
inline bool FtraceEvent::_internal_has_block_getrq() const {
  return event_case() == kBlockGetrq;
}
inline void FtraceEvent::set_has_block_getrq() {
  _impl_._oneof_case_[0] = kBlockGetrq;
}
inline ::perfetto::protos::BlockGetrqFtraceEvent* FtraceEvent::release_block_getrq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_getrq)
  if (event_case() == kBlockGetrq) {
    clear_has_event();
    ::perfetto::protos::BlockGetrqFtraceEvent* temp = _impl_.event_.block_getrq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_getrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockGetrqFtraceEvent& FtraceEvent::_internal_block_getrq() const {
  return event_case() == kBlockGetrq
      ? *_impl_.event_.block_getrq_
      : reinterpret_cast<::perfetto::protos::BlockGetrqFtraceEvent&>(::perfetto::protos::_BlockGetrqFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockGetrqFtraceEvent& FtraceEvent::block_getrq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_getrq)
  return _internal_block_getrq();
}
inline ::perfetto::protos::BlockGetrqFtraceEvent* FtraceEvent::unsafe_arena_release_block_getrq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_getrq)
  if (event_case() == kBlockGetrq) {
    clear_has_event();
    ::perfetto::protos::BlockGetrqFtraceEvent* temp = _impl_.event_.block_getrq_;
    _impl_.event_.block_getrq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_getrq(::perfetto::protos::BlockGetrqFtraceEvent* block_getrq) {
  clear_event();
  if (block_getrq) {
    set_has_block_getrq();
    _impl_.event_.block_getrq_ = block_getrq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_getrq)
}
inline ::perfetto::protos::BlockGetrqFtraceEvent* FtraceEvent::_internal_mutable_block_getrq() {
  if (event_case() != kBlockGetrq) {
    clear_event();
    set_has_block_getrq();
    _impl_.event_.block_getrq_ = CreateMaybeMessage< ::perfetto::protos::BlockGetrqFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_getrq_;
}
inline ::perfetto::protos::BlockGetrqFtraceEvent* FtraceEvent::mutable_block_getrq() {
  ::perfetto::protos::BlockGetrqFtraceEvent* _msg = _internal_mutable_block_getrq();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_getrq)
  return _msg;
}

// .perfetto.protos.BlockPlugFtraceEvent block_plug = 123;
inline bool FtraceEvent::has_block_plug() const {
  return event_case() == kBlockPlug;
}
inline bool FtraceEvent::_internal_has_block_plug() const {
  return event_case() == kBlockPlug;
}
inline void FtraceEvent::set_has_block_plug() {
  _impl_._oneof_case_[0] = kBlockPlug;
}
inline ::perfetto::protos::BlockPlugFtraceEvent* FtraceEvent::release_block_plug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_plug)
  if (event_case() == kBlockPlug) {
    clear_has_event();
    ::perfetto::protos::BlockPlugFtraceEvent* temp = _impl_.event_.block_plug_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_plug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockPlugFtraceEvent& FtraceEvent::_internal_block_plug() const {
  return event_case() == kBlockPlug
      ? *_impl_.event_.block_plug_
      : reinterpret_cast<::perfetto::protos::BlockPlugFtraceEvent&>(::perfetto::protos::_BlockPlugFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockPlugFtraceEvent& FtraceEvent::block_plug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_plug)
  return _internal_block_plug();
}
inline ::perfetto::protos::BlockPlugFtraceEvent* FtraceEvent::unsafe_arena_release_block_plug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_plug)
  if (event_case() == kBlockPlug) {
    clear_has_event();
    ::perfetto::protos::BlockPlugFtraceEvent* temp = _impl_.event_.block_plug_;
    _impl_.event_.block_plug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_plug(::perfetto::protos::BlockPlugFtraceEvent* block_plug) {
  clear_event();
  if (block_plug) {
    set_has_block_plug();
    _impl_.event_.block_plug_ = block_plug;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_plug)
}
inline ::perfetto::protos::BlockPlugFtraceEvent* FtraceEvent::_internal_mutable_block_plug() {
  if (event_case() != kBlockPlug) {
    clear_event();
    set_has_block_plug();
    _impl_.event_.block_plug_ = CreateMaybeMessage< ::perfetto::protos::BlockPlugFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_plug_;
}
inline ::perfetto::protos::BlockPlugFtraceEvent* FtraceEvent::mutable_block_plug() {
  ::perfetto::protos::BlockPlugFtraceEvent* _msg = _internal_mutable_block_plug();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_plug)
  return _msg;
}

// .perfetto.protos.BlockRqAbortFtraceEvent block_rq_abort = 124;
inline bool FtraceEvent::has_block_rq_abort() const {
  return event_case() == kBlockRqAbort;
}
inline bool FtraceEvent::_internal_has_block_rq_abort() const {
  return event_case() == kBlockRqAbort;
}
inline void FtraceEvent::set_has_block_rq_abort() {
  _impl_._oneof_case_[0] = kBlockRqAbort;
}
inline ::perfetto::protos::BlockRqAbortFtraceEvent* FtraceEvent::release_block_rq_abort() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_abort)
  if (event_case() == kBlockRqAbort) {
    clear_has_event();
    ::perfetto::protos::BlockRqAbortFtraceEvent* temp = _impl_.event_.block_rq_abort_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_rq_abort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqAbortFtraceEvent& FtraceEvent::_internal_block_rq_abort() const {
  return event_case() == kBlockRqAbort
      ? *_impl_.event_.block_rq_abort_
      : reinterpret_cast<::perfetto::protos::BlockRqAbortFtraceEvent&>(::perfetto::protos::_BlockRqAbortFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockRqAbortFtraceEvent& FtraceEvent::block_rq_abort() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_abort)
  return _internal_block_rq_abort();
}
inline ::perfetto::protos::BlockRqAbortFtraceEvent* FtraceEvent::unsafe_arena_release_block_rq_abort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_rq_abort)
  if (event_case() == kBlockRqAbort) {
    clear_has_event();
    ::perfetto::protos::BlockRqAbortFtraceEvent* temp = _impl_.event_.block_rq_abort_;
    _impl_.event_.block_rq_abort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_rq_abort(::perfetto::protos::BlockRqAbortFtraceEvent* block_rq_abort) {
  clear_event();
  if (block_rq_abort) {
    set_has_block_rq_abort();
    _impl_.event_.block_rq_abort_ = block_rq_abort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_rq_abort)
}
inline ::perfetto::protos::BlockRqAbortFtraceEvent* FtraceEvent::_internal_mutable_block_rq_abort() {
  if (event_case() != kBlockRqAbort) {
    clear_event();
    set_has_block_rq_abort();
    _impl_.event_.block_rq_abort_ = CreateMaybeMessage< ::perfetto::protos::BlockRqAbortFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_rq_abort_;
}
inline ::perfetto::protos::BlockRqAbortFtraceEvent* FtraceEvent::mutable_block_rq_abort() {
  ::perfetto::protos::BlockRqAbortFtraceEvent* _msg = _internal_mutable_block_rq_abort();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_abort)
  return _msg;
}

// .perfetto.protos.BlockRqCompleteFtraceEvent block_rq_complete = 125;
inline bool FtraceEvent::has_block_rq_complete() const {
  return event_case() == kBlockRqComplete;
}
inline bool FtraceEvent::_internal_has_block_rq_complete() const {
  return event_case() == kBlockRqComplete;
}
inline void FtraceEvent::set_has_block_rq_complete() {
  _impl_._oneof_case_[0] = kBlockRqComplete;
}
inline ::perfetto::protos::BlockRqCompleteFtraceEvent* FtraceEvent::release_block_rq_complete() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_complete)
  if (event_case() == kBlockRqComplete) {
    clear_has_event();
    ::perfetto::protos::BlockRqCompleteFtraceEvent* temp = _impl_.event_.block_rq_complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_rq_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqCompleteFtraceEvent& FtraceEvent::_internal_block_rq_complete() const {
  return event_case() == kBlockRqComplete
      ? *_impl_.event_.block_rq_complete_
      : reinterpret_cast<::perfetto::protos::BlockRqCompleteFtraceEvent&>(::perfetto::protos::_BlockRqCompleteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockRqCompleteFtraceEvent& FtraceEvent::block_rq_complete() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_complete)
  return _internal_block_rq_complete();
}
inline ::perfetto::protos::BlockRqCompleteFtraceEvent* FtraceEvent::unsafe_arena_release_block_rq_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_rq_complete)
  if (event_case() == kBlockRqComplete) {
    clear_has_event();
    ::perfetto::protos::BlockRqCompleteFtraceEvent* temp = _impl_.event_.block_rq_complete_;
    _impl_.event_.block_rq_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_rq_complete(::perfetto::protos::BlockRqCompleteFtraceEvent* block_rq_complete) {
  clear_event();
  if (block_rq_complete) {
    set_has_block_rq_complete();
    _impl_.event_.block_rq_complete_ = block_rq_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_rq_complete)
}
inline ::perfetto::protos::BlockRqCompleteFtraceEvent* FtraceEvent::_internal_mutable_block_rq_complete() {
  if (event_case() != kBlockRqComplete) {
    clear_event();
    set_has_block_rq_complete();
    _impl_.event_.block_rq_complete_ = CreateMaybeMessage< ::perfetto::protos::BlockRqCompleteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_rq_complete_;
}
inline ::perfetto::protos::BlockRqCompleteFtraceEvent* FtraceEvent::mutable_block_rq_complete() {
  ::perfetto::protos::BlockRqCompleteFtraceEvent* _msg = _internal_mutable_block_rq_complete();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_complete)
  return _msg;
}

// .perfetto.protos.BlockRqInsertFtraceEvent block_rq_insert = 126;
inline bool FtraceEvent::has_block_rq_insert() const {
  return event_case() == kBlockRqInsert;
}
inline bool FtraceEvent::_internal_has_block_rq_insert() const {
  return event_case() == kBlockRqInsert;
}
inline void FtraceEvent::set_has_block_rq_insert() {
  _impl_._oneof_case_[0] = kBlockRqInsert;
}
inline ::perfetto::protos::BlockRqInsertFtraceEvent* FtraceEvent::release_block_rq_insert() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_insert)
  if (event_case() == kBlockRqInsert) {
    clear_has_event();
    ::perfetto::protos::BlockRqInsertFtraceEvent* temp = _impl_.event_.block_rq_insert_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_rq_insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqInsertFtraceEvent& FtraceEvent::_internal_block_rq_insert() const {
  return event_case() == kBlockRqInsert
      ? *_impl_.event_.block_rq_insert_
      : reinterpret_cast<::perfetto::protos::BlockRqInsertFtraceEvent&>(::perfetto::protos::_BlockRqInsertFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockRqInsertFtraceEvent& FtraceEvent::block_rq_insert() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_insert)
  return _internal_block_rq_insert();
}
inline ::perfetto::protos::BlockRqInsertFtraceEvent* FtraceEvent::unsafe_arena_release_block_rq_insert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_rq_insert)
  if (event_case() == kBlockRqInsert) {
    clear_has_event();
    ::perfetto::protos::BlockRqInsertFtraceEvent* temp = _impl_.event_.block_rq_insert_;
    _impl_.event_.block_rq_insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_rq_insert(::perfetto::protos::BlockRqInsertFtraceEvent* block_rq_insert) {
  clear_event();
  if (block_rq_insert) {
    set_has_block_rq_insert();
    _impl_.event_.block_rq_insert_ = block_rq_insert;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_rq_insert)
}
inline ::perfetto::protos::BlockRqInsertFtraceEvent* FtraceEvent::_internal_mutable_block_rq_insert() {
  if (event_case() != kBlockRqInsert) {
    clear_event();
    set_has_block_rq_insert();
    _impl_.event_.block_rq_insert_ = CreateMaybeMessage< ::perfetto::protos::BlockRqInsertFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_rq_insert_;
}
inline ::perfetto::protos::BlockRqInsertFtraceEvent* FtraceEvent::mutable_block_rq_insert() {
  ::perfetto::protos::BlockRqInsertFtraceEvent* _msg = _internal_mutable_block_rq_insert();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_insert)
  return _msg;
}

// .perfetto.protos.BlockRqRemapFtraceEvent block_rq_remap = 128;
inline bool FtraceEvent::has_block_rq_remap() const {
  return event_case() == kBlockRqRemap;
}
inline bool FtraceEvent::_internal_has_block_rq_remap() const {
  return event_case() == kBlockRqRemap;
}
inline void FtraceEvent::set_has_block_rq_remap() {
  _impl_._oneof_case_[0] = kBlockRqRemap;
}
inline ::perfetto::protos::BlockRqRemapFtraceEvent* FtraceEvent::release_block_rq_remap() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_remap)
  if (event_case() == kBlockRqRemap) {
    clear_has_event();
    ::perfetto::protos::BlockRqRemapFtraceEvent* temp = _impl_.event_.block_rq_remap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_rq_remap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqRemapFtraceEvent& FtraceEvent::_internal_block_rq_remap() const {
  return event_case() == kBlockRqRemap
      ? *_impl_.event_.block_rq_remap_
      : reinterpret_cast<::perfetto::protos::BlockRqRemapFtraceEvent&>(::perfetto::protos::_BlockRqRemapFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockRqRemapFtraceEvent& FtraceEvent::block_rq_remap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_remap)
  return _internal_block_rq_remap();
}
inline ::perfetto::protos::BlockRqRemapFtraceEvent* FtraceEvent::unsafe_arena_release_block_rq_remap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_rq_remap)
  if (event_case() == kBlockRqRemap) {
    clear_has_event();
    ::perfetto::protos::BlockRqRemapFtraceEvent* temp = _impl_.event_.block_rq_remap_;
    _impl_.event_.block_rq_remap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_rq_remap(::perfetto::protos::BlockRqRemapFtraceEvent* block_rq_remap) {
  clear_event();
  if (block_rq_remap) {
    set_has_block_rq_remap();
    _impl_.event_.block_rq_remap_ = block_rq_remap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_rq_remap)
}
inline ::perfetto::protos::BlockRqRemapFtraceEvent* FtraceEvent::_internal_mutable_block_rq_remap() {
  if (event_case() != kBlockRqRemap) {
    clear_event();
    set_has_block_rq_remap();
    _impl_.event_.block_rq_remap_ = CreateMaybeMessage< ::perfetto::protos::BlockRqRemapFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_rq_remap_;
}
inline ::perfetto::protos::BlockRqRemapFtraceEvent* FtraceEvent::mutable_block_rq_remap() {
  ::perfetto::protos::BlockRqRemapFtraceEvent* _msg = _internal_mutable_block_rq_remap();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_remap)
  return _msg;
}

// .perfetto.protos.BlockRqRequeueFtraceEvent block_rq_requeue = 129;
inline bool FtraceEvent::has_block_rq_requeue() const {
  return event_case() == kBlockRqRequeue;
}
inline bool FtraceEvent::_internal_has_block_rq_requeue() const {
  return event_case() == kBlockRqRequeue;
}
inline void FtraceEvent::set_has_block_rq_requeue() {
  _impl_._oneof_case_[0] = kBlockRqRequeue;
}
inline ::perfetto::protos::BlockRqRequeueFtraceEvent* FtraceEvent::release_block_rq_requeue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_rq_requeue)
  if (event_case() == kBlockRqRequeue) {
    clear_has_event();
    ::perfetto::protos::BlockRqRequeueFtraceEvent* temp = _impl_.event_.block_rq_requeue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_rq_requeue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockRqRequeueFtraceEvent& FtraceEvent::_internal_block_rq_requeue() const {
  return event_case() == kBlockRqRequeue
      ? *_impl_.event_.block_rq_requeue_
      : reinterpret_cast<::perfetto::protos::BlockRqRequeueFtraceEvent&>(::perfetto::protos::_BlockRqRequeueFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockRqRequeueFtraceEvent& FtraceEvent::block_rq_requeue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_rq_requeue)
  return _internal_block_rq_requeue();
}
inline ::perfetto::protos::BlockRqRequeueFtraceEvent* FtraceEvent::unsafe_arena_release_block_rq_requeue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_rq_requeue)
  if (event_case() == kBlockRqRequeue) {
    clear_has_event();
    ::perfetto::protos::BlockRqRequeueFtraceEvent* temp = _impl_.event_.block_rq_requeue_;
    _impl_.event_.block_rq_requeue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_rq_requeue(::perfetto::protos::BlockRqRequeueFtraceEvent* block_rq_requeue) {
  clear_event();
  if (block_rq_requeue) {
    set_has_block_rq_requeue();
    _impl_.event_.block_rq_requeue_ = block_rq_requeue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_rq_requeue)
}
inline ::perfetto::protos::BlockRqRequeueFtraceEvent* FtraceEvent::_internal_mutable_block_rq_requeue() {
  if (event_case() != kBlockRqRequeue) {
    clear_event();
    set_has_block_rq_requeue();
    _impl_.event_.block_rq_requeue_ = CreateMaybeMessage< ::perfetto::protos::BlockRqRequeueFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_rq_requeue_;
}
inline ::perfetto::protos::BlockRqRequeueFtraceEvent* FtraceEvent::mutable_block_rq_requeue() {
  ::perfetto::protos::BlockRqRequeueFtraceEvent* _msg = _internal_mutable_block_rq_requeue();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_rq_requeue)
  return _msg;
}

// .perfetto.protos.BlockSleeprqFtraceEvent block_sleeprq = 130;
inline bool FtraceEvent::has_block_sleeprq() const {
  return event_case() == kBlockSleeprq;
}
inline bool FtraceEvent::_internal_has_block_sleeprq() const {
  return event_case() == kBlockSleeprq;
}
inline void FtraceEvent::set_has_block_sleeprq() {
  _impl_._oneof_case_[0] = kBlockSleeprq;
}
inline ::perfetto::protos::BlockSleeprqFtraceEvent* FtraceEvent::release_block_sleeprq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_sleeprq)
  if (event_case() == kBlockSleeprq) {
    clear_has_event();
    ::perfetto::protos::BlockSleeprqFtraceEvent* temp = _impl_.event_.block_sleeprq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_sleeprq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockSleeprqFtraceEvent& FtraceEvent::_internal_block_sleeprq() const {
  return event_case() == kBlockSleeprq
      ? *_impl_.event_.block_sleeprq_
      : reinterpret_cast<::perfetto::protos::BlockSleeprqFtraceEvent&>(::perfetto::protos::_BlockSleeprqFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockSleeprqFtraceEvent& FtraceEvent::block_sleeprq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_sleeprq)
  return _internal_block_sleeprq();
}
inline ::perfetto::protos::BlockSleeprqFtraceEvent* FtraceEvent::unsafe_arena_release_block_sleeprq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_sleeprq)
  if (event_case() == kBlockSleeprq) {
    clear_has_event();
    ::perfetto::protos::BlockSleeprqFtraceEvent* temp = _impl_.event_.block_sleeprq_;
    _impl_.event_.block_sleeprq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_sleeprq(::perfetto::protos::BlockSleeprqFtraceEvent* block_sleeprq) {
  clear_event();
  if (block_sleeprq) {
    set_has_block_sleeprq();
    _impl_.event_.block_sleeprq_ = block_sleeprq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_sleeprq)
}
inline ::perfetto::protos::BlockSleeprqFtraceEvent* FtraceEvent::_internal_mutable_block_sleeprq() {
  if (event_case() != kBlockSleeprq) {
    clear_event();
    set_has_block_sleeprq();
    _impl_.event_.block_sleeprq_ = CreateMaybeMessage< ::perfetto::protos::BlockSleeprqFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_sleeprq_;
}
inline ::perfetto::protos::BlockSleeprqFtraceEvent* FtraceEvent::mutable_block_sleeprq() {
  ::perfetto::protos::BlockSleeprqFtraceEvent* _msg = _internal_mutable_block_sleeprq();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_sleeprq)
  return _msg;
}

// .perfetto.protos.BlockSplitFtraceEvent block_split = 131;
inline bool FtraceEvent::has_block_split() const {
  return event_case() == kBlockSplit;
}
inline bool FtraceEvent::_internal_has_block_split() const {
  return event_case() == kBlockSplit;
}
inline void FtraceEvent::set_has_block_split() {
  _impl_._oneof_case_[0] = kBlockSplit;
}
inline ::perfetto::protos::BlockSplitFtraceEvent* FtraceEvent::release_block_split() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_split)
  if (event_case() == kBlockSplit) {
    clear_has_event();
    ::perfetto::protos::BlockSplitFtraceEvent* temp = _impl_.event_.block_split_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_split_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockSplitFtraceEvent& FtraceEvent::_internal_block_split() const {
  return event_case() == kBlockSplit
      ? *_impl_.event_.block_split_
      : reinterpret_cast<::perfetto::protos::BlockSplitFtraceEvent&>(::perfetto::protos::_BlockSplitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockSplitFtraceEvent& FtraceEvent::block_split() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_split)
  return _internal_block_split();
}
inline ::perfetto::protos::BlockSplitFtraceEvent* FtraceEvent::unsafe_arena_release_block_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_split)
  if (event_case() == kBlockSplit) {
    clear_has_event();
    ::perfetto::protos::BlockSplitFtraceEvent* temp = _impl_.event_.block_split_;
    _impl_.event_.block_split_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_split(::perfetto::protos::BlockSplitFtraceEvent* block_split) {
  clear_event();
  if (block_split) {
    set_has_block_split();
    _impl_.event_.block_split_ = block_split;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_split)
}
inline ::perfetto::protos::BlockSplitFtraceEvent* FtraceEvent::_internal_mutable_block_split() {
  if (event_case() != kBlockSplit) {
    clear_event();
    set_has_block_split();
    _impl_.event_.block_split_ = CreateMaybeMessage< ::perfetto::protos::BlockSplitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_split_;
}
inline ::perfetto::protos::BlockSplitFtraceEvent* FtraceEvent::mutable_block_split() {
  ::perfetto::protos::BlockSplitFtraceEvent* _msg = _internal_mutable_block_split();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_split)
  return _msg;
}

// .perfetto.protos.BlockTouchBufferFtraceEvent block_touch_buffer = 132;
inline bool FtraceEvent::has_block_touch_buffer() const {
  return event_case() == kBlockTouchBuffer;
}
inline bool FtraceEvent::_internal_has_block_touch_buffer() const {
  return event_case() == kBlockTouchBuffer;
}
inline void FtraceEvent::set_has_block_touch_buffer() {
  _impl_._oneof_case_[0] = kBlockTouchBuffer;
}
inline ::perfetto::protos::BlockTouchBufferFtraceEvent* FtraceEvent::release_block_touch_buffer() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_touch_buffer)
  if (event_case() == kBlockTouchBuffer) {
    clear_has_event();
    ::perfetto::protos::BlockTouchBufferFtraceEvent* temp = _impl_.event_.block_touch_buffer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_touch_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockTouchBufferFtraceEvent& FtraceEvent::_internal_block_touch_buffer() const {
  return event_case() == kBlockTouchBuffer
      ? *_impl_.event_.block_touch_buffer_
      : reinterpret_cast<::perfetto::protos::BlockTouchBufferFtraceEvent&>(::perfetto::protos::_BlockTouchBufferFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockTouchBufferFtraceEvent& FtraceEvent::block_touch_buffer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_touch_buffer)
  return _internal_block_touch_buffer();
}
inline ::perfetto::protos::BlockTouchBufferFtraceEvent* FtraceEvent::unsafe_arena_release_block_touch_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_touch_buffer)
  if (event_case() == kBlockTouchBuffer) {
    clear_has_event();
    ::perfetto::protos::BlockTouchBufferFtraceEvent* temp = _impl_.event_.block_touch_buffer_;
    _impl_.event_.block_touch_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_touch_buffer(::perfetto::protos::BlockTouchBufferFtraceEvent* block_touch_buffer) {
  clear_event();
  if (block_touch_buffer) {
    set_has_block_touch_buffer();
    _impl_.event_.block_touch_buffer_ = block_touch_buffer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_touch_buffer)
}
inline ::perfetto::protos::BlockTouchBufferFtraceEvent* FtraceEvent::_internal_mutable_block_touch_buffer() {
  if (event_case() != kBlockTouchBuffer) {
    clear_event();
    set_has_block_touch_buffer();
    _impl_.event_.block_touch_buffer_ = CreateMaybeMessage< ::perfetto::protos::BlockTouchBufferFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_touch_buffer_;
}
inline ::perfetto::protos::BlockTouchBufferFtraceEvent* FtraceEvent::mutable_block_touch_buffer() {
  ::perfetto::protos::BlockTouchBufferFtraceEvent* _msg = _internal_mutable_block_touch_buffer();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_touch_buffer)
  return _msg;
}

// .perfetto.protos.BlockUnplugFtraceEvent block_unplug = 133;
inline bool FtraceEvent::has_block_unplug() const {
  return event_case() == kBlockUnplug;
}
inline bool FtraceEvent::_internal_has_block_unplug() const {
  return event_case() == kBlockUnplug;
}
inline void FtraceEvent::set_has_block_unplug() {
  _impl_._oneof_case_[0] = kBlockUnplug;
}
inline ::perfetto::protos::BlockUnplugFtraceEvent* FtraceEvent::release_block_unplug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.block_unplug)
  if (event_case() == kBlockUnplug) {
    clear_has_event();
    ::perfetto::protos::BlockUnplugFtraceEvent* temp = _impl_.event_.block_unplug_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.block_unplug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BlockUnplugFtraceEvent& FtraceEvent::_internal_block_unplug() const {
  return event_case() == kBlockUnplug
      ? *_impl_.event_.block_unplug_
      : reinterpret_cast<::perfetto::protos::BlockUnplugFtraceEvent&>(::perfetto::protos::_BlockUnplugFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BlockUnplugFtraceEvent& FtraceEvent::block_unplug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.block_unplug)
  return _internal_block_unplug();
}
inline ::perfetto::protos::BlockUnplugFtraceEvent* FtraceEvent::unsafe_arena_release_block_unplug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.block_unplug)
  if (event_case() == kBlockUnplug) {
    clear_has_event();
    ::perfetto::protos::BlockUnplugFtraceEvent* temp = _impl_.event_.block_unplug_;
    _impl_.event_.block_unplug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_block_unplug(::perfetto::protos::BlockUnplugFtraceEvent* block_unplug) {
  clear_event();
  if (block_unplug) {
    set_has_block_unplug();
    _impl_.event_.block_unplug_ = block_unplug;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.block_unplug)
}
inline ::perfetto::protos::BlockUnplugFtraceEvent* FtraceEvent::_internal_mutable_block_unplug() {
  if (event_case() != kBlockUnplug) {
    clear_event();
    set_has_block_unplug();
    _impl_.event_.block_unplug_ = CreateMaybeMessage< ::perfetto::protos::BlockUnplugFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.block_unplug_;
}
inline ::perfetto::protos::BlockUnplugFtraceEvent* FtraceEvent::mutable_block_unplug() {
  ::perfetto::protos::BlockUnplugFtraceEvent* _msg = _internal_mutable_block_unplug();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.block_unplug)
  return _msg;
}

// .perfetto.protos.Ext4AllocDaBlocksFtraceEvent ext4_alloc_da_blocks = 134;
inline bool FtraceEvent::has_ext4_alloc_da_blocks() const {
  return event_case() == kExt4AllocDaBlocks;
}
inline bool FtraceEvent::_internal_has_ext4_alloc_da_blocks() const {
  return event_case() == kExt4AllocDaBlocks;
}
inline void FtraceEvent::set_has_ext4_alloc_da_blocks() {
  _impl_._oneof_case_[0] = kExt4AllocDaBlocks;
}
inline ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* FtraceEvent::release_ext4_alloc_da_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  if (event_case() == kExt4AllocDaBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* temp = _impl_.event_.ext4_alloc_da_blocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_alloc_da_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& FtraceEvent::_internal_ext4_alloc_da_blocks() const {
  return event_case() == kExt4AllocDaBlocks
      ? *_impl_.event_.ext4_alloc_da_blocks_
      : reinterpret_cast<::perfetto::protos::Ext4AllocDaBlocksFtraceEvent&>(::perfetto::protos::_Ext4AllocDaBlocksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent& FtraceEvent::ext4_alloc_da_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  return _internal_ext4_alloc_da_blocks();
}
inline ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_alloc_da_blocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  if (event_case() == kExt4AllocDaBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* temp = _impl_.event_.ext4_alloc_da_blocks_;
    _impl_.event_.ext4_alloc_da_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_alloc_da_blocks(::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* ext4_alloc_da_blocks) {
  clear_event();
  if (ext4_alloc_da_blocks) {
    set_has_ext4_alloc_da_blocks();
    _impl_.event_.ext4_alloc_da_blocks_ = ext4_alloc_da_blocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
}
inline ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* FtraceEvent::_internal_mutable_ext4_alloc_da_blocks() {
  if (event_case() != kExt4AllocDaBlocks) {
    clear_event();
    set_has_ext4_alloc_da_blocks();
    _impl_.event_.ext4_alloc_da_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_alloc_da_blocks_;
}
inline ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* FtraceEvent::mutable_ext4_alloc_da_blocks() {
  ::perfetto::protos::Ext4AllocDaBlocksFtraceEvent* _msg = _internal_mutable_ext4_alloc_da_blocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_alloc_da_blocks)
  return _msg;
}

// .perfetto.protos.Ext4AllocateBlocksFtraceEvent ext4_allocate_blocks = 135;
inline bool FtraceEvent::has_ext4_allocate_blocks() const {
  return event_case() == kExt4AllocateBlocks;
}
inline bool FtraceEvent::_internal_has_ext4_allocate_blocks() const {
  return event_case() == kExt4AllocateBlocks;
}
inline void FtraceEvent::set_has_ext4_allocate_blocks() {
  _impl_._oneof_case_[0] = kExt4AllocateBlocks;
}
inline ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* FtraceEvent::release_ext4_allocate_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  if (event_case() == kExt4AllocateBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* temp = _impl_.event_.ext4_allocate_blocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_allocate_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& FtraceEvent::_internal_ext4_allocate_blocks() const {
  return event_case() == kExt4AllocateBlocks
      ? *_impl_.event_.ext4_allocate_blocks_
      : reinterpret_cast<::perfetto::protos::Ext4AllocateBlocksFtraceEvent&>(::perfetto::protos::_Ext4AllocateBlocksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4AllocateBlocksFtraceEvent& FtraceEvent::ext4_allocate_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  return _internal_ext4_allocate_blocks();
}
inline ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_allocate_blocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  if (event_case() == kExt4AllocateBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* temp = _impl_.event_.ext4_allocate_blocks_;
    _impl_.event_.ext4_allocate_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_allocate_blocks(::perfetto::protos::Ext4AllocateBlocksFtraceEvent* ext4_allocate_blocks) {
  clear_event();
  if (ext4_allocate_blocks) {
    set_has_ext4_allocate_blocks();
    _impl_.event_.ext4_allocate_blocks_ = ext4_allocate_blocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
}
inline ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* FtraceEvent::_internal_mutable_ext4_allocate_blocks() {
  if (event_case() != kExt4AllocateBlocks) {
    clear_event();
    set_has_ext4_allocate_blocks();
    _impl_.event_.ext4_allocate_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4AllocateBlocksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_allocate_blocks_;
}
inline ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* FtraceEvent::mutable_ext4_allocate_blocks() {
  ::perfetto::protos::Ext4AllocateBlocksFtraceEvent* _msg = _internal_mutable_ext4_allocate_blocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_allocate_blocks)
  return _msg;
}

// .perfetto.protos.Ext4AllocateInodeFtraceEvent ext4_allocate_inode = 136;
inline bool FtraceEvent::has_ext4_allocate_inode() const {
  return event_case() == kExt4AllocateInode;
}
inline bool FtraceEvent::_internal_has_ext4_allocate_inode() const {
  return event_case() == kExt4AllocateInode;
}
inline void FtraceEvent::set_has_ext4_allocate_inode() {
  _impl_._oneof_case_[0] = kExt4AllocateInode;
}
inline ::perfetto::protos::Ext4AllocateInodeFtraceEvent* FtraceEvent::release_ext4_allocate_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  if (event_case() == kExt4AllocateInode) {
    clear_has_event();
    ::perfetto::protos::Ext4AllocateInodeFtraceEvent* temp = _impl_.event_.ext4_allocate_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_allocate_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& FtraceEvent::_internal_ext4_allocate_inode() const {
  return event_case() == kExt4AllocateInode
      ? *_impl_.event_.ext4_allocate_inode_
      : reinterpret_cast<::perfetto::protos::Ext4AllocateInodeFtraceEvent&>(::perfetto::protos::_Ext4AllocateInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4AllocateInodeFtraceEvent& FtraceEvent::ext4_allocate_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  return _internal_ext4_allocate_inode();
}
inline ::perfetto::protos::Ext4AllocateInodeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_allocate_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  if (event_case() == kExt4AllocateInode) {
    clear_has_event();
    ::perfetto::protos::Ext4AllocateInodeFtraceEvent* temp = _impl_.event_.ext4_allocate_inode_;
    _impl_.event_.ext4_allocate_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_allocate_inode(::perfetto::protos::Ext4AllocateInodeFtraceEvent* ext4_allocate_inode) {
  clear_event();
  if (ext4_allocate_inode) {
    set_has_ext4_allocate_inode();
    _impl_.event_.ext4_allocate_inode_ = ext4_allocate_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_allocate_inode)
}
inline ::perfetto::protos::Ext4AllocateInodeFtraceEvent* FtraceEvent::_internal_mutable_ext4_allocate_inode() {
  if (event_case() != kExt4AllocateInode) {
    clear_event();
    set_has_ext4_allocate_inode();
    _impl_.event_.ext4_allocate_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4AllocateInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_allocate_inode_;
}
inline ::perfetto::protos::Ext4AllocateInodeFtraceEvent* FtraceEvent::mutable_ext4_allocate_inode() {
  ::perfetto::protos::Ext4AllocateInodeFtraceEvent* _msg = _internal_mutable_ext4_allocate_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_allocate_inode)
  return _msg;
}

// .perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent ext4_begin_ordered_truncate = 137;
inline bool FtraceEvent::has_ext4_begin_ordered_truncate() const {
  return event_case() == kExt4BeginOrderedTruncate;
}
inline bool FtraceEvent::_internal_has_ext4_begin_ordered_truncate() const {
  return event_case() == kExt4BeginOrderedTruncate;
}
inline void FtraceEvent::set_has_ext4_begin_ordered_truncate() {
  _impl_._oneof_case_[0] = kExt4BeginOrderedTruncate;
}
inline ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::release_ext4_begin_ordered_truncate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  if (event_case() == kExt4BeginOrderedTruncate) {
    clear_has_event();
    ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* temp = _impl_.event_.ext4_begin_ordered_truncate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_begin_ordered_truncate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& FtraceEvent::_internal_ext4_begin_ordered_truncate() const {
  return event_case() == kExt4BeginOrderedTruncate
      ? *_impl_.event_.ext4_begin_ordered_truncate_
      : reinterpret_cast<::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent&>(::perfetto::protos::_Ext4BeginOrderedTruncateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent& FtraceEvent::ext4_begin_ordered_truncate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  return _internal_ext4_begin_ordered_truncate();
}
inline ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_begin_ordered_truncate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  if (event_case() == kExt4BeginOrderedTruncate) {
    clear_has_event();
    ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* temp = _impl_.event_.ext4_begin_ordered_truncate_;
    _impl_.event_.ext4_begin_ordered_truncate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_begin_ordered_truncate(::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* ext4_begin_ordered_truncate) {
  clear_event();
  if (ext4_begin_ordered_truncate) {
    set_has_ext4_begin_ordered_truncate();
    _impl_.event_.ext4_begin_ordered_truncate_ = ext4_begin_ordered_truncate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
}
inline ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::_internal_mutable_ext4_begin_ordered_truncate() {
  if (event_case() != kExt4BeginOrderedTruncate) {
    clear_event();
    set_has_ext4_begin_ordered_truncate();
    _impl_.event_.ext4_begin_ordered_truncate_ = CreateMaybeMessage< ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_begin_ordered_truncate_;
}
inline ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* FtraceEvent::mutable_ext4_begin_ordered_truncate() {
  ::perfetto::protos::Ext4BeginOrderedTruncateFtraceEvent* _msg = _internal_mutable_ext4_begin_ordered_truncate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate)
  return _msg;
}

// .perfetto.protos.Ext4CollapseRangeFtraceEvent ext4_collapse_range = 138;
inline bool FtraceEvent::has_ext4_collapse_range() const {
  return event_case() == kExt4CollapseRange;
}
inline bool FtraceEvent::_internal_has_ext4_collapse_range() const {
  return event_case() == kExt4CollapseRange;
}
inline void FtraceEvent::set_has_ext4_collapse_range() {
  _impl_._oneof_case_[0] = kExt4CollapseRange;
}
inline ::perfetto::protos::Ext4CollapseRangeFtraceEvent* FtraceEvent::release_ext4_collapse_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_collapse_range)
  if (event_case() == kExt4CollapseRange) {
    clear_has_event();
    ::perfetto::protos::Ext4CollapseRangeFtraceEvent* temp = _impl_.event_.ext4_collapse_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_collapse_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& FtraceEvent::_internal_ext4_collapse_range() const {
  return event_case() == kExt4CollapseRange
      ? *_impl_.event_.ext4_collapse_range_
      : reinterpret_cast<::perfetto::protos::Ext4CollapseRangeFtraceEvent&>(::perfetto::protos::_Ext4CollapseRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4CollapseRangeFtraceEvent& FtraceEvent::ext4_collapse_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_collapse_range)
  return _internal_ext4_collapse_range();
}
inline ::perfetto::protos::Ext4CollapseRangeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_collapse_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_collapse_range)
  if (event_case() == kExt4CollapseRange) {
    clear_has_event();
    ::perfetto::protos::Ext4CollapseRangeFtraceEvent* temp = _impl_.event_.ext4_collapse_range_;
    _impl_.event_.ext4_collapse_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_collapse_range(::perfetto::protos::Ext4CollapseRangeFtraceEvent* ext4_collapse_range) {
  clear_event();
  if (ext4_collapse_range) {
    set_has_ext4_collapse_range();
    _impl_.event_.ext4_collapse_range_ = ext4_collapse_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_collapse_range)
}
inline ::perfetto::protos::Ext4CollapseRangeFtraceEvent* FtraceEvent::_internal_mutable_ext4_collapse_range() {
  if (event_case() != kExt4CollapseRange) {
    clear_event();
    set_has_ext4_collapse_range();
    _impl_.event_.ext4_collapse_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4CollapseRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_collapse_range_;
}
inline ::perfetto::protos::Ext4CollapseRangeFtraceEvent* FtraceEvent::mutable_ext4_collapse_range() {
  ::perfetto::protos::Ext4CollapseRangeFtraceEvent* _msg = _internal_mutable_ext4_collapse_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_collapse_range)
  return _msg;
}

// .perfetto.protos.Ext4DaReleaseSpaceFtraceEvent ext4_da_release_space = 139;
inline bool FtraceEvent::has_ext4_da_release_space() const {
  return event_case() == kExt4DaReleaseSpace;
}
inline bool FtraceEvent::_internal_has_ext4_da_release_space() const {
  return event_case() == kExt4DaReleaseSpace;
}
inline void FtraceEvent::set_has_ext4_da_release_space() {
  _impl_._oneof_case_[0] = kExt4DaReleaseSpace;
}
inline ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::release_ext4_da_release_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_release_space)
  if (event_case() == kExt4DaReleaseSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* temp = _impl_.event_.ext4_da_release_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_release_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& FtraceEvent::_internal_ext4_da_release_space() const {
  return event_case() == kExt4DaReleaseSpace
      ? *_impl_.event_.ext4_da_release_space_
      : reinterpret_cast<::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent&>(::perfetto::protos::_Ext4DaReleaseSpaceFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent& FtraceEvent::ext4_da_release_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_release_space)
  return _internal_ext4_da_release_space();
}
inline ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_release_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_release_space)
  if (event_case() == kExt4DaReleaseSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* temp = _impl_.event_.ext4_da_release_space_;
    _impl_.event_.ext4_da_release_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_release_space(::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* ext4_da_release_space) {
  clear_event();
  if (ext4_da_release_space) {
    set_has_ext4_da_release_space();
    _impl_.event_.ext4_da_release_space_ = ext4_da_release_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_release_space)
}
inline ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_release_space() {
  if (event_case() != kExt4DaReleaseSpace) {
    clear_event();
    set_has_ext4_da_release_space();
    _impl_.event_.ext4_da_release_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_release_space_;
}
inline ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* FtraceEvent::mutable_ext4_da_release_space() {
  ::perfetto::protos::Ext4DaReleaseSpaceFtraceEvent* _msg = _internal_mutable_ext4_da_release_space();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_release_space)
  return _msg;
}

// .perfetto.protos.Ext4DaReserveSpaceFtraceEvent ext4_da_reserve_space = 140;
inline bool FtraceEvent::has_ext4_da_reserve_space() const {
  return event_case() == kExt4DaReserveSpace;
}
inline bool FtraceEvent::_internal_has_ext4_da_reserve_space() const {
  return event_case() == kExt4DaReserveSpace;
}
inline void FtraceEvent::set_has_ext4_da_reserve_space() {
  _impl_._oneof_case_[0] = kExt4DaReserveSpace;
}
inline ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* FtraceEvent::release_ext4_da_reserve_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  if (event_case() == kExt4DaReserveSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* temp = _impl_.event_.ext4_da_reserve_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_reserve_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& FtraceEvent::_internal_ext4_da_reserve_space() const {
  return event_case() == kExt4DaReserveSpace
      ? *_impl_.event_.ext4_da_reserve_space_
      : reinterpret_cast<::perfetto::protos::Ext4DaReserveSpaceFtraceEvent&>(::perfetto::protos::_Ext4DaReserveSpaceFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent& FtraceEvent::ext4_da_reserve_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  return _internal_ext4_da_reserve_space();
}
inline ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_reserve_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  if (event_case() == kExt4DaReserveSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* temp = _impl_.event_.ext4_da_reserve_space_;
    _impl_.event_.ext4_da_reserve_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_reserve_space(::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* ext4_da_reserve_space) {
  clear_event();
  if (ext4_da_reserve_space) {
    set_has_ext4_da_reserve_space();
    _impl_.event_.ext4_da_reserve_space_ = ext4_da_reserve_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
}
inline ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_reserve_space() {
  if (event_case() != kExt4DaReserveSpace) {
    clear_event();
    set_has_ext4_da_reserve_space();
    _impl_.event_.ext4_da_reserve_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_reserve_space_;
}
inline ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* FtraceEvent::mutable_ext4_da_reserve_space() {
  ::perfetto::protos::Ext4DaReserveSpaceFtraceEvent* _msg = _internal_mutable_ext4_da_reserve_space();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_reserve_space)
  return _msg;
}

// .perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent ext4_da_update_reserve_space = 141;
inline bool FtraceEvent::has_ext4_da_update_reserve_space() const {
  return event_case() == kExt4DaUpdateReserveSpace;
}
inline bool FtraceEvent::_internal_has_ext4_da_update_reserve_space() const {
  return event_case() == kExt4DaUpdateReserveSpace;
}
inline void FtraceEvent::set_has_ext4_da_update_reserve_space() {
  _impl_._oneof_case_[0] = kExt4DaUpdateReserveSpace;
}
inline ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::release_ext4_da_update_reserve_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  if (event_case() == kExt4DaUpdateReserveSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* temp = _impl_.event_.ext4_da_update_reserve_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_update_reserve_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& FtraceEvent::_internal_ext4_da_update_reserve_space() const {
  return event_case() == kExt4DaUpdateReserveSpace
      ? *_impl_.event_.ext4_da_update_reserve_space_
      : reinterpret_cast<::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent&>(::perfetto::protos::_Ext4DaUpdateReserveSpaceFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent& FtraceEvent::ext4_da_update_reserve_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  return _internal_ext4_da_update_reserve_space();
}
inline ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_update_reserve_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  if (event_case() == kExt4DaUpdateReserveSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* temp = _impl_.event_.ext4_da_update_reserve_space_;
    _impl_.event_.ext4_da_update_reserve_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_update_reserve_space(::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* ext4_da_update_reserve_space) {
  clear_event();
  if (ext4_da_update_reserve_space) {
    set_has_ext4_da_update_reserve_space();
    _impl_.event_.ext4_da_update_reserve_space_ = ext4_da_update_reserve_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
}
inline ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_update_reserve_space() {
  if (event_case() != kExt4DaUpdateReserveSpace) {
    clear_event();
    set_has_ext4_da_update_reserve_space();
    _impl_.event_.ext4_da_update_reserve_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_update_reserve_space_;
}
inline ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* FtraceEvent::mutable_ext4_da_update_reserve_space() {
  ::perfetto::protos::Ext4DaUpdateReserveSpaceFtraceEvent* _msg = _internal_mutable_ext4_da_update_reserve_space();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_update_reserve_space)
  return _msg;
}

// .perfetto.protos.Ext4DaWritePagesFtraceEvent ext4_da_write_pages = 142;
inline bool FtraceEvent::has_ext4_da_write_pages() const {
  return event_case() == kExt4DaWritePages;
}
inline bool FtraceEvent::_internal_has_ext4_da_write_pages() const {
  return event_case() == kExt4DaWritePages;
}
inline void FtraceEvent::set_has_ext4_da_write_pages() {
  _impl_._oneof_case_[0] = kExt4DaWritePages;
}
inline ::perfetto::protos::Ext4DaWritePagesFtraceEvent* FtraceEvent::release_ext4_da_write_pages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  if (event_case() == kExt4DaWritePages) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWritePagesFtraceEvent* temp = _impl_.event_.ext4_da_write_pages_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_write_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& FtraceEvent::_internal_ext4_da_write_pages() const {
  return event_case() == kExt4DaWritePages
      ? *_impl_.event_.ext4_da_write_pages_
      : reinterpret_cast<::perfetto::protos::Ext4DaWritePagesFtraceEvent&>(::perfetto::protos::_Ext4DaWritePagesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaWritePagesFtraceEvent& FtraceEvent::ext4_da_write_pages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  return _internal_ext4_da_write_pages();
}
inline ::perfetto::protos::Ext4DaWritePagesFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_write_pages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  if (event_case() == kExt4DaWritePages) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWritePagesFtraceEvent* temp = _impl_.event_.ext4_da_write_pages_;
    _impl_.event_.ext4_da_write_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_write_pages(::perfetto::protos::Ext4DaWritePagesFtraceEvent* ext4_da_write_pages) {
  clear_event();
  if (ext4_da_write_pages) {
    set_has_ext4_da_write_pages();
    _impl_.event_.ext4_da_write_pages_ = ext4_da_write_pages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_pages)
}
inline ::perfetto::protos::Ext4DaWritePagesFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_write_pages() {
  if (event_case() != kExt4DaWritePages) {
    clear_event();
    set_has_ext4_da_write_pages();
    _impl_.event_.ext4_da_write_pages_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWritePagesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_write_pages_;
}
inline ::perfetto::protos::Ext4DaWritePagesFtraceEvent* FtraceEvent::mutable_ext4_da_write_pages() {
  ::perfetto::protos::Ext4DaWritePagesFtraceEvent* _msg = _internal_mutable_ext4_da_write_pages();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_pages)
  return _msg;
}

// .perfetto.protos.Ext4DaWritePagesExtentFtraceEvent ext4_da_write_pages_extent = 143;
inline bool FtraceEvent::has_ext4_da_write_pages_extent() const {
  return event_case() == kExt4DaWritePagesExtent;
}
inline bool FtraceEvent::_internal_has_ext4_da_write_pages_extent() const {
  return event_case() == kExt4DaWritePagesExtent;
}
inline void FtraceEvent::set_has_ext4_da_write_pages_extent() {
  _impl_._oneof_case_[0] = kExt4DaWritePagesExtent;
}
inline ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::release_ext4_da_write_pages_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  if (event_case() == kExt4DaWritePagesExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* temp = _impl_.event_.ext4_da_write_pages_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_da_write_pages_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& FtraceEvent::_internal_ext4_da_write_pages_extent() const {
  return event_case() == kExt4DaWritePagesExtent
      ? *_impl_.event_.ext4_da_write_pages_extent_
      : reinterpret_cast<::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent&>(::perfetto::protos::_Ext4DaWritePagesExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent& FtraceEvent::ext4_da_write_pages_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  return _internal_ext4_da_write_pages_extent();
}
inline ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_da_write_pages_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  if (event_case() == kExt4DaWritePagesExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* temp = _impl_.event_.ext4_da_write_pages_extent_;
    _impl_.event_.ext4_da_write_pages_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_da_write_pages_extent(::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* ext4_da_write_pages_extent) {
  clear_event();
  if (ext4_da_write_pages_extent) {
    set_has_ext4_da_write_pages_extent();
    _impl_.event_.ext4_da_write_pages_extent_ = ext4_da_write_pages_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
}
inline ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_da_write_pages_extent() {
  if (event_case() != kExt4DaWritePagesExtent) {
    clear_event();
    set_has_ext4_da_write_pages_extent();
    _impl_.event_.ext4_da_write_pages_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_da_write_pages_extent_;
}
inline ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* FtraceEvent::mutable_ext4_da_write_pages_extent() {
  ::perfetto::protos::Ext4DaWritePagesExtentFtraceEvent* _msg = _internal_mutable_ext4_da_write_pages_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_da_write_pages_extent)
  return _msg;
}

// .perfetto.protos.Ext4DirectIOEnterFtraceEvent ext4_direct_IO_enter = 144;
inline bool FtraceEvent::has_ext4_direct_io_enter() const {
  return event_case() == kExt4DirectIOEnter;
}
inline bool FtraceEvent::_internal_has_ext4_direct_io_enter() const {
  return event_case() == kExt4DirectIOEnter;
}
inline void FtraceEvent::set_has_ext4_direct_io_enter() {
  _impl_._oneof_case_[0] = kExt4DirectIOEnter;
}
inline ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* FtraceEvent::release_ext4_direct_io_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  if (event_case() == kExt4DirectIOEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* temp = _impl_.event_.ext4_direct_io_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_direct_io_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& FtraceEvent::_internal_ext4_direct_io_enter() const {
  return event_case() == kExt4DirectIOEnter
      ? *_impl_.event_.ext4_direct_io_enter_
      : reinterpret_cast<::perfetto::protos::Ext4DirectIOEnterFtraceEvent&>(::perfetto::protos::_Ext4DirectIOEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DirectIOEnterFtraceEvent& FtraceEvent::ext4_direct_io_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  return _internal_ext4_direct_io_enter();
}
inline ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_direct_io_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  if (event_case() == kExt4DirectIOEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* temp = _impl_.event_.ext4_direct_io_enter_;
    _impl_.event_.ext4_direct_io_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_direct_io_enter(::perfetto::protos::Ext4DirectIOEnterFtraceEvent* ext4_direct_io_enter) {
  clear_event();
  if (ext4_direct_io_enter) {
    set_has_ext4_direct_io_enter();
    _impl_.event_.ext4_direct_io_enter_ = ext4_direct_io_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
}
inline ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_direct_io_enter() {
  if (event_case() != kExt4DirectIOEnter) {
    clear_event();
    set_has_ext4_direct_io_enter();
    _impl_.event_.ext4_direct_io_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4DirectIOEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_direct_io_enter_;
}
inline ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* FtraceEvent::mutable_ext4_direct_io_enter() {
  ::perfetto::protos::Ext4DirectIOEnterFtraceEvent* _msg = _internal_mutable_ext4_direct_io_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_direct_IO_enter)
  return _msg;
}

// .perfetto.protos.Ext4DirectIOExitFtraceEvent ext4_direct_IO_exit = 145;
inline bool FtraceEvent::has_ext4_direct_io_exit() const {
  return event_case() == kExt4DirectIOExit;
}
inline bool FtraceEvent::_internal_has_ext4_direct_io_exit() const {
  return event_case() == kExt4DirectIOExit;
}
inline void FtraceEvent::set_has_ext4_direct_io_exit() {
  _impl_._oneof_case_[0] = kExt4DirectIOExit;
}
inline ::perfetto::protos::Ext4DirectIOExitFtraceEvent* FtraceEvent::release_ext4_direct_io_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  if (event_case() == kExt4DirectIOExit) {
    clear_has_event();
    ::perfetto::protos::Ext4DirectIOExitFtraceEvent* temp = _impl_.event_.ext4_direct_io_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_direct_io_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& FtraceEvent::_internal_ext4_direct_io_exit() const {
  return event_case() == kExt4DirectIOExit
      ? *_impl_.event_.ext4_direct_io_exit_
      : reinterpret_cast<::perfetto::protos::Ext4DirectIOExitFtraceEvent&>(::perfetto::protos::_Ext4DirectIOExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DirectIOExitFtraceEvent& FtraceEvent::ext4_direct_io_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  return _internal_ext4_direct_io_exit();
}
inline ::perfetto::protos::Ext4DirectIOExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_direct_io_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  if (event_case() == kExt4DirectIOExit) {
    clear_has_event();
    ::perfetto::protos::Ext4DirectIOExitFtraceEvent* temp = _impl_.event_.ext4_direct_io_exit_;
    _impl_.event_.ext4_direct_io_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_direct_io_exit(::perfetto::protos::Ext4DirectIOExitFtraceEvent* ext4_direct_io_exit) {
  clear_event();
  if (ext4_direct_io_exit) {
    set_has_ext4_direct_io_exit();
    _impl_.event_.ext4_direct_io_exit_ = ext4_direct_io_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
}
inline ::perfetto::protos::Ext4DirectIOExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_direct_io_exit() {
  if (event_case() != kExt4DirectIOExit) {
    clear_event();
    set_has_ext4_direct_io_exit();
    _impl_.event_.ext4_direct_io_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4DirectIOExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_direct_io_exit_;
}
inline ::perfetto::protos::Ext4DirectIOExitFtraceEvent* FtraceEvent::mutable_ext4_direct_io_exit() {
  ::perfetto::protos::Ext4DirectIOExitFtraceEvent* _msg = _internal_mutable_ext4_direct_io_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_direct_IO_exit)
  return _msg;
}

// .perfetto.protos.Ext4DiscardBlocksFtraceEvent ext4_discard_blocks = 146;
inline bool FtraceEvent::has_ext4_discard_blocks() const {
  return event_case() == kExt4DiscardBlocks;
}
inline bool FtraceEvent::_internal_has_ext4_discard_blocks() const {
  return event_case() == kExt4DiscardBlocks;
}
inline void FtraceEvent::set_has_ext4_discard_blocks() {
  _impl_._oneof_case_[0] = kExt4DiscardBlocks;
}
inline ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* FtraceEvent::release_ext4_discard_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  if (event_case() == kExt4DiscardBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* temp = _impl_.event_.ext4_discard_blocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_discard_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& FtraceEvent::_internal_ext4_discard_blocks() const {
  return event_case() == kExt4DiscardBlocks
      ? *_impl_.event_.ext4_discard_blocks_
      : reinterpret_cast<::perfetto::protos::Ext4DiscardBlocksFtraceEvent&>(::perfetto::protos::_Ext4DiscardBlocksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DiscardBlocksFtraceEvent& FtraceEvent::ext4_discard_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  return _internal_ext4_discard_blocks();
}
inline ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_discard_blocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  if (event_case() == kExt4DiscardBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* temp = _impl_.event_.ext4_discard_blocks_;
    _impl_.event_.ext4_discard_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_discard_blocks(::perfetto::protos::Ext4DiscardBlocksFtraceEvent* ext4_discard_blocks) {
  clear_event();
  if (ext4_discard_blocks) {
    set_has_ext4_discard_blocks();
    _impl_.event_.ext4_discard_blocks_ = ext4_discard_blocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_discard_blocks)
}
inline ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* FtraceEvent::_internal_mutable_ext4_discard_blocks() {
  if (event_case() != kExt4DiscardBlocks) {
    clear_event();
    set_has_ext4_discard_blocks();
    _impl_.event_.ext4_discard_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4DiscardBlocksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_discard_blocks_;
}
inline ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* FtraceEvent::mutable_ext4_discard_blocks() {
  ::perfetto::protos::Ext4DiscardBlocksFtraceEvent* _msg = _internal_mutable_ext4_discard_blocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_discard_blocks)
  return _msg;
}

// .perfetto.protos.Ext4DiscardPreallocationsFtraceEvent ext4_discard_preallocations = 147;
inline bool FtraceEvent::has_ext4_discard_preallocations() const {
  return event_case() == kExt4DiscardPreallocations;
}
inline bool FtraceEvent::_internal_has_ext4_discard_preallocations() const {
  return event_case() == kExt4DiscardPreallocations;
}
inline void FtraceEvent::set_has_ext4_discard_preallocations() {
  _impl_._oneof_case_[0] = kExt4DiscardPreallocations;
}
inline ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::release_ext4_discard_preallocations() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  if (event_case() == kExt4DiscardPreallocations) {
    clear_has_event();
    ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* temp = _impl_.event_.ext4_discard_preallocations_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_discard_preallocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& FtraceEvent::_internal_ext4_discard_preallocations() const {
  return event_case() == kExt4DiscardPreallocations
      ? *_impl_.event_.ext4_discard_preallocations_
      : reinterpret_cast<::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent&>(::perfetto::protos::_Ext4DiscardPreallocationsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent& FtraceEvent::ext4_discard_preallocations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  return _internal_ext4_discard_preallocations();
}
inline ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_discard_preallocations() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  if (event_case() == kExt4DiscardPreallocations) {
    clear_has_event();
    ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* temp = _impl_.event_.ext4_discard_preallocations_;
    _impl_.event_.ext4_discard_preallocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_discard_preallocations(::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* ext4_discard_preallocations) {
  clear_event();
  if (ext4_discard_preallocations) {
    set_has_ext4_discard_preallocations();
    _impl_.event_.ext4_discard_preallocations_ = ext4_discard_preallocations;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
}
inline ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::_internal_mutable_ext4_discard_preallocations() {
  if (event_case() != kExt4DiscardPreallocations) {
    clear_event();
    set_has_ext4_discard_preallocations();
    _impl_.event_.ext4_discard_preallocations_ = CreateMaybeMessage< ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_discard_preallocations_;
}
inline ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* FtraceEvent::mutable_ext4_discard_preallocations() {
  ::perfetto::protos::Ext4DiscardPreallocationsFtraceEvent* _msg = _internal_mutable_ext4_discard_preallocations();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_discard_preallocations)
  return _msg;
}

// .perfetto.protos.Ext4DropInodeFtraceEvent ext4_drop_inode = 148;
inline bool FtraceEvent::has_ext4_drop_inode() const {
  return event_case() == kExt4DropInode;
}
inline bool FtraceEvent::_internal_has_ext4_drop_inode() const {
  return event_case() == kExt4DropInode;
}
inline void FtraceEvent::set_has_ext4_drop_inode() {
  _impl_._oneof_case_[0] = kExt4DropInode;
}
inline ::perfetto::protos::Ext4DropInodeFtraceEvent* FtraceEvent::release_ext4_drop_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_drop_inode)
  if (event_case() == kExt4DropInode) {
    clear_has_event();
    ::perfetto::protos::Ext4DropInodeFtraceEvent* temp = _impl_.event_.ext4_drop_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_drop_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4DropInodeFtraceEvent& FtraceEvent::_internal_ext4_drop_inode() const {
  return event_case() == kExt4DropInode
      ? *_impl_.event_.ext4_drop_inode_
      : reinterpret_cast<::perfetto::protos::Ext4DropInodeFtraceEvent&>(::perfetto::protos::_Ext4DropInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4DropInodeFtraceEvent& FtraceEvent::ext4_drop_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_drop_inode)
  return _internal_ext4_drop_inode();
}
inline ::perfetto::protos::Ext4DropInodeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_drop_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_drop_inode)
  if (event_case() == kExt4DropInode) {
    clear_has_event();
    ::perfetto::protos::Ext4DropInodeFtraceEvent* temp = _impl_.event_.ext4_drop_inode_;
    _impl_.event_.ext4_drop_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_drop_inode(::perfetto::protos::Ext4DropInodeFtraceEvent* ext4_drop_inode) {
  clear_event();
  if (ext4_drop_inode) {
    set_has_ext4_drop_inode();
    _impl_.event_.ext4_drop_inode_ = ext4_drop_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_drop_inode)
}
inline ::perfetto::protos::Ext4DropInodeFtraceEvent* FtraceEvent::_internal_mutable_ext4_drop_inode() {
  if (event_case() != kExt4DropInode) {
    clear_event();
    set_has_ext4_drop_inode();
    _impl_.event_.ext4_drop_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4DropInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_drop_inode_;
}
inline ::perfetto::protos::Ext4DropInodeFtraceEvent* FtraceEvent::mutable_ext4_drop_inode() {
  ::perfetto::protos::Ext4DropInodeFtraceEvent* _msg = _internal_mutable_ext4_drop_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_drop_inode)
  return _msg;
}

// .perfetto.protos.Ext4EsCacheExtentFtraceEvent ext4_es_cache_extent = 149;
inline bool FtraceEvent::has_ext4_es_cache_extent() const {
  return event_case() == kExt4EsCacheExtent;
}
inline bool FtraceEvent::_internal_has_ext4_es_cache_extent() const {
  return event_case() == kExt4EsCacheExtent;
}
inline void FtraceEvent::set_has_ext4_es_cache_extent() {
  _impl_._oneof_case_[0] = kExt4EsCacheExtent;
}
inline ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* FtraceEvent::release_ext4_es_cache_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  if (event_case() == kExt4EsCacheExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* temp = _impl_.event_.ext4_es_cache_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_cache_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& FtraceEvent::_internal_ext4_es_cache_extent() const {
  return event_case() == kExt4EsCacheExtent
      ? *_impl_.event_.ext4_es_cache_extent_
      : reinterpret_cast<::perfetto::protos::Ext4EsCacheExtentFtraceEvent&>(::perfetto::protos::_Ext4EsCacheExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsCacheExtentFtraceEvent& FtraceEvent::ext4_es_cache_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  return _internal_ext4_es_cache_extent();
}
inline ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_cache_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  if (event_case() == kExt4EsCacheExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* temp = _impl_.event_.ext4_es_cache_extent_;
    _impl_.event_.ext4_es_cache_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_cache_extent(::perfetto::protos::Ext4EsCacheExtentFtraceEvent* ext4_es_cache_extent) {
  clear_event();
  if (ext4_es_cache_extent) {
    set_has_ext4_es_cache_extent();
    _impl_.event_.ext4_es_cache_extent_ = ext4_es_cache_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
}
inline ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_cache_extent() {
  if (event_case() != kExt4EsCacheExtent) {
    clear_event();
    set_has_ext4_es_cache_extent();
    _impl_.event_.ext4_es_cache_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsCacheExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_cache_extent_;
}
inline ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* FtraceEvent::mutable_ext4_es_cache_extent() {
  ::perfetto::protos::Ext4EsCacheExtentFtraceEvent* _msg = _internal_mutable_ext4_es_cache_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_cache_extent)
  return _msg;
}

// .perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent ext4_es_find_delayed_extent_range_enter = 150;
inline bool FtraceEvent::has_ext4_es_find_delayed_extent_range_enter() const {
  return event_case() == kExt4EsFindDelayedExtentRangeEnter;
}
inline bool FtraceEvent::_internal_has_ext4_es_find_delayed_extent_range_enter() const {
  return event_case() == kExt4EsFindDelayedExtentRangeEnter;
}
inline void FtraceEvent::set_has_ext4_es_find_delayed_extent_range_enter() {
  _impl_._oneof_case_[0] = kExt4EsFindDelayedExtentRangeEnter;
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::release_ext4_es_find_delayed_extent_range_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  if (event_case() == kExt4EsFindDelayedExtentRangeEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* temp = _impl_.event_.ext4_es_find_delayed_extent_range_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_find_delayed_extent_range_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& FtraceEvent::_internal_ext4_es_find_delayed_extent_range_enter() const {
  return event_case() == kExt4EsFindDelayedExtentRangeEnter
      ? *_impl_.event_.ext4_es_find_delayed_extent_range_enter_
      : reinterpret_cast<::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent&>(::perfetto::protos::_Ext4EsFindDelayedExtentRangeEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent& FtraceEvent::ext4_es_find_delayed_extent_range_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  return _internal_ext4_es_find_delayed_extent_range_enter();
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_find_delayed_extent_range_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  if (event_case() == kExt4EsFindDelayedExtentRangeEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* temp = _impl_.event_.ext4_es_find_delayed_extent_range_enter_;
    _impl_.event_.ext4_es_find_delayed_extent_range_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_find_delayed_extent_range_enter(::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* ext4_es_find_delayed_extent_range_enter) {
  clear_event();
  if (ext4_es_find_delayed_extent_range_enter) {
    set_has_ext4_es_find_delayed_extent_range_enter();
    _impl_.event_.ext4_es_find_delayed_extent_range_enter_ = ext4_es_find_delayed_extent_range_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_find_delayed_extent_range_enter() {
  if (event_case() != kExt4EsFindDelayedExtentRangeEnter) {
    clear_event();
    set_has_ext4_es_find_delayed_extent_range_enter();
    _impl_.event_.ext4_es_find_delayed_extent_range_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_find_delayed_extent_range_enter_;
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* FtraceEvent::mutable_ext4_es_find_delayed_extent_range_enter() {
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeEnterFtraceEvent* _msg = _internal_mutable_ext4_es_find_delayed_extent_range_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter)
  return _msg;
}

// .perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent ext4_es_find_delayed_extent_range_exit = 151;
inline bool FtraceEvent::has_ext4_es_find_delayed_extent_range_exit() const {
  return event_case() == kExt4EsFindDelayedExtentRangeExit;
}
inline bool FtraceEvent::_internal_has_ext4_es_find_delayed_extent_range_exit() const {
  return event_case() == kExt4EsFindDelayedExtentRangeExit;
}
inline void FtraceEvent::set_has_ext4_es_find_delayed_extent_range_exit() {
  _impl_._oneof_case_[0] = kExt4EsFindDelayedExtentRangeExit;
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::release_ext4_es_find_delayed_extent_range_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  if (event_case() == kExt4EsFindDelayedExtentRangeExit) {
    clear_has_event();
    ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* temp = _impl_.event_.ext4_es_find_delayed_extent_range_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_find_delayed_extent_range_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& FtraceEvent::_internal_ext4_es_find_delayed_extent_range_exit() const {
  return event_case() == kExt4EsFindDelayedExtentRangeExit
      ? *_impl_.event_.ext4_es_find_delayed_extent_range_exit_
      : reinterpret_cast<::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent&>(::perfetto::protos::_Ext4EsFindDelayedExtentRangeExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent& FtraceEvent::ext4_es_find_delayed_extent_range_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  return _internal_ext4_es_find_delayed_extent_range_exit();
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_find_delayed_extent_range_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  if (event_case() == kExt4EsFindDelayedExtentRangeExit) {
    clear_has_event();
    ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* temp = _impl_.event_.ext4_es_find_delayed_extent_range_exit_;
    _impl_.event_.ext4_es_find_delayed_extent_range_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_find_delayed_extent_range_exit(::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* ext4_es_find_delayed_extent_range_exit) {
  clear_event();
  if (ext4_es_find_delayed_extent_range_exit) {
    set_has_ext4_es_find_delayed_extent_range_exit();
    _impl_.event_.ext4_es_find_delayed_extent_range_exit_ = ext4_es_find_delayed_extent_range_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_find_delayed_extent_range_exit() {
  if (event_case() != kExt4EsFindDelayedExtentRangeExit) {
    clear_event();
    set_has_ext4_es_find_delayed_extent_range_exit();
    _impl_.event_.ext4_es_find_delayed_extent_range_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_find_delayed_extent_range_exit_;
}
inline ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* FtraceEvent::mutable_ext4_es_find_delayed_extent_range_exit() {
  ::perfetto::protos::Ext4EsFindDelayedExtentRangeExitFtraceEvent* _msg = _internal_mutable_ext4_es_find_delayed_extent_range_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit)
  return _msg;
}

// .perfetto.protos.Ext4EsInsertExtentFtraceEvent ext4_es_insert_extent = 152;
inline bool FtraceEvent::has_ext4_es_insert_extent() const {
  return event_case() == kExt4EsInsertExtent;
}
inline bool FtraceEvent::_internal_has_ext4_es_insert_extent() const {
  return event_case() == kExt4EsInsertExtent;
}
inline void FtraceEvent::set_has_ext4_es_insert_extent() {
  _impl_._oneof_case_[0] = kExt4EsInsertExtent;
}
inline ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* FtraceEvent::release_ext4_es_insert_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  if (event_case() == kExt4EsInsertExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* temp = _impl_.event_.ext4_es_insert_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_insert_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& FtraceEvent::_internal_ext4_es_insert_extent() const {
  return event_case() == kExt4EsInsertExtent
      ? *_impl_.event_.ext4_es_insert_extent_
      : reinterpret_cast<::perfetto::protos::Ext4EsInsertExtentFtraceEvent&>(::perfetto::protos::_Ext4EsInsertExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsInsertExtentFtraceEvent& FtraceEvent::ext4_es_insert_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  return _internal_ext4_es_insert_extent();
}
inline ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_insert_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  if (event_case() == kExt4EsInsertExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* temp = _impl_.event_.ext4_es_insert_extent_;
    _impl_.event_.ext4_es_insert_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_insert_extent(::perfetto::protos::Ext4EsInsertExtentFtraceEvent* ext4_es_insert_extent) {
  clear_event();
  if (ext4_es_insert_extent) {
    set_has_ext4_es_insert_extent();
    _impl_.event_.ext4_es_insert_extent_ = ext4_es_insert_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
}
inline ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_insert_extent() {
  if (event_case() != kExt4EsInsertExtent) {
    clear_event();
    set_has_ext4_es_insert_extent();
    _impl_.event_.ext4_es_insert_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsInsertExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_insert_extent_;
}
inline ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* FtraceEvent::mutable_ext4_es_insert_extent() {
  ::perfetto::protos::Ext4EsInsertExtentFtraceEvent* _msg = _internal_mutable_ext4_es_insert_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_insert_extent)
  return _msg;
}

// .perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent ext4_es_lookup_extent_enter = 153;
inline bool FtraceEvent::has_ext4_es_lookup_extent_enter() const {
  return event_case() == kExt4EsLookupExtentEnter;
}
inline bool FtraceEvent::_internal_has_ext4_es_lookup_extent_enter() const {
  return event_case() == kExt4EsLookupExtentEnter;
}
inline void FtraceEvent::set_has_ext4_es_lookup_extent_enter() {
  _impl_._oneof_case_[0] = kExt4EsLookupExtentEnter;
}
inline ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::release_ext4_es_lookup_extent_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  if (event_case() == kExt4EsLookupExtentEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* temp = _impl_.event_.ext4_es_lookup_extent_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_lookup_extent_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& FtraceEvent::_internal_ext4_es_lookup_extent_enter() const {
  return event_case() == kExt4EsLookupExtentEnter
      ? *_impl_.event_.ext4_es_lookup_extent_enter_
      : reinterpret_cast<::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent&>(::perfetto::protos::_Ext4EsLookupExtentEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent& FtraceEvent::ext4_es_lookup_extent_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  return _internal_ext4_es_lookup_extent_enter();
}
inline ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_lookup_extent_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  if (event_case() == kExt4EsLookupExtentEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* temp = _impl_.event_.ext4_es_lookup_extent_enter_;
    _impl_.event_.ext4_es_lookup_extent_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_lookup_extent_enter(::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* ext4_es_lookup_extent_enter) {
  clear_event();
  if (ext4_es_lookup_extent_enter) {
    set_has_ext4_es_lookup_extent_enter();
    _impl_.event_.ext4_es_lookup_extent_enter_ = ext4_es_lookup_extent_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
}
inline ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_lookup_extent_enter() {
  if (event_case() != kExt4EsLookupExtentEnter) {
    clear_event();
    set_has_ext4_es_lookup_extent_enter();
    _impl_.event_.ext4_es_lookup_extent_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_lookup_extent_enter_;
}
inline ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* FtraceEvent::mutable_ext4_es_lookup_extent_enter() {
  ::perfetto::protos::Ext4EsLookupExtentEnterFtraceEvent* _msg = _internal_mutable_ext4_es_lookup_extent_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter)
  return _msg;
}

// .perfetto.protos.Ext4EsLookupExtentExitFtraceEvent ext4_es_lookup_extent_exit = 154;
inline bool FtraceEvent::has_ext4_es_lookup_extent_exit() const {
  return event_case() == kExt4EsLookupExtentExit;
}
inline bool FtraceEvent::_internal_has_ext4_es_lookup_extent_exit() const {
  return event_case() == kExt4EsLookupExtentExit;
}
inline void FtraceEvent::set_has_ext4_es_lookup_extent_exit() {
  _impl_._oneof_case_[0] = kExt4EsLookupExtentExit;
}
inline ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::release_ext4_es_lookup_extent_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  if (event_case() == kExt4EsLookupExtentExit) {
    clear_has_event();
    ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* temp = _impl_.event_.ext4_es_lookup_extent_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_lookup_extent_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& FtraceEvent::_internal_ext4_es_lookup_extent_exit() const {
  return event_case() == kExt4EsLookupExtentExit
      ? *_impl_.event_.ext4_es_lookup_extent_exit_
      : reinterpret_cast<::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent&>(::perfetto::protos::_Ext4EsLookupExtentExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent& FtraceEvent::ext4_es_lookup_extent_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  return _internal_ext4_es_lookup_extent_exit();
}
inline ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_lookup_extent_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  if (event_case() == kExt4EsLookupExtentExit) {
    clear_has_event();
    ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* temp = _impl_.event_.ext4_es_lookup_extent_exit_;
    _impl_.event_.ext4_es_lookup_extent_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_lookup_extent_exit(::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* ext4_es_lookup_extent_exit) {
  clear_event();
  if (ext4_es_lookup_extent_exit) {
    set_has_ext4_es_lookup_extent_exit();
    _impl_.event_.ext4_es_lookup_extent_exit_ = ext4_es_lookup_extent_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
}
inline ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_lookup_extent_exit() {
  if (event_case() != kExt4EsLookupExtentExit) {
    clear_event();
    set_has_ext4_es_lookup_extent_exit();
    _impl_.event_.ext4_es_lookup_extent_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_lookup_extent_exit_;
}
inline ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* FtraceEvent::mutable_ext4_es_lookup_extent_exit() {
  ::perfetto::protos::Ext4EsLookupExtentExitFtraceEvent* _msg = _internal_mutable_ext4_es_lookup_extent_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit)
  return _msg;
}

// .perfetto.protos.Ext4EsRemoveExtentFtraceEvent ext4_es_remove_extent = 155;
inline bool FtraceEvent::has_ext4_es_remove_extent() const {
  return event_case() == kExt4EsRemoveExtent;
}
inline bool FtraceEvent::_internal_has_ext4_es_remove_extent() const {
  return event_case() == kExt4EsRemoveExtent;
}
inline void FtraceEvent::set_has_ext4_es_remove_extent() {
  _impl_._oneof_case_[0] = kExt4EsRemoveExtent;
}
inline ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* FtraceEvent::release_ext4_es_remove_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  if (event_case() == kExt4EsRemoveExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* temp = _impl_.event_.ext4_es_remove_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_remove_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& FtraceEvent::_internal_ext4_es_remove_extent() const {
  return event_case() == kExt4EsRemoveExtent
      ? *_impl_.event_.ext4_es_remove_extent_
      : reinterpret_cast<::perfetto::protos::Ext4EsRemoveExtentFtraceEvent&>(::perfetto::protos::_Ext4EsRemoveExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent& FtraceEvent::ext4_es_remove_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  return _internal_ext4_es_remove_extent();
}
inline ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_remove_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  if (event_case() == kExt4EsRemoveExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* temp = _impl_.event_.ext4_es_remove_extent_;
    _impl_.event_.ext4_es_remove_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_remove_extent(::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* ext4_es_remove_extent) {
  clear_event();
  if (ext4_es_remove_extent) {
    set_has_ext4_es_remove_extent();
    _impl_.event_.ext4_es_remove_extent_ = ext4_es_remove_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
}
inline ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_remove_extent() {
  if (event_case() != kExt4EsRemoveExtent) {
    clear_event();
    set_has_ext4_es_remove_extent();
    _impl_.event_.ext4_es_remove_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_remove_extent_;
}
inline ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* FtraceEvent::mutable_ext4_es_remove_extent() {
  ::perfetto::protos::Ext4EsRemoveExtentFtraceEvent* _msg = _internal_mutable_ext4_es_remove_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_remove_extent)
  return _msg;
}

// .perfetto.protos.Ext4EsShrinkFtraceEvent ext4_es_shrink = 156;
inline bool FtraceEvent::has_ext4_es_shrink() const {
  return event_case() == kExt4EsShrink;
}
inline bool FtraceEvent::_internal_has_ext4_es_shrink() const {
  return event_case() == kExt4EsShrink;
}
inline void FtraceEvent::set_has_ext4_es_shrink() {
  _impl_._oneof_case_[0] = kExt4EsShrink;
}
inline ::perfetto::protos::Ext4EsShrinkFtraceEvent* FtraceEvent::release_ext4_es_shrink() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink)
  if (event_case() == kExt4EsShrink) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkFtraceEvent* temp = _impl_.event_.ext4_es_shrink_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_shrink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkFtraceEvent& FtraceEvent::_internal_ext4_es_shrink() const {
  return event_case() == kExt4EsShrink
      ? *_impl_.event_.ext4_es_shrink_
      : reinterpret_cast<::perfetto::protos::Ext4EsShrinkFtraceEvent&>(::perfetto::protos::_Ext4EsShrinkFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsShrinkFtraceEvent& FtraceEvent::ext4_es_shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink)
  return _internal_ext4_es_shrink();
}
inline ::perfetto::protos::Ext4EsShrinkFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_shrink() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_shrink)
  if (event_case() == kExt4EsShrink) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkFtraceEvent* temp = _impl_.event_.ext4_es_shrink_;
    _impl_.event_.ext4_es_shrink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_shrink(::perfetto::protos::Ext4EsShrinkFtraceEvent* ext4_es_shrink) {
  clear_event();
  if (ext4_es_shrink) {
    set_has_ext4_es_shrink();
    _impl_.event_.ext4_es_shrink_ = ext4_es_shrink;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink)
}
inline ::perfetto::protos::Ext4EsShrinkFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_shrink() {
  if (event_case() != kExt4EsShrink) {
    clear_event();
    set_has_ext4_es_shrink();
    _impl_.event_.ext4_es_shrink_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_shrink_;
}
inline ::perfetto::protos::Ext4EsShrinkFtraceEvent* FtraceEvent::mutable_ext4_es_shrink() {
  ::perfetto::protos::Ext4EsShrinkFtraceEvent* _msg = _internal_mutable_ext4_es_shrink();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink)
  return _msg;
}

// .perfetto.protos.Ext4EsShrinkCountFtraceEvent ext4_es_shrink_count = 157;
inline bool FtraceEvent::has_ext4_es_shrink_count() const {
  return event_case() == kExt4EsShrinkCount;
}
inline bool FtraceEvent::_internal_has_ext4_es_shrink_count() const {
  return event_case() == kExt4EsShrinkCount;
}
inline void FtraceEvent::set_has_ext4_es_shrink_count() {
  _impl_._oneof_case_[0] = kExt4EsShrinkCount;
}
inline ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* FtraceEvent::release_ext4_es_shrink_count() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  if (event_case() == kExt4EsShrinkCount) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* temp = _impl_.event_.ext4_es_shrink_count_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_shrink_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& FtraceEvent::_internal_ext4_es_shrink_count() const {
  return event_case() == kExt4EsShrinkCount
      ? *_impl_.event_.ext4_es_shrink_count_
      : reinterpret_cast<::perfetto::protos::Ext4EsShrinkCountFtraceEvent&>(::perfetto::protos::_Ext4EsShrinkCountFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsShrinkCountFtraceEvent& FtraceEvent::ext4_es_shrink_count() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  return _internal_ext4_es_shrink_count();
}
inline ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_shrink_count() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  if (event_case() == kExt4EsShrinkCount) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* temp = _impl_.event_.ext4_es_shrink_count_;
    _impl_.event_.ext4_es_shrink_count_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_shrink_count(::perfetto::protos::Ext4EsShrinkCountFtraceEvent* ext4_es_shrink_count) {
  clear_event();
  if (ext4_es_shrink_count) {
    set_has_ext4_es_shrink_count();
    _impl_.event_.ext4_es_shrink_count_ = ext4_es_shrink_count;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
}
inline ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_shrink_count() {
  if (event_case() != kExt4EsShrinkCount) {
    clear_event();
    set_has_ext4_es_shrink_count();
    _impl_.event_.ext4_es_shrink_count_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkCountFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_shrink_count_;
}
inline ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* FtraceEvent::mutable_ext4_es_shrink_count() {
  ::perfetto::protos::Ext4EsShrinkCountFtraceEvent* _msg = _internal_mutable_ext4_es_shrink_count();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink_count)
  return _msg;
}

// .perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent ext4_es_shrink_scan_enter = 158;
inline bool FtraceEvent::has_ext4_es_shrink_scan_enter() const {
  return event_case() == kExt4EsShrinkScanEnter;
}
inline bool FtraceEvent::_internal_has_ext4_es_shrink_scan_enter() const {
  return event_case() == kExt4EsShrinkScanEnter;
}
inline void FtraceEvent::set_has_ext4_es_shrink_scan_enter() {
  _impl_._oneof_case_[0] = kExt4EsShrinkScanEnter;
}
inline ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::release_ext4_es_shrink_scan_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  if (event_case() == kExt4EsShrinkScanEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* temp = _impl_.event_.ext4_es_shrink_scan_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_shrink_scan_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& FtraceEvent::_internal_ext4_es_shrink_scan_enter() const {
  return event_case() == kExt4EsShrinkScanEnter
      ? *_impl_.event_.ext4_es_shrink_scan_enter_
      : reinterpret_cast<::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent&>(::perfetto::protos::_Ext4EsShrinkScanEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent& FtraceEvent::ext4_es_shrink_scan_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  return _internal_ext4_es_shrink_scan_enter();
}
inline ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_shrink_scan_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  if (event_case() == kExt4EsShrinkScanEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* temp = _impl_.event_.ext4_es_shrink_scan_enter_;
    _impl_.event_.ext4_es_shrink_scan_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_shrink_scan_enter(::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* ext4_es_shrink_scan_enter) {
  clear_event();
  if (ext4_es_shrink_scan_enter) {
    set_has_ext4_es_shrink_scan_enter();
    _impl_.event_.ext4_es_shrink_scan_enter_ = ext4_es_shrink_scan_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
}
inline ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_shrink_scan_enter() {
  if (event_case() != kExt4EsShrinkScanEnter) {
    clear_event();
    set_has_ext4_es_shrink_scan_enter();
    _impl_.event_.ext4_es_shrink_scan_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_shrink_scan_enter_;
}
inline ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* FtraceEvent::mutable_ext4_es_shrink_scan_enter() {
  ::perfetto::protos::Ext4EsShrinkScanEnterFtraceEvent* _msg = _internal_mutable_ext4_es_shrink_scan_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter)
  return _msg;
}

// .perfetto.protos.Ext4EsShrinkScanExitFtraceEvent ext4_es_shrink_scan_exit = 159;
inline bool FtraceEvent::has_ext4_es_shrink_scan_exit() const {
  return event_case() == kExt4EsShrinkScanExit;
}
inline bool FtraceEvent::_internal_has_ext4_es_shrink_scan_exit() const {
  return event_case() == kExt4EsShrinkScanExit;
}
inline void FtraceEvent::set_has_ext4_es_shrink_scan_exit() {
  _impl_._oneof_case_[0] = kExt4EsShrinkScanExit;
}
inline ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::release_ext4_es_shrink_scan_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  if (event_case() == kExt4EsShrinkScanExit) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* temp = _impl_.event_.ext4_es_shrink_scan_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_es_shrink_scan_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& FtraceEvent::_internal_ext4_es_shrink_scan_exit() const {
  return event_case() == kExt4EsShrinkScanExit
      ? *_impl_.event_.ext4_es_shrink_scan_exit_
      : reinterpret_cast<::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent&>(::perfetto::protos::_Ext4EsShrinkScanExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent& FtraceEvent::ext4_es_shrink_scan_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  return _internal_ext4_es_shrink_scan_exit();
}
inline ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_es_shrink_scan_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  if (event_case() == kExt4EsShrinkScanExit) {
    clear_has_event();
    ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* temp = _impl_.event_.ext4_es_shrink_scan_exit_;
    _impl_.event_.ext4_es_shrink_scan_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_es_shrink_scan_exit(::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* ext4_es_shrink_scan_exit) {
  clear_event();
  if (ext4_es_shrink_scan_exit) {
    set_has_ext4_es_shrink_scan_exit();
    _impl_.event_.ext4_es_shrink_scan_exit_ = ext4_es_shrink_scan_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
}
inline ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_es_shrink_scan_exit() {
  if (event_case() != kExt4EsShrinkScanExit) {
    clear_event();
    set_has_ext4_es_shrink_scan_exit();
    _impl_.event_.ext4_es_shrink_scan_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_es_shrink_scan_exit_;
}
inline ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* FtraceEvent::mutable_ext4_es_shrink_scan_exit() {
  ::perfetto::protos::Ext4EsShrinkScanExitFtraceEvent* _msg = _internal_mutable_ext4_es_shrink_scan_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit)
  return _msg;
}

// .perfetto.protos.Ext4EvictInodeFtraceEvent ext4_evict_inode = 160;
inline bool FtraceEvent::has_ext4_evict_inode() const {
  return event_case() == kExt4EvictInode;
}
inline bool FtraceEvent::_internal_has_ext4_evict_inode() const {
  return event_case() == kExt4EvictInode;
}
inline void FtraceEvent::set_has_ext4_evict_inode() {
  _impl_._oneof_case_[0] = kExt4EvictInode;
}
inline ::perfetto::protos::Ext4EvictInodeFtraceEvent* FtraceEvent::release_ext4_evict_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_evict_inode)
  if (event_case() == kExt4EvictInode) {
    clear_has_event();
    ::perfetto::protos::Ext4EvictInodeFtraceEvent* temp = _impl_.event_.ext4_evict_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_evict_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4EvictInodeFtraceEvent& FtraceEvent::_internal_ext4_evict_inode() const {
  return event_case() == kExt4EvictInode
      ? *_impl_.event_.ext4_evict_inode_
      : reinterpret_cast<::perfetto::protos::Ext4EvictInodeFtraceEvent&>(::perfetto::protos::_Ext4EvictInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4EvictInodeFtraceEvent& FtraceEvent::ext4_evict_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_evict_inode)
  return _internal_ext4_evict_inode();
}
inline ::perfetto::protos::Ext4EvictInodeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_evict_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_evict_inode)
  if (event_case() == kExt4EvictInode) {
    clear_has_event();
    ::perfetto::protos::Ext4EvictInodeFtraceEvent* temp = _impl_.event_.ext4_evict_inode_;
    _impl_.event_.ext4_evict_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_evict_inode(::perfetto::protos::Ext4EvictInodeFtraceEvent* ext4_evict_inode) {
  clear_event();
  if (ext4_evict_inode) {
    set_has_ext4_evict_inode();
    _impl_.event_.ext4_evict_inode_ = ext4_evict_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_evict_inode)
}
inline ::perfetto::protos::Ext4EvictInodeFtraceEvent* FtraceEvent::_internal_mutable_ext4_evict_inode() {
  if (event_case() != kExt4EvictInode) {
    clear_event();
    set_has_ext4_evict_inode();
    _impl_.event_.ext4_evict_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4EvictInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_evict_inode_;
}
inline ::perfetto::protos::Ext4EvictInodeFtraceEvent* FtraceEvent::mutable_ext4_evict_inode() {
  ::perfetto::protos::Ext4EvictInodeFtraceEvent* _msg = _internal_mutable_ext4_evict_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_evict_inode)
  return _msg;
}

// .perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent ext4_ext_convert_to_initialized_enter = 161;
inline bool FtraceEvent::has_ext4_ext_convert_to_initialized_enter() const {
  return event_case() == kExt4ExtConvertToInitializedEnter;
}
inline bool FtraceEvent::_internal_has_ext4_ext_convert_to_initialized_enter() const {
  return event_case() == kExt4ExtConvertToInitializedEnter;
}
inline void FtraceEvent::set_has_ext4_ext_convert_to_initialized_enter() {
  _impl_._oneof_case_[0] = kExt4ExtConvertToInitializedEnter;
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::release_ext4_ext_convert_to_initialized_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  if (event_case() == kExt4ExtConvertToInitializedEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* temp = _impl_.event_.ext4_ext_convert_to_initialized_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_convert_to_initialized_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& FtraceEvent::_internal_ext4_ext_convert_to_initialized_enter() const {
  return event_case() == kExt4ExtConvertToInitializedEnter
      ? *_impl_.event_.ext4_ext_convert_to_initialized_enter_
      : reinterpret_cast<::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent&>(::perfetto::protos::_Ext4ExtConvertToInitializedEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent& FtraceEvent::ext4_ext_convert_to_initialized_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  return _internal_ext4_ext_convert_to_initialized_enter();
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_convert_to_initialized_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  if (event_case() == kExt4ExtConvertToInitializedEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* temp = _impl_.event_.ext4_ext_convert_to_initialized_enter_;
    _impl_.event_.ext4_ext_convert_to_initialized_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_convert_to_initialized_enter(::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* ext4_ext_convert_to_initialized_enter) {
  clear_event();
  if (ext4_ext_convert_to_initialized_enter) {
    set_has_ext4_ext_convert_to_initialized_enter();
    _impl_.event_.ext4_ext_convert_to_initialized_enter_ = ext4_ext_convert_to_initialized_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_convert_to_initialized_enter() {
  if (event_case() != kExt4ExtConvertToInitializedEnter) {
    clear_event();
    set_has_ext4_ext_convert_to_initialized_enter();
    _impl_.event_.ext4_ext_convert_to_initialized_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_convert_to_initialized_enter_;
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* FtraceEvent::mutable_ext4_ext_convert_to_initialized_enter() {
  ::perfetto::protos::Ext4ExtConvertToInitializedEnterFtraceEvent* _msg = _internal_mutable_ext4_ext_convert_to_initialized_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter)
  return _msg;
}

// .perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent ext4_ext_convert_to_initialized_fastpath = 162;
inline bool FtraceEvent::has_ext4_ext_convert_to_initialized_fastpath() const {
  return event_case() == kExt4ExtConvertToInitializedFastpath;
}
inline bool FtraceEvent::_internal_has_ext4_ext_convert_to_initialized_fastpath() const {
  return event_case() == kExt4ExtConvertToInitializedFastpath;
}
inline void FtraceEvent::set_has_ext4_ext_convert_to_initialized_fastpath() {
  _impl_._oneof_case_[0] = kExt4ExtConvertToInitializedFastpath;
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::release_ext4_ext_convert_to_initialized_fastpath() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  if (event_case() == kExt4ExtConvertToInitializedFastpath) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* temp = _impl_.event_.ext4_ext_convert_to_initialized_fastpath_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_convert_to_initialized_fastpath_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& FtraceEvent::_internal_ext4_ext_convert_to_initialized_fastpath() const {
  return event_case() == kExt4ExtConvertToInitializedFastpath
      ? *_impl_.event_.ext4_ext_convert_to_initialized_fastpath_
      : reinterpret_cast<::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent&>(::perfetto::protos::_Ext4ExtConvertToInitializedFastpathFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent& FtraceEvent::ext4_ext_convert_to_initialized_fastpath() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  return _internal_ext4_ext_convert_to_initialized_fastpath();
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_convert_to_initialized_fastpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  if (event_case() == kExt4ExtConvertToInitializedFastpath) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* temp = _impl_.event_.ext4_ext_convert_to_initialized_fastpath_;
    _impl_.event_.ext4_ext_convert_to_initialized_fastpath_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_convert_to_initialized_fastpath(::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* ext4_ext_convert_to_initialized_fastpath) {
  clear_event();
  if (ext4_ext_convert_to_initialized_fastpath) {
    set_has_ext4_ext_convert_to_initialized_fastpath();
    _impl_.event_.ext4_ext_convert_to_initialized_fastpath_ = ext4_ext_convert_to_initialized_fastpath;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_convert_to_initialized_fastpath() {
  if (event_case() != kExt4ExtConvertToInitializedFastpath) {
    clear_event();
    set_has_ext4_ext_convert_to_initialized_fastpath();
    _impl_.event_.ext4_ext_convert_to_initialized_fastpath_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_convert_to_initialized_fastpath_;
}
inline ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* FtraceEvent::mutable_ext4_ext_convert_to_initialized_fastpath() {
  ::perfetto::protos::Ext4ExtConvertToInitializedFastpathFtraceEvent* _msg = _internal_mutable_ext4_ext_convert_to_initialized_fastpath();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath)
  return _msg;
}

// .perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent ext4_ext_handle_unwritten_extents = 163;
inline bool FtraceEvent::has_ext4_ext_handle_unwritten_extents() const {
  return event_case() == kExt4ExtHandleUnwrittenExtents;
}
inline bool FtraceEvent::_internal_has_ext4_ext_handle_unwritten_extents() const {
  return event_case() == kExt4ExtHandleUnwrittenExtents;
}
inline void FtraceEvent::set_has_ext4_ext_handle_unwritten_extents() {
  _impl_._oneof_case_[0] = kExt4ExtHandleUnwrittenExtents;
}
inline ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::release_ext4_ext_handle_unwritten_extents() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  if (event_case() == kExt4ExtHandleUnwrittenExtents) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* temp = _impl_.event_.ext4_ext_handle_unwritten_extents_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_handle_unwritten_extents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& FtraceEvent::_internal_ext4_ext_handle_unwritten_extents() const {
  return event_case() == kExt4ExtHandleUnwrittenExtents
      ? *_impl_.event_.ext4_ext_handle_unwritten_extents_
      : reinterpret_cast<::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent&>(::perfetto::protos::_Ext4ExtHandleUnwrittenExtentsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent& FtraceEvent::ext4_ext_handle_unwritten_extents() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  return _internal_ext4_ext_handle_unwritten_extents();
}
inline ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_handle_unwritten_extents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  if (event_case() == kExt4ExtHandleUnwrittenExtents) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* temp = _impl_.event_.ext4_ext_handle_unwritten_extents_;
    _impl_.event_.ext4_ext_handle_unwritten_extents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_handle_unwritten_extents(::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* ext4_ext_handle_unwritten_extents) {
  clear_event();
  if (ext4_ext_handle_unwritten_extents) {
    set_has_ext4_ext_handle_unwritten_extents();
    _impl_.event_.ext4_ext_handle_unwritten_extents_ = ext4_ext_handle_unwritten_extents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
}
inline ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_handle_unwritten_extents() {
  if (event_case() != kExt4ExtHandleUnwrittenExtents) {
    clear_event();
    set_has_ext4_ext_handle_unwritten_extents();
    _impl_.event_.ext4_ext_handle_unwritten_extents_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_handle_unwritten_extents_;
}
inline ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* FtraceEvent::mutable_ext4_ext_handle_unwritten_extents() {
  ::perfetto::protos::Ext4ExtHandleUnwrittenExtentsFtraceEvent* _msg = _internal_mutable_ext4_ext_handle_unwritten_extents();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents)
  return _msg;
}

// .perfetto.protos.Ext4ExtInCacheFtraceEvent ext4_ext_in_cache = 164;
inline bool FtraceEvent::has_ext4_ext_in_cache() const {
  return event_case() == kExt4ExtInCache;
}
inline bool FtraceEvent::_internal_has_ext4_ext_in_cache() const {
  return event_case() == kExt4ExtInCache;
}
inline void FtraceEvent::set_has_ext4_ext_in_cache() {
  _impl_._oneof_case_[0] = kExt4ExtInCache;
}
inline ::perfetto::protos::Ext4ExtInCacheFtraceEvent* FtraceEvent::release_ext4_ext_in_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  if (event_case() == kExt4ExtInCache) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtInCacheFtraceEvent* temp = _impl_.event_.ext4_ext_in_cache_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_in_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& FtraceEvent::_internal_ext4_ext_in_cache() const {
  return event_case() == kExt4ExtInCache
      ? *_impl_.event_.ext4_ext_in_cache_
      : reinterpret_cast<::perfetto::protos::Ext4ExtInCacheFtraceEvent&>(::perfetto::protos::_Ext4ExtInCacheFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtInCacheFtraceEvent& FtraceEvent::ext4_ext_in_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  return _internal_ext4_ext_in_cache();
}
inline ::perfetto::protos::Ext4ExtInCacheFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_in_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  if (event_case() == kExt4ExtInCache) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtInCacheFtraceEvent* temp = _impl_.event_.ext4_ext_in_cache_;
    _impl_.event_.ext4_ext_in_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_in_cache(::perfetto::protos::Ext4ExtInCacheFtraceEvent* ext4_ext_in_cache) {
  clear_event();
  if (ext4_ext_in_cache) {
    set_has_ext4_ext_in_cache();
    _impl_.event_.ext4_ext_in_cache_ = ext4_ext_in_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
}
inline ::perfetto::protos::Ext4ExtInCacheFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_in_cache() {
  if (event_case() != kExt4ExtInCache) {
    clear_event();
    set_has_ext4_ext_in_cache();
    _impl_.event_.ext4_ext_in_cache_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtInCacheFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_in_cache_;
}
inline ::perfetto::protos::Ext4ExtInCacheFtraceEvent* FtraceEvent::mutable_ext4_ext_in_cache() {
  ::perfetto::protos::Ext4ExtInCacheFtraceEvent* _msg = _internal_mutable_ext4_ext_in_cache();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_in_cache)
  return _msg;
}

// .perfetto.protos.Ext4ExtLoadExtentFtraceEvent ext4_ext_load_extent = 165;
inline bool FtraceEvent::has_ext4_ext_load_extent() const {
  return event_case() == kExt4ExtLoadExtent;
}
inline bool FtraceEvent::_internal_has_ext4_ext_load_extent() const {
  return event_case() == kExt4ExtLoadExtent;
}
inline void FtraceEvent::set_has_ext4_ext_load_extent() {
  _impl_._oneof_case_[0] = kExt4ExtLoadExtent;
}
inline ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* FtraceEvent::release_ext4_ext_load_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  if (event_case() == kExt4ExtLoadExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* temp = _impl_.event_.ext4_ext_load_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_load_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& FtraceEvent::_internal_ext4_ext_load_extent() const {
  return event_case() == kExt4ExtLoadExtent
      ? *_impl_.event_.ext4_ext_load_extent_
      : reinterpret_cast<::perfetto::protos::Ext4ExtLoadExtentFtraceEvent&>(::perfetto::protos::_Ext4ExtLoadExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent& FtraceEvent::ext4_ext_load_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  return _internal_ext4_ext_load_extent();
}
inline ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_load_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  if (event_case() == kExt4ExtLoadExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* temp = _impl_.event_.ext4_ext_load_extent_;
    _impl_.event_.ext4_ext_load_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_load_extent(::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* ext4_ext_load_extent) {
  clear_event();
  if (ext4_ext_load_extent) {
    set_has_ext4_ext_load_extent();
    _impl_.event_.ext4_ext_load_extent_ = ext4_ext_load_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
}
inline ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_load_extent() {
  if (event_case() != kExt4ExtLoadExtent) {
    clear_event();
    set_has_ext4_ext_load_extent();
    _impl_.event_.ext4_ext_load_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_load_extent_;
}
inline ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* FtraceEvent::mutable_ext4_ext_load_extent() {
  ::perfetto::protos::Ext4ExtLoadExtentFtraceEvent* _msg = _internal_mutable_ext4_ext_load_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_load_extent)
  return _msg;
}

// .perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent ext4_ext_map_blocks_enter = 166;
inline bool FtraceEvent::has_ext4_ext_map_blocks_enter() const {
  return event_case() == kExt4ExtMapBlocksEnter;
}
inline bool FtraceEvent::_internal_has_ext4_ext_map_blocks_enter() const {
  return event_case() == kExt4ExtMapBlocksEnter;
}
inline void FtraceEvent::set_has_ext4_ext_map_blocks_enter() {
  _impl_._oneof_case_[0] = kExt4ExtMapBlocksEnter;
}
inline ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::release_ext4_ext_map_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  if (event_case() == kExt4ExtMapBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* temp = _impl_.event_.ext4_ext_map_blocks_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_map_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& FtraceEvent::_internal_ext4_ext_map_blocks_enter() const {
  return event_case() == kExt4ExtMapBlocksEnter
      ? *_impl_.event_.ext4_ext_map_blocks_enter_
      : reinterpret_cast<::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent&>(::perfetto::protos::_Ext4ExtMapBlocksEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent& FtraceEvent::ext4_ext_map_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  return _internal_ext4_ext_map_blocks_enter();
}
inline ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_map_blocks_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  if (event_case() == kExt4ExtMapBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* temp = _impl_.event_.ext4_ext_map_blocks_enter_;
    _impl_.event_.ext4_ext_map_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_map_blocks_enter(::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* ext4_ext_map_blocks_enter) {
  clear_event();
  if (ext4_ext_map_blocks_enter) {
    set_has_ext4_ext_map_blocks_enter();
    _impl_.event_.ext4_ext_map_blocks_enter_ = ext4_ext_map_blocks_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
}
inline ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_map_blocks_enter() {
  if (event_case() != kExt4ExtMapBlocksEnter) {
    clear_event();
    set_has_ext4_ext_map_blocks_enter();
    _impl_.event_.ext4_ext_map_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_map_blocks_enter_;
}
inline ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* FtraceEvent::mutable_ext4_ext_map_blocks_enter() {
  ::perfetto::protos::Ext4ExtMapBlocksEnterFtraceEvent* _msg = _internal_mutable_ext4_ext_map_blocks_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter)
  return _msg;
}

// .perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent ext4_ext_map_blocks_exit = 167;
inline bool FtraceEvent::has_ext4_ext_map_blocks_exit() const {
  return event_case() == kExt4ExtMapBlocksExit;
}
inline bool FtraceEvent::_internal_has_ext4_ext_map_blocks_exit() const {
  return event_case() == kExt4ExtMapBlocksExit;
}
inline void FtraceEvent::set_has_ext4_ext_map_blocks_exit() {
  _impl_._oneof_case_[0] = kExt4ExtMapBlocksExit;
}
inline ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::release_ext4_ext_map_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  if (event_case() == kExt4ExtMapBlocksExit) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* temp = _impl_.event_.ext4_ext_map_blocks_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_map_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& FtraceEvent::_internal_ext4_ext_map_blocks_exit() const {
  return event_case() == kExt4ExtMapBlocksExit
      ? *_impl_.event_.ext4_ext_map_blocks_exit_
      : reinterpret_cast<::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent&>(::perfetto::protos::_Ext4ExtMapBlocksExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent& FtraceEvent::ext4_ext_map_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  return _internal_ext4_ext_map_blocks_exit();
}
inline ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_map_blocks_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  if (event_case() == kExt4ExtMapBlocksExit) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* temp = _impl_.event_.ext4_ext_map_blocks_exit_;
    _impl_.event_.ext4_ext_map_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_map_blocks_exit(::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* ext4_ext_map_blocks_exit) {
  clear_event();
  if (ext4_ext_map_blocks_exit) {
    set_has_ext4_ext_map_blocks_exit();
    _impl_.event_.ext4_ext_map_blocks_exit_ = ext4_ext_map_blocks_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
}
inline ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_map_blocks_exit() {
  if (event_case() != kExt4ExtMapBlocksExit) {
    clear_event();
    set_has_ext4_ext_map_blocks_exit();
    _impl_.event_.ext4_ext_map_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_map_blocks_exit_;
}
inline ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* FtraceEvent::mutable_ext4_ext_map_blocks_exit() {
  ::perfetto::protos::Ext4ExtMapBlocksExitFtraceEvent* _msg = _internal_mutable_ext4_ext_map_blocks_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit)
  return _msg;
}

// .perfetto.protos.Ext4ExtPutInCacheFtraceEvent ext4_ext_put_in_cache = 168;
inline bool FtraceEvent::has_ext4_ext_put_in_cache() const {
  return event_case() == kExt4ExtPutInCache;
}
inline bool FtraceEvent::_internal_has_ext4_ext_put_in_cache() const {
  return event_case() == kExt4ExtPutInCache;
}
inline void FtraceEvent::set_has_ext4_ext_put_in_cache() {
  _impl_._oneof_case_[0] = kExt4ExtPutInCache;
}
inline ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* FtraceEvent::release_ext4_ext_put_in_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  if (event_case() == kExt4ExtPutInCache) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* temp = _impl_.event_.ext4_ext_put_in_cache_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_put_in_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& FtraceEvent::_internal_ext4_ext_put_in_cache() const {
  return event_case() == kExt4ExtPutInCache
      ? *_impl_.event_.ext4_ext_put_in_cache_
      : reinterpret_cast<::perfetto::protos::Ext4ExtPutInCacheFtraceEvent&>(::perfetto::protos::_Ext4ExtPutInCacheFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent& FtraceEvent::ext4_ext_put_in_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  return _internal_ext4_ext_put_in_cache();
}
inline ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_put_in_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  if (event_case() == kExt4ExtPutInCache) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* temp = _impl_.event_.ext4_ext_put_in_cache_;
    _impl_.event_.ext4_ext_put_in_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_put_in_cache(::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* ext4_ext_put_in_cache) {
  clear_event();
  if (ext4_ext_put_in_cache) {
    set_has_ext4_ext_put_in_cache();
    _impl_.event_.ext4_ext_put_in_cache_ = ext4_ext_put_in_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
}
inline ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_put_in_cache() {
  if (event_case() != kExt4ExtPutInCache) {
    clear_event();
    set_has_ext4_ext_put_in_cache();
    _impl_.event_.ext4_ext_put_in_cache_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_put_in_cache_;
}
inline ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* FtraceEvent::mutable_ext4_ext_put_in_cache() {
  ::perfetto::protos::Ext4ExtPutInCacheFtraceEvent* _msg = _internal_mutable_ext4_ext_put_in_cache();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_put_in_cache)
  return _msg;
}

// .perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent ext4_ext_remove_space = 169;
inline bool FtraceEvent::has_ext4_ext_remove_space() const {
  return event_case() == kExt4ExtRemoveSpace;
}
inline bool FtraceEvent::_internal_has_ext4_ext_remove_space() const {
  return event_case() == kExt4ExtRemoveSpace;
}
inline void FtraceEvent::set_has_ext4_ext_remove_space() {
  _impl_._oneof_case_[0] = kExt4ExtRemoveSpace;
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::release_ext4_ext_remove_space() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  if (event_case() == kExt4ExtRemoveSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* temp = _impl_.event_.ext4_ext_remove_space_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_remove_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& FtraceEvent::_internal_ext4_ext_remove_space() const {
  return event_case() == kExt4ExtRemoveSpace
      ? *_impl_.event_.ext4_ext_remove_space_
      : reinterpret_cast<::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent&>(::perfetto::protos::_Ext4ExtRemoveSpaceFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent& FtraceEvent::ext4_ext_remove_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  return _internal_ext4_ext_remove_space();
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_remove_space() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  if (event_case() == kExt4ExtRemoveSpace) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* temp = _impl_.event_.ext4_ext_remove_space_;
    _impl_.event_.ext4_ext_remove_space_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_remove_space(::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* ext4_ext_remove_space) {
  clear_event();
  if (ext4_ext_remove_space) {
    set_has_ext4_ext_remove_space();
    _impl_.event_.ext4_ext_remove_space_ = ext4_ext_remove_space;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_remove_space() {
  if (event_case() != kExt4ExtRemoveSpace) {
    clear_event();
    set_has_ext4_ext_remove_space();
    _impl_.event_.ext4_ext_remove_space_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_remove_space_;
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* FtraceEvent::mutable_ext4_ext_remove_space() {
  ::perfetto::protos::Ext4ExtRemoveSpaceFtraceEvent* _msg = _internal_mutable_ext4_ext_remove_space();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_remove_space)
  return _msg;
}

// .perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent ext4_ext_remove_space_done = 170;
inline bool FtraceEvent::has_ext4_ext_remove_space_done() const {
  return event_case() == kExt4ExtRemoveSpaceDone;
}
inline bool FtraceEvent::_internal_has_ext4_ext_remove_space_done() const {
  return event_case() == kExt4ExtRemoveSpaceDone;
}
inline void FtraceEvent::set_has_ext4_ext_remove_space_done() {
  _impl_._oneof_case_[0] = kExt4ExtRemoveSpaceDone;
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::release_ext4_ext_remove_space_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  if (event_case() == kExt4ExtRemoveSpaceDone) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* temp = _impl_.event_.ext4_ext_remove_space_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_remove_space_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& FtraceEvent::_internal_ext4_ext_remove_space_done() const {
  return event_case() == kExt4ExtRemoveSpaceDone
      ? *_impl_.event_.ext4_ext_remove_space_done_
      : reinterpret_cast<::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent&>(::perfetto::protos::_Ext4ExtRemoveSpaceDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent& FtraceEvent::ext4_ext_remove_space_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  return _internal_ext4_ext_remove_space_done();
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_remove_space_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  if (event_case() == kExt4ExtRemoveSpaceDone) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* temp = _impl_.event_.ext4_ext_remove_space_done_;
    _impl_.event_.ext4_ext_remove_space_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_remove_space_done(::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* ext4_ext_remove_space_done) {
  clear_event();
  if (ext4_ext_remove_space_done) {
    set_has_ext4_ext_remove_space_done();
    _impl_.event_.ext4_ext_remove_space_done_ = ext4_ext_remove_space_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_remove_space_done() {
  if (event_case() != kExt4ExtRemoveSpaceDone) {
    clear_event();
    set_has_ext4_ext_remove_space_done();
    _impl_.event_.ext4_ext_remove_space_done_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_remove_space_done_;
}
inline ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* FtraceEvent::mutable_ext4_ext_remove_space_done() {
  ::perfetto::protos::Ext4ExtRemoveSpaceDoneFtraceEvent* _msg = _internal_mutable_ext4_ext_remove_space_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_remove_space_done)
  return _msg;
}

// .perfetto.protos.Ext4ExtRmIdxFtraceEvent ext4_ext_rm_idx = 171;
inline bool FtraceEvent::has_ext4_ext_rm_idx() const {
  return event_case() == kExt4ExtRmIdx;
}
inline bool FtraceEvent::_internal_has_ext4_ext_rm_idx() const {
  return event_case() == kExt4ExtRmIdx;
}
inline void FtraceEvent::set_has_ext4_ext_rm_idx() {
  _impl_._oneof_case_[0] = kExt4ExtRmIdx;
}
inline ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* FtraceEvent::release_ext4_ext_rm_idx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  if (event_case() == kExt4ExtRmIdx) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* temp = _impl_.event_.ext4_ext_rm_idx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_rm_idx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& FtraceEvent::_internal_ext4_ext_rm_idx() const {
  return event_case() == kExt4ExtRmIdx
      ? *_impl_.event_.ext4_ext_rm_idx_
      : reinterpret_cast<::perfetto::protos::Ext4ExtRmIdxFtraceEvent&>(::perfetto::protos::_Ext4ExtRmIdxFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtRmIdxFtraceEvent& FtraceEvent::ext4_ext_rm_idx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  return _internal_ext4_ext_rm_idx();
}
inline ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_rm_idx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  if (event_case() == kExt4ExtRmIdx) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* temp = _impl_.event_.ext4_ext_rm_idx_;
    _impl_.event_.ext4_ext_rm_idx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_rm_idx(::perfetto::protos::Ext4ExtRmIdxFtraceEvent* ext4_ext_rm_idx) {
  clear_event();
  if (ext4_ext_rm_idx) {
    set_has_ext4_ext_rm_idx();
    _impl_.event_.ext4_ext_rm_idx_ = ext4_ext_rm_idx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
}
inline ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_rm_idx() {
  if (event_case() != kExt4ExtRmIdx) {
    clear_event();
    set_has_ext4_ext_rm_idx();
    _impl_.event_.ext4_ext_rm_idx_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRmIdxFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_rm_idx_;
}
inline ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* FtraceEvent::mutable_ext4_ext_rm_idx() {
  ::perfetto::protos::Ext4ExtRmIdxFtraceEvent* _msg = _internal_mutable_ext4_ext_rm_idx();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_rm_idx)
  return _msg;
}

// .perfetto.protos.Ext4ExtRmLeafFtraceEvent ext4_ext_rm_leaf = 172;
inline bool FtraceEvent::has_ext4_ext_rm_leaf() const {
  return event_case() == kExt4ExtRmLeaf;
}
inline bool FtraceEvent::_internal_has_ext4_ext_rm_leaf() const {
  return event_case() == kExt4ExtRmLeaf;
}
inline void FtraceEvent::set_has_ext4_ext_rm_leaf() {
  _impl_._oneof_case_[0] = kExt4ExtRmLeaf;
}
inline ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* FtraceEvent::release_ext4_ext_rm_leaf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  if (event_case() == kExt4ExtRmLeaf) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* temp = _impl_.event_.ext4_ext_rm_leaf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_rm_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& FtraceEvent::_internal_ext4_ext_rm_leaf() const {
  return event_case() == kExt4ExtRmLeaf
      ? *_impl_.event_.ext4_ext_rm_leaf_
      : reinterpret_cast<::perfetto::protos::Ext4ExtRmLeafFtraceEvent&>(::perfetto::protos::_Ext4ExtRmLeafFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtRmLeafFtraceEvent& FtraceEvent::ext4_ext_rm_leaf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  return _internal_ext4_ext_rm_leaf();
}
inline ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_rm_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  if (event_case() == kExt4ExtRmLeaf) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* temp = _impl_.event_.ext4_ext_rm_leaf_;
    _impl_.event_.ext4_ext_rm_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_rm_leaf(::perfetto::protos::Ext4ExtRmLeafFtraceEvent* ext4_ext_rm_leaf) {
  clear_event();
  if (ext4_ext_rm_leaf) {
    set_has_ext4_ext_rm_leaf();
    _impl_.event_.ext4_ext_rm_leaf_ = ext4_ext_rm_leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
}
inline ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_rm_leaf() {
  if (event_case() != kExt4ExtRmLeaf) {
    clear_event();
    set_has_ext4_ext_rm_leaf();
    _impl_.event_.ext4_ext_rm_leaf_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtRmLeafFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_rm_leaf_;
}
inline ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* FtraceEvent::mutable_ext4_ext_rm_leaf() {
  ::perfetto::protos::Ext4ExtRmLeafFtraceEvent* _msg = _internal_mutable_ext4_ext_rm_leaf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_rm_leaf)
  return _msg;
}

// .perfetto.protos.Ext4ExtShowExtentFtraceEvent ext4_ext_show_extent = 173;
inline bool FtraceEvent::has_ext4_ext_show_extent() const {
  return event_case() == kExt4ExtShowExtent;
}
inline bool FtraceEvent::_internal_has_ext4_ext_show_extent() const {
  return event_case() == kExt4ExtShowExtent;
}
inline void FtraceEvent::set_has_ext4_ext_show_extent() {
  _impl_._oneof_case_[0] = kExt4ExtShowExtent;
}
inline ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* FtraceEvent::release_ext4_ext_show_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  if (event_case() == kExt4ExtShowExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* temp = _impl_.event_.ext4_ext_show_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ext_show_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& FtraceEvent::_internal_ext4_ext_show_extent() const {
  return event_case() == kExt4ExtShowExtent
      ? *_impl_.event_.ext4_ext_show_extent_
      : reinterpret_cast<::perfetto::protos::Ext4ExtShowExtentFtraceEvent&>(::perfetto::protos::_Ext4ExtShowExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ExtShowExtentFtraceEvent& FtraceEvent::ext4_ext_show_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  return _internal_ext4_ext_show_extent();
}
inline ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ext_show_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  if (event_case() == kExt4ExtShowExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* temp = _impl_.event_.ext4_ext_show_extent_;
    _impl_.event_.ext4_ext_show_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ext_show_extent(::perfetto::protos::Ext4ExtShowExtentFtraceEvent* ext4_ext_show_extent) {
  clear_event();
  if (ext4_ext_show_extent) {
    set_has_ext4_ext_show_extent();
    _impl_.event_.ext4_ext_show_extent_ = ext4_ext_show_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
}
inline ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_ext_show_extent() {
  if (event_case() != kExt4ExtShowExtent) {
    clear_event();
    set_has_ext4_ext_show_extent();
    _impl_.event_.ext4_ext_show_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4ExtShowExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ext_show_extent_;
}
inline ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* FtraceEvent::mutable_ext4_ext_show_extent() {
  ::perfetto::protos::Ext4ExtShowExtentFtraceEvent* _msg = _internal_mutable_ext4_ext_show_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ext_show_extent)
  return _msg;
}

// .perfetto.protos.Ext4FallocateEnterFtraceEvent ext4_fallocate_enter = 174;
inline bool FtraceEvent::has_ext4_fallocate_enter() const {
  return event_case() == kExt4FallocateEnter;
}
inline bool FtraceEvent::_internal_has_ext4_fallocate_enter() const {
  return event_case() == kExt4FallocateEnter;
}
inline void FtraceEvent::set_has_ext4_fallocate_enter() {
  _impl_._oneof_case_[0] = kExt4FallocateEnter;
}
inline ::perfetto::protos::Ext4FallocateEnterFtraceEvent* FtraceEvent::release_ext4_fallocate_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  if (event_case() == kExt4FallocateEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4FallocateEnterFtraceEvent* temp = _impl_.event_.ext4_fallocate_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_fallocate_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& FtraceEvent::_internal_ext4_fallocate_enter() const {
  return event_case() == kExt4FallocateEnter
      ? *_impl_.event_.ext4_fallocate_enter_
      : reinterpret_cast<::perfetto::protos::Ext4FallocateEnterFtraceEvent&>(::perfetto::protos::_Ext4FallocateEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4FallocateEnterFtraceEvent& FtraceEvent::ext4_fallocate_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  return _internal_ext4_fallocate_enter();
}
inline ::perfetto::protos::Ext4FallocateEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_fallocate_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  if (event_case() == kExt4FallocateEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4FallocateEnterFtraceEvent* temp = _impl_.event_.ext4_fallocate_enter_;
    _impl_.event_.ext4_fallocate_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_fallocate_enter(::perfetto::protos::Ext4FallocateEnterFtraceEvent* ext4_fallocate_enter) {
  clear_event();
  if (ext4_fallocate_enter) {
    set_has_ext4_fallocate_enter();
    _impl_.event_.ext4_fallocate_enter_ = ext4_fallocate_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
}
inline ::perfetto::protos::Ext4FallocateEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_fallocate_enter() {
  if (event_case() != kExt4FallocateEnter) {
    clear_event();
    set_has_ext4_fallocate_enter();
    _impl_.event_.ext4_fallocate_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4FallocateEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_fallocate_enter_;
}
inline ::perfetto::protos::Ext4FallocateEnterFtraceEvent* FtraceEvent::mutable_ext4_fallocate_enter() {
  ::perfetto::protos::Ext4FallocateEnterFtraceEvent* _msg = _internal_mutable_ext4_fallocate_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_fallocate_enter)
  return _msg;
}

// .perfetto.protos.Ext4FallocateExitFtraceEvent ext4_fallocate_exit = 175;
inline bool FtraceEvent::has_ext4_fallocate_exit() const {
  return event_case() == kExt4FallocateExit;
}
inline bool FtraceEvent::_internal_has_ext4_fallocate_exit() const {
  return event_case() == kExt4FallocateExit;
}
inline void FtraceEvent::set_has_ext4_fallocate_exit() {
  _impl_._oneof_case_[0] = kExt4FallocateExit;
}
inline ::perfetto::protos::Ext4FallocateExitFtraceEvent* FtraceEvent::release_ext4_fallocate_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  if (event_case() == kExt4FallocateExit) {
    clear_has_event();
    ::perfetto::protos::Ext4FallocateExitFtraceEvent* temp = _impl_.event_.ext4_fallocate_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_fallocate_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FallocateExitFtraceEvent& FtraceEvent::_internal_ext4_fallocate_exit() const {
  return event_case() == kExt4FallocateExit
      ? *_impl_.event_.ext4_fallocate_exit_
      : reinterpret_cast<::perfetto::protos::Ext4FallocateExitFtraceEvent&>(::perfetto::protos::_Ext4FallocateExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4FallocateExitFtraceEvent& FtraceEvent::ext4_fallocate_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  return _internal_ext4_fallocate_exit();
}
inline ::perfetto::protos::Ext4FallocateExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_fallocate_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  if (event_case() == kExt4FallocateExit) {
    clear_has_event();
    ::perfetto::protos::Ext4FallocateExitFtraceEvent* temp = _impl_.event_.ext4_fallocate_exit_;
    _impl_.event_.ext4_fallocate_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_fallocate_exit(::perfetto::protos::Ext4FallocateExitFtraceEvent* ext4_fallocate_exit) {
  clear_event();
  if (ext4_fallocate_exit) {
    set_has_ext4_fallocate_exit();
    _impl_.event_.ext4_fallocate_exit_ = ext4_fallocate_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
}
inline ::perfetto::protos::Ext4FallocateExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_fallocate_exit() {
  if (event_case() != kExt4FallocateExit) {
    clear_event();
    set_has_ext4_fallocate_exit();
    _impl_.event_.ext4_fallocate_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4FallocateExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_fallocate_exit_;
}
inline ::perfetto::protos::Ext4FallocateExitFtraceEvent* FtraceEvent::mutable_ext4_fallocate_exit() {
  ::perfetto::protos::Ext4FallocateExitFtraceEvent* _msg = _internal_mutable_ext4_fallocate_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_fallocate_exit)
  return _msg;
}

// .perfetto.protos.Ext4FindDelallocRangeFtraceEvent ext4_find_delalloc_range = 176;
inline bool FtraceEvent::has_ext4_find_delalloc_range() const {
  return event_case() == kExt4FindDelallocRange;
}
inline bool FtraceEvent::_internal_has_ext4_find_delalloc_range() const {
  return event_case() == kExt4FindDelallocRange;
}
inline void FtraceEvent::set_has_ext4_find_delalloc_range() {
  _impl_._oneof_case_[0] = kExt4FindDelallocRange;
}
inline ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* FtraceEvent::release_ext4_find_delalloc_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  if (event_case() == kExt4FindDelallocRange) {
    clear_has_event();
    ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* temp = _impl_.event_.ext4_find_delalloc_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_find_delalloc_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& FtraceEvent::_internal_ext4_find_delalloc_range() const {
  return event_case() == kExt4FindDelallocRange
      ? *_impl_.event_.ext4_find_delalloc_range_
      : reinterpret_cast<::perfetto::protos::Ext4FindDelallocRangeFtraceEvent&>(::perfetto::protos::_Ext4FindDelallocRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent& FtraceEvent::ext4_find_delalloc_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  return _internal_ext4_find_delalloc_range();
}
inline ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_find_delalloc_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  if (event_case() == kExt4FindDelallocRange) {
    clear_has_event();
    ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* temp = _impl_.event_.ext4_find_delalloc_range_;
    _impl_.event_.ext4_find_delalloc_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_find_delalloc_range(::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* ext4_find_delalloc_range) {
  clear_event();
  if (ext4_find_delalloc_range) {
    set_has_ext4_find_delalloc_range();
    _impl_.event_.ext4_find_delalloc_range_ = ext4_find_delalloc_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
}
inline ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* FtraceEvent::_internal_mutable_ext4_find_delalloc_range() {
  if (event_case() != kExt4FindDelallocRange) {
    clear_event();
    set_has_ext4_find_delalloc_range();
    _impl_.event_.ext4_find_delalloc_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_find_delalloc_range_;
}
inline ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* FtraceEvent::mutable_ext4_find_delalloc_range() {
  ::perfetto::protos::Ext4FindDelallocRangeFtraceEvent* _msg = _internal_mutable_ext4_find_delalloc_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_find_delalloc_range)
  return _msg;
}

// .perfetto.protos.Ext4ForgetFtraceEvent ext4_forget = 177;
inline bool FtraceEvent::has_ext4_forget() const {
  return event_case() == kExt4Forget;
}
inline bool FtraceEvent::_internal_has_ext4_forget() const {
  return event_case() == kExt4Forget;
}
inline void FtraceEvent::set_has_ext4_forget() {
  _impl_._oneof_case_[0] = kExt4Forget;
}
inline ::perfetto::protos::Ext4ForgetFtraceEvent* FtraceEvent::release_ext4_forget() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_forget)
  if (event_case() == kExt4Forget) {
    clear_has_event();
    ::perfetto::protos::Ext4ForgetFtraceEvent* temp = _impl_.event_.ext4_forget_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_forget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ForgetFtraceEvent& FtraceEvent::_internal_ext4_forget() const {
  return event_case() == kExt4Forget
      ? *_impl_.event_.ext4_forget_
      : reinterpret_cast<::perfetto::protos::Ext4ForgetFtraceEvent&>(::perfetto::protos::_Ext4ForgetFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ForgetFtraceEvent& FtraceEvent::ext4_forget() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_forget)
  return _internal_ext4_forget();
}
inline ::perfetto::protos::Ext4ForgetFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_forget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_forget)
  if (event_case() == kExt4Forget) {
    clear_has_event();
    ::perfetto::protos::Ext4ForgetFtraceEvent* temp = _impl_.event_.ext4_forget_;
    _impl_.event_.ext4_forget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_forget(::perfetto::protos::Ext4ForgetFtraceEvent* ext4_forget) {
  clear_event();
  if (ext4_forget) {
    set_has_ext4_forget();
    _impl_.event_.ext4_forget_ = ext4_forget;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_forget)
}
inline ::perfetto::protos::Ext4ForgetFtraceEvent* FtraceEvent::_internal_mutable_ext4_forget() {
  if (event_case() != kExt4Forget) {
    clear_event();
    set_has_ext4_forget();
    _impl_.event_.ext4_forget_ = CreateMaybeMessage< ::perfetto::protos::Ext4ForgetFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_forget_;
}
inline ::perfetto::protos::Ext4ForgetFtraceEvent* FtraceEvent::mutable_ext4_forget() {
  ::perfetto::protos::Ext4ForgetFtraceEvent* _msg = _internal_mutable_ext4_forget();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_forget)
  return _msg;
}

// .perfetto.protos.Ext4FreeBlocksFtraceEvent ext4_free_blocks = 178;
inline bool FtraceEvent::has_ext4_free_blocks() const {
  return event_case() == kExt4FreeBlocks;
}
inline bool FtraceEvent::_internal_has_ext4_free_blocks() const {
  return event_case() == kExt4FreeBlocks;
}
inline void FtraceEvent::set_has_ext4_free_blocks() {
  _impl_._oneof_case_[0] = kExt4FreeBlocks;
}
inline ::perfetto::protos::Ext4FreeBlocksFtraceEvent* FtraceEvent::release_ext4_free_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_free_blocks)
  if (event_case() == kExt4FreeBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4FreeBlocksFtraceEvent* temp = _impl_.event_.ext4_free_blocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_free_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& FtraceEvent::_internal_ext4_free_blocks() const {
  return event_case() == kExt4FreeBlocks
      ? *_impl_.event_.ext4_free_blocks_
      : reinterpret_cast<::perfetto::protos::Ext4FreeBlocksFtraceEvent&>(::perfetto::protos::_Ext4FreeBlocksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4FreeBlocksFtraceEvent& FtraceEvent::ext4_free_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_free_blocks)
  return _internal_ext4_free_blocks();
}
inline ::perfetto::protos::Ext4FreeBlocksFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_free_blocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_free_blocks)
  if (event_case() == kExt4FreeBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4FreeBlocksFtraceEvent* temp = _impl_.event_.ext4_free_blocks_;
    _impl_.event_.ext4_free_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_free_blocks(::perfetto::protos::Ext4FreeBlocksFtraceEvent* ext4_free_blocks) {
  clear_event();
  if (ext4_free_blocks) {
    set_has_ext4_free_blocks();
    _impl_.event_.ext4_free_blocks_ = ext4_free_blocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_free_blocks)
}
inline ::perfetto::protos::Ext4FreeBlocksFtraceEvent* FtraceEvent::_internal_mutable_ext4_free_blocks() {
  if (event_case() != kExt4FreeBlocks) {
    clear_event();
    set_has_ext4_free_blocks();
    _impl_.event_.ext4_free_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4FreeBlocksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_free_blocks_;
}
inline ::perfetto::protos::Ext4FreeBlocksFtraceEvent* FtraceEvent::mutable_ext4_free_blocks() {
  ::perfetto::protos::Ext4FreeBlocksFtraceEvent* _msg = _internal_mutable_ext4_free_blocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_free_blocks)
  return _msg;
}

// .perfetto.protos.Ext4FreeInodeFtraceEvent ext4_free_inode = 179;
inline bool FtraceEvent::has_ext4_free_inode() const {
  return event_case() == kExt4FreeInode;
}
inline bool FtraceEvent::_internal_has_ext4_free_inode() const {
  return event_case() == kExt4FreeInode;
}
inline void FtraceEvent::set_has_ext4_free_inode() {
  _impl_._oneof_case_[0] = kExt4FreeInode;
}
inline ::perfetto::protos::Ext4FreeInodeFtraceEvent* FtraceEvent::release_ext4_free_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_free_inode)
  if (event_case() == kExt4FreeInode) {
    clear_has_event();
    ::perfetto::protos::Ext4FreeInodeFtraceEvent* temp = _impl_.event_.ext4_free_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_free_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4FreeInodeFtraceEvent& FtraceEvent::_internal_ext4_free_inode() const {
  return event_case() == kExt4FreeInode
      ? *_impl_.event_.ext4_free_inode_
      : reinterpret_cast<::perfetto::protos::Ext4FreeInodeFtraceEvent&>(::perfetto::protos::_Ext4FreeInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4FreeInodeFtraceEvent& FtraceEvent::ext4_free_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_free_inode)
  return _internal_ext4_free_inode();
}
inline ::perfetto::protos::Ext4FreeInodeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_free_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_free_inode)
  if (event_case() == kExt4FreeInode) {
    clear_has_event();
    ::perfetto::protos::Ext4FreeInodeFtraceEvent* temp = _impl_.event_.ext4_free_inode_;
    _impl_.event_.ext4_free_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_free_inode(::perfetto::protos::Ext4FreeInodeFtraceEvent* ext4_free_inode) {
  clear_event();
  if (ext4_free_inode) {
    set_has_ext4_free_inode();
    _impl_.event_.ext4_free_inode_ = ext4_free_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_free_inode)
}
inline ::perfetto::protos::Ext4FreeInodeFtraceEvent* FtraceEvent::_internal_mutable_ext4_free_inode() {
  if (event_case() != kExt4FreeInode) {
    clear_event();
    set_has_ext4_free_inode();
    _impl_.event_.ext4_free_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4FreeInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_free_inode_;
}
inline ::perfetto::protos::Ext4FreeInodeFtraceEvent* FtraceEvent::mutable_ext4_free_inode() {
  ::perfetto::protos::Ext4FreeInodeFtraceEvent* _msg = _internal_mutable_ext4_free_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_free_inode)
  return _msg;
}

// .perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent ext4_get_implied_cluster_alloc_exit = 180;
inline bool FtraceEvent::has_ext4_get_implied_cluster_alloc_exit() const {
  return event_case() == kExt4GetImpliedClusterAllocExit;
}
inline bool FtraceEvent::_internal_has_ext4_get_implied_cluster_alloc_exit() const {
  return event_case() == kExt4GetImpliedClusterAllocExit;
}
inline void FtraceEvent::set_has_ext4_get_implied_cluster_alloc_exit() {
  _impl_._oneof_case_[0] = kExt4GetImpliedClusterAllocExit;
}
inline ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::release_ext4_get_implied_cluster_alloc_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  if (event_case() == kExt4GetImpliedClusterAllocExit) {
    clear_has_event();
    ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* temp = _impl_.event_.ext4_get_implied_cluster_alloc_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_get_implied_cluster_alloc_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& FtraceEvent::_internal_ext4_get_implied_cluster_alloc_exit() const {
  return event_case() == kExt4GetImpliedClusterAllocExit
      ? *_impl_.event_.ext4_get_implied_cluster_alloc_exit_
      : reinterpret_cast<::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent&>(::perfetto::protos::_Ext4GetImpliedClusterAllocExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent& FtraceEvent::ext4_get_implied_cluster_alloc_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  return _internal_ext4_get_implied_cluster_alloc_exit();
}
inline ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_get_implied_cluster_alloc_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  if (event_case() == kExt4GetImpliedClusterAllocExit) {
    clear_has_event();
    ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* temp = _impl_.event_.ext4_get_implied_cluster_alloc_exit_;
    _impl_.event_.ext4_get_implied_cluster_alloc_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_get_implied_cluster_alloc_exit(::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* ext4_get_implied_cluster_alloc_exit) {
  clear_event();
  if (ext4_get_implied_cluster_alloc_exit) {
    set_has_ext4_get_implied_cluster_alloc_exit();
    _impl_.event_.ext4_get_implied_cluster_alloc_exit_ = ext4_get_implied_cluster_alloc_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
}
inline ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_get_implied_cluster_alloc_exit() {
  if (event_case() != kExt4GetImpliedClusterAllocExit) {
    clear_event();
    set_has_ext4_get_implied_cluster_alloc_exit();
    _impl_.event_.ext4_get_implied_cluster_alloc_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_get_implied_cluster_alloc_exit_;
}
inline ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* FtraceEvent::mutable_ext4_get_implied_cluster_alloc_exit() {
  ::perfetto::protos::Ext4GetImpliedClusterAllocExitFtraceEvent* _msg = _internal_mutable_ext4_get_implied_cluster_alloc_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit)
  return _msg;
}

// .perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent ext4_get_reserved_cluster_alloc = 181;
inline bool FtraceEvent::has_ext4_get_reserved_cluster_alloc() const {
  return event_case() == kExt4GetReservedClusterAlloc;
}
inline bool FtraceEvent::_internal_has_ext4_get_reserved_cluster_alloc() const {
  return event_case() == kExt4GetReservedClusterAlloc;
}
inline void FtraceEvent::set_has_ext4_get_reserved_cluster_alloc() {
  _impl_._oneof_case_[0] = kExt4GetReservedClusterAlloc;
}
inline ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::release_ext4_get_reserved_cluster_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  if (event_case() == kExt4GetReservedClusterAlloc) {
    clear_has_event();
    ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* temp = _impl_.event_.ext4_get_reserved_cluster_alloc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_get_reserved_cluster_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& FtraceEvent::_internal_ext4_get_reserved_cluster_alloc() const {
  return event_case() == kExt4GetReservedClusterAlloc
      ? *_impl_.event_.ext4_get_reserved_cluster_alloc_
      : reinterpret_cast<::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent&>(::perfetto::protos::_Ext4GetReservedClusterAllocFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent& FtraceEvent::ext4_get_reserved_cluster_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  return _internal_ext4_get_reserved_cluster_alloc();
}
inline ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_get_reserved_cluster_alloc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  if (event_case() == kExt4GetReservedClusterAlloc) {
    clear_has_event();
    ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* temp = _impl_.event_.ext4_get_reserved_cluster_alloc_;
    _impl_.event_.ext4_get_reserved_cluster_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_get_reserved_cluster_alloc(::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* ext4_get_reserved_cluster_alloc) {
  clear_event();
  if (ext4_get_reserved_cluster_alloc) {
    set_has_ext4_get_reserved_cluster_alloc();
    _impl_.event_.ext4_get_reserved_cluster_alloc_ = ext4_get_reserved_cluster_alloc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
}
inline ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::_internal_mutable_ext4_get_reserved_cluster_alloc() {
  if (event_case() != kExt4GetReservedClusterAlloc) {
    clear_event();
    set_has_ext4_get_reserved_cluster_alloc();
    _impl_.event_.ext4_get_reserved_cluster_alloc_ = CreateMaybeMessage< ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_get_reserved_cluster_alloc_;
}
inline ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* FtraceEvent::mutable_ext4_get_reserved_cluster_alloc() {
  ::perfetto::protos::Ext4GetReservedClusterAllocFtraceEvent* _msg = _internal_mutable_ext4_get_reserved_cluster_alloc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc)
  return _msg;
}

// .perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent ext4_ind_map_blocks_enter = 182;
inline bool FtraceEvent::has_ext4_ind_map_blocks_enter() const {
  return event_case() == kExt4IndMapBlocksEnter;
}
inline bool FtraceEvent::_internal_has_ext4_ind_map_blocks_enter() const {
  return event_case() == kExt4IndMapBlocksEnter;
}
inline void FtraceEvent::set_has_ext4_ind_map_blocks_enter() {
  _impl_._oneof_case_[0] = kExt4IndMapBlocksEnter;
}
inline ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::release_ext4_ind_map_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  if (event_case() == kExt4IndMapBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* temp = _impl_.event_.ext4_ind_map_blocks_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ind_map_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& FtraceEvent::_internal_ext4_ind_map_blocks_enter() const {
  return event_case() == kExt4IndMapBlocksEnter
      ? *_impl_.event_.ext4_ind_map_blocks_enter_
      : reinterpret_cast<::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent&>(::perfetto::protos::_Ext4IndMapBlocksEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent& FtraceEvent::ext4_ind_map_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  return _internal_ext4_ind_map_blocks_enter();
}
inline ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ind_map_blocks_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  if (event_case() == kExt4IndMapBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* temp = _impl_.event_.ext4_ind_map_blocks_enter_;
    _impl_.event_.ext4_ind_map_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ind_map_blocks_enter(::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* ext4_ind_map_blocks_enter) {
  clear_event();
  if (ext4_ind_map_blocks_enter) {
    set_has_ext4_ind_map_blocks_enter();
    _impl_.event_.ext4_ind_map_blocks_enter_ = ext4_ind_map_blocks_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
}
inline ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_ind_map_blocks_enter() {
  if (event_case() != kExt4IndMapBlocksEnter) {
    clear_event();
    set_has_ext4_ind_map_blocks_enter();
    _impl_.event_.ext4_ind_map_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ind_map_blocks_enter_;
}
inline ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* FtraceEvent::mutable_ext4_ind_map_blocks_enter() {
  ::perfetto::protos::Ext4IndMapBlocksEnterFtraceEvent* _msg = _internal_mutable_ext4_ind_map_blocks_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter)
  return _msg;
}

// .perfetto.protos.Ext4IndMapBlocksExitFtraceEvent ext4_ind_map_blocks_exit = 183;
inline bool FtraceEvent::has_ext4_ind_map_blocks_exit() const {
  return event_case() == kExt4IndMapBlocksExit;
}
inline bool FtraceEvent::_internal_has_ext4_ind_map_blocks_exit() const {
  return event_case() == kExt4IndMapBlocksExit;
}
inline void FtraceEvent::set_has_ext4_ind_map_blocks_exit() {
  _impl_._oneof_case_[0] = kExt4IndMapBlocksExit;
}
inline ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::release_ext4_ind_map_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  if (event_case() == kExt4IndMapBlocksExit) {
    clear_has_event();
    ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* temp = _impl_.event_.ext4_ind_map_blocks_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_ind_map_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& FtraceEvent::_internal_ext4_ind_map_blocks_exit() const {
  return event_case() == kExt4IndMapBlocksExit
      ? *_impl_.event_.ext4_ind_map_blocks_exit_
      : reinterpret_cast<::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent&>(::perfetto::protos::_Ext4IndMapBlocksExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent& FtraceEvent::ext4_ind_map_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  return _internal_ext4_ind_map_blocks_exit();
}
inline ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_ind_map_blocks_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  if (event_case() == kExt4IndMapBlocksExit) {
    clear_has_event();
    ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* temp = _impl_.event_.ext4_ind_map_blocks_exit_;
    _impl_.event_.ext4_ind_map_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_ind_map_blocks_exit(::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* ext4_ind_map_blocks_exit) {
  clear_event();
  if (ext4_ind_map_blocks_exit) {
    set_has_ext4_ind_map_blocks_exit();
    _impl_.event_.ext4_ind_map_blocks_exit_ = ext4_ind_map_blocks_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
}
inline ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_ind_map_blocks_exit() {
  if (event_case() != kExt4IndMapBlocksExit) {
    clear_event();
    set_has_ext4_ind_map_blocks_exit();
    _impl_.event_.ext4_ind_map_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_ind_map_blocks_exit_;
}
inline ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* FtraceEvent::mutable_ext4_ind_map_blocks_exit() {
  ::perfetto::protos::Ext4IndMapBlocksExitFtraceEvent* _msg = _internal_mutable_ext4_ind_map_blocks_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit)
  return _msg;
}

// .perfetto.protos.Ext4InsertRangeFtraceEvent ext4_insert_range = 184;
inline bool FtraceEvent::has_ext4_insert_range() const {
  return event_case() == kExt4InsertRange;
}
inline bool FtraceEvent::_internal_has_ext4_insert_range() const {
  return event_case() == kExt4InsertRange;
}
inline void FtraceEvent::set_has_ext4_insert_range() {
  _impl_._oneof_case_[0] = kExt4InsertRange;
}
inline ::perfetto::protos::Ext4InsertRangeFtraceEvent* FtraceEvent::release_ext4_insert_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_insert_range)
  if (event_case() == kExt4InsertRange) {
    clear_has_event();
    ::perfetto::protos::Ext4InsertRangeFtraceEvent* temp = _impl_.event_.ext4_insert_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_insert_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4InsertRangeFtraceEvent& FtraceEvent::_internal_ext4_insert_range() const {
  return event_case() == kExt4InsertRange
      ? *_impl_.event_.ext4_insert_range_
      : reinterpret_cast<::perfetto::protos::Ext4InsertRangeFtraceEvent&>(::perfetto::protos::_Ext4InsertRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4InsertRangeFtraceEvent& FtraceEvent::ext4_insert_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_insert_range)
  return _internal_ext4_insert_range();
}
inline ::perfetto::protos::Ext4InsertRangeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_insert_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_insert_range)
  if (event_case() == kExt4InsertRange) {
    clear_has_event();
    ::perfetto::protos::Ext4InsertRangeFtraceEvent* temp = _impl_.event_.ext4_insert_range_;
    _impl_.event_.ext4_insert_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_insert_range(::perfetto::protos::Ext4InsertRangeFtraceEvent* ext4_insert_range) {
  clear_event();
  if (ext4_insert_range) {
    set_has_ext4_insert_range();
    _impl_.event_.ext4_insert_range_ = ext4_insert_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_insert_range)
}
inline ::perfetto::protos::Ext4InsertRangeFtraceEvent* FtraceEvent::_internal_mutable_ext4_insert_range() {
  if (event_case() != kExt4InsertRange) {
    clear_event();
    set_has_ext4_insert_range();
    _impl_.event_.ext4_insert_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4InsertRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_insert_range_;
}
inline ::perfetto::protos::Ext4InsertRangeFtraceEvent* FtraceEvent::mutable_ext4_insert_range() {
  ::perfetto::protos::Ext4InsertRangeFtraceEvent* _msg = _internal_mutable_ext4_insert_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_insert_range)
  return _msg;
}

// .perfetto.protos.Ext4InvalidatepageFtraceEvent ext4_invalidatepage = 185;
inline bool FtraceEvent::has_ext4_invalidatepage() const {
  return event_case() == kExt4Invalidatepage;
}
inline bool FtraceEvent::_internal_has_ext4_invalidatepage() const {
  return event_case() == kExt4Invalidatepage;
}
inline void FtraceEvent::set_has_ext4_invalidatepage() {
  _impl_._oneof_case_[0] = kExt4Invalidatepage;
}
inline ::perfetto::protos::Ext4InvalidatepageFtraceEvent* FtraceEvent::release_ext4_invalidatepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  if (event_case() == kExt4Invalidatepage) {
    clear_has_event();
    ::perfetto::protos::Ext4InvalidatepageFtraceEvent* temp = _impl_.event_.ext4_invalidatepage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_invalidatepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& FtraceEvent::_internal_ext4_invalidatepage() const {
  return event_case() == kExt4Invalidatepage
      ? *_impl_.event_.ext4_invalidatepage_
      : reinterpret_cast<::perfetto::protos::Ext4InvalidatepageFtraceEvent&>(::perfetto::protos::_Ext4InvalidatepageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4InvalidatepageFtraceEvent& FtraceEvent::ext4_invalidatepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  return _internal_ext4_invalidatepage();
}
inline ::perfetto::protos::Ext4InvalidatepageFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_invalidatepage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  if (event_case() == kExt4Invalidatepage) {
    clear_has_event();
    ::perfetto::protos::Ext4InvalidatepageFtraceEvent* temp = _impl_.event_.ext4_invalidatepage_;
    _impl_.event_.ext4_invalidatepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_invalidatepage(::perfetto::protos::Ext4InvalidatepageFtraceEvent* ext4_invalidatepage) {
  clear_event();
  if (ext4_invalidatepage) {
    set_has_ext4_invalidatepage();
    _impl_.event_.ext4_invalidatepage_ = ext4_invalidatepage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_invalidatepage)
}
inline ::perfetto::protos::Ext4InvalidatepageFtraceEvent* FtraceEvent::_internal_mutable_ext4_invalidatepage() {
  if (event_case() != kExt4Invalidatepage) {
    clear_event();
    set_has_ext4_invalidatepage();
    _impl_.event_.ext4_invalidatepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4InvalidatepageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_invalidatepage_;
}
inline ::perfetto::protos::Ext4InvalidatepageFtraceEvent* FtraceEvent::mutable_ext4_invalidatepage() {
  ::perfetto::protos::Ext4InvalidatepageFtraceEvent* _msg = _internal_mutable_ext4_invalidatepage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_invalidatepage)
  return _msg;
}

// .perfetto.protos.Ext4JournalStartFtraceEvent ext4_journal_start = 186;
inline bool FtraceEvent::has_ext4_journal_start() const {
  return event_case() == kExt4JournalStart;
}
inline bool FtraceEvent::_internal_has_ext4_journal_start() const {
  return event_case() == kExt4JournalStart;
}
inline void FtraceEvent::set_has_ext4_journal_start() {
  _impl_._oneof_case_[0] = kExt4JournalStart;
}
inline ::perfetto::protos::Ext4JournalStartFtraceEvent* FtraceEvent::release_ext4_journal_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journal_start)
  if (event_case() == kExt4JournalStart) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalStartFtraceEvent* temp = _impl_.event_.ext4_journal_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_journal_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalStartFtraceEvent& FtraceEvent::_internal_ext4_journal_start() const {
  return event_case() == kExt4JournalStart
      ? *_impl_.event_.ext4_journal_start_
      : reinterpret_cast<::perfetto::protos::Ext4JournalStartFtraceEvent&>(::perfetto::protos::_Ext4JournalStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4JournalStartFtraceEvent& FtraceEvent::ext4_journal_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journal_start)
  return _internal_ext4_journal_start();
}
inline ::perfetto::protos::Ext4JournalStartFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_journal_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_journal_start)
  if (event_case() == kExt4JournalStart) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalStartFtraceEvent* temp = _impl_.event_.ext4_journal_start_;
    _impl_.event_.ext4_journal_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_journal_start(::perfetto::protos::Ext4JournalStartFtraceEvent* ext4_journal_start) {
  clear_event();
  if (ext4_journal_start) {
    set_has_ext4_journal_start();
    _impl_.event_.ext4_journal_start_ = ext4_journal_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_journal_start)
}
inline ::perfetto::protos::Ext4JournalStartFtraceEvent* FtraceEvent::_internal_mutable_ext4_journal_start() {
  if (event_case() != kExt4JournalStart) {
    clear_event();
    set_has_ext4_journal_start();
    _impl_.event_.ext4_journal_start_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_journal_start_;
}
inline ::perfetto::protos::Ext4JournalStartFtraceEvent* FtraceEvent::mutable_ext4_journal_start() {
  ::perfetto::protos::Ext4JournalStartFtraceEvent* _msg = _internal_mutable_ext4_journal_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journal_start)
  return _msg;
}

// .perfetto.protos.Ext4JournalStartReservedFtraceEvent ext4_journal_start_reserved = 187;
inline bool FtraceEvent::has_ext4_journal_start_reserved() const {
  return event_case() == kExt4JournalStartReserved;
}
inline bool FtraceEvent::_internal_has_ext4_journal_start_reserved() const {
  return event_case() == kExt4JournalStartReserved;
}
inline void FtraceEvent::set_has_ext4_journal_start_reserved() {
  _impl_._oneof_case_[0] = kExt4JournalStartReserved;
}
inline ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* FtraceEvent::release_ext4_journal_start_reserved() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  if (event_case() == kExt4JournalStartReserved) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* temp = _impl_.event_.ext4_journal_start_reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_journal_start_reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& FtraceEvent::_internal_ext4_journal_start_reserved() const {
  return event_case() == kExt4JournalStartReserved
      ? *_impl_.event_.ext4_journal_start_reserved_
      : reinterpret_cast<::perfetto::protos::Ext4JournalStartReservedFtraceEvent&>(::perfetto::protos::_Ext4JournalStartReservedFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4JournalStartReservedFtraceEvent& FtraceEvent::ext4_journal_start_reserved() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  return _internal_ext4_journal_start_reserved();
}
inline ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_journal_start_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  if (event_case() == kExt4JournalStartReserved) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* temp = _impl_.event_.ext4_journal_start_reserved_;
    _impl_.event_.ext4_journal_start_reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_journal_start_reserved(::perfetto::protos::Ext4JournalStartReservedFtraceEvent* ext4_journal_start_reserved) {
  clear_event();
  if (ext4_journal_start_reserved) {
    set_has_ext4_journal_start_reserved();
    _impl_.event_.ext4_journal_start_reserved_ = ext4_journal_start_reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
}
inline ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* FtraceEvent::_internal_mutable_ext4_journal_start_reserved() {
  if (event_case() != kExt4JournalStartReserved) {
    clear_event();
    set_has_ext4_journal_start_reserved();
    _impl_.event_.ext4_journal_start_reserved_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalStartReservedFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_journal_start_reserved_;
}
inline ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* FtraceEvent::mutable_ext4_journal_start_reserved() {
  ::perfetto::protos::Ext4JournalStartReservedFtraceEvent* _msg = _internal_mutable_ext4_journal_start_reserved();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journal_start_reserved)
  return _msg;
}

// .perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent ext4_journalled_invalidatepage = 188;
inline bool FtraceEvent::has_ext4_journalled_invalidatepage() const {
  return event_case() == kExt4JournalledInvalidatepage;
}
inline bool FtraceEvent::_internal_has_ext4_journalled_invalidatepage() const {
  return event_case() == kExt4JournalledInvalidatepage;
}
inline void FtraceEvent::set_has_ext4_journalled_invalidatepage() {
  _impl_._oneof_case_[0] = kExt4JournalledInvalidatepage;
}
inline ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::release_ext4_journalled_invalidatepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  if (event_case() == kExt4JournalledInvalidatepage) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* temp = _impl_.event_.ext4_journalled_invalidatepage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_journalled_invalidatepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& FtraceEvent::_internal_ext4_journalled_invalidatepage() const {
  return event_case() == kExt4JournalledInvalidatepage
      ? *_impl_.event_.ext4_journalled_invalidatepage_
      : reinterpret_cast<::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent&>(::perfetto::protos::_Ext4JournalledInvalidatepageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent& FtraceEvent::ext4_journalled_invalidatepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  return _internal_ext4_journalled_invalidatepage();
}
inline ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_journalled_invalidatepage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  if (event_case() == kExt4JournalledInvalidatepage) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* temp = _impl_.event_.ext4_journalled_invalidatepage_;
    _impl_.event_.ext4_journalled_invalidatepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_journalled_invalidatepage(::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* ext4_journalled_invalidatepage) {
  clear_event();
  if (ext4_journalled_invalidatepage) {
    set_has_ext4_journalled_invalidatepage();
    _impl_.event_.ext4_journalled_invalidatepage_ = ext4_journalled_invalidatepage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
}
inline ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::_internal_mutable_ext4_journalled_invalidatepage() {
  if (event_case() != kExt4JournalledInvalidatepage) {
    clear_event();
    set_has_ext4_journalled_invalidatepage();
    _impl_.event_.ext4_journalled_invalidatepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_journalled_invalidatepage_;
}
inline ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* FtraceEvent::mutable_ext4_journalled_invalidatepage() {
  ::perfetto::protos::Ext4JournalledInvalidatepageFtraceEvent* _msg = _internal_mutable_ext4_journalled_invalidatepage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage)
  return _msg;
}

// .perfetto.protos.Ext4JournalledWriteEndFtraceEvent ext4_journalled_write_end = 189;
inline bool FtraceEvent::has_ext4_journalled_write_end() const {
  return event_case() == kExt4JournalledWriteEnd;
}
inline bool FtraceEvent::_internal_has_ext4_journalled_write_end() const {
  return event_case() == kExt4JournalledWriteEnd;
}
inline void FtraceEvent::set_has_ext4_journalled_write_end() {
  _impl_._oneof_case_[0] = kExt4JournalledWriteEnd;
}
inline ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* FtraceEvent::release_ext4_journalled_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  if (event_case() == kExt4JournalledWriteEnd) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* temp = _impl_.event_.ext4_journalled_write_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_journalled_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& FtraceEvent::_internal_ext4_journalled_write_end() const {
  return event_case() == kExt4JournalledWriteEnd
      ? *_impl_.event_.ext4_journalled_write_end_
      : reinterpret_cast<::perfetto::protos::Ext4JournalledWriteEndFtraceEvent&>(::perfetto::protos::_Ext4JournalledWriteEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent& FtraceEvent::ext4_journalled_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  return _internal_ext4_journalled_write_end();
}
inline ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_journalled_write_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  if (event_case() == kExt4JournalledWriteEnd) {
    clear_has_event();
    ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* temp = _impl_.event_.ext4_journalled_write_end_;
    _impl_.event_.ext4_journalled_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_journalled_write_end(::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* ext4_journalled_write_end) {
  clear_event();
  if (ext4_journalled_write_end) {
    set_has_ext4_journalled_write_end();
    _impl_.event_.ext4_journalled_write_end_ = ext4_journalled_write_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
}
inline ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* FtraceEvent::_internal_mutable_ext4_journalled_write_end() {
  if (event_case() != kExt4JournalledWriteEnd) {
    clear_event();
    set_has_ext4_journalled_write_end();
    _impl_.event_.ext4_journalled_write_end_ = CreateMaybeMessage< ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_journalled_write_end_;
}
inline ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* FtraceEvent::mutable_ext4_journalled_write_end() {
  ::perfetto::protos::Ext4JournalledWriteEndFtraceEvent* _msg = _internal_mutable_ext4_journalled_write_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_journalled_write_end)
  return _msg;
}

// .perfetto.protos.Ext4LoadInodeFtraceEvent ext4_load_inode = 190;
inline bool FtraceEvent::has_ext4_load_inode() const {
  return event_case() == kExt4LoadInode;
}
inline bool FtraceEvent::_internal_has_ext4_load_inode() const {
  return event_case() == kExt4LoadInode;
}
inline void FtraceEvent::set_has_ext4_load_inode() {
  _impl_._oneof_case_[0] = kExt4LoadInode;
}
inline ::perfetto::protos::Ext4LoadInodeFtraceEvent* FtraceEvent::release_ext4_load_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_load_inode)
  if (event_case() == kExt4LoadInode) {
    clear_has_event();
    ::perfetto::protos::Ext4LoadInodeFtraceEvent* temp = _impl_.event_.ext4_load_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_load_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4LoadInodeFtraceEvent& FtraceEvent::_internal_ext4_load_inode() const {
  return event_case() == kExt4LoadInode
      ? *_impl_.event_.ext4_load_inode_
      : reinterpret_cast<::perfetto::protos::Ext4LoadInodeFtraceEvent&>(::perfetto::protos::_Ext4LoadInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4LoadInodeFtraceEvent& FtraceEvent::ext4_load_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_load_inode)
  return _internal_ext4_load_inode();
}
inline ::perfetto::protos::Ext4LoadInodeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_load_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_load_inode)
  if (event_case() == kExt4LoadInode) {
    clear_has_event();
    ::perfetto::protos::Ext4LoadInodeFtraceEvent* temp = _impl_.event_.ext4_load_inode_;
    _impl_.event_.ext4_load_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_load_inode(::perfetto::protos::Ext4LoadInodeFtraceEvent* ext4_load_inode) {
  clear_event();
  if (ext4_load_inode) {
    set_has_ext4_load_inode();
    _impl_.event_.ext4_load_inode_ = ext4_load_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_load_inode)
}
inline ::perfetto::protos::Ext4LoadInodeFtraceEvent* FtraceEvent::_internal_mutable_ext4_load_inode() {
  if (event_case() != kExt4LoadInode) {
    clear_event();
    set_has_ext4_load_inode();
    _impl_.event_.ext4_load_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4LoadInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_load_inode_;
}
inline ::perfetto::protos::Ext4LoadInodeFtraceEvent* FtraceEvent::mutable_ext4_load_inode() {
  ::perfetto::protos::Ext4LoadInodeFtraceEvent* _msg = _internal_mutable_ext4_load_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_load_inode)
  return _msg;
}

// .perfetto.protos.Ext4LoadInodeBitmapFtraceEvent ext4_load_inode_bitmap = 191;
inline bool FtraceEvent::has_ext4_load_inode_bitmap() const {
  return event_case() == kExt4LoadInodeBitmap;
}
inline bool FtraceEvent::_internal_has_ext4_load_inode_bitmap() const {
  return event_case() == kExt4LoadInodeBitmap;
}
inline void FtraceEvent::set_has_ext4_load_inode_bitmap() {
  _impl_._oneof_case_[0] = kExt4LoadInodeBitmap;
}
inline ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::release_ext4_load_inode_bitmap() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  if (event_case() == kExt4LoadInodeBitmap) {
    clear_has_event();
    ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* temp = _impl_.event_.ext4_load_inode_bitmap_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_load_inode_bitmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& FtraceEvent::_internal_ext4_load_inode_bitmap() const {
  return event_case() == kExt4LoadInodeBitmap
      ? *_impl_.event_.ext4_load_inode_bitmap_
      : reinterpret_cast<::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent&>(::perfetto::protos::_Ext4LoadInodeBitmapFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent& FtraceEvent::ext4_load_inode_bitmap() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  return _internal_ext4_load_inode_bitmap();
}
inline ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_load_inode_bitmap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  if (event_case() == kExt4LoadInodeBitmap) {
    clear_has_event();
    ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* temp = _impl_.event_.ext4_load_inode_bitmap_;
    _impl_.event_.ext4_load_inode_bitmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_load_inode_bitmap(::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* ext4_load_inode_bitmap) {
  clear_event();
  if (ext4_load_inode_bitmap) {
    set_has_ext4_load_inode_bitmap();
    _impl_.event_.ext4_load_inode_bitmap_ = ext4_load_inode_bitmap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
}
inline ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::_internal_mutable_ext4_load_inode_bitmap() {
  if (event_case() != kExt4LoadInodeBitmap) {
    clear_event();
    set_has_ext4_load_inode_bitmap();
    _impl_.event_.ext4_load_inode_bitmap_ = CreateMaybeMessage< ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_load_inode_bitmap_;
}
inline ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* FtraceEvent::mutable_ext4_load_inode_bitmap() {
  ::perfetto::protos::Ext4LoadInodeBitmapFtraceEvent* _msg = _internal_mutable_ext4_load_inode_bitmap();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_load_inode_bitmap)
  return _msg;
}

// .perfetto.protos.Ext4MarkInodeDirtyFtraceEvent ext4_mark_inode_dirty = 192;
inline bool FtraceEvent::has_ext4_mark_inode_dirty() const {
  return event_case() == kExt4MarkInodeDirty;
}
inline bool FtraceEvent::_internal_has_ext4_mark_inode_dirty() const {
  return event_case() == kExt4MarkInodeDirty;
}
inline void FtraceEvent::set_has_ext4_mark_inode_dirty() {
  _impl_._oneof_case_[0] = kExt4MarkInodeDirty;
}
inline ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::release_ext4_mark_inode_dirty() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  if (event_case() == kExt4MarkInodeDirty) {
    clear_has_event();
    ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* temp = _impl_.event_.ext4_mark_inode_dirty_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mark_inode_dirty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& FtraceEvent::_internal_ext4_mark_inode_dirty() const {
  return event_case() == kExt4MarkInodeDirty
      ? *_impl_.event_.ext4_mark_inode_dirty_
      : reinterpret_cast<::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent&>(::perfetto::protos::_Ext4MarkInodeDirtyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent& FtraceEvent::ext4_mark_inode_dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  return _internal_ext4_mark_inode_dirty();
}
inline ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mark_inode_dirty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  if (event_case() == kExt4MarkInodeDirty) {
    clear_has_event();
    ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* temp = _impl_.event_.ext4_mark_inode_dirty_;
    _impl_.event_.ext4_mark_inode_dirty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mark_inode_dirty(::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* ext4_mark_inode_dirty) {
  clear_event();
  if (ext4_mark_inode_dirty) {
    set_has_ext4_mark_inode_dirty();
    _impl_.event_.ext4_mark_inode_dirty_ = ext4_mark_inode_dirty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
}
inline ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::_internal_mutable_ext4_mark_inode_dirty() {
  if (event_case() != kExt4MarkInodeDirty) {
    clear_event();
    set_has_ext4_mark_inode_dirty();
    _impl_.event_.ext4_mark_inode_dirty_ = CreateMaybeMessage< ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mark_inode_dirty_;
}
inline ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* FtraceEvent::mutable_ext4_mark_inode_dirty() {
  ::perfetto::protos::Ext4MarkInodeDirtyFtraceEvent* _msg = _internal_mutable_ext4_mark_inode_dirty();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mark_inode_dirty)
  return _msg;
}

// .perfetto.protos.Ext4MbBitmapLoadFtraceEvent ext4_mb_bitmap_load = 193;
inline bool FtraceEvent::has_ext4_mb_bitmap_load() const {
  return event_case() == kExt4MbBitmapLoad;
}
inline bool FtraceEvent::_internal_has_ext4_mb_bitmap_load() const {
  return event_case() == kExt4MbBitmapLoad;
}
inline void FtraceEvent::set_has_ext4_mb_bitmap_load() {
  _impl_._oneof_case_[0] = kExt4MbBitmapLoad;
}
inline ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* FtraceEvent::release_ext4_mb_bitmap_load() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  if (event_case() == kExt4MbBitmapLoad) {
    clear_has_event();
    ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* temp = _impl_.event_.ext4_mb_bitmap_load_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& FtraceEvent::_internal_ext4_mb_bitmap_load() const {
  return event_case() == kExt4MbBitmapLoad
      ? *_impl_.event_.ext4_mb_bitmap_load_
      : reinterpret_cast<::perfetto::protos::Ext4MbBitmapLoadFtraceEvent&>(::perfetto::protos::_Ext4MbBitmapLoadFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent& FtraceEvent::ext4_mb_bitmap_load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  return _internal_ext4_mb_bitmap_load();
}
inline ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_bitmap_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  if (event_case() == kExt4MbBitmapLoad) {
    clear_has_event();
    ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* temp = _impl_.event_.ext4_mb_bitmap_load_;
    _impl_.event_.ext4_mb_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_bitmap_load(::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* ext4_mb_bitmap_load) {
  clear_event();
  if (ext4_mb_bitmap_load) {
    set_has_ext4_mb_bitmap_load();
    _impl_.event_.ext4_mb_bitmap_load_ = ext4_mb_bitmap_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
}
inline ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_bitmap_load() {
  if (event_case() != kExt4MbBitmapLoad) {
    clear_event();
    set_has_ext4_mb_bitmap_load();
    _impl_.event_.ext4_mb_bitmap_load_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_bitmap_load_;
}
inline ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* FtraceEvent::mutable_ext4_mb_bitmap_load() {
  ::perfetto::protos::Ext4MbBitmapLoadFtraceEvent* _msg = _internal_mutable_ext4_mb_bitmap_load();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_bitmap_load)
  return _msg;
}

// .perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent ext4_mb_buddy_bitmap_load = 194;
inline bool FtraceEvent::has_ext4_mb_buddy_bitmap_load() const {
  return event_case() == kExt4MbBuddyBitmapLoad;
}
inline bool FtraceEvent::_internal_has_ext4_mb_buddy_bitmap_load() const {
  return event_case() == kExt4MbBuddyBitmapLoad;
}
inline void FtraceEvent::set_has_ext4_mb_buddy_bitmap_load() {
  _impl_._oneof_case_[0] = kExt4MbBuddyBitmapLoad;
}
inline ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::release_ext4_mb_buddy_bitmap_load() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  if (event_case() == kExt4MbBuddyBitmapLoad) {
    clear_has_event();
    ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* temp = _impl_.event_.ext4_mb_buddy_bitmap_load_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_buddy_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& FtraceEvent::_internal_ext4_mb_buddy_bitmap_load() const {
  return event_case() == kExt4MbBuddyBitmapLoad
      ? *_impl_.event_.ext4_mb_buddy_bitmap_load_
      : reinterpret_cast<::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent&>(::perfetto::protos::_Ext4MbBuddyBitmapLoadFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent& FtraceEvent::ext4_mb_buddy_bitmap_load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  return _internal_ext4_mb_buddy_bitmap_load();
}
inline ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_buddy_bitmap_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  if (event_case() == kExt4MbBuddyBitmapLoad) {
    clear_has_event();
    ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* temp = _impl_.event_.ext4_mb_buddy_bitmap_load_;
    _impl_.event_.ext4_mb_buddy_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_buddy_bitmap_load(::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* ext4_mb_buddy_bitmap_load) {
  clear_event();
  if (ext4_mb_buddy_bitmap_load) {
    set_has_ext4_mb_buddy_bitmap_load();
    _impl_.event_.ext4_mb_buddy_bitmap_load_ = ext4_mb_buddy_bitmap_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
}
inline ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_buddy_bitmap_load() {
  if (event_case() != kExt4MbBuddyBitmapLoad) {
    clear_event();
    set_has_ext4_mb_buddy_bitmap_load();
    _impl_.event_.ext4_mb_buddy_bitmap_load_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_buddy_bitmap_load_;
}
inline ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* FtraceEvent::mutable_ext4_mb_buddy_bitmap_load() {
  ::perfetto::protos::Ext4MbBuddyBitmapLoadFtraceEvent* _msg = _internal_mutable_ext4_mb_buddy_bitmap_load();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load)
  return _msg;
}

// .perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent ext4_mb_discard_preallocations = 195;
inline bool FtraceEvent::has_ext4_mb_discard_preallocations() const {
  return event_case() == kExt4MbDiscardPreallocations;
}
inline bool FtraceEvent::_internal_has_ext4_mb_discard_preallocations() const {
  return event_case() == kExt4MbDiscardPreallocations;
}
inline void FtraceEvent::set_has_ext4_mb_discard_preallocations() {
  _impl_._oneof_case_[0] = kExt4MbDiscardPreallocations;
}
inline ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::release_ext4_mb_discard_preallocations() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  if (event_case() == kExt4MbDiscardPreallocations) {
    clear_has_event();
    ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* temp = _impl_.event_.ext4_mb_discard_preallocations_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_discard_preallocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& FtraceEvent::_internal_ext4_mb_discard_preallocations() const {
  return event_case() == kExt4MbDiscardPreallocations
      ? *_impl_.event_.ext4_mb_discard_preallocations_
      : reinterpret_cast<::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent&>(::perfetto::protos::_Ext4MbDiscardPreallocationsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent& FtraceEvent::ext4_mb_discard_preallocations() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  return _internal_ext4_mb_discard_preallocations();
}
inline ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_discard_preallocations() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  if (event_case() == kExt4MbDiscardPreallocations) {
    clear_has_event();
    ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* temp = _impl_.event_.ext4_mb_discard_preallocations_;
    _impl_.event_.ext4_mb_discard_preallocations_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_discard_preallocations(::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* ext4_mb_discard_preallocations) {
  clear_event();
  if (ext4_mb_discard_preallocations) {
    set_has_ext4_mb_discard_preallocations();
    _impl_.event_.ext4_mb_discard_preallocations_ = ext4_mb_discard_preallocations;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
}
inline ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_discard_preallocations() {
  if (event_case() != kExt4MbDiscardPreallocations) {
    clear_event();
    set_has_ext4_mb_discard_preallocations();
    _impl_.event_.ext4_mb_discard_preallocations_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_discard_preallocations_;
}
inline ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* FtraceEvent::mutable_ext4_mb_discard_preallocations() {
  ::perfetto::protos::Ext4MbDiscardPreallocationsFtraceEvent* _msg = _internal_mutable_ext4_mb_discard_preallocations();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations)
  return _msg;
}

// .perfetto.protos.Ext4MbNewGroupPaFtraceEvent ext4_mb_new_group_pa = 196;
inline bool FtraceEvent::has_ext4_mb_new_group_pa() const {
  return event_case() == kExt4MbNewGroupPa;
}
inline bool FtraceEvent::_internal_has_ext4_mb_new_group_pa() const {
  return event_case() == kExt4MbNewGroupPa;
}
inline void FtraceEvent::set_has_ext4_mb_new_group_pa() {
  _impl_._oneof_case_[0] = kExt4MbNewGroupPa;
}
inline ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* FtraceEvent::release_ext4_mb_new_group_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  if (event_case() == kExt4MbNewGroupPa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* temp = _impl_.event_.ext4_mb_new_group_pa_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_new_group_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& FtraceEvent::_internal_ext4_mb_new_group_pa() const {
  return event_case() == kExt4MbNewGroupPa
      ? *_impl_.event_.ext4_mb_new_group_pa_
      : reinterpret_cast<::perfetto::protos::Ext4MbNewGroupPaFtraceEvent&>(::perfetto::protos::_Ext4MbNewGroupPaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent& FtraceEvent::ext4_mb_new_group_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  return _internal_ext4_mb_new_group_pa();
}
inline ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_new_group_pa() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  if (event_case() == kExt4MbNewGroupPa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* temp = _impl_.event_.ext4_mb_new_group_pa_;
    _impl_.event_.ext4_mb_new_group_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_new_group_pa(::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* ext4_mb_new_group_pa) {
  clear_event();
  if (ext4_mb_new_group_pa) {
    set_has_ext4_mb_new_group_pa();
    _impl_.event_.ext4_mb_new_group_pa_ = ext4_mb_new_group_pa;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
}
inline ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_new_group_pa() {
  if (event_case() != kExt4MbNewGroupPa) {
    clear_event();
    set_has_ext4_mb_new_group_pa();
    _impl_.event_.ext4_mb_new_group_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_new_group_pa_;
}
inline ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* FtraceEvent::mutable_ext4_mb_new_group_pa() {
  ::perfetto::protos::Ext4MbNewGroupPaFtraceEvent* _msg = _internal_mutable_ext4_mb_new_group_pa();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_new_group_pa)
  return _msg;
}

// .perfetto.protos.Ext4MbNewInodePaFtraceEvent ext4_mb_new_inode_pa = 197;
inline bool FtraceEvent::has_ext4_mb_new_inode_pa() const {
  return event_case() == kExt4MbNewInodePa;
}
inline bool FtraceEvent::_internal_has_ext4_mb_new_inode_pa() const {
  return event_case() == kExt4MbNewInodePa;
}
inline void FtraceEvent::set_has_ext4_mb_new_inode_pa() {
  _impl_._oneof_case_[0] = kExt4MbNewInodePa;
}
inline ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* FtraceEvent::release_ext4_mb_new_inode_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  if (event_case() == kExt4MbNewInodePa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* temp = _impl_.event_.ext4_mb_new_inode_pa_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_new_inode_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& FtraceEvent::_internal_ext4_mb_new_inode_pa() const {
  return event_case() == kExt4MbNewInodePa
      ? *_impl_.event_.ext4_mb_new_inode_pa_
      : reinterpret_cast<::perfetto::protos::Ext4MbNewInodePaFtraceEvent&>(::perfetto::protos::_Ext4MbNewInodePaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbNewInodePaFtraceEvent& FtraceEvent::ext4_mb_new_inode_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  return _internal_ext4_mb_new_inode_pa();
}
inline ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_new_inode_pa() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  if (event_case() == kExt4MbNewInodePa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* temp = _impl_.event_.ext4_mb_new_inode_pa_;
    _impl_.event_.ext4_mb_new_inode_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_new_inode_pa(::perfetto::protos::Ext4MbNewInodePaFtraceEvent* ext4_mb_new_inode_pa) {
  clear_event();
  if (ext4_mb_new_inode_pa) {
    set_has_ext4_mb_new_inode_pa();
    _impl_.event_.ext4_mb_new_inode_pa_ = ext4_mb_new_inode_pa;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
}
inline ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_new_inode_pa() {
  if (event_case() != kExt4MbNewInodePa) {
    clear_event();
    set_has_ext4_mb_new_inode_pa();
    _impl_.event_.ext4_mb_new_inode_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbNewInodePaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_new_inode_pa_;
}
inline ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* FtraceEvent::mutable_ext4_mb_new_inode_pa() {
  ::perfetto::protos::Ext4MbNewInodePaFtraceEvent* _msg = _internal_mutable_ext4_mb_new_inode_pa();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa)
  return _msg;
}

// .perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent ext4_mb_release_group_pa = 198;
inline bool FtraceEvent::has_ext4_mb_release_group_pa() const {
  return event_case() == kExt4MbReleaseGroupPa;
}
inline bool FtraceEvent::_internal_has_ext4_mb_release_group_pa() const {
  return event_case() == kExt4MbReleaseGroupPa;
}
inline void FtraceEvent::set_has_ext4_mb_release_group_pa() {
  _impl_._oneof_case_[0] = kExt4MbReleaseGroupPa;
}
inline ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::release_ext4_mb_release_group_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  if (event_case() == kExt4MbReleaseGroupPa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* temp = _impl_.event_.ext4_mb_release_group_pa_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_release_group_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& FtraceEvent::_internal_ext4_mb_release_group_pa() const {
  return event_case() == kExt4MbReleaseGroupPa
      ? *_impl_.event_.ext4_mb_release_group_pa_
      : reinterpret_cast<::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent&>(::perfetto::protos::_Ext4MbReleaseGroupPaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent& FtraceEvent::ext4_mb_release_group_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  return _internal_ext4_mb_release_group_pa();
}
inline ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_release_group_pa() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  if (event_case() == kExt4MbReleaseGroupPa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* temp = _impl_.event_.ext4_mb_release_group_pa_;
    _impl_.event_.ext4_mb_release_group_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_release_group_pa(::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* ext4_mb_release_group_pa) {
  clear_event();
  if (ext4_mb_release_group_pa) {
    set_has_ext4_mb_release_group_pa();
    _impl_.event_.ext4_mb_release_group_pa_ = ext4_mb_release_group_pa;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
}
inline ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_release_group_pa() {
  if (event_case() != kExt4MbReleaseGroupPa) {
    clear_event();
    set_has_ext4_mb_release_group_pa();
    _impl_.event_.ext4_mb_release_group_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_release_group_pa_;
}
inline ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* FtraceEvent::mutable_ext4_mb_release_group_pa() {
  ::perfetto::protos::Ext4MbReleaseGroupPaFtraceEvent* _msg = _internal_mutable_ext4_mb_release_group_pa();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_release_group_pa)
  return _msg;
}

// .perfetto.protos.Ext4MbReleaseInodePaFtraceEvent ext4_mb_release_inode_pa = 199;
inline bool FtraceEvent::has_ext4_mb_release_inode_pa() const {
  return event_case() == kExt4MbReleaseInodePa;
}
inline bool FtraceEvent::_internal_has_ext4_mb_release_inode_pa() const {
  return event_case() == kExt4MbReleaseInodePa;
}
inline void FtraceEvent::set_has_ext4_mb_release_inode_pa() {
  _impl_._oneof_case_[0] = kExt4MbReleaseInodePa;
}
inline ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::release_ext4_mb_release_inode_pa() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  if (event_case() == kExt4MbReleaseInodePa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* temp = _impl_.event_.ext4_mb_release_inode_pa_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mb_release_inode_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& FtraceEvent::_internal_ext4_mb_release_inode_pa() const {
  return event_case() == kExt4MbReleaseInodePa
      ? *_impl_.event_.ext4_mb_release_inode_pa_
      : reinterpret_cast<::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent&>(::perfetto::protos::_Ext4MbReleaseInodePaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent& FtraceEvent::ext4_mb_release_inode_pa() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  return _internal_ext4_mb_release_inode_pa();
}
inline ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mb_release_inode_pa() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  if (event_case() == kExt4MbReleaseInodePa) {
    clear_has_event();
    ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* temp = _impl_.event_.ext4_mb_release_inode_pa_;
    _impl_.event_.ext4_mb_release_inode_pa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mb_release_inode_pa(::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* ext4_mb_release_inode_pa) {
  clear_event();
  if (ext4_mb_release_inode_pa) {
    set_has_ext4_mb_release_inode_pa();
    _impl_.event_.ext4_mb_release_inode_pa_ = ext4_mb_release_inode_pa;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
}
inline ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::_internal_mutable_ext4_mb_release_inode_pa() {
  if (event_case() != kExt4MbReleaseInodePa) {
    clear_event();
    set_has_ext4_mb_release_inode_pa();
    _impl_.event_.ext4_mb_release_inode_pa_ = CreateMaybeMessage< ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mb_release_inode_pa_;
}
inline ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* FtraceEvent::mutable_ext4_mb_release_inode_pa() {
  ::perfetto::protos::Ext4MbReleaseInodePaFtraceEvent* _msg = _internal_mutable_ext4_mb_release_inode_pa();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa)
  return _msg;
}

// .perfetto.protos.Ext4MballocAllocFtraceEvent ext4_mballoc_alloc = 200;
inline bool FtraceEvent::has_ext4_mballoc_alloc() const {
  return event_case() == kExt4MballocAlloc;
}
inline bool FtraceEvent::_internal_has_ext4_mballoc_alloc() const {
  return event_case() == kExt4MballocAlloc;
}
inline void FtraceEvent::set_has_ext4_mballoc_alloc() {
  _impl_._oneof_case_[0] = kExt4MballocAlloc;
}
inline ::perfetto::protos::Ext4MballocAllocFtraceEvent* FtraceEvent::release_ext4_mballoc_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  if (event_case() == kExt4MballocAlloc) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocAllocFtraceEvent* temp = _impl_.event_.ext4_mballoc_alloc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mballoc_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocAllocFtraceEvent& FtraceEvent::_internal_ext4_mballoc_alloc() const {
  return event_case() == kExt4MballocAlloc
      ? *_impl_.event_.ext4_mballoc_alloc_
      : reinterpret_cast<::perfetto::protos::Ext4MballocAllocFtraceEvent&>(::perfetto::protos::_Ext4MballocAllocFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MballocAllocFtraceEvent& FtraceEvent::ext4_mballoc_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  return _internal_ext4_mballoc_alloc();
}
inline ::perfetto::protos::Ext4MballocAllocFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mballoc_alloc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  if (event_case() == kExt4MballocAlloc) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocAllocFtraceEvent* temp = _impl_.event_.ext4_mballoc_alloc_;
    _impl_.event_.ext4_mballoc_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mballoc_alloc(::perfetto::protos::Ext4MballocAllocFtraceEvent* ext4_mballoc_alloc) {
  clear_event();
  if (ext4_mballoc_alloc) {
    set_has_ext4_mballoc_alloc();
    _impl_.event_.ext4_mballoc_alloc_ = ext4_mballoc_alloc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
}
inline ::perfetto::protos::Ext4MballocAllocFtraceEvent* FtraceEvent::_internal_mutable_ext4_mballoc_alloc() {
  if (event_case() != kExt4MballocAlloc) {
    clear_event();
    set_has_ext4_mballoc_alloc();
    _impl_.event_.ext4_mballoc_alloc_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocAllocFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mballoc_alloc_;
}
inline ::perfetto::protos::Ext4MballocAllocFtraceEvent* FtraceEvent::mutable_ext4_mballoc_alloc() {
  ::perfetto::protos::Ext4MballocAllocFtraceEvent* _msg = _internal_mutable_ext4_mballoc_alloc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_alloc)
  return _msg;
}

// .perfetto.protos.Ext4MballocDiscardFtraceEvent ext4_mballoc_discard = 201;
inline bool FtraceEvent::has_ext4_mballoc_discard() const {
  return event_case() == kExt4MballocDiscard;
}
inline bool FtraceEvent::_internal_has_ext4_mballoc_discard() const {
  return event_case() == kExt4MballocDiscard;
}
inline void FtraceEvent::set_has_ext4_mballoc_discard() {
  _impl_._oneof_case_[0] = kExt4MballocDiscard;
}
inline ::perfetto::protos::Ext4MballocDiscardFtraceEvent* FtraceEvent::release_ext4_mballoc_discard() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  if (event_case() == kExt4MballocDiscard) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocDiscardFtraceEvent* temp = _impl_.event_.ext4_mballoc_discard_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mballoc_discard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& FtraceEvent::_internal_ext4_mballoc_discard() const {
  return event_case() == kExt4MballocDiscard
      ? *_impl_.event_.ext4_mballoc_discard_
      : reinterpret_cast<::perfetto::protos::Ext4MballocDiscardFtraceEvent&>(::perfetto::protos::_Ext4MballocDiscardFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MballocDiscardFtraceEvent& FtraceEvent::ext4_mballoc_discard() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  return _internal_ext4_mballoc_discard();
}
inline ::perfetto::protos::Ext4MballocDiscardFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mballoc_discard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  if (event_case() == kExt4MballocDiscard) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocDiscardFtraceEvent* temp = _impl_.event_.ext4_mballoc_discard_;
    _impl_.event_.ext4_mballoc_discard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mballoc_discard(::perfetto::protos::Ext4MballocDiscardFtraceEvent* ext4_mballoc_discard) {
  clear_event();
  if (ext4_mballoc_discard) {
    set_has_ext4_mballoc_discard();
    _impl_.event_.ext4_mballoc_discard_ = ext4_mballoc_discard;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
}
inline ::perfetto::protos::Ext4MballocDiscardFtraceEvent* FtraceEvent::_internal_mutable_ext4_mballoc_discard() {
  if (event_case() != kExt4MballocDiscard) {
    clear_event();
    set_has_ext4_mballoc_discard();
    _impl_.event_.ext4_mballoc_discard_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocDiscardFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mballoc_discard_;
}
inline ::perfetto::protos::Ext4MballocDiscardFtraceEvent* FtraceEvent::mutable_ext4_mballoc_discard() {
  ::perfetto::protos::Ext4MballocDiscardFtraceEvent* _msg = _internal_mutable_ext4_mballoc_discard();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_discard)
  return _msg;
}

// .perfetto.protos.Ext4MballocFreeFtraceEvent ext4_mballoc_free = 202;
inline bool FtraceEvent::has_ext4_mballoc_free() const {
  return event_case() == kExt4MballocFree;
}
inline bool FtraceEvent::_internal_has_ext4_mballoc_free() const {
  return event_case() == kExt4MballocFree;
}
inline void FtraceEvent::set_has_ext4_mballoc_free() {
  _impl_._oneof_case_[0] = kExt4MballocFree;
}
inline ::perfetto::protos::Ext4MballocFreeFtraceEvent* FtraceEvent::release_ext4_mballoc_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  if (event_case() == kExt4MballocFree) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocFreeFtraceEvent* temp = _impl_.event_.ext4_mballoc_free_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mballoc_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocFreeFtraceEvent& FtraceEvent::_internal_ext4_mballoc_free() const {
  return event_case() == kExt4MballocFree
      ? *_impl_.event_.ext4_mballoc_free_
      : reinterpret_cast<::perfetto::protos::Ext4MballocFreeFtraceEvent&>(::perfetto::protos::_Ext4MballocFreeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MballocFreeFtraceEvent& FtraceEvent::ext4_mballoc_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  return _internal_ext4_mballoc_free();
}
inline ::perfetto::protos::Ext4MballocFreeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mballoc_free() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  if (event_case() == kExt4MballocFree) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocFreeFtraceEvent* temp = _impl_.event_.ext4_mballoc_free_;
    _impl_.event_.ext4_mballoc_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mballoc_free(::perfetto::protos::Ext4MballocFreeFtraceEvent* ext4_mballoc_free) {
  clear_event();
  if (ext4_mballoc_free) {
    set_has_ext4_mballoc_free();
    _impl_.event_.ext4_mballoc_free_ = ext4_mballoc_free;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_free)
}
inline ::perfetto::protos::Ext4MballocFreeFtraceEvent* FtraceEvent::_internal_mutable_ext4_mballoc_free() {
  if (event_case() != kExt4MballocFree) {
    clear_event();
    set_has_ext4_mballoc_free();
    _impl_.event_.ext4_mballoc_free_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocFreeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mballoc_free_;
}
inline ::perfetto::protos::Ext4MballocFreeFtraceEvent* FtraceEvent::mutable_ext4_mballoc_free() {
  ::perfetto::protos::Ext4MballocFreeFtraceEvent* _msg = _internal_mutable_ext4_mballoc_free();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_free)
  return _msg;
}

// .perfetto.protos.Ext4MballocPreallocFtraceEvent ext4_mballoc_prealloc = 203;
inline bool FtraceEvent::has_ext4_mballoc_prealloc() const {
  return event_case() == kExt4MballocPrealloc;
}
inline bool FtraceEvent::_internal_has_ext4_mballoc_prealloc() const {
  return event_case() == kExt4MballocPrealloc;
}
inline void FtraceEvent::set_has_ext4_mballoc_prealloc() {
  _impl_._oneof_case_[0] = kExt4MballocPrealloc;
}
inline ::perfetto::protos::Ext4MballocPreallocFtraceEvent* FtraceEvent::release_ext4_mballoc_prealloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  if (event_case() == kExt4MballocPrealloc) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocPreallocFtraceEvent* temp = _impl_.event_.ext4_mballoc_prealloc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_mballoc_prealloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& FtraceEvent::_internal_ext4_mballoc_prealloc() const {
  return event_case() == kExt4MballocPrealloc
      ? *_impl_.event_.ext4_mballoc_prealloc_
      : reinterpret_cast<::perfetto::protos::Ext4MballocPreallocFtraceEvent&>(::perfetto::protos::_Ext4MballocPreallocFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4MballocPreallocFtraceEvent& FtraceEvent::ext4_mballoc_prealloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  return _internal_ext4_mballoc_prealloc();
}
inline ::perfetto::protos::Ext4MballocPreallocFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_mballoc_prealloc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  if (event_case() == kExt4MballocPrealloc) {
    clear_has_event();
    ::perfetto::protos::Ext4MballocPreallocFtraceEvent* temp = _impl_.event_.ext4_mballoc_prealloc_;
    _impl_.event_.ext4_mballoc_prealloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_mballoc_prealloc(::perfetto::protos::Ext4MballocPreallocFtraceEvent* ext4_mballoc_prealloc) {
  clear_event();
  if (ext4_mballoc_prealloc) {
    set_has_ext4_mballoc_prealloc();
    _impl_.event_.ext4_mballoc_prealloc_ = ext4_mballoc_prealloc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
}
inline ::perfetto::protos::Ext4MballocPreallocFtraceEvent* FtraceEvent::_internal_mutable_ext4_mballoc_prealloc() {
  if (event_case() != kExt4MballocPrealloc) {
    clear_event();
    set_has_ext4_mballoc_prealloc();
    _impl_.event_.ext4_mballoc_prealloc_ = CreateMaybeMessage< ::perfetto::protos::Ext4MballocPreallocFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_mballoc_prealloc_;
}
inline ::perfetto::protos::Ext4MballocPreallocFtraceEvent* FtraceEvent::mutable_ext4_mballoc_prealloc() {
  ::perfetto::protos::Ext4MballocPreallocFtraceEvent* _msg = _internal_mutable_ext4_mballoc_prealloc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_mballoc_prealloc)
  return _msg;
}

// .perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent ext4_other_inode_update_time = 204;
inline bool FtraceEvent::has_ext4_other_inode_update_time() const {
  return event_case() == kExt4OtherInodeUpdateTime;
}
inline bool FtraceEvent::_internal_has_ext4_other_inode_update_time() const {
  return event_case() == kExt4OtherInodeUpdateTime;
}
inline void FtraceEvent::set_has_ext4_other_inode_update_time() {
  _impl_._oneof_case_[0] = kExt4OtherInodeUpdateTime;
}
inline ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::release_ext4_other_inode_update_time() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  if (event_case() == kExt4OtherInodeUpdateTime) {
    clear_has_event();
    ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* temp = _impl_.event_.ext4_other_inode_update_time_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_other_inode_update_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& FtraceEvent::_internal_ext4_other_inode_update_time() const {
  return event_case() == kExt4OtherInodeUpdateTime
      ? *_impl_.event_.ext4_other_inode_update_time_
      : reinterpret_cast<::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent&>(::perfetto::protos::_Ext4OtherInodeUpdateTimeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent& FtraceEvent::ext4_other_inode_update_time() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  return _internal_ext4_other_inode_update_time();
}
inline ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_other_inode_update_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  if (event_case() == kExt4OtherInodeUpdateTime) {
    clear_has_event();
    ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* temp = _impl_.event_.ext4_other_inode_update_time_;
    _impl_.event_.ext4_other_inode_update_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_other_inode_update_time(::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* ext4_other_inode_update_time) {
  clear_event();
  if (ext4_other_inode_update_time) {
    set_has_ext4_other_inode_update_time();
    _impl_.event_.ext4_other_inode_update_time_ = ext4_other_inode_update_time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
}
inline ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::_internal_mutable_ext4_other_inode_update_time() {
  if (event_case() != kExt4OtherInodeUpdateTime) {
    clear_event();
    set_has_ext4_other_inode_update_time();
    _impl_.event_.ext4_other_inode_update_time_ = CreateMaybeMessage< ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_other_inode_update_time_;
}
inline ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* FtraceEvent::mutable_ext4_other_inode_update_time() {
  ::perfetto::protos::Ext4OtherInodeUpdateTimeFtraceEvent* _msg = _internal_mutable_ext4_other_inode_update_time();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_other_inode_update_time)
  return _msg;
}

// .perfetto.protos.Ext4PunchHoleFtraceEvent ext4_punch_hole = 205;
inline bool FtraceEvent::has_ext4_punch_hole() const {
  return event_case() == kExt4PunchHole;
}
inline bool FtraceEvent::_internal_has_ext4_punch_hole() const {
  return event_case() == kExt4PunchHole;
}
inline void FtraceEvent::set_has_ext4_punch_hole() {
  _impl_._oneof_case_[0] = kExt4PunchHole;
}
inline ::perfetto::protos::Ext4PunchHoleFtraceEvent* FtraceEvent::release_ext4_punch_hole() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_punch_hole)
  if (event_case() == kExt4PunchHole) {
    clear_has_event();
    ::perfetto::protos::Ext4PunchHoleFtraceEvent* temp = _impl_.event_.ext4_punch_hole_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_punch_hole_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4PunchHoleFtraceEvent& FtraceEvent::_internal_ext4_punch_hole() const {
  return event_case() == kExt4PunchHole
      ? *_impl_.event_.ext4_punch_hole_
      : reinterpret_cast<::perfetto::protos::Ext4PunchHoleFtraceEvent&>(::perfetto::protos::_Ext4PunchHoleFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4PunchHoleFtraceEvent& FtraceEvent::ext4_punch_hole() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_punch_hole)
  return _internal_ext4_punch_hole();
}
inline ::perfetto::protos::Ext4PunchHoleFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_punch_hole() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_punch_hole)
  if (event_case() == kExt4PunchHole) {
    clear_has_event();
    ::perfetto::protos::Ext4PunchHoleFtraceEvent* temp = _impl_.event_.ext4_punch_hole_;
    _impl_.event_.ext4_punch_hole_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_punch_hole(::perfetto::protos::Ext4PunchHoleFtraceEvent* ext4_punch_hole) {
  clear_event();
  if (ext4_punch_hole) {
    set_has_ext4_punch_hole();
    _impl_.event_.ext4_punch_hole_ = ext4_punch_hole;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_punch_hole)
}
inline ::perfetto::protos::Ext4PunchHoleFtraceEvent* FtraceEvent::_internal_mutable_ext4_punch_hole() {
  if (event_case() != kExt4PunchHole) {
    clear_event();
    set_has_ext4_punch_hole();
    _impl_.event_.ext4_punch_hole_ = CreateMaybeMessage< ::perfetto::protos::Ext4PunchHoleFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_punch_hole_;
}
inline ::perfetto::protos::Ext4PunchHoleFtraceEvent* FtraceEvent::mutable_ext4_punch_hole() {
  ::perfetto::protos::Ext4PunchHoleFtraceEvent* _msg = _internal_mutable_ext4_punch_hole();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_punch_hole)
  return _msg;
}

// .perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent ext4_read_block_bitmap_load = 206;
inline bool FtraceEvent::has_ext4_read_block_bitmap_load() const {
  return event_case() == kExt4ReadBlockBitmapLoad;
}
inline bool FtraceEvent::_internal_has_ext4_read_block_bitmap_load() const {
  return event_case() == kExt4ReadBlockBitmapLoad;
}
inline void FtraceEvent::set_has_ext4_read_block_bitmap_load() {
  _impl_._oneof_case_[0] = kExt4ReadBlockBitmapLoad;
}
inline ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::release_ext4_read_block_bitmap_load() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  if (event_case() == kExt4ReadBlockBitmapLoad) {
    clear_has_event();
    ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* temp = _impl_.event_.ext4_read_block_bitmap_load_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_read_block_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& FtraceEvent::_internal_ext4_read_block_bitmap_load() const {
  return event_case() == kExt4ReadBlockBitmapLoad
      ? *_impl_.event_.ext4_read_block_bitmap_load_
      : reinterpret_cast<::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent&>(::perfetto::protos::_Ext4ReadBlockBitmapLoadFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent& FtraceEvent::ext4_read_block_bitmap_load() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  return _internal_ext4_read_block_bitmap_load();
}
inline ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_read_block_bitmap_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  if (event_case() == kExt4ReadBlockBitmapLoad) {
    clear_has_event();
    ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* temp = _impl_.event_.ext4_read_block_bitmap_load_;
    _impl_.event_.ext4_read_block_bitmap_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_read_block_bitmap_load(::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* ext4_read_block_bitmap_load) {
  clear_event();
  if (ext4_read_block_bitmap_load) {
    set_has_ext4_read_block_bitmap_load();
    _impl_.event_.ext4_read_block_bitmap_load_ = ext4_read_block_bitmap_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
}
inline ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::_internal_mutable_ext4_read_block_bitmap_load() {
  if (event_case() != kExt4ReadBlockBitmapLoad) {
    clear_event();
    set_has_ext4_read_block_bitmap_load();
    _impl_.event_.ext4_read_block_bitmap_load_ = CreateMaybeMessage< ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_read_block_bitmap_load_;
}
inline ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* FtraceEvent::mutable_ext4_read_block_bitmap_load() {
  ::perfetto::protos::Ext4ReadBlockBitmapLoadFtraceEvent* _msg = _internal_mutable_ext4_read_block_bitmap_load();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load)
  return _msg;
}

// .perfetto.protos.Ext4ReadpageFtraceEvent ext4_readpage = 207;
inline bool FtraceEvent::has_ext4_readpage() const {
  return event_case() == kExt4Readpage;
}
inline bool FtraceEvent::_internal_has_ext4_readpage() const {
  return event_case() == kExt4Readpage;
}
inline void FtraceEvent::set_has_ext4_readpage() {
  _impl_._oneof_case_[0] = kExt4Readpage;
}
inline ::perfetto::protos::Ext4ReadpageFtraceEvent* FtraceEvent::release_ext4_readpage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_readpage)
  if (event_case() == kExt4Readpage) {
    clear_has_event();
    ::perfetto::protos::Ext4ReadpageFtraceEvent* temp = _impl_.event_.ext4_readpage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_readpage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ReadpageFtraceEvent& FtraceEvent::_internal_ext4_readpage() const {
  return event_case() == kExt4Readpage
      ? *_impl_.event_.ext4_readpage_
      : reinterpret_cast<::perfetto::protos::Ext4ReadpageFtraceEvent&>(::perfetto::protos::_Ext4ReadpageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ReadpageFtraceEvent& FtraceEvent::ext4_readpage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_readpage)
  return _internal_ext4_readpage();
}
inline ::perfetto::protos::Ext4ReadpageFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_readpage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_readpage)
  if (event_case() == kExt4Readpage) {
    clear_has_event();
    ::perfetto::protos::Ext4ReadpageFtraceEvent* temp = _impl_.event_.ext4_readpage_;
    _impl_.event_.ext4_readpage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_readpage(::perfetto::protos::Ext4ReadpageFtraceEvent* ext4_readpage) {
  clear_event();
  if (ext4_readpage) {
    set_has_ext4_readpage();
    _impl_.event_.ext4_readpage_ = ext4_readpage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_readpage)
}
inline ::perfetto::protos::Ext4ReadpageFtraceEvent* FtraceEvent::_internal_mutable_ext4_readpage() {
  if (event_case() != kExt4Readpage) {
    clear_event();
    set_has_ext4_readpage();
    _impl_.event_.ext4_readpage_ = CreateMaybeMessage< ::perfetto::protos::Ext4ReadpageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_readpage_;
}
inline ::perfetto::protos::Ext4ReadpageFtraceEvent* FtraceEvent::mutable_ext4_readpage() {
  ::perfetto::protos::Ext4ReadpageFtraceEvent* _msg = _internal_mutable_ext4_readpage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_readpage)
  return _msg;
}

// .perfetto.protos.Ext4ReleasepageFtraceEvent ext4_releasepage = 208;
inline bool FtraceEvent::has_ext4_releasepage() const {
  return event_case() == kExt4Releasepage;
}
inline bool FtraceEvent::_internal_has_ext4_releasepage() const {
  return event_case() == kExt4Releasepage;
}
inline void FtraceEvent::set_has_ext4_releasepage() {
  _impl_._oneof_case_[0] = kExt4Releasepage;
}
inline ::perfetto::protos::Ext4ReleasepageFtraceEvent* FtraceEvent::release_ext4_releasepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_releasepage)
  if (event_case() == kExt4Releasepage) {
    clear_has_event();
    ::perfetto::protos::Ext4ReleasepageFtraceEvent* temp = _impl_.event_.ext4_releasepage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_releasepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ReleasepageFtraceEvent& FtraceEvent::_internal_ext4_releasepage() const {
  return event_case() == kExt4Releasepage
      ? *_impl_.event_.ext4_releasepage_
      : reinterpret_cast<::perfetto::protos::Ext4ReleasepageFtraceEvent&>(::perfetto::protos::_Ext4ReleasepageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ReleasepageFtraceEvent& FtraceEvent::ext4_releasepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_releasepage)
  return _internal_ext4_releasepage();
}
inline ::perfetto::protos::Ext4ReleasepageFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_releasepage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_releasepage)
  if (event_case() == kExt4Releasepage) {
    clear_has_event();
    ::perfetto::protos::Ext4ReleasepageFtraceEvent* temp = _impl_.event_.ext4_releasepage_;
    _impl_.event_.ext4_releasepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_releasepage(::perfetto::protos::Ext4ReleasepageFtraceEvent* ext4_releasepage) {
  clear_event();
  if (ext4_releasepage) {
    set_has_ext4_releasepage();
    _impl_.event_.ext4_releasepage_ = ext4_releasepage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_releasepage)
}
inline ::perfetto::protos::Ext4ReleasepageFtraceEvent* FtraceEvent::_internal_mutable_ext4_releasepage() {
  if (event_case() != kExt4Releasepage) {
    clear_event();
    set_has_ext4_releasepage();
    _impl_.event_.ext4_releasepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4ReleasepageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_releasepage_;
}
inline ::perfetto::protos::Ext4ReleasepageFtraceEvent* FtraceEvent::mutable_ext4_releasepage() {
  ::perfetto::protos::Ext4ReleasepageFtraceEvent* _msg = _internal_mutable_ext4_releasepage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_releasepage)
  return _msg;
}

// .perfetto.protos.Ext4RemoveBlocksFtraceEvent ext4_remove_blocks = 209;
inline bool FtraceEvent::has_ext4_remove_blocks() const {
  return event_case() == kExt4RemoveBlocks;
}
inline bool FtraceEvent::_internal_has_ext4_remove_blocks() const {
  return event_case() == kExt4RemoveBlocks;
}
inline void FtraceEvent::set_has_ext4_remove_blocks() {
  _impl_._oneof_case_[0] = kExt4RemoveBlocks;
}
inline ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* FtraceEvent::release_ext4_remove_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  if (event_case() == kExt4RemoveBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* temp = _impl_.event_.ext4_remove_blocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_remove_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& FtraceEvent::_internal_ext4_remove_blocks() const {
  return event_case() == kExt4RemoveBlocks
      ? *_impl_.event_.ext4_remove_blocks_
      : reinterpret_cast<::perfetto::protos::Ext4RemoveBlocksFtraceEvent&>(::perfetto::protos::_Ext4RemoveBlocksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4RemoveBlocksFtraceEvent& FtraceEvent::ext4_remove_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  return _internal_ext4_remove_blocks();
}
inline ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_remove_blocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  if (event_case() == kExt4RemoveBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* temp = _impl_.event_.ext4_remove_blocks_;
    _impl_.event_.ext4_remove_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_remove_blocks(::perfetto::protos::Ext4RemoveBlocksFtraceEvent* ext4_remove_blocks) {
  clear_event();
  if (ext4_remove_blocks) {
    set_has_ext4_remove_blocks();
    _impl_.event_.ext4_remove_blocks_ = ext4_remove_blocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_remove_blocks)
}
inline ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* FtraceEvent::_internal_mutable_ext4_remove_blocks() {
  if (event_case() != kExt4RemoveBlocks) {
    clear_event();
    set_has_ext4_remove_blocks();
    _impl_.event_.ext4_remove_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4RemoveBlocksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_remove_blocks_;
}
inline ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* FtraceEvent::mutable_ext4_remove_blocks() {
  ::perfetto::protos::Ext4RemoveBlocksFtraceEvent* _msg = _internal_mutable_ext4_remove_blocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_remove_blocks)
  return _msg;
}

// .perfetto.protos.Ext4RequestBlocksFtraceEvent ext4_request_blocks = 210;
inline bool FtraceEvent::has_ext4_request_blocks() const {
  return event_case() == kExt4RequestBlocks;
}
inline bool FtraceEvent::_internal_has_ext4_request_blocks() const {
  return event_case() == kExt4RequestBlocks;
}
inline void FtraceEvent::set_has_ext4_request_blocks() {
  _impl_._oneof_case_[0] = kExt4RequestBlocks;
}
inline ::perfetto::protos::Ext4RequestBlocksFtraceEvent* FtraceEvent::release_ext4_request_blocks() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_request_blocks)
  if (event_case() == kExt4RequestBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4RequestBlocksFtraceEvent* temp = _impl_.event_.ext4_request_blocks_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_request_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& FtraceEvent::_internal_ext4_request_blocks() const {
  return event_case() == kExt4RequestBlocks
      ? *_impl_.event_.ext4_request_blocks_
      : reinterpret_cast<::perfetto::protos::Ext4RequestBlocksFtraceEvent&>(::perfetto::protos::_Ext4RequestBlocksFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4RequestBlocksFtraceEvent& FtraceEvent::ext4_request_blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_request_blocks)
  return _internal_ext4_request_blocks();
}
inline ::perfetto::protos::Ext4RequestBlocksFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_request_blocks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_request_blocks)
  if (event_case() == kExt4RequestBlocks) {
    clear_has_event();
    ::perfetto::protos::Ext4RequestBlocksFtraceEvent* temp = _impl_.event_.ext4_request_blocks_;
    _impl_.event_.ext4_request_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_request_blocks(::perfetto::protos::Ext4RequestBlocksFtraceEvent* ext4_request_blocks) {
  clear_event();
  if (ext4_request_blocks) {
    set_has_ext4_request_blocks();
    _impl_.event_.ext4_request_blocks_ = ext4_request_blocks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_request_blocks)
}
inline ::perfetto::protos::Ext4RequestBlocksFtraceEvent* FtraceEvent::_internal_mutable_ext4_request_blocks() {
  if (event_case() != kExt4RequestBlocks) {
    clear_event();
    set_has_ext4_request_blocks();
    _impl_.event_.ext4_request_blocks_ = CreateMaybeMessage< ::perfetto::protos::Ext4RequestBlocksFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_request_blocks_;
}
inline ::perfetto::protos::Ext4RequestBlocksFtraceEvent* FtraceEvent::mutable_ext4_request_blocks() {
  ::perfetto::protos::Ext4RequestBlocksFtraceEvent* _msg = _internal_mutable_ext4_request_blocks();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_request_blocks)
  return _msg;
}

// .perfetto.protos.Ext4RequestInodeFtraceEvent ext4_request_inode = 211;
inline bool FtraceEvent::has_ext4_request_inode() const {
  return event_case() == kExt4RequestInode;
}
inline bool FtraceEvent::_internal_has_ext4_request_inode() const {
  return event_case() == kExt4RequestInode;
}
inline void FtraceEvent::set_has_ext4_request_inode() {
  _impl_._oneof_case_[0] = kExt4RequestInode;
}
inline ::perfetto::protos::Ext4RequestInodeFtraceEvent* FtraceEvent::release_ext4_request_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_request_inode)
  if (event_case() == kExt4RequestInode) {
    clear_has_event();
    ::perfetto::protos::Ext4RequestInodeFtraceEvent* temp = _impl_.event_.ext4_request_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_request_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4RequestInodeFtraceEvent& FtraceEvent::_internal_ext4_request_inode() const {
  return event_case() == kExt4RequestInode
      ? *_impl_.event_.ext4_request_inode_
      : reinterpret_cast<::perfetto::protos::Ext4RequestInodeFtraceEvent&>(::perfetto::protos::_Ext4RequestInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4RequestInodeFtraceEvent& FtraceEvent::ext4_request_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_request_inode)
  return _internal_ext4_request_inode();
}
inline ::perfetto::protos::Ext4RequestInodeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_request_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_request_inode)
  if (event_case() == kExt4RequestInode) {
    clear_has_event();
    ::perfetto::protos::Ext4RequestInodeFtraceEvent* temp = _impl_.event_.ext4_request_inode_;
    _impl_.event_.ext4_request_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_request_inode(::perfetto::protos::Ext4RequestInodeFtraceEvent* ext4_request_inode) {
  clear_event();
  if (ext4_request_inode) {
    set_has_ext4_request_inode();
    _impl_.event_.ext4_request_inode_ = ext4_request_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_request_inode)
}
inline ::perfetto::protos::Ext4RequestInodeFtraceEvent* FtraceEvent::_internal_mutable_ext4_request_inode() {
  if (event_case() != kExt4RequestInode) {
    clear_event();
    set_has_ext4_request_inode();
    _impl_.event_.ext4_request_inode_ = CreateMaybeMessage< ::perfetto::protos::Ext4RequestInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_request_inode_;
}
inline ::perfetto::protos::Ext4RequestInodeFtraceEvent* FtraceEvent::mutable_ext4_request_inode() {
  ::perfetto::protos::Ext4RequestInodeFtraceEvent* _msg = _internal_mutable_ext4_request_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_request_inode)
  return _msg;
}

// .perfetto.protos.Ext4SyncFsFtraceEvent ext4_sync_fs = 212;
inline bool FtraceEvent::has_ext4_sync_fs() const {
  return event_case() == kExt4SyncFs;
}
inline bool FtraceEvent::_internal_has_ext4_sync_fs() const {
  return event_case() == kExt4SyncFs;
}
inline void FtraceEvent::set_has_ext4_sync_fs() {
  _impl_._oneof_case_[0] = kExt4SyncFs;
}
inline ::perfetto::protos::Ext4SyncFsFtraceEvent* FtraceEvent::release_ext4_sync_fs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_sync_fs)
  if (event_case() == kExt4SyncFs) {
    clear_has_event();
    ::perfetto::protos::Ext4SyncFsFtraceEvent* temp = _impl_.event_.ext4_sync_fs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_sync_fs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4SyncFsFtraceEvent& FtraceEvent::_internal_ext4_sync_fs() const {
  return event_case() == kExt4SyncFs
      ? *_impl_.event_.ext4_sync_fs_
      : reinterpret_cast<::perfetto::protos::Ext4SyncFsFtraceEvent&>(::perfetto::protos::_Ext4SyncFsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4SyncFsFtraceEvent& FtraceEvent::ext4_sync_fs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_sync_fs)
  return _internal_ext4_sync_fs();
}
inline ::perfetto::protos::Ext4SyncFsFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_sync_fs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_sync_fs)
  if (event_case() == kExt4SyncFs) {
    clear_has_event();
    ::perfetto::protos::Ext4SyncFsFtraceEvent* temp = _impl_.event_.ext4_sync_fs_;
    _impl_.event_.ext4_sync_fs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_sync_fs(::perfetto::protos::Ext4SyncFsFtraceEvent* ext4_sync_fs) {
  clear_event();
  if (ext4_sync_fs) {
    set_has_ext4_sync_fs();
    _impl_.event_.ext4_sync_fs_ = ext4_sync_fs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_sync_fs)
}
inline ::perfetto::protos::Ext4SyncFsFtraceEvent* FtraceEvent::_internal_mutable_ext4_sync_fs() {
  if (event_case() != kExt4SyncFs) {
    clear_event();
    set_has_ext4_sync_fs();
    _impl_.event_.ext4_sync_fs_ = CreateMaybeMessage< ::perfetto::protos::Ext4SyncFsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_sync_fs_;
}
inline ::perfetto::protos::Ext4SyncFsFtraceEvent* FtraceEvent::mutable_ext4_sync_fs() {
  ::perfetto::protos::Ext4SyncFsFtraceEvent* _msg = _internal_mutable_ext4_sync_fs();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_sync_fs)
  return _msg;
}

// .perfetto.protos.Ext4TrimAllFreeFtraceEvent ext4_trim_all_free = 213;
inline bool FtraceEvent::has_ext4_trim_all_free() const {
  return event_case() == kExt4TrimAllFree;
}
inline bool FtraceEvent::_internal_has_ext4_trim_all_free() const {
  return event_case() == kExt4TrimAllFree;
}
inline void FtraceEvent::set_has_ext4_trim_all_free() {
  _impl_._oneof_case_[0] = kExt4TrimAllFree;
}
inline ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* FtraceEvent::release_ext4_trim_all_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  if (event_case() == kExt4TrimAllFree) {
    clear_has_event();
    ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* temp = _impl_.event_.ext4_trim_all_free_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_trim_all_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& FtraceEvent::_internal_ext4_trim_all_free() const {
  return event_case() == kExt4TrimAllFree
      ? *_impl_.event_.ext4_trim_all_free_
      : reinterpret_cast<::perfetto::protos::Ext4TrimAllFreeFtraceEvent&>(::perfetto::protos::_Ext4TrimAllFreeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4TrimAllFreeFtraceEvent& FtraceEvent::ext4_trim_all_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  return _internal_ext4_trim_all_free();
}
inline ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_trim_all_free() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  if (event_case() == kExt4TrimAllFree) {
    clear_has_event();
    ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* temp = _impl_.event_.ext4_trim_all_free_;
    _impl_.event_.ext4_trim_all_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_trim_all_free(::perfetto::protos::Ext4TrimAllFreeFtraceEvent* ext4_trim_all_free) {
  clear_event();
  if (ext4_trim_all_free) {
    set_has_ext4_trim_all_free();
    _impl_.event_.ext4_trim_all_free_ = ext4_trim_all_free;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_trim_all_free)
}
inline ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* FtraceEvent::_internal_mutable_ext4_trim_all_free() {
  if (event_case() != kExt4TrimAllFree) {
    clear_event();
    set_has_ext4_trim_all_free();
    _impl_.event_.ext4_trim_all_free_ = CreateMaybeMessage< ::perfetto::protos::Ext4TrimAllFreeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_trim_all_free_;
}
inline ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* FtraceEvent::mutable_ext4_trim_all_free() {
  ::perfetto::protos::Ext4TrimAllFreeFtraceEvent* _msg = _internal_mutable_ext4_trim_all_free();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_trim_all_free)
  return _msg;
}

// .perfetto.protos.Ext4TrimExtentFtraceEvent ext4_trim_extent = 214;
inline bool FtraceEvent::has_ext4_trim_extent() const {
  return event_case() == kExt4TrimExtent;
}
inline bool FtraceEvent::_internal_has_ext4_trim_extent() const {
  return event_case() == kExt4TrimExtent;
}
inline void FtraceEvent::set_has_ext4_trim_extent() {
  _impl_._oneof_case_[0] = kExt4TrimExtent;
}
inline ::perfetto::protos::Ext4TrimExtentFtraceEvent* FtraceEvent::release_ext4_trim_extent() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_trim_extent)
  if (event_case() == kExt4TrimExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4TrimExtentFtraceEvent* temp = _impl_.event_.ext4_trim_extent_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_trim_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TrimExtentFtraceEvent& FtraceEvent::_internal_ext4_trim_extent() const {
  return event_case() == kExt4TrimExtent
      ? *_impl_.event_.ext4_trim_extent_
      : reinterpret_cast<::perfetto::protos::Ext4TrimExtentFtraceEvent&>(::perfetto::protos::_Ext4TrimExtentFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4TrimExtentFtraceEvent& FtraceEvent::ext4_trim_extent() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_trim_extent)
  return _internal_ext4_trim_extent();
}
inline ::perfetto::protos::Ext4TrimExtentFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_trim_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_trim_extent)
  if (event_case() == kExt4TrimExtent) {
    clear_has_event();
    ::perfetto::protos::Ext4TrimExtentFtraceEvent* temp = _impl_.event_.ext4_trim_extent_;
    _impl_.event_.ext4_trim_extent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_trim_extent(::perfetto::protos::Ext4TrimExtentFtraceEvent* ext4_trim_extent) {
  clear_event();
  if (ext4_trim_extent) {
    set_has_ext4_trim_extent();
    _impl_.event_.ext4_trim_extent_ = ext4_trim_extent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_trim_extent)
}
inline ::perfetto::protos::Ext4TrimExtentFtraceEvent* FtraceEvent::_internal_mutable_ext4_trim_extent() {
  if (event_case() != kExt4TrimExtent) {
    clear_event();
    set_has_ext4_trim_extent();
    _impl_.event_.ext4_trim_extent_ = CreateMaybeMessage< ::perfetto::protos::Ext4TrimExtentFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_trim_extent_;
}
inline ::perfetto::protos::Ext4TrimExtentFtraceEvent* FtraceEvent::mutable_ext4_trim_extent() {
  ::perfetto::protos::Ext4TrimExtentFtraceEvent* _msg = _internal_mutable_ext4_trim_extent();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_trim_extent)
  return _msg;
}

// .perfetto.protos.Ext4TruncateEnterFtraceEvent ext4_truncate_enter = 215;
inline bool FtraceEvent::has_ext4_truncate_enter() const {
  return event_case() == kExt4TruncateEnter;
}
inline bool FtraceEvent::_internal_has_ext4_truncate_enter() const {
  return event_case() == kExt4TruncateEnter;
}
inline void FtraceEvent::set_has_ext4_truncate_enter() {
  _impl_._oneof_case_[0] = kExt4TruncateEnter;
}
inline ::perfetto::protos::Ext4TruncateEnterFtraceEvent* FtraceEvent::release_ext4_truncate_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  if (event_case() == kExt4TruncateEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4TruncateEnterFtraceEvent* temp = _impl_.event_.ext4_truncate_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_truncate_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& FtraceEvent::_internal_ext4_truncate_enter() const {
  return event_case() == kExt4TruncateEnter
      ? *_impl_.event_.ext4_truncate_enter_
      : reinterpret_cast<::perfetto::protos::Ext4TruncateEnterFtraceEvent&>(::perfetto::protos::_Ext4TruncateEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4TruncateEnterFtraceEvent& FtraceEvent::ext4_truncate_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  return _internal_ext4_truncate_enter();
}
inline ::perfetto::protos::Ext4TruncateEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_truncate_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  if (event_case() == kExt4TruncateEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4TruncateEnterFtraceEvent* temp = _impl_.event_.ext4_truncate_enter_;
    _impl_.event_.ext4_truncate_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_truncate_enter(::perfetto::protos::Ext4TruncateEnterFtraceEvent* ext4_truncate_enter) {
  clear_event();
  if (ext4_truncate_enter) {
    set_has_ext4_truncate_enter();
    _impl_.event_.ext4_truncate_enter_ = ext4_truncate_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_truncate_enter)
}
inline ::perfetto::protos::Ext4TruncateEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_truncate_enter() {
  if (event_case() != kExt4TruncateEnter) {
    clear_event();
    set_has_ext4_truncate_enter();
    _impl_.event_.ext4_truncate_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4TruncateEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_truncate_enter_;
}
inline ::perfetto::protos::Ext4TruncateEnterFtraceEvent* FtraceEvent::mutable_ext4_truncate_enter() {
  ::perfetto::protos::Ext4TruncateEnterFtraceEvent* _msg = _internal_mutable_ext4_truncate_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_truncate_enter)
  return _msg;
}

// .perfetto.protos.Ext4TruncateExitFtraceEvent ext4_truncate_exit = 216;
inline bool FtraceEvent::has_ext4_truncate_exit() const {
  return event_case() == kExt4TruncateExit;
}
inline bool FtraceEvent::_internal_has_ext4_truncate_exit() const {
  return event_case() == kExt4TruncateExit;
}
inline void FtraceEvent::set_has_ext4_truncate_exit() {
  _impl_._oneof_case_[0] = kExt4TruncateExit;
}
inline ::perfetto::protos::Ext4TruncateExitFtraceEvent* FtraceEvent::release_ext4_truncate_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  if (event_case() == kExt4TruncateExit) {
    clear_has_event();
    ::perfetto::protos::Ext4TruncateExitFtraceEvent* temp = _impl_.event_.ext4_truncate_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_truncate_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4TruncateExitFtraceEvent& FtraceEvent::_internal_ext4_truncate_exit() const {
  return event_case() == kExt4TruncateExit
      ? *_impl_.event_.ext4_truncate_exit_
      : reinterpret_cast<::perfetto::protos::Ext4TruncateExitFtraceEvent&>(::perfetto::protos::_Ext4TruncateExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4TruncateExitFtraceEvent& FtraceEvent::ext4_truncate_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  return _internal_ext4_truncate_exit();
}
inline ::perfetto::protos::Ext4TruncateExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_truncate_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  if (event_case() == kExt4TruncateExit) {
    clear_has_event();
    ::perfetto::protos::Ext4TruncateExitFtraceEvent* temp = _impl_.event_.ext4_truncate_exit_;
    _impl_.event_.ext4_truncate_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_truncate_exit(::perfetto::protos::Ext4TruncateExitFtraceEvent* ext4_truncate_exit) {
  clear_event();
  if (ext4_truncate_exit) {
    set_has_ext4_truncate_exit();
    _impl_.event_.ext4_truncate_exit_ = ext4_truncate_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_truncate_exit)
}
inline ::perfetto::protos::Ext4TruncateExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_truncate_exit() {
  if (event_case() != kExt4TruncateExit) {
    clear_event();
    set_has_ext4_truncate_exit();
    _impl_.event_.ext4_truncate_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4TruncateExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_truncate_exit_;
}
inline ::perfetto::protos::Ext4TruncateExitFtraceEvent* FtraceEvent::mutable_ext4_truncate_exit() {
  ::perfetto::protos::Ext4TruncateExitFtraceEvent* _msg = _internal_mutable_ext4_truncate_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_truncate_exit)
  return _msg;
}

// .perfetto.protos.Ext4UnlinkEnterFtraceEvent ext4_unlink_enter = 217;
inline bool FtraceEvent::has_ext4_unlink_enter() const {
  return event_case() == kExt4UnlinkEnter;
}
inline bool FtraceEvent::_internal_has_ext4_unlink_enter() const {
  return event_case() == kExt4UnlinkEnter;
}
inline void FtraceEvent::set_has_ext4_unlink_enter() {
  _impl_._oneof_case_[0] = kExt4UnlinkEnter;
}
inline ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* FtraceEvent::release_ext4_unlink_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  if (event_case() == kExt4UnlinkEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* temp = _impl_.event_.ext4_unlink_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_unlink_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& FtraceEvent::_internal_ext4_unlink_enter() const {
  return event_case() == kExt4UnlinkEnter
      ? *_impl_.event_.ext4_unlink_enter_
      : reinterpret_cast<::perfetto::protos::Ext4UnlinkEnterFtraceEvent&>(::perfetto::protos::_Ext4UnlinkEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4UnlinkEnterFtraceEvent& FtraceEvent::ext4_unlink_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  return _internal_ext4_unlink_enter();
}
inline ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_unlink_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  if (event_case() == kExt4UnlinkEnter) {
    clear_has_event();
    ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* temp = _impl_.event_.ext4_unlink_enter_;
    _impl_.event_.ext4_unlink_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_unlink_enter(::perfetto::protos::Ext4UnlinkEnterFtraceEvent* ext4_unlink_enter) {
  clear_event();
  if (ext4_unlink_enter) {
    set_has_ext4_unlink_enter();
    _impl_.event_.ext4_unlink_enter_ = ext4_unlink_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_unlink_enter)
}
inline ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* FtraceEvent::_internal_mutable_ext4_unlink_enter() {
  if (event_case() != kExt4UnlinkEnter) {
    clear_event();
    set_has_ext4_unlink_enter();
    _impl_.event_.ext4_unlink_enter_ = CreateMaybeMessage< ::perfetto::protos::Ext4UnlinkEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_unlink_enter_;
}
inline ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* FtraceEvent::mutable_ext4_unlink_enter() {
  ::perfetto::protos::Ext4UnlinkEnterFtraceEvent* _msg = _internal_mutable_ext4_unlink_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_unlink_enter)
  return _msg;
}

// .perfetto.protos.Ext4UnlinkExitFtraceEvent ext4_unlink_exit = 218;
inline bool FtraceEvent::has_ext4_unlink_exit() const {
  return event_case() == kExt4UnlinkExit;
}
inline bool FtraceEvent::_internal_has_ext4_unlink_exit() const {
  return event_case() == kExt4UnlinkExit;
}
inline void FtraceEvent::set_has_ext4_unlink_exit() {
  _impl_._oneof_case_[0] = kExt4UnlinkExit;
}
inline ::perfetto::protos::Ext4UnlinkExitFtraceEvent* FtraceEvent::release_ext4_unlink_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  if (event_case() == kExt4UnlinkExit) {
    clear_has_event();
    ::perfetto::protos::Ext4UnlinkExitFtraceEvent* temp = _impl_.event_.ext4_unlink_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_unlink_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& FtraceEvent::_internal_ext4_unlink_exit() const {
  return event_case() == kExt4UnlinkExit
      ? *_impl_.event_.ext4_unlink_exit_
      : reinterpret_cast<::perfetto::protos::Ext4UnlinkExitFtraceEvent&>(::perfetto::protos::_Ext4UnlinkExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4UnlinkExitFtraceEvent& FtraceEvent::ext4_unlink_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  return _internal_ext4_unlink_exit();
}
inline ::perfetto::protos::Ext4UnlinkExitFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_unlink_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  if (event_case() == kExt4UnlinkExit) {
    clear_has_event();
    ::perfetto::protos::Ext4UnlinkExitFtraceEvent* temp = _impl_.event_.ext4_unlink_exit_;
    _impl_.event_.ext4_unlink_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_unlink_exit(::perfetto::protos::Ext4UnlinkExitFtraceEvent* ext4_unlink_exit) {
  clear_event();
  if (ext4_unlink_exit) {
    set_has_ext4_unlink_exit();
    _impl_.event_.ext4_unlink_exit_ = ext4_unlink_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_unlink_exit)
}
inline ::perfetto::protos::Ext4UnlinkExitFtraceEvent* FtraceEvent::_internal_mutable_ext4_unlink_exit() {
  if (event_case() != kExt4UnlinkExit) {
    clear_event();
    set_has_ext4_unlink_exit();
    _impl_.event_.ext4_unlink_exit_ = CreateMaybeMessage< ::perfetto::protos::Ext4UnlinkExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_unlink_exit_;
}
inline ::perfetto::protos::Ext4UnlinkExitFtraceEvent* FtraceEvent::mutable_ext4_unlink_exit() {
  ::perfetto::protos::Ext4UnlinkExitFtraceEvent* _msg = _internal_mutable_ext4_unlink_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_unlink_exit)
  return _msg;
}

// .perfetto.protos.Ext4WriteBeginFtraceEvent ext4_write_begin = 219;
inline bool FtraceEvent::has_ext4_write_begin() const {
  return event_case() == kExt4WriteBegin;
}
inline bool FtraceEvent::_internal_has_ext4_write_begin() const {
  return event_case() == kExt4WriteBegin;
}
inline void FtraceEvent::set_has_ext4_write_begin() {
  _impl_._oneof_case_[0] = kExt4WriteBegin;
}
inline ::perfetto::protos::Ext4WriteBeginFtraceEvent* FtraceEvent::release_ext4_write_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_write_begin)
  if (event_case() == kExt4WriteBegin) {
    clear_has_event();
    ::perfetto::protos::Ext4WriteBeginFtraceEvent* temp = _impl_.event_.ext4_write_begin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WriteBeginFtraceEvent& FtraceEvent::_internal_ext4_write_begin() const {
  return event_case() == kExt4WriteBegin
      ? *_impl_.event_.ext4_write_begin_
      : reinterpret_cast<::perfetto::protos::Ext4WriteBeginFtraceEvent&>(::perfetto::protos::_Ext4WriteBeginFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4WriteBeginFtraceEvent& FtraceEvent::ext4_write_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_write_begin)
  return _internal_ext4_write_begin();
}
inline ::perfetto::protos::Ext4WriteBeginFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_write_begin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_write_begin)
  if (event_case() == kExt4WriteBegin) {
    clear_has_event();
    ::perfetto::protos::Ext4WriteBeginFtraceEvent* temp = _impl_.event_.ext4_write_begin_;
    _impl_.event_.ext4_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_write_begin(::perfetto::protos::Ext4WriteBeginFtraceEvent* ext4_write_begin) {
  clear_event();
  if (ext4_write_begin) {
    set_has_ext4_write_begin();
    _impl_.event_.ext4_write_begin_ = ext4_write_begin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_write_begin)
}
inline ::perfetto::protos::Ext4WriteBeginFtraceEvent* FtraceEvent::_internal_mutable_ext4_write_begin() {
  if (event_case() != kExt4WriteBegin) {
    clear_event();
    set_has_ext4_write_begin();
    _impl_.event_.ext4_write_begin_ = CreateMaybeMessage< ::perfetto::protos::Ext4WriteBeginFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_write_begin_;
}
inline ::perfetto::protos::Ext4WriteBeginFtraceEvent* FtraceEvent::mutable_ext4_write_begin() {
  ::perfetto::protos::Ext4WriteBeginFtraceEvent* _msg = _internal_mutable_ext4_write_begin();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_write_begin)
  return _msg;
}

// .perfetto.protos.Ext4WriteEndFtraceEvent ext4_write_end = 230;
inline bool FtraceEvent::has_ext4_write_end() const {
  return event_case() == kExt4WriteEnd;
}
inline bool FtraceEvent::_internal_has_ext4_write_end() const {
  return event_case() == kExt4WriteEnd;
}
inline void FtraceEvent::set_has_ext4_write_end() {
  _impl_._oneof_case_[0] = kExt4WriteEnd;
}
inline ::perfetto::protos::Ext4WriteEndFtraceEvent* FtraceEvent::release_ext4_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_write_end)
  if (event_case() == kExt4WriteEnd) {
    clear_has_event();
    ::perfetto::protos::Ext4WriteEndFtraceEvent* temp = _impl_.event_.ext4_write_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WriteEndFtraceEvent& FtraceEvent::_internal_ext4_write_end() const {
  return event_case() == kExt4WriteEnd
      ? *_impl_.event_.ext4_write_end_
      : reinterpret_cast<::perfetto::protos::Ext4WriteEndFtraceEvent&>(::perfetto::protos::_Ext4WriteEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4WriteEndFtraceEvent& FtraceEvent::ext4_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_write_end)
  return _internal_ext4_write_end();
}
inline ::perfetto::protos::Ext4WriteEndFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_write_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_write_end)
  if (event_case() == kExt4WriteEnd) {
    clear_has_event();
    ::perfetto::protos::Ext4WriteEndFtraceEvent* temp = _impl_.event_.ext4_write_end_;
    _impl_.event_.ext4_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_write_end(::perfetto::protos::Ext4WriteEndFtraceEvent* ext4_write_end) {
  clear_event();
  if (ext4_write_end) {
    set_has_ext4_write_end();
    _impl_.event_.ext4_write_end_ = ext4_write_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_write_end)
}
inline ::perfetto::protos::Ext4WriteEndFtraceEvent* FtraceEvent::_internal_mutable_ext4_write_end() {
  if (event_case() != kExt4WriteEnd) {
    clear_event();
    set_has_ext4_write_end();
    _impl_.event_.ext4_write_end_ = CreateMaybeMessage< ::perfetto::protos::Ext4WriteEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_write_end_;
}
inline ::perfetto::protos::Ext4WriteEndFtraceEvent* FtraceEvent::mutable_ext4_write_end() {
  ::perfetto::protos::Ext4WriteEndFtraceEvent* _msg = _internal_mutable_ext4_write_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_write_end)
  return _msg;
}

// .perfetto.protos.Ext4WritepageFtraceEvent ext4_writepage = 231;
inline bool FtraceEvent::has_ext4_writepage() const {
  return event_case() == kExt4Writepage;
}
inline bool FtraceEvent::_internal_has_ext4_writepage() const {
  return event_case() == kExt4Writepage;
}
inline void FtraceEvent::set_has_ext4_writepage() {
  _impl_._oneof_case_[0] = kExt4Writepage;
}
inline ::perfetto::protos::Ext4WritepageFtraceEvent* FtraceEvent::release_ext4_writepage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_writepage)
  if (event_case() == kExt4Writepage) {
    clear_has_event();
    ::perfetto::protos::Ext4WritepageFtraceEvent* temp = _impl_.event_.ext4_writepage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_writepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WritepageFtraceEvent& FtraceEvent::_internal_ext4_writepage() const {
  return event_case() == kExt4Writepage
      ? *_impl_.event_.ext4_writepage_
      : reinterpret_cast<::perfetto::protos::Ext4WritepageFtraceEvent&>(::perfetto::protos::_Ext4WritepageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4WritepageFtraceEvent& FtraceEvent::ext4_writepage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_writepage)
  return _internal_ext4_writepage();
}
inline ::perfetto::protos::Ext4WritepageFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_writepage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_writepage)
  if (event_case() == kExt4Writepage) {
    clear_has_event();
    ::perfetto::protos::Ext4WritepageFtraceEvent* temp = _impl_.event_.ext4_writepage_;
    _impl_.event_.ext4_writepage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_writepage(::perfetto::protos::Ext4WritepageFtraceEvent* ext4_writepage) {
  clear_event();
  if (ext4_writepage) {
    set_has_ext4_writepage();
    _impl_.event_.ext4_writepage_ = ext4_writepage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_writepage)
}
inline ::perfetto::protos::Ext4WritepageFtraceEvent* FtraceEvent::_internal_mutable_ext4_writepage() {
  if (event_case() != kExt4Writepage) {
    clear_event();
    set_has_ext4_writepage();
    _impl_.event_.ext4_writepage_ = CreateMaybeMessage< ::perfetto::protos::Ext4WritepageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_writepage_;
}
inline ::perfetto::protos::Ext4WritepageFtraceEvent* FtraceEvent::mutable_ext4_writepage() {
  ::perfetto::protos::Ext4WritepageFtraceEvent* _msg = _internal_mutable_ext4_writepage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_writepage)
  return _msg;
}

// .perfetto.protos.Ext4WritepagesFtraceEvent ext4_writepages = 232;
inline bool FtraceEvent::has_ext4_writepages() const {
  return event_case() == kExt4Writepages;
}
inline bool FtraceEvent::_internal_has_ext4_writepages() const {
  return event_case() == kExt4Writepages;
}
inline void FtraceEvent::set_has_ext4_writepages() {
  _impl_._oneof_case_[0] = kExt4Writepages;
}
inline ::perfetto::protos::Ext4WritepagesFtraceEvent* FtraceEvent::release_ext4_writepages() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_writepages)
  if (event_case() == kExt4Writepages) {
    clear_has_event();
    ::perfetto::protos::Ext4WritepagesFtraceEvent* temp = _impl_.event_.ext4_writepages_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_writepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WritepagesFtraceEvent& FtraceEvent::_internal_ext4_writepages() const {
  return event_case() == kExt4Writepages
      ? *_impl_.event_.ext4_writepages_
      : reinterpret_cast<::perfetto::protos::Ext4WritepagesFtraceEvent&>(::perfetto::protos::_Ext4WritepagesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4WritepagesFtraceEvent& FtraceEvent::ext4_writepages() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_writepages)
  return _internal_ext4_writepages();
}
inline ::perfetto::protos::Ext4WritepagesFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_writepages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_writepages)
  if (event_case() == kExt4Writepages) {
    clear_has_event();
    ::perfetto::protos::Ext4WritepagesFtraceEvent* temp = _impl_.event_.ext4_writepages_;
    _impl_.event_.ext4_writepages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_writepages(::perfetto::protos::Ext4WritepagesFtraceEvent* ext4_writepages) {
  clear_event();
  if (ext4_writepages) {
    set_has_ext4_writepages();
    _impl_.event_.ext4_writepages_ = ext4_writepages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_writepages)
}
inline ::perfetto::protos::Ext4WritepagesFtraceEvent* FtraceEvent::_internal_mutable_ext4_writepages() {
  if (event_case() != kExt4Writepages) {
    clear_event();
    set_has_ext4_writepages();
    _impl_.event_.ext4_writepages_ = CreateMaybeMessage< ::perfetto::protos::Ext4WritepagesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_writepages_;
}
inline ::perfetto::protos::Ext4WritepagesFtraceEvent* FtraceEvent::mutable_ext4_writepages() {
  ::perfetto::protos::Ext4WritepagesFtraceEvent* _msg = _internal_mutable_ext4_writepages();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_writepages)
  return _msg;
}

// .perfetto.protos.Ext4WritepagesResultFtraceEvent ext4_writepages_result = 233;
inline bool FtraceEvent::has_ext4_writepages_result() const {
  return event_case() == kExt4WritepagesResult;
}
inline bool FtraceEvent::_internal_has_ext4_writepages_result() const {
  return event_case() == kExt4WritepagesResult;
}
inline void FtraceEvent::set_has_ext4_writepages_result() {
  _impl_._oneof_case_[0] = kExt4WritepagesResult;
}
inline ::perfetto::protos::Ext4WritepagesResultFtraceEvent* FtraceEvent::release_ext4_writepages_result() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_writepages_result)
  if (event_case() == kExt4WritepagesResult) {
    clear_has_event();
    ::perfetto::protos::Ext4WritepagesResultFtraceEvent* temp = _impl_.event_.ext4_writepages_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_writepages_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& FtraceEvent::_internal_ext4_writepages_result() const {
  return event_case() == kExt4WritepagesResult
      ? *_impl_.event_.ext4_writepages_result_
      : reinterpret_cast<::perfetto::protos::Ext4WritepagesResultFtraceEvent&>(::perfetto::protos::_Ext4WritepagesResultFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4WritepagesResultFtraceEvent& FtraceEvent::ext4_writepages_result() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_writepages_result)
  return _internal_ext4_writepages_result();
}
inline ::perfetto::protos::Ext4WritepagesResultFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_writepages_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_writepages_result)
  if (event_case() == kExt4WritepagesResult) {
    clear_has_event();
    ::perfetto::protos::Ext4WritepagesResultFtraceEvent* temp = _impl_.event_.ext4_writepages_result_;
    _impl_.event_.ext4_writepages_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_writepages_result(::perfetto::protos::Ext4WritepagesResultFtraceEvent* ext4_writepages_result) {
  clear_event();
  if (ext4_writepages_result) {
    set_has_ext4_writepages_result();
    _impl_.event_.ext4_writepages_result_ = ext4_writepages_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_writepages_result)
}
inline ::perfetto::protos::Ext4WritepagesResultFtraceEvent* FtraceEvent::_internal_mutable_ext4_writepages_result() {
  if (event_case() != kExt4WritepagesResult) {
    clear_event();
    set_has_ext4_writepages_result();
    _impl_.event_.ext4_writepages_result_ = CreateMaybeMessage< ::perfetto::protos::Ext4WritepagesResultFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_writepages_result_;
}
inline ::perfetto::protos::Ext4WritepagesResultFtraceEvent* FtraceEvent::mutable_ext4_writepages_result() {
  ::perfetto::protos::Ext4WritepagesResultFtraceEvent* _msg = _internal_mutable_ext4_writepages_result();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_writepages_result)
  return _msg;
}

// .perfetto.protos.Ext4ZeroRangeFtraceEvent ext4_zero_range = 234;
inline bool FtraceEvent::has_ext4_zero_range() const {
  return event_case() == kExt4ZeroRange;
}
inline bool FtraceEvent::_internal_has_ext4_zero_range() const {
  return event_case() == kExt4ZeroRange;
}
inline void FtraceEvent::set_has_ext4_zero_range() {
  _impl_._oneof_case_[0] = kExt4ZeroRange;
}
inline ::perfetto::protos::Ext4ZeroRangeFtraceEvent* FtraceEvent::release_ext4_zero_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ext4_zero_range)
  if (event_case() == kExt4ZeroRange) {
    clear_has_event();
    ::perfetto::protos::Ext4ZeroRangeFtraceEvent* temp = _impl_.event_.ext4_zero_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ext4_zero_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& FtraceEvent::_internal_ext4_zero_range() const {
  return event_case() == kExt4ZeroRange
      ? *_impl_.event_.ext4_zero_range_
      : reinterpret_cast<::perfetto::protos::Ext4ZeroRangeFtraceEvent&>(::perfetto::protos::_Ext4ZeroRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Ext4ZeroRangeFtraceEvent& FtraceEvent::ext4_zero_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ext4_zero_range)
  return _internal_ext4_zero_range();
}
inline ::perfetto::protos::Ext4ZeroRangeFtraceEvent* FtraceEvent::unsafe_arena_release_ext4_zero_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ext4_zero_range)
  if (event_case() == kExt4ZeroRange) {
    clear_has_event();
    ::perfetto::protos::Ext4ZeroRangeFtraceEvent* temp = _impl_.event_.ext4_zero_range_;
    _impl_.event_.ext4_zero_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ext4_zero_range(::perfetto::protos::Ext4ZeroRangeFtraceEvent* ext4_zero_range) {
  clear_event();
  if (ext4_zero_range) {
    set_has_ext4_zero_range();
    _impl_.event_.ext4_zero_range_ = ext4_zero_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ext4_zero_range)
}
inline ::perfetto::protos::Ext4ZeroRangeFtraceEvent* FtraceEvent::_internal_mutable_ext4_zero_range() {
  if (event_case() != kExt4ZeroRange) {
    clear_event();
    set_has_ext4_zero_range();
    _impl_.event_.ext4_zero_range_ = CreateMaybeMessage< ::perfetto::protos::Ext4ZeroRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ext4_zero_range_;
}
inline ::perfetto::protos::Ext4ZeroRangeFtraceEvent* FtraceEvent::mutable_ext4_zero_range() {
  ::perfetto::protos::Ext4ZeroRangeFtraceEvent* _msg = _internal_mutable_ext4_zero_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ext4_zero_range)
  return _msg;
}

// .perfetto.protos.TaskNewtaskFtraceEvent task_newtask = 235;
inline bool FtraceEvent::has_task_newtask() const {
  return event_case() == kTaskNewtask;
}
inline bool FtraceEvent::_internal_has_task_newtask() const {
  return event_case() == kTaskNewtask;
}
inline void FtraceEvent::set_has_task_newtask() {
  _impl_._oneof_case_[0] = kTaskNewtask;
}
inline ::perfetto::protos::TaskNewtaskFtraceEvent* FtraceEvent::release_task_newtask() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.task_newtask)
  if (event_case() == kTaskNewtask) {
    clear_has_event();
    ::perfetto::protos::TaskNewtaskFtraceEvent* temp = _impl_.event_.task_newtask_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.task_newtask_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TaskNewtaskFtraceEvent& FtraceEvent::_internal_task_newtask() const {
  return event_case() == kTaskNewtask
      ? *_impl_.event_.task_newtask_
      : reinterpret_cast<::perfetto::protos::TaskNewtaskFtraceEvent&>(::perfetto::protos::_TaskNewtaskFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TaskNewtaskFtraceEvent& FtraceEvent::task_newtask() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.task_newtask)
  return _internal_task_newtask();
}
inline ::perfetto::protos::TaskNewtaskFtraceEvent* FtraceEvent::unsafe_arena_release_task_newtask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.task_newtask)
  if (event_case() == kTaskNewtask) {
    clear_has_event();
    ::perfetto::protos::TaskNewtaskFtraceEvent* temp = _impl_.event_.task_newtask_;
    _impl_.event_.task_newtask_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_task_newtask(::perfetto::protos::TaskNewtaskFtraceEvent* task_newtask) {
  clear_event();
  if (task_newtask) {
    set_has_task_newtask();
    _impl_.event_.task_newtask_ = task_newtask;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.task_newtask)
}
inline ::perfetto::protos::TaskNewtaskFtraceEvent* FtraceEvent::_internal_mutable_task_newtask() {
  if (event_case() != kTaskNewtask) {
    clear_event();
    set_has_task_newtask();
    _impl_.event_.task_newtask_ = CreateMaybeMessage< ::perfetto::protos::TaskNewtaskFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.task_newtask_;
}
inline ::perfetto::protos::TaskNewtaskFtraceEvent* FtraceEvent::mutable_task_newtask() {
  ::perfetto::protos::TaskNewtaskFtraceEvent* _msg = _internal_mutable_task_newtask();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.task_newtask)
  return _msg;
}

// .perfetto.protos.TaskRenameFtraceEvent task_rename = 236;
inline bool FtraceEvent::has_task_rename() const {
  return event_case() == kTaskRename;
}
inline bool FtraceEvent::_internal_has_task_rename() const {
  return event_case() == kTaskRename;
}
inline void FtraceEvent::set_has_task_rename() {
  _impl_._oneof_case_[0] = kTaskRename;
}
inline ::perfetto::protos::TaskRenameFtraceEvent* FtraceEvent::release_task_rename() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.task_rename)
  if (event_case() == kTaskRename) {
    clear_has_event();
    ::perfetto::protos::TaskRenameFtraceEvent* temp = _impl_.event_.task_rename_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.task_rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TaskRenameFtraceEvent& FtraceEvent::_internal_task_rename() const {
  return event_case() == kTaskRename
      ? *_impl_.event_.task_rename_
      : reinterpret_cast<::perfetto::protos::TaskRenameFtraceEvent&>(::perfetto::protos::_TaskRenameFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TaskRenameFtraceEvent& FtraceEvent::task_rename() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.task_rename)
  return _internal_task_rename();
}
inline ::perfetto::protos::TaskRenameFtraceEvent* FtraceEvent::unsafe_arena_release_task_rename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.task_rename)
  if (event_case() == kTaskRename) {
    clear_has_event();
    ::perfetto::protos::TaskRenameFtraceEvent* temp = _impl_.event_.task_rename_;
    _impl_.event_.task_rename_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_task_rename(::perfetto::protos::TaskRenameFtraceEvent* task_rename) {
  clear_event();
  if (task_rename) {
    set_has_task_rename();
    _impl_.event_.task_rename_ = task_rename;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.task_rename)
}
inline ::perfetto::protos::TaskRenameFtraceEvent* FtraceEvent::_internal_mutable_task_rename() {
  if (event_case() != kTaskRename) {
    clear_event();
    set_has_task_rename();
    _impl_.event_.task_rename_ = CreateMaybeMessage< ::perfetto::protos::TaskRenameFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.task_rename_;
}
inline ::perfetto::protos::TaskRenameFtraceEvent* FtraceEvent::mutable_task_rename() {
  ::perfetto::protos::TaskRenameFtraceEvent* _msg = _internal_mutable_task_rename();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.task_rename)
  return _msg;
}

// .perfetto.protos.SchedProcessExecFtraceEvent sched_process_exec = 237;
inline bool FtraceEvent::has_sched_process_exec() const {
  return event_case() == kSchedProcessExec;
}
inline bool FtraceEvent::_internal_has_sched_process_exec() const {
  return event_case() == kSchedProcessExec;
}
inline void FtraceEvent::set_has_sched_process_exec() {
  _impl_._oneof_case_[0] = kSchedProcessExec;
}
inline ::perfetto::protos::SchedProcessExecFtraceEvent* FtraceEvent::release_sched_process_exec() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_exec)
  if (event_case() == kSchedProcessExec) {
    clear_has_event();
    ::perfetto::protos::SchedProcessExecFtraceEvent* temp = _impl_.event_.sched_process_exec_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_process_exec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessExecFtraceEvent& FtraceEvent::_internal_sched_process_exec() const {
  return event_case() == kSchedProcessExec
      ? *_impl_.event_.sched_process_exec_
      : reinterpret_cast<::perfetto::protos::SchedProcessExecFtraceEvent&>(::perfetto::protos::_SchedProcessExecFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedProcessExecFtraceEvent& FtraceEvent::sched_process_exec() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_exec)
  return _internal_sched_process_exec();
}
inline ::perfetto::protos::SchedProcessExecFtraceEvent* FtraceEvent::unsafe_arena_release_sched_process_exec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_process_exec)
  if (event_case() == kSchedProcessExec) {
    clear_has_event();
    ::perfetto::protos::SchedProcessExecFtraceEvent* temp = _impl_.event_.sched_process_exec_;
    _impl_.event_.sched_process_exec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_process_exec(::perfetto::protos::SchedProcessExecFtraceEvent* sched_process_exec) {
  clear_event();
  if (sched_process_exec) {
    set_has_sched_process_exec();
    _impl_.event_.sched_process_exec_ = sched_process_exec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_process_exec)
}
inline ::perfetto::protos::SchedProcessExecFtraceEvent* FtraceEvent::_internal_mutable_sched_process_exec() {
  if (event_case() != kSchedProcessExec) {
    clear_event();
    set_has_sched_process_exec();
    _impl_.event_.sched_process_exec_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessExecFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_process_exec_;
}
inline ::perfetto::protos::SchedProcessExecFtraceEvent* FtraceEvent::mutable_sched_process_exec() {
  ::perfetto::protos::SchedProcessExecFtraceEvent* _msg = _internal_mutable_sched_process_exec();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_exec)
  return _msg;
}

// .perfetto.protos.SchedProcessExitFtraceEvent sched_process_exit = 238;
inline bool FtraceEvent::has_sched_process_exit() const {
  return event_case() == kSchedProcessExit;
}
inline bool FtraceEvent::_internal_has_sched_process_exit() const {
  return event_case() == kSchedProcessExit;
}
inline void FtraceEvent::set_has_sched_process_exit() {
  _impl_._oneof_case_[0] = kSchedProcessExit;
}
inline ::perfetto::protos::SchedProcessExitFtraceEvent* FtraceEvent::release_sched_process_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_exit)
  if (event_case() == kSchedProcessExit) {
    clear_has_event();
    ::perfetto::protos::SchedProcessExitFtraceEvent* temp = _impl_.event_.sched_process_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_process_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessExitFtraceEvent& FtraceEvent::_internal_sched_process_exit() const {
  return event_case() == kSchedProcessExit
      ? *_impl_.event_.sched_process_exit_
      : reinterpret_cast<::perfetto::protos::SchedProcessExitFtraceEvent&>(::perfetto::protos::_SchedProcessExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedProcessExitFtraceEvent& FtraceEvent::sched_process_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_exit)
  return _internal_sched_process_exit();
}
inline ::perfetto::protos::SchedProcessExitFtraceEvent* FtraceEvent::unsafe_arena_release_sched_process_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_process_exit)
  if (event_case() == kSchedProcessExit) {
    clear_has_event();
    ::perfetto::protos::SchedProcessExitFtraceEvent* temp = _impl_.event_.sched_process_exit_;
    _impl_.event_.sched_process_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_process_exit(::perfetto::protos::SchedProcessExitFtraceEvent* sched_process_exit) {
  clear_event();
  if (sched_process_exit) {
    set_has_sched_process_exit();
    _impl_.event_.sched_process_exit_ = sched_process_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_process_exit)
}
inline ::perfetto::protos::SchedProcessExitFtraceEvent* FtraceEvent::_internal_mutable_sched_process_exit() {
  if (event_case() != kSchedProcessExit) {
    clear_event();
    set_has_sched_process_exit();
    _impl_.event_.sched_process_exit_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_process_exit_;
}
inline ::perfetto::protos::SchedProcessExitFtraceEvent* FtraceEvent::mutable_sched_process_exit() {
  ::perfetto::protos::SchedProcessExitFtraceEvent* _msg = _internal_mutable_sched_process_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_exit)
  return _msg;
}

// .perfetto.protos.SchedProcessForkFtraceEvent sched_process_fork = 239;
inline bool FtraceEvent::has_sched_process_fork() const {
  return event_case() == kSchedProcessFork;
}
inline bool FtraceEvent::_internal_has_sched_process_fork() const {
  return event_case() == kSchedProcessFork;
}
inline void FtraceEvent::set_has_sched_process_fork() {
  _impl_._oneof_case_[0] = kSchedProcessFork;
}
inline ::perfetto::protos::SchedProcessForkFtraceEvent* FtraceEvent::release_sched_process_fork() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_fork)
  if (event_case() == kSchedProcessFork) {
    clear_has_event();
    ::perfetto::protos::SchedProcessForkFtraceEvent* temp = _impl_.event_.sched_process_fork_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_process_fork_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessForkFtraceEvent& FtraceEvent::_internal_sched_process_fork() const {
  return event_case() == kSchedProcessFork
      ? *_impl_.event_.sched_process_fork_
      : reinterpret_cast<::perfetto::protos::SchedProcessForkFtraceEvent&>(::perfetto::protos::_SchedProcessForkFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedProcessForkFtraceEvent& FtraceEvent::sched_process_fork() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_fork)
  return _internal_sched_process_fork();
}
inline ::perfetto::protos::SchedProcessForkFtraceEvent* FtraceEvent::unsafe_arena_release_sched_process_fork() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_process_fork)
  if (event_case() == kSchedProcessFork) {
    clear_has_event();
    ::perfetto::protos::SchedProcessForkFtraceEvent* temp = _impl_.event_.sched_process_fork_;
    _impl_.event_.sched_process_fork_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_process_fork(::perfetto::protos::SchedProcessForkFtraceEvent* sched_process_fork) {
  clear_event();
  if (sched_process_fork) {
    set_has_sched_process_fork();
    _impl_.event_.sched_process_fork_ = sched_process_fork;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_process_fork)
}
inline ::perfetto::protos::SchedProcessForkFtraceEvent* FtraceEvent::_internal_mutable_sched_process_fork() {
  if (event_case() != kSchedProcessFork) {
    clear_event();
    set_has_sched_process_fork();
    _impl_.event_.sched_process_fork_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessForkFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_process_fork_;
}
inline ::perfetto::protos::SchedProcessForkFtraceEvent* FtraceEvent::mutable_sched_process_fork() {
  ::perfetto::protos::SchedProcessForkFtraceEvent* _msg = _internal_mutable_sched_process_fork();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_fork)
  return _msg;
}

// .perfetto.protos.SchedProcessFreeFtraceEvent sched_process_free = 240;
inline bool FtraceEvent::has_sched_process_free() const {
  return event_case() == kSchedProcessFree;
}
inline bool FtraceEvent::_internal_has_sched_process_free() const {
  return event_case() == kSchedProcessFree;
}
inline void FtraceEvent::set_has_sched_process_free() {
  _impl_._oneof_case_[0] = kSchedProcessFree;
}
inline ::perfetto::protos::SchedProcessFreeFtraceEvent* FtraceEvent::release_sched_process_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_free)
  if (event_case() == kSchedProcessFree) {
    clear_has_event();
    ::perfetto::protos::SchedProcessFreeFtraceEvent* temp = _impl_.event_.sched_process_free_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_process_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessFreeFtraceEvent& FtraceEvent::_internal_sched_process_free() const {
  return event_case() == kSchedProcessFree
      ? *_impl_.event_.sched_process_free_
      : reinterpret_cast<::perfetto::protos::SchedProcessFreeFtraceEvent&>(::perfetto::protos::_SchedProcessFreeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedProcessFreeFtraceEvent& FtraceEvent::sched_process_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_free)
  return _internal_sched_process_free();
}
inline ::perfetto::protos::SchedProcessFreeFtraceEvent* FtraceEvent::unsafe_arena_release_sched_process_free() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_process_free)
  if (event_case() == kSchedProcessFree) {
    clear_has_event();
    ::perfetto::protos::SchedProcessFreeFtraceEvent* temp = _impl_.event_.sched_process_free_;
    _impl_.event_.sched_process_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_process_free(::perfetto::protos::SchedProcessFreeFtraceEvent* sched_process_free) {
  clear_event();
  if (sched_process_free) {
    set_has_sched_process_free();
    _impl_.event_.sched_process_free_ = sched_process_free;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_process_free)
}
inline ::perfetto::protos::SchedProcessFreeFtraceEvent* FtraceEvent::_internal_mutable_sched_process_free() {
  if (event_case() != kSchedProcessFree) {
    clear_event();
    set_has_sched_process_free();
    _impl_.event_.sched_process_free_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessFreeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_process_free_;
}
inline ::perfetto::protos::SchedProcessFreeFtraceEvent* FtraceEvent::mutable_sched_process_free() {
  ::perfetto::protos::SchedProcessFreeFtraceEvent* _msg = _internal_mutable_sched_process_free();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_free)
  return _msg;
}

// .perfetto.protos.SchedProcessHangFtraceEvent sched_process_hang = 241;
inline bool FtraceEvent::has_sched_process_hang() const {
  return event_case() == kSchedProcessHang;
}
inline bool FtraceEvent::_internal_has_sched_process_hang() const {
  return event_case() == kSchedProcessHang;
}
inline void FtraceEvent::set_has_sched_process_hang() {
  _impl_._oneof_case_[0] = kSchedProcessHang;
}
inline ::perfetto::protos::SchedProcessHangFtraceEvent* FtraceEvent::release_sched_process_hang() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_hang)
  if (event_case() == kSchedProcessHang) {
    clear_has_event();
    ::perfetto::protos::SchedProcessHangFtraceEvent* temp = _impl_.event_.sched_process_hang_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_process_hang_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessHangFtraceEvent& FtraceEvent::_internal_sched_process_hang() const {
  return event_case() == kSchedProcessHang
      ? *_impl_.event_.sched_process_hang_
      : reinterpret_cast<::perfetto::protos::SchedProcessHangFtraceEvent&>(::perfetto::protos::_SchedProcessHangFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedProcessHangFtraceEvent& FtraceEvent::sched_process_hang() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_hang)
  return _internal_sched_process_hang();
}
inline ::perfetto::protos::SchedProcessHangFtraceEvent* FtraceEvent::unsafe_arena_release_sched_process_hang() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_process_hang)
  if (event_case() == kSchedProcessHang) {
    clear_has_event();
    ::perfetto::protos::SchedProcessHangFtraceEvent* temp = _impl_.event_.sched_process_hang_;
    _impl_.event_.sched_process_hang_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_process_hang(::perfetto::protos::SchedProcessHangFtraceEvent* sched_process_hang) {
  clear_event();
  if (sched_process_hang) {
    set_has_sched_process_hang();
    _impl_.event_.sched_process_hang_ = sched_process_hang;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_process_hang)
}
inline ::perfetto::protos::SchedProcessHangFtraceEvent* FtraceEvent::_internal_mutable_sched_process_hang() {
  if (event_case() != kSchedProcessHang) {
    clear_event();
    set_has_sched_process_hang();
    _impl_.event_.sched_process_hang_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessHangFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_process_hang_;
}
inline ::perfetto::protos::SchedProcessHangFtraceEvent* FtraceEvent::mutable_sched_process_hang() {
  ::perfetto::protos::SchedProcessHangFtraceEvent* _msg = _internal_mutable_sched_process_hang();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_hang)
  return _msg;
}

// .perfetto.protos.SchedProcessWaitFtraceEvent sched_process_wait = 242;
inline bool FtraceEvent::has_sched_process_wait() const {
  return event_case() == kSchedProcessWait;
}
inline bool FtraceEvent::_internal_has_sched_process_wait() const {
  return event_case() == kSchedProcessWait;
}
inline void FtraceEvent::set_has_sched_process_wait() {
  _impl_._oneof_case_[0] = kSchedProcessWait;
}
inline ::perfetto::protos::SchedProcessWaitFtraceEvent* FtraceEvent::release_sched_process_wait() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_process_wait)
  if (event_case() == kSchedProcessWait) {
    clear_has_event();
    ::perfetto::protos::SchedProcessWaitFtraceEvent* temp = _impl_.event_.sched_process_wait_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_process_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedProcessWaitFtraceEvent& FtraceEvent::_internal_sched_process_wait() const {
  return event_case() == kSchedProcessWait
      ? *_impl_.event_.sched_process_wait_
      : reinterpret_cast<::perfetto::protos::SchedProcessWaitFtraceEvent&>(::perfetto::protos::_SchedProcessWaitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedProcessWaitFtraceEvent& FtraceEvent::sched_process_wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_process_wait)
  return _internal_sched_process_wait();
}
inline ::perfetto::protos::SchedProcessWaitFtraceEvent* FtraceEvent::unsafe_arena_release_sched_process_wait() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_process_wait)
  if (event_case() == kSchedProcessWait) {
    clear_has_event();
    ::perfetto::protos::SchedProcessWaitFtraceEvent* temp = _impl_.event_.sched_process_wait_;
    _impl_.event_.sched_process_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_process_wait(::perfetto::protos::SchedProcessWaitFtraceEvent* sched_process_wait) {
  clear_event();
  if (sched_process_wait) {
    set_has_sched_process_wait();
    _impl_.event_.sched_process_wait_ = sched_process_wait;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_process_wait)
}
inline ::perfetto::protos::SchedProcessWaitFtraceEvent* FtraceEvent::_internal_mutable_sched_process_wait() {
  if (event_case() != kSchedProcessWait) {
    clear_event();
    set_has_sched_process_wait();
    _impl_.event_.sched_process_wait_ = CreateMaybeMessage< ::perfetto::protos::SchedProcessWaitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_process_wait_;
}
inline ::perfetto::protos::SchedProcessWaitFtraceEvent* FtraceEvent::mutable_sched_process_wait() {
  ::perfetto::protos::SchedProcessWaitFtraceEvent* _msg = _internal_mutable_sched_process_wait();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_process_wait)
  return _msg;
}

// .perfetto.protos.F2fsDoSubmitBioFtraceEvent f2fs_do_submit_bio = 243;
inline bool FtraceEvent::has_f2fs_do_submit_bio() const {
  return event_case() == kF2FsDoSubmitBio;
}
inline bool FtraceEvent::_internal_has_f2fs_do_submit_bio() const {
  return event_case() == kF2FsDoSubmitBio;
}
inline void FtraceEvent::set_has_f2fs_do_submit_bio() {
  _impl_._oneof_case_[0] = kF2FsDoSubmitBio;
}
inline ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* FtraceEvent::release_f2fs_do_submit_bio() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  if (event_case() == kF2FsDoSubmitBio) {
    clear_has_event();
    ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* temp = _impl_.event_.f2fs_do_submit_bio_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_do_submit_bio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& FtraceEvent::_internal_f2fs_do_submit_bio() const {
  return event_case() == kF2FsDoSubmitBio
      ? *_impl_.event_.f2fs_do_submit_bio_
      : reinterpret_cast<::perfetto::protos::F2fsDoSubmitBioFtraceEvent&>(::perfetto::protos::_F2fsDoSubmitBioFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsDoSubmitBioFtraceEvent& FtraceEvent::f2fs_do_submit_bio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  return _internal_f2fs_do_submit_bio();
}
inline ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_do_submit_bio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  if (event_case() == kF2FsDoSubmitBio) {
    clear_has_event();
    ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* temp = _impl_.event_.f2fs_do_submit_bio_;
    _impl_.event_.f2fs_do_submit_bio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_do_submit_bio(::perfetto::protos::F2fsDoSubmitBioFtraceEvent* f2fs_do_submit_bio) {
  clear_event();
  if (f2fs_do_submit_bio) {
    set_has_f2fs_do_submit_bio();
    _impl_.event_.f2fs_do_submit_bio_ = f2fs_do_submit_bio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
}
inline ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* FtraceEvent::_internal_mutable_f2fs_do_submit_bio() {
  if (event_case() != kF2FsDoSubmitBio) {
    clear_event();
    set_has_f2fs_do_submit_bio();
    _impl_.event_.f2fs_do_submit_bio_ = CreateMaybeMessage< ::perfetto::protos::F2fsDoSubmitBioFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_do_submit_bio_;
}
inline ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* FtraceEvent::mutable_f2fs_do_submit_bio() {
  ::perfetto::protos::F2fsDoSubmitBioFtraceEvent* _msg = _internal_mutable_f2fs_do_submit_bio();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_do_submit_bio)
  return _msg;
}

// .perfetto.protos.F2fsEvictInodeFtraceEvent f2fs_evict_inode = 244;
inline bool FtraceEvent::has_f2fs_evict_inode() const {
  return event_case() == kF2FsEvictInode;
}
inline bool FtraceEvent::_internal_has_f2fs_evict_inode() const {
  return event_case() == kF2FsEvictInode;
}
inline void FtraceEvent::set_has_f2fs_evict_inode() {
  _impl_._oneof_case_[0] = kF2FsEvictInode;
}
inline ::perfetto::protos::F2fsEvictInodeFtraceEvent* FtraceEvent::release_f2fs_evict_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  if (event_case() == kF2FsEvictInode) {
    clear_has_event();
    ::perfetto::protos::F2fsEvictInodeFtraceEvent* temp = _impl_.event_.f2fs_evict_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_evict_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsEvictInodeFtraceEvent& FtraceEvent::_internal_f2fs_evict_inode() const {
  return event_case() == kF2FsEvictInode
      ? *_impl_.event_.f2fs_evict_inode_
      : reinterpret_cast<::perfetto::protos::F2fsEvictInodeFtraceEvent&>(::perfetto::protos::_F2fsEvictInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsEvictInodeFtraceEvent& FtraceEvent::f2fs_evict_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  return _internal_f2fs_evict_inode();
}
inline ::perfetto::protos::F2fsEvictInodeFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_evict_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  if (event_case() == kF2FsEvictInode) {
    clear_has_event();
    ::perfetto::protos::F2fsEvictInodeFtraceEvent* temp = _impl_.event_.f2fs_evict_inode_;
    _impl_.event_.f2fs_evict_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_evict_inode(::perfetto::protos::F2fsEvictInodeFtraceEvent* f2fs_evict_inode) {
  clear_event();
  if (f2fs_evict_inode) {
    set_has_f2fs_evict_inode();
    _impl_.event_.f2fs_evict_inode_ = f2fs_evict_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_evict_inode)
}
inline ::perfetto::protos::F2fsEvictInodeFtraceEvent* FtraceEvent::_internal_mutable_f2fs_evict_inode() {
  if (event_case() != kF2FsEvictInode) {
    clear_event();
    set_has_f2fs_evict_inode();
    _impl_.event_.f2fs_evict_inode_ = CreateMaybeMessage< ::perfetto::protos::F2fsEvictInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_evict_inode_;
}
inline ::perfetto::protos::F2fsEvictInodeFtraceEvent* FtraceEvent::mutable_f2fs_evict_inode() {
  ::perfetto::protos::F2fsEvictInodeFtraceEvent* _msg = _internal_mutable_f2fs_evict_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_evict_inode)
  return _msg;
}

// .perfetto.protos.F2fsFallocateFtraceEvent f2fs_fallocate = 245;
inline bool FtraceEvent::has_f2fs_fallocate() const {
  return event_case() == kF2FsFallocate;
}
inline bool FtraceEvent::_internal_has_f2fs_fallocate() const {
  return event_case() == kF2FsFallocate;
}
inline void FtraceEvent::set_has_f2fs_fallocate() {
  _impl_._oneof_case_[0] = kF2FsFallocate;
}
inline ::perfetto::protos::F2fsFallocateFtraceEvent* FtraceEvent::release_f2fs_fallocate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_fallocate)
  if (event_case() == kF2FsFallocate) {
    clear_has_event();
    ::perfetto::protos::F2fsFallocateFtraceEvent* temp = _impl_.event_.f2fs_fallocate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_fallocate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsFallocateFtraceEvent& FtraceEvent::_internal_f2fs_fallocate() const {
  return event_case() == kF2FsFallocate
      ? *_impl_.event_.f2fs_fallocate_
      : reinterpret_cast<::perfetto::protos::F2fsFallocateFtraceEvent&>(::perfetto::protos::_F2fsFallocateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsFallocateFtraceEvent& FtraceEvent::f2fs_fallocate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_fallocate)
  return _internal_f2fs_fallocate();
}
inline ::perfetto::protos::F2fsFallocateFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_fallocate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_fallocate)
  if (event_case() == kF2FsFallocate) {
    clear_has_event();
    ::perfetto::protos::F2fsFallocateFtraceEvent* temp = _impl_.event_.f2fs_fallocate_;
    _impl_.event_.f2fs_fallocate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_fallocate(::perfetto::protos::F2fsFallocateFtraceEvent* f2fs_fallocate) {
  clear_event();
  if (f2fs_fallocate) {
    set_has_f2fs_fallocate();
    _impl_.event_.f2fs_fallocate_ = f2fs_fallocate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_fallocate)
}
inline ::perfetto::protos::F2fsFallocateFtraceEvent* FtraceEvent::_internal_mutable_f2fs_fallocate() {
  if (event_case() != kF2FsFallocate) {
    clear_event();
    set_has_f2fs_fallocate();
    _impl_.event_.f2fs_fallocate_ = CreateMaybeMessage< ::perfetto::protos::F2fsFallocateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_fallocate_;
}
inline ::perfetto::protos::F2fsFallocateFtraceEvent* FtraceEvent::mutable_f2fs_fallocate() {
  ::perfetto::protos::F2fsFallocateFtraceEvent* _msg = _internal_mutable_f2fs_fallocate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_fallocate)
  return _msg;
}

// .perfetto.protos.F2fsGetDataBlockFtraceEvent f2fs_get_data_block = 246;
inline bool FtraceEvent::has_f2fs_get_data_block() const {
  return event_case() == kF2FsGetDataBlock;
}
inline bool FtraceEvent::_internal_has_f2fs_get_data_block() const {
  return event_case() == kF2FsGetDataBlock;
}
inline void FtraceEvent::set_has_f2fs_get_data_block() {
  _impl_._oneof_case_[0] = kF2FsGetDataBlock;
}
inline ::perfetto::protos::F2fsGetDataBlockFtraceEvent* FtraceEvent::release_f2fs_get_data_block() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  if (event_case() == kF2FsGetDataBlock) {
    clear_has_event();
    ::perfetto::protos::F2fsGetDataBlockFtraceEvent* temp = _impl_.event_.f2fs_get_data_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_get_data_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& FtraceEvent::_internal_f2fs_get_data_block() const {
  return event_case() == kF2FsGetDataBlock
      ? *_impl_.event_.f2fs_get_data_block_
      : reinterpret_cast<::perfetto::protos::F2fsGetDataBlockFtraceEvent&>(::perfetto::protos::_F2fsGetDataBlockFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsGetDataBlockFtraceEvent& FtraceEvent::f2fs_get_data_block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  return _internal_f2fs_get_data_block();
}
inline ::perfetto::protos::F2fsGetDataBlockFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_get_data_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  if (event_case() == kF2FsGetDataBlock) {
    clear_has_event();
    ::perfetto::protos::F2fsGetDataBlockFtraceEvent* temp = _impl_.event_.f2fs_get_data_block_;
    _impl_.event_.f2fs_get_data_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_get_data_block(::perfetto::protos::F2fsGetDataBlockFtraceEvent* f2fs_get_data_block) {
  clear_event();
  if (f2fs_get_data_block) {
    set_has_f2fs_get_data_block();
    _impl_.event_.f2fs_get_data_block_ = f2fs_get_data_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_get_data_block)
}
inline ::perfetto::protos::F2fsGetDataBlockFtraceEvent* FtraceEvent::_internal_mutable_f2fs_get_data_block() {
  if (event_case() != kF2FsGetDataBlock) {
    clear_event();
    set_has_f2fs_get_data_block();
    _impl_.event_.f2fs_get_data_block_ = CreateMaybeMessage< ::perfetto::protos::F2fsGetDataBlockFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_get_data_block_;
}
inline ::perfetto::protos::F2fsGetDataBlockFtraceEvent* FtraceEvent::mutable_f2fs_get_data_block() {
  ::perfetto::protos::F2fsGetDataBlockFtraceEvent* _msg = _internal_mutable_f2fs_get_data_block();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_get_data_block)
  return _msg;
}

// .perfetto.protos.F2fsGetVictimFtraceEvent f2fs_get_victim = 247;
inline bool FtraceEvent::has_f2fs_get_victim() const {
  return event_case() == kF2FsGetVictim;
}
inline bool FtraceEvent::_internal_has_f2fs_get_victim() const {
  return event_case() == kF2FsGetVictim;
}
inline void FtraceEvent::set_has_f2fs_get_victim() {
  _impl_._oneof_case_[0] = kF2FsGetVictim;
}
inline ::perfetto::protos::F2fsGetVictimFtraceEvent* FtraceEvent::release_f2fs_get_victim() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_get_victim)
  if (event_case() == kF2FsGetVictim) {
    clear_has_event();
    ::perfetto::protos::F2fsGetVictimFtraceEvent* temp = _impl_.event_.f2fs_get_victim_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_get_victim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsGetVictimFtraceEvent& FtraceEvent::_internal_f2fs_get_victim() const {
  return event_case() == kF2FsGetVictim
      ? *_impl_.event_.f2fs_get_victim_
      : reinterpret_cast<::perfetto::protos::F2fsGetVictimFtraceEvent&>(::perfetto::protos::_F2fsGetVictimFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsGetVictimFtraceEvent& FtraceEvent::f2fs_get_victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_get_victim)
  return _internal_f2fs_get_victim();
}
inline ::perfetto::protos::F2fsGetVictimFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_get_victim() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_get_victim)
  if (event_case() == kF2FsGetVictim) {
    clear_has_event();
    ::perfetto::protos::F2fsGetVictimFtraceEvent* temp = _impl_.event_.f2fs_get_victim_;
    _impl_.event_.f2fs_get_victim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_get_victim(::perfetto::protos::F2fsGetVictimFtraceEvent* f2fs_get_victim) {
  clear_event();
  if (f2fs_get_victim) {
    set_has_f2fs_get_victim();
    _impl_.event_.f2fs_get_victim_ = f2fs_get_victim;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_get_victim)
}
inline ::perfetto::protos::F2fsGetVictimFtraceEvent* FtraceEvent::_internal_mutable_f2fs_get_victim() {
  if (event_case() != kF2FsGetVictim) {
    clear_event();
    set_has_f2fs_get_victim();
    _impl_.event_.f2fs_get_victim_ = CreateMaybeMessage< ::perfetto::protos::F2fsGetVictimFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_get_victim_;
}
inline ::perfetto::protos::F2fsGetVictimFtraceEvent* FtraceEvent::mutable_f2fs_get_victim() {
  ::perfetto::protos::F2fsGetVictimFtraceEvent* _msg = _internal_mutable_f2fs_get_victim();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_get_victim)
  return _msg;
}

// .perfetto.protos.F2fsIgetFtraceEvent f2fs_iget = 248;
inline bool FtraceEvent::has_f2fs_iget() const {
  return event_case() == kF2FsIget;
}
inline bool FtraceEvent::_internal_has_f2fs_iget() const {
  return event_case() == kF2FsIget;
}
inline void FtraceEvent::set_has_f2fs_iget() {
  _impl_._oneof_case_[0] = kF2FsIget;
}
inline ::perfetto::protos::F2fsIgetFtraceEvent* FtraceEvent::release_f2fs_iget() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_iget)
  if (event_case() == kF2FsIget) {
    clear_has_event();
    ::perfetto::protos::F2fsIgetFtraceEvent* temp = _impl_.event_.f2fs_iget_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_iget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsIgetFtraceEvent& FtraceEvent::_internal_f2fs_iget() const {
  return event_case() == kF2FsIget
      ? *_impl_.event_.f2fs_iget_
      : reinterpret_cast<::perfetto::protos::F2fsIgetFtraceEvent&>(::perfetto::protos::_F2fsIgetFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsIgetFtraceEvent& FtraceEvent::f2fs_iget() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_iget)
  return _internal_f2fs_iget();
}
inline ::perfetto::protos::F2fsIgetFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_iget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_iget)
  if (event_case() == kF2FsIget) {
    clear_has_event();
    ::perfetto::protos::F2fsIgetFtraceEvent* temp = _impl_.event_.f2fs_iget_;
    _impl_.event_.f2fs_iget_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_iget(::perfetto::protos::F2fsIgetFtraceEvent* f2fs_iget) {
  clear_event();
  if (f2fs_iget) {
    set_has_f2fs_iget();
    _impl_.event_.f2fs_iget_ = f2fs_iget;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_iget)
}
inline ::perfetto::protos::F2fsIgetFtraceEvent* FtraceEvent::_internal_mutable_f2fs_iget() {
  if (event_case() != kF2FsIget) {
    clear_event();
    set_has_f2fs_iget();
    _impl_.event_.f2fs_iget_ = CreateMaybeMessage< ::perfetto::protos::F2fsIgetFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_iget_;
}
inline ::perfetto::protos::F2fsIgetFtraceEvent* FtraceEvent::mutable_f2fs_iget() {
  ::perfetto::protos::F2fsIgetFtraceEvent* _msg = _internal_mutable_f2fs_iget();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_iget)
  return _msg;
}

// .perfetto.protos.F2fsIgetExitFtraceEvent f2fs_iget_exit = 249;
inline bool FtraceEvent::has_f2fs_iget_exit() const {
  return event_case() == kF2FsIgetExit;
}
inline bool FtraceEvent::_internal_has_f2fs_iget_exit() const {
  return event_case() == kF2FsIgetExit;
}
inline void FtraceEvent::set_has_f2fs_iget_exit() {
  _impl_._oneof_case_[0] = kF2FsIgetExit;
}
inline ::perfetto::protos::F2fsIgetExitFtraceEvent* FtraceEvent::release_f2fs_iget_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  if (event_case() == kF2FsIgetExit) {
    clear_has_event();
    ::perfetto::protos::F2fsIgetExitFtraceEvent* temp = _impl_.event_.f2fs_iget_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_iget_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsIgetExitFtraceEvent& FtraceEvent::_internal_f2fs_iget_exit() const {
  return event_case() == kF2FsIgetExit
      ? *_impl_.event_.f2fs_iget_exit_
      : reinterpret_cast<::perfetto::protos::F2fsIgetExitFtraceEvent&>(::perfetto::protos::_F2fsIgetExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsIgetExitFtraceEvent& FtraceEvent::f2fs_iget_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  return _internal_f2fs_iget_exit();
}
inline ::perfetto::protos::F2fsIgetExitFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_iget_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  if (event_case() == kF2FsIgetExit) {
    clear_has_event();
    ::perfetto::protos::F2fsIgetExitFtraceEvent* temp = _impl_.event_.f2fs_iget_exit_;
    _impl_.event_.f2fs_iget_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_iget_exit(::perfetto::protos::F2fsIgetExitFtraceEvent* f2fs_iget_exit) {
  clear_event();
  if (f2fs_iget_exit) {
    set_has_f2fs_iget_exit();
    _impl_.event_.f2fs_iget_exit_ = f2fs_iget_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_iget_exit)
}
inline ::perfetto::protos::F2fsIgetExitFtraceEvent* FtraceEvent::_internal_mutable_f2fs_iget_exit() {
  if (event_case() != kF2FsIgetExit) {
    clear_event();
    set_has_f2fs_iget_exit();
    _impl_.event_.f2fs_iget_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsIgetExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_iget_exit_;
}
inline ::perfetto::protos::F2fsIgetExitFtraceEvent* FtraceEvent::mutable_f2fs_iget_exit() {
  ::perfetto::protos::F2fsIgetExitFtraceEvent* _msg = _internal_mutable_f2fs_iget_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_iget_exit)
  return _msg;
}

// .perfetto.protos.F2fsNewInodeFtraceEvent f2fs_new_inode = 250;
inline bool FtraceEvent::has_f2fs_new_inode() const {
  return event_case() == kF2FsNewInode;
}
inline bool FtraceEvent::_internal_has_f2fs_new_inode() const {
  return event_case() == kF2FsNewInode;
}
inline void FtraceEvent::set_has_f2fs_new_inode() {
  _impl_._oneof_case_[0] = kF2FsNewInode;
}
inline ::perfetto::protos::F2fsNewInodeFtraceEvent* FtraceEvent::release_f2fs_new_inode() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_new_inode)
  if (event_case() == kF2FsNewInode) {
    clear_has_event();
    ::perfetto::protos::F2fsNewInodeFtraceEvent* temp = _impl_.event_.f2fs_new_inode_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_new_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsNewInodeFtraceEvent& FtraceEvent::_internal_f2fs_new_inode() const {
  return event_case() == kF2FsNewInode
      ? *_impl_.event_.f2fs_new_inode_
      : reinterpret_cast<::perfetto::protos::F2fsNewInodeFtraceEvent&>(::perfetto::protos::_F2fsNewInodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsNewInodeFtraceEvent& FtraceEvent::f2fs_new_inode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_new_inode)
  return _internal_f2fs_new_inode();
}
inline ::perfetto::protos::F2fsNewInodeFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_new_inode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_new_inode)
  if (event_case() == kF2FsNewInode) {
    clear_has_event();
    ::perfetto::protos::F2fsNewInodeFtraceEvent* temp = _impl_.event_.f2fs_new_inode_;
    _impl_.event_.f2fs_new_inode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_new_inode(::perfetto::protos::F2fsNewInodeFtraceEvent* f2fs_new_inode) {
  clear_event();
  if (f2fs_new_inode) {
    set_has_f2fs_new_inode();
    _impl_.event_.f2fs_new_inode_ = f2fs_new_inode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_new_inode)
}
inline ::perfetto::protos::F2fsNewInodeFtraceEvent* FtraceEvent::_internal_mutable_f2fs_new_inode() {
  if (event_case() != kF2FsNewInode) {
    clear_event();
    set_has_f2fs_new_inode();
    _impl_.event_.f2fs_new_inode_ = CreateMaybeMessage< ::perfetto::protos::F2fsNewInodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_new_inode_;
}
inline ::perfetto::protos::F2fsNewInodeFtraceEvent* FtraceEvent::mutable_f2fs_new_inode() {
  ::perfetto::protos::F2fsNewInodeFtraceEvent* _msg = _internal_mutable_f2fs_new_inode();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_new_inode)
  return _msg;
}

// .perfetto.protos.F2fsReadpageFtraceEvent f2fs_readpage = 251;
inline bool FtraceEvent::has_f2fs_readpage() const {
  return event_case() == kF2FsReadpage;
}
inline bool FtraceEvent::_internal_has_f2fs_readpage() const {
  return event_case() == kF2FsReadpage;
}
inline void FtraceEvent::set_has_f2fs_readpage() {
  _impl_._oneof_case_[0] = kF2FsReadpage;
}
inline ::perfetto::protos::F2fsReadpageFtraceEvent* FtraceEvent::release_f2fs_readpage() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_readpage)
  if (event_case() == kF2FsReadpage) {
    clear_has_event();
    ::perfetto::protos::F2fsReadpageFtraceEvent* temp = _impl_.event_.f2fs_readpage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_readpage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsReadpageFtraceEvent& FtraceEvent::_internal_f2fs_readpage() const {
  return event_case() == kF2FsReadpage
      ? *_impl_.event_.f2fs_readpage_
      : reinterpret_cast<::perfetto::protos::F2fsReadpageFtraceEvent&>(::perfetto::protos::_F2fsReadpageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsReadpageFtraceEvent& FtraceEvent::f2fs_readpage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_readpage)
  return _internal_f2fs_readpage();
}
inline ::perfetto::protos::F2fsReadpageFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_readpage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_readpage)
  if (event_case() == kF2FsReadpage) {
    clear_has_event();
    ::perfetto::protos::F2fsReadpageFtraceEvent* temp = _impl_.event_.f2fs_readpage_;
    _impl_.event_.f2fs_readpage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_readpage(::perfetto::protos::F2fsReadpageFtraceEvent* f2fs_readpage) {
  clear_event();
  if (f2fs_readpage) {
    set_has_f2fs_readpage();
    _impl_.event_.f2fs_readpage_ = f2fs_readpage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_readpage)
}
inline ::perfetto::protos::F2fsReadpageFtraceEvent* FtraceEvent::_internal_mutable_f2fs_readpage() {
  if (event_case() != kF2FsReadpage) {
    clear_event();
    set_has_f2fs_readpage();
    _impl_.event_.f2fs_readpage_ = CreateMaybeMessage< ::perfetto::protos::F2fsReadpageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_readpage_;
}
inline ::perfetto::protos::F2fsReadpageFtraceEvent* FtraceEvent::mutable_f2fs_readpage() {
  ::perfetto::protos::F2fsReadpageFtraceEvent* _msg = _internal_mutable_f2fs_readpage();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_readpage)
  return _msg;
}

// .perfetto.protos.F2fsReserveNewBlockFtraceEvent f2fs_reserve_new_block = 252;
inline bool FtraceEvent::has_f2fs_reserve_new_block() const {
  return event_case() == kF2FsReserveNewBlock;
}
inline bool FtraceEvent::_internal_has_f2fs_reserve_new_block() const {
  return event_case() == kF2FsReserveNewBlock;
}
inline void FtraceEvent::set_has_f2fs_reserve_new_block() {
  _impl_._oneof_case_[0] = kF2FsReserveNewBlock;
}
inline ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* FtraceEvent::release_f2fs_reserve_new_block() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  if (event_case() == kF2FsReserveNewBlock) {
    clear_has_event();
    ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* temp = _impl_.event_.f2fs_reserve_new_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_reserve_new_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& FtraceEvent::_internal_f2fs_reserve_new_block() const {
  return event_case() == kF2FsReserveNewBlock
      ? *_impl_.event_.f2fs_reserve_new_block_
      : reinterpret_cast<::perfetto::protos::F2fsReserveNewBlockFtraceEvent&>(::perfetto::protos::_F2fsReserveNewBlockFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsReserveNewBlockFtraceEvent& FtraceEvent::f2fs_reserve_new_block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  return _internal_f2fs_reserve_new_block();
}
inline ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_reserve_new_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  if (event_case() == kF2FsReserveNewBlock) {
    clear_has_event();
    ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* temp = _impl_.event_.f2fs_reserve_new_block_;
    _impl_.event_.f2fs_reserve_new_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_reserve_new_block(::perfetto::protos::F2fsReserveNewBlockFtraceEvent* f2fs_reserve_new_block) {
  clear_event();
  if (f2fs_reserve_new_block) {
    set_has_f2fs_reserve_new_block();
    _impl_.event_.f2fs_reserve_new_block_ = f2fs_reserve_new_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
}
inline ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* FtraceEvent::_internal_mutable_f2fs_reserve_new_block() {
  if (event_case() != kF2FsReserveNewBlock) {
    clear_event();
    set_has_f2fs_reserve_new_block();
    _impl_.event_.f2fs_reserve_new_block_ = CreateMaybeMessage< ::perfetto::protos::F2fsReserveNewBlockFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_reserve_new_block_;
}
inline ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* FtraceEvent::mutable_f2fs_reserve_new_block() {
  ::perfetto::protos::F2fsReserveNewBlockFtraceEvent* _msg = _internal_mutable_f2fs_reserve_new_block();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_reserve_new_block)
  return _msg;
}

// .perfetto.protos.F2fsSetPageDirtyFtraceEvent f2fs_set_page_dirty = 253;
inline bool FtraceEvent::has_f2fs_set_page_dirty() const {
  return event_case() == kF2FsSetPageDirty;
}
inline bool FtraceEvent::_internal_has_f2fs_set_page_dirty() const {
  return event_case() == kF2FsSetPageDirty;
}
inline void FtraceEvent::set_has_f2fs_set_page_dirty() {
  _impl_._oneof_case_[0] = kF2FsSetPageDirty;
}
inline ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* FtraceEvent::release_f2fs_set_page_dirty() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  if (event_case() == kF2FsSetPageDirty) {
    clear_has_event();
    ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* temp = _impl_.event_.f2fs_set_page_dirty_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_set_page_dirty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& FtraceEvent::_internal_f2fs_set_page_dirty() const {
  return event_case() == kF2FsSetPageDirty
      ? *_impl_.event_.f2fs_set_page_dirty_
      : reinterpret_cast<::perfetto::protos::F2fsSetPageDirtyFtraceEvent&>(::perfetto::protos::_F2fsSetPageDirtyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsSetPageDirtyFtraceEvent& FtraceEvent::f2fs_set_page_dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  return _internal_f2fs_set_page_dirty();
}
inline ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_set_page_dirty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  if (event_case() == kF2FsSetPageDirty) {
    clear_has_event();
    ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* temp = _impl_.event_.f2fs_set_page_dirty_;
    _impl_.event_.f2fs_set_page_dirty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_set_page_dirty(::perfetto::protos::F2fsSetPageDirtyFtraceEvent* f2fs_set_page_dirty) {
  clear_event();
  if (f2fs_set_page_dirty) {
    set_has_f2fs_set_page_dirty();
    _impl_.event_.f2fs_set_page_dirty_ = f2fs_set_page_dirty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
}
inline ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* FtraceEvent::_internal_mutable_f2fs_set_page_dirty() {
  if (event_case() != kF2FsSetPageDirty) {
    clear_event();
    set_has_f2fs_set_page_dirty();
    _impl_.event_.f2fs_set_page_dirty_ = CreateMaybeMessage< ::perfetto::protos::F2fsSetPageDirtyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_set_page_dirty_;
}
inline ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* FtraceEvent::mutable_f2fs_set_page_dirty() {
  ::perfetto::protos::F2fsSetPageDirtyFtraceEvent* _msg = _internal_mutable_f2fs_set_page_dirty();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_set_page_dirty)
  return _msg;
}

// .perfetto.protos.F2fsSubmitWritePageFtraceEvent f2fs_submit_write_page = 254;
inline bool FtraceEvent::has_f2fs_submit_write_page() const {
  return event_case() == kF2FsSubmitWritePage;
}
inline bool FtraceEvent::_internal_has_f2fs_submit_write_page() const {
  return event_case() == kF2FsSubmitWritePage;
}
inline void FtraceEvent::set_has_f2fs_submit_write_page() {
  _impl_._oneof_case_[0] = kF2FsSubmitWritePage;
}
inline ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* FtraceEvent::release_f2fs_submit_write_page() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  if (event_case() == kF2FsSubmitWritePage) {
    clear_has_event();
    ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* temp = _impl_.event_.f2fs_submit_write_page_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_submit_write_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& FtraceEvent::_internal_f2fs_submit_write_page() const {
  return event_case() == kF2FsSubmitWritePage
      ? *_impl_.event_.f2fs_submit_write_page_
      : reinterpret_cast<::perfetto::protos::F2fsSubmitWritePageFtraceEvent&>(::perfetto::protos::_F2fsSubmitWritePageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsSubmitWritePageFtraceEvent& FtraceEvent::f2fs_submit_write_page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  return _internal_f2fs_submit_write_page();
}
inline ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_submit_write_page() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  if (event_case() == kF2FsSubmitWritePage) {
    clear_has_event();
    ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* temp = _impl_.event_.f2fs_submit_write_page_;
    _impl_.event_.f2fs_submit_write_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_submit_write_page(::perfetto::protos::F2fsSubmitWritePageFtraceEvent* f2fs_submit_write_page) {
  clear_event();
  if (f2fs_submit_write_page) {
    set_has_f2fs_submit_write_page();
    _impl_.event_.f2fs_submit_write_page_ = f2fs_submit_write_page;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
}
inline ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* FtraceEvent::_internal_mutable_f2fs_submit_write_page() {
  if (event_case() != kF2FsSubmitWritePage) {
    clear_event();
    set_has_f2fs_submit_write_page();
    _impl_.event_.f2fs_submit_write_page_ = CreateMaybeMessage< ::perfetto::protos::F2fsSubmitWritePageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_submit_write_page_;
}
inline ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* FtraceEvent::mutable_f2fs_submit_write_page() {
  ::perfetto::protos::F2fsSubmitWritePageFtraceEvent* _msg = _internal_mutable_f2fs_submit_write_page();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_submit_write_page)
  return _msg;
}

// .perfetto.protos.F2fsSyncFileEnterFtraceEvent f2fs_sync_file_enter = 255;
inline bool FtraceEvent::has_f2fs_sync_file_enter() const {
  return event_case() == kF2FsSyncFileEnter;
}
inline bool FtraceEvent::_internal_has_f2fs_sync_file_enter() const {
  return event_case() == kF2FsSyncFileEnter;
}
inline void FtraceEvent::set_has_f2fs_sync_file_enter() {
  _impl_._oneof_case_[0] = kF2FsSyncFileEnter;
}
inline ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* FtraceEvent::release_f2fs_sync_file_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  if (event_case() == kF2FsSyncFileEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* temp = _impl_.event_.f2fs_sync_file_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_sync_file_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& FtraceEvent::_internal_f2fs_sync_file_enter() const {
  return event_case() == kF2FsSyncFileEnter
      ? *_impl_.event_.f2fs_sync_file_enter_
      : reinterpret_cast<::perfetto::protos::F2fsSyncFileEnterFtraceEvent&>(::perfetto::protos::_F2fsSyncFileEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsSyncFileEnterFtraceEvent& FtraceEvent::f2fs_sync_file_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  return _internal_f2fs_sync_file_enter();
}
inline ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_sync_file_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  if (event_case() == kF2FsSyncFileEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* temp = _impl_.event_.f2fs_sync_file_enter_;
    _impl_.event_.f2fs_sync_file_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_sync_file_enter(::perfetto::protos::F2fsSyncFileEnterFtraceEvent* f2fs_sync_file_enter) {
  clear_event();
  if (f2fs_sync_file_enter) {
    set_has_f2fs_sync_file_enter();
    _impl_.event_.f2fs_sync_file_enter_ = f2fs_sync_file_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
}
inline ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* FtraceEvent::_internal_mutable_f2fs_sync_file_enter() {
  if (event_case() != kF2FsSyncFileEnter) {
    clear_event();
    set_has_f2fs_sync_file_enter();
    _impl_.event_.f2fs_sync_file_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsSyncFileEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_sync_file_enter_;
}
inline ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* FtraceEvent::mutable_f2fs_sync_file_enter() {
  ::perfetto::protos::F2fsSyncFileEnterFtraceEvent* _msg = _internal_mutable_f2fs_sync_file_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_sync_file_enter)
  return _msg;
}

// .perfetto.protos.F2fsSyncFileExitFtraceEvent f2fs_sync_file_exit = 256;
inline bool FtraceEvent::has_f2fs_sync_file_exit() const {
  return event_case() == kF2FsSyncFileExit;
}
inline bool FtraceEvent::_internal_has_f2fs_sync_file_exit() const {
  return event_case() == kF2FsSyncFileExit;
}
inline void FtraceEvent::set_has_f2fs_sync_file_exit() {
  _impl_._oneof_case_[0] = kF2FsSyncFileExit;
}
inline ::perfetto::protos::F2fsSyncFileExitFtraceEvent* FtraceEvent::release_f2fs_sync_file_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  if (event_case() == kF2FsSyncFileExit) {
    clear_has_event();
    ::perfetto::protos::F2fsSyncFileExitFtraceEvent* temp = _impl_.event_.f2fs_sync_file_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_sync_file_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& FtraceEvent::_internal_f2fs_sync_file_exit() const {
  return event_case() == kF2FsSyncFileExit
      ? *_impl_.event_.f2fs_sync_file_exit_
      : reinterpret_cast<::perfetto::protos::F2fsSyncFileExitFtraceEvent&>(::perfetto::protos::_F2fsSyncFileExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsSyncFileExitFtraceEvent& FtraceEvent::f2fs_sync_file_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  return _internal_f2fs_sync_file_exit();
}
inline ::perfetto::protos::F2fsSyncFileExitFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_sync_file_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  if (event_case() == kF2FsSyncFileExit) {
    clear_has_event();
    ::perfetto::protos::F2fsSyncFileExitFtraceEvent* temp = _impl_.event_.f2fs_sync_file_exit_;
    _impl_.event_.f2fs_sync_file_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_sync_file_exit(::perfetto::protos::F2fsSyncFileExitFtraceEvent* f2fs_sync_file_exit) {
  clear_event();
  if (f2fs_sync_file_exit) {
    set_has_f2fs_sync_file_exit();
    _impl_.event_.f2fs_sync_file_exit_ = f2fs_sync_file_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
}
inline ::perfetto::protos::F2fsSyncFileExitFtraceEvent* FtraceEvent::_internal_mutable_f2fs_sync_file_exit() {
  if (event_case() != kF2FsSyncFileExit) {
    clear_event();
    set_has_f2fs_sync_file_exit();
    _impl_.event_.f2fs_sync_file_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsSyncFileExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_sync_file_exit_;
}
inline ::perfetto::protos::F2fsSyncFileExitFtraceEvent* FtraceEvent::mutable_f2fs_sync_file_exit() {
  ::perfetto::protos::F2fsSyncFileExitFtraceEvent* _msg = _internal_mutable_f2fs_sync_file_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_sync_file_exit)
  return _msg;
}

// .perfetto.protos.F2fsSyncFsFtraceEvent f2fs_sync_fs = 257;
inline bool FtraceEvent::has_f2fs_sync_fs() const {
  return event_case() == kF2FsSyncFs;
}
inline bool FtraceEvent::_internal_has_f2fs_sync_fs() const {
  return event_case() == kF2FsSyncFs;
}
inline void FtraceEvent::set_has_f2fs_sync_fs() {
  _impl_._oneof_case_[0] = kF2FsSyncFs;
}
inline ::perfetto::protos::F2fsSyncFsFtraceEvent* FtraceEvent::release_f2fs_sync_fs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  if (event_case() == kF2FsSyncFs) {
    clear_has_event();
    ::perfetto::protos::F2fsSyncFsFtraceEvent* temp = _impl_.event_.f2fs_sync_fs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_sync_fs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsSyncFsFtraceEvent& FtraceEvent::_internal_f2fs_sync_fs() const {
  return event_case() == kF2FsSyncFs
      ? *_impl_.event_.f2fs_sync_fs_
      : reinterpret_cast<::perfetto::protos::F2fsSyncFsFtraceEvent&>(::perfetto::protos::_F2fsSyncFsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsSyncFsFtraceEvent& FtraceEvent::f2fs_sync_fs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  return _internal_f2fs_sync_fs();
}
inline ::perfetto::protos::F2fsSyncFsFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_sync_fs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  if (event_case() == kF2FsSyncFs) {
    clear_has_event();
    ::perfetto::protos::F2fsSyncFsFtraceEvent* temp = _impl_.event_.f2fs_sync_fs_;
    _impl_.event_.f2fs_sync_fs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_sync_fs(::perfetto::protos::F2fsSyncFsFtraceEvent* f2fs_sync_fs) {
  clear_event();
  if (f2fs_sync_fs) {
    set_has_f2fs_sync_fs();
    _impl_.event_.f2fs_sync_fs_ = f2fs_sync_fs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_sync_fs)
}
inline ::perfetto::protos::F2fsSyncFsFtraceEvent* FtraceEvent::_internal_mutable_f2fs_sync_fs() {
  if (event_case() != kF2FsSyncFs) {
    clear_event();
    set_has_f2fs_sync_fs();
    _impl_.event_.f2fs_sync_fs_ = CreateMaybeMessage< ::perfetto::protos::F2fsSyncFsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_sync_fs_;
}
inline ::perfetto::protos::F2fsSyncFsFtraceEvent* FtraceEvent::mutable_f2fs_sync_fs() {
  ::perfetto::protos::F2fsSyncFsFtraceEvent* _msg = _internal_mutable_f2fs_sync_fs();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_sync_fs)
  return _msg;
}

// .perfetto.protos.F2fsTruncateFtraceEvent f2fs_truncate = 258;
inline bool FtraceEvent::has_f2fs_truncate() const {
  return event_case() == kF2FsTruncate;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate() const {
  return event_case() == kF2FsTruncate;
}
inline void FtraceEvent::set_has_f2fs_truncate() {
  _impl_._oneof_case_[0] = kF2FsTruncate;
}
inline ::perfetto::protos::F2fsTruncateFtraceEvent* FtraceEvent::release_f2fs_truncate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate)
  if (event_case() == kF2FsTruncate) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateFtraceEvent* temp = _impl_.event_.f2fs_truncate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateFtraceEvent& FtraceEvent::_internal_f2fs_truncate() const {
  return event_case() == kF2FsTruncate
      ? *_impl_.event_.f2fs_truncate_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateFtraceEvent&>(::perfetto::protos::_F2fsTruncateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateFtraceEvent& FtraceEvent::f2fs_truncate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate)
  return _internal_f2fs_truncate();
}
inline ::perfetto::protos::F2fsTruncateFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate)
  if (event_case() == kF2FsTruncate) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateFtraceEvent* temp = _impl_.event_.f2fs_truncate_;
    _impl_.event_.f2fs_truncate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate(::perfetto::protos::F2fsTruncateFtraceEvent* f2fs_truncate) {
  clear_event();
  if (f2fs_truncate) {
    set_has_f2fs_truncate();
    _impl_.event_.f2fs_truncate_ = f2fs_truncate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate)
}
inline ::perfetto::protos::F2fsTruncateFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate() {
  if (event_case() != kF2FsTruncate) {
    clear_event();
    set_has_f2fs_truncate();
    _impl_.event_.f2fs_truncate_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_;
}
inline ::perfetto::protos::F2fsTruncateFtraceEvent* FtraceEvent::mutable_f2fs_truncate() {
  ::perfetto::protos::F2fsTruncateFtraceEvent* _msg = _internal_mutable_f2fs_truncate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate)
  return _msg;
}

// .perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent f2fs_truncate_blocks_enter = 259;
inline bool FtraceEvent::has_f2fs_truncate_blocks_enter() const {
  return event_case() == kF2FsTruncateBlocksEnter;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_blocks_enter() const {
  return event_case() == kF2FsTruncateBlocksEnter;
}
inline void FtraceEvent::set_has_f2fs_truncate_blocks_enter() {
  _impl_._oneof_case_[0] = kF2FsTruncateBlocksEnter;
}
inline ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::release_f2fs_truncate_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  if (event_case() == kF2FsTruncateBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* temp = _impl_.event_.f2fs_truncate_blocks_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& FtraceEvent::_internal_f2fs_truncate_blocks_enter() const {
  return event_case() == kF2FsTruncateBlocksEnter
      ? *_impl_.event_.f2fs_truncate_blocks_enter_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent&>(::perfetto::protos::_F2fsTruncateBlocksEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent& FtraceEvent::f2fs_truncate_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  return _internal_f2fs_truncate_blocks_enter();
}
inline ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_blocks_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  if (event_case() == kF2FsTruncateBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* temp = _impl_.event_.f2fs_truncate_blocks_enter_;
    _impl_.event_.f2fs_truncate_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_blocks_enter(::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* f2fs_truncate_blocks_enter) {
  clear_event();
  if (f2fs_truncate_blocks_enter) {
    set_has_f2fs_truncate_blocks_enter();
    _impl_.event_.f2fs_truncate_blocks_enter_ = f2fs_truncate_blocks_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
}
inline ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_blocks_enter() {
  if (event_case() != kF2FsTruncateBlocksEnter) {
    clear_event();
    set_has_f2fs_truncate_blocks_enter();
    _impl_.event_.f2fs_truncate_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_blocks_enter_;
}
inline ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* FtraceEvent::mutable_f2fs_truncate_blocks_enter() {
  ::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* _msg = _internal_mutable_f2fs_truncate_blocks_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter)
  return _msg;
}

// .perfetto.protos.F2fsTruncateBlocksExitFtraceEvent f2fs_truncate_blocks_exit = 260;
inline bool FtraceEvent::has_f2fs_truncate_blocks_exit() const {
  return event_case() == kF2FsTruncateBlocksExit;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_blocks_exit() const {
  return event_case() == kF2FsTruncateBlocksExit;
}
inline void FtraceEvent::set_has_f2fs_truncate_blocks_exit() {
  _impl_._oneof_case_[0] = kF2FsTruncateBlocksExit;
}
inline ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::release_f2fs_truncate_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  if (event_case() == kF2FsTruncateBlocksExit) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* temp = _impl_.event_.f2fs_truncate_blocks_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& FtraceEvent::_internal_f2fs_truncate_blocks_exit() const {
  return event_case() == kF2FsTruncateBlocksExit
      ? *_impl_.event_.f2fs_truncate_blocks_exit_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent&>(::perfetto::protos::_F2fsTruncateBlocksExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent& FtraceEvent::f2fs_truncate_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  return _internal_f2fs_truncate_blocks_exit();
}
inline ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_blocks_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  if (event_case() == kF2FsTruncateBlocksExit) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* temp = _impl_.event_.f2fs_truncate_blocks_exit_;
    _impl_.event_.f2fs_truncate_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_blocks_exit(::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* f2fs_truncate_blocks_exit) {
  clear_event();
  if (f2fs_truncate_blocks_exit) {
    set_has_f2fs_truncate_blocks_exit();
    _impl_.event_.f2fs_truncate_blocks_exit_ = f2fs_truncate_blocks_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
}
inline ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_blocks_exit() {
  if (event_case() != kF2FsTruncateBlocksExit) {
    clear_event();
    set_has_f2fs_truncate_blocks_exit();
    _impl_.event_.f2fs_truncate_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_blocks_exit_;
}
inline ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* FtraceEvent::mutable_f2fs_truncate_blocks_exit() {
  ::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* _msg = _internal_mutable_f2fs_truncate_blocks_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit)
  return _msg;
}

// .perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent f2fs_truncate_data_blocks_range = 261;
inline bool FtraceEvent::has_f2fs_truncate_data_blocks_range() const {
  return event_case() == kF2FsTruncateDataBlocksRange;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_data_blocks_range() const {
  return event_case() == kF2FsTruncateDataBlocksRange;
}
inline void FtraceEvent::set_has_f2fs_truncate_data_blocks_range() {
  _impl_._oneof_case_[0] = kF2FsTruncateDataBlocksRange;
}
inline ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::release_f2fs_truncate_data_blocks_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  if (event_case() == kF2FsTruncateDataBlocksRange) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* temp = _impl_.event_.f2fs_truncate_data_blocks_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_data_blocks_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& FtraceEvent::_internal_f2fs_truncate_data_blocks_range() const {
  return event_case() == kF2FsTruncateDataBlocksRange
      ? *_impl_.event_.f2fs_truncate_data_blocks_range_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent&>(::perfetto::protos::_F2fsTruncateDataBlocksRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent& FtraceEvent::f2fs_truncate_data_blocks_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  return _internal_f2fs_truncate_data_blocks_range();
}
inline ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_data_blocks_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  if (event_case() == kF2FsTruncateDataBlocksRange) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* temp = _impl_.event_.f2fs_truncate_data_blocks_range_;
    _impl_.event_.f2fs_truncate_data_blocks_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_data_blocks_range(::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* f2fs_truncate_data_blocks_range) {
  clear_event();
  if (f2fs_truncate_data_blocks_range) {
    set_has_f2fs_truncate_data_blocks_range();
    _impl_.event_.f2fs_truncate_data_blocks_range_ = f2fs_truncate_data_blocks_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
}
inline ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_data_blocks_range() {
  if (event_case() != kF2FsTruncateDataBlocksRange) {
    clear_event();
    set_has_f2fs_truncate_data_blocks_range();
    _impl_.event_.f2fs_truncate_data_blocks_range_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_data_blocks_range_;
}
inline ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* FtraceEvent::mutable_f2fs_truncate_data_blocks_range() {
  ::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* _msg = _internal_mutable_f2fs_truncate_data_blocks_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range)
  return _msg;
}

// .perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent f2fs_truncate_inode_blocks_enter = 262;
inline bool FtraceEvent::has_f2fs_truncate_inode_blocks_enter() const {
  return event_case() == kF2FsTruncateInodeBlocksEnter;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_inode_blocks_enter() const {
  return event_case() == kF2FsTruncateInodeBlocksEnter;
}
inline void FtraceEvent::set_has_f2fs_truncate_inode_blocks_enter() {
  _impl_._oneof_case_[0] = kF2FsTruncateInodeBlocksEnter;
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::release_f2fs_truncate_inode_blocks_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  if (event_case() == kF2FsTruncateInodeBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* temp = _impl_.event_.f2fs_truncate_inode_blocks_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_inode_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& FtraceEvent::_internal_f2fs_truncate_inode_blocks_enter() const {
  return event_case() == kF2FsTruncateInodeBlocksEnter
      ? *_impl_.event_.f2fs_truncate_inode_blocks_enter_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent&>(::perfetto::protos::_F2fsTruncateInodeBlocksEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent& FtraceEvent::f2fs_truncate_inode_blocks_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  return _internal_f2fs_truncate_inode_blocks_enter();
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_inode_blocks_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  if (event_case() == kF2FsTruncateInodeBlocksEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* temp = _impl_.event_.f2fs_truncate_inode_blocks_enter_;
    _impl_.event_.f2fs_truncate_inode_blocks_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_inode_blocks_enter(::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* f2fs_truncate_inode_blocks_enter) {
  clear_event();
  if (f2fs_truncate_inode_blocks_enter) {
    set_has_f2fs_truncate_inode_blocks_enter();
    _impl_.event_.f2fs_truncate_inode_blocks_enter_ = f2fs_truncate_inode_blocks_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_inode_blocks_enter() {
  if (event_case() != kF2FsTruncateInodeBlocksEnter) {
    clear_event();
    set_has_f2fs_truncate_inode_blocks_enter();
    _impl_.event_.f2fs_truncate_inode_blocks_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_inode_blocks_enter_;
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* FtraceEvent::mutable_f2fs_truncate_inode_blocks_enter() {
  ::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* _msg = _internal_mutable_f2fs_truncate_inode_blocks_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter)
  return _msg;
}

// .perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent f2fs_truncate_inode_blocks_exit = 263;
inline bool FtraceEvent::has_f2fs_truncate_inode_blocks_exit() const {
  return event_case() == kF2FsTruncateInodeBlocksExit;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_inode_blocks_exit() const {
  return event_case() == kF2FsTruncateInodeBlocksExit;
}
inline void FtraceEvent::set_has_f2fs_truncate_inode_blocks_exit() {
  _impl_._oneof_case_[0] = kF2FsTruncateInodeBlocksExit;
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::release_f2fs_truncate_inode_blocks_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  if (event_case() == kF2FsTruncateInodeBlocksExit) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* temp = _impl_.event_.f2fs_truncate_inode_blocks_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_inode_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& FtraceEvent::_internal_f2fs_truncate_inode_blocks_exit() const {
  return event_case() == kF2FsTruncateInodeBlocksExit
      ? *_impl_.event_.f2fs_truncate_inode_blocks_exit_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent&>(::perfetto::protos::_F2fsTruncateInodeBlocksExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent& FtraceEvent::f2fs_truncate_inode_blocks_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  return _internal_f2fs_truncate_inode_blocks_exit();
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_inode_blocks_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  if (event_case() == kF2FsTruncateInodeBlocksExit) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* temp = _impl_.event_.f2fs_truncate_inode_blocks_exit_;
    _impl_.event_.f2fs_truncate_inode_blocks_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_inode_blocks_exit(::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* f2fs_truncate_inode_blocks_exit) {
  clear_event();
  if (f2fs_truncate_inode_blocks_exit) {
    set_has_f2fs_truncate_inode_blocks_exit();
    _impl_.event_.f2fs_truncate_inode_blocks_exit_ = f2fs_truncate_inode_blocks_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_inode_blocks_exit() {
  if (event_case() != kF2FsTruncateInodeBlocksExit) {
    clear_event();
    set_has_f2fs_truncate_inode_blocks_exit();
    _impl_.event_.f2fs_truncate_inode_blocks_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_inode_blocks_exit_;
}
inline ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* FtraceEvent::mutable_f2fs_truncate_inode_blocks_exit() {
  ::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* _msg = _internal_mutable_f2fs_truncate_inode_blocks_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit)
  return _msg;
}

// .perfetto.protos.F2fsTruncateNodeFtraceEvent f2fs_truncate_node = 264;
inline bool FtraceEvent::has_f2fs_truncate_node() const {
  return event_case() == kF2FsTruncateNode;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_node() const {
  return event_case() == kF2FsTruncateNode;
}
inline void FtraceEvent::set_has_f2fs_truncate_node() {
  _impl_._oneof_case_[0] = kF2FsTruncateNode;
}
inline ::perfetto::protos::F2fsTruncateNodeFtraceEvent* FtraceEvent::release_f2fs_truncate_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  if (event_case() == kF2FsTruncateNode) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateNodeFtraceEvent* temp = _impl_.event_.f2fs_truncate_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& FtraceEvent::_internal_f2fs_truncate_node() const {
  return event_case() == kF2FsTruncateNode
      ? *_impl_.event_.f2fs_truncate_node_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateNodeFtraceEvent&>(::perfetto::protos::_F2fsTruncateNodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateNodeFtraceEvent& FtraceEvent::f2fs_truncate_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  return _internal_f2fs_truncate_node();
}
inline ::perfetto::protos::F2fsTruncateNodeFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  if (event_case() == kF2FsTruncateNode) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateNodeFtraceEvent* temp = _impl_.event_.f2fs_truncate_node_;
    _impl_.event_.f2fs_truncate_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_node(::perfetto::protos::F2fsTruncateNodeFtraceEvent* f2fs_truncate_node) {
  clear_event();
  if (f2fs_truncate_node) {
    set_has_f2fs_truncate_node();
    _impl_.event_.f2fs_truncate_node_ = f2fs_truncate_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_node)
}
inline ::perfetto::protos::F2fsTruncateNodeFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_node() {
  if (event_case() != kF2FsTruncateNode) {
    clear_event();
    set_has_f2fs_truncate_node();
    _impl_.event_.f2fs_truncate_node_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateNodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_node_;
}
inline ::perfetto::protos::F2fsTruncateNodeFtraceEvent* FtraceEvent::mutable_f2fs_truncate_node() {
  ::perfetto::protos::F2fsTruncateNodeFtraceEvent* _msg = _internal_mutable_f2fs_truncate_node();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_node)
  return _msg;
}

// .perfetto.protos.F2fsTruncateNodesEnterFtraceEvent f2fs_truncate_nodes_enter = 265;
inline bool FtraceEvent::has_f2fs_truncate_nodes_enter() const {
  return event_case() == kF2FsTruncateNodesEnter;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_nodes_enter() const {
  return event_case() == kF2FsTruncateNodesEnter;
}
inline void FtraceEvent::set_has_f2fs_truncate_nodes_enter() {
  _impl_._oneof_case_[0] = kF2FsTruncateNodesEnter;
}
inline ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::release_f2fs_truncate_nodes_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  if (event_case() == kF2FsTruncateNodesEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* temp = _impl_.event_.f2fs_truncate_nodes_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_nodes_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& FtraceEvent::_internal_f2fs_truncate_nodes_enter() const {
  return event_case() == kF2FsTruncateNodesEnter
      ? *_impl_.event_.f2fs_truncate_nodes_enter_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent&>(::perfetto::protos::_F2fsTruncateNodesEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent& FtraceEvent::f2fs_truncate_nodes_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  return _internal_f2fs_truncate_nodes_enter();
}
inline ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_nodes_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  if (event_case() == kF2FsTruncateNodesEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* temp = _impl_.event_.f2fs_truncate_nodes_enter_;
    _impl_.event_.f2fs_truncate_nodes_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_nodes_enter(::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* f2fs_truncate_nodes_enter) {
  clear_event();
  if (f2fs_truncate_nodes_enter) {
    set_has_f2fs_truncate_nodes_enter();
    _impl_.event_.f2fs_truncate_nodes_enter_ = f2fs_truncate_nodes_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
}
inline ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_nodes_enter() {
  if (event_case() != kF2FsTruncateNodesEnter) {
    clear_event();
    set_has_f2fs_truncate_nodes_enter();
    _impl_.event_.f2fs_truncate_nodes_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_nodes_enter_;
}
inline ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* FtraceEvent::mutable_f2fs_truncate_nodes_enter() {
  ::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* _msg = _internal_mutable_f2fs_truncate_nodes_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter)
  return _msg;
}

// .perfetto.protos.F2fsTruncateNodesExitFtraceEvent f2fs_truncate_nodes_exit = 266;
inline bool FtraceEvent::has_f2fs_truncate_nodes_exit() const {
  return event_case() == kF2FsTruncateNodesExit;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_nodes_exit() const {
  return event_case() == kF2FsTruncateNodesExit;
}
inline void FtraceEvent::set_has_f2fs_truncate_nodes_exit() {
  _impl_._oneof_case_[0] = kF2FsTruncateNodesExit;
}
inline ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* FtraceEvent::release_f2fs_truncate_nodes_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  if (event_case() == kF2FsTruncateNodesExit) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* temp = _impl_.event_.f2fs_truncate_nodes_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_nodes_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& FtraceEvent::_internal_f2fs_truncate_nodes_exit() const {
  return event_case() == kF2FsTruncateNodesExit
      ? *_impl_.event_.f2fs_truncate_nodes_exit_
      : reinterpret_cast<::perfetto::protos::F2fsTruncateNodesExitFtraceEvent&>(::perfetto::protos::_F2fsTruncateNodesExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent& FtraceEvent::f2fs_truncate_nodes_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  return _internal_f2fs_truncate_nodes_exit();
}
inline ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_nodes_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  if (event_case() == kF2FsTruncateNodesExit) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* temp = _impl_.event_.f2fs_truncate_nodes_exit_;
    _impl_.event_.f2fs_truncate_nodes_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_nodes_exit(::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* f2fs_truncate_nodes_exit) {
  clear_event();
  if (f2fs_truncate_nodes_exit) {
    set_has_f2fs_truncate_nodes_exit();
    _impl_.event_.f2fs_truncate_nodes_exit_ = f2fs_truncate_nodes_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
}
inline ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_nodes_exit() {
  if (event_case() != kF2FsTruncateNodesExit) {
    clear_event();
    set_has_f2fs_truncate_nodes_exit();
    _impl_.event_.f2fs_truncate_nodes_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_nodes_exit_;
}
inline ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* FtraceEvent::mutable_f2fs_truncate_nodes_exit() {
  ::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* _msg = _internal_mutable_f2fs_truncate_nodes_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit)
  return _msg;
}

// .perfetto.protos.F2fsTruncatePartialNodesFtraceEvent f2fs_truncate_partial_nodes = 267;
inline bool FtraceEvent::has_f2fs_truncate_partial_nodes() const {
  return event_case() == kF2FsTruncatePartialNodes;
}
inline bool FtraceEvent::_internal_has_f2fs_truncate_partial_nodes() const {
  return event_case() == kF2FsTruncatePartialNodes;
}
inline void FtraceEvent::set_has_f2fs_truncate_partial_nodes() {
  _impl_._oneof_case_[0] = kF2FsTruncatePartialNodes;
}
inline ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::release_f2fs_truncate_partial_nodes() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  if (event_case() == kF2FsTruncatePartialNodes) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* temp = _impl_.event_.f2fs_truncate_partial_nodes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_truncate_partial_nodes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& FtraceEvent::_internal_f2fs_truncate_partial_nodes() const {
  return event_case() == kF2FsTruncatePartialNodes
      ? *_impl_.event_.f2fs_truncate_partial_nodes_
      : reinterpret_cast<::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent&>(::perfetto::protos::_F2fsTruncatePartialNodesFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent& FtraceEvent::f2fs_truncate_partial_nodes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  return _internal_f2fs_truncate_partial_nodes();
}
inline ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_truncate_partial_nodes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  if (event_case() == kF2FsTruncatePartialNodes) {
    clear_has_event();
    ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* temp = _impl_.event_.f2fs_truncate_partial_nodes_;
    _impl_.event_.f2fs_truncate_partial_nodes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_truncate_partial_nodes(::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* f2fs_truncate_partial_nodes) {
  clear_event();
  if (f2fs_truncate_partial_nodes) {
    set_has_f2fs_truncate_partial_nodes();
    _impl_.event_.f2fs_truncate_partial_nodes_ = f2fs_truncate_partial_nodes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
}
inline ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::_internal_mutable_f2fs_truncate_partial_nodes() {
  if (event_case() != kF2FsTruncatePartialNodes) {
    clear_event();
    set_has_f2fs_truncate_partial_nodes();
    _impl_.event_.f2fs_truncate_partial_nodes_ = CreateMaybeMessage< ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_truncate_partial_nodes_;
}
inline ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* FtraceEvent::mutable_f2fs_truncate_partial_nodes() {
  ::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* _msg = _internal_mutable_f2fs_truncate_partial_nodes();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes)
  return _msg;
}

// .perfetto.protos.F2fsUnlinkEnterFtraceEvent f2fs_unlink_enter = 268;
inline bool FtraceEvent::has_f2fs_unlink_enter() const {
  return event_case() == kF2FsUnlinkEnter;
}
inline bool FtraceEvent::_internal_has_f2fs_unlink_enter() const {
  return event_case() == kF2FsUnlinkEnter;
}
inline void FtraceEvent::set_has_f2fs_unlink_enter() {
  _impl_._oneof_case_[0] = kF2FsUnlinkEnter;
}
inline ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* FtraceEvent::release_f2fs_unlink_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  if (event_case() == kF2FsUnlinkEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* temp = _impl_.event_.f2fs_unlink_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_unlink_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& FtraceEvent::_internal_f2fs_unlink_enter() const {
  return event_case() == kF2FsUnlinkEnter
      ? *_impl_.event_.f2fs_unlink_enter_
      : reinterpret_cast<::perfetto::protos::F2fsUnlinkEnterFtraceEvent&>(::perfetto::protos::_F2fsUnlinkEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsUnlinkEnterFtraceEvent& FtraceEvent::f2fs_unlink_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  return _internal_f2fs_unlink_enter();
}
inline ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_unlink_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  if (event_case() == kF2FsUnlinkEnter) {
    clear_has_event();
    ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* temp = _impl_.event_.f2fs_unlink_enter_;
    _impl_.event_.f2fs_unlink_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_unlink_enter(::perfetto::protos::F2fsUnlinkEnterFtraceEvent* f2fs_unlink_enter) {
  clear_event();
  if (f2fs_unlink_enter) {
    set_has_f2fs_unlink_enter();
    _impl_.event_.f2fs_unlink_enter_ = f2fs_unlink_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
}
inline ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* FtraceEvent::_internal_mutable_f2fs_unlink_enter() {
  if (event_case() != kF2FsUnlinkEnter) {
    clear_event();
    set_has_f2fs_unlink_enter();
    _impl_.event_.f2fs_unlink_enter_ = CreateMaybeMessage< ::perfetto::protos::F2fsUnlinkEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_unlink_enter_;
}
inline ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* FtraceEvent::mutable_f2fs_unlink_enter() {
  ::perfetto::protos::F2fsUnlinkEnterFtraceEvent* _msg = _internal_mutable_f2fs_unlink_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_unlink_enter)
  return _msg;
}

// .perfetto.protos.F2fsUnlinkExitFtraceEvent f2fs_unlink_exit = 269;
inline bool FtraceEvent::has_f2fs_unlink_exit() const {
  return event_case() == kF2FsUnlinkExit;
}
inline bool FtraceEvent::_internal_has_f2fs_unlink_exit() const {
  return event_case() == kF2FsUnlinkExit;
}
inline void FtraceEvent::set_has_f2fs_unlink_exit() {
  _impl_._oneof_case_[0] = kF2FsUnlinkExit;
}
inline ::perfetto::protos::F2fsUnlinkExitFtraceEvent* FtraceEvent::release_f2fs_unlink_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  if (event_case() == kF2FsUnlinkExit) {
    clear_has_event();
    ::perfetto::protos::F2fsUnlinkExitFtraceEvent* temp = _impl_.event_.f2fs_unlink_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_unlink_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& FtraceEvent::_internal_f2fs_unlink_exit() const {
  return event_case() == kF2FsUnlinkExit
      ? *_impl_.event_.f2fs_unlink_exit_
      : reinterpret_cast<::perfetto::protos::F2fsUnlinkExitFtraceEvent&>(::perfetto::protos::_F2fsUnlinkExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsUnlinkExitFtraceEvent& FtraceEvent::f2fs_unlink_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  return _internal_f2fs_unlink_exit();
}
inline ::perfetto::protos::F2fsUnlinkExitFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_unlink_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  if (event_case() == kF2FsUnlinkExit) {
    clear_has_event();
    ::perfetto::protos::F2fsUnlinkExitFtraceEvent* temp = _impl_.event_.f2fs_unlink_exit_;
    _impl_.event_.f2fs_unlink_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_unlink_exit(::perfetto::protos::F2fsUnlinkExitFtraceEvent* f2fs_unlink_exit) {
  clear_event();
  if (f2fs_unlink_exit) {
    set_has_f2fs_unlink_exit();
    _impl_.event_.f2fs_unlink_exit_ = f2fs_unlink_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
}
inline ::perfetto::protos::F2fsUnlinkExitFtraceEvent* FtraceEvent::_internal_mutable_f2fs_unlink_exit() {
  if (event_case() != kF2FsUnlinkExit) {
    clear_event();
    set_has_f2fs_unlink_exit();
    _impl_.event_.f2fs_unlink_exit_ = CreateMaybeMessage< ::perfetto::protos::F2fsUnlinkExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_unlink_exit_;
}
inline ::perfetto::protos::F2fsUnlinkExitFtraceEvent* FtraceEvent::mutable_f2fs_unlink_exit() {
  ::perfetto::protos::F2fsUnlinkExitFtraceEvent* _msg = _internal_mutable_f2fs_unlink_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_unlink_exit)
  return _msg;
}

// .perfetto.protos.F2fsVmPageMkwriteFtraceEvent f2fs_vm_page_mkwrite = 270;
inline bool FtraceEvent::has_f2fs_vm_page_mkwrite() const {
  return event_case() == kF2FsVmPageMkwrite;
}
inline bool FtraceEvent::_internal_has_f2fs_vm_page_mkwrite() const {
  return event_case() == kF2FsVmPageMkwrite;
}
inline void FtraceEvent::set_has_f2fs_vm_page_mkwrite() {
  _impl_._oneof_case_[0] = kF2FsVmPageMkwrite;
}
inline ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* FtraceEvent::release_f2fs_vm_page_mkwrite() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  if (event_case() == kF2FsVmPageMkwrite) {
    clear_has_event();
    ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* temp = _impl_.event_.f2fs_vm_page_mkwrite_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_vm_page_mkwrite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& FtraceEvent::_internal_f2fs_vm_page_mkwrite() const {
  return event_case() == kF2FsVmPageMkwrite
      ? *_impl_.event_.f2fs_vm_page_mkwrite_
      : reinterpret_cast<::perfetto::protos::F2fsVmPageMkwriteFtraceEvent&>(::perfetto::protos::_F2fsVmPageMkwriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent& FtraceEvent::f2fs_vm_page_mkwrite() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  return _internal_f2fs_vm_page_mkwrite();
}
inline ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_vm_page_mkwrite() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  if (event_case() == kF2FsVmPageMkwrite) {
    clear_has_event();
    ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* temp = _impl_.event_.f2fs_vm_page_mkwrite_;
    _impl_.event_.f2fs_vm_page_mkwrite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_vm_page_mkwrite(::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* f2fs_vm_page_mkwrite) {
  clear_event();
  if (f2fs_vm_page_mkwrite) {
    set_has_f2fs_vm_page_mkwrite();
    _impl_.event_.f2fs_vm_page_mkwrite_ = f2fs_vm_page_mkwrite;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
}
inline ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* FtraceEvent::_internal_mutable_f2fs_vm_page_mkwrite() {
  if (event_case() != kF2FsVmPageMkwrite) {
    clear_event();
    set_has_f2fs_vm_page_mkwrite();
    _impl_.event_.f2fs_vm_page_mkwrite_ = CreateMaybeMessage< ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_vm_page_mkwrite_;
}
inline ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* FtraceEvent::mutable_f2fs_vm_page_mkwrite() {
  ::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* _msg = _internal_mutable_f2fs_vm_page_mkwrite();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite)
  return _msg;
}

// .perfetto.protos.F2fsWriteBeginFtraceEvent f2fs_write_begin = 271;
inline bool FtraceEvent::has_f2fs_write_begin() const {
  return event_case() == kF2FsWriteBegin;
}
inline bool FtraceEvent::_internal_has_f2fs_write_begin() const {
  return event_case() == kF2FsWriteBegin;
}
inline void FtraceEvent::set_has_f2fs_write_begin() {
  _impl_._oneof_case_[0] = kF2FsWriteBegin;
}
inline ::perfetto::protos::F2fsWriteBeginFtraceEvent* FtraceEvent::release_f2fs_write_begin() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_write_begin)
  if (event_case() == kF2FsWriteBegin) {
    clear_has_event();
    ::perfetto::protos::F2fsWriteBeginFtraceEvent* temp = _impl_.event_.f2fs_write_begin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsWriteBeginFtraceEvent& FtraceEvent::_internal_f2fs_write_begin() const {
  return event_case() == kF2FsWriteBegin
      ? *_impl_.event_.f2fs_write_begin_
      : reinterpret_cast<::perfetto::protos::F2fsWriteBeginFtraceEvent&>(::perfetto::protos::_F2fsWriteBeginFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsWriteBeginFtraceEvent& FtraceEvent::f2fs_write_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_write_begin)
  return _internal_f2fs_write_begin();
}
inline ::perfetto::protos::F2fsWriteBeginFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_write_begin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_write_begin)
  if (event_case() == kF2FsWriteBegin) {
    clear_has_event();
    ::perfetto::protos::F2fsWriteBeginFtraceEvent* temp = _impl_.event_.f2fs_write_begin_;
    _impl_.event_.f2fs_write_begin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_write_begin(::perfetto::protos::F2fsWriteBeginFtraceEvent* f2fs_write_begin) {
  clear_event();
  if (f2fs_write_begin) {
    set_has_f2fs_write_begin();
    _impl_.event_.f2fs_write_begin_ = f2fs_write_begin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_begin)
}
inline ::perfetto::protos::F2fsWriteBeginFtraceEvent* FtraceEvent::_internal_mutable_f2fs_write_begin() {
  if (event_case() != kF2FsWriteBegin) {
    clear_event();
    set_has_f2fs_write_begin();
    _impl_.event_.f2fs_write_begin_ = CreateMaybeMessage< ::perfetto::protos::F2fsWriteBeginFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_write_begin_;
}
inline ::perfetto::protos::F2fsWriteBeginFtraceEvent* FtraceEvent::mutable_f2fs_write_begin() {
  ::perfetto::protos::F2fsWriteBeginFtraceEvent* _msg = _internal_mutable_f2fs_write_begin();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_write_begin)
  return _msg;
}

// .perfetto.protos.F2fsWriteCheckpointFtraceEvent f2fs_write_checkpoint = 272;
inline bool FtraceEvent::has_f2fs_write_checkpoint() const {
  return event_case() == kF2FsWriteCheckpoint;
}
inline bool FtraceEvent::_internal_has_f2fs_write_checkpoint() const {
  return event_case() == kF2FsWriteCheckpoint;
}
inline void FtraceEvent::set_has_f2fs_write_checkpoint() {
  _impl_._oneof_case_[0] = kF2FsWriteCheckpoint;
}
inline ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* FtraceEvent::release_f2fs_write_checkpoint() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  if (event_case() == kF2FsWriteCheckpoint) {
    clear_has_event();
    ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* temp = _impl_.event_.f2fs_write_checkpoint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_write_checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& FtraceEvent::_internal_f2fs_write_checkpoint() const {
  return event_case() == kF2FsWriteCheckpoint
      ? *_impl_.event_.f2fs_write_checkpoint_
      : reinterpret_cast<::perfetto::protos::F2fsWriteCheckpointFtraceEvent&>(::perfetto::protos::_F2fsWriteCheckpointFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsWriteCheckpointFtraceEvent& FtraceEvent::f2fs_write_checkpoint() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  return _internal_f2fs_write_checkpoint();
}
inline ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_write_checkpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  if (event_case() == kF2FsWriteCheckpoint) {
    clear_has_event();
    ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* temp = _impl_.event_.f2fs_write_checkpoint_;
    _impl_.event_.f2fs_write_checkpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_write_checkpoint(::perfetto::protos::F2fsWriteCheckpointFtraceEvent* f2fs_write_checkpoint) {
  clear_event();
  if (f2fs_write_checkpoint) {
    set_has_f2fs_write_checkpoint();
    _impl_.event_.f2fs_write_checkpoint_ = f2fs_write_checkpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
}
inline ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* FtraceEvent::_internal_mutable_f2fs_write_checkpoint() {
  if (event_case() != kF2FsWriteCheckpoint) {
    clear_event();
    set_has_f2fs_write_checkpoint();
    _impl_.event_.f2fs_write_checkpoint_ = CreateMaybeMessage< ::perfetto::protos::F2fsWriteCheckpointFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_write_checkpoint_;
}
inline ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* FtraceEvent::mutable_f2fs_write_checkpoint() {
  ::perfetto::protos::F2fsWriteCheckpointFtraceEvent* _msg = _internal_mutable_f2fs_write_checkpoint();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_write_checkpoint)
  return _msg;
}

// .perfetto.protos.F2fsWriteEndFtraceEvent f2fs_write_end = 273;
inline bool FtraceEvent::has_f2fs_write_end() const {
  return event_case() == kF2FsWriteEnd;
}
inline bool FtraceEvent::_internal_has_f2fs_write_end() const {
  return event_case() == kF2FsWriteEnd;
}
inline void FtraceEvent::set_has_f2fs_write_end() {
  _impl_._oneof_case_[0] = kF2FsWriteEnd;
}
inline ::perfetto::protos::F2fsWriteEndFtraceEvent* FtraceEvent::release_f2fs_write_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_write_end)
  if (event_case() == kF2FsWriteEnd) {
    clear_has_event();
    ::perfetto::protos::F2fsWriteEndFtraceEvent* temp = _impl_.event_.f2fs_write_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsWriteEndFtraceEvent& FtraceEvent::_internal_f2fs_write_end() const {
  return event_case() == kF2FsWriteEnd
      ? *_impl_.event_.f2fs_write_end_
      : reinterpret_cast<::perfetto::protos::F2fsWriteEndFtraceEvent&>(::perfetto::protos::_F2fsWriteEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsWriteEndFtraceEvent& FtraceEvent::f2fs_write_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_write_end)
  return _internal_f2fs_write_end();
}
inline ::perfetto::protos::F2fsWriteEndFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_write_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_write_end)
  if (event_case() == kF2FsWriteEnd) {
    clear_has_event();
    ::perfetto::protos::F2fsWriteEndFtraceEvent* temp = _impl_.event_.f2fs_write_end_;
    _impl_.event_.f2fs_write_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_write_end(::perfetto::protos::F2fsWriteEndFtraceEvent* f2fs_write_end) {
  clear_event();
  if (f2fs_write_end) {
    set_has_f2fs_write_end();
    _impl_.event_.f2fs_write_end_ = f2fs_write_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_write_end)
}
inline ::perfetto::protos::F2fsWriteEndFtraceEvent* FtraceEvent::_internal_mutable_f2fs_write_end() {
  if (event_case() != kF2FsWriteEnd) {
    clear_event();
    set_has_f2fs_write_end();
    _impl_.event_.f2fs_write_end_ = CreateMaybeMessage< ::perfetto::protos::F2fsWriteEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_write_end_;
}
inline ::perfetto::protos::F2fsWriteEndFtraceEvent* FtraceEvent::mutable_f2fs_write_end() {
  ::perfetto::protos::F2fsWriteEndFtraceEvent* _msg = _internal_mutable_f2fs_write_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_write_end)
  return _msg;
}

// .perfetto.protos.AllocPagesIommuEndFtraceEvent alloc_pages_iommu_end = 274;
inline bool FtraceEvent::has_alloc_pages_iommu_end() const {
  return event_case() == kAllocPagesIommuEnd;
}
inline bool FtraceEvent::_internal_has_alloc_pages_iommu_end() const {
  return event_case() == kAllocPagesIommuEnd;
}
inline void FtraceEvent::set_has_alloc_pages_iommu_end() {
  _impl_._oneof_case_[0] = kAllocPagesIommuEnd;
}
inline ::perfetto::protos::AllocPagesIommuEndFtraceEvent* FtraceEvent::release_alloc_pages_iommu_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  if (event_case() == kAllocPagesIommuEnd) {
    clear_has_event();
    ::perfetto::protos::AllocPagesIommuEndFtraceEvent* temp = _impl_.event_.alloc_pages_iommu_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.alloc_pages_iommu_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& FtraceEvent::_internal_alloc_pages_iommu_end() const {
  return event_case() == kAllocPagesIommuEnd
      ? *_impl_.event_.alloc_pages_iommu_end_
      : reinterpret_cast<::perfetto::protos::AllocPagesIommuEndFtraceEvent&>(::perfetto::protos::_AllocPagesIommuEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AllocPagesIommuEndFtraceEvent& FtraceEvent::alloc_pages_iommu_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  return _internal_alloc_pages_iommu_end();
}
inline ::perfetto::protos::AllocPagesIommuEndFtraceEvent* FtraceEvent::unsafe_arena_release_alloc_pages_iommu_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  if (event_case() == kAllocPagesIommuEnd) {
    clear_has_event();
    ::perfetto::protos::AllocPagesIommuEndFtraceEvent* temp = _impl_.event_.alloc_pages_iommu_end_;
    _impl_.event_.alloc_pages_iommu_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_alloc_pages_iommu_end(::perfetto::protos::AllocPagesIommuEndFtraceEvent* alloc_pages_iommu_end) {
  clear_event();
  if (alloc_pages_iommu_end) {
    set_has_alloc_pages_iommu_end();
    _impl_.event_.alloc_pages_iommu_end_ = alloc_pages_iommu_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
}
inline ::perfetto::protos::AllocPagesIommuEndFtraceEvent* FtraceEvent::_internal_mutable_alloc_pages_iommu_end() {
  if (event_case() != kAllocPagesIommuEnd) {
    clear_event();
    set_has_alloc_pages_iommu_end();
    _impl_.event_.alloc_pages_iommu_end_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesIommuEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.alloc_pages_iommu_end_;
}
inline ::perfetto::protos::AllocPagesIommuEndFtraceEvent* FtraceEvent::mutable_alloc_pages_iommu_end() {
  ::perfetto::protos::AllocPagesIommuEndFtraceEvent* _msg = _internal_mutable_alloc_pages_iommu_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_iommu_end)
  return _msg;
}

// .perfetto.protos.AllocPagesIommuFailFtraceEvent alloc_pages_iommu_fail = 275;
inline bool FtraceEvent::has_alloc_pages_iommu_fail() const {
  return event_case() == kAllocPagesIommuFail;
}
inline bool FtraceEvent::_internal_has_alloc_pages_iommu_fail() const {
  return event_case() == kAllocPagesIommuFail;
}
inline void FtraceEvent::set_has_alloc_pages_iommu_fail() {
  _impl_._oneof_case_[0] = kAllocPagesIommuFail;
}
inline ::perfetto::protos::AllocPagesIommuFailFtraceEvent* FtraceEvent::release_alloc_pages_iommu_fail() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  if (event_case() == kAllocPagesIommuFail) {
    clear_has_event();
    ::perfetto::protos::AllocPagesIommuFailFtraceEvent* temp = _impl_.event_.alloc_pages_iommu_fail_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.alloc_pages_iommu_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& FtraceEvent::_internal_alloc_pages_iommu_fail() const {
  return event_case() == kAllocPagesIommuFail
      ? *_impl_.event_.alloc_pages_iommu_fail_
      : reinterpret_cast<::perfetto::protos::AllocPagesIommuFailFtraceEvent&>(::perfetto::protos::_AllocPagesIommuFailFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AllocPagesIommuFailFtraceEvent& FtraceEvent::alloc_pages_iommu_fail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  return _internal_alloc_pages_iommu_fail();
}
inline ::perfetto::protos::AllocPagesIommuFailFtraceEvent* FtraceEvent::unsafe_arena_release_alloc_pages_iommu_fail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  if (event_case() == kAllocPagesIommuFail) {
    clear_has_event();
    ::perfetto::protos::AllocPagesIommuFailFtraceEvent* temp = _impl_.event_.alloc_pages_iommu_fail_;
    _impl_.event_.alloc_pages_iommu_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_alloc_pages_iommu_fail(::perfetto::protos::AllocPagesIommuFailFtraceEvent* alloc_pages_iommu_fail) {
  clear_event();
  if (alloc_pages_iommu_fail) {
    set_has_alloc_pages_iommu_fail();
    _impl_.event_.alloc_pages_iommu_fail_ = alloc_pages_iommu_fail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
}
inline ::perfetto::protos::AllocPagesIommuFailFtraceEvent* FtraceEvent::_internal_mutable_alloc_pages_iommu_fail() {
  if (event_case() != kAllocPagesIommuFail) {
    clear_event();
    set_has_alloc_pages_iommu_fail();
    _impl_.event_.alloc_pages_iommu_fail_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesIommuFailFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.alloc_pages_iommu_fail_;
}
inline ::perfetto::protos::AllocPagesIommuFailFtraceEvent* FtraceEvent::mutable_alloc_pages_iommu_fail() {
  ::perfetto::protos::AllocPagesIommuFailFtraceEvent* _msg = _internal_mutable_alloc_pages_iommu_fail();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_iommu_fail)
  return _msg;
}

// .perfetto.protos.AllocPagesIommuStartFtraceEvent alloc_pages_iommu_start = 276;
inline bool FtraceEvent::has_alloc_pages_iommu_start() const {
  return event_case() == kAllocPagesIommuStart;
}
inline bool FtraceEvent::_internal_has_alloc_pages_iommu_start() const {
  return event_case() == kAllocPagesIommuStart;
}
inline void FtraceEvent::set_has_alloc_pages_iommu_start() {
  _impl_._oneof_case_[0] = kAllocPagesIommuStart;
}
inline ::perfetto::protos::AllocPagesIommuStartFtraceEvent* FtraceEvent::release_alloc_pages_iommu_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  if (event_case() == kAllocPagesIommuStart) {
    clear_has_event();
    ::perfetto::protos::AllocPagesIommuStartFtraceEvent* temp = _impl_.event_.alloc_pages_iommu_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.alloc_pages_iommu_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& FtraceEvent::_internal_alloc_pages_iommu_start() const {
  return event_case() == kAllocPagesIommuStart
      ? *_impl_.event_.alloc_pages_iommu_start_
      : reinterpret_cast<::perfetto::protos::AllocPagesIommuStartFtraceEvent&>(::perfetto::protos::_AllocPagesIommuStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AllocPagesIommuStartFtraceEvent& FtraceEvent::alloc_pages_iommu_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  return _internal_alloc_pages_iommu_start();
}
inline ::perfetto::protos::AllocPagesIommuStartFtraceEvent* FtraceEvent::unsafe_arena_release_alloc_pages_iommu_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  if (event_case() == kAllocPagesIommuStart) {
    clear_has_event();
    ::perfetto::protos::AllocPagesIommuStartFtraceEvent* temp = _impl_.event_.alloc_pages_iommu_start_;
    _impl_.event_.alloc_pages_iommu_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_alloc_pages_iommu_start(::perfetto::protos::AllocPagesIommuStartFtraceEvent* alloc_pages_iommu_start) {
  clear_event();
  if (alloc_pages_iommu_start) {
    set_has_alloc_pages_iommu_start();
    _impl_.event_.alloc_pages_iommu_start_ = alloc_pages_iommu_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
}
inline ::perfetto::protos::AllocPagesIommuStartFtraceEvent* FtraceEvent::_internal_mutable_alloc_pages_iommu_start() {
  if (event_case() != kAllocPagesIommuStart) {
    clear_event();
    set_has_alloc_pages_iommu_start();
    _impl_.event_.alloc_pages_iommu_start_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesIommuStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.alloc_pages_iommu_start_;
}
inline ::perfetto::protos::AllocPagesIommuStartFtraceEvent* FtraceEvent::mutable_alloc_pages_iommu_start() {
  ::perfetto::protos::AllocPagesIommuStartFtraceEvent* _msg = _internal_mutable_alloc_pages_iommu_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_iommu_start)
  return _msg;
}

// .perfetto.protos.AllocPagesSysEndFtraceEvent alloc_pages_sys_end = 277;
inline bool FtraceEvent::has_alloc_pages_sys_end() const {
  return event_case() == kAllocPagesSysEnd;
}
inline bool FtraceEvent::_internal_has_alloc_pages_sys_end() const {
  return event_case() == kAllocPagesSysEnd;
}
inline void FtraceEvent::set_has_alloc_pages_sys_end() {
  _impl_._oneof_case_[0] = kAllocPagesSysEnd;
}
inline ::perfetto::protos::AllocPagesSysEndFtraceEvent* FtraceEvent::release_alloc_pages_sys_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  if (event_case() == kAllocPagesSysEnd) {
    clear_has_event();
    ::perfetto::protos::AllocPagesSysEndFtraceEvent* temp = _impl_.event_.alloc_pages_sys_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.alloc_pages_sys_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesSysEndFtraceEvent& FtraceEvent::_internal_alloc_pages_sys_end() const {
  return event_case() == kAllocPagesSysEnd
      ? *_impl_.event_.alloc_pages_sys_end_
      : reinterpret_cast<::perfetto::protos::AllocPagesSysEndFtraceEvent&>(::perfetto::protos::_AllocPagesSysEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AllocPagesSysEndFtraceEvent& FtraceEvent::alloc_pages_sys_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  return _internal_alloc_pages_sys_end();
}
inline ::perfetto::protos::AllocPagesSysEndFtraceEvent* FtraceEvent::unsafe_arena_release_alloc_pages_sys_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  if (event_case() == kAllocPagesSysEnd) {
    clear_has_event();
    ::perfetto::protos::AllocPagesSysEndFtraceEvent* temp = _impl_.event_.alloc_pages_sys_end_;
    _impl_.event_.alloc_pages_sys_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_alloc_pages_sys_end(::perfetto::protos::AllocPagesSysEndFtraceEvent* alloc_pages_sys_end) {
  clear_event();
  if (alloc_pages_sys_end) {
    set_has_alloc_pages_sys_end();
    _impl_.event_.alloc_pages_sys_end_ = alloc_pages_sys_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
}
inline ::perfetto::protos::AllocPagesSysEndFtraceEvent* FtraceEvent::_internal_mutable_alloc_pages_sys_end() {
  if (event_case() != kAllocPagesSysEnd) {
    clear_event();
    set_has_alloc_pages_sys_end();
    _impl_.event_.alloc_pages_sys_end_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesSysEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.alloc_pages_sys_end_;
}
inline ::perfetto::protos::AllocPagesSysEndFtraceEvent* FtraceEvent::mutable_alloc_pages_sys_end() {
  ::perfetto::protos::AllocPagesSysEndFtraceEvent* _msg = _internal_mutable_alloc_pages_sys_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_sys_end)
  return _msg;
}

// .perfetto.protos.AllocPagesSysFailFtraceEvent alloc_pages_sys_fail = 278;
inline bool FtraceEvent::has_alloc_pages_sys_fail() const {
  return event_case() == kAllocPagesSysFail;
}
inline bool FtraceEvent::_internal_has_alloc_pages_sys_fail() const {
  return event_case() == kAllocPagesSysFail;
}
inline void FtraceEvent::set_has_alloc_pages_sys_fail() {
  _impl_._oneof_case_[0] = kAllocPagesSysFail;
}
inline ::perfetto::protos::AllocPagesSysFailFtraceEvent* FtraceEvent::release_alloc_pages_sys_fail() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  if (event_case() == kAllocPagesSysFail) {
    clear_has_event();
    ::perfetto::protos::AllocPagesSysFailFtraceEvent* temp = _impl_.event_.alloc_pages_sys_fail_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.alloc_pages_sys_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesSysFailFtraceEvent& FtraceEvent::_internal_alloc_pages_sys_fail() const {
  return event_case() == kAllocPagesSysFail
      ? *_impl_.event_.alloc_pages_sys_fail_
      : reinterpret_cast<::perfetto::protos::AllocPagesSysFailFtraceEvent&>(::perfetto::protos::_AllocPagesSysFailFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AllocPagesSysFailFtraceEvent& FtraceEvent::alloc_pages_sys_fail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  return _internal_alloc_pages_sys_fail();
}
inline ::perfetto::protos::AllocPagesSysFailFtraceEvent* FtraceEvent::unsafe_arena_release_alloc_pages_sys_fail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  if (event_case() == kAllocPagesSysFail) {
    clear_has_event();
    ::perfetto::protos::AllocPagesSysFailFtraceEvent* temp = _impl_.event_.alloc_pages_sys_fail_;
    _impl_.event_.alloc_pages_sys_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_alloc_pages_sys_fail(::perfetto::protos::AllocPagesSysFailFtraceEvent* alloc_pages_sys_fail) {
  clear_event();
  if (alloc_pages_sys_fail) {
    set_has_alloc_pages_sys_fail();
    _impl_.event_.alloc_pages_sys_fail_ = alloc_pages_sys_fail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
}
inline ::perfetto::protos::AllocPagesSysFailFtraceEvent* FtraceEvent::_internal_mutable_alloc_pages_sys_fail() {
  if (event_case() != kAllocPagesSysFail) {
    clear_event();
    set_has_alloc_pages_sys_fail();
    _impl_.event_.alloc_pages_sys_fail_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesSysFailFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.alloc_pages_sys_fail_;
}
inline ::perfetto::protos::AllocPagesSysFailFtraceEvent* FtraceEvent::mutable_alloc_pages_sys_fail() {
  ::perfetto::protos::AllocPagesSysFailFtraceEvent* _msg = _internal_mutable_alloc_pages_sys_fail();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_sys_fail)
  return _msg;
}

// .perfetto.protos.AllocPagesSysStartFtraceEvent alloc_pages_sys_start = 279;
inline bool FtraceEvent::has_alloc_pages_sys_start() const {
  return event_case() == kAllocPagesSysStart;
}
inline bool FtraceEvent::_internal_has_alloc_pages_sys_start() const {
  return event_case() == kAllocPagesSysStart;
}
inline void FtraceEvent::set_has_alloc_pages_sys_start() {
  _impl_._oneof_case_[0] = kAllocPagesSysStart;
}
inline ::perfetto::protos::AllocPagesSysStartFtraceEvent* FtraceEvent::release_alloc_pages_sys_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  if (event_case() == kAllocPagesSysStart) {
    clear_has_event();
    ::perfetto::protos::AllocPagesSysStartFtraceEvent* temp = _impl_.event_.alloc_pages_sys_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.alloc_pages_sys_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AllocPagesSysStartFtraceEvent& FtraceEvent::_internal_alloc_pages_sys_start() const {
  return event_case() == kAllocPagesSysStart
      ? *_impl_.event_.alloc_pages_sys_start_
      : reinterpret_cast<::perfetto::protos::AllocPagesSysStartFtraceEvent&>(::perfetto::protos::_AllocPagesSysStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AllocPagesSysStartFtraceEvent& FtraceEvent::alloc_pages_sys_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  return _internal_alloc_pages_sys_start();
}
inline ::perfetto::protos::AllocPagesSysStartFtraceEvent* FtraceEvent::unsafe_arena_release_alloc_pages_sys_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  if (event_case() == kAllocPagesSysStart) {
    clear_has_event();
    ::perfetto::protos::AllocPagesSysStartFtraceEvent* temp = _impl_.event_.alloc_pages_sys_start_;
    _impl_.event_.alloc_pages_sys_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_alloc_pages_sys_start(::perfetto::protos::AllocPagesSysStartFtraceEvent* alloc_pages_sys_start) {
  clear_event();
  if (alloc_pages_sys_start) {
    set_has_alloc_pages_sys_start();
    _impl_.event_.alloc_pages_sys_start_ = alloc_pages_sys_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
}
inline ::perfetto::protos::AllocPagesSysStartFtraceEvent* FtraceEvent::_internal_mutable_alloc_pages_sys_start() {
  if (event_case() != kAllocPagesSysStart) {
    clear_event();
    set_has_alloc_pages_sys_start();
    _impl_.event_.alloc_pages_sys_start_ = CreateMaybeMessage< ::perfetto::protos::AllocPagesSysStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.alloc_pages_sys_start_;
}
inline ::perfetto::protos::AllocPagesSysStartFtraceEvent* FtraceEvent::mutable_alloc_pages_sys_start() {
  ::perfetto::protos::AllocPagesSysStartFtraceEvent* _msg = _internal_mutable_alloc_pages_sys_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.alloc_pages_sys_start)
  return _msg;
}

// .perfetto.protos.DmaAllocContiguousRetryFtraceEvent dma_alloc_contiguous_retry = 280;
inline bool FtraceEvent::has_dma_alloc_contiguous_retry() const {
  return event_case() == kDmaAllocContiguousRetry;
}
inline bool FtraceEvent::_internal_has_dma_alloc_contiguous_retry() const {
  return event_case() == kDmaAllocContiguousRetry;
}
inline void FtraceEvent::set_has_dma_alloc_contiguous_retry() {
  _impl_._oneof_case_[0] = kDmaAllocContiguousRetry;
}
inline ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* FtraceEvent::release_dma_alloc_contiguous_retry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  if (event_case() == kDmaAllocContiguousRetry) {
    clear_has_event();
    ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* temp = _impl_.event_.dma_alloc_contiguous_retry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_alloc_contiguous_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& FtraceEvent::_internal_dma_alloc_contiguous_retry() const {
  return event_case() == kDmaAllocContiguousRetry
      ? *_impl_.event_.dma_alloc_contiguous_retry_
      : reinterpret_cast<::perfetto::protos::DmaAllocContiguousRetryFtraceEvent&>(::perfetto::protos::_DmaAllocContiguousRetryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent& FtraceEvent::dma_alloc_contiguous_retry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  return _internal_dma_alloc_contiguous_retry();
}
inline ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* FtraceEvent::unsafe_arena_release_dma_alloc_contiguous_retry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  if (event_case() == kDmaAllocContiguousRetry) {
    clear_has_event();
    ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* temp = _impl_.event_.dma_alloc_contiguous_retry_;
    _impl_.event_.dma_alloc_contiguous_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_alloc_contiguous_retry(::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* dma_alloc_contiguous_retry) {
  clear_event();
  if (dma_alloc_contiguous_retry) {
    set_has_dma_alloc_contiguous_retry();
    _impl_.event_.dma_alloc_contiguous_retry_ = dma_alloc_contiguous_retry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
}
inline ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* FtraceEvent::_internal_mutable_dma_alloc_contiguous_retry() {
  if (event_case() != kDmaAllocContiguousRetry) {
    clear_event();
    set_has_dma_alloc_contiguous_retry();
    _impl_.event_.dma_alloc_contiguous_retry_ = CreateMaybeMessage< ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_alloc_contiguous_retry_;
}
inline ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* FtraceEvent::mutable_dma_alloc_contiguous_retry() {
  ::perfetto::protos::DmaAllocContiguousRetryFtraceEvent* _msg = _internal_mutable_dma_alloc_contiguous_retry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry)
  return _msg;
}

// .perfetto.protos.IommuMapRangeFtraceEvent iommu_map_range = 281;
inline bool FtraceEvent::has_iommu_map_range() const {
  return event_case() == kIommuMapRange;
}
inline bool FtraceEvent::_internal_has_iommu_map_range() const {
  return event_case() == kIommuMapRange;
}
inline void FtraceEvent::set_has_iommu_map_range() {
  _impl_._oneof_case_[0] = kIommuMapRange;
}
inline ::perfetto::protos::IommuMapRangeFtraceEvent* FtraceEvent::release_iommu_map_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.iommu_map_range)
  if (event_case() == kIommuMapRange) {
    clear_has_event();
    ::perfetto::protos::IommuMapRangeFtraceEvent* temp = _impl_.event_.iommu_map_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.iommu_map_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IommuMapRangeFtraceEvent& FtraceEvent::_internal_iommu_map_range() const {
  return event_case() == kIommuMapRange
      ? *_impl_.event_.iommu_map_range_
      : reinterpret_cast<::perfetto::protos::IommuMapRangeFtraceEvent&>(::perfetto::protos::_IommuMapRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IommuMapRangeFtraceEvent& FtraceEvent::iommu_map_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.iommu_map_range)
  return _internal_iommu_map_range();
}
inline ::perfetto::protos::IommuMapRangeFtraceEvent* FtraceEvent::unsafe_arena_release_iommu_map_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.iommu_map_range)
  if (event_case() == kIommuMapRange) {
    clear_has_event();
    ::perfetto::protos::IommuMapRangeFtraceEvent* temp = _impl_.event_.iommu_map_range_;
    _impl_.event_.iommu_map_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_iommu_map_range(::perfetto::protos::IommuMapRangeFtraceEvent* iommu_map_range) {
  clear_event();
  if (iommu_map_range) {
    set_has_iommu_map_range();
    _impl_.event_.iommu_map_range_ = iommu_map_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.iommu_map_range)
}
inline ::perfetto::protos::IommuMapRangeFtraceEvent* FtraceEvent::_internal_mutable_iommu_map_range() {
  if (event_case() != kIommuMapRange) {
    clear_event();
    set_has_iommu_map_range();
    _impl_.event_.iommu_map_range_ = CreateMaybeMessage< ::perfetto::protos::IommuMapRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.iommu_map_range_;
}
inline ::perfetto::protos::IommuMapRangeFtraceEvent* FtraceEvent::mutable_iommu_map_range() {
  ::perfetto::protos::IommuMapRangeFtraceEvent* _msg = _internal_mutable_iommu_map_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.iommu_map_range)
  return _msg;
}

// .perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent iommu_sec_ptbl_map_range_end = 282;
inline bool FtraceEvent::has_iommu_sec_ptbl_map_range_end() const {
  return event_case() == kIommuSecPtblMapRangeEnd;
}
inline bool FtraceEvent::_internal_has_iommu_sec_ptbl_map_range_end() const {
  return event_case() == kIommuSecPtblMapRangeEnd;
}
inline void FtraceEvent::set_has_iommu_sec_ptbl_map_range_end() {
  _impl_._oneof_case_[0] = kIommuSecPtblMapRangeEnd;
}
inline ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* FtraceEvent::release_iommu_sec_ptbl_map_range_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  if (event_case() == kIommuSecPtblMapRangeEnd) {
    clear_has_event();
    ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* temp = _impl_.event_.iommu_sec_ptbl_map_range_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.iommu_sec_ptbl_map_range_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& FtraceEvent::_internal_iommu_sec_ptbl_map_range_end() const {
  return event_case() == kIommuSecPtblMapRangeEnd
      ? *_impl_.event_.iommu_sec_ptbl_map_range_end_
      : reinterpret_cast<::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent&>(::perfetto::protos::_IommuSecPtblMapRangeEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent& FtraceEvent::iommu_sec_ptbl_map_range_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  return _internal_iommu_sec_ptbl_map_range_end();
}
inline ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* FtraceEvent::unsafe_arena_release_iommu_sec_ptbl_map_range_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  if (event_case() == kIommuSecPtblMapRangeEnd) {
    clear_has_event();
    ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* temp = _impl_.event_.iommu_sec_ptbl_map_range_end_;
    _impl_.event_.iommu_sec_ptbl_map_range_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_iommu_sec_ptbl_map_range_end(::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* iommu_sec_ptbl_map_range_end) {
  clear_event();
  if (iommu_sec_ptbl_map_range_end) {
    set_has_iommu_sec_ptbl_map_range_end();
    _impl_.event_.iommu_sec_ptbl_map_range_end_ = iommu_sec_ptbl_map_range_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
}
inline ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* FtraceEvent::_internal_mutable_iommu_sec_ptbl_map_range_end() {
  if (event_case() != kIommuSecPtblMapRangeEnd) {
    clear_event();
    set_has_iommu_sec_ptbl_map_range_end();
    _impl_.event_.iommu_sec_ptbl_map_range_end_ = CreateMaybeMessage< ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.iommu_sec_ptbl_map_range_end_;
}
inline ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* FtraceEvent::mutable_iommu_sec_ptbl_map_range_end() {
  ::perfetto::protos::IommuSecPtblMapRangeEndFtraceEvent* _msg = _internal_mutable_iommu_sec_ptbl_map_range_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end)
  return _msg;
}

// .perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent iommu_sec_ptbl_map_range_start = 283;
inline bool FtraceEvent::has_iommu_sec_ptbl_map_range_start() const {
  return event_case() == kIommuSecPtblMapRangeStart;
}
inline bool FtraceEvent::_internal_has_iommu_sec_ptbl_map_range_start() const {
  return event_case() == kIommuSecPtblMapRangeStart;
}
inline void FtraceEvent::set_has_iommu_sec_ptbl_map_range_start() {
  _impl_._oneof_case_[0] = kIommuSecPtblMapRangeStart;
}
inline ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* FtraceEvent::release_iommu_sec_ptbl_map_range_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  if (event_case() == kIommuSecPtblMapRangeStart) {
    clear_has_event();
    ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* temp = _impl_.event_.iommu_sec_ptbl_map_range_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.iommu_sec_ptbl_map_range_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& FtraceEvent::_internal_iommu_sec_ptbl_map_range_start() const {
  return event_case() == kIommuSecPtblMapRangeStart
      ? *_impl_.event_.iommu_sec_ptbl_map_range_start_
      : reinterpret_cast<::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent&>(::perfetto::protos::_IommuSecPtblMapRangeStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent& FtraceEvent::iommu_sec_ptbl_map_range_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  return _internal_iommu_sec_ptbl_map_range_start();
}
inline ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* FtraceEvent::unsafe_arena_release_iommu_sec_ptbl_map_range_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  if (event_case() == kIommuSecPtblMapRangeStart) {
    clear_has_event();
    ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* temp = _impl_.event_.iommu_sec_ptbl_map_range_start_;
    _impl_.event_.iommu_sec_ptbl_map_range_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_iommu_sec_ptbl_map_range_start(::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* iommu_sec_ptbl_map_range_start) {
  clear_event();
  if (iommu_sec_ptbl_map_range_start) {
    set_has_iommu_sec_ptbl_map_range_start();
    _impl_.event_.iommu_sec_ptbl_map_range_start_ = iommu_sec_ptbl_map_range_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
}
inline ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* FtraceEvent::_internal_mutable_iommu_sec_ptbl_map_range_start() {
  if (event_case() != kIommuSecPtblMapRangeStart) {
    clear_event();
    set_has_iommu_sec_ptbl_map_range_start();
    _impl_.event_.iommu_sec_ptbl_map_range_start_ = CreateMaybeMessage< ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.iommu_sec_ptbl_map_range_start_;
}
inline ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* FtraceEvent::mutable_iommu_sec_ptbl_map_range_start() {
  ::perfetto::protos::IommuSecPtblMapRangeStartFtraceEvent* _msg = _internal_mutable_iommu_sec_ptbl_map_range_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start)
  return _msg;
}

// .perfetto.protos.IonAllocBufferEndFtraceEvent ion_alloc_buffer_end = 284;
inline bool FtraceEvent::has_ion_alloc_buffer_end() const {
  return event_case() == kIonAllocBufferEnd;
}
inline bool FtraceEvent::_internal_has_ion_alloc_buffer_end() const {
  return event_case() == kIonAllocBufferEnd;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_end() {
  _impl_._oneof_case_[0] = kIonAllocBufferEnd;
}
inline ::perfetto::protos::IonAllocBufferEndFtraceEvent* FtraceEvent::release_ion_alloc_buffer_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  if (event_case() == kIonAllocBufferEnd) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferEndFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_alloc_buffer_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferEndFtraceEvent& FtraceEvent::_internal_ion_alloc_buffer_end() const {
  return event_case() == kIonAllocBufferEnd
      ? *_impl_.event_.ion_alloc_buffer_end_
      : reinterpret_cast<::perfetto::protos::IonAllocBufferEndFtraceEvent&>(::perfetto::protos::_IonAllocBufferEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonAllocBufferEndFtraceEvent& FtraceEvent::ion_alloc_buffer_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  return _internal_ion_alloc_buffer_end();
}
inline ::perfetto::protos::IonAllocBufferEndFtraceEvent* FtraceEvent::unsafe_arena_release_ion_alloc_buffer_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  if (event_case() == kIonAllocBufferEnd) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferEndFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_end_;
    _impl_.event_.ion_alloc_buffer_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_alloc_buffer_end(::perfetto::protos::IonAllocBufferEndFtraceEvent* ion_alloc_buffer_end) {
  clear_event();
  if (ion_alloc_buffer_end) {
    set_has_ion_alloc_buffer_end();
    _impl_.event_.ion_alloc_buffer_end_ = ion_alloc_buffer_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
}
inline ::perfetto::protos::IonAllocBufferEndFtraceEvent* FtraceEvent::_internal_mutable_ion_alloc_buffer_end() {
  if (event_case() != kIonAllocBufferEnd) {
    clear_event();
    set_has_ion_alloc_buffer_end();
    _impl_.event_.ion_alloc_buffer_end_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_alloc_buffer_end_;
}
inline ::perfetto::protos::IonAllocBufferEndFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_end() {
  ::perfetto::protos::IonAllocBufferEndFtraceEvent* _msg = _internal_mutable_ion_alloc_buffer_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_end)
  return _msg;
}

// .perfetto.protos.IonAllocBufferFailFtraceEvent ion_alloc_buffer_fail = 285;
inline bool FtraceEvent::has_ion_alloc_buffer_fail() const {
  return event_case() == kIonAllocBufferFail;
}
inline bool FtraceEvent::_internal_has_ion_alloc_buffer_fail() const {
  return event_case() == kIonAllocBufferFail;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_fail() {
  _impl_._oneof_case_[0] = kIonAllocBufferFail;
}
inline ::perfetto::protos::IonAllocBufferFailFtraceEvent* FtraceEvent::release_ion_alloc_buffer_fail() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  if (event_case() == kIonAllocBufferFail) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferFailFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_fail_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_alloc_buffer_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferFailFtraceEvent& FtraceEvent::_internal_ion_alloc_buffer_fail() const {
  return event_case() == kIonAllocBufferFail
      ? *_impl_.event_.ion_alloc_buffer_fail_
      : reinterpret_cast<::perfetto::protos::IonAllocBufferFailFtraceEvent&>(::perfetto::protos::_IonAllocBufferFailFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonAllocBufferFailFtraceEvent& FtraceEvent::ion_alloc_buffer_fail() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  return _internal_ion_alloc_buffer_fail();
}
inline ::perfetto::protos::IonAllocBufferFailFtraceEvent* FtraceEvent::unsafe_arena_release_ion_alloc_buffer_fail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  if (event_case() == kIonAllocBufferFail) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferFailFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_fail_;
    _impl_.event_.ion_alloc_buffer_fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_alloc_buffer_fail(::perfetto::protos::IonAllocBufferFailFtraceEvent* ion_alloc_buffer_fail) {
  clear_event();
  if (ion_alloc_buffer_fail) {
    set_has_ion_alloc_buffer_fail();
    _impl_.event_.ion_alloc_buffer_fail_ = ion_alloc_buffer_fail;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
}
inline ::perfetto::protos::IonAllocBufferFailFtraceEvent* FtraceEvent::_internal_mutable_ion_alloc_buffer_fail() {
  if (event_case() != kIonAllocBufferFail) {
    clear_event();
    set_has_ion_alloc_buffer_fail();
    _impl_.event_.ion_alloc_buffer_fail_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferFailFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_alloc_buffer_fail_;
}
inline ::perfetto::protos::IonAllocBufferFailFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_fail() {
  ::perfetto::protos::IonAllocBufferFailFtraceEvent* _msg = _internal_mutable_ion_alloc_buffer_fail();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_fail)
  return _msg;
}

// .perfetto.protos.IonAllocBufferFallbackFtraceEvent ion_alloc_buffer_fallback = 286;
inline bool FtraceEvent::has_ion_alloc_buffer_fallback() const {
  return event_case() == kIonAllocBufferFallback;
}
inline bool FtraceEvent::_internal_has_ion_alloc_buffer_fallback() const {
  return event_case() == kIonAllocBufferFallback;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_fallback() {
  _impl_._oneof_case_[0] = kIonAllocBufferFallback;
}
inline ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* FtraceEvent::release_ion_alloc_buffer_fallback() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  if (event_case() == kIonAllocBufferFallback) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_fallback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_alloc_buffer_fallback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& FtraceEvent::_internal_ion_alloc_buffer_fallback() const {
  return event_case() == kIonAllocBufferFallback
      ? *_impl_.event_.ion_alloc_buffer_fallback_
      : reinterpret_cast<::perfetto::protos::IonAllocBufferFallbackFtraceEvent&>(::perfetto::protos::_IonAllocBufferFallbackFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonAllocBufferFallbackFtraceEvent& FtraceEvent::ion_alloc_buffer_fallback() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  return _internal_ion_alloc_buffer_fallback();
}
inline ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* FtraceEvent::unsafe_arena_release_ion_alloc_buffer_fallback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  if (event_case() == kIonAllocBufferFallback) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_fallback_;
    _impl_.event_.ion_alloc_buffer_fallback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_alloc_buffer_fallback(::perfetto::protos::IonAllocBufferFallbackFtraceEvent* ion_alloc_buffer_fallback) {
  clear_event();
  if (ion_alloc_buffer_fallback) {
    set_has_ion_alloc_buffer_fallback();
    _impl_.event_.ion_alloc_buffer_fallback_ = ion_alloc_buffer_fallback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
}
inline ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* FtraceEvent::_internal_mutable_ion_alloc_buffer_fallback() {
  if (event_case() != kIonAllocBufferFallback) {
    clear_event();
    set_has_ion_alloc_buffer_fallback();
    _impl_.event_.ion_alloc_buffer_fallback_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferFallbackFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_alloc_buffer_fallback_;
}
inline ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_fallback() {
  ::perfetto::protos::IonAllocBufferFallbackFtraceEvent* _msg = _internal_mutable_ion_alloc_buffer_fallback();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback)
  return _msg;
}

// .perfetto.protos.IonAllocBufferStartFtraceEvent ion_alloc_buffer_start = 287;
inline bool FtraceEvent::has_ion_alloc_buffer_start() const {
  return event_case() == kIonAllocBufferStart;
}
inline bool FtraceEvent::_internal_has_ion_alloc_buffer_start() const {
  return event_case() == kIonAllocBufferStart;
}
inline void FtraceEvent::set_has_ion_alloc_buffer_start() {
  _impl_._oneof_case_[0] = kIonAllocBufferStart;
}
inline ::perfetto::protos::IonAllocBufferStartFtraceEvent* FtraceEvent::release_ion_alloc_buffer_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  if (event_case() == kIonAllocBufferStart) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferStartFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_alloc_buffer_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonAllocBufferStartFtraceEvent& FtraceEvent::_internal_ion_alloc_buffer_start() const {
  return event_case() == kIonAllocBufferStart
      ? *_impl_.event_.ion_alloc_buffer_start_
      : reinterpret_cast<::perfetto::protos::IonAllocBufferStartFtraceEvent&>(::perfetto::protos::_IonAllocBufferStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonAllocBufferStartFtraceEvent& FtraceEvent::ion_alloc_buffer_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  return _internal_ion_alloc_buffer_start();
}
inline ::perfetto::protos::IonAllocBufferStartFtraceEvent* FtraceEvent::unsafe_arena_release_ion_alloc_buffer_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  if (event_case() == kIonAllocBufferStart) {
    clear_has_event();
    ::perfetto::protos::IonAllocBufferStartFtraceEvent* temp = _impl_.event_.ion_alloc_buffer_start_;
    _impl_.event_.ion_alloc_buffer_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_alloc_buffer_start(::perfetto::protos::IonAllocBufferStartFtraceEvent* ion_alloc_buffer_start) {
  clear_event();
  if (ion_alloc_buffer_start) {
    set_has_ion_alloc_buffer_start();
    _impl_.event_.ion_alloc_buffer_start_ = ion_alloc_buffer_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
}
inline ::perfetto::protos::IonAllocBufferStartFtraceEvent* FtraceEvent::_internal_mutable_ion_alloc_buffer_start() {
  if (event_case() != kIonAllocBufferStart) {
    clear_event();
    set_has_ion_alloc_buffer_start();
    _impl_.event_.ion_alloc_buffer_start_ = CreateMaybeMessage< ::perfetto::protos::IonAllocBufferStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_alloc_buffer_start_;
}
inline ::perfetto::protos::IonAllocBufferStartFtraceEvent* FtraceEvent::mutable_ion_alloc_buffer_start() {
  ::perfetto::protos::IonAllocBufferStartFtraceEvent* _msg = _internal_mutable_ion_alloc_buffer_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_alloc_buffer_start)
  return _msg;
}

// .perfetto.protos.IonCpAllocRetryFtraceEvent ion_cp_alloc_retry = 288;
inline bool FtraceEvent::has_ion_cp_alloc_retry() const {
  return event_case() == kIonCpAllocRetry;
}
inline bool FtraceEvent::_internal_has_ion_cp_alloc_retry() const {
  return event_case() == kIonCpAllocRetry;
}
inline void FtraceEvent::set_has_ion_cp_alloc_retry() {
  _impl_._oneof_case_[0] = kIonCpAllocRetry;
}
inline ::perfetto::protos::IonCpAllocRetryFtraceEvent* FtraceEvent::release_ion_cp_alloc_retry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  if (event_case() == kIonCpAllocRetry) {
    clear_has_event();
    ::perfetto::protos::IonCpAllocRetryFtraceEvent* temp = _impl_.event_.ion_cp_alloc_retry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_cp_alloc_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonCpAllocRetryFtraceEvent& FtraceEvent::_internal_ion_cp_alloc_retry() const {
  return event_case() == kIonCpAllocRetry
      ? *_impl_.event_.ion_cp_alloc_retry_
      : reinterpret_cast<::perfetto::protos::IonCpAllocRetryFtraceEvent&>(::perfetto::protos::_IonCpAllocRetryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonCpAllocRetryFtraceEvent& FtraceEvent::ion_cp_alloc_retry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  return _internal_ion_cp_alloc_retry();
}
inline ::perfetto::protos::IonCpAllocRetryFtraceEvent* FtraceEvent::unsafe_arena_release_ion_cp_alloc_retry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  if (event_case() == kIonCpAllocRetry) {
    clear_has_event();
    ::perfetto::protos::IonCpAllocRetryFtraceEvent* temp = _impl_.event_.ion_cp_alloc_retry_;
    _impl_.event_.ion_cp_alloc_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_cp_alloc_retry(::perfetto::protos::IonCpAllocRetryFtraceEvent* ion_cp_alloc_retry) {
  clear_event();
  if (ion_cp_alloc_retry) {
    set_has_ion_cp_alloc_retry();
    _impl_.event_.ion_cp_alloc_retry_ = ion_cp_alloc_retry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
}
inline ::perfetto::protos::IonCpAllocRetryFtraceEvent* FtraceEvent::_internal_mutable_ion_cp_alloc_retry() {
  if (event_case() != kIonCpAllocRetry) {
    clear_event();
    set_has_ion_cp_alloc_retry();
    _impl_.event_.ion_cp_alloc_retry_ = CreateMaybeMessage< ::perfetto::protos::IonCpAllocRetryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_cp_alloc_retry_;
}
inline ::perfetto::protos::IonCpAllocRetryFtraceEvent* FtraceEvent::mutable_ion_cp_alloc_retry() {
  ::perfetto::protos::IonCpAllocRetryFtraceEvent* _msg = _internal_mutable_ion_cp_alloc_retry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_cp_alloc_retry)
  return _msg;
}

// .perfetto.protos.IonCpSecureBufferEndFtraceEvent ion_cp_secure_buffer_end = 289;
inline bool FtraceEvent::has_ion_cp_secure_buffer_end() const {
  return event_case() == kIonCpSecureBufferEnd;
}
inline bool FtraceEvent::_internal_has_ion_cp_secure_buffer_end() const {
  return event_case() == kIonCpSecureBufferEnd;
}
inline void FtraceEvent::set_has_ion_cp_secure_buffer_end() {
  _impl_._oneof_case_[0] = kIonCpSecureBufferEnd;
}
inline ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* FtraceEvent::release_ion_cp_secure_buffer_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  if (event_case() == kIonCpSecureBufferEnd) {
    clear_has_event();
    ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* temp = _impl_.event_.ion_cp_secure_buffer_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_cp_secure_buffer_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& FtraceEvent::_internal_ion_cp_secure_buffer_end() const {
  return event_case() == kIonCpSecureBufferEnd
      ? *_impl_.event_.ion_cp_secure_buffer_end_
      : reinterpret_cast<::perfetto::protos::IonCpSecureBufferEndFtraceEvent&>(::perfetto::protos::_IonCpSecureBufferEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonCpSecureBufferEndFtraceEvent& FtraceEvent::ion_cp_secure_buffer_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  return _internal_ion_cp_secure_buffer_end();
}
inline ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* FtraceEvent::unsafe_arena_release_ion_cp_secure_buffer_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  if (event_case() == kIonCpSecureBufferEnd) {
    clear_has_event();
    ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* temp = _impl_.event_.ion_cp_secure_buffer_end_;
    _impl_.event_.ion_cp_secure_buffer_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_cp_secure_buffer_end(::perfetto::protos::IonCpSecureBufferEndFtraceEvent* ion_cp_secure_buffer_end) {
  clear_event();
  if (ion_cp_secure_buffer_end) {
    set_has_ion_cp_secure_buffer_end();
    _impl_.event_.ion_cp_secure_buffer_end_ = ion_cp_secure_buffer_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
}
inline ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* FtraceEvent::_internal_mutable_ion_cp_secure_buffer_end() {
  if (event_case() != kIonCpSecureBufferEnd) {
    clear_event();
    set_has_ion_cp_secure_buffer_end();
    _impl_.event_.ion_cp_secure_buffer_end_ = CreateMaybeMessage< ::perfetto::protos::IonCpSecureBufferEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_cp_secure_buffer_end_;
}
inline ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* FtraceEvent::mutable_ion_cp_secure_buffer_end() {
  ::perfetto::protos::IonCpSecureBufferEndFtraceEvent* _msg = _internal_mutable_ion_cp_secure_buffer_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end)
  return _msg;
}

// .perfetto.protos.IonCpSecureBufferStartFtraceEvent ion_cp_secure_buffer_start = 290;
inline bool FtraceEvent::has_ion_cp_secure_buffer_start() const {
  return event_case() == kIonCpSecureBufferStart;
}
inline bool FtraceEvent::_internal_has_ion_cp_secure_buffer_start() const {
  return event_case() == kIonCpSecureBufferStart;
}
inline void FtraceEvent::set_has_ion_cp_secure_buffer_start() {
  _impl_._oneof_case_[0] = kIonCpSecureBufferStart;
}
inline ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* FtraceEvent::release_ion_cp_secure_buffer_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  if (event_case() == kIonCpSecureBufferStart) {
    clear_has_event();
    ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* temp = _impl_.event_.ion_cp_secure_buffer_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_cp_secure_buffer_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& FtraceEvent::_internal_ion_cp_secure_buffer_start() const {
  return event_case() == kIonCpSecureBufferStart
      ? *_impl_.event_.ion_cp_secure_buffer_start_
      : reinterpret_cast<::perfetto::protos::IonCpSecureBufferStartFtraceEvent&>(::perfetto::protos::_IonCpSecureBufferStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonCpSecureBufferStartFtraceEvent& FtraceEvent::ion_cp_secure_buffer_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  return _internal_ion_cp_secure_buffer_start();
}
inline ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* FtraceEvent::unsafe_arena_release_ion_cp_secure_buffer_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  if (event_case() == kIonCpSecureBufferStart) {
    clear_has_event();
    ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* temp = _impl_.event_.ion_cp_secure_buffer_start_;
    _impl_.event_.ion_cp_secure_buffer_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_cp_secure_buffer_start(::perfetto::protos::IonCpSecureBufferStartFtraceEvent* ion_cp_secure_buffer_start) {
  clear_event();
  if (ion_cp_secure_buffer_start) {
    set_has_ion_cp_secure_buffer_start();
    _impl_.event_.ion_cp_secure_buffer_start_ = ion_cp_secure_buffer_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
}
inline ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* FtraceEvent::_internal_mutable_ion_cp_secure_buffer_start() {
  if (event_case() != kIonCpSecureBufferStart) {
    clear_event();
    set_has_ion_cp_secure_buffer_start();
    _impl_.event_.ion_cp_secure_buffer_start_ = CreateMaybeMessage< ::perfetto::protos::IonCpSecureBufferStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_cp_secure_buffer_start_;
}
inline ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* FtraceEvent::mutable_ion_cp_secure_buffer_start() {
  ::perfetto::protos::IonCpSecureBufferStartFtraceEvent* _msg = _internal_mutable_ion_cp_secure_buffer_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start)
  return _msg;
}

// .perfetto.protos.IonPrefetchingFtraceEvent ion_prefetching = 291;
inline bool FtraceEvent::has_ion_prefetching() const {
  return event_case() == kIonPrefetching;
}
inline bool FtraceEvent::_internal_has_ion_prefetching() const {
  return event_case() == kIonPrefetching;
}
inline void FtraceEvent::set_has_ion_prefetching() {
  _impl_._oneof_case_[0] = kIonPrefetching;
}
inline ::perfetto::protos::IonPrefetchingFtraceEvent* FtraceEvent::release_ion_prefetching() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_prefetching)
  if (event_case() == kIonPrefetching) {
    clear_has_event();
    ::perfetto::protos::IonPrefetchingFtraceEvent* temp = _impl_.event_.ion_prefetching_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_prefetching_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonPrefetchingFtraceEvent& FtraceEvent::_internal_ion_prefetching() const {
  return event_case() == kIonPrefetching
      ? *_impl_.event_.ion_prefetching_
      : reinterpret_cast<::perfetto::protos::IonPrefetchingFtraceEvent&>(::perfetto::protos::_IonPrefetchingFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonPrefetchingFtraceEvent& FtraceEvent::ion_prefetching() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_prefetching)
  return _internal_ion_prefetching();
}
inline ::perfetto::protos::IonPrefetchingFtraceEvent* FtraceEvent::unsafe_arena_release_ion_prefetching() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_prefetching)
  if (event_case() == kIonPrefetching) {
    clear_has_event();
    ::perfetto::protos::IonPrefetchingFtraceEvent* temp = _impl_.event_.ion_prefetching_;
    _impl_.event_.ion_prefetching_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_prefetching(::perfetto::protos::IonPrefetchingFtraceEvent* ion_prefetching) {
  clear_event();
  if (ion_prefetching) {
    set_has_ion_prefetching();
    _impl_.event_.ion_prefetching_ = ion_prefetching;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_prefetching)
}
inline ::perfetto::protos::IonPrefetchingFtraceEvent* FtraceEvent::_internal_mutable_ion_prefetching() {
  if (event_case() != kIonPrefetching) {
    clear_event();
    set_has_ion_prefetching();
    _impl_.event_.ion_prefetching_ = CreateMaybeMessage< ::perfetto::protos::IonPrefetchingFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_prefetching_;
}
inline ::perfetto::protos::IonPrefetchingFtraceEvent* FtraceEvent::mutable_ion_prefetching() {
  ::perfetto::protos::IonPrefetchingFtraceEvent* _msg = _internal_mutable_ion_prefetching();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_prefetching)
  return _msg;
}

// .perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent ion_secure_cma_add_to_pool_end = 292;
inline bool FtraceEvent::has_ion_secure_cma_add_to_pool_end() const {
  return event_case() == kIonSecureCmaAddToPoolEnd;
}
inline bool FtraceEvent::_internal_has_ion_secure_cma_add_to_pool_end() const {
  return event_case() == kIonSecureCmaAddToPoolEnd;
}
inline void FtraceEvent::set_has_ion_secure_cma_add_to_pool_end() {
  _impl_._oneof_case_[0] = kIonSecureCmaAddToPoolEnd;
}
inline ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* FtraceEvent::release_ion_secure_cma_add_to_pool_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  if (event_case() == kIonSecureCmaAddToPoolEnd) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* temp = _impl_.event_.ion_secure_cma_add_to_pool_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_secure_cma_add_to_pool_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& FtraceEvent::_internal_ion_secure_cma_add_to_pool_end() const {
  return event_case() == kIonSecureCmaAddToPoolEnd
      ? *_impl_.event_.ion_secure_cma_add_to_pool_end_
      : reinterpret_cast<::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent&>(::perfetto::protos::_IonSecureCmaAddToPoolEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent& FtraceEvent::ion_secure_cma_add_to_pool_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  return _internal_ion_secure_cma_add_to_pool_end();
}
inline ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* FtraceEvent::unsafe_arena_release_ion_secure_cma_add_to_pool_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  if (event_case() == kIonSecureCmaAddToPoolEnd) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* temp = _impl_.event_.ion_secure_cma_add_to_pool_end_;
    _impl_.event_.ion_secure_cma_add_to_pool_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_secure_cma_add_to_pool_end(::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* ion_secure_cma_add_to_pool_end) {
  clear_event();
  if (ion_secure_cma_add_to_pool_end) {
    set_has_ion_secure_cma_add_to_pool_end();
    _impl_.event_.ion_secure_cma_add_to_pool_end_ = ion_secure_cma_add_to_pool_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
}
inline ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* FtraceEvent::_internal_mutable_ion_secure_cma_add_to_pool_end() {
  if (event_case() != kIonSecureCmaAddToPoolEnd) {
    clear_event();
    set_has_ion_secure_cma_add_to_pool_end();
    _impl_.event_.ion_secure_cma_add_to_pool_end_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_secure_cma_add_to_pool_end_;
}
inline ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* FtraceEvent::mutable_ion_secure_cma_add_to_pool_end() {
  ::perfetto::protos::IonSecureCmaAddToPoolEndFtraceEvent* _msg = _internal_mutable_ion_secure_cma_add_to_pool_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end)
  return _msg;
}

// .perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent ion_secure_cma_add_to_pool_start = 293;
inline bool FtraceEvent::has_ion_secure_cma_add_to_pool_start() const {
  return event_case() == kIonSecureCmaAddToPoolStart;
}
inline bool FtraceEvent::_internal_has_ion_secure_cma_add_to_pool_start() const {
  return event_case() == kIonSecureCmaAddToPoolStart;
}
inline void FtraceEvent::set_has_ion_secure_cma_add_to_pool_start() {
  _impl_._oneof_case_[0] = kIonSecureCmaAddToPoolStart;
}
inline ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* FtraceEvent::release_ion_secure_cma_add_to_pool_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  if (event_case() == kIonSecureCmaAddToPoolStart) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* temp = _impl_.event_.ion_secure_cma_add_to_pool_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_secure_cma_add_to_pool_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& FtraceEvent::_internal_ion_secure_cma_add_to_pool_start() const {
  return event_case() == kIonSecureCmaAddToPoolStart
      ? *_impl_.event_.ion_secure_cma_add_to_pool_start_
      : reinterpret_cast<::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent&>(::perfetto::protos::_IonSecureCmaAddToPoolStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent& FtraceEvent::ion_secure_cma_add_to_pool_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  return _internal_ion_secure_cma_add_to_pool_start();
}
inline ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* FtraceEvent::unsafe_arena_release_ion_secure_cma_add_to_pool_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  if (event_case() == kIonSecureCmaAddToPoolStart) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* temp = _impl_.event_.ion_secure_cma_add_to_pool_start_;
    _impl_.event_.ion_secure_cma_add_to_pool_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_secure_cma_add_to_pool_start(::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* ion_secure_cma_add_to_pool_start) {
  clear_event();
  if (ion_secure_cma_add_to_pool_start) {
    set_has_ion_secure_cma_add_to_pool_start();
    _impl_.event_.ion_secure_cma_add_to_pool_start_ = ion_secure_cma_add_to_pool_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
}
inline ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* FtraceEvent::_internal_mutable_ion_secure_cma_add_to_pool_start() {
  if (event_case() != kIonSecureCmaAddToPoolStart) {
    clear_event();
    set_has_ion_secure_cma_add_to_pool_start();
    _impl_.event_.ion_secure_cma_add_to_pool_start_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_secure_cma_add_to_pool_start_;
}
inline ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* FtraceEvent::mutable_ion_secure_cma_add_to_pool_start() {
  ::perfetto::protos::IonSecureCmaAddToPoolStartFtraceEvent* _msg = _internal_mutable_ion_secure_cma_add_to_pool_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start)
  return _msg;
}

// .perfetto.protos.IonSecureCmaAllocateEndFtraceEvent ion_secure_cma_allocate_end = 294;
inline bool FtraceEvent::has_ion_secure_cma_allocate_end() const {
  return event_case() == kIonSecureCmaAllocateEnd;
}
inline bool FtraceEvent::_internal_has_ion_secure_cma_allocate_end() const {
  return event_case() == kIonSecureCmaAllocateEnd;
}
inline void FtraceEvent::set_has_ion_secure_cma_allocate_end() {
  _impl_._oneof_case_[0] = kIonSecureCmaAllocateEnd;
}
inline ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* FtraceEvent::release_ion_secure_cma_allocate_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  if (event_case() == kIonSecureCmaAllocateEnd) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* temp = _impl_.event_.ion_secure_cma_allocate_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_secure_cma_allocate_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& FtraceEvent::_internal_ion_secure_cma_allocate_end() const {
  return event_case() == kIonSecureCmaAllocateEnd
      ? *_impl_.event_.ion_secure_cma_allocate_end_
      : reinterpret_cast<::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent&>(::perfetto::protos::_IonSecureCmaAllocateEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent& FtraceEvent::ion_secure_cma_allocate_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  return _internal_ion_secure_cma_allocate_end();
}
inline ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* FtraceEvent::unsafe_arena_release_ion_secure_cma_allocate_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  if (event_case() == kIonSecureCmaAllocateEnd) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* temp = _impl_.event_.ion_secure_cma_allocate_end_;
    _impl_.event_.ion_secure_cma_allocate_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_secure_cma_allocate_end(::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* ion_secure_cma_allocate_end) {
  clear_event();
  if (ion_secure_cma_allocate_end) {
    set_has_ion_secure_cma_allocate_end();
    _impl_.event_.ion_secure_cma_allocate_end_ = ion_secure_cma_allocate_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
}
inline ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* FtraceEvent::_internal_mutable_ion_secure_cma_allocate_end() {
  if (event_case() != kIonSecureCmaAllocateEnd) {
    clear_event();
    set_has_ion_secure_cma_allocate_end();
    _impl_.event_.ion_secure_cma_allocate_end_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_secure_cma_allocate_end_;
}
inline ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* FtraceEvent::mutable_ion_secure_cma_allocate_end() {
  ::perfetto::protos::IonSecureCmaAllocateEndFtraceEvent* _msg = _internal_mutable_ion_secure_cma_allocate_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end)
  return _msg;
}

// .perfetto.protos.IonSecureCmaAllocateStartFtraceEvent ion_secure_cma_allocate_start = 295;
inline bool FtraceEvent::has_ion_secure_cma_allocate_start() const {
  return event_case() == kIonSecureCmaAllocateStart;
}
inline bool FtraceEvent::_internal_has_ion_secure_cma_allocate_start() const {
  return event_case() == kIonSecureCmaAllocateStart;
}
inline void FtraceEvent::set_has_ion_secure_cma_allocate_start() {
  _impl_._oneof_case_[0] = kIonSecureCmaAllocateStart;
}
inline ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* FtraceEvent::release_ion_secure_cma_allocate_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  if (event_case() == kIonSecureCmaAllocateStart) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* temp = _impl_.event_.ion_secure_cma_allocate_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_secure_cma_allocate_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& FtraceEvent::_internal_ion_secure_cma_allocate_start() const {
  return event_case() == kIonSecureCmaAllocateStart
      ? *_impl_.event_.ion_secure_cma_allocate_start_
      : reinterpret_cast<::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent&>(::perfetto::protos::_IonSecureCmaAllocateStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent& FtraceEvent::ion_secure_cma_allocate_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  return _internal_ion_secure_cma_allocate_start();
}
inline ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* FtraceEvent::unsafe_arena_release_ion_secure_cma_allocate_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  if (event_case() == kIonSecureCmaAllocateStart) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* temp = _impl_.event_.ion_secure_cma_allocate_start_;
    _impl_.event_.ion_secure_cma_allocate_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_secure_cma_allocate_start(::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* ion_secure_cma_allocate_start) {
  clear_event();
  if (ion_secure_cma_allocate_start) {
    set_has_ion_secure_cma_allocate_start();
    _impl_.event_.ion_secure_cma_allocate_start_ = ion_secure_cma_allocate_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
}
inline ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* FtraceEvent::_internal_mutable_ion_secure_cma_allocate_start() {
  if (event_case() != kIonSecureCmaAllocateStart) {
    clear_event();
    set_has_ion_secure_cma_allocate_start();
    _impl_.event_.ion_secure_cma_allocate_start_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_secure_cma_allocate_start_;
}
inline ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* FtraceEvent::mutable_ion_secure_cma_allocate_start() {
  ::perfetto::protos::IonSecureCmaAllocateStartFtraceEvent* _msg = _internal_mutable_ion_secure_cma_allocate_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start)
  return _msg;
}

// .perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent ion_secure_cma_shrink_pool_end = 296;
inline bool FtraceEvent::has_ion_secure_cma_shrink_pool_end() const {
  return event_case() == kIonSecureCmaShrinkPoolEnd;
}
inline bool FtraceEvent::_internal_has_ion_secure_cma_shrink_pool_end() const {
  return event_case() == kIonSecureCmaShrinkPoolEnd;
}
inline void FtraceEvent::set_has_ion_secure_cma_shrink_pool_end() {
  _impl_._oneof_case_[0] = kIonSecureCmaShrinkPoolEnd;
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* FtraceEvent::release_ion_secure_cma_shrink_pool_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  if (event_case() == kIonSecureCmaShrinkPoolEnd) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* temp = _impl_.event_.ion_secure_cma_shrink_pool_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_secure_cma_shrink_pool_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& FtraceEvent::_internal_ion_secure_cma_shrink_pool_end() const {
  return event_case() == kIonSecureCmaShrinkPoolEnd
      ? *_impl_.event_.ion_secure_cma_shrink_pool_end_
      : reinterpret_cast<::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent&>(::perfetto::protos::_IonSecureCmaShrinkPoolEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent& FtraceEvent::ion_secure_cma_shrink_pool_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  return _internal_ion_secure_cma_shrink_pool_end();
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* FtraceEvent::unsafe_arena_release_ion_secure_cma_shrink_pool_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  if (event_case() == kIonSecureCmaShrinkPoolEnd) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* temp = _impl_.event_.ion_secure_cma_shrink_pool_end_;
    _impl_.event_.ion_secure_cma_shrink_pool_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_secure_cma_shrink_pool_end(::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* ion_secure_cma_shrink_pool_end) {
  clear_event();
  if (ion_secure_cma_shrink_pool_end) {
    set_has_ion_secure_cma_shrink_pool_end();
    _impl_.event_.ion_secure_cma_shrink_pool_end_ = ion_secure_cma_shrink_pool_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* FtraceEvent::_internal_mutable_ion_secure_cma_shrink_pool_end() {
  if (event_case() != kIonSecureCmaShrinkPoolEnd) {
    clear_event();
    set_has_ion_secure_cma_shrink_pool_end();
    _impl_.event_.ion_secure_cma_shrink_pool_end_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_secure_cma_shrink_pool_end_;
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* FtraceEvent::mutable_ion_secure_cma_shrink_pool_end() {
  ::perfetto::protos::IonSecureCmaShrinkPoolEndFtraceEvent* _msg = _internal_mutable_ion_secure_cma_shrink_pool_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end)
  return _msg;
}

// .perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent ion_secure_cma_shrink_pool_start = 297;
inline bool FtraceEvent::has_ion_secure_cma_shrink_pool_start() const {
  return event_case() == kIonSecureCmaShrinkPoolStart;
}
inline bool FtraceEvent::_internal_has_ion_secure_cma_shrink_pool_start() const {
  return event_case() == kIonSecureCmaShrinkPoolStart;
}
inline void FtraceEvent::set_has_ion_secure_cma_shrink_pool_start() {
  _impl_._oneof_case_[0] = kIonSecureCmaShrinkPoolStart;
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* FtraceEvent::release_ion_secure_cma_shrink_pool_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  if (event_case() == kIonSecureCmaShrinkPoolStart) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* temp = _impl_.event_.ion_secure_cma_shrink_pool_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_secure_cma_shrink_pool_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& FtraceEvent::_internal_ion_secure_cma_shrink_pool_start() const {
  return event_case() == kIonSecureCmaShrinkPoolStart
      ? *_impl_.event_.ion_secure_cma_shrink_pool_start_
      : reinterpret_cast<::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent&>(::perfetto::protos::_IonSecureCmaShrinkPoolStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent& FtraceEvent::ion_secure_cma_shrink_pool_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  return _internal_ion_secure_cma_shrink_pool_start();
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* FtraceEvent::unsafe_arena_release_ion_secure_cma_shrink_pool_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  if (event_case() == kIonSecureCmaShrinkPoolStart) {
    clear_has_event();
    ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* temp = _impl_.event_.ion_secure_cma_shrink_pool_start_;
    _impl_.event_.ion_secure_cma_shrink_pool_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_secure_cma_shrink_pool_start(::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* ion_secure_cma_shrink_pool_start) {
  clear_event();
  if (ion_secure_cma_shrink_pool_start) {
    set_has_ion_secure_cma_shrink_pool_start();
    _impl_.event_.ion_secure_cma_shrink_pool_start_ = ion_secure_cma_shrink_pool_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* FtraceEvent::_internal_mutable_ion_secure_cma_shrink_pool_start() {
  if (event_case() != kIonSecureCmaShrinkPoolStart) {
    clear_event();
    set_has_ion_secure_cma_shrink_pool_start();
    _impl_.event_.ion_secure_cma_shrink_pool_start_ = CreateMaybeMessage< ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_secure_cma_shrink_pool_start_;
}
inline ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* FtraceEvent::mutable_ion_secure_cma_shrink_pool_start() {
  ::perfetto::protos::IonSecureCmaShrinkPoolStartFtraceEvent* _msg = _internal_mutable_ion_secure_cma_shrink_pool_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start)
  return _msg;
}

// .perfetto.protos.KfreeFtraceEvent kfree = 298;
inline bool FtraceEvent::has_kfree() const {
  return event_case() == kKfree;
}
inline bool FtraceEvent::_internal_has_kfree() const {
  return event_case() == kKfree;
}
inline void FtraceEvent::set_has_kfree() {
  _impl_._oneof_case_[0] = kKfree;
}
inline ::perfetto::protos::KfreeFtraceEvent* FtraceEvent::release_kfree() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kfree)
  if (event_case() == kKfree) {
    clear_has_event();
    ::perfetto::protos::KfreeFtraceEvent* temp = _impl_.event_.kfree_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kfree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KfreeFtraceEvent& FtraceEvent::_internal_kfree() const {
  return event_case() == kKfree
      ? *_impl_.event_.kfree_
      : reinterpret_cast<::perfetto::protos::KfreeFtraceEvent&>(::perfetto::protos::_KfreeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KfreeFtraceEvent& FtraceEvent::kfree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kfree)
  return _internal_kfree();
}
inline ::perfetto::protos::KfreeFtraceEvent* FtraceEvent::unsafe_arena_release_kfree() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kfree)
  if (event_case() == kKfree) {
    clear_has_event();
    ::perfetto::protos::KfreeFtraceEvent* temp = _impl_.event_.kfree_;
    _impl_.event_.kfree_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kfree(::perfetto::protos::KfreeFtraceEvent* kfree) {
  clear_event();
  if (kfree) {
    set_has_kfree();
    _impl_.event_.kfree_ = kfree;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kfree)
}
inline ::perfetto::protos::KfreeFtraceEvent* FtraceEvent::_internal_mutable_kfree() {
  if (event_case() != kKfree) {
    clear_event();
    set_has_kfree();
    _impl_.event_.kfree_ = CreateMaybeMessage< ::perfetto::protos::KfreeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kfree_;
}
inline ::perfetto::protos::KfreeFtraceEvent* FtraceEvent::mutable_kfree() {
  ::perfetto::protos::KfreeFtraceEvent* _msg = _internal_mutable_kfree();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kfree)
  return _msg;
}

// .perfetto.protos.KmallocFtraceEvent kmalloc = 299;
inline bool FtraceEvent::has_kmalloc() const {
  return event_case() == kKmalloc;
}
inline bool FtraceEvent::_internal_has_kmalloc() const {
  return event_case() == kKmalloc;
}
inline void FtraceEvent::set_has_kmalloc() {
  _impl_._oneof_case_[0] = kKmalloc;
}
inline ::perfetto::protos::KmallocFtraceEvent* FtraceEvent::release_kmalloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmalloc)
  if (event_case() == kKmalloc) {
    clear_has_event();
    ::perfetto::protos::KmallocFtraceEvent* temp = _impl_.event_.kmalloc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kmalloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmallocFtraceEvent& FtraceEvent::_internal_kmalloc() const {
  return event_case() == kKmalloc
      ? *_impl_.event_.kmalloc_
      : reinterpret_cast<::perfetto::protos::KmallocFtraceEvent&>(::perfetto::protos::_KmallocFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KmallocFtraceEvent& FtraceEvent::kmalloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmalloc)
  return _internal_kmalloc();
}
inline ::perfetto::protos::KmallocFtraceEvent* FtraceEvent::unsafe_arena_release_kmalloc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kmalloc)
  if (event_case() == kKmalloc) {
    clear_has_event();
    ::perfetto::protos::KmallocFtraceEvent* temp = _impl_.event_.kmalloc_;
    _impl_.event_.kmalloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kmalloc(::perfetto::protos::KmallocFtraceEvent* kmalloc) {
  clear_event();
  if (kmalloc) {
    set_has_kmalloc();
    _impl_.event_.kmalloc_ = kmalloc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kmalloc)
}
inline ::perfetto::protos::KmallocFtraceEvent* FtraceEvent::_internal_mutable_kmalloc() {
  if (event_case() != kKmalloc) {
    clear_event();
    set_has_kmalloc();
    _impl_.event_.kmalloc_ = CreateMaybeMessage< ::perfetto::protos::KmallocFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kmalloc_;
}
inline ::perfetto::protos::KmallocFtraceEvent* FtraceEvent::mutable_kmalloc() {
  ::perfetto::protos::KmallocFtraceEvent* _msg = _internal_mutable_kmalloc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmalloc)
  return _msg;
}

// .perfetto.protos.KmallocNodeFtraceEvent kmalloc_node = 300;
inline bool FtraceEvent::has_kmalloc_node() const {
  return event_case() == kKmallocNode;
}
inline bool FtraceEvent::_internal_has_kmalloc_node() const {
  return event_case() == kKmallocNode;
}
inline void FtraceEvent::set_has_kmalloc_node() {
  _impl_._oneof_case_[0] = kKmallocNode;
}
inline ::perfetto::protos::KmallocNodeFtraceEvent* FtraceEvent::release_kmalloc_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmalloc_node)
  if (event_case() == kKmallocNode) {
    clear_has_event();
    ::perfetto::protos::KmallocNodeFtraceEvent* temp = _impl_.event_.kmalloc_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kmalloc_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmallocNodeFtraceEvent& FtraceEvent::_internal_kmalloc_node() const {
  return event_case() == kKmallocNode
      ? *_impl_.event_.kmalloc_node_
      : reinterpret_cast<::perfetto::protos::KmallocNodeFtraceEvent&>(::perfetto::protos::_KmallocNodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KmallocNodeFtraceEvent& FtraceEvent::kmalloc_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmalloc_node)
  return _internal_kmalloc_node();
}
inline ::perfetto::protos::KmallocNodeFtraceEvent* FtraceEvent::unsafe_arena_release_kmalloc_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kmalloc_node)
  if (event_case() == kKmallocNode) {
    clear_has_event();
    ::perfetto::protos::KmallocNodeFtraceEvent* temp = _impl_.event_.kmalloc_node_;
    _impl_.event_.kmalloc_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kmalloc_node(::perfetto::protos::KmallocNodeFtraceEvent* kmalloc_node) {
  clear_event();
  if (kmalloc_node) {
    set_has_kmalloc_node();
    _impl_.event_.kmalloc_node_ = kmalloc_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kmalloc_node)
}
inline ::perfetto::protos::KmallocNodeFtraceEvent* FtraceEvent::_internal_mutable_kmalloc_node() {
  if (event_case() != kKmallocNode) {
    clear_event();
    set_has_kmalloc_node();
    _impl_.event_.kmalloc_node_ = CreateMaybeMessage< ::perfetto::protos::KmallocNodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kmalloc_node_;
}
inline ::perfetto::protos::KmallocNodeFtraceEvent* FtraceEvent::mutable_kmalloc_node() {
  ::perfetto::protos::KmallocNodeFtraceEvent* _msg = _internal_mutable_kmalloc_node();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmalloc_node)
  return _msg;
}

// .perfetto.protos.KmemCacheAllocFtraceEvent kmem_cache_alloc = 301;
inline bool FtraceEvent::has_kmem_cache_alloc() const {
  return event_case() == kKmemCacheAlloc;
}
inline bool FtraceEvent::_internal_has_kmem_cache_alloc() const {
  return event_case() == kKmemCacheAlloc;
}
inline void FtraceEvent::set_has_kmem_cache_alloc() {
  _impl_._oneof_case_[0] = kKmemCacheAlloc;
}
inline ::perfetto::protos::KmemCacheAllocFtraceEvent* FtraceEvent::release_kmem_cache_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  if (event_case() == kKmemCacheAlloc) {
    clear_has_event();
    ::perfetto::protos::KmemCacheAllocFtraceEvent* temp = _impl_.event_.kmem_cache_alloc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kmem_cache_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmemCacheAllocFtraceEvent& FtraceEvent::_internal_kmem_cache_alloc() const {
  return event_case() == kKmemCacheAlloc
      ? *_impl_.event_.kmem_cache_alloc_
      : reinterpret_cast<::perfetto::protos::KmemCacheAllocFtraceEvent&>(::perfetto::protos::_KmemCacheAllocFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KmemCacheAllocFtraceEvent& FtraceEvent::kmem_cache_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  return _internal_kmem_cache_alloc();
}
inline ::perfetto::protos::KmemCacheAllocFtraceEvent* FtraceEvent::unsafe_arena_release_kmem_cache_alloc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  if (event_case() == kKmemCacheAlloc) {
    clear_has_event();
    ::perfetto::protos::KmemCacheAllocFtraceEvent* temp = _impl_.event_.kmem_cache_alloc_;
    _impl_.event_.kmem_cache_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kmem_cache_alloc(::perfetto::protos::KmemCacheAllocFtraceEvent* kmem_cache_alloc) {
  clear_event();
  if (kmem_cache_alloc) {
    set_has_kmem_cache_alloc();
    _impl_.event_.kmem_cache_alloc_ = kmem_cache_alloc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_alloc)
}
inline ::perfetto::protos::KmemCacheAllocFtraceEvent* FtraceEvent::_internal_mutable_kmem_cache_alloc() {
  if (event_case() != kKmemCacheAlloc) {
    clear_event();
    set_has_kmem_cache_alloc();
    _impl_.event_.kmem_cache_alloc_ = CreateMaybeMessage< ::perfetto::protos::KmemCacheAllocFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kmem_cache_alloc_;
}
inline ::perfetto::protos::KmemCacheAllocFtraceEvent* FtraceEvent::mutable_kmem_cache_alloc() {
  ::perfetto::protos::KmemCacheAllocFtraceEvent* _msg = _internal_mutable_kmem_cache_alloc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmem_cache_alloc)
  return _msg;
}

// .perfetto.protos.KmemCacheAllocNodeFtraceEvent kmem_cache_alloc_node = 302;
inline bool FtraceEvent::has_kmem_cache_alloc_node() const {
  return event_case() == kKmemCacheAllocNode;
}
inline bool FtraceEvent::_internal_has_kmem_cache_alloc_node() const {
  return event_case() == kKmemCacheAllocNode;
}
inline void FtraceEvent::set_has_kmem_cache_alloc_node() {
  _impl_._oneof_case_[0] = kKmemCacheAllocNode;
}
inline ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* FtraceEvent::release_kmem_cache_alloc_node() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  if (event_case() == kKmemCacheAllocNode) {
    clear_has_event();
    ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* temp = _impl_.event_.kmem_cache_alloc_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kmem_cache_alloc_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& FtraceEvent::_internal_kmem_cache_alloc_node() const {
  return event_case() == kKmemCacheAllocNode
      ? *_impl_.event_.kmem_cache_alloc_node_
      : reinterpret_cast<::perfetto::protos::KmemCacheAllocNodeFtraceEvent&>(::perfetto::protos::_KmemCacheAllocNodeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KmemCacheAllocNodeFtraceEvent& FtraceEvent::kmem_cache_alloc_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  return _internal_kmem_cache_alloc_node();
}
inline ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* FtraceEvent::unsafe_arena_release_kmem_cache_alloc_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  if (event_case() == kKmemCacheAllocNode) {
    clear_has_event();
    ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* temp = _impl_.event_.kmem_cache_alloc_node_;
    _impl_.event_.kmem_cache_alloc_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kmem_cache_alloc_node(::perfetto::protos::KmemCacheAllocNodeFtraceEvent* kmem_cache_alloc_node) {
  clear_event();
  if (kmem_cache_alloc_node) {
    set_has_kmem_cache_alloc_node();
    _impl_.event_.kmem_cache_alloc_node_ = kmem_cache_alloc_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
}
inline ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* FtraceEvent::_internal_mutable_kmem_cache_alloc_node() {
  if (event_case() != kKmemCacheAllocNode) {
    clear_event();
    set_has_kmem_cache_alloc_node();
    _impl_.event_.kmem_cache_alloc_node_ = CreateMaybeMessage< ::perfetto::protos::KmemCacheAllocNodeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kmem_cache_alloc_node_;
}
inline ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* FtraceEvent::mutable_kmem_cache_alloc_node() {
  ::perfetto::protos::KmemCacheAllocNodeFtraceEvent* _msg = _internal_mutable_kmem_cache_alloc_node();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmem_cache_alloc_node)
  return _msg;
}

// .perfetto.protos.KmemCacheFreeFtraceEvent kmem_cache_free = 303;
inline bool FtraceEvent::has_kmem_cache_free() const {
  return event_case() == kKmemCacheFree;
}
inline bool FtraceEvent::_internal_has_kmem_cache_free() const {
  return event_case() == kKmemCacheFree;
}
inline void FtraceEvent::set_has_kmem_cache_free() {
  _impl_._oneof_case_[0] = kKmemCacheFree;
}
inline ::perfetto::protos::KmemCacheFreeFtraceEvent* FtraceEvent::release_kmem_cache_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kmem_cache_free)
  if (event_case() == kKmemCacheFree) {
    clear_has_event();
    ::perfetto::protos::KmemCacheFreeFtraceEvent* temp = _impl_.event_.kmem_cache_free_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kmem_cache_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KmemCacheFreeFtraceEvent& FtraceEvent::_internal_kmem_cache_free() const {
  return event_case() == kKmemCacheFree
      ? *_impl_.event_.kmem_cache_free_
      : reinterpret_cast<::perfetto::protos::KmemCacheFreeFtraceEvent&>(::perfetto::protos::_KmemCacheFreeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KmemCacheFreeFtraceEvent& FtraceEvent::kmem_cache_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kmem_cache_free)
  return _internal_kmem_cache_free();
}
inline ::perfetto::protos::KmemCacheFreeFtraceEvent* FtraceEvent::unsafe_arena_release_kmem_cache_free() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kmem_cache_free)
  if (event_case() == kKmemCacheFree) {
    clear_has_event();
    ::perfetto::protos::KmemCacheFreeFtraceEvent* temp = _impl_.event_.kmem_cache_free_;
    _impl_.event_.kmem_cache_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kmem_cache_free(::perfetto::protos::KmemCacheFreeFtraceEvent* kmem_cache_free) {
  clear_event();
  if (kmem_cache_free) {
    set_has_kmem_cache_free();
    _impl_.event_.kmem_cache_free_ = kmem_cache_free;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kmem_cache_free)
}
inline ::perfetto::protos::KmemCacheFreeFtraceEvent* FtraceEvent::_internal_mutable_kmem_cache_free() {
  if (event_case() != kKmemCacheFree) {
    clear_event();
    set_has_kmem_cache_free();
    _impl_.event_.kmem_cache_free_ = CreateMaybeMessage< ::perfetto::protos::KmemCacheFreeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kmem_cache_free_;
}
inline ::perfetto::protos::KmemCacheFreeFtraceEvent* FtraceEvent::mutable_kmem_cache_free() {
  ::perfetto::protos::KmemCacheFreeFtraceEvent* _msg = _internal_mutable_kmem_cache_free();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kmem_cache_free)
  return _msg;
}

// .perfetto.protos.MigratePagesEndFtraceEvent migrate_pages_end = 304;
inline bool FtraceEvent::has_migrate_pages_end() const {
  return event_case() == kMigratePagesEnd;
}
inline bool FtraceEvent::_internal_has_migrate_pages_end() const {
  return event_case() == kMigratePagesEnd;
}
inline void FtraceEvent::set_has_migrate_pages_end() {
  _impl_._oneof_case_[0] = kMigratePagesEnd;
}
inline ::perfetto::protos::MigratePagesEndFtraceEvent* FtraceEvent::release_migrate_pages_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.migrate_pages_end)
  if (event_case() == kMigratePagesEnd) {
    clear_has_event();
    ::perfetto::protos::MigratePagesEndFtraceEvent* temp = _impl_.event_.migrate_pages_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.migrate_pages_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MigratePagesEndFtraceEvent& FtraceEvent::_internal_migrate_pages_end() const {
  return event_case() == kMigratePagesEnd
      ? *_impl_.event_.migrate_pages_end_
      : reinterpret_cast<::perfetto::protos::MigratePagesEndFtraceEvent&>(::perfetto::protos::_MigratePagesEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MigratePagesEndFtraceEvent& FtraceEvent::migrate_pages_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.migrate_pages_end)
  return _internal_migrate_pages_end();
}
inline ::perfetto::protos::MigratePagesEndFtraceEvent* FtraceEvent::unsafe_arena_release_migrate_pages_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.migrate_pages_end)
  if (event_case() == kMigratePagesEnd) {
    clear_has_event();
    ::perfetto::protos::MigratePagesEndFtraceEvent* temp = _impl_.event_.migrate_pages_end_;
    _impl_.event_.migrate_pages_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_migrate_pages_end(::perfetto::protos::MigratePagesEndFtraceEvent* migrate_pages_end) {
  clear_event();
  if (migrate_pages_end) {
    set_has_migrate_pages_end();
    _impl_.event_.migrate_pages_end_ = migrate_pages_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.migrate_pages_end)
}
inline ::perfetto::protos::MigratePagesEndFtraceEvent* FtraceEvent::_internal_mutable_migrate_pages_end() {
  if (event_case() != kMigratePagesEnd) {
    clear_event();
    set_has_migrate_pages_end();
    _impl_.event_.migrate_pages_end_ = CreateMaybeMessage< ::perfetto::protos::MigratePagesEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.migrate_pages_end_;
}
inline ::perfetto::protos::MigratePagesEndFtraceEvent* FtraceEvent::mutable_migrate_pages_end() {
  ::perfetto::protos::MigratePagesEndFtraceEvent* _msg = _internal_mutable_migrate_pages_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.migrate_pages_end)
  return _msg;
}

// .perfetto.protos.MigratePagesStartFtraceEvent migrate_pages_start = 305;
inline bool FtraceEvent::has_migrate_pages_start() const {
  return event_case() == kMigratePagesStart;
}
inline bool FtraceEvent::_internal_has_migrate_pages_start() const {
  return event_case() == kMigratePagesStart;
}
inline void FtraceEvent::set_has_migrate_pages_start() {
  _impl_._oneof_case_[0] = kMigratePagesStart;
}
inline ::perfetto::protos::MigratePagesStartFtraceEvent* FtraceEvent::release_migrate_pages_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.migrate_pages_start)
  if (event_case() == kMigratePagesStart) {
    clear_has_event();
    ::perfetto::protos::MigratePagesStartFtraceEvent* temp = _impl_.event_.migrate_pages_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.migrate_pages_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MigratePagesStartFtraceEvent& FtraceEvent::_internal_migrate_pages_start() const {
  return event_case() == kMigratePagesStart
      ? *_impl_.event_.migrate_pages_start_
      : reinterpret_cast<::perfetto::protos::MigratePagesStartFtraceEvent&>(::perfetto::protos::_MigratePagesStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MigratePagesStartFtraceEvent& FtraceEvent::migrate_pages_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.migrate_pages_start)
  return _internal_migrate_pages_start();
}
inline ::perfetto::protos::MigratePagesStartFtraceEvent* FtraceEvent::unsafe_arena_release_migrate_pages_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.migrate_pages_start)
  if (event_case() == kMigratePagesStart) {
    clear_has_event();
    ::perfetto::protos::MigratePagesStartFtraceEvent* temp = _impl_.event_.migrate_pages_start_;
    _impl_.event_.migrate_pages_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_migrate_pages_start(::perfetto::protos::MigratePagesStartFtraceEvent* migrate_pages_start) {
  clear_event();
  if (migrate_pages_start) {
    set_has_migrate_pages_start();
    _impl_.event_.migrate_pages_start_ = migrate_pages_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.migrate_pages_start)
}
inline ::perfetto::protos::MigratePagesStartFtraceEvent* FtraceEvent::_internal_mutable_migrate_pages_start() {
  if (event_case() != kMigratePagesStart) {
    clear_event();
    set_has_migrate_pages_start();
    _impl_.event_.migrate_pages_start_ = CreateMaybeMessage< ::perfetto::protos::MigratePagesStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.migrate_pages_start_;
}
inline ::perfetto::protos::MigratePagesStartFtraceEvent* FtraceEvent::mutable_migrate_pages_start() {
  ::perfetto::protos::MigratePagesStartFtraceEvent* _msg = _internal_mutable_migrate_pages_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.migrate_pages_start)
  return _msg;
}

// .perfetto.protos.MigrateRetryFtraceEvent migrate_retry = 306;
inline bool FtraceEvent::has_migrate_retry() const {
  return event_case() == kMigrateRetry;
}
inline bool FtraceEvent::_internal_has_migrate_retry() const {
  return event_case() == kMigrateRetry;
}
inline void FtraceEvent::set_has_migrate_retry() {
  _impl_._oneof_case_[0] = kMigrateRetry;
}
inline ::perfetto::protos::MigrateRetryFtraceEvent* FtraceEvent::release_migrate_retry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.migrate_retry)
  if (event_case() == kMigrateRetry) {
    clear_has_event();
    ::perfetto::protos::MigrateRetryFtraceEvent* temp = _impl_.event_.migrate_retry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.migrate_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MigrateRetryFtraceEvent& FtraceEvent::_internal_migrate_retry() const {
  return event_case() == kMigrateRetry
      ? *_impl_.event_.migrate_retry_
      : reinterpret_cast<::perfetto::protos::MigrateRetryFtraceEvent&>(::perfetto::protos::_MigrateRetryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MigrateRetryFtraceEvent& FtraceEvent::migrate_retry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.migrate_retry)
  return _internal_migrate_retry();
}
inline ::perfetto::protos::MigrateRetryFtraceEvent* FtraceEvent::unsafe_arena_release_migrate_retry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.migrate_retry)
  if (event_case() == kMigrateRetry) {
    clear_has_event();
    ::perfetto::protos::MigrateRetryFtraceEvent* temp = _impl_.event_.migrate_retry_;
    _impl_.event_.migrate_retry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_migrate_retry(::perfetto::protos::MigrateRetryFtraceEvent* migrate_retry) {
  clear_event();
  if (migrate_retry) {
    set_has_migrate_retry();
    _impl_.event_.migrate_retry_ = migrate_retry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.migrate_retry)
}
inline ::perfetto::protos::MigrateRetryFtraceEvent* FtraceEvent::_internal_mutable_migrate_retry() {
  if (event_case() != kMigrateRetry) {
    clear_event();
    set_has_migrate_retry();
    _impl_.event_.migrate_retry_ = CreateMaybeMessage< ::perfetto::protos::MigrateRetryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.migrate_retry_;
}
inline ::perfetto::protos::MigrateRetryFtraceEvent* FtraceEvent::mutable_migrate_retry() {
  ::perfetto::protos::MigrateRetryFtraceEvent* _msg = _internal_mutable_migrate_retry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.migrate_retry)
  return _msg;
}

// .perfetto.protos.MmPageAllocFtraceEvent mm_page_alloc = 307;
inline bool FtraceEvent::has_mm_page_alloc() const {
  return event_case() == kMmPageAlloc;
}
inline bool FtraceEvent::_internal_has_mm_page_alloc() const {
  return event_case() == kMmPageAlloc;
}
inline void FtraceEvent::set_has_mm_page_alloc() {
  _impl_._oneof_case_[0] = kMmPageAlloc;
}
inline ::perfetto::protos::MmPageAllocFtraceEvent* FtraceEvent::release_mm_page_alloc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_alloc)
  if (event_case() == kMmPageAlloc) {
    clear_has_event();
    ::perfetto::protos::MmPageAllocFtraceEvent* temp = _impl_.event_.mm_page_alloc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_page_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageAllocFtraceEvent& FtraceEvent::_internal_mm_page_alloc() const {
  return event_case() == kMmPageAlloc
      ? *_impl_.event_.mm_page_alloc_
      : reinterpret_cast<::perfetto::protos::MmPageAllocFtraceEvent&>(::perfetto::protos::_MmPageAllocFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmPageAllocFtraceEvent& FtraceEvent::mm_page_alloc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_alloc)
  return _internal_mm_page_alloc();
}
inline ::perfetto::protos::MmPageAllocFtraceEvent* FtraceEvent::unsafe_arena_release_mm_page_alloc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_page_alloc)
  if (event_case() == kMmPageAlloc) {
    clear_has_event();
    ::perfetto::protos::MmPageAllocFtraceEvent* temp = _impl_.event_.mm_page_alloc_;
    _impl_.event_.mm_page_alloc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_page_alloc(::perfetto::protos::MmPageAllocFtraceEvent* mm_page_alloc) {
  clear_event();
  if (mm_page_alloc) {
    set_has_mm_page_alloc();
    _impl_.event_.mm_page_alloc_ = mm_page_alloc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc)
}
inline ::perfetto::protos::MmPageAllocFtraceEvent* FtraceEvent::_internal_mutable_mm_page_alloc() {
  if (event_case() != kMmPageAlloc) {
    clear_event();
    set_has_mm_page_alloc();
    _impl_.event_.mm_page_alloc_ = CreateMaybeMessage< ::perfetto::protos::MmPageAllocFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_page_alloc_;
}
inline ::perfetto::protos::MmPageAllocFtraceEvent* FtraceEvent::mutable_mm_page_alloc() {
  ::perfetto::protos::MmPageAllocFtraceEvent* _msg = _internal_mutable_mm_page_alloc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_alloc)
  return _msg;
}

// .perfetto.protos.MmPageAllocExtfragFtraceEvent mm_page_alloc_extfrag = 308;
inline bool FtraceEvent::has_mm_page_alloc_extfrag() const {
  return event_case() == kMmPageAllocExtfrag;
}
inline bool FtraceEvent::_internal_has_mm_page_alloc_extfrag() const {
  return event_case() == kMmPageAllocExtfrag;
}
inline void FtraceEvent::set_has_mm_page_alloc_extfrag() {
  _impl_._oneof_case_[0] = kMmPageAllocExtfrag;
}
inline ::perfetto::protos::MmPageAllocExtfragFtraceEvent* FtraceEvent::release_mm_page_alloc_extfrag() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  if (event_case() == kMmPageAllocExtfrag) {
    clear_has_event();
    ::perfetto::protos::MmPageAllocExtfragFtraceEvent* temp = _impl_.event_.mm_page_alloc_extfrag_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_page_alloc_extfrag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& FtraceEvent::_internal_mm_page_alloc_extfrag() const {
  return event_case() == kMmPageAllocExtfrag
      ? *_impl_.event_.mm_page_alloc_extfrag_
      : reinterpret_cast<::perfetto::protos::MmPageAllocExtfragFtraceEvent&>(::perfetto::protos::_MmPageAllocExtfragFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmPageAllocExtfragFtraceEvent& FtraceEvent::mm_page_alloc_extfrag() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  return _internal_mm_page_alloc_extfrag();
}
inline ::perfetto::protos::MmPageAllocExtfragFtraceEvent* FtraceEvent::unsafe_arena_release_mm_page_alloc_extfrag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  if (event_case() == kMmPageAllocExtfrag) {
    clear_has_event();
    ::perfetto::protos::MmPageAllocExtfragFtraceEvent* temp = _impl_.event_.mm_page_alloc_extfrag_;
    _impl_.event_.mm_page_alloc_extfrag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_page_alloc_extfrag(::perfetto::protos::MmPageAllocExtfragFtraceEvent* mm_page_alloc_extfrag) {
  clear_event();
  if (mm_page_alloc_extfrag) {
    set_has_mm_page_alloc_extfrag();
    _impl_.event_.mm_page_alloc_extfrag_ = mm_page_alloc_extfrag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
}
inline ::perfetto::protos::MmPageAllocExtfragFtraceEvent* FtraceEvent::_internal_mutable_mm_page_alloc_extfrag() {
  if (event_case() != kMmPageAllocExtfrag) {
    clear_event();
    set_has_mm_page_alloc_extfrag();
    _impl_.event_.mm_page_alloc_extfrag_ = CreateMaybeMessage< ::perfetto::protos::MmPageAllocExtfragFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_page_alloc_extfrag_;
}
inline ::perfetto::protos::MmPageAllocExtfragFtraceEvent* FtraceEvent::mutable_mm_page_alloc_extfrag() {
  ::perfetto::protos::MmPageAllocExtfragFtraceEvent* _msg = _internal_mutable_mm_page_alloc_extfrag();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_alloc_extfrag)
  return _msg;
}

// .perfetto.protos.MmPageAllocZoneLockedFtraceEvent mm_page_alloc_zone_locked = 309;
inline bool FtraceEvent::has_mm_page_alloc_zone_locked() const {
  return event_case() == kMmPageAllocZoneLocked;
}
inline bool FtraceEvent::_internal_has_mm_page_alloc_zone_locked() const {
  return event_case() == kMmPageAllocZoneLocked;
}
inline void FtraceEvent::set_has_mm_page_alloc_zone_locked() {
  _impl_._oneof_case_[0] = kMmPageAllocZoneLocked;
}
inline ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* FtraceEvent::release_mm_page_alloc_zone_locked() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  if (event_case() == kMmPageAllocZoneLocked) {
    clear_has_event();
    ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* temp = _impl_.event_.mm_page_alloc_zone_locked_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_page_alloc_zone_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& FtraceEvent::_internal_mm_page_alloc_zone_locked() const {
  return event_case() == kMmPageAllocZoneLocked
      ? *_impl_.event_.mm_page_alloc_zone_locked_
      : reinterpret_cast<::perfetto::protos::MmPageAllocZoneLockedFtraceEvent&>(::perfetto::protos::_MmPageAllocZoneLockedFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent& FtraceEvent::mm_page_alloc_zone_locked() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  return _internal_mm_page_alloc_zone_locked();
}
inline ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* FtraceEvent::unsafe_arena_release_mm_page_alloc_zone_locked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  if (event_case() == kMmPageAllocZoneLocked) {
    clear_has_event();
    ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* temp = _impl_.event_.mm_page_alloc_zone_locked_;
    _impl_.event_.mm_page_alloc_zone_locked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_page_alloc_zone_locked(::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* mm_page_alloc_zone_locked) {
  clear_event();
  if (mm_page_alloc_zone_locked) {
    set_has_mm_page_alloc_zone_locked();
    _impl_.event_.mm_page_alloc_zone_locked_ = mm_page_alloc_zone_locked;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
}
inline ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* FtraceEvent::_internal_mutable_mm_page_alloc_zone_locked() {
  if (event_case() != kMmPageAllocZoneLocked) {
    clear_event();
    set_has_mm_page_alloc_zone_locked();
    _impl_.event_.mm_page_alloc_zone_locked_ = CreateMaybeMessage< ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_page_alloc_zone_locked_;
}
inline ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* FtraceEvent::mutable_mm_page_alloc_zone_locked() {
  ::perfetto::protos::MmPageAllocZoneLockedFtraceEvent* _msg = _internal_mutable_mm_page_alloc_zone_locked();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked)
  return _msg;
}

// .perfetto.protos.MmPageFreeFtraceEvent mm_page_free = 310;
inline bool FtraceEvent::has_mm_page_free() const {
  return event_case() == kMmPageFree;
}
inline bool FtraceEvent::_internal_has_mm_page_free() const {
  return event_case() == kMmPageFree;
}
inline void FtraceEvent::set_has_mm_page_free() {
  _impl_._oneof_case_[0] = kMmPageFree;
}
inline ::perfetto::protos::MmPageFreeFtraceEvent* FtraceEvent::release_mm_page_free() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_free)
  if (event_case() == kMmPageFree) {
    clear_has_event();
    ::perfetto::protos::MmPageFreeFtraceEvent* temp = _impl_.event_.mm_page_free_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_page_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageFreeFtraceEvent& FtraceEvent::_internal_mm_page_free() const {
  return event_case() == kMmPageFree
      ? *_impl_.event_.mm_page_free_
      : reinterpret_cast<::perfetto::protos::MmPageFreeFtraceEvent&>(::perfetto::protos::_MmPageFreeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmPageFreeFtraceEvent& FtraceEvent::mm_page_free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_free)
  return _internal_mm_page_free();
}
inline ::perfetto::protos::MmPageFreeFtraceEvent* FtraceEvent::unsafe_arena_release_mm_page_free() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_page_free)
  if (event_case() == kMmPageFree) {
    clear_has_event();
    ::perfetto::protos::MmPageFreeFtraceEvent* temp = _impl_.event_.mm_page_free_;
    _impl_.event_.mm_page_free_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_page_free(::perfetto::protos::MmPageFreeFtraceEvent* mm_page_free) {
  clear_event();
  if (mm_page_free) {
    set_has_mm_page_free();
    _impl_.event_.mm_page_free_ = mm_page_free;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_page_free)
}
inline ::perfetto::protos::MmPageFreeFtraceEvent* FtraceEvent::_internal_mutable_mm_page_free() {
  if (event_case() != kMmPageFree) {
    clear_event();
    set_has_mm_page_free();
    _impl_.event_.mm_page_free_ = CreateMaybeMessage< ::perfetto::protos::MmPageFreeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_page_free_;
}
inline ::perfetto::protos::MmPageFreeFtraceEvent* FtraceEvent::mutable_mm_page_free() {
  ::perfetto::protos::MmPageFreeFtraceEvent* _msg = _internal_mutable_mm_page_free();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_free)
  return _msg;
}

// .perfetto.protos.MmPageFreeBatchedFtraceEvent mm_page_free_batched = 311;
inline bool FtraceEvent::has_mm_page_free_batched() const {
  return event_case() == kMmPageFreeBatched;
}
inline bool FtraceEvent::_internal_has_mm_page_free_batched() const {
  return event_case() == kMmPageFreeBatched;
}
inline void FtraceEvent::set_has_mm_page_free_batched() {
  _impl_._oneof_case_[0] = kMmPageFreeBatched;
}
inline ::perfetto::protos::MmPageFreeBatchedFtraceEvent* FtraceEvent::release_mm_page_free_batched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_free_batched)
  if (event_case() == kMmPageFreeBatched) {
    clear_has_event();
    ::perfetto::protos::MmPageFreeBatchedFtraceEvent* temp = _impl_.event_.mm_page_free_batched_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_page_free_batched_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& FtraceEvent::_internal_mm_page_free_batched() const {
  return event_case() == kMmPageFreeBatched
      ? *_impl_.event_.mm_page_free_batched_
      : reinterpret_cast<::perfetto::protos::MmPageFreeBatchedFtraceEvent&>(::perfetto::protos::_MmPageFreeBatchedFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmPageFreeBatchedFtraceEvent& FtraceEvent::mm_page_free_batched() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_free_batched)
  return _internal_mm_page_free_batched();
}
inline ::perfetto::protos::MmPageFreeBatchedFtraceEvent* FtraceEvent::unsafe_arena_release_mm_page_free_batched() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_page_free_batched)
  if (event_case() == kMmPageFreeBatched) {
    clear_has_event();
    ::perfetto::protos::MmPageFreeBatchedFtraceEvent* temp = _impl_.event_.mm_page_free_batched_;
    _impl_.event_.mm_page_free_batched_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_page_free_batched(::perfetto::protos::MmPageFreeBatchedFtraceEvent* mm_page_free_batched) {
  clear_event();
  if (mm_page_free_batched) {
    set_has_mm_page_free_batched();
    _impl_.event_.mm_page_free_batched_ = mm_page_free_batched;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_page_free_batched)
}
inline ::perfetto::protos::MmPageFreeBatchedFtraceEvent* FtraceEvent::_internal_mutable_mm_page_free_batched() {
  if (event_case() != kMmPageFreeBatched) {
    clear_event();
    set_has_mm_page_free_batched();
    _impl_.event_.mm_page_free_batched_ = CreateMaybeMessage< ::perfetto::protos::MmPageFreeBatchedFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_page_free_batched_;
}
inline ::perfetto::protos::MmPageFreeBatchedFtraceEvent* FtraceEvent::mutable_mm_page_free_batched() {
  ::perfetto::protos::MmPageFreeBatchedFtraceEvent* _msg = _internal_mutable_mm_page_free_batched();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_free_batched)
  return _msg;
}

// .perfetto.protos.MmPagePcpuDrainFtraceEvent mm_page_pcpu_drain = 312;
inline bool FtraceEvent::has_mm_page_pcpu_drain() const {
  return event_case() == kMmPagePcpuDrain;
}
inline bool FtraceEvent::_internal_has_mm_page_pcpu_drain() const {
  return event_case() == kMmPagePcpuDrain;
}
inline void FtraceEvent::set_has_mm_page_pcpu_drain() {
  _impl_._oneof_case_[0] = kMmPagePcpuDrain;
}
inline ::perfetto::protos::MmPagePcpuDrainFtraceEvent* FtraceEvent::release_mm_page_pcpu_drain() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  if (event_case() == kMmPagePcpuDrain) {
    clear_has_event();
    ::perfetto::protos::MmPagePcpuDrainFtraceEvent* temp = _impl_.event_.mm_page_pcpu_drain_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_page_pcpu_drain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& FtraceEvent::_internal_mm_page_pcpu_drain() const {
  return event_case() == kMmPagePcpuDrain
      ? *_impl_.event_.mm_page_pcpu_drain_
      : reinterpret_cast<::perfetto::protos::MmPagePcpuDrainFtraceEvent&>(::perfetto::protos::_MmPagePcpuDrainFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmPagePcpuDrainFtraceEvent& FtraceEvent::mm_page_pcpu_drain() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  return _internal_mm_page_pcpu_drain();
}
inline ::perfetto::protos::MmPagePcpuDrainFtraceEvent* FtraceEvent::unsafe_arena_release_mm_page_pcpu_drain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  if (event_case() == kMmPagePcpuDrain) {
    clear_has_event();
    ::perfetto::protos::MmPagePcpuDrainFtraceEvent* temp = _impl_.event_.mm_page_pcpu_drain_;
    _impl_.event_.mm_page_pcpu_drain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_page_pcpu_drain(::perfetto::protos::MmPagePcpuDrainFtraceEvent* mm_page_pcpu_drain) {
  clear_event();
  if (mm_page_pcpu_drain) {
    set_has_mm_page_pcpu_drain();
    _impl_.event_.mm_page_pcpu_drain_ = mm_page_pcpu_drain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
}
inline ::perfetto::protos::MmPagePcpuDrainFtraceEvent* FtraceEvent::_internal_mutable_mm_page_pcpu_drain() {
  if (event_case() != kMmPagePcpuDrain) {
    clear_event();
    set_has_mm_page_pcpu_drain();
    _impl_.event_.mm_page_pcpu_drain_ = CreateMaybeMessage< ::perfetto::protos::MmPagePcpuDrainFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_page_pcpu_drain_;
}
inline ::perfetto::protos::MmPagePcpuDrainFtraceEvent* FtraceEvent::mutable_mm_page_pcpu_drain() {
  ::perfetto::protos::MmPagePcpuDrainFtraceEvent* _msg = _internal_mutable_mm_page_pcpu_drain();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_page_pcpu_drain)
  return _msg;
}

// .perfetto.protos.RssStatFtraceEvent rss_stat = 313;
inline bool FtraceEvent::has_rss_stat() const {
  return event_case() == kRssStat;
}
inline bool FtraceEvent::_internal_has_rss_stat() const {
  return event_case() == kRssStat;
}
inline void FtraceEvent::set_has_rss_stat() {
  _impl_._oneof_case_[0] = kRssStat;
}
inline ::perfetto::protos::RssStatFtraceEvent* FtraceEvent::release_rss_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.rss_stat)
  if (event_case() == kRssStat) {
    clear_has_event();
    ::perfetto::protos::RssStatFtraceEvent* temp = _impl_.event_.rss_stat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.rss_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RssStatFtraceEvent& FtraceEvent::_internal_rss_stat() const {
  return event_case() == kRssStat
      ? *_impl_.event_.rss_stat_
      : reinterpret_cast<::perfetto::protos::RssStatFtraceEvent&>(::perfetto::protos::_RssStatFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RssStatFtraceEvent& FtraceEvent::rss_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.rss_stat)
  return _internal_rss_stat();
}
inline ::perfetto::protos::RssStatFtraceEvent* FtraceEvent::unsafe_arena_release_rss_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.rss_stat)
  if (event_case() == kRssStat) {
    clear_has_event();
    ::perfetto::protos::RssStatFtraceEvent* temp = _impl_.event_.rss_stat_;
    _impl_.event_.rss_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_rss_stat(::perfetto::protos::RssStatFtraceEvent* rss_stat) {
  clear_event();
  if (rss_stat) {
    set_has_rss_stat();
    _impl_.event_.rss_stat_ = rss_stat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.rss_stat)
}
inline ::perfetto::protos::RssStatFtraceEvent* FtraceEvent::_internal_mutable_rss_stat() {
  if (event_case() != kRssStat) {
    clear_event();
    set_has_rss_stat();
    _impl_.event_.rss_stat_ = CreateMaybeMessage< ::perfetto::protos::RssStatFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.rss_stat_;
}
inline ::perfetto::protos::RssStatFtraceEvent* FtraceEvent::mutable_rss_stat() {
  ::perfetto::protos::RssStatFtraceEvent* _msg = _internal_mutable_rss_stat();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.rss_stat)
  return _msg;
}

// .perfetto.protos.IonHeapShrinkFtraceEvent ion_heap_shrink = 314;
inline bool FtraceEvent::has_ion_heap_shrink() const {
  return event_case() == kIonHeapShrink;
}
inline bool FtraceEvent::_internal_has_ion_heap_shrink() const {
  return event_case() == kIonHeapShrink;
}
inline void FtraceEvent::set_has_ion_heap_shrink() {
  _impl_._oneof_case_[0] = kIonHeapShrink;
}
inline ::perfetto::protos::IonHeapShrinkFtraceEvent* FtraceEvent::release_ion_heap_shrink() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_heap_shrink)
  if (event_case() == kIonHeapShrink) {
    clear_has_event();
    ::perfetto::protos::IonHeapShrinkFtraceEvent* temp = _impl_.event_.ion_heap_shrink_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_heap_shrink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonHeapShrinkFtraceEvent& FtraceEvent::_internal_ion_heap_shrink() const {
  return event_case() == kIonHeapShrink
      ? *_impl_.event_.ion_heap_shrink_
      : reinterpret_cast<::perfetto::protos::IonHeapShrinkFtraceEvent&>(::perfetto::protos::_IonHeapShrinkFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonHeapShrinkFtraceEvent& FtraceEvent::ion_heap_shrink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_heap_shrink)
  return _internal_ion_heap_shrink();
}
inline ::perfetto::protos::IonHeapShrinkFtraceEvent* FtraceEvent::unsafe_arena_release_ion_heap_shrink() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_heap_shrink)
  if (event_case() == kIonHeapShrink) {
    clear_has_event();
    ::perfetto::protos::IonHeapShrinkFtraceEvent* temp = _impl_.event_.ion_heap_shrink_;
    _impl_.event_.ion_heap_shrink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_heap_shrink(::perfetto::protos::IonHeapShrinkFtraceEvent* ion_heap_shrink) {
  clear_event();
  if (ion_heap_shrink) {
    set_has_ion_heap_shrink();
    _impl_.event_.ion_heap_shrink_ = ion_heap_shrink;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_heap_shrink)
}
inline ::perfetto::protos::IonHeapShrinkFtraceEvent* FtraceEvent::_internal_mutable_ion_heap_shrink() {
  if (event_case() != kIonHeapShrink) {
    clear_event();
    set_has_ion_heap_shrink();
    _impl_.event_.ion_heap_shrink_ = CreateMaybeMessage< ::perfetto::protos::IonHeapShrinkFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_heap_shrink_;
}
inline ::perfetto::protos::IonHeapShrinkFtraceEvent* FtraceEvent::mutable_ion_heap_shrink() {
  ::perfetto::protos::IonHeapShrinkFtraceEvent* _msg = _internal_mutable_ion_heap_shrink();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_heap_shrink)
  return _msg;
}

// .perfetto.protos.IonHeapGrowFtraceEvent ion_heap_grow = 315;
inline bool FtraceEvent::has_ion_heap_grow() const {
  return event_case() == kIonHeapGrow;
}
inline bool FtraceEvent::_internal_has_ion_heap_grow() const {
  return event_case() == kIonHeapGrow;
}
inline void FtraceEvent::set_has_ion_heap_grow() {
  _impl_._oneof_case_[0] = kIonHeapGrow;
}
inline ::perfetto::protos::IonHeapGrowFtraceEvent* FtraceEvent::release_ion_heap_grow() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_heap_grow)
  if (event_case() == kIonHeapGrow) {
    clear_has_event();
    ::perfetto::protos::IonHeapGrowFtraceEvent* temp = _impl_.event_.ion_heap_grow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_heap_grow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonHeapGrowFtraceEvent& FtraceEvent::_internal_ion_heap_grow() const {
  return event_case() == kIonHeapGrow
      ? *_impl_.event_.ion_heap_grow_
      : reinterpret_cast<::perfetto::protos::IonHeapGrowFtraceEvent&>(::perfetto::protos::_IonHeapGrowFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonHeapGrowFtraceEvent& FtraceEvent::ion_heap_grow() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_heap_grow)
  return _internal_ion_heap_grow();
}
inline ::perfetto::protos::IonHeapGrowFtraceEvent* FtraceEvent::unsafe_arena_release_ion_heap_grow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_heap_grow)
  if (event_case() == kIonHeapGrow) {
    clear_has_event();
    ::perfetto::protos::IonHeapGrowFtraceEvent* temp = _impl_.event_.ion_heap_grow_;
    _impl_.event_.ion_heap_grow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_heap_grow(::perfetto::protos::IonHeapGrowFtraceEvent* ion_heap_grow) {
  clear_event();
  if (ion_heap_grow) {
    set_has_ion_heap_grow();
    _impl_.event_.ion_heap_grow_ = ion_heap_grow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_heap_grow)
}
inline ::perfetto::protos::IonHeapGrowFtraceEvent* FtraceEvent::_internal_mutable_ion_heap_grow() {
  if (event_case() != kIonHeapGrow) {
    clear_event();
    set_has_ion_heap_grow();
    _impl_.event_.ion_heap_grow_ = CreateMaybeMessage< ::perfetto::protos::IonHeapGrowFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_heap_grow_;
}
inline ::perfetto::protos::IonHeapGrowFtraceEvent* FtraceEvent::mutable_ion_heap_grow() {
  ::perfetto::protos::IonHeapGrowFtraceEvent* _msg = _internal_mutable_ion_heap_grow();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_heap_grow)
  return _msg;
}

// .perfetto.protos.FenceInitFtraceEvent fence_init = 316;
inline bool FtraceEvent::has_fence_init() const {
  return event_case() == kFenceInit;
}
inline bool FtraceEvent::_internal_has_fence_init() const {
  return event_case() == kFenceInit;
}
inline void FtraceEvent::set_has_fence_init() {
  _impl_._oneof_case_[0] = kFenceInit;
}
inline ::perfetto::protos::FenceInitFtraceEvent* FtraceEvent::release_fence_init() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_init)
  if (event_case() == kFenceInit) {
    clear_has_event();
    ::perfetto::protos::FenceInitFtraceEvent* temp = _impl_.event_.fence_init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.fence_init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceInitFtraceEvent& FtraceEvent::_internal_fence_init() const {
  return event_case() == kFenceInit
      ? *_impl_.event_.fence_init_
      : reinterpret_cast<::perfetto::protos::FenceInitFtraceEvent&>(::perfetto::protos::_FenceInitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FenceInitFtraceEvent& FtraceEvent::fence_init() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_init)
  return _internal_fence_init();
}
inline ::perfetto::protos::FenceInitFtraceEvent* FtraceEvent::unsafe_arena_release_fence_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.fence_init)
  if (event_case() == kFenceInit) {
    clear_has_event();
    ::perfetto::protos::FenceInitFtraceEvent* temp = _impl_.event_.fence_init_;
    _impl_.event_.fence_init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_fence_init(::perfetto::protos::FenceInitFtraceEvent* fence_init) {
  clear_event();
  if (fence_init) {
    set_has_fence_init();
    _impl_.event_.fence_init_ = fence_init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.fence_init)
}
inline ::perfetto::protos::FenceInitFtraceEvent* FtraceEvent::_internal_mutable_fence_init() {
  if (event_case() != kFenceInit) {
    clear_event();
    set_has_fence_init();
    _impl_.event_.fence_init_ = CreateMaybeMessage< ::perfetto::protos::FenceInitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.fence_init_;
}
inline ::perfetto::protos::FenceInitFtraceEvent* FtraceEvent::mutable_fence_init() {
  ::perfetto::protos::FenceInitFtraceEvent* _msg = _internal_mutable_fence_init();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_init)
  return _msg;
}

// .perfetto.protos.FenceDestroyFtraceEvent fence_destroy = 317;
inline bool FtraceEvent::has_fence_destroy() const {
  return event_case() == kFenceDestroy;
}
inline bool FtraceEvent::_internal_has_fence_destroy() const {
  return event_case() == kFenceDestroy;
}
inline void FtraceEvent::set_has_fence_destroy() {
  _impl_._oneof_case_[0] = kFenceDestroy;
}
inline ::perfetto::protos::FenceDestroyFtraceEvent* FtraceEvent::release_fence_destroy() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_destroy)
  if (event_case() == kFenceDestroy) {
    clear_has_event();
    ::perfetto::protos::FenceDestroyFtraceEvent* temp = _impl_.event_.fence_destroy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.fence_destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceDestroyFtraceEvent& FtraceEvent::_internal_fence_destroy() const {
  return event_case() == kFenceDestroy
      ? *_impl_.event_.fence_destroy_
      : reinterpret_cast<::perfetto::protos::FenceDestroyFtraceEvent&>(::perfetto::protos::_FenceDestroyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FenceDestroyFtraceEvent& FtraceEvent::fence_destroy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_destroy)
  return _internal_fence_destroy();
}
inline ::perfetto::protos::FenceDestroyFtraceEvent* FtraceEvent::unsafe_arena_release_fence_destroy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.fence_destroy)
  if (event_case() == kFenceDestroy) {
    clear_has_event();
    ::perfetto::protos::FenceDestroyFtraceEvent* temp = _impl_.event_.fence_destroy_;
    _impl_.event_.fence_destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_fence_destroy(::perfetto::protos::FenceDestroyFtraceEvent* fence_destroy) {
  clear_event();
  if (fence_destroy) {
    set_has_fence_destroy();
    _impl_.event_.fence_destroy_ = fence_destroy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.fence_destroy)
}
inline ::perfetto::protos::FenceDestroyFtraceEvent* FtraceEvent::_internal_mutable_fence_destroy() {
  if (event_case() != kFenceDestroy) {
    clear_event();
    set_has_fence_destroy();
    _impl_.event_.fence_destroy_ = CreateMaybeMessage< ::perfetto::protos::FenceDestroyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.fence_destroy_;
}
inline ::perfetto::protos::FenceDestroyFtraceEvent* FtraceEvent::mutable_fence_destroy() {
  ::perfetto::protos::FenceDestroyFtraceEvent* _msg = _internal_mutable_fence_destroy();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_destroy)
  return _msg;
}

// .perfetto.protos.FenceEnableSignalFtraceEvent fence_enable_signal = 318;
inline bool FtraceEvent::has_fence_enable_signal() const {
  return event_case() == kFenceEnableSignal;
}
inline bool FtraceEvent::_internal_has_fence_enable_signal() const {
  return event_case() == kFenceEnableSignal;
}
inline void FtraceEvent::set_has_fence_enable_signal() {
  _impl_._oneof_case_[0] = kFenceEnableSignal;
}
inline ::perfetto::protos::FenceEnableSignalFtraceEvent* FtraceEvent::release_fence_enable_signal() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_enable_signal)
  if (event_case() == kFenceEnableSignal) {
    clear_has_event();
    ::perfetto::protos::FenceEnableSignalFtraceEvent* temp = _impl_.event_.fence_enable_signal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.fence_enable_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceEnableSignalFtraceEvent& FtraceEvent::_internal_fence_enable_signal() const {
  return event_case() == kFenceEnableSignal
      ? *_impl_.event_.fence_enable_signal_
      : reinterpret_cast<::perfetto::protos::FenceEnableSignalFtraceEvent&>(::perfetto::protos::_FenceEnableSignalFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FenceEnableSignalFtraceEvent& FtraceEvent::fence_enable_signal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_enable_signal)
  return _internal_fence_enable_signal();
}
inline ::perfetto::protos::FenceEnableSignalFtraceEvent* FtraceEvent::unsafe_arena_release_fence_enable_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.fence_enable_signal)
  if (event_case() == kFenceEnableSignal) {
    clear_has_event();
    ::perfetto::protos::FenceEnableSignalFtraceEvent* temp = _impl_.event_.fence_enable_signal_;
    _impl_.event_.fence_enable_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_fence_enable_signal(::perfetto::protos::FenceEnableSignalFtraceEvent* fence_enable_signal) {
  clear_event();
  if (fence_enable_signal) {
    set_has_fence_enable_signal();
    _impl_.event_.fence_enable_signal_ = fence_enable_signal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.fence_enable_signal)
}
inline ::perfetto::protos::FenceEnableSignalFtraceEvent* FtraceEvent::_internal_mutable_fence_enable_signal() {
  if (event_case() != kFenceEnableSignal) {
    clear_event();
    set_has_fence_enable_signal();
    _impl_.event_.fence_enable_signal_ = CreateMaybeMessage< ::perfetto::protos::FenceEnableSignalFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.fence_enable_signal_;
}
inline ::perfetto::protos::FenceEnableSignalFtraceEvent* FtraceEvent::mutable_fence_enable_signal() {
  ::perfetto::protos::FenceEnableSignalFtraceEvent* _msg = _internal_mutable_fence_enable_signal();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_enable_signal)
  return _msg;
}

// .perfetto.protos.FenceSignaledFtraceEvent fence_signaled = 319;
inline bool FtraceEvent::has_fence_signaled() const {
  return event_case() == kFenceSignaled;
}
inline bool FtraceEvent::_internal_has_fence_signaled() const {
  return event_case() == kFenceSignaled;
}
inline void FtraceEvent::set_has_fence_signaled() {
  _impl_._oneof_case_[0] = kFenceSignaled;
}
inline ::perfetto::protos::FenceSignaledFtraceEvent* FtraceEvent::release_fence_signaled() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fence_signaled)
  if (event_case() == kFenceSignaled) {
    clear_has_event();
    ::perfetto::protos::FenceSignaledFtraceEvent* temp = _impl_.event_.fence_signaled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.fence_signaled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FenceSignaledFtraceEvent& FtraceEvent::_internal_fence_signaled() const {
  return event_case() == kFenceSignaled
      ? *_impl_.event_.fence_signaled_
      : reinterpret_cast<::perfetto::protos::FenceSignaledFtraceEvent&>(::perfetto::protos::_FenceSignaledFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FenceSignaledFtraceEvent& FtraceEvent::fence_signaled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fence_signaled)
  return _internal_fence_signaled();
}
inline ::perfetto::protos::FenceSignaledFtraceEvent* FtraceEvent::unsafe_arena_release_fence_signaled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.fence_signaled)
  if (event_case() == kFenceSignaled) {
    clear_has_event();
    ::perfetto::protos::FenceSignaledFtraceEvent* temp = _impl_.event_.fence_signaled_;
    _impl_.event_.fence_signaled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_fence_signaled(::perfetto::protos::FenceSignaledFtraceEvent* fence_signaled) {
  clear_event();
  if (fence_signaled) {
    set_has_fence_signaled();
    _impl_.event_.fence_signaled_ = fence_signaled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.fence_signaled)
}
inline ::perfetto::protos::FenceSignaledFtraceEvent* FtraceEvent::_internal_mutable_fence_signaled() {
  if (event_case() != kFenceSignaled) {
    clear_event();
    set_has_fence_signaled();
    _impl_.event_.fence_signaled_ = CreateMaybeMessage< ::perfetto::protos::FenceSignaledFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.fence_signaled_;
}
inline ::perfetto::protos::FenceSignaledFtraceEvent* FtraceEvent::mutable_fence_signaled() {
  ::perfetto::protos::FenceSignaledFtraceEvent* _msg = _internal_mutable_fence_signaled();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fence_signaled)
  return _msg;
}

// .perfetto.protos.ClkEnableFtraceEvent clk_enable = 320;
inline bool FtraceEvent::has_clk_enable() const {
  return event_case() == kClkEnable;
}
inline bool FtraceEvent::_internal_has_clk_enable() const {
  return event_case() == kClkEnable;
}
inline void FtraceEvent::set_has_clk_enable() {
  _impl_._oneof_case_[0] = kClkEnable;
}
inline ::perfetto::protos::ClkEnableFtraceEvent* FtraceEvent::release_clk_enable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clk_enable)
  if (event_case() == kClkEnable) {
    clear_has_event();
    ::perfetto::protos::ClkEnableFtraceEvent* temp = _impl_.event_.clk_enable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.clk_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClkEnableFtraceEvent& FtraceEvent::_internal_clk_enable() const {
  return event_case() == kClkEnable
      ? *_impl_.event_.clk_enable_
      : reinterpret_cast<::perfetto::protos::ClkEnableFtraceEvent&>(::perfetto::protos::_ClkEnableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ClkEnableFtraceEvent& FtraceEvent::clk_enable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clk_enable)
  return _internal_clk_enable();
}
inline ::perfetto::protos::ClkEnableFtraceEvent* FtraceEvent::unsafe_arena_release_clk_enable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.clk_enable)
  if (event_case() == kClkEnable) {
    clear_has_event();
    ::perfetto::protos::ClkEnableFtraceEvent* temp = _impl_.event_.clk_enable_;
    _impl_.event_.clk_enable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_clk_enable(::perfetto::protos::ClkEnableFtraceEvent* clk_enable) {
  clear_event();
  if (clk_enable) {
    set_has_clk_enable();
    _impl_.event_.clk_enable_ = clk_enable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.clk_enable)
}
inline ::perfetto::protos::ClkEnableFtraceEvent* FtraceEvent::_internal_mutable_clk_enable() {
  if (event_case() != kClkEnable) {
    clear_event();
    set_has_clk_enable();
    _impl_.event_.clk_enable_ = CreateMaybeMessage< ::perfetto::protos::ClkEnableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.clk_enable_;
}
inline ::perfetto::protos::ClkEnableFtraceEvent* FtraceEvent::mutable_clk_enable() {
  ::perfetto::protos::ClkEnableFtraceEvent* _msg = _internal_mutable_clk_enable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clk_enable)
  return _msg;
}

// .perfetto.protos.ClkDisableFtraceEvent clk_disable = 321;
inline bool FtraceEvent::has_clk_disable() const {
  return event_case() == kClkDisable;
}
inline bool FtraceEvent::_internal_has_clk_disable() const {
  return event_case() == kClkDisable;
}
inline void FtraceEvent::set_has_clk_disable() {
  _impl_._oneof_case_[0] = kClkDisable;
}
inline ::perfetto::protos::ClkDisableFtraceEvent* FtraceEvent::release_clk_disable() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clk_disable)
  if (event_case() == kClkDisable) {
    clear_has_event();
    ::perfetto::protos::ClkDisableFtraceEvent* temp = _impl_.event_.clk_disable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.clk_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClkDisableFtraceEvent& FtraceEvent::_internal_clk_disable() const {
  return event_case() == kClkDisable
      ? *_impl_.event_.clk_disable_
      : reinterpret_cast<::perfetto::protos::ClkDisableFtraceEvent&>(::perfetto::protos::_ClkDisableFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ClkDisableFtraceEvent& FtraceEvent::clk_disable() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clk_disable)
  return _internal_clk_disable();
}
inline ::perfetto::protos::ClkDisableFtraceEvent* FtraceEvent::unsafe_arena_release_clk_disable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.clk_disable)
  if (event_case() == kClkDisable) {
    clear_has_event();
    ::perfetto::protos::ClkDisableFtraceEvent* temp = _impl_.event_.clk_disable_;
    _impl_.event_.clk_disable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_clk_disable(::perfetto::protos::ClkDisableFtraceEvent* clk_disable) {
  clear_event();
  if (clk_disable) {
    set_has_clk_disable();
    _impl_.event_.clk_disable_ = clk_disable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.clk_disable)
}
inline ::perfetto::protos::ClkDisableFtraceEvent* FtraceEvent::_internal_mutable_clk_disable() {
  if (event_case() != kClkDisable) {
    clear_event();
    set_has_clk_disable();
    _impl_.event_.clk_disable_ = CreateMaybeMessage< ::perfetto::protos::ClkDisableFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.clk_disable_;
}
inline ::perfetto::protos::ClkDisableFtraceEvent* FtraceEvent::mutable_clk_disable() {
  ::perfetto::protos::ClkDisableFtraceEvent* _msg = _internal_mutable_clk_disable();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clk_disable)
  return _msg;
}

// .perfetto.protos.ClkSetRateFtraceEvent clk_set_rate = 322;
inline bool FtraceEvent::has_clk_set_rate() const {
  return event_case() == kClkSetRate;
}
inline bool FtraceEvent::_internal_has_clk_set_rate() const {
  return event_case() == kClkSetRate;
}
inline void FtraceEvent::set_has_clk_set_rate() {
  _impl_._oneof_case_[0] = kClkSetRate;
}
inline ::perfetto::protos::ClkSetRateFtraceEvent* FtraceEvent::release_clk_set_rate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.clk_set_rate)
  if (event_case() == kClkSetRate) {
    clear_has_event();
    ::perfetto::protos::ClkSetRateFtraceEvent* temp = _impl_.event_.clk_set_rate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.clk_set_rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ClkSetRateFtraceEvent& FtraceEvent::_internal_clk_set_rate() const {
  return event_case() == kClkSetRate
      ? *_impl_.event_.clk_set_rate_
      : reinterpret_cast<::perfetto::protos::ClkSetRateFtraceEvent&>(::perfetto::protos::_ClkSetRateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ClkSetRateFtraceEvent& FtraceEvent::clk_set_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.clk_set_rate)
  return _internal_clk_set_rate();
}
inline ::perfetto::protos::ClkSetRateFtraceEvent* FtraceEvent::unsafe_arena_release_clk_set_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.clk_set_rate)
  if (event_case() == kClkSetRate) {
    clear_has_event();
    ::perfetto::protos::ClkSetRateFtraceEvent* temp = _impl_.event_.clk_set_rate_;
    _impl_.event_.clk_set_rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_clk_set_rate(::perfetto::protos::ClkSetRateFtraceEvent* clk_set_rate) {
  clear_event();
  if (clk_set_rate) {
    set_has_clk_set_rate();
    _impl_.event_.clk_set_rate_ = clk_set_rate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.clk_set_rate)
}
inline ::perfetto::protos::ClkSetRateFtraceEvent* FtraceEvent::_internal_mutable_clk_set_rate() {
  if (event_case() != kClkSetRate) {
    clear_event();
    set_has_clk_set_rate();
    _impl_.event_.clk_set_rate_ = CreateMaybeMessage< ::perfetto::protos::ClkSetRateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.clk_set_rate_;
}
inline ::perfetto::protos::ClkSetRateFtraceEvent* FtraceEvent::mutable_clk_set_rate() {
  ::perfetto::protos::ClkSetRateFtraceEvent* _msg = _internal_mutable_clk_set_rate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.clk_set_rate)
  return _msg;
}

// .perfetto.protos.BinderTransactionAllocBufFtraceEvent binder_transaction_alloc_buf = 323;
inline bool FtraceEvent::has_binder_transaction_alloc_buf() const {
  return event_case() == kBinderTransactionAllocBuf;
}
inline bool FtraceEvent::_internal_has_binder_transaction_alloc_buf() const {
  return event_case() == kBinderTransactionAllocBuf;
}
inline void FtraceEvent::set_has_binder_transaction_alloc_buf() {
  _impl_._oneof_case_[0] = kBinderTransactionAllocBuf;
}
inline ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* FtraceEvent::release_binder_transaction_alloc_buf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  if (event_case() == kBinderTransactionAllocBuf) {
    clear_has_event();
    ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* temp = _impl_.event_.binder_transaction_alloc_buf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.binder_transaction_alloc_buf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& FtraceEvent::_internal_binder_transaction_alloc_buf() const {
  return event_case() == kBinderTransactionAllocBuf
      ? *_impl_.event_.binder_transaction_alloc_buf_
      : reinterpret_cast<::perfetto::protos::BinderTransactionAllocBufFtraceEvent&>(::perfetto::protos::_BinderTransactionAllocBufFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::BinderTransactionAllocBufFtraceEvent& FtraceEvent::binder_transaction_alloc_buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  return _internal_binder_transaction_alloc_buf();
}
inline ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* FtraceEvent::unsafe_arena_release_binder_transaction_alloc_buf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  if (event_case() == kBinderTransactionAllocBuf) {
    clear_has_event();
    ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* temp = _impl_.event_.binder_transaction_alloc_buf_;
    _impl_.event_.binder_transaction_alloc_buf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_binder_transaction_alloc_buf(::perfetto::protos::BinderTransactionAllocBufFtraceEvent* binder_transaction_alloc_buf) {
  clear_event();
  if (binder_transaction_alloc_buf) {
    set_has_binder_transaction_alloc_buf();
    _impl_.event_.binder_transaction_alloc_buf_ = binder_transaction_alloc_buf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
}
inline ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* FtraceEvent::_internal_mutable_binder_transaction_alloc_buf() {
  if (event_case() != kBinderTransactionAllocBuf) {
    clear_event();
    set_has_binder_transaction_alloc_buf();
    _impl_.event_.binder_transaction_alloc_buf_ = CreateMaybeMessage< ::perfetto::protos::BinderTransactionAllocBufFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.binder_transaction_alloc_buf_;
}
inline ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* FtraceEvent::mutable_binder_transaction_alloc_buf() {
  ::perfetto::protos::BinderTransactionAllocBufFtraceEvent* _msg = _internal_mutable_binder_transaction_alloc_buf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.binder_transaction_alloc_buf)
  return _msg;
}

// .perfetto.protos.SignalDeliverFtraceEvent signal_deliver = 324;
inline bool FtraceEvent::has_signal_deliver() const {
  return event_case() == kSignalDeliver;
}
inline bool FtraceEvent::_internal_has_signal_deliver() const {
  return event_case() == kSignalDeliver;
}
inline void FtraceEvent::set_has_signal_deliver() {
  _impl_._oneof_case_[0] = kSignalDeliver;
}
inline ::perfetto::protos::SignalDeliverFtraceEvent* FtraceEvent::release_signal_deliver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.signal_deliver)
  if (event_case() == kSignalDeliver) {
    clear_has_event();
    ::perfetto::protos::SignalDeliverFtraceEvent* temp = _impl_.event_.signal_deliver_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.signal_deliver_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SignalDeliverFtraceEvent& FtraceEvent::_internal_signal_deliver() const {
  return event_case() == kSignalDeliver
      ? *_impl_.event_.signal_deliver_
      : reinterpret_cast<::perfetto::protos::SignalDeliverFtraceEvent&>(::perfetto::protos::_SignalDeliverFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SignalDeliverFtraceEvent& FtraceEvent::signal_deliver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.signal_deliver)
  return _internal_signal_deliver();
}
inline ::perfetto::protos::SignalDeliverFtraceEvent* FtraceEvent::unsafe_arena_release_signal_deliver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.signal_deliver)
  if (event_case() == kSignalDeliver) {
    clear_has_event();
    ::perfetto::protos::SignalDeliverFtraceEvent* temp = _impl_.event_.signal_deliver_;
    _impl_.event_.signal_deliver_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_signal_deliver(::perfetto::protos::SignalDeliverFtraceEvent* signal_deliver) {
  clear_event();
  if (signal_deliver) {
    set_has_signal_deliver();
    _impl_.event_.signal_deliver_ = signal_deliver;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.signal_deliver)
}
inline ::perfetto::protos::SignalDeliverFtraceEvent* FtraceEvent::_internal_mutable_signal_deliver() {
  if (event_case() != kSignalDeliver) {
    clear_event();
    set_has_signal_deliver();
    _impl_.event_.signal_deliver_ = CreateMaybeMessage< ::perfetto::protos::SignalDeliverFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.signal_deliver_;
}
inline ::perfetto::protos::SignalDeliverFtraceEvent* FtraceEvent::mutable_signal_deliver() {
  ::perfetto::protos::SignalDeliverFtraceEvent* _msg = _internal_mutable_signal_deliver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.signal_deliver)
  return _msg;
}

// .perfetto.protos.SignalGenerateFtraceEvent signal_generate = 325;
inline bool FtraceEvent::has_signal_generate() const {
  return event_case() == kSignalGenerate;
}
inline bool FtraceEvent::_internal_has_signal_generate() const {
  return event_case() == kSignalGenerate;
}
inline void FtraceEvent::set_has_signal_generate() {
  _impl_._oneof_case_[0] = kSignalGenerate;
}
inline ::perfetto::protos::SignalGenerateFtraceEvent* FtraceEvent::release_signal_generate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.signal_generate)
  if (event_case() == kSignalGenerate) {
    clear_has_event();
    ::perfetto::protos::SignalGenerateFtraceEvent* temp = _impl_.event_.signal_generate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.signal_generate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SignalGenerateFtraceEvent& FtraceEvent::_internal_signal_generate() const {
  return event_case() == kSignalGenerate
      ? *_impl_.event_.signal_generate_
      : reinterpret_cast<::perfetto::protos::SignalGenerateFtraceEvent&>(::perfetto::protos::_SignalGenerateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SignalGenerateFtraceEvent& FtraceEvent::signal_generate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.signal_generate)
  return _internal_signal_generate();
}
inline ::perfetto::protos::SignalGenerateFtraceEvent* FtraceEvent::unsafe_arena_release_signal_generate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.signal_generate)
  if (event_case() == kSignalGenerate) {
    clear_has_event();
    ::perfetto::protos::SignalGenerateFtraceEvent* temp = _impl_.event_.signal_generate_;
    _impl_.event_.signal_generate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_signal_generate(::perfetto::protos::SignalGenerateFtraceEvent* signal_generate) {
  clear_event();
  if (signal_generate) {
    set_has_signal_generate();
    _impl_.event_.signal_generate_ = signal_generate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.signal_generate)
}
inline ::perfetto::protos::SignalGenerateFtraceEvent* FtraceEvent::_internal_mutable_signal_generate() {
  if (event_case() != kSignalGenerate) {
    clear_event();
    set_has_signal_generate();
    _impl_.event_.signal_generate_ = CreateMaybeMessage< ::perfetto::protos::SignalGenerateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.signal_generate_;
}
inline ::perfetto::protos::SignalGenerateFtraceEvent* FtraceEvent::mutable_signal_generate() {
  ::perfetto::protos::SignalGenerateFtraceEvent* _msg = _internal_mutable_signal_generate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.signal_generate)
  return _msg;
}

// .perfetto.protos.OomScoreAdjUpdateFtraceEvent oom_score_adj_update = 326;
inline bool FtraceEvent::has_oom_score_adj_update() const {
  return event_case() == kOomScoreAdjUpdate;
}
inline bool FtraceEvent::_internal_has_oom_score_adj_update() const {
  return event_case() == kOomScoreAdjUpdate;
}
inline void FtraceEvent::set_has_oom_score_adj_update() {
  _impl_._oneof_case_[0] = kOomScoreAdjUpdate;
}
inline ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* FtraceEvent::release_oom_score_adj_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.oom_score_adj_update)
  if (event_case() == kOomScoreAdjUpdate) {
    clear_has_event();
    ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* temp = _impl_.event_.oom_score_adj_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.oom_score_adj_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& FtraceEvent::_internal_oom_score_adj_update() const {
  return event_case() == kOomScoreAdjUpdate
      ? *_impl_.event_.oom_score_adj_update_
      : reinterpret_cast<::perfetto::protos::OomScoreAdjUpdateFtraceEvent&>(::perfetto::protos::_OomScoreAdjUpdateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::OomScoreAdjUpdateFtraceEvent& FtraceEvent::oom_score_adj_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.oom_score_adj_update)
  return _internal_oom_score_adj_update();
}
inline ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* FtraceEvent::unsafe_arena_release_oom_score_adj_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.oom_score_adj_update)
  if (event_case() == kOomScoreAdjUpdate) {
    clear_has_event();
    ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* temp = _impl_.event_.oom_score_adj_update_;
    _impl_.event_.oom_score_adj_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_oom_score_adj_update(::perfetto::protos::OomScoreAdjUpdateFtraceEvent* oom_score_adj_update) {
  clear_event();
  if (oom_score_adj_update) {
    set_has_oom_score_adj_update();
    _impl_.event_.oom_score_adj_update_ = oom_score_adj_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.oom_score_adj_update)
}
inline ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* FtraceEvent::_internal_mutable_oom_score_adj_update() {
  if (event_case() != kOomScoreAdjUpdate) {
    clear_event();
    set_has_oom_score_adj_update();
    _impl_.event_.oom_score_adj_update_ = CreateMaybeMessage< ::perfetto::protos::OomScoreAdjUpdateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.oom_score_adj_update_;
}
inline ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* FtraceEvent::mutable_oom_score_adj_update() {
  ::perfetto::protos::OomScoreAdjUpdateFtraceEvent* _msg = _internal_mutable_oom_score_adj_update();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.oom_score_adj_update)
  return _msg;
}

// .perfetto.protos.GenericFtraceEvent generic = 327;
inline bool FtraceEvent::has_generic() const {
  return event_case() == kGeneric;
}
inline bool FtraceEvent::_internal_has_generic() const {
  return event_case() == kGeneric;
}
inline void FtraceEvent::set_has_generic() {
  _impl_._oneof_case_[0] = kGeneric;
}
inline ::perfetto::protos::GenericFtraceEvent* FtraceEvent::release_generic() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.generic)
  if (event_case() == kGeneric) {
    clear_has_event();
    ::perfetto::protos::GenericFtraceEvent* temp = _impl_.event_.generic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GenericFtraceEvent& FtraceEvent::_internal_generic() const {
  return event_case() == kGeneric
      ? *_impl_.event_.generic_
      : reinterpret_cast<::perfetto::protos::GenericFtraceEvent&>(::perfetto::protos::_GenericFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::GenericFtraceEvent& FtraceEvent::generic() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.generic)
  return _internal_generic();
}
inline ::perfetto::protos::GenericFtraceEvent* FtraceEvent::unsafe_arena_release_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.generic)
  if (event_case() == kGeneric) {
    clear_has_event();
    ::perfetto::protos::GenericFtraceEvent* temp = _impl_.event_.generic_;
    _impl_.event_.generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_generic(::perfetto::protos::GenericFtraceEvent* generic) {
  clear_event();
  if (generic) {
    set_has_generic();
    _impl_.event_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.generic)
}
inline ::perfetto::protos::GenericFtraceEvent* FtraceEvent::_internal_mutable_generic() {
  if (event_case() != kGeneric) {
    clear_event();
    set_has_generic();
    _impl_.event_.generic_ = CreateMaybeMessage< ::perfetto::protos::GenericFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.generic_;
}
inline ::perfetto::protos::GenericFtraceEvent* FtraceEvent::mutable_generic() {
  ::perfetto::protos::GenericFtraceEvent* _msg = _internal_mutable_generic();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.generic)
  return _msg;
}

// .perfetto.protos.MmEventRecordFtraceEvent mm_event_record = 328;
inline bool FtraceEvent::has_mm_event_record() const {
  return event_case() == kMmEventRecord;
}
inline bool FtraceEvent::_internal_has_mm_event_record() const {
  return event_case() == kMmEventRecord;
}
inline void FtraceEvent::set_has_mm_event_record() {
  _impl_._oneof_case_[0] = kMmEventRecord;
}
inline ::perfetto::protos::MmEventRecordFtraceEvent* FtraceEvent::release_mm_event_record() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_event_record)
  if (event_case() == kMmEventRecord) {
    clear_has_event();
    ::perfetto::protos::MmEventRecordFtraceEvent* temp = _impl_.event_.mm_event_record_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_event_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmEventRecordFtraceEvent& FtraceEvent::_internal_mm_event_record() const {
  return event_case() == kMmEventRecord
      ? *_impl_.event_.mm_event_record_
      : reinterpret_cast<::perfetto::protos::MmEventRecordFtraceEvent&>(::perfetto::protos::_MmEventRecordFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmEventRecordFtraceEvent& FtraceEvent::mm_event_record() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_event_record)
  return _internal_mm_event_record();
}
inline ::perfetto::protos::MmEventRecordFtraceEvent* FtraceEvent::unsafe_arena_release_mm_event_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_event_record)
  if (event_case() == kMmEventRecord) {
    clear_has_event();
    ::perfetto::protos::MmEventRecordFtraceEvent* temp = _impl_.event_.mm_event_record_;
    _impl_.event_.mm_event_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_event_record(::perfetto::protos::MmEventRecordFtraceEvent* mm_event_record) {
  clear_event();
  if (mm_event_record) {
    set_has_mm_event_record();
    _impl_.event_.mm_event_record_ = mm_event_record;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_event_record)
}
inline ::perfetto::protos::MmEventRecordFtraceEvent* FtraceEvent::_internal_mutable_mm_event_record() {
  if (event_case() != kMmEventRecord) {
    clear_event();
    set_has_mm_event_record();
    _impl_.event_.mm_event_record_ = CreateMaybeMessage< ::perfetto::protos::MmEventRecordFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_event_record_;
}
inline ::perfetto::protos::MmEventRecordFtraceEvent* FtraceEvent::mutable_mm_event_record() {
  ::perfetto::protos::MmEventRecordFtraceEvent* _msg = _internal_mutable_mm_event_record();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_event_record)
  return _msg;
}

// .perfetto.protos.SysEnterFtraceEvent sys_enter = 329;
inline bool FtraceEvent::has_sys_enter() const {
  return event_case() == kSysEnter;
}
inline bool FtraceEvent::_internal_has_sys_enter() const {
  return event_case() == kSysEnter;
}
inline void FtraceEvent::set_has_sys_enter() {
  _impl_._oneof_case_[0] = kSysEnter;
}
inline ::perfetto::protos::SysEnterFtraceEvent* FtraceEvent::release_sys_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sys_enter)
  if (event_case() == kSysEnter) {
    clear_has_event();
    ::perfetto::protos::SysEnterFtraceEvent* temp = _impl_.event_.sys_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sys_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SysEnterFtraceEvent& FtraceEvent::_internal_sys_enter() const {
  return event_case() == kSysEnter
      ? *_impl_.event_.sys_enter_
      : reinterpret_cast<::perfetto::protos::SysEnterFtraceEvent&>(::perfetto::protos::_SysEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SysEnterFtraceEvent& FtraceEvent::sys_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sys_enter)
  return _internal_sys_enter();
}
inline ::perfetto::protos::SysEnterFtraceEvent* FtraceEvent::unsafe_arena_release_sys_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sys_enter)
  if (event_case() == kSysEnter) {
    clear_has_event();
    ::perfetto::protos::SysEnterFtraceEvent* temp = _impl_.event_.sys_enter_;
    _impl_.event_.sys_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sys_enter(::perfetto::protos::SysEnterFtraceEvent* sys_enter) {
  clear_event();
  if (sys_enter) {
    set_has_sys_enter();
    _impl_.event_.sys_enter_ = sys_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sys_enter)
}
inline ::perfetto::protos::SysEnterFtraceEvent* FtraceEvent::_internal_mutable_sys_enter() {
  if (event_case() != kSysEnter) {
    clear_event();
    set_has_sys_enter();
    _impl_.event_.sys_enter_ = CreateMaybeMessage< ::perfetto::protos::SysEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sys_enter_;
}
inline ::perfetto::protos::SysEnterFtraceEvent* FtraceEvent::mutable_sys_enter() {
  ::perfetto::protos::SysEnterFtraceEvent* _msg = _internal_mutable_sys_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sys_enter)
  return _msg;
}

// .perfetto.protos.SysExitFtraceEvent sys_exit = 330;
inline bool FtraceEvent::has_sys_exit() const {
  return event_case() == kSysExit;
}
inline bool FtraceEvent::_internal_has_sys_exit() const {
  return event_case() == kSysExit;
}
inline void FtraceEvent::set_has_sys_exit() {
  _impl_._oneof_case_[0] = kSysExit;
}
inline ::perfetto::protos::SysExitFtraceEvent* FtraceEvent::release_sys_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sys_exit)
  if (event_case() == kSysExit) {
    clear_has_event();
    ::perfetto::protos::SysExitFtraceEvent* temp = _impl_.event_.sys_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sys_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SysExitFtraceEvent& FtraceEvent::_internal_sys_exit() const {
  return event_case() == kSysExit
      ? *_impl_.event_.sys_exit_
      : reinterpret_cast<::perfetto::protos::SysExitFtraceEvent&>(::perfetto::protos::_SysExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SysExitFtraceEvent& FtraceEvent::sys_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sys_exit)
  return _internal_sys_exit();
}
inline ::perfetto::protos::SysExitFtraceEvent* FtraceEvent::unsafe_arena_release_sys_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sys_exit)
  if (event_case() == kSysExit) {
    clear_has_event();
    ::perfetto::protos::SysExitFtraceEvent* temp = _impl_.event_.sys_exit_;
    _impl_.event_.sys_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sys_exit(::perfetto::protos::SysExitFtraceEvent* sys_exit) {
  clear_event();
  if (sys_exit) {
    set_has_sys_exit();
    _impl_.event_.sys_exit_ = sys_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sys_exit)
}
inline ::perfetto::protos::SysExitFtraceEvent* FtraceEvent::_internal_mutable_sys_exit() {
  if (event_case() != kSysExit) {
    clear_event();
    set_has_sys_exit();
    _impl_.event_.sys_exit_ = CreateMaybeMessage< ::perfetto::protos::SysExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sys_exit_;
}
inline ::perfetto::protos::SysExitFtraceEvent* FtraceEvent::mutable_sys_exit() {
  ::perfetto::protos::SysExitFtraceEvent* _msg = _internal_mutable_sys_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sys_exit)
  return _msg;
}

// .perfetto.protos.ZeroFtraceEvent zero = 331;
inline bool FtraceEvent::has_zero() const {
  return event_case() == kZero;
}
inline bool FtraceEvent::_internal_has_zero() const {
  return event_case() == kZero;
}
inline void FtraceEvent::set_has_zero() {
  _impl_._oneof_case_[0] = kZero;
}
inline ::perfetto::protos::ZeroFtraceEvent* FtraceEvent::release_zero() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.zero)
  if (event_case() == kZero) {
    clear_has_event();
    ::perfetto::protos::ZeroFtraceEvent* temp = _impl_.event_.zero_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.zero_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ZeroFtraceEvent& FtraceEvent::_internal_zero() const {
  return event_case() == kZero
      ? *_impl_.event_.zero_
      : reinterpret_cast<::perfetto::protos::ZeroFtraceEvent&>(::perfetto::protos::_ZeroFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ZeroFtraceEvent& FtraceEvent::zero() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.zero)
  return _internal_zero();
}
inline ::perfetto::protos::ZeroFtraceEvent* FtraceEvent::unsafe_arena_release_zero() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.zero)
  if (event_case() == kZero) {
    clear_has_event();
    ::perfetto::protos::ZeroFtraceEvent* temp = _impl_.event_.zero_;
    _impl_.event_.zero_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_zero(::perfetto::protos::ZeroFtraceEvent* zero) {
  clear_event();
  if (zero) {
    set_has_zero();
    _impl_.event_.zero_ = zero;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.zero)
}
inline ::perfetto::protos::ZeroFtraceEvent* FtraceEvent::_internal_mutable_zero() {
  if (event_case() != kZero) {
    clear_event();
    set_has_zero();
    _impl_.event_.zero_ = CreateMaybeMessage< ::perfetto::protos::ZeroFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.zero_;
}
inline ::perfetto::protos::ZeroFtraceEvent* FtraceEvent::mutable_zero() {
  ::perfetto::protos::ZeroFtraceEvent* _msg = _internal_mutable_zero();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.zero)
  return _msg;
}

// .perfetto.protos.GpuFrequencyFtraceEvent gpu_frequency = 332;
inline bool FtraceEvent::has_gpu_frequency() const {
  return event_case() == kGpuFrequency;
}
inline bool FtraceEvent::_internal_has_gpu_frequency() const {
  return event_case() == kGpuFrequency;
}
inline void FtraceEvent::set_has_gpu_frequency() {
  _impl_._oneof_case_[0] = kGpuFrequency;
}
inline ::perfetto::protos::GpuFrequencyFtraceEvent* FtraceEvent::release_gpu_frequency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.gpu_frequency)
  if (event_case() == kGpuFrequency) {
    clear_has_event();
    ::perfetto::protos::GpuFrequencyFtraceEvent* temp = _impl_.event_.gpu_frequency_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.gpu_frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuFrequencyFtraceEvent& FtraceEvent::_internal_gpu_frequency() const {
  return event_case() == kGpuFrequency
      ? *_impl_.event_.gpu_frequency_
      : reinterpret_cast<::perfetto::protos::GpuFrequencyFtraceEvent&>(::perfetto::protos::_GpuFrequencyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::GpuFrequencyFtraceEvent& FtraceEvent::gpu_frequency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.gpu_frequency)
  return _internal_gpu_frequency();
}
inline ::perfetto::protos::GpuFrequencyFtraceEvent* FtraceEvent::unsafe_arena_release_gpu_frequency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.gpu_frequency)
  if (event_case() == kGpuFrequency) {
    clear_has_event();
    ::perfetto::protos::GpuFrequencyFtraceEvent* temp = _impl_.event_.gpu_frequency_;
    _impl_.event_.gpu_frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_gpu_frequency(::perfetto::protos::GpuFrequencyFtraceEvent* gpu_frequency) {
  clear_event();
  if (gpu_frequency) {
    set_has_gpu_frequency();
    _impl_.event_.gpu_frequency_ = gpu_frequency;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.gpu_frequency)
}
inline ::perfetto::protos::GpuFrequencyFtraceEvent* FtraceEvent::_internal_mutable_gpu_frequency() {
  if (event_case() != kGpuFrequency) {
    clear_event();
    set_has_gpu_frequency();
    _impl_.event_.gpu_frequency_ = CreateMaybeMessage< ::perfetto::protos::GpuFrequencyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.gpu_frequency_;
}
inline ::perfetto::protos::GpuFrequencyFtraceEvent* FtraceEvent::mutable_gpu_frequency() {
  ::perfetto::protos::GpuFrequencyFtraceEvent* _msg = _internal_mutable_gpu_frequency();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.gpu_frequency)
  return _msg;
}

// .perfetto.protos.SdeTracingMarkWriteFtraceEvent sde_tracing_mark_write = 333;
inline bool FtraceEvent::has_sde_tracing_mark_write() const {
  return event_case() == kSdeTracingMarkWrite;
}
inline bool FtraceEvent::_internal_has_sde_tracing_mark_write() const {
  return event_case() == kSdeTracingMarkWrite;
}
inline void FtraceEvent::set_has_sde_tracing_mark_write() {
  _impl_._oneof_case_[0] = kSdeTracingMarkWrite;
}
inline ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* FtraceEvent::release_sde_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  if (event_case() == kSdeTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* temp = _impl_.event_.sde_tracing_mark_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sde_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& FtraceEvent::_internal_sde_tracing_mark_write() const {
  return event_case() == kSdeTracingMarkWrite
      ? *_impl_.event_.sde_tracing_mark_write_
      : reinterpret_cast<::perfetto::protos::SdeTracingMarkWriteFtraceEvent&>(::perfetto::protos::_SdeTracingMarkWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SdeTracingMarkWriteFtraceEvent& FtraceEvent::sde_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  return _internal_sde_tracing_mark_write();
}
inline ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* FtraceEvent::unsafe_arena_release_sde_tracing_mark_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  if (event_case() == kSdeTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* temp = _impl_.event_.sde_tracing_mark_write_;
    _impl_.event_.sde_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sde_tracing_mark_write(::perfetto::protos::SdeTracingMarkWriteFtraceEvent* sde_tracing_mark_write) {
  clear_event();
  if (sde_tracing_mark_write) {
    set_has_sde_tracing_mark_write();
    _impl_.event_.sde_tracing_mark_write_ = sde_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
}
inline ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* FtraceEvent::_internal_mutable_sde_tracing_mark_write() {
  if (event_case() != kSdeTracingMarkWrite) {
    clear_event();
    set_has_sde_tracing_mark_write();
    _impl_.event_.sde_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::SdeTracingMarkWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sde_tracing_mark_write_;
}
inline ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* FtraceEvent::mutable_sde_tracing_mark_write() {
  ::perfetto::protos::SdeTracingMarkWriteFtraceEvent* _msg = _internal_mutable_sde_tracing_mark_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_tracing_mark_write)
  return _msg;
}

// .perfetto.protos.MarkVictimFtraceEvent mark_victim = 334;
inline bool FtraceEvent::has_mark_victim() const {
  return event_case() == kMarkVictim;
}
inline bool FtraceEvent::_internal_has_mark_victim() const {
  return event_case() == kMarkVictim;
}
inline void FtraceEvent::set_has_mark_victim() {
  _impl_._oneof_case_[0] = kMarkVictim;
}
inline ::perfetto::protos::MarkVictimFtraceEvent* FtraceEvent::release_mark_victim() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mark_victim)
  if (event_case() == kMarkVictim) {
    clear_has_event();
    ::perfetto::protos::MarkVictimFtraceEvent* temp = _impl_.event_.mark_victim_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mark_victim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MarkVictimFtraceEvent& FtraceEvent::_internal_mark_victim() const {
  return event_case() == kMarkVictim
      ? *_impl_.event_.mark_victim_
      : reinterpret_cast<::perfetto::protos::MarkVictimFtraceEvent&>(::perfetto::protos::_MarkVictimFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MarkVictimFtraceEvent& FtraceEvent::mark_victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mark_victim)
  return _internal_mark_victim();
}
inline ::perfetto::protos::MarkVictimFtraceEvent* FtraceEvent::unsafe_arena_release_mark_victim() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mark_victim)
  if (event_case() == kMarkVictim) {
    clear_has_event();
    ::perfetto::protos::MarkVictimFtraceEvent* temp = _impl_.event_.mark_victim_;
    _impl_.event_.mark_victim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mark_victim(::perfetto::protos::MarkVictimFtraceEvent* mark_victim) {
  clear_event();
  if (mark_victim) {
    set_has_mark_victim();
    _impl_.event_.mark_victim_ = mark_victim;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mark_victim)
}
inline ::perfetto::protos::MarkVictimFtraceEvent* FtraceEvent::_internal_mutable_mark_victim() {
  if (event_case() != kMarkVictim) {
    clear_event();
    set_has_mark_victim();
    _impl_.event_.mark_victim_ = CreateMaybeMessage< ::perfetto::protos::MarkVictimFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mark_victim_;
}
inline ::perfetto::protos::MarkVictimFtraceEvent* FtraceEvent::mutable_mark_victim() {
  ::perfetto::protos::MarkVictimFtraceEvent* _msg = _internal_mutable_mark_victim();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mark_victim)
  return _msg;
}

// .perfetto.protos.IonStatFtraceEvent ion_stat = 335;
inline bool FtraceEvent::has_ion_stat() const {
  return event_case() == kIonStat;
}
inline bool FtraceEvent::_internal_has_ion_stat() const {
  return event_case() == kIonStat;
}
inline void FtraceEvent::set_has_ion_stat() {
  _impl_._oneof_case_[0] = kIonStat;
}
inline ::perfetto::protos::IonStatFtraceEvent* FtraceEvent::release_ion_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_stat)
  if (event_case() == kIonStat) {
    clear_has_event();
    ::perfetto::protos::IonStatFtraceEvent* temp = _impl_.event_.ion_stat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonStatFtraceEvent& FtraceEvent::_internal_ion_stat() const {
  return event_case() == kIonStat
      ? *_impl_.event_.ion_stat_
      : reinterpret_cast<::perfetto::protos::IonStatFtraceEvent&>(::perfetto::protos::_IonStatFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonStatFtraceEvent& FtraceEvent::ion_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_stat)
  return _internal_ion_stat();
}
inline ::perfetto::protos::IonStatFtraceEvent* FtraceEvent::unsafe_arena_release_ion_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_stat)
  if (event_case() == kIonStat) {
    clear_has_event();
    ::perfetto::protos::IonStatFtraceEvent* temp = _impl_.event_.ion_stat_;
    _impl_.event_.ion_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_stat(::perfetto::protos::IonStatFtraceEvent* ion_stat) {
  clear_event();
  if (ion_stat) {
    set_has_ion_stat();
    _impl_.event_.ion_stat_ = ion_stat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_stat)
}
inline ::perfetto::protos::IonStatFtraceEvent* FtraceEvent::_internal_mutable_ion_stat() {
  if (event_case() != kIonStat) {
    clear_event();
    set_has_ion_stat();
    _impl_.event_.ion_stat_ = CreateMaybeMessage< ::perfetto::protos::IonStatFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_stat_;
}
inline ::perfetto::protos::IonStatFtraceEvent* FtraceEvent::mutable_ion_stat() {
  ::perfetto::protos::IonStatFtraceEvent* _msg = _internal_mutable_ion_stat();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_stat)
  return _msg;
}

// .perfetto.protos.IonBufferCreateFtraceEvent ion_buffer_create = 336;
inline bool FtraceEvent::has_ion_buffer_create() const {
  return event_case() == kIonBufferCreate;
}
inline bool FtraceEvent::_internal_has_ion_buffer_create() const {
  return event_case() == kIonBufferCreate;
}
inline void FtraceEvent::set_has_ion_buffer_create() {
  _impl_._oneof_case_[0] = kIonBufferCreate;
}
inline ::perfetto::protos::IonBufferCreateFtraceEvent* FtraceEvent::release_ion_buffer_create() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_buffer_create)
  if (event_case() == kIonBufferCreate) {
    clear_has_event();
    ::perfetto::protos::IonBufferCreateFtraceEvent* temp = _impl_.event_.ion_buffer_create_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_buffer_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonBufferCreateFtraceEvent& FtraceEvent::_internal_ion_buffer_create() const {
  return event_case() == kIonBufferCreate
      ? *_impl_.event_.ion_buffer_create_
      : reinterpret_cast<::perfetto::protos::IonBufferCreateFtraceEvent&>(::perfetto::protos::_IonBufferCreateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonBufferCreateFtraceEvent& FtraceEvent::ion_buffer_create() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_buffer_create)
  return _internal_ion_buffer_create();
}
inline ::perfetto::protos::IonBufferCreateFtraceEvent* FtraceEvent::unsafe_arena_release_ion_buffer_create() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_buffer_create)
  if (event_case() == kIonBufferCreate) {
    clear_has_event();
    ::perfetto::protos::IonBufferCreateFtraceEvent* temp = _impl_.event_.ion_buffer_create_;
    _impl_.event_.ion_buffer_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_buffer_create(::perfetto::protos::IonBufferCreateFtraceEvent* ion_buffer_create) {
  clear_event();
  if (ion_buffer_create) {
    set_has_ion_buffer_create();
    _impl_.event_.ion_buffer_create_ = ion_buffer_create;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_buffer_create)
}
inline ::perfetto::protos::IonBufferCreateFtraceEvent* FtraceEvent::_internal_mutable_ion_buffer_create() {
  if (event_case() != kIonBufferCreate) {
    clear_event();
    set_has_ion_buffer_create();
    _impl_.event_.ion_buffer_create_ = CreateMaybeMessage< ::perfetto::protos::IonBufferCreateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_buffer_create_;
}
inline ::perfetto::protos::IonBufferCreateFtraceEvent* FtraceEvent::mutable_ion_buffer_create() {
  ::perfetto::protos::IonBufferCreateFtraceEvent* _msg = _internal_mutable_ion_buffer_create();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_buffer_create)
  return _msg;
}

// .perfetto.protos.IonBufferDestroyFtraceEvent ion_buffer_destroy = 337;
inline bool FtraceEvent::has_ion_buffer_destroy() const {
  return event_case() == kIonBufferDestroy;
}
inline bool FtraceEvent::_internal_has_ion_buffer_destroy() const {
  return event_case() == kIonBufferDestroy;
}
inline void FtraceEvent::set_has_ion_buffer_destroy() {
  _impl_._oneof_case_[0] = kIonBufferDestroy;
}
inline ::perfetto::protos::IonBufferDestroyFtraceEvent* FtraceEvent::release_ion_buffer_destroy() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  if (event_case() == kIonBufferDestroy) {
    clear_has_event();
    ::perfetto::protos::IonBufferDestroyFtraceEvent* temp = _impl_.event_.ion_buffer_destroy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ion_buffer_destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::IonBufferDestroyFtraceEvent& FtraceEvent::_internal_ion_buffer_destroy() const {
  return event_case() == kIonBufferDestroy
      ? *_impl_.event_.ion_buffer_destroy_
      : reinterpret_cast<::perfetto::protos::IonBufferDestroyFtraceEvent&>(::perfetto::protos::_IonBufferDestroyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::IonBufferDestroyFtraceEvent& FtraceEvent::ion_buffer_destroy() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  return _internal_ion_buffer_destroy();
}
inline ::perfetto::protos::IonBufferDestroyFtraceEvent* FtraceEvent::unsafe_arena_release_ion_buffer_destroy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  if (event_case() == kIonBufferDestroy) {
    clear_has_event();
    ::perfetto::protos::IonBufferDestroyFtraceEvent* temp = _impl_.event_.ion_buffer_destroy_;
    _impl_.event_.ion_buffer_destroy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ion_buffer_destroy(::perfetto::protos::IonBufferDestroyFtraceEvent* ion_buffer_destroy) {
  clear_event();
  if (ion_buffer_destroy) {
    set_has_ion_buffer_destroy();
    _impl_.event_.ion_buffer_destroy_ = ion_buffer_destroy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ion_buffer_destroy)
}
inline ::perfetto::protos::IonBufferDestroyFtraceEvent* FtraceEvent::_internal_mutable_ion_buffer_destroy() {
  if (event_case() != kIonBufferDestroy) {
    clear_event();
    set_has_ion_buffer_destroy();
    _impl_.event_.ion_buffer_destroy_ = CreateMaybeMessage< ::perfetto::protos::IonBufferDestroyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ion_buffer_destroy_;
}
inline ::perfetto::protos::IonBufferDestroyFtraceEvent* FtraceEvent::mutable_ion_buffer_destroy() {
  ::perfetto::protos::IonBufferDestroyFtraceEvent* _msg = _internal_mutable_ion_buffer_destroy();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ion_buffer_destroy)
  return _msg;
}

// .perfetto.protos.ScmCallStartFtraceEvent scm_call_start = 338;
inline bool FtraceEvent::has_scm_call_start() const {
  return event_case() == kScmCallStart;
}
inline bool FtraceEvent::_internal_has_scm_call_start() const {
  return event_case() == kScmCallStart;
}
inline void FtraceEvent::set_has_scm_call_start() {
  _impl_._oneof_case_[0] = kScmCallStart;
}
inline ::perfetto::protos::ScmCallStartFtraceEvent* FtraceEvent::release_scm_call_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.scm_call_start)
  if (event_case() == kScmCallStart) {
    clear_has_event();
    ::perfetto::protos::ScmCallStartFtraceEvent* temp = _impl_.event_.scm_call_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.scm_call_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ScmCallStartFtraceEvent& FtraceEvent::_internal_scm_call_start() const {
  return event_case() == kScmCallStart
      ? *_impl_.event_.scm_call_start_
      : reinterpret_cast<::perfetto::protos::ScmCallStartFtraceEvent&>(::perfetto::protos::_ScmCallStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ScmCallStartFtraceEvent& FtraceEvent::scm_call_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.scm_call_start)
  return _internal_scm_call_start();
}
inline ::perfetto::protos::ScmCallStartFtraceEvent* FtraceEvent::unsafe_arena_release_scm_call_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.scm_call_start)
  if (event_case() == kScmCallStart) {
    clear_has_event();
    ::perfetto::protos::ScmCallStartFtraceEvent* temp = _impl_.event_.scm_call_start_;
    _impl_.event_.scm_call_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_scm_call_start(::perfetto::protos::ScmCallStartFtraceEvent* scm_call_start) {
  clear_event();
  if (scm_call_start) {
    set_has_scm_call_start();
    _impl_.event_.scm_call_start_ = scm_call_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.scm_call_start)
}
inline ::perfetto::protos::ScmCallStartFtraceEvent* FtraceEvent::_internal_mutable_scm_call_start() {
  if (event_case() != kScmCallStart) {
    clear_event();
    set_has_scm_call_start();
    _impl_.event_.scm_call_start_ = CreateMaybeMessage< ::perfetto::protos::ScmCallStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.scm_call_start_;
}
inline ::perfetto::protos::ScmCallStartFtraceEvent* FtraceEvent::mutable_scm_call_start() {
  ::perfetto::protos::ScmCallStartFtraceEvent* _msg = _internal_mutable_scm_call_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.scm_call_start)
  return _msg;
}

// .perfetto.protos.ScmCallEndFtraceEvent scm_call_end = 339;
inline bool FtraceEvent::has_scm_call_end() const {
  return event_case() == kScmCallEnd;
}
inline bool FtraceEvent::_internal_has_scm_call_end() const {
  return event_case() == kScmCallEnd;
}
inline void FtraceEvent::set_has_scm_call_end() {
  _impl_._oneof_case_[0] = kScmCallEnd;
}
inline ::perfetto::protos::ScmCallEndFtraceEvent* FtraceEvent::release_scm_call_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.scm_call_end)
  if (event_case() == kScmCallEnd) {
    clear_has_event();
    ::perfetto::protos::ScmCallEndFtraceEvent* temp = _impl_.event_.scm_call_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.scm_call_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ScmCallEndFtraceEvent& FtraceEvent::_internal_scm_call_end() const {
  return event_case() == kScmCallEnd
      ? *_impl_.event_.scm_call_end_
      : reinterpret_cast<::perfetto::protos::ScmCallEndFtraceEvent&>(::perfetto::protos::_ScmCallEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ScmCallEndFtraceEvent& FtraceEvent::scm_call_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.scm_call_end)
  return _internal_scm_call_end();
}
inline ::perfetto::protos::ScmCallEndFtraceEvent* FtraceEvent::unsafe_arena_release_scm_call_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.scm_call_end)
  if (event_case() == kScmCallEnd) {
    clear_has_event();
    ::perfetto::protos::ScmCallEndFtraceEvent* temp = _impl_.event_.scm_call_end_;
    _impl_.event_.scm_call_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_scm_call_end(::perfetto::protos::ScmCallEndFtraceEvent* scm_call_end) {
  clear_event();
  if (scm_call_end) {
    set_has_scm_call_end();
    _impl_.event_.scm_call_end_ = scm_call_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.scm_call_end)
}
inline ::perfetto::protos::ScmCallEndFtraceEvent* FtraceEvent::_internal_mutable_scm_call_end() {
  if (event_case() != kScmCallEnd) {
    clear_event();
    set_has_scm_call_end();
    _impl_.event_.scm_call_end_ = CreateMaybeMessage< ::perfetto::protos::ScmCallEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.scm_call_end_;
}
inline ::perfetto::protos::ScmCallEndFtraceEvent* FtraceEvent::mutable_scm_call_end() {
  ::perfetto::protos::ScmCallEndFtraceEvent* _msg = _internal_mutable_scm_call_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.scm_call_end)
  return _msg;
}

// .perfetto.protos.GpuMemTotalFtraceEvent gpu_mem_total = 340;
inline bool FtraceEvent::has_gpu_mem_total() const {
  return event_case() == kGpuMemTotal;
}
inline bool FtraceEvent::_internal_has_gpu_mem_total() const {
  return event_case() == kGpuMemTotal;
}
inline void FtraceEvent::set_has_gpu_mem_total() {
  _impl_._oneof_case_[0] = kGpuMemTotal;
}
inline ::perfetto::protos::GpuMemTotalFtraceEvent* FtraceEvent::release_gpu_mem_total() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.gpu_mem_total)
  if (event_case() == kGpuMemTotal) {
    clear_has_event();
    ::perfetto::protos::GpuMemTotalFtraceEvent* temp = _impl_.event_.gpu_mem_total_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.gpu_mem_total_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::GpuMemTotalFtraceEvent& FtraceEvent::_internal_gpu_mem_total() const {
  return event_case() == kGpuMemTotal
      ? *_impl_.event_.gpu_mem_total_
      : reinterpret_cast<::perfetto::protos::GpuMemTotalFtraceEvent&>(::perfetto::protos::_GpuMemTotalFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::GpuMemTotalFtraceEvent& FtraceEvent::gpu_mem_total() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.gpu_mem_total)
  return _internal_gpu_mem_total();
}
inline ::perfetto::protos::GpuMemTotalFtraceEvent* FtraceEvent::unsafe_arena_release_gpu_mem_total() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.gpu_mem_total)
  if (event_case() == kGpuMemTotal) {
    clear_has_event();
    ::perfetto::protos::GpuMemTotalFtraceEvent* temp = _impl_.event_.gpu_mem_total_;
    _impl_.event_.gpu_mem_total_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_gpu_mem_total(::perfetto::protos::GpuMemTotalFtraceEvent* gpu_mem_total) {
  clear_event();
  if (gpu_mem_total) {
    set_has_gpu_mem_total();
    _impl_.event_.gpu_mem_total_ = gpu_mem_total;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.gpu_mem_total)
}
inline ::perfetto::protos::GpuMemTotalFtraceEvent* FtraceEvent::_internal_mutable_gpu_mem_total() {
  if (event_case() != kGpuMemTotal) {
    clear_event();
    set_has_gpu_mem_total();
    _impl_.event_.gpu_mem_total_ = CreateMaybeMessage< ::perfetto::protos::GpuMemTotalFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.gpu_mem_total_;
}
inline ::perfetto::protos::GpuMemTotalFtraceEvent* FtraceEvent::mutable_gpu_mem_total() {
  ::perfetto::protos::GpuMemTotalFtraceEvent* _msg = _internal_mutable_gpu_mem_total();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.gpu_mem_total)
  return _msg;
}

// .perfetto.protos.ThermalTemperatureFtraceEvent thermal_temperature = 341;
inline bool FtraceEvent::has_thermal_temperature() const {
  return event_case() == kThermalTemperature;
}
inline bool FtraceEvent::_internal_has_thermal_temperature() const {
  return event_case() == kThermalTemperature;
}
inline void FtraceEvent::set_has_thermal_temperature() {
  _impl_._oneof_case_[0] = kThermalTemperature;
}
inline ::perfetto::protos::ThermalTemperatureFtraceEvent* FtraceEvent::release_thermal_temperature() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.thermal_temperature)
  if (event_case() == kThermalTemperature) {
    clear_has_event();
    ::perfetto::protos::ThermalTemperatureFtraceEvent* temp = _impl_.event_.thermal_temperature_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.thermal_temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ThermalTemperatureFtraceEvent& FtraceEvent::_internal_thermal_temperature() const {
  return event_case() == kThermalTemperature
      ? *_impl_.event_.thermal_temperature_
      : reinterpret_cast<::perfetto::protos::ThermalTemperatureFtraceEvent&>(::perfetto::protos::_ThermalTemperatureFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ThermalTemperatureFtraceEvent& FtraceEvent::thermal_temperature() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.thermal_temperature)
  return _internal_thermal_temperature();
}
inline ::perfetto::protos::ThermalTemperatureFtraceEvent* FtraceEvent::unsafe_arena_release_thermal_temperature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.thermal_temperature)
  if (event_case() == kThermalTemperature) {
    clear_has_event();
    ::perfetto::protos::ThermalTemperatureFtraceEvent* temp = _impl_.event_.thermal_temperature_;
    _impl_.event_.thermal_temperature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_thermal_temperature(::perfetto::protos::ThermalTemperatureFtraceEvent* thermal_temperature) {
  clear_event();
  if (thermal_temperature) {
    set_has_thermal_temperature();
    _impl_.event_.thermal_temperature_ = thermal_temperature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.thermal_temperature)
}
inline ::perfetto::protos::ThermalTemperatureFtraceEvent* FtraceEvent::_internal_mutable_thermal_temperature() {
  if (event_case() != kThermalTemperature) {
    clear_event();
    set_has_thermal_temperature();
    _impl_.event_.thermal_temperature_ = CreateMaybeMessage< ::perfetto::protos::ThermalTemperatureFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.thermal_temperature_;
}
inline ::perfetto::protos::ThermalTemperatureFtraceEvent* FtraceEvent::mutable_thermal_temperature() {
  ::perfetto::protos::ThermalTemperatureFtraceEvent* _msg = _internal_mutable_thermal_temperature();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.thermal_temperature)
  return _msg;
}

// .perfetto.protos.CdevUpdateFtraceEvent cdev_update = 342;
inline bool FtraceEvent::has_cdev_update() const {
  return event_case() == kCdevUpdate;
}
inline bool FtraceEvent::_internal_has_cdev_update() const {
  return event_case() == kCdevUpdate;
}
inline void FtraceEvent::set_has_cdev_update() {
  _impl_._oneof_case_[0] = kCdevUpdate;
}
inline ::perfetto::protos::CdevUpdateFtraceEvent* FtraceEvent::release_cdev_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cdev_update)
  if (event_case() == kCdevUpdate) {
    clear_has_event();
    ::perfetto::protos::CdevUpdateFtraceEvent* temp = _impl_.event_.cdev_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cdev_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CdevUpdateFtraceEvent& FtraceEvent::_internal_cdev_update() const {
  return event_case() == kCdevUpdate
      ? *_impl_.event_.cdev_update_
      : reinterpret_cast<::perfetto::protos::CdevUpdateFtraceEvent&>(::perfetto::protos::_CdevUpdateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CdevUpdateFtraceEvent& FtraceEvent::cdev_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cdev_update)
  return _internal_cdev_update();
}
inline ::perfetto::protos::CdevUpdateFtraceEvent* FtraceEvent::unsafe_arena_release_cdev_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cdev_update)
  if (event_case() == kCdevUpdate) {
    clear_has_event();
    ::perfetto::protos::CdevUpdateFtraceEvent* temp = _impl_.event_.cdev_update_;
    _impl_.event_.cdev_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cdev_update(::perfetto::protos::CdevUpdateFtraceEvent* cdev_update) {
  clear_event();
  if (cdev_update) {
    set_has_cdev_update();
    _impl_.event_.cdev_update_ = cdev_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cdev_update)
}
inline ::perfetto::protos::CdevUpdateFtraceEvent* FtraceEvent::_internal_mutable_cdev_update() {
  if (event_case() != kCdevUpdate) {
    clear_event();
    set_has_cdev_update();
    _impl_.event_.cdev_update_ = CreateMaybeMessage< ::perfetto::protos::CdevUpdateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cdev_update_;
}
inline ::perfetto::protos::CdevUpdateFtraceEvent* FtraceEvent::mutable_cdev_update() {
  ::perfetto::protos::CdevUpdateFtraceEvent* _msg = _internal_mutable_cdev_update();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cdev_update)
  return _msg;
}

// .perfetto.protos.CpuhpExitFtraceEvent cpuhp_exit = 343;
inline bool FtraceEvent::has_cpuhp_exit() const {
  return event_case() == kCpuhpExit;
}
inline bool FtraceEvent::_internal_has_cpuhp_exit() const {
  return event_case() == kCpuhpExit;
}
inline void FtraceEvent::set_has_cpuhp_exit() {
  _impl_._oneof_case_[0] = kCpuhpExit;
}
inline ::perfetto::protos::CpuhpExitFtraceEvent* FtraceEvent::release_cpuhp_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_exit)
  if (event_case() == kCpuhpExit) {
    clear_has_event();
    ::perfetto::protos::CpuhpExitFtraceEvent* temp = _impl_.event_.cpuhp_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpuhp_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpExitFtraceEvent& FtraceEvent::_internal_cpuhp_exit() const {
  return event_case() == kCpuhpExit
      ? *_impl_.event_.cpuhp_exit_
      : reinterpret_cast<::perfetto::protos::CpuhpExitFtraceEvent&>(::perfetto::protos::_CpuhpExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuhpExitFtraceEvent& FtraceEvent::cpuhp_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_exit)
  return _internal_cpuhp_exit();
}
inline ::perfetto::protos::CpuhpExitFtraceEvent* FtraceEvent::unsafe_arena_release_cpuhp_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpuhp_exit)
  if (event_case() == kCpuhpExit) {
    clear_has_event();
    ::perfetto::protos::CpuhpExitFtraceEvent* temp = _impl_.event_.cpuhp_exit_;
    _impl_.event_.cpuhp_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpuhp_exit(::perfetto::protos::CpuhpExitFtraceEvent* cpuhp_exit) {
  clear_event();
  if (cpuhp_exit) {
    set_has_cpuhp_exit();
    _impl_.event_.cpuhp_exit_ = cpuhp_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpuhp_exit)
}
inline ::perfetto::protos::CpuhpExitFtraceEvent* FtraceEvent::_internal_mutable_cpuhp_exit() {
  if (event_case() != kCpuhpExit) {
    clear_event();
    set_has_cpuhp_exit();
    _impl_.event_.cpuhp_exit_ = CreateMaybeMessage< ::perfetto::protos::CpuhpExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpuhp_exit_;
}
inline ::perfetto::protos::CpuhpExitFtraceEvent* FtraceEvent::mutable_cpuhp_exit() {
  ::perfetto::protos::CpuhpExitFtraceEvent* _msg = _internal_mutable_cpuhp_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_exit)
  return _msg;
}

// .perfetto.protos.CpuhpMultiEnterFtraceEvent cpuhp_multi_enter = 344;
inline bool FtraceEvent::has_cpuhp_multi_enter() const {
  return event_case() == kCpuhpMultiEnter;
}
inline bool FtraceEvent::_internal_has_cpuhp_multi_enter() const {
  return event_case() == kCpuhpMultiEnter;
}
inline void FtraceEvent::set_has_cpuhp_multi_enter() {
  _impl_._oneof_case_[0] = kCpuhpMultiEnter;
}
inline ::perfetto::protos::CpuhpMultiEnterFtraceEvent* FtraceEvent::release_cpuhp_multi_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  if (event_case() == kCpuhpMultiEnter) {
    clear_has_event();
    ::perfetto::protos::CpuhpMultiEnterFtraceEvent* temp = _impl_.event_.cpuhp_multi_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpuhp_multi_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& FtraceEvent::_internal_cpuhp_multi_enter() const {
  return event_case() == kCpuhpMultiEnter
      ? *_impl_.event_.cpuhp_multi_enter_
      : reinterpret_cast<::perfetto::protos::CpuhpMultiEnterFtraceEvent&>(::perfetto::protos::_CpuhpMultiEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuhpMultiEnterFtraceEvent& FtraceEvent::cpuhp_multi_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  return _internal_cpuhp_multi_enter();
}
inline ::perfetto::protos::CpuhpMultiEnterFtraceEvent* FtraceEvent::unsafe_arena_release_cpuhp_multi_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  if (event_case() == kCpuhpMultiEnter) {
    clear_has_event();
    ::perfetto::protos::CpuhpMultiEnterFtraceEvent* temp = _impl_.event_.cpuhp_multi_enter_;
    _impl_.event_.cpuhp_multi_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpuhp_multi_enter(::perfetto::protos::CpuhpMultiEnterFtraceEvent* cpuhp_multi_enter) {
  clear_event();
  if (cpuhp_multi_enter) {
    set_has_cpuhp_multi_enter();
    _impl_.event_.cpuhp_multi_enter_ = cpuhp_multi_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
}
inline ::perfetto::protos::CpuhpMultiEnterFtraceEvent* FtraceEvent::_internal_mutable_cpuhp_multi_enter() {
  if (event_case() != kCpuhpMultiEnter) {
    clear_event();
    set_has_cpuhp_multi_enter();
    _impl_.event_.cpuhp_multi_enter_ = CreateMaybeMessage< ::perfetto::protos::CpuhpMultiEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpuhp_multi_enter_;
}
inline ::perfetto::protos::CpuhpMultiEnterFtraceEvent* FtraceEvent::mutable_cpuhp_multi_enter() {
  ::perfetto::protos::CpuhpMultiEnterFtraceEvent* _msg = _internal_mutable_cpuhp_multi_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_multi_enter)
  return _msg;
}

// .perfetto.protos.CpuhpEnterFtraceEvent cpuhp_enter = 345;
inline bool FtraceEvent::has_cpuhp_enter() const {
  return event_case() == kCpuhpEnter;
}
inline bool FtraceEvent::_internal_has_cpuhp_enter() const {
  return event_case() == kCpuhpEnter;
}
inline void FtraceEvent::set_has_cpuhp_enter() {
  _impl_._oneof_case_[0] = kCpuhpEnter;
}
inline ::perfetto::protos::CpuhpEnterFtraceEvent* FtraceEvent::release_cpuhp_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_enter)
  if (event_case() == kCpuhpEnter) {
    clear_has_event();
    ::perfetto::protos::CpuhpEnterFtraceEvent* temp = _impl_.event_.cpuhp_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpuhp_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpEnterFtraceEvent& FtraceEvent::_internal_cpuhp_enter() const {
  return event_case() == kCpuhpEnter
      ? *_impl_.event_.cpuhp_enter_
      : reinterpret_cast<::perfetto::protos::CpuhpEnterFtraceEvent&>(::perfetto::protos::_CpuhpEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuhpEnterFtraceEvent& FtraceEvent::cpuhp_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_enter)
  return _internal_cpuhp_enter();
}
inline ::perfetto::protos::CpuhpEnterFtraceEvent* FtraceEvent::unsafe_arena_release_cpuhp_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpuhp_enter)
  if (event_case() == kCpuhpEnter) {
    clear_has_event();
    ::perfetto::protos::CpuhpEnterFtraceEvent* temp = _impl_.event_.cpuhp_enter_;
    _impl_.event_.cpuhp_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpuhp_enter(::perfetto::protos::CpuhpEnterFtraceEvent* cpuhp_enter) {
  clear_event();
  if (cpuhp_enter) {
    set_has_cpuhp_enter();
    _impl_.event_.cpuhp_enter_ = cpuhp_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpuhp_enter)
}
inline ::perfetto::protos::CpuhpEnterFtraceEvent* FtraceEvent::_internal_mutable_cpuhp_enter() {
  if (event_case() != kCpuhpEnter) {
    clear_event();
    set_has_cpuhp_enter();
    _impl_.event_.cpuhp_enter_ = CreateMaybeMessage< ::perfetto::protos::CpuhpEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpuhp_enter_;
}
inline ::perfetto::protos::CpuhpEnterFtraceEvent* FtraceEvent::mutable_cpuhp_enter() {
  ::perfetto::protos::CpuhpEnterFtraceEvent* _msg = _internal_mutable_cpuhp_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_enter)
  return _msg;
}

// .perfetto.protos.CpuhpLatencyFtraceEvent cpuhp_latency = 346;
inline bool FtraceEvent::has_cpuhp_latency() const {
  return event_case() == kCpuhpLatency;
}
inline bool FtraceEvent::_internal_has_cpuhp_latency() const {
  return event_case() == kCpuhpLatency;
}
inline void FtraceEvent::set_has_cpuhp_latency() {
  _impl_._oneof_case_[0] = kCpuhpLatency;
}
inline ::perfetto::protos::CpuhpLatencyFtraceEvent* FtraceEvent::release_cpuhp_latency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_latency)
  if (event_case() == kCpuhpLatency) {
    clear_has_event();
    ::perfetto::protos::CpuhpLatencyFtraceEvent* temp = _impl_.event_.cpuhp_latency_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpuhp_latency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpLatencyFtraceEvent& FtraceEvent::_internal_cpuhp_latency() const {
  return event_case() == kCpuhpLatency
      ? *_impl_.event_.cpuhp_latency_
      : reinterpret_cast<::perfetto::protos::CpuhpLatencyFtraceEvent&>(::perfetto::protos::_CpuhpLatencyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuhpLatencyFtraceEvent& FtraceEvent::cpuhp_latency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_latency)
  return _internal_cpuhp_latency();
}
inline ::perfetto::protos::CpuhpLatencyFtraceEvent* FtraceEvent::unsafe_arena_release_cpuhp_latency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpuhp_latency)
  if (event_case() == kCpuhpLatency) {
    clear_has_event();
    ::perfetto::protos::CpuhpLatencyFtraceEvent* temp = _impl_.event_.cpuhp_latency_;
    _impl_.event_.cpuhp_latency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpuhp_latency(::perfetto::protos::CpuhpLatencyFtraceEvent* cpuhp_latency) {
  clear_event();
  if (cpuhp_latency) {
    set_has_cpuhp_latency();
    _impl_.event_.cpuhp_latency_ = cpuhp_latency;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpuhp_latency)
}
inline ::perfetto::protos::CpuhpLatencyFtraceEvent* FtraceEvent::_internal_mutable_cpuhp_latency() {
  if (event_case() != kCpuhpLatency) {
    clear_event();
    set_has_cpuhp_latency();
    _impl_.event_.cpuhp_latency_ = CreateMaybeMessage< ::perfetto::protos::CpuhpLatencyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpuhp_latency_;
}
inline ::perfetto::protos::CpuhpLatencyFtraceEvent* FtraceEvent::mutable_cpuhp_latency() {
  ::perfetto::protos::CpuhpLatencyFtraceEvent* _msg = _internal_mutable_cpuhp_latency();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_latency)
  return _msg;
}

// .perfetto.protos.FastrpcDmaStatFtraceEvent fastrpc_dma_stat = 347;
inline bool FtraceEvent::has_fastrpc_dma_stat() const {
  return event_case() == kFastrpcDmaStat;
}
inline bool FtraceEvent::_internal_has_fastrpc_dma_stat() const {
  return event_case() == kFastrpcDmaStat;
}
inline void FtraceEvent::set_has_fastrpc_dma_stat() {
  _impl_._oneof_case_[0] = kFastrpcDmaStat;
}
inline ::perfetto::protos::FastrpcDmaStatFtraceEvent* FtraceEvent::release_fastrpc_dma_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  if (event_case() == kFastrpcDmaStat) {
    clear_has_event();
    ::perfetto::protos::FastrpcDmaStatFtraceEvent* temp = _impl_.event_.fastrpc_dma_stat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.fastrpc_dma_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FastrpcDmaStatFtraceEvent& FtraceEvent::_internal_fastrpc_dma_stat() const {
  return event_case() == kFastrpcDmaStat
      ? *_impl_.event_.fastrpc_dma_stat_
      : reinterpret_cast<::perfetto::protos::FastrpcDmaStatFtraceEvent&>(::perfetto::protos::_FastrpcDmaStatFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FastrpcDmaStatFtraceEvent& FtraceEvent::fastrpc_dma_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  return _internal_fastrpc_dma_stat();
}
inline ::perfetto::protos::FastrpcDmaStatFtraceEvent* FtraceEvent::unsafe_arena_release_fastrpc_dma_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  if (event_case() == kFastrpcDmaStat) {
    clear_has_event();
    ::perfetto::protos::FastrpcDmaStatFtraceEvent* temp = _impl_.event_.fastrpc_dma_stat_;
    _impl_.event_.fastrpc_dma_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_fastrpc_dma_stat(::perfetto::protos::FastrpcDmaStatFtraceEvent* fastrpc_dma_stat) {
  clear_event();
  if (fastrpc_dma_stat) {
    set_has_fastrpc_dma_stat();
    _impl_.event_.fastrpc_dma_stat_ = fastrpc_dma_stat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
}
inline ::perfetto::protos::FastrpcDmaStatFtraceEvent* FtraceEvent::_internal_mutable_fastrpc_dma_stat() {
  if (event_case() != kFastrpcDmaStat) {
    clear_event();
    set_has_fastrpc_dma_stat();
    _impl_.event_.fastrpc_dma_stat_ = CreateMaybeMessage< ::perfetto::protos::FastrpcDmaStatFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.fastrpc_dma_stat_;
}
inline ::perfetto::protos::FastrpcDmaStatFtraceEvent* FtraceEvent::mutable_fastrpc_dma_stat() {
  ::perfetto::protos::FastrpcDmaStatFtraceEvent* _msg = _internal_mutable_fastrpc_dma_stat();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.fastrpc_dma_stat)
  return _msg;
}

// .perfetto.protos.DpuTracingMarkWriteFtraceEvent dpu_tracing_mark_write = 348;
inline bool FtraceEvent::has_dpu_tracing_mark_write() const {
  return event_case() == kDpuTracingMarkWrite;
}
inline bool FtraceEvent::_internal_has_dpu_tracing_mark_write() const {
  return event_case() == kDpuTracingMarkWrite;
}
inline void FtraceEvent::set_has_dpu_tracing_mark_write() {
  _impl_._oneof_case_[0] = kDpuTracingMarkWrite;
}
inline ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* FtraceEvent::release_dpu_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  if (event_case() == kDpuTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* temp = _impl_.event_.dpu_tracing_mark_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dpu_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& FtraceEvent::_internal_dpu_tracing_mark_write() const {
  return event_case() == kDpuTracingMarkWrite
      ? *_impl_.event_.dpu_tracing_mark_write_
      : reinterpret_cast<::perfetto::protos::DpuTracingMarkWriteFtraceEvent&>(::perfetto::protos::_DpuTracingMarkWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DpuTracingMarkWriteFtraceEvent& FtraceEvent::dpu_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  return _internal_dpu_tracing_mark_write();
}
inline ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* FtraceEvent::unsafe_arena_release_dpu_tracing_mark_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  if (event_case() == kDpuTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* temp = _impl_.event_.dpu_tracing_mark_write_;
    _impl_.event_.dpu_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dpu_tracing_mark_write(::perfetto::protos::DpuTracingMarkWriteFtraceEvent* dpu_tracing_mark_write) {
  clear_event();
  if (dpu_tracing_mark_write) {
    set_has_dpu_tracing_mark_write();
    _impl_.event_.dpu_tracing_mark_write_ = dpu_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
}
inline ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* FtraceEvent::_internal_mutable_dpu_tracing_mark_write() {
  if (event_case() != kDpuTracingMarkWrite) {
    clear_event();
    set_has_dpu_tracing_mark_write();
    _impl_.event_.dpu_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::DpuTracingMarkWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dpu_tracing_mark_write_;
}
inline ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* FtraceEvent::mutable_dpu_tracing_mark_write() {
  ::perfetto::protos::DpuTracingMarkWriteFtraceEvent* _msg = _internal_mutable_dpu_tracing_mark_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dpu_tracing_mark_write)
  return _msg;
}

// .perfetto.protos.G2dTracingMarkWriteFtraceEvent g2d_tracing_mark_write = 349;
inline bool FtraceEvent::has_g2d_tracing_mark_write() const {
  return event_case() == kG2DTracingMarkWrite;
}
inline bool FtraceEvent::_internal_has_g2d_tracing_mark_write() const {
  return event_case() == kG2DTracingMarkWrite;
}
inline void FtraceEvent::set_has_g2d_tracing_mark_write() {
  _impl_._oneof_case_[0] = kG2DTracingMarkWrite;
}
inline ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* FtraceEvent::release_g2d_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  if (event_case() == kG2DTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* temp = _impl_.event_.g2d_tracing_mark_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.g2d_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& FtraceEvent::_internal_g2d_tracing_mark_write() const {
  return event_case() == kG2DTracingMarkWrite
      ? *_impl_.event_.g2d_tracing_mark_write_
      : reinterpret_cast<::perfetto::protos::G2dTracingMarkWriteFtraceEvent&>(::perfetto::protos::_G2dTracingMarkWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::G2dTracingMarkWriteFtraceEvent& FtraceEvent::g2d_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  return _internal_g2d_tracing_mark_write();
}
inline ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* FtraceEvent::unsafe_arena_release_g2d_tracing_mark_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  if (event_case() == kG2DTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* temp = _impl_.event_.g2d_tracing_mark_write_;
    _impl_.event_.g2d_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_g2d_tracing_mark_write(::perfetto::protos::G2dTracingMarkWriteFtraceEvent* g2d_tracing_mark_write) {
  clear_event();
  if (g2d_tracing_mark_write) {
    set_has_g2d_tracing_mark_write();
    _impl_.event_.g2d_tracing_mark_write_ = g2d_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
}
inline ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* FtraceEvent::_internal_mutable_g2d_tracing_mark_write() {
  if (event_case() != kG2DTracingMarkWrite) {
    clear_event();
    set_has_g2d_tracing_mark_write();
    _impl_.event_.g2d_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::G2dTracingMarkWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.g2d_tracing_mark_write_;
}
inline ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* FtraceEvent::mutable_g2d_tracing_mark_write() {
  ::perfetto::protos::G2dTracingMarkWriteFtraceEvent* _msg = _internal_mutable_g2d_tracing_mark_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.g2d_tracing_mark_write)
  return _msg;
}

// .perfetto.protos.MaliTracingMarkWriteFtraceEvent mali_tracing_mark_write = 350;
inline bool FtraceEvent::has_mali_tracing_mark_write() const {
  return event_case() == kMaliTracingMarkWrite;
}
inline bool FtraceEvent::_internal_has_mali_tracing_mark_write() const {
  return event_case() == kMaliTracingMarkWrite;
}
inline void FtraceEvent::set_has_mali_tracing_mark_write() {
  _impl_._oneof_case_[0] = kMaliTracingMarkWrite;
}
inline ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* FtraceEvent::release_mali_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  if (event_case() == kMaliTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* temp = _impl_.event_.mali_tracing_mark_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& FtraceEvent::_internal_mali_tracing_mark_write() const {
  return event_case() == kMaliTracingMarkWrite
      ? *_impl_.event_.mali_tracing_mark_write_
      : reinterpret_cast<::perfetto::protos::MaliTracingMarkWriteFtraceEvent&>(::perfetto::protos::_MaliTracingMarkWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliTracingMarkWriteFtraceEvent& FtraceEvent::mali_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  return _internal_mali_tracing_mark_write();
}
inline ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* FtraceEvent::unsafe_arena_release_mali_tracing_mark_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  if (event_case() == kMaliTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* temp = _impl_.event_.mali_tracing_mark_write_;
    _impl_.event_.mali_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_tracing_mark_write(::perfetto::protos::MaliTracingMarkWriteFtraceEvent* mali_tracing_mark_write) {
  clear_event();
  if (mali_tracing_mark_write) {
    set_has_mali_tracing_mark_write();
    _impl_.event_.mali_tracing_mark_write_ = mali_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
}
inline ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* FtraceEvent::_internal_mutable_mali_tracing_mark_write() {
  if (event_case() != kMaliTracingMarkWrite) {
    clear_event();
    set_has_mali_tracing_mark_write();
    _impl_.event_.mali_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_tracing_mark_write_;
}
inline ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* FtraceEvent::mutable_mali_tracing_mark_write() {
  ::perfetto::protos::MaliTracingMarkWriteFtraceEvent* _msg = _internal_mutable_mali_tracing_mark_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_tracing_mark_write)
  return _msg;
}

// .perfetto.protos.DmaHeapStatFtraceEvent dma_heap_stat = 351;
inline bool FtraceEvent::has_dma_heap_stat() const {
  return event_case() == kDmaHeapStat;
}
inline bool FtraceEvent::_internal_has_dma_heap_stat() const {
  return event_case() == kDmaHeapStat;
}
inline void FtraceEvent::set_has_dma_heap_stat() {
  _impl_._oneof_case_[0] = kDmaHeapStat;
}
inline ::perfetto::protos::DmaHeapStatFtraceEvent* FtraceEvent::release_dma_heap_stat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_heap_stat)
  if (event_case() == kDmaHeapStat) {
    clear_has_event();
    ::perfetto::protos::DmaHeapStatFtraceEvent* temp = _impl_.event_.dma_heap_stat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_heap_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaHeapStatFtraceEvent& FtraceEvent::_internal_dma_heap_stat() const {
  return event_case() == kDmaHeapStat
      ? *_impl_.event_.dma_heap_stat_
      : reinterpret_cast<::perfetto::protos::DmaHeapStatFtraceEvent&>(::perfetto::protos::_DmaHeapStatFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaHeapStatFtraceEvent& FtraceEvent::dma_heap_stat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_heap_stat)
  return _internal_dma_heap_stat();
}
inline ::perfetto::protos::DmaHeapStatFtraceEvent* FtraceEvent::unsafe_arena_release_dma_heap_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_heap_stat)
  if (event_case() == kDmaHeapStat) {
    clear_has_event();
    ::perfetto::protos::DmaHeapStatFtraceEvent* temp = _impl_.event_.dma_heap_stat_;
    _impl_.event_.dma_heap_stat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_heap_stat(::perfetto::protos::DmaHeapStatFtraceEvent* dma_heap_stat) {
  clear_event();
  if (dma_heap_stat) {
    set_has_dma_heap_stat();
    _impl_.event_.dma_heap_stat_ = dma_heap_stat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_heap_stat)
}
inline ::perfetto::protos::DmaHeapStatFtraceEvent* FtraceEvent::_internal_mutable_dma_heap_stat() {
  if (event_case() != kDmaHeapStat) {
    clear_event();
    set_has_dma_heap_stat();
    _impl_.event_.dma_heap_stat_ = CreateMaybeMessage< ::perfetto::protos::DmaHeapStatFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_heap_stat_;
}
inline ::perfetto::protos::DmaHeapStatFtraceEvent* FtraceEvent::mutable_dma_heap_stat() {
  ::perfetto::protos::DmaHeapStatFtraceEvent* _msg = _internal_mutable_dma_heap_stat();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_heap_stat)
  return _msg;
}

// .perfetto.protos.CpuhpPauseFtraceEvent cpuhp_pause = 352;
inline bool FtraceEvent::has_cpuhp_pause() const {
  return event_case() == kCpuhpPause;
}
inline bool FtraceEvent::_internal_has_cpuhp_pause() const {
  return event_case() == kCpuhpPause;
}
inline void FtraceEvent::set_has_cpuhp_pause() {
  _impl_._oneof_case_[0] = kCpuhpPause;
}
inline ::perfetto::protos::CpuhpPauseFtraceEvent* FtraceEvent::release_cpuhp_pause() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cpuhp_pause)
  if (event_case() == kCpuhpPause) {
    clear_has_event();
    ::perfetto::protos::CpuhpPauseFtraceEvent* temp = _impl_.event_.cpuhp_pause_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cpuhp_pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CpuhpPauseFtraceEvent& FtraceEvent::_internal_cpuhp_pause() const {
  return event_case() == kCpuhpPause
      ? *_impl_.event_.cpuhp_pause_
      : reinterpret_cast<::perfetto::protos::CpuhpPauseFtraceEvent&>(::perfetto::protos::_CpuhpPauseFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CpuhpPauseFtraceEvent& FtraceEvent::cpuhp_pause() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cpuhp_pause)
  return _internal_cpuhp_pause();
}
inline ::perfetto::protos::CpuhpPauseFtraceEvent* FtraceEvent::unsafe_arena_release_cpuhp_pause() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cpuhp_pause)
  if (event_case() == kCpuhpPause) {
    clear_has_event();
    ::perfetto::protos::CpuhpPauseFtraceEvent* temp = _impl_.event_.cpuhp_pause_;
    _impl_.event_.cpuhp_pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cpuhp_pause(::perfetto::protos::CpuhpPauseFtraceEvent* cpuhp_pause) {
  clear_event();
  if (cpuhp_pause) {
    set_has_cpuhp_pause();
    _impl_.event_.cpuhp_pause_ = cpuhp_pause;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cpuhp_pause)
}
inline ::perfetto::protos::CpuhpPauseFtraceEvent* FtraceEvent::_internal_mutable_cpuhp_pause() {
  if (event_case() != kCpuhpPause) {
    clear_event();
    set_has_cpuhp_pause();
    _impl_.event_.cpuhp_pause_ = CreateMaybeMessage< ::perfetto::protos::CpuhpPauseFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cpuhp_pause_;
}
inline ::perfetto::protos::CpuhpPauseFtraceEvent* FtraceEvent::mutable_cpuhp_pause() {
  ::perfetto::protos::CpuhpPauseFtraceEvent* _msg = _internal_mutable_cpuhp_pause();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cpuhp_pause)
  return _msg;
}

// .perfetto.protos.SchedPiSetprioFtraceEvent sched_pi_setprio = 353;
inline bool FtraceEvent::has_sched_pi_setprio() const {
  return event_case() == kSchedPiSetprio;
}
inline bool FtraceEvent::_internal_has_sched_pi_setprio() const {
  return event_case() == kSchedPiSetprio;
}
inline void FtraceEvent::set_has_sched_pi_setprio() {
  _impl_._oneof_case_[0] = kSchedPiSetprio;
}
inline ::perfetto::protos::SchedPiSetprioFtraceEvent* FtraceEvent::release_sched_pi_setprio() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_pi_setprio)
  if (event_case() == kSchedPiSetprio) {
    clear_has_event();
    ::perfetto::protos::SchedPiSetprioFtraceEvent* temp = _impl_.event_.sched_pi_setprio_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_pi_setprio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedPiSetprioFtraceEvent& FtraceEvent::_internal_sched_pi_setprio() const {
  return event_case() == kSchedPiSetprio
      ? *_impl_.event_.sched_pi_setprio_
      : reinterpret_cast<::perfetto::protos::SchedPiSetprioFtraceEvent&>(::perfetto::protos::_SchedPiSetprioFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedPiSetprioFtraceEvent& FtraceEvent::sched_pi_setprio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_pi_setprio)
  return _internal_sched_pi_setprio();
}
inline ::perfetto::protos::SchedPiSetprioFtraceEvent* FtraceEvent::unsafe_arena_release_sched_pi_setprio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_pi_setprio)
  if (event_case() == kSchedPiSetprio) {
    clear_has_event();
    ::perfetto::protos::SchedPiSetprioFtraceEvent* temp = _impl_.event_.sched_pi_setprio_;
    _impl_.event_.sched_pi_setprio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_pi_setprio(::perfetto::protos::SchedPiSetprioFtraceEvent* sched_pi_setprio) {
  clear_event();
  if (sched_pi_setprio) {
    set_has_sched_pi_setprio();
    _impl_.event_.sched_pi_setprio_ = sched_pi_setprio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_pi_setprio)
}
inline ::perfetto::protos::SchedPiSetprioFtraceEvent* FtraceEvent::_internal_mutable_sched_pi_setprio() {
  if (event_case() != kSchedPiSetprio) {
    clear_event();
    set_has_sched_pi_setprio();
    _impl_.event_.sched_pi_setprio_ = CreateMaybeMessage< ::perfetto::protos::SchedPiSetprioFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_pi_setprio_;
}
inline ::perfetto::protos::SchedPiSetprioFtraceEvent* FtraceEvent::mutable_sched_pi_setprio() {
  ::perfetto::protos::SchedPiSetprioFtraceEvent* _msg = _internal_mutable_sched_pi_setprio();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_pi_setprio)
  return _msg;
}

// .perfetto.protos.SdeSdeEvtlogFtraceEvent sde_sde_evtlog = 354;
inline bool FtraceEvent::has_sde_sde_evtlog() const {
  return event_case() == kSdeSdeEvtlog;
}
inline bool FtraceEvent::_internal_has_sde_sde_evtlog() const {
  return event_case() == kSdeSdeEvtlog;
}
inline void FtraceEvent::set_has_sde_sde_evtlog() {
  _impl_._oneof_case_[0] = kSdeSdeEvtlog;
}
inline ::perfetto::protos::SdeSdeEvtlogFtraceEvent* FtraceEvent::release_sde_sde_evtlog() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_sde_evtlog)
  if (event_case() == kSdeSdeEvtlog) {
    clear_has_event();
    ::perfetto::protos::SdeSdeEvtlogFtraceEvent* temp = _impl_.event_.sde_sde_evtlog_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sde_sde_evtlog_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeSdeEvtlogFtraceEvent& FtraceEvent::_internal_sde_sde_evtlog() const {
  return event_case() == kSdeSdeEvtlog
      ? *_impl_.event_.sde_sde_evtlog_
      : reinterpret_cast<::perfetto::protos::SdeSdeEvtlogFtraceEvent&>(::perfetto::protos::_SdeSdeEvtlogFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SdeSdeEvtlogFtraceEvent& FtraceEvent::sde_sde_evtlog() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_sde_evtlog)
  return _internal_sde_sde_evtlog();
}
inline ::perfetto::protos::SdeSdeEvtlogFtraceEvent* FtraceEvent::unsafe_arena_release_sde_sde_evtlog() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sde_sde_evtlog)
  if (event_case() == kSdeSdeEvtlog) {
    clear_has_event();
    ::perfetto::protos::SdeSdeEvtlogFtraceEvent* temp = _impl_.event_.sde_sde_evtlog_;
    _impl_.event_.sde_sde_evtlog_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sde_sde_evtlog(::perfetto::protos::SdeSdeEvtlogFtraceEvent* sde_sde_evtlog) {
  clear_event();
  if (sde_sde_evtlog) {
    set_has_sde_sde_evtlog();
    _impl_.event_.sde_sde_evtlog_ = sde_sde_evtlog;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sde_sde_evtlog)
}
inline ::perfetto::protos::SdeSdeEvtlogFtraceEvent* FtraceEvent::_internal_mutable_sde_sde_evtlog() {
  if (event_case() != kSdeSdeEvtlog) {
    clear_event();
    set_has_sde_sde_evtlog();
    _impl_.event_.sde_sde_evtlog_ = CreateMaybeMessage< ::perfetto::protos::SdeSdeEvtlogFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sde_sde_evtlog_;
}
inline ::perfetto::protos::SdeSdeEvtlogFtraceEvent* FtraceEvent::mutable_sde_sde_evtlog() {
  ::perfetto::protos::SdeSdeEvtlogFtraceEvent* _msg = _internal_mutable_sde_sde_evtlog();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_sde_evtlog)
  return _msg;
}

// .perfetto.protos.SdeSdePerfCalcCrtcFtraceEvent sde_sde_perf_calc_crtc = 355;
inline bool FtraceEvent::has_sde_sde_perf_calc_crtc() const {
  return event_case() == kSdeSdePerfCalcCrtc;
}
inline bool FtraceEvent::_internal_has_sde_sde_perf_calc_crtc() const {
  return event_case() == kSdeSdePerfCalcCrtc;
}
inline void FtraceEvent::set_has_sde_sde_perf_calc_crtc() {
  _impl_._oneof_case_[0] = kSdeSdePerfCalcCrtc;
}
inline ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* FtraceEvent::release_sde_sde_perf_calc_crtc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_sde_perf_calc_crtc)
  if (event_case() == kSdeSdePerfCalcCrtc) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* temp = _impl_.event_.sde_sde_perf_calc_crtc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sde_sde_perf_calc_crtc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent& FtraceEvent::_internal_sde_sde_perf_calc_crtc() const {
  return event_case() == kSdeSdePerfCalcCrtc
      ? *_impl_.event_.sde_sde_perf_calc_crtc_
      : reinterpret_cast<::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent&>(::perfetto::protos::_SdeSdePerfCalcCrtcFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent& FtraceEvent::sde_sde_perf_calc_crtc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_sde_perf_calc_crtc)
  return _internal_sde_sde_perf_calc_crtc();
}
inline ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* FtraceEvent::unsafe_arena_release_sde_sde_perf_calc_crtc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sde_sde_perf_calc_crtc)
  if (event_case() == kSdeSdePerfCalcCrtc) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* temp = _impl_.event_.sde_sde_perf_calc_crtc_;
    _impl_.event_.sde_sde_perf_calc_crtc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sde_sde_perf_calc_crtc(::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* sde_sde_perf_calc_crtc) {
  clear_event();
  if (sde_sde_perf_calc_crtc) {
    set_has_sde_sde_perf_calc_crtc();
    _impl_.event_.sde_sde_perf_calc_crtc_ = sde_sde_perf_calc_crtc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_calc_crtc)
}
inline ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* FtraceEvent::_internal_mutable_sde_sde_perf_calc_crtc() {
  if (event_case() != kSdeSdePerfCalcCrtc) {
    clear_event();
    set_has_sde_sde_perf_calc_crtc();
    _impl_.event_.sde_sde_perf_calc_crtc_ = CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sde_sde_perf_calc_crtc_;
}
inline ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* FtraceEvent::mutable_sde_sde_perf_calc_crtc() {
  ::perfetto::protos::SdeSdePerfCalcCrtcFtraceEvent* _msg = _internal_mutable_sde_sde_perf_calc_crtc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_sde_perf_calc_crtc)
  return _msg;
}

// .perfetto.protos.SdeSdePerfCrtcUpdateFtraceEvent sde_sde_perf_crtc_update = 356;
inline bool FtraceEvent::has_sde_sde_perf_crtc_update() const {
  return event_case() == kSdeSdePerfCrtcUpdate;
}
inline bool FtraceEvent::_internal_has_sde_sde_perf_crtc_update() const {
  return event_case() == kSdeSdePerfCrtcUpdate;
}
inline void FtraceEvent::set_has_sde_sde_perf_crtc_update() {
  _impl_._oneof_case_[0] = kSdeSdePerfCrtcUpdate;
}
inline ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* FtraceEvent::release_sde_sde_perf_crtc_update() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_sde_perf_crtc_update)
  if (event_case() == kSdeSdePerfCrtcUpdate) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* temp = _impl_.event_.sde_sde_perf_crtc_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sde_sde_perf_crtc_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent& FtraceEvent::_internal_sde_sde_perf_crtc_update() const {
  return event_case() == kSdeSdePerfCrtcUpdate
      ? *_impl_.event_.sde_sde_perf_crtc_update_
      : reinterpret_cast<::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent&>(::perfetto::protos::_SdeSdePerfCrtcUpdateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent& FtraceEvent::sde_sde_perf_crtc_update() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_sde_perf_crtc_update)
  return _internal_sde_sde_perf_crtc_update();
}
inline ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* FtraceEvent::unsafe_arena_release_sde_sde_perf_crtc_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sde_sde_perf_crtc_update)
  if (event_case() == kSdeSdePerfCrtcUpdate) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* temp = _impl_.event_.sde_sde_perf_crtc_update_;
    _impl_.event_.sde_sde_perf_crtc_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sde_sde_perf_crtc_update(::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* sde_sde_perf_crtc_update) {
  clear_event();
  if (sde_sde_perf_crtc_update) {
    set_has_sde_sde_perf_crtc_update();
    _impl_.event_.sde_sde_perf_crtc_update_ = sde_sde_perf_crtc_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_crtc_update)
}
inline ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* FtraceEvent::_internal_mutable_sde_sde_perf_crtc_update() {
  if (event_case() != kSdeSdePerfCrtcUpdate) {
    clear_event();
    set_has_sde_sde_perf_crtc_update();
    _impl_.event_.sde_sde_perf_crtc_update_ = CreateMaybeMessage< ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sde_sde_perf_crtc_update_;
}
inline ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* FtraceEvent::mutable_sde_sde_perf_crtc_update() {
  ::perfetto::protos::SdeSdePerfCrtcUpdateFtraceEvent* _msg = _internal_mutable_sde_sde_perf_crtc_update();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_sde_perf_crtc_update)
  return _msg;
}

// .perfetto.protos.SdeSdePerfSetQosLutsFtraceEvent sde_sde_perf_set_qos_luts = 357;
inline bool FtraceEvent::has_sde_sde_perf_set_qos_luts() const {
  return event_case() == kSdeSdePerfSetQosLuts;
}
inline bool FtraceEvent::_internal_has_sde_sde_perf_set_qos_luts() const {
  return event_case() == kSdeSdePerfSetQosLuts;
}
inline void FtraceEvent::set_has_sde_sde_perf_set_qos_luts() {
  _impl_._oneof_case_[0] = kSdeSdePerfSetQosLuts;
}
inline ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* FtraceEvent::release_sde_sde_perf_set_qos_luts() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_sde_perf_set_qos_luts)
  if (event_case() == kSdeSdePerfSetQosLuts) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* temp = _impl_.event_.sde_sde_perf_set_qos_luts_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sde_sde_perf_set_qos_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent& FtraceEvent::_internal_sde_sde_perf_set_qos_luts() const {
  return event_case() == kSdeSdePerfSetQosLuts
      ? *_impl_.event_.sde_sde_perf_set_qos_luts_
      : reinterpret_cast<::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent&>(::perfetto::protos::_SdeSdePerfSetQosLutsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent& FtraceEvent::sde_sde_perf_set_qos_luts() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_sde_perf_set_qos_luts)
  return _internal_sde_sde_perf_set_qos_luts();
}
inline ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* FtraceEvent::unsafe_arena_release_sde_sde_perf_set_qos_luts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sde_sde_perf_set_qos_luts)
  if (event_case() == kSdeSdePerfSetQosLuts) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* temp = _impl_.event_.sde_sde_perf_set_qos_luts_;
    _impl_.event_.sde_sde_perf_set_qos_luts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sde_sde_perf_set_qos_luts(::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* sde_sde_perf_set_qos_luts) {
  clear_event();
  if (sde_sde_perf_set_qos_luts) {
    set_has_sde_sde_perf_set_qos_luts();
    _impl_.event_.sde_sde_perf_set_qos_luts_ = sde_sde_perf_set_qos_luts;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_set_qos_luts)
}
inline ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* FtraceEvent::_internal_mutable_sde_sde_perf_set_qos_luts() {
  if (event_case() != kSdeSdePerfSetQosLuts) {
    clear_event();
    set_has_sde_sde_perf_set_qos_luts();
    _impl_.event_.sde_sde_perf_set_qos_luts_ = CreateMaybeMessage< ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sde_sde_perf_set_qos_luts_;
}
inline ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* FtraceEvent::mutable_sde_sde_perf_set_qos_luts() {
  ::perfetto::protos::SdeSdePerfSetQosLutsFtraceEvent* _msg = _internal_mutable_sde_sde_perf_set_qos_luts();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_sde_perf_set_qos_luts)
  return _msg;
}

// .perfetto.protos.SdeSdePerfUpdateBusFtraceEvent sde_sde_perf_update_bus = 358;
inline bool FtraceEvent::has_sde_sde_perf_update_bus() const {
  return event_case() == kSdeSdePerfUpdateBus;
}
inline bool FtraceEvent::_internal_has_sde_sde_perf_update_bus() const {
  return event_case() == kSdeSdePerfUpdateBus;
}
inline void FtraceEvent::set_has_sde_sde_perf_update_bus() {
  _impl_._oneof_case_[0] = kSdeSdePerfUpdateBus;
}
inline ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* FtraceEvent::release_sde_sde_perf_update_bus() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sde_sde_perf_update_bus)
  if (event_case() == kSdeSdePerfUpdateBus) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* temp = _impl_.event_.sde_sde_perf_update_bus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sde_sde_perf_update_bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent& FtraceEvent::_internal_sde_sde_perf_update_bus() const {
  return event_case() == kSdeSdePerfUpdateBus
      ? *_impl_.event_.sde_sde_perf_update_bus_
      : reinterpret_cast<::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent&>(::perfetto::protos::_SdeSdePerfUpdateBusFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent& FtraceEvent::sde_sde_perf_update_bus() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sde_sde_perf_update_bus)
  return _internal_sde_sde_perf_update_bus();
}
inline ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* FtraceEvent::unsafe_arena_release_sde_sde_perf_update_bus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sde_sde_perf_update_bus)
  if (event_case() == kSdeSdePerfUpdateBus) {
    clear_has_event();
    ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* temp = _impl_.event_.sde_sde_perf_update_bus_;
    _impl_.event_.sde_sde_perf_update_bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sde_sde_perf_update_bus(::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* sde_sde_perf_update_bus) {
  clear_event();
  if (sde_sde_perf_update_bus) {
    set_has_sde_sde_perf_update_bus();
    _impl_.event_.sde_sde_perf_update_bus_ = sde_sde_perf_update_bus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sde_sde_perf_update_bus)
}
inline ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* FtraceEvent::_internal_mutable_sde_sde_perf_update_bus() {
  if (event_case() != kSdeSdePerfUpdateBus) {
    clear_event();
    set_has_sde_sde_perf_update_bus();
    _impl_.event_.sde_sde_perf_update_bus_ = CreateMaybeMessage< ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sde_sde_perf_update_bus_;
}
inline ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* FtraceEvent::mutable_sde_sde_perf_update_bus() {
  ::perfetto::protos::SdeSdePerfUpdateBusFtraceEvent* _msg = _internal_mutable_sde_sde_perf_update_bus();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sde_sde_perf_update_bus)
  return _msg;
}

// .perfetto.protos.RssStatThrottledFtraceEvent rss_stat_throttled = 359;
inline bool FtraceEvent::has_rss_stat_throttled() const {
  return event_case() == kRssStatThrottled;
}
inline bool FtraceEvent::_internal_has_rss_stat_throttled() const {
  return event_case() == kRssStatThrottled;
}
inline void FtraceEvent::set_has_rss_stat_throttled() {
  _impl_._oneof_case_[0] = kRssStatThrottled;
}
inline ::perfetto::protos::RssStatThrottledFtraceEvent* FtraceEvent::release_rss_stat_throttled() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.rss_stat_throttled)
  if (event_case() == kRssStatThrottled) {
    clear_has_event();
    ::perfetto::protos::RssStatThrottledFtraceEvent* temp = _impl_.event_.rss_stat_throttled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.rss_stat_throttled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::RssStatThrottledFtraceEvent& FtraceEvent::_internal_rss_stat_throttled() const {
  return event_case() == kRssStatThrottled
      ? *_impl_.event_.rss_stat_throttled_
      : reinterpret_cast<::perfetto::protos::RssStatThrottledFtraceEvent&>(::perfetto::protos::_RssStatThrottledFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::RssStatThrottledFtraceEvent& FtraceEvent::rss_stat_throttled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.rss_stat_throttled)
  return _internal_rss_stat_throttled();
}
inline ::perfetto::protos::RssStatThrottledFtraceEvent* FtraceEvent::unsafe_arena_release_rss_stat_throttled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.rss_stat_throttled)
  if (event_case() == kRssStatThrottled) {
    clear_has_event();
    ::perfetto::protos::RssStatThrottledFtraceEvent* temp = _impl_.event_.rss_stat_throttled_;
    _impl_.event_.rss_stat_throttled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_rss_stat_throttled(::perfetto::protos::RssStatThrottledFtraceEvent* rss_stat_throttled) {
  clear_event();
  if (rss_stat_throttled) {
    set_has_rss_stat_throttled();
    _impl_.event_.rss_stat_throttled_ = rss_stat_throttled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.rss_stat_throttled)
}
inline ::perfetto::protos::RssStatThrottledFtraceEvent* FtraceEvent::_internal_mutable_rss_stat_throttled() {
  if (event_case() != kRssStatThrottled) {
    clear_event();
    set_has_rss_stat_throttled();
    _impl_.event_.rss_stat_throttled_ = CreateMaybeMessage< ::perfetto::protos::RssStatThrottledFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.rss_stat_throttled_;
}
inline ::perfetto::protos::RssStatThrottledFtraceEvent* FtraceEvent::mutable_rss_stat_throttled() {
  ::perfetto::protos::RssStatThrottledFtraceEvent* _msg = _internal_mutable_rss_stat_throttled();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.rss_stat_throttled)
  return _msg;
}

// .perfetto.protos.NetifReceiveSkbFtraceEvent netif_receive_skb = 360;
inline bool FtraceEvent::has_netif_receive_skb() const {
  return event_case() == kNetifReceiveSkb;
}
inline bool FtraceEvent::_internal_has_netif_receive_skb() const {
  return event_case() == kNetifReceiveSkb;
}
inline void FtraceEvent::set_has_netif_receive_skb() {
  _impl_._oneof_case_[0] = kNetifReceiveSkb;
}
inline ::perfetto::protos::NetifReceiveSkbFtraceEvent* FtraceEvent::release_netif_receive_skb() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.netif_receive_skb)
  if (event_case() == kNetifReceiveSkb) {
    clear_has_event();
    ::perfetto::protos::NetifReceiveSkbFtraceEvent* temp = _impl_.event_.netif_receive_skb_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.netif_receive_skb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NetifReceiveSkbFtraceEvent& FtraceEvent::_internal_netif_receive_skb() const {
  return event_case() == kNetifReceiveSkb
      ? *_impl_.event_.netif_receive_skb_
      : reinterpret_cast<::perfetto::protos::NetifReceiveSkbFtraceEvent&>(::perfetto::protos::_NetifReceiveSkbFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::NetifReceiveSkbFtraceEvent& FtraceEvent::netif_receive_skb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.netif_receive_skb)
  return _internal_netif_receive_skb();
}
inline ::perfetto::protos::NetifReceiveSkbFtraceEvent* FtraceEvent::unsafe_arena_release_netif_receive_skb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.netif_receive_skb)
  if (event_case() == kNetifReceiveSkb) {
    clear_has_event();
    ::perfetto::protos::NetifReceiveSkbFtraceEvent* temp = _impl_.event_.netif_receive_skb_;
    _impl_.event_.netif_receive_skb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_netif_receive_skb(::perfetto::protos::NetifReceiveSkbFtraceEvent* netif_receive_skb) {
  clear_event();
  if (netif_receive_skb) {
    set_has_netif_receive_skb();
    _impl_.event_.netif_receive_skb_ = netif_receive_skb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.netif_receive_skb)
}
inline ::perfetto::protos::NetifReceiveSkbFtraceEvent* FtraceEvent::_internal_mutable_netif_receive_skb() {
  if (event_case() != kNetifReceiveSkb) {
    clear_event();
    set_has_netif_receive_skb();
    _impl_.event_.netif_receive_skb_ = CreateMaybeMessage< ::perfetto::protos::NetifReceiveSkbFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.netif_receive_skb_;
}
inline ::perfetto::protos::NetifReceiveSkbFtraceEvent* FtraceEvent::mutable_netif_receive_skb() {
  ::perfetto::protos::NetifReceiveSkbFtraceEvent* _msg = _internal_mutable_netif_receive_skb();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.netif_receive_skb)
  return _msg;
}

// .perfetto.protos.NetDevXmitFtraceEvent net_dev_xmit = 361;
inline bool FtraceEvent::has_net_dev_xmit() const {
  return event_case() == kNetDevXmit;
}
inline bool FtraceEvent::_internal_has_net_dev_xmit() const {
  return event_case() == kNetDevXmit;
}
inline void FtraceEvent::set_has_net_dev_xmit() {
  _impl_._oneof_case_[0] = kNetDevXmit;
}
inline ::perfetto::protos::NetDevXmitFtraceEvent* FtraceEvent::release_net_dev_xmit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.net_dev_xmit)
  if (event_case() == kNetDevXmit) {
    clear_has_event();
    ::perfetto::protos::NetDevXmitFtraceEvent* temp = _impl_.event_.net_dev_xmit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.net_dev_xmit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NetDevXmitFtraceEvent& FtraceEvent::_internal_net_dev_xmit() const {
  return event_case() == kNetDevXmit
      ? *_impl_.event_.net_dev_xmit_
      : reinterpret_cast<::perfetto::protos::NetDevXmitFtraceEvent&>(::perfetto::protos::_NetDevXmitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::NetDevXmitFtraceEvent& FtraceEvent::net_dev_xmit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.net_dev_xmit)
  return _internal_net_dev_xmit();
}
inline ::perfetto::protos::NetDevXmitFtraceEvent* FtraceEvent::unsafe_arena_release_net_dev_xmit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.net_dev_xmit)
  if (event_case() == kNetDevXmit) {
    clear_has_event();
    ::perfetto::protos::NetDevXmitFtraceEvent* temp = _impl_.event_.net_dev_xmit_;
    _impl_.event_.net_dev_xmit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_net_dev_xmit(::perfetto::protos::NetDevXmitFtraceEvent* net_dev_xmit) {
  clear_event();
  if (net_dev_xmit) {
    set_has_net_dev_xmit();
    _impl_.event_.net_dev_xmit_ = net_dev_xmit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.net_dev_xmit)
}
inline ::perfetto::protos::NetDevXmitFtraceEvent* FtraceEvent::_internal_mutable_net_dev_xmit() {
  if (event_case() != kNetDevXmit) {
    clear_event();
    set_has_net_dev_xmit();
    _impl_.event_.net_dev_xmit_ = CreateMaybeMessage< ::perfetto::protos::NetDevXmitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.net_dev_xmit_;
}
inline ::perfetto::protos::NetDevXmitFtraceEvent* FtraceEvent::mutable_net_dev_xmit() {
  ::perfetto::protos::NetDevXmitFtraceEvent* _msg = _internal_mutable_net_dev_xmit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.net_dev_xmit)
  return _msg;
}

// .perfetto.protos.InetSockSetStateFtraceEvent inet_sock_set_state = 362;
inline bool FtraceEvent::has_inet_sock_set_state() const {
  return event_case() == kInetSockSetState;
}
inline bool FtraceEvent::_internal_has_inet_sock_set_state() const {
  return event_case() == kInetSockSetState;
}
inline void FtraceEvent::set_has_inet_sock_set_state() {
  _impl_._oneof_case_[0] = kInetSockSetState;
}
inline ::perfetto::protos::InetSockSetStateFtraceEvent* FtraceEvent::release_inet_sock_set_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.inet_sock_set_state)
  if (event_case() == kInetSockSetState) {
    clear_has_event();
    ::perfetto::protos::InetSockSetStateFtraceEvent* temp = _impl_.event_.inet_sock_set_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.inet_sock_set_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::InetSockSetStateFtraceEvent& FtraceEvent::_internal_inet_sock_set_state() const {
  return event_case() == kInetSockSetState
      ? *_impl_.event_.inet_sock_set_state_
      : reinterpret_cast<::perfetto::protos::InetSockSetStateFtraceEvent&>(::perfetto::protos::_InetSockSetStateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::InetSockSetStateFtraceEvent& FtraceEvent::inet_sock_set_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.inet_sock_set_state)
  return _internal_inet_sock_set_state();
}
inline ::perfetto::protos::InetSockSetStateFtraceEvent* FtraceEvent::unsafe_arena_release_inet_sock_set_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.inet_sock_set_state)
  if (event_case() == kInetSockSetState) {
    clear_has_event();
    ::perfetto::protos::InetSockSetStateFtraceEvent* temp = _impl_.event_.inet_sock_set_state_;
    _impl_.event_.inet_sock_set_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_inet_sock_set_state(::perfetto::protos::InetSockSetStateFtraceEvent* inet_sock_set_state) {
  clear_event();
  if (inet_sock_set_state) {
    set_has_inet_sock_set_state();
    _impl_.event_.inet_sock_set_state_ = inet_sock_set_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.inet_sock_set_state)
}
inline ::perfetto::protos::InetSockSetStateFtraceEvent* FtraceEvent::_internal_mutable_inet_sock_set_state() {
  if (event_case() != kInetSockSetState) {
    clear_event();
    set_has_inet_sock_set_state();
    _impl_.event_.inet_sock_set_state_ = CreateMaybeMessage< ::perfetto::protos::InetSockSetStateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.inet_sock_set_state_;
}
inline ::perfetto::protos::InetSockSetStateFtraceEvent* FtraceEvent::mutable_inet_sock_set_state() {
  ::perfetto::protos::InetSockSetStateFtraceEvent* _msg = _internal_mutable_inet_sock_set_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.inet_sock_set_state)
  return _msg;
}

// .perfetto.protos.TcpRetransmitSkbFtraceEvent tcp_retransmit_skb = 363;
inline bool FtraceEvent::has_tcp_retransmit_skb() const {
  return event_case() == kTcpRetransmitSkb;
}
inline bool FtraceEvent::_internal_has_tcp_retransmit_skb() const {
  return event_case() == kTcpRetransmitSkb;
}
inline void FtraceEvent::set_has_tcp_retransmit_skb() {
  _impl_._oneof_case_[0] = kTcpRetransmitSkb;
}
inline ::perfetto::protos::TcpRetransmitSkbFtraceEvent* FtraceEvent::release_tcp_retransmit_skb() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.tcp_retransmit_skb)
  if (event_case() == kTcpRetransmitSkb) {
    clear_has_event();
    ::perfetto::protos::TcpRetransmitSkbFtraceEvent* temp = _impl_.event_.tcp_retransmit_skb_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.tcp_retransmit_skb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TcpRetransmitSkbFtraceEvent& FtraceEvent::_internal_tcp_retransmit_skb() const {
  return event_case() == kTcpRetransmitSkb
      ? *_impl_.event_.tcp_retransmit_skb_
      : reinterpret_cast<::perfetto::protos::TcpRetransmitSkbFtraceEvent&>(::perfetto::protos::_TcpRetransmitSkbFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TcpRetransmitSkbFtraceEvent& FtraceEvent::tcp_retransmit_skb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.tcp_retransmit_skb)
  return _internal_tcp_retransmit_skb();
}
inline ::perfetto::protos::TcpRetransmitSkbFtraceEvent* FtraceEvent::unsafe_arena_release_tcp_retransmit_skb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.tcp_retransmit_skb)
  if (event_case() == kTcpRetransmitSkb) {
    clear_has_event();
    ::perfetto::protos::TcpRetransmitSkbFtraceEvent* temp = _impl_.event_.tcp_retransmit_skb_;
    _impl_.event_.tcp_retransmit_skb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_tcp_retransmit_skb(::perfetto::protos::TcpRetransmitSkbFtraceEvent* tcp_retransmit_skb) {
  clear_event();
  if (tcp_retransmit_skb) {
    set_has_tcp_retransmit_skb();
    _impl_.event_.tcp_retransmit_skb_ = tcp_retransmit_skb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.tcp_retransmit_skb)
}
inline ::perfetto::protos::TcpRetransmitSkbFtraceEvent* FtraceEvent::_internal_mutable_tcp_retransmit_skb() {
  if (event_case() != kTcpRetransmitSkb) {
    clear_event();
    set_has_tcp_retransmit_skb();
    _impl_.event_.tcp_retransmit_skb_ = CreateMaybeMessage< ::perfetto::protos::TcpRetransmitSkbFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.tcp_retransmit_skb_;
}
inline ::perfetto::protos::TcpRetransmitSkbFtraceEvent* FtraceEvent::mutable_tcp_retransmit_skb() {
  ::perfetto::protos::TcpRetransmitSkbFtraceEvent* _msg = _internal_mutable_tcp_retransmit_skb();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.tcp_retransmit_skb)
  return _msg;
}

// .perfetto.protos.CrosEcSensorhubDataFtraceEvent cros_ec_sensorhub_data = 364;
inline bool FtraceEvent::has_cros_ec_sensorhub_data() const {
  return event_case() == kCrosEcSensorhubData;
}
inline bool FtraceEvent::_internal_has_cros_ec_sensorhub_data() const {
  return event_case() == kCrosEcSensorhubData;
}
inline void FtraceEvent::set_has_cros_ec_sensorhub_data() {
  _impl_._oneof_case_[0] = kCrosEcSensorhubData;
}
inline ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* FtraceEvent::release_cros_ec_sensorhub_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cros_ec_sensorhub_data)
  if (event_case() == kCrosEcSensorhubData) {
    clear_has_event();
    ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* temp = _impl_.event_.cros_ec_sensorhub_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cros_ec_sensorhub_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CrosEcSensorhubDataFtraceEvent& FtraceEvent::_internal_cros_ec_sensorhub_data() const {
  return event_case() == kCrosEcSensorhubData
      ? *_impl_.event_.cros_ec_sensorhub_data_
      : reinterpret_cast<::perfetto::protos::CrosEcSensorhubDataFtraceEvent&>(::perfetto::protos::_CrosEcSensorhubDataFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CrosEcSensorhubDataFtraceEvent& FtraceEvent::cros_ec_sensorhub_data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cros_ec_sensorhub_data)
  return _internal_cros_ec_sensorhub_data();
}
inline ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* FtraceEvent::unsafe_arena_release_cros_ec_sensorhub_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cros_ec_sensorhub_data)
  if (event_case() == kCrosEcSensorhubData) {
    clear_has_event();
    ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* temp = _impl_.event_.cros_ec_sensorhub_data_;
    _impl_.event_.cros_ec_sensorhub_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cros_ec_sensorhub_data(::perfetto::protos::CrosEcSensorhubDataFtraceEvent* cros_ec_sensorhub_data) {
  clear_event();
  if (cros_ec_sensorhub_data) {
    set_has_cros_ec_sensorhub_data();
    _impl_.event_.cros_ec_sensorhub_data_ = cros_ec_sensorhub_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cros_ec_sensorhub_data)
}
inline ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* FtraceEvent::_internal_mutable_cros_ec_sensorhub_data() {
  if (event_case() != kCrosEcSensorhubData) {
    clear_event();
    set_has_cros_ec_sensorhub_data();
    _impl_.event_.cros_ec_sensorhub_data_ = CreateMaybeMessage< ::perfetto::protos::CrosEcSensorhubDataFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cros_ec_sensorhub_data_;
}
inline ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* FtraceEvent::mutable_cros_ec_sensorhub_data() {
  ::perfetto::protos::CrosEcSensorhubDataFtraceEvent* _msg = _internal_mutable_cros_ec_sensorhub_data();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cros_ec_sensorhub_data)
  return _msg;
}

// .perfetto.protos.NapiGroReceiveEntryFtraceEvent napi_gro_receive_entry = 365;
inline bool FtraceEvent::has_napi_gro_receive_entry() const {
  return event_case() == kNapiGroReceiveEntry;
}
inline bool FtraceEvent::_internal_has_napi_gro_receive_entry() const {
  return event_case() == kNapiGroReceiveEntry;
}
inline void FtraceEvent::set_has_napi_gro_receive_entry() {
  _impl_._oneof_case_[0] = kNapiGroReceiveEntry;
}
inline ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* FtraceEvent::release_napi_gro_receive_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.napi_gro_receive_entry)
  if (event_case() == kNapiGroReceiveEntry) {
    clear_has_event();
    ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* temp = _impl_.event_.napi_gro_receive_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.napi_gro_receive_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NapiGroReceiveEntryFtraceEvent& FtraceEvent::_internal_napi_gro_receive_entry() const {
  return event_case() == kNapiGroReceiveEntry
      ? *_impl_.event_.napi_gro_receive_entry_
      : reinterpret_cast<::perfetto::protos::NapiGroReceiveEntryFtraceEvent&>(::perfetto::protos::_NapiGroReceiveEntryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::NapiGroReceiveEntryFtraceEvent& FtraceEvent::napi_gro_receive_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.napi_gro_receive_entry)
  return _internal_napi_gro_receive_entry();
}
inline ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* FtraceEvent::unsafe_arena_release_napi_gro_receive_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.napi_gro_receive_entry)
  if (event_case() == kNapiGroReceiveEntry) {
    clear_has_event();
    ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* temp = _impl_.event_.napi_gro_receive_entry_;
    _impl_.event_.napi_gro_receive_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_napi_gro_receive_entry(::perfetto::protos::NapiGroReceiveEntryFtraceEvent* napi_gro_receive_entry) {
  clear_event();
  if (napi_gro_receive_entry) {
    set_has_napi_gro_receive_entry();
    _impl_.event_.napi_gro_receive_entry_ = napi_gro_receive_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.napi_gro_receive_entry)
}
inline ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* FtraceEvent::_internal_mutable_napi_gro_receive_entry() {
  if (event_case() != kNapiGroReceiveEntry) {
    clear_event();
    set_has_napi_gro_receive_entry();
    _impl_.event_.napi_gro_receive_entry_ = CreateMaybeMessage< ::perfetto::protos::NapiGroReceiveEntryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.napi_gro_receive_entry_;
}
inline ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* FtraceEvent::mutable_napi_gro_receive_entry() {
  ::perfetto::protos::NapiGroReceiveEntryFtraceEvent* _msg = _internal_mutable_napi_gro_receive_entry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.napi_gro_receive_entry)
  return _msg;
}

// .perfetto.protos.NapiGroReceiveExitFtraceEvent napi_gro_receive_exit = 366;
inline bool FtraceEvent::has_napi_gro_receive_exit() const {
  return event_case() == kNapiGroReceiveExit;
}
inline bool FtraceEvent::_internal_has_napi_gro_receive_exit() const {
  return event_case() == kNapiGroReceiveExit;
}
inline void FtraceEvent::set_has_napi_gro_receive_exit() {
  _impl_._oneof_case_[0] = kNapiGroReceiveExit;
}
inline ::perfetto::protos::NapiGroReceiveExitFtraceEvent* FtraceEvent::release_napi_gro_receive_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.napi_gro_receive_exit)
  if (event_case() == kNapiGroReceiveExit) {
    clear_has_event();
    ::perfetto::protos::NapiGroReceiveExitFtraceEvent* temp = _impl_.event_.napi_gro_receive_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.napi_gro_receive_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::NapiGroReceiveExitFtraceEvent& FtraceEvent::_internal_napi_gro_receive_exit() const {
  return event_case() == kNapiGroReceiveExit
      ? *_impl_.event_.napi_gro_receive_exit_
      : reinterpret_cast<::perfetto::protos::NapiGroReceiveExitFtraceEvent&>(::perfetto::protos::_NapiGroReceiveExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::NapiGroReceiveExitFtraceEvent& FtraceEvent::napi_gro_receive_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.napi_gro_receive_exit)
  return _internal_napi_gro_receive_exit();
}
inline ::perfetto::protos::NapiGroReceiveExitFtraceEvent* FtraceEvent::unsafe_arena_release_napi_gro_receive_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.napi_gro_receive_exit)
  if (event_case() == kNapiGroReceiveExit) {
    clear_has_event();
    ::perfetto::protos::NapiGroReceiveExitFtraceEvent* temp = _impl_.event_.napi_gro_receive_exit_;
    _impl_.event_.napi_gro_receive_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_napi_gro_receive_exit(::perfetto::protos::NapiGroReceiveExitFtraceEvent* napi_gro_receive_exit) {
  clear_event();
  if (napi_gro_receive_exit) {
    set_has_napi_gro_receive_exit();
    _impl_.event_.napi_gro_receive_exit_ = napi_gro_receive_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.napi_gro_receive_exit)
}
inline ::perfetto::protos::NapiGroReceiveExitFtraceEvent* FtraceEvent::_internal_mutable_napi_gro_receive_exit() {
  if (event_case() != kNapiGroReceiveExit) {
    clear_event();
    set_has_napi_gro_receive_exit();
    _impl_.event_.napi_gro_receive_exit_ = CreateMaybeMessage< ::perfetto::protos::NapiGroReceiveExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.napi_gro_receive_exit_;
}
inline ::perfetto::protos::NapiGroReceiveExitFtraceEvent* FtraceEvent::mutable_napi_gro_receive_exit() {
  ::perfetto::protos::NapiGroReceiveExitFtraceEvent* _msg = _internal_mutable_napi_gro_receive_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.napi_gro_receive_exit)
  return _msg;
}

// .perfetto.protos.KfreeSkbFtraceEvent kfree_skb = 367;
inline bool FtraceEvent::has_kfree_skb() const {
  return event_case() == kKfreeSkb;
}
inline bool FtraceEvent::_internal_has_kfree_skb() const {
  return event_case() == kKfreeSkb;
}
inline void FtraceEvent::set_has_kfree_skb() {
  _impl_._oneof_case_[0] = kKfreeSkb;
}
inline ::perfetto::protos::KfreeSkbFtraceEvent* FtraceEvent::release_kfree_skb() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kfree_skb)
  if (event_case() == kKfreeSkb) {
    clear_has_event();
    ::perfetto::protos::KfreeSkbFtraceEvent* temp = _impl_.event_.kfree_skb_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kfree_skb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KfreeSkbFtraceEvent& FtraceEvent::_internal_kfree_skb() const {
  return event_case() == kKfreeSkb
      ? *_impl_.event_.kfree_skb_
      : reinterpret_cast<::perfetto::protos::KfreeSkbFtraceEvent&>(::perfetto::protos::_KfreeSkbFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KfreeSkbFtraceEvent& FtraceEvent::kfree_skb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kfree_skb)
  return _internal_kfree_skb();
}
inline ::perfetto::protos::KfreeSkbFtraceEvent* FtraceEvent::unsafe_arena_release_kfree_skb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kfree_skb)
  if (event_case() == kKfreeSkb) {
    clear_has_event();
    ::perfetto::protos::KfreeSkbFtraceEvent* temp = _impl_.event_.kfree_skb_;
    _impl_.event_.kfree_skb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kfree_skb(::perfetto::protos::KfreeSkbFtraceEvent* kfree_skb) {
  clear_event();
  if (kfree_skb) {
    set_has_kfree_skb();
    _impl_.event_.kfree_skb_ = kfree_skb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kfree_skb)
}
inline ::perfetto::protos::KfreeSkbFtraceEvent* FtraceEvent::_internal_mutable_kfree_skb() {
  if (event_case() != kKfreeSkb) {
    clear_event();
    set_has_kfree_skb();
    _impl_.event_.kfree_skb_ = CreateMaybeMessage< ::perfetto::protos::KfreeSkbFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kfree_skb_;
}
inline ::perfetto::protos::KfreeSkbFtraceEvent* FtraceEvent::mutable_kfree_skb() {
  ::perfetto::protos::KfreeSkbFtraceEvent* _msg = _internal_mutable_kfree_skb();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kfree_skb)
  return _msg;
}

// .perfetto.protos.KvmAccessFaultFtraceEvent kvm_access_fault = 368;
inline bool FtraceEvent::has_kvm_access_fault() const {
  return event_case() == kKvmAccessFault;
}
inline bool FtraceEvent::_internal_has_kvm_access_fault() const {
  return event_case() == kKvmAccessFault;
}
inline void FtraceEvent::set_has_kvm_access_fault() {
  _impl_._oneof_case_[0] = kKvmAccessFault;
}
inline ::perfetto::protos::KvmAccessFaultFtraceEvent* FtraceEvent::release_kvm_access_fault() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_access_fault)
  if (event_case() == kKvmAccessFault) {
    clear_has_event();
    ::perfetto::protos::KvmAccessFaultFtraceEvent* temp = _impl_.event_.kvm_access_fault_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_access_fault_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmAccessFaultFtraceEvent& FtraceEvent::_internal_kvm_access_fault() const {
  return event_case() == kKvmAccessFault
      ? *_impl_.event_.kvm_access_fault_
      : reinterpret_cast<::perfetto::protos::KvmAccessFaultFtraceEvent&>(::perfetto::protos::_KvmAccessFaultFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmAccessFaultFtraceEvent& FtraceEvent::kvm_access_fault() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_access_fault)
  return _internal_kvm_access_fault();
}
inline ::perfetto::protos::KvmAccessFaultFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_access_fault() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_access_fault)
  if (event_case() == kKvmAccessFault) {
    clear_has_event();
    ::perfetto::protos::KvmAccessFaultFtraceEvent* temp = _impl_.event_.kvm_access_fault_;
    _impl_.event_.kvm_access_fault_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_access_fault(::perfetto::protos::KvmAccessFaultFtraceEvent* kvm_access_fault) {
  clear_event();
  if (kvm_access_fault) {
    set_has_kvm_access_fault();
    _impl_.event_.kvm_access_fault_ = kvm_access_fault;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_access_fault)
}
inline ::perfetto::protos::KvmAccessFaultFtraceEvent* FtraceEvent::_internal_mutable_kvm_access_fault() {
  if (event_case() != kKvmAccessFault) {
    clear_event();
    set_has_kvm_access_fault();
    _impl_.event_.kvm_access_fault_ = CreateMaybeMessage< ::perfetto::protos::KvmAccessFaultFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_access_fault_;
}
inline ::perfetto::protos::KvmAccessFaultFtraceEvent* FtraceEvent::mutable_kvm_access_fault() {
  ::perfetto::protos::KvmAccessFaultFtraceEvent* _msg = _internal_mutable_kvm_access_fault();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_access_fault)
  return _msg;
}

// .perfetto.protos.KvmAckIrqFtraceEvent kvm_ack_irq = 369;
inline bool FtraceEvent::has_kvm_ack_irq() const {
  return event_case() == kKvmAckIrq;
}
inline bool FtraceEvent::_internal_has_kvm_ack_irq() const {
  return event_case() == kKvmAckIrq;
}
inline void FtraceEvent::set_has_kvm_ack_irq() {
  _impl_._oneof_case_[0] = kKvmAckIrq;
}
inline ::perfetto::protos::KvmAckIrqFtraceEvent* FtraceEvent::release_kvm_ack_irq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_ack_irq)
  if (event_case() == kKvmAckIrq) {
    clear_has_event();
    ::perfetto::protos::KvmAckIrqFtraceEvent* temp = _impl_.event_.kvm_ack_irq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_ack_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmAckIrqFtraceEvent& FtraceEvent::_internal_kvm_ack_irq() const {
  return event_case() == kKvmAckIrq
      ? *_impl_.event_.kvm_ack_irq_
      : reinterpret_cast<::perfetto::protos::KvmAckIrqFtraceEvent&>(::perfetto::protos::_KvmAckIrqFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmAckIrqFtraceEvent& FtraceEvent::kvm_ack_irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_ack_irq)
  return _internal_kvm_ack_irq();
}
inline ::perfetto::protos::KvmAckIrqFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_ack_irq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_ack_irq)
  if (event_case() == kKvmAckIrq) {
    clear_has_event();
    ::perfetto::protos::KvmAckIrqFtraceEvent* temp = _impl_.event_.kvm_ack_irq_;
    _impl_.event_.kvm_ack_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_ack_irq(::perfetto::protos::KvmAckIrqFtraceEvent* kvm_ack_irq) {
  clear_event();
  if (kvm_ack_irq) {
    set_has_kvm_ack_irq();
    _impl_.event_.kvm_ack_irq_ = kvm_ack_irq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_ack_irq)
}
inline ::perfetto::protos::KvmAckIrqFtraceEvent* FtraceEvent::_internal_mutable_kvm_ack_irq() {
  if (event_case() != kKvmAckIrq) {
    clear_event();
    set_has_kvm_ack_irq();
    _impl_.event_.kvm_ack_irq_ = CreateMaybeMessage< ::perfetto::protos::KvmAckIrqFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_ack_irq_;
}
inline ::perfetto::protos::KvmAckIrqFtraceEvent* FtraceEvent::mutable_kvm_ack_irq() {
  ::perfetto::protos::KvmAckIrqFtraceEvent* _msg = _internal_mutable_kvm_ack_irq();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_ack_irq)
  return _msg;
}

// .perfetto.protos.KvmAgeHvaFtraceEvent kvm_age_hva = 370;
inline bool FtraceEvent::has_kvm_age_hva() const {
  return event_case() == kKvmAgeHva;
}
inline bool FtraceEvent::_internal_has_kvm_age_hva() const {
  return event_case() == kKvmAgeHva;
}
inline void FtraceEvent::set_has_kvm_age_hva() {
  _impl_._oneof_case_[0] = kKvmAgeHva;
}
inline ::perfetto::protos::KvmAgeHvaFtraceEvent* FtraceEvent::release_kvm_age_hva() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_age_hva)
  if (event_case() == kKvmAgeHva) {
    clear_has_event();
    ::perfetto::protos::KvmAgeHvaFtraceEvent* temp = _impl_.event_.kvm_age_hva_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_age_hva_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmAgeHvaFtraceEvent& FtraceEvent::_internal_kvm_age_hva() const {
  return event_case() == kKvmAgeHva
      ? *_impl_.event_.kvm_age_hva_
      : reinterpret_cast<::perfetto::protos::KvmAgeHvaFtraceEvent&>(::perfetto::protos::_KvmAgeHvaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmAgeHvaFtraceEvent& FtraceEvent::kvm_age_hva() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_age_hva)
  return _internal_kvm_age_hva();
}
inline ::perfetto::protos::KvmAgeHvaFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_age_hva() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_age_hva)
  if (event_case() == kKvmAgeHva) {
    clear_has_event();
    ::perfetto::protos::KvmAgeHvaFtraceEvent* temp = _impl_.event_.kvm_age_hva_;
    _impl_.event_.kvm_age_hva_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_age_hva(::perfetto::protos::KvmAgeHvaFtraceEvent* kvm_age_hva) {
  clear_event();
  if (kvm_age_hva) {
    set_has_kvm_age_hva();
    _impl_.event_.kvm_age_hva_ = kvm_age_hva;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_age_hva)
}
inline ::perfetto::protos::KvmAgeHvaFtraceEvent* FtraceEvent::_internal_mutable_kvm_age_hva() {
  if (event_case() != kKvmAgeHva) {
    clear_event();
    set_has_kvm_age_hva();
    _impl_.event_.kvm_age_hva_ = CreateMaybeMessage< ::perfetto::protos::KvmAgeHvaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_age_hva_;
}
inline ::perfetto::protos::KvmAgeHvaFtraceEvent* FtraceEvent::mutable_kvm_age_hva() {
  ::perfetto::protos::KvmAgeHvaFtraceEvent* _msg = _internal_mutable_kvm_age_hva();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_age_hva)
  return _msg;
}

// .perfetto.protos.KvmAgePageFtraceEvent kvm_age_page = 371;
inline bool FtraceEvent::has_kvm_age_page() const {
  return event_case() == kKvmAgePage;
}
inline bool FtraceEvent::_internal_has_kvm_age_page() const {
  return event_case() == kKvmAgePage;
}
inline void FtraceEvent::set_has_kvm_age_page() {
  _impl_._oneof_case_[0] = kKvmAgePage;
}
inline ::perfetto::protos::KvmAgePageFtraceEvent* FtraceEvent::release_kvm_age_page() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_age_page)
  if (event_case() == kKvmAgePage) {
    clear_has_event();
    ::perfetto::protos::KvmAgePageFtraceEvent* temp = _impl_.event_.kvm_age_page_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_age_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmAgePageFtraceEvent& FtraceEvent::_internal_kvm_age_page() const {
  return event_case() == kKvmAgePage
      ? *_impl_.event_.kvm_age_page_
      : reinterpret_cast<::perfetto::protos::KvmAgePageFtraceEvent&>(::perfetto::protos::_KvmAgePageFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmAgePageFtraceEvent& FtraceEvent::kvm_age_page() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_age_page)
  return _internal_kvm_age_page();
}
inline ::perfetto::protos::KvmAgePageFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_age_page() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_age_page)
  if (event_case() == kKvmAgePage) {
    clear_has_event();
    ::perfetto::protos::KvmAgePageFtraceEvent* temp = _impl_.event_.kvm_age_page_;
    _impl_.event_.kvm_age_page_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_age_page(::perfetto::protos::KvmAgePageFtraceEvent* kvm_age_page) {
  clear_event();
  if (kvm_age_page) {
    set_has_kvm_age_page();
    _impl_.event_.kvm_age_page_ = kvm_age_page;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_age_page)
}
inline ::perfetto::protos::KvmAgePageFtraceEvent* FtraceEvent::_internal_mutable_kvm_age_page() {
  if (event_case() != kKvmAgePage) {
    clear_event();
    set_has_kvm_age_page();
    _impl_.event_.kvm_age_page_ = CreateMaybeMessage< ::perfetto::protos::KvmAgePageFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_age_page_;
}
inline ::perfetto::protos::KvmAgePageFtraceEvent* FtraceEvent::mutable_kvm_age_page() {
  ::perfetto::protos::KvmAgePageFtraceEvent* _msg = _internal_mutable_kvm_age_page();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_age_page)
  return _msg;
}

// .perfetto.protos.KvmArmClearDebugFtraceEvent kvm_arm_clear_debug = 372;
inline bool FtraceEvent::has_kvm_arm_clear_debug() const {
  return event_case() == kKvmArmClearDebug;
}
inline bool FtraceEvent::_internal_has_kvm_arm_clear_debug() const {
  return event_case() == kKvmArmClearDebug;
}
inline void FtraceEvent::set_has_kvm_arm_clear_debug() {
  _impl_._oneof_case_[0] = kKvmArmClearDebug;
}
inline ::perfetto::protos::KvmArmClearDebugFtraceEvent* FtraceEvent::release_kvm_arm_clear_debug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_arm_clear_debug)
  if (event_case() == kKvmArmClearDebug) {
    clear_has_event();
    ::perfetto::protos::KvmArmClearDebugFtraceEvent* temp = _impl_.event_.kvm_arm_clear_debug_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_arm_clear_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmArmClearDebugFtraceEvent& FtraceEvent::_internal_kvm_arm_clear_debug() const {
  return event_case() == kKvmArmClearDebug
      ? *_impl_.event_.kvm_arm_clear_debug_
      : reinterpret_cast<::perfetto::protos::KvmArmClearDebugFtraceEvent&>(::perfetto::protos::_KvmArmClearDebugFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmArmClearDebugFtraceEvent& FtraceEvent::kvm_arm_clear_debug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_arm_clear_debug)
  return _internal_kvm_arm_clear_debug();
}
inline ::perfetto::protos::KvmArmClearDebugFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_arm_clear_debug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_arm_clear_debug)
  if (event_case() == kKvmArmClearDebug) {
    clear_has_event();
    ::perfetto::protos::KvmArmClearDebugFtraceEvent* temp = _impl_.event_.kvm_arm_clear_debug_;
    _impl_.event_.kvm_arm_clear_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_arm_clear_debug(::perfetto::protos::KvmArmClearDebugFtraceEvent* kvm_arm_clear_debug) {
  clear_event();
  if (kvm_arm_clear_debug) {
    set_has_kvm_arm_clear_debug();
    _impl_.event_.kvm_arm_clear_debug_ = kvm_arm_clear_debug;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_clear_debug)
}
inline ::perfetto::protos::KvmArmClearDebugFtraceEvent* FtraceEvent::_internal_mutable_kvm_arm_clear_debug() {
  if (event_case() != kKvmArmClearDebug) {
    clear_event();
    set_has_kvm_arm_clear_debug();
    _impl_.event_.kvm_arm_clear_debug_ = CreateMaybeMessage< ::perfetto::protos::KvmArmClearDebugFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_arm_clear_debug_;
}
inline ::perfetto::protos::KvmArmClearDebugFtraceEvent* FtraceEvent::mutable_kvm_arm_clear_debug() {
  ::perfetto::protos::KvmArmClearDebugFtraceEvent* _msg = _internal_mutable_kvm_arm_clear_debug();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_arm_clear_debug)
  return _msg;
}

// .perfetto.protos.KvmArmSetDreg32FtraceEvent kvm_arm_set_dreg32 = 373;
inline bool FtraceEvent::has_kvm_arm_set_dreg32() const {
  return event_case() == kKvmArmSetDreg32;
}
inline bool FtraceEvent::_internal_has_kvm_arm_set_dreg32() const {
  return event_case() == kKvmArmSetDreg32;
}
inline void FtraceEvent::set_has_kvm_arm_set_dreg32() {
  _impl_._oneof_case_[0] = kKvmArmSetDreg32;
}
inline ::perfetto::protos::KvmArmSetDreg32FtraceEvent* FtraceEvent::release_kvm_arm_set_dreg32() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_arm_set_dreg32)
  if (event_case() == kKvmArmSetDreg32) {
    clear_has_event();
    ::perfetto::protos::KvmArmSetDreg32FtraceEvent* temp = _impl_.event_.kvm_arm_set_dreg32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_arm_set_dreg32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmArmSetDreg32FtraceEvent& FtraceEvent::_internal_kvm_arm_set_dreg32() const {
  return event_case() == kKvmArmSetDreg32
      ? *_impl_.event_.kvm_arm_set_dreg32_
      : reinterpret_cast<::perfetto::protos::KvmArmSetDreg32FtraceEvent&>(::perfetto::protos::_KvmArmSetDreg32FtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmArmSetDreg32FtraceEvent& FtraceEvent::kvm_arm_set_dreg32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_arm_set_dreg32)
  return _internal_kvm_arm_set_dreg32();
}
inline ::perfetto::protos::KvmArmSetDreg32FtraceEvent* FtraceEvent::unsafe_arena_release_kvm_arm_set_dreg32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_arm_set_dreg32)
  if (event_case() == kKvmArmSetDreg32) {
    clear_has_event();
    ::perfetto::protos::KvmArmSetDreg32FtraceEvent* temp = _impl_.event_.kvm_arm_set_dreg32_;
    _impl_.event_.kvm_arm_set_dreg32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_arm_set_dreg32(::perfetto::protos::KvmArmSetDreg32FtraceEvent* kvm_arm_set_dreg32) {
  clear_event();
  if (kvm_arm_set_dreg32) {
    set_has_kvm_arm_set_dreg32();
    _impl_.event_.kvm_arm_set_dreg32_ = kvm_arm_set_dreg32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_set_dreg32)
}
inline ::perfetto::protos::KvmArmSetDreg32FtraceEvent* FtraceEvent::_internal_mutable_kvm_arm_set_dreg32() {
  if (event_case() != kKvmArmSetDreg32) {
    clear_event();
    set_has_kvm_arm_set_dreg32();
    _impl_.event_.kvm_arm_set_dreg32_ = CreateMaybeMessage< ::perfetto::protos::KvmArmSetDreg32FtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_arm_set_dreg32_;
}
inline ::perfetto::protos::KvmArmSetDreg32FtraceEvent* FtraceEvent::mutable_kvm_arm_set_dreg32() {
  ::perfetto::protos::KvmArmSetDreg32FtraceEvent* _msg = _internal_mutable_kvm_arm_set_dreg32();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_arm_set_dreg32)
  return _msg;
}

// .perfetto.protos.KvmArmSetRegsetFtraceEvent kvm_arm_set_regset = 374;
inline bool FtraceEvent::has_kvm_arm_set_regset() const {
  return event_case() == kKvmArmSetRegset;
}
inline bool FtraceEvent::_internal_has_kvm_arm_set_regset() const {
  return event_case() == kKvmArmSetRegset;
}
inline void FtraceEvent::set_has_kvm_arm_set_regset() {
  _impl_._oneof_case_[0] = kKvmArmSetRegset;
}
inline ::perfetto::protos::KvmArmSetRegsetFtraceEvent* FtraceEvent::release_kvm_arm_set_regset() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_arm_set_regset)
  if (event_case() == kKvmArmSetRegset) {
    clear_has_event();
    ::perfetto::protos::KvmArmSetRegsetFtraceEvent* temp = _impl_.event_.kvm_arm_set_regset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_arm_set_regset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmArmSetRegsetFtraceEvent& FtraceEvent::_internal_kvm_arm_set_regset() const {
  return event_case() == kKvmArmSetRegset
      ? *_impl_.event_.kvm_arm_set_regset_
      : reinterpret_cast<::perfetto::protos::KvmArmSetRegsetFtraceEvent&>(::perfetto::protos::_KvmArmSetRegsetFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmArmSetRegsetFtraceEvent& FtraceEvent::kvm_arm_set_regset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_arm_set_regset)
  return _internal_kvm_arm_set_regset();
}
inline ::perfetto::protos::KvmArmSetRegsetFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_arm_set_regset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_arm_set_regset)
  if (event_case() == kKvmArmSetRegset) {
    clear_has_event();
    ::perfetto::protos::KvmArmSetRegsetFtraceEvent* temp = _impl_.event_.kvm_arm_set_regset_;
    _impl_.event_.kvm_arm_set_regset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_arm_set_regset(::perfetto::protos::KvmArmSetRegsetFtraceEvent* kvm_arm_set_regset) {
  clear_event();
  if (kvm_arm_set_regset) {
    set_has_kvm_arm_set_regset();
    _impl_.event_.kvm_arm_set_regset_ = kvm_arm_set_regset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_set_regset)
}
inline ::perfetto::protos::KvmArmSetRegsetFtraceEvent* FtraceEvent::_internal_mutable_kvm_arm_set_regset() {
  if (event_case() != kKvmArmSetRegset) {
    clear_event();
    set_has_kvm_arm_set_regset();
    _impl_.event_.kvm_arm_set_regset_ = CreateMaybeMessage< ::perfetto::protos::KvmArmSetRegsetFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_arm_set_regset_;
}
inline ::perfetto::protos::KvmArmSetRegsetFtraceEvent* FtraceEvent::mutable_kvm_arm_set_regset() {
  ::perfetto::protos::KvmArmSetRegsetFtraceEvent* _msg = _internal_mutable_kvm_arm_set_regset();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_arm_set_regset)
  return _msg;
}

// .perfetto.protos.KvmArmSetupDebugFtraceEvent kvm_arm_setup_debug = 375;
inline bool FtraceEvent::has_kvm_arm_setup_debug() const {
  return event_case() == kKvmArmSetupDebug;
}
inline bool FtraceEvent::_internal_has_kvm_arm_setup_debug() const {
  return event_case() == kKvmArmSetupDebug;
}
inline void FtraceEvent::set_has_kvm_arm_setup_debug() {
  _impl_._oneof_case_[0] = kKvmArmSetupDebug;
}
inline ::perfetto::protos::KvmArmSetupDebugFtraceEvent* FtraceEvent::release_kvm_arm_setup_debug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_arm_setup_debug)
  if (event_case() == kKvmArmSetupDebug) {
    clear_has_event();
    ::perfetto::protos::KvmArmSetupDebugFtraceEvent* temp = _impl_.event_.kvm_arm_setup_debug_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_arm_setup_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmArmSetupDebugFtraceEvent& FtraceEvent::_internal_kvm_arm_setup_debug() const {
  return event_case() == kKvmArmSetupDebug
      ? *_impl_.event_.kvm_arm_setup_debug_
      : reinterpret_cast<::perfetto::protos::KvmArmSetupDebugFtraceEvent&>(::perfetto::protos::_KvmArmSetupDebugFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmArmSetupDebugFtraceEvent& FtraceEvent::kvm_arm_setup_debug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_arm_setup_debug)
  return _internal_kvm_arm_setup_debug();
}
inline ::perfetto::protos::KvmArmSetupDebugFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_arm_setup_debug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_arm_setup_debug)
  if (event_case() == kKvmArmSetupDebug) {
    clear_has_event();
    ::perfetto::protos::KvmArmSetupDebugFtraceEvent* temp = _impl_.event_.kvm_arm_setup_debug_;
    _impl_.event_.kvm_arm_setup_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_arm_setup_debug(::perfetto::protos::KvmArmSetupDebugFtraceEvent* kvm_arm_setup_debug) {
  clear_event();
  if (kvm_arm_setup_debug) {
    set_has_kvm_arm_setup_debug();
    _impl_.event_.kvm_arm_setup_debug_ = kvm_arm_setup_debug;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_arm_setup_debug)
}
inline ::perfetto::protos::KvmArmSetupDebugFtraceEvent* FtraceEvent::_internal_mutable_kvm_arm_setup_debug() {
  if (event_case() != kKvmArmSetupDebug) {
    clear_event();
    set_has_kvm_arm_setup_debug();
    _impl_.event_.kvm_arm_setup_debug_ = CreateMaybeMessage< ::perfetto::protos::KvmArmSetupDebugFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_arm_setup_debug_;
}
inline ::perfetto::protos::KvmArmSetupDebugFtraceEvent* FtraceEvent::mutable_kvm_arm_setup_debug() {
  ::perfetto::protos::KvmArmSetupDebugFtraceEvent* _msg = _internal_mutable_kvm_arm_setup_debug();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_arm_setup_debug)
  return _msg;
}

// .perfetto.protos.KvmEntryFtraceEvent kvm_entry = 376;
inline bool FtraceEvent::has_kvm_entry() const {
  return event_case() == kKvmEntry;
}
inline bool FtraceEvent::_internal_has_kvm_entry() const {
  return event_case() == kKvmEntry;
}
inline void FtraceEvent::set_has_kvm_entry() {
  _impl_._oneof_case_[0] = kKvmEntry;
}
inline ::perfetto::protos::KvmEntryFtraceEvent* FtraceEvent::release_kvm_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_entry)
  if (event_case() == kKvmEntry) {
    clear_has_event();
    ::perfetto::protos::KvmEntryFtraceEvent* temp = _impl_.event_.kvm_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmEntryFtraceEvent& FtraceEvent::_internal_kvm_entry() const {
  return event_case() == kKvmEntry
      ? *_impl_.event_.kvm_entry_
      : reinterpret_cast<::perfetto::protos::KvmEntryFtraceEvent&>(::perfetto::protos::_KvmEntryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmEntryFtraceEvent& FtraceEvent::kvm_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_entry)
  return _internal_kvm_entry();
}
inline ::perfetto::protos::KvmEntryFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_entry)
  if (event_case() == kKvmEntry) {
    clear_has_event();
    ::perfetto::protos::KvmEntryFtraceEvent* temp = _impl_.event_.kvm_entry_;
    _impl_.event_.kvm_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_entry(::perfetto::protos::KvmEntryFtraceEvent* kvm_entry) {
  clear_event();
  if (kvm_entry) {
    set_has_kvm_entry();
    _impl_.event_.kvm_entry_ = kvm_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_entry)
}
inline ::perfetto::protos::KvmEntryFtraceEvent* FtraceEvent::_internal_mutable_kvm_entry() {
  if (event_case() != kKvmEntry) {
    clear_event();
    set_has_kvm_entry();
    _impl_.event_.kvm_entry_ = CreateMaybeMessage< ::perfetto::protos::KvmEntryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_entry_;
}
inline ::perfetto::protos::KvmEntryFtraceEvent* FtraceEvent::mutable_kvm_entry() {
  ::perfetto::protos::KvmEntryFtraceEvent* _msg = _internal_mutable_kvm_entry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_entry)
  return _msg;
}

// .perfetto.protos.KvmExitFtraceEvent kvm_exit = 377;
inline bool FtraceEvent::has_kvm_exit() const {
  return event_case() == kKvmExit;
}
inline bool FtraceEvent::_internal_has_kvm_exit() const {
  return event_case() == kKvmExit;
}
inline void FtraceEvent::set_has_kvm_exit() {
  _impl_._oneof_case_[0] = kKvmExit;
}
inline ::perfetto::protos::KvmExitFtraceEvent* FtraceEvent::release_kvm_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_exit)
  if (event_case() == kKvmExit) {
    clear_has_event();
    ::perfetto::protos::KvmExitFtraceEvent* temp = _impl_.event_.kvm_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmExitFtraceEvent& FtraceEvent::_internal_kvm_exit() const {
  return event_case() == kKvmExit
      ? *_impl_.event_.kvm_exit_
      : reinterpret_cast<::perfetto::protos::KvmExitFtraceEvent&>(::perfetto::protos::_KvmExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmExitFtraceEvent& FtraceEvent::kvm_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_exit)
  return _internal_kvm_exit();
}
inline ::perfetto::protos::KvmExitFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_exit)
  if (event_case() == kKvmExit) {
    clear_has_event();
    ::perfetto::protos::KvmExitFtraceEvent* temp = _impl_.event_.kvm_exit_;
    _impl_.event_.kvm_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_exit(::perfetto::protos::KvmExitFtraceEvent* kvm_exit) {
  clear_event();
  if (kvm_exit) {
    set_has_kvm_exit();
    _impl_.event_.kvm_exit_ = kvm_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_exit)
}
inline ::perfetto::protos::KvmExitFtraceEvent* FtraceEvent::_internal_mutable_kvm_exit() {
  if (event_case() != kKvmExit) {
    clear_event();
    set_has_kvm_exit();
    _impl_.event_.kvm_exit_ = CreateMaybeMessage< ::perfetto::protos::KvmExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_exit_;
}
inline ::perfetto::protos::KvmExitFtraceEvent* FtraceEvent::mutable_kvm_exit() {
  ::perfetto::protos::KvmExitFtraceEvent* _msg = _internal_mutable_kvm_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_exit)
  return _msg;
}

// .perfetto.protos.KvmFpuFtraceEvent kvm_fpu = 378;
inline bool FtraceEvent::has_kvm_fpu() const {
  return event_case() == kKvmFpu;
}
inline bool FtraceEvent::_internal_has_kvm_fpu() const {
  return event_case() == kKvmFpu;
}
inline void FtraceEvent::set_has_kvm_fpu() {
  _impl_._oneof_case_[0] = kKvmFpu;
}
inline ::perfetto::protos::KvmFpuFtraceEvent* FtraceEvent::release_kvm_fpu() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_fpu)
  if (event_case() == kKvmFpu) {
    clear_has_event();
    ::perfetto::protos::KvmFpuFtraceEvent* temp = _impl_.event_.kvm_fpu_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_fpu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmFpuFtraceEvent& FtraceEvent::_internal_kvm_fpu() const {
  return event_case() == kKvmFpu
      ? *_impl_.event_.kvm_fpu_
      : reinterpret_cast<::perfetto::protos::KvmFpuFtraceEvent&>(::perfetto::protos::_KvmFpuFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmFpuFtraceEvent& FtraceEvent::kvm_fpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_fpu)
  return _internal_kvm_fpu();
}
inline ::perfetto::protos::KvmFpuFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_fpu() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_fpu)
  if (event_case() == kKvmFpu) {
    clear_has_event();
    ::perfetto::protos::KvmFpuFtraceEvent* temp = _impl_.event_.kvm_fpu_;
    _impl_.event_.kvm_fpu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_fpu(::perfetto::protos::KvmFpuFtraceEvent* kvm_fpu) {
  clear_event();
  if (kvm_fpu) {
    set_has_kvm_fpu();
    _impl_.event_.kvm_fpu_ = kvm_fpu;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_fpu)
}
inline ::perfetto::protos::KvmFpuFtraceEvent* FtraceEvent::_internal_mutable_kvm_fpu() {
  if (event_case() != kKvmFpu) {
    clear_event();
    set_has_kvm_fpu();
    _impl_.event_.kvm_fpu_ = CreateMaybeMessage< ::perfetto::protos::KvmFpuFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_fpu_;
}
inline ::perfetto::protos::KvmFpuFtraceEvent* FtraceEvent::mutable_kvm_fpu() {
  ::perfetto::protos::KvmFpuFtraceEvent* _msg = _internal_mutable_kvm_fpu();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_fpu)
  return _msg;
}

// .perfetto.protos.KvmGetTimerMapFtraceEvent kvm_get_timer_map = 379;
inline bool FtraceEvent::has_kvm_get_timer_map() const {
  return event_case() == kKvmGetTimerMap;
}
inline bool FtraceEvent::_internal_has_kvm_get_timer_map() const {
  return event_case() == kKvmGetTimerMap;
}
inline void FtraceEvent::set_has_kvm_get_timer_map() {
  _impl_._oneof_case_[0] = kKvmGetTimerMap;
}
inline ::perfetto::protos::KvmGetTimerMapFtraceEvent* FtraceEvent::release_kvm_get_timer_map() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_get_timer_map)
  if (event_case() == kKvmGetTimerMap) {
    clear_has_event();
    ::perfetto::protos::KvmGetTimerMapFtraceEvent* temp = _impl_.event_.kvm_get_timer_map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_get_timer_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmGetTimerMapFtraceEvent& FtraceEvent::_internal_kvm_get_timer_map() const {
  return event_case() == kKvmGetTimerMap
      ? *_impl_.event_.kvm_get_timer_map_
      : reinterpret_cast<::perfetto::protos::KvmGetTimerMapFtraceEvent&>(::perfetto::protos::_KvmGetTimerMapFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmGetTimerMapFtraceEvent& FtraceEvent::kvm_get_timer_map() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_get_timer_map)
  return _internal_kvm_get_timer_map();
}
inline ::perfetto::protos::KvmGetTimerMapFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_get_timer_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_get_timer_map)
  if (event_case() == kKvmGetTimerMap) {
    clear_has_event();
    ::perfetto::protos::KvmGetTimerMapFtraceEvent* temp = _impl_.event_.kvm_get_timer_map_;
    _impl_.event_.kvm_get_timer_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_get_timer_map(::perfetto::protos::KvmGetTimerMapFtraceEvent* kvm_get_timer_map) {
  clear_event();
  if (kvm_get_timer_map) {
    set_has_kvm_get_timer_map();
    _impl_.event_.kvm_get_timer_map_ = kvm_get_timer_map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_get_timer_map)
}
inline ::perfetto::protos::KvmGetTimerMapFtraceEvent* FtraceEvent::_internal_mutable_kvm_get_timer_map() {
  if (event_case() != kKvmGetTimerMap) {
    clear_event();
    set_has_kvm_get_timer_map();
    _impl_.event_.kvm_get_timer_map_ = CreateMaybeMessage< ::perfetto::protos::KvmGetTimerMapFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_get_timer_map_;
}
inline ::perfetto::protos::KvmGetTimerMapFtraceEvent* FtraceEvent::mutable_kvm_get_timer_map() {
  ::perfetto::protos::KvmGetTimerMapFtraceEvent* _msg = _internal_mutable_kvm_get_timer_map();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_get_timer_map)
  return _msg;
}

// .perfetto.protos.KvmGuestFaultFtraceEvent kvm_guest_fault = 380;
inline bool FtraceEvent::has_kvm_guest_fault() const {
  return event_case() == kKvmGuestFault;
}
inline bool FtraceEvent::_internal_has_kvm_guest_fault() const {
  return event_case() == kKvmGuestFault;
}
inline void FtraceEvent::set_has_kvm_guest_fault() {
  _impl_._oneof_case_[0] = kKvmGuestFault;
}
inline ::perfetto::protos::KvmGuestFaultFtraceEvent* FtraceEvent::release_kvm_guest_fault() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_guest_fault)
  if (event_case() == kKvmGuestFault) {
    clear_has_event();
    ::perfetto::protos::KvmGuestFaultFtraceEvent* temp = _impl_.event_.kvm_guest_fault_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_guest_fault_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmGuestFaultFtraceEvent& FtraceEvent::_internal_kvm_guest_fault() const {
  return event_case() == kKvmGuestFault
      ? *_impl_.event_.kvm_guest_fault_
      : reinterpret_cast<::perfetto::protos::KvmGuestFaultFtraceEvent&>(::perfetto::protos::_KvmGuestFaultFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmGuestFaultFtraceEvent& FtraceEvent::kvm_guest_fault() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_guest_fault)
  return _internal_kvm_guest_fault();
}
inline ::perfetto::protos::KvmGuestFaultFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_guest_fault() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_guest_fault)
  if (event_case() == kKvmGuestFault) {
    clear_has_event();
    ::perfetto::protos::KvmGuestFaultFtraceEvent* temp = _impl_.event_.kvm_guest_fault_;
    _impl_.event_.kvm_guest_fault_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_guest_fault(::perfetto::protos::KvmGuestFaultFtraceEvent* kvm_guest_fault) {
  clear_event();
  if (kvm_guest_fault) {
    set_has_kvm_guest_fault();
    _impl_.event_.kvm_guest_fault_ = kvm_guest_fault;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_guest_fault)
}
inline ::perfetto::protos::KvmGuestFaultFtraceEvent* FtraceEvent::_internal_mutable_kvm_guest_fault() {
  if (event_case() != kKvmGuestFault) {
    clear_event();
    set_has_kvm_guest_fault();
    _impl_.event_.kvm_guest_fault_ = CreateMaybeMessage< ::perfetto::protos::KvmGuestFaultFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_guest_fault_;
}
inline ::perfetto::protos::KvmGuestFaultFtraceEvent* FtraceEvent::mutable_kvm_guest_fault() {
  ::perfetto::protos::KvmGuestFaultFtraceEvent* _msg = _internal_mutable_kvm_guest_fault();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_guest_fault)
  return _msg;
}

// .perfetto.protos.KvmHandleSysRegFtraceEvent kvm_handle_sys_reg = 381;
inline bool FtraceEvent::has_kvm_handle_sys_reg() const {
  return event_case() == kKvmHandleSysReg;
}
inline bool FtraceEvent::_internal_has_kvm_handle_sys_reg() const {
  return event_case() == kKvmHandleSysReg;
}
inline void FtraceEvent::set_has_kvm_handle_sys_reg() {
  _impl_._oneof_case_[0] = kKvmHandleSysReg;
}
inline ::perfetto::protos::KvmHandleSysRegFtraceEvent* FtraceEvent::release_kvm_handle_sys_reg() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_handle_sys_reg)
  if (event_case() == kKvmHandleSysReg) {
    clear_has_event();
    ::perfetto::protos::KvmHandleSysRegFtraceEvent* temp = _impl_.event_.kvm_handle_sys_reg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_handle_sys_reg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmHandleSysRegFtraceEvent& FtraceEvent::_internal_kvm_handle_sys_reg() const {
  return event_case() == kKvmHandleSysReg
      ? *_impl_.event_.kvm_handle_sys_reg_
      : reinterpret_cast<::perfetto::protos::KvmHandleSysRegFtraceEvent&>(::perfetto::protos::_KvmHandleSysRegFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmHandleSysRegFtraceEvent& FtraceEvent::kvm_handle_sys_reg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_handle_sys_reg)
  return _internal_kvm_handle_sys_reg();
}
inline ::perfetto::protos::KvmHandleSysRegFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_handle_sys_reg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_handle_sys_reg)
  if (event_case() == kKvmHandleSysReg) {
    clear_has_event();
    ::perfetto::protos::KvmHandleSysRegFtraceEvent* temp = _impl_.event_.kvm_handle_sys_reg_;
    _impl_.event_.kvm_handle_sys_reg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_handle_sys_reg(::perfetto::protos::KvmHandleSysRegFtraceEvent* kvm_handle_sys_reg) {
  clear_event();
  if (kvm_handle_sys_reg) {
    set_has_kvm_handle_sys_reg();
    _impl_.event_.kvm_handle_sys_reg_ = kvm_handle_sys_reg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_handle_sys_reg)
}
inline ::perfetto::protos::KvmHandleSysRegFtraceEvent* FtraceEvent::_internal_mutable_kvm_handle_sys_reg() {
  if (event_case() != kKvmHandleSysReg) {
    clear_event();
    set_has_kvm_handle_sys_reg();
    _impl_.event_.kvm_handle_sys_reg_ = CreateMaybeMessage< ::perfetto::protos::KvmHandleSysRegFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_handle_sys_reg_;
}
inline ::perfetto::protos::KvmHandleSysRegFtraceEvent* FtraceEvent::mutable_kvm_handle_sys_reg() {
  ::perfetto::protos::KvmHandleSysRegFtraceEvent* _msg = _internal_mutable_kvm_handle_sys_reg();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_handle_sys_reg)
  return _msg;
}

// .perfetto.protos.KvmHvcArm64FtraceEvent kvm_hvc_arm64 = 382;
inline bool FtraceEvent::has_kvm_hvc_arm64() const {
  return event_case() == kKvmHvcArm64;
}
inline bool FtraceEvent::_internal_has_kvm_hvc_arm64() const {
  return event_case() == kKvmHvcArm64;
}
inline void FtraceEvent::set_has_kvm_hvc_arm64() {
  _impl_._oneof_case_[0] = kKvmHvcArm64;
}
inline ::perfetto::protos::KvmHvcArm64FtraceEvent* FtraceEvent::release_kvm_hvc_arm64() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_hvc_arm64)
  if (event_case() == kKvmHvcArm64) {
    clear_has_event();
    ::perfetto::protos::KvmHvcArm64FtraceEvent* temp = _impl_.event_.kvm_hvc_arm64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_hvc_arm64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmHvcArm64FtraceEvent& FtraceEvent::_internal_kvm_hvc_arm64() const {
  return event_case() == kKvmHvcArm64
      ? *_impl_.event_.kvm_hvc_arm64_
      : reinterpret_cast<::perfetto::protos::KvmHvcArm64FtraceEvent&>(::perfetto::protos::_KvmHvcArm64FtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmHvcArm64FtraceEvent& FtraceEvent::kvm_hvc_arm64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_hvc_arm64)
  return _internal_kvm_hvc_arm64();
}
inline ::perfetto::protos::KvmHvcArm64FtraceEvent* FtraceEvent::unsafe_arena_release_kvm_hvc_arm64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_hvc_arm64)
  if (event_case() == kKvmHvcArm64) {
    clear_has_event();
    ::perfetto::protos::KvmHvcArm64FtraceEvent* temp = _impl_.event_.kvm_hvc_arm64_;
    _impl_.event_.kvm_hvc_arm64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_hvc_arm64(::perfetto::protos::KvmHvcArm64FtraceEvent* kvm_hvc_arm64) {
  clear_event();
  if (kvm_hvc_arm64) {
    set_has_kvm_hvc_arm64();
    _impl_.event_.kvm_hvc_arm64_ = kvm_hvc_arm64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_hvc_arm64)
}
inline ::perfetto::protos::KvmHvcArm64FtraceEvent* FtraceEvent::_internal_mutable_kvm_hvc_arm64() {
  if (event_case() != kKvmHvcArm64) {
    clear_event();
    set_has_kvm_hvc_arm64();
    _impl_.event_.kvm_hvc_arm64_ = CreateMaybeMessage< ::perfetto::protos::KvmHvcArm64FtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_hvc_arm64_;
}
inline ::perfetto::protos::KvmHvcArm64FtraceEvent* FtraceEvent::mutable_kvm_hvc_arm64() {
  ::perfetto::protos::KvmHvcArm64FtraceEvent* _msg = _internal_mutable_kvm_hvc_arm64();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_hvc_arm64)
  return _msg;
}

// .perfetto.protos.KvmIrqLineFtraceEvent kvm_irq_line = 383;
inline bool FtraceEvent::has_kvm_irq_line() const {
  return event_case() == kKvmIrqLine;
}
inline bool FtraceEvent::_internal_has_kvm_irq_line() const {
  return event_case() == kKvmIrqLine;
}
inline void FtraceEvent::set_has_kvm_irq_line() {
  _impl_._oneof_case_[0] = kKvmIrqLine;
}
inline ::perfetto::protos::KvmIrqLineFtraceEvent* FtraceEvent::release_kvm_irq_line() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_irq_line)
  if (event_case() == kKvmIrqLine) {
    clear_has_event();
    ::perfetto::protos::KvmIrqLineFtraceEvent* temp = _impl_.event_.kvm_irq_line_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_irq_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmIrqLineFtraceEvent& FtraceEvent::_internal_kvm_irq_line() const {
  return event_case() == kKvmIrqLine
      ? *_impl_.event_.kvm_irq_line_
      : reinterpret_cast<::perfetto::protos::KvmIrqLineFtraceEvent&>(::perfetto::protos::_KvmIrqLineFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmIrqLineFtraceEvent& FtraceEvent::kvm_irq_line() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_irq_line)
  return _internal_kvm_irq_line();
}
inline ::perfetto::protos::KvmIrqLineFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_irq_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_irq_line)
  if (event_case() == kKvmIrqLine) {
    clear_has_event();
    ::perfetto::protos::KvmIrqLineFtraceEvent* temp = _impl_.event_.kvm_irq_line_;
    _impl_.event_.kvm_irq_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_irq_line(::perfetto::protos::KvmIrqLineFtraceEvent* kvm_irq_line) {
  clear_event();
  if (kvm_irq_line) {
    set_has_kvm_irq_line();
    _impl_.event_.kvm_irq_line_ = kvm_irq_line;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_irq_line)
}
inline ::perfetto::protos::KvmIrqLineFtraceEvent* FtraceEvent::_internal_mutable_kvm_irq_line() {
  if (event_case() != kKvmIrqLine) {
    clear_event();
    set_has_kvm_irq_line();
    _impl_.event_.kvm_irq_line_ = CreateMaybeMessage< ::perfetto::protos::KvmIrqLineFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_irq_line_;
}
inline ::perfetto::protos::KvmIrqLineFtraceEvent* FtraceEvent::mutable_kvm_irq_line() {
  ::perfetto::protos::KvmIrqLineFtraceEvent* _msg = _internal_mutable_kvm_irq_line();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_irq_line)
  return _msg;
}

// .perfetto.protos.KvmMmioFtraceEvent kvm_mmio = 384;
inline bool FtraceEvent::has_kvm_mmio() const {
  return event_case() == kKvmMmio;
}
inline bool FtraceEvent::_internal_has_kvm_mmio() const {
  return event_case() == kKvmMmio;
}
inline void FtraceEvent::set_has_kvm_mmio() {
  _impl_._oneof_case_[0] = kKvmMmio;
}
inline ::perfetto::protos::KvmMmioFtraceEvent* FtraceEvent::release_kvm_mmio() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_mmio)
  if (event_case() == kKvmMmio) {
    clear_has_event();
    ::perfetto::protos::KvmMmioFtraceEvent* temp = _impl_.event_.kvm_mmio_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_mmio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmMmioFtraceEvent& FtraceEvent::_internal_kvm_mmio() const {
  return event_case() == kKvmMmio
      ? *_impl_.event_.kvm_mmio_
      : reinterpret_cast<::perfetto::protos::KvmMmioFtraceEvent&>(::perfetto::protos::_KvmMmioFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmMmioFtraceEvent& FtraceEvent::kvm_mmio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_mmio)
  return _internal_kvm_mmio();
}
inline ::perfetto::protos::KvmMmioFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_mmio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_mmio)
  if (event_case() == kKvmMmio) {
    clear_has_event();
    ::perfetto::protos::KvmMmioFtraceEvent* temp = _impl_.event_.kvm_mmio_;
    _impl_.event_.kvm_mmio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_mmio(::perfetto::protos::KvmMmioFtraceEvent* kvm_mmio) {
  clear_event();
  if (kvm_mmio) {
    set_has_kvm_mmio();
    _impl_.event_.kvm_mmio_ = kvm_mmio;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_mmio)
}
inline ::perfetto::protos::KvmMmioFtraceEvent* FtraceEvent::_internal_mutable_kvm_mmio() {
  if (event_case() != kKvmMmio) {
    clear_event();
    set_has_kvm_mmio();
    _impl_.event_.kvm_mmio_ = CreateMaybeMessage< ::perfetto::protos::KvmMmioFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_mmio_;
}
inline ::perfetto::protos::KvmMmioFtraceEvent* FtraceEvent::mutable_kvm_mmio() {
  ::perfetto::protos::KvmMmioFtraceEvent* _msg = _internal_mutable_kvm_mmio();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_mmio)
  return _msg;
}

// .perfetto.protos.KvmMmioEmulateFtraceEvent kvm_mmio_emulate = 385;
inline bool FtraceEvent::has_kvm_mmio_emulate() const {
  return event_case() == kKvmMmioEmulate;
}
inline bool FtraceEvent::_internal_has_kvm_mmio_emulate() const {
  return event_case() == kKvmMmioEmulate;
}
inline void FtraceEvent::set_has_kvm_mmio_emulate() {
  _impl_._oneof_case_[0] = kKvmMmioEmulate;
}
inline ::perfetto::protos::KvmMmioEmulateFtraceEvent* FtraceEvent::release_kvm_mmio_emulate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_mmio_emulate)
  if (event_case() == kKvmMmioEmulate) {
    clear_has_event();
    ::perfetto::protos::KvmMmioEmulateFtraceEvent* temp = _impl_.event_.kvm_mmio_emulate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_mmio_emulate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmMmioEmulateFtraceEvent& FtraceEvent::_internal_kvm_mmio_emulate() const {
  return event_case() == kKvmMmioEmulate
      ? *_impl_.event_.kvm_mmio_emulate_
      : reinterpret_cast<::perfetto::protos::KvmMmioEmulateFtraceEvent&>(::perfetto::protos::_KvmMmioEmulateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmMmioEmulateFtraceEvent& FtraceEvent::kvm_mmio_emulate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_mmio_emulate)
  return _internal_kvm_mmio_emulate();
}
inline ::perfetto::protos::KvmMmioEmulateFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_mmio_emulate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_mmio_emulate)
  if (event_case() == kKvmMmioEmulate) {
    clear_has_event();
    ::perfetto::protos::KvmMmioEmulateFtraceEvent* temp = _impl_.event_.kvm_mmio_emulate_;
    _impl_.event_.kvm_mmio_emulate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_mmio_emulate(::perfetto::protos::KvmMmioEmulateFtraceEvent* kvm_mmio_emulate) {
  clear_event();
  if (kvm_mmio_emulate) {
    set_has_kvm_mmio_emulate();
    _impl_.event_.kvm_mmio_emulate_ = kvm_mmio_emulate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_mmio_emulate)
}
inline ::perfetto::protos::KvmMmioEmulateFtraceEvent* FtraceEvent::_internal_mutable_kvm_mmio_emulate() {
  if (event_case() != kKvmMmioEmulate) {
    clear_event();
    set_has_kvm_mmio_emulate();
    _impl_.event_.kvm_mmio_emulate_ = CreateMaybeMessage< ::perfetto::protos::KvmMmioEmulateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_mmio_emulate_;
}
inline ::perfetto::protos::KvmMmioEmulateFtraceEvent* FtraceEvent::mutable_kvm_mmio_emulate() {
  ::perfetto::protos::KvmMmioEmulateFtraceEvent* _msg = _internal_mutable_kvm_mmio_emulate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_mmio_emulate)
  return _msg;
}

// .perfetto.protos.KvmSetGuestDebugFtraceEvent kvm_set_guest_debug = 386;
inline bool FtraceEvent::has_kvm_set_guest_debug() const {
  return event_case() == kKvmSetGuestDebug;
}
inline bool FtraceEvent::_internal_has_kvm_set_guest_debug() const {
  return event_case() == kKvmSetGuestDebug;
}
inline void FtraceEvent::set_has_kvm_set_guest_debug() {
  _impl_._oneof_case_[0] = kKvmSetGuestDebug;
}
inline ::perfetto::protos::KvmSetGuestDebugFtraceEvent* FtraceEvent::release_kvm_set_guest_debug() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_set_guest_debug)
  if (event_case() == kKvmSetGuestDebug) {
    clear_has_event();
    ::perfetto::protos::KvmSetGuestDebugFtraceEvent* temp = _impl_.event_.kvm_set_guest_debug_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_set_guest_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmSetGuestDebugFtraceEvent& FtraceEvent::_internal_kvm_set_guest_debug() const {
  return event_case() == kKvmSetGuestDebug
      ? *_impl_.event_.kvm_set_guest_debug_
      : reinterpret_cast<::perfetto::protos::KvmSetGuestDebugFtraceEvent&>(::perfetto::protos::_KvmSetGuestDebugFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmSetGuestDebugFtraceEvent& FtraceEvent::kvm_set_guest_debug() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_set_guest_debug)
  return _internal_kvm_set_guest_debug();
}
inline ::perfetto::protos::KvmSetGuestDebugFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_set_guest_debug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_set_guest_debug)
  if (event_case() == kKvmSetGuestDebug) {
    clear_has_event();
    ::perfetto::protos::KvmSetGuestDebugFtraceEvent* temp = _impl_.event_.kvm_set_guest_debug_;
    _impl_.event_.kvm_set_guest_debug_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_set_guest_debug(::perfetto::protos::KvmSetGuestDebugFtraceEvent* kvm_set_guest_debug) {
  clear_event();
  if (kvm_set_guest_debug) {
    set_has_kvm_set_guest_debug();
    _impl_.event_.kvm_set_guest_debug_ = kvm_set_guest_debug;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_set_guest_debug)
}
inline ::perfetto::protos::KvmSetGuestDebugFtraceEvent* FtraceEvent::_internal_mutable_kvm_set_guest_debug() {
  if (event_case() != kKvmSetGuestDebug) {
    clear_event();
    set_has_kvm_set_guest_debug();
    _impl_.event_.kvm_set_guest_debug_ = CreateMaybeMessage< ::perfetto::protos::KvmSetGuestDebugFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_set_guest_debug_;
}
inline ::perfetto::protos::KvmSetGuestDebugFtraceEvent* FtraceEvent::mutable_kvm_set_guest_debug() {
  ::perfetto::protos::KvmSetGuestDebugFtraceEvent* _msg = _internal_mutable_kvm_set_guest_debug();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_set_guest_debug)
  return _msg;
}

// .perfetto.protos.KvmSetIrqFtraceEvent kvm_set_irq = 387;
inline bool FtraceEvent::has_kvm_set_irq() const {
  return event_case() == kKvmSetIrq;
}
inline bool FtraceEvent::_internal_has_kvm_set_irq() const {
  return event_case() == kKvmSetIrq;
}
inline void FtraceEvent::set_has_kvm_set_irq() {
  _impl_._oneof_case_[0] = kKvmSetIrq;
}
inline ::perfetto::protos::KvmSetIrqFtraceEvent* FtraceEvent::release_kvm_set_irq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_set_irq)
  if (event_case() == kKvmSetIrq) {
    clear_has_event();
    ::perfetto::protos::KvmSetIrqFtraceEvent* temp = _impl_.event_.kvm_set_irq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_set_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmSetIrqFtraceEvent& FtraceEvent::_internal_kvm_set_irq() const {
  return event_case() == kKvmSetIrq
      ? *_impl_.event_.kvm_set_irq_
      : reinterpret_cast<::perfetto::protos::KvmSetIrqFtraceEvent&>(::perfetto::protos::_KvmSetIrqFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmSetIrqFtraceEvent& FtraceEvent::kvm_set_irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_set_irq)
  return _internal_kvm_set_irq();
}
inline ::perfetto::protos::KvmSetIrqFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_set_irq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_set_irq)
  if (event_case() == kKvmSetIrq) {
    clear_has_event();
    ::perfetto::protos::KvmSetIrqFtraceEvent* temp = _impl_.event_.kvm_set_irq_;
    _impl_.event_.kvm_set_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_set_irq(::perfetto::protos::KvmSetIrqFtraceEvent* kvm_set_irq) {
  clear_event();
  if (kvm_set_irq) {
    set_has_kvm_set_irq();
    _impl_.event_.kvm_set_irq_ = kvm_set_irq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_set_irq)
}
inline ::perfetto::protos::KvmSetIrqFtraceEvent* FtraceEvent::_internal_mutable_kvm_set_irq() {
  if (event_case() != kKvmSetIrq) {
    clear_event();
    set_has_kvm_set_irq();
    _impl_.event_.kvm_set_irq_ = CreateMaybeMessage< ::perfetto::protos::KvmSetIrqFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_set_irq_;
}
inline ::perfetto::protos::KvmSetIrqFtraceEvent* FtraceEvent::mutable_kvm_set_irq() {
  ::perfetto::protos::KvmSetIrqFtraceEvent* _msg = _internal_mutable_kvm_set_irq();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_set_irq)
  return _msg;
}

// .perfetto.protos.KvmSetSpteHvaFtraceEvent kvm_set_spte_hva = 388;
inline bool FtraceEvent::has_kvm_set_spte_hva() const {
  return event_case() == kKvmSetSpteHva;
}
inline bool FtraceEvent::_internal_has_kvm_set_spte_hva() const {
  return event_case() == kKvmSetSpteHva;
}
inline void FtraceEvent::set_has_kvm_set_spte_hva() {
  _impl_._oneof_case_[0] = kKvmSetSpteHva;
}
inline ::perfetto::protos::KvmSetSpteHvaFtraceEvent* FtraceEvent::release_kvm_set_spte_hva() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_set_spte_hva)
  if (event_case() == kKvmSetSpteHva) {
    clear_has_event();
    ::perfetto::protos::KvmSetSpteHvaFtraceEvent* temp = _impl_.event_.kvm_set_spte_hva_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_set_spte_hva_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmSetSpteHvaFtraceEvent& FtraceEvent::_internal_kvm_set_spte_hva() const {
  return event_case() == kKvmSetSpteHva
      ? *_impl_.event_.kvm_set_spte_hva_
      : reinterpret_cast<::perfetto::protos::KvmSetSpteHvaFtraceEvent&>(::perfetto::protos::_KvmSetSpteHvaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmSetSpteHvaFtraceEvent& FtraceEvent::kvm_set_spte_hva() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_set_spte_hva)
  return _internal_kvm_set_spte_hva();
}
inline ::perfetto::protos::KvmSetSpteHvaFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_set_spte_hva() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_set_spte_hva)
  if (event_case() == kKvmSetSpteHva) {
    clear_has_event();
    ::perfetto::protos::KvmSetSpteHvaFtraceEvent* temp = _impl_.event_.kvm_set_spte_hva_;
    _impl_.event_.kvm_set_spte_hva_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_set_spte_hva(::perfetto::protos::KvmSetSpteHvaFtraceEvent* kvm_set_spte_hva) {
  clear_event();
  if (kvm_set_spte_hva) {
    set_has_kvm_set_spte_hva();
    _impl_.event_.kvm_set_spte_hva_ = kvm_set_spte_hva;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_set_spte_hva)
}
inline ::perfetto::protos::KvmSetSpteHvaFtraceEvent* FtraceEvent::_internal_mutable_kvm_set_spte_hva() {
  if (event_case() != kKvmSetSpteHva) {
    clear_event();
    set_has_kvm_set_spte_hva();
    _impl_.event_.kvm_set_spte_hva_ = CreateMaybeMessage< ::perfetto::protos::KvmSetSpteHvaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_set_spte_hva_;
}
inline ::perfetto::protos::KvmSetSpteHvaFtraceEvent* FtraceEvent::mutable_kvm_set_spte_hva() {
  ::perfetto::protos::KvmSetSpteHvaFtraceEvent* _msg = _internal_mutable_kvm_set_spte_hva();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_set_spte_hva)
  return _msg;
}

// .perfetto.protos.KvmSetWayFlushFtraceEvent kvm_set_way_flush = 389;
inline bool FtraceEvent::has_kvm_set_way_flush() const {
  return event_case() == kKvmSetWayFlush;
}
inline bool FtraceEvent::_internal_has_kvm_set_way_flush() const {
  return event_case() == kKvmSetWayFlush;
}
inline void FtraceEvent::set_has_kvm_set_way_flush() {
  _impl_._oneof_case_[0] = kKvmSetWayFlush;
}
inline ::perfetto::protos::KvmSetWayFlushFtraceEvent* FtraceEvent::release_kvm_set_way_flush() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_set_way_flush)
  if (event_case() == kKvmSetWayFlush) {
    clear_has_event();
    ::perfetto::protos::KvmSetWayFlushFtraceEvent* temp = _impl_.event_.kvm_set_way_flush_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_set_way_flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmSetWayFlushFtraceEvent& FtraceEvent::_internal_kvm_set_way_flush() const {
  return event_case() == kKvmSetWayFlush
      ? *_impl_.event_.kvm_set_way_flush_
      : reinterpret_cast<::perfetto::protos::KvmSetWayFlushFtraceEvent&>(::perfetto::protos::_KvmSetWayFlushFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmSetWayFlushFtraceEvent& FtraceEvent::kvm_set_way_flush() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_set_way_flush)
  return _internal_kvm_set_way_flush();
}
inline ::perfetto::protos::KvmSetWayFlushFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_set_way_flush() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_set_way_flush)
  if (event_case() == kKvmSetWayFlush) {
    clear_has_event();
    ::perfetto::protos::KvmSetWayFlushFtraceEvent* temp = _impl_.event_.kvm_set_way_flush_;
    _impl_.event_.kvm_set_way_flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_set_way_flush(::perfetto::protos::KvmSetWayFlushFtraceEvent* kvm_set_way_flush) {
  clear_event();
  if (kvm_set_way_flush) {
    set_has_kvm_set_way_flush();
    _impl_.event_.kvm_set_way_flush_ = kvm_set_way_flush;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_set_way_flush)
}
inline ::perfetto::protos::KvmSetWayFlushFtraceEvent* FtraceEvent::_internal_mutable_kvm_set_way_flush() {
  if (event_case() != kKvmSetWayFlush) {
    clear_event();
    set_has_kvm_set_way_flush();
    _impl_.event_.kvm_set_way_flush_ = CreateMaybeMessage< ::perfetto::protos::KvmSetWayFlushFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_set_way_flush_;
}
inline ::perfetto::protos::KvmSetWayFlushFtraceEvent* FtraceEvent::mutable_kvm_set_way_flush() {
  ::perfetto::protos::KvmSetWayFlushFtraceEvent* _msg = _internal_mutable_kvm_set_way_flush();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_set_way_flush)
  return _msg;
}

// .perfetto.protos.KvmSysAccessFtraceEvent kvm_sys_access = 390;
inline bool FtraceEvent::has_kvm_sys_access() const {
  return event_case() == kKvmSysAccess;
}
inline bool FtraceEvent::_internal_has_kvm_sys_access() const {
  return event_case() == kKvmSysAccess;
}
inline void FtraceEvent::set_has_kvm_sys_access() {
  _impl_._oneof_case_[0] = kKvmSysAccess;
}
inline ::perfetto::protos::KvmSysAccessFtraceEvent* FtraceEvent::release_kvm_sys_access() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_sys_access)
  if (event_case() == kKvmSysAccess) {
    clear_has_event();
    ::perfetto::protos::KvmSysAccessFtraceEvent* temp = _impl_.event_.kvm_sys_access_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_sys_access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmSysAccessFtraceEvent& FtraceEvent::_internal_kvm_sys_access() const {
  return event_case() == kKvmSysAccess
      ? *_impl_.event_.kvm_sys_access_
      : reinterpret_cast<::perfetto::protos::KvmSysAccessFtraceEvent&>(::perfetto::protos::_KvmSysAccessFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmSysAccessFtraceEvent& FtraceEvent::kvm_sys_access() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_sys_access)
  return _internal_kvm_sys_access();
}
inline ::perfetto::protos::KvmSysAccessFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_sys_access() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_sys_access)
  if (event_case() == kKvmSysAccess) {
    clear_has_event();
    ::perfetto::protos::KvmSysAccessFtraceEvent* temp = _impl_.event_.kvm_sys_access_;
    _impl_.event_.kvm_sys_access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_sys_access(::perfetto::protos::KvmSysAccessFtraceEvent* kvm_sys_access) {
  clear_event();
  if (kvm_sys_access) {
    set_has_kvm_sys_access();
    _impl_.event_.kvm_sys_access_ = kvm_sys_access;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_sys_access)
}
inline ::perfetto::protos::KvmSysAccessFtraceEvent* FtraceEvent::_internal_mutable_kvm_sys_access() {
  if (event_case() != kKvmSysAccess) {
    clear_event();
    set_has_kvm_sys_access();
    _impl_.event_.kvm_sys_access_ = CreateMaybeMessage< ::perfetto::protos::KvmSysAccessFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_sys_access_;
}
inline ::perfetto::protos::KvmSysAccessFtraceEvent* FtraceEvent::mutable_kvm_sys_access() {
  ::perfetto::protos::KvmSysAccessFtraceEvent* _msg = _internal_mutable_kvm_sys_access();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_sys_access)
  return _msg;
}

// .perfetto.protos.KvmTestAgeHvaFtraceEvent kvm_test_age_hva = 391;
inline bool FtraceEvent::has_kvm_test_age_hva() const {
  return event_case() == kKvmTestAgeHva;
}
inline bool FtraceEvent::_internal_has_kvm_test_age_hva() const {
  return event_case() == kKvmTestAgeHva;
}
inline void FtraceEvent::set_has_kvm_test_age_hva() {
  _impl_._oneof_case_[0] = kKvmTestAgeHva;
}
inline ::perfetto::protos::KvmTestAgeHvaFtraceEvent* FtraceEvent::release_kvm_test_age_hva() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_test_age_hva)
  if (event_case() == kKvmTestAgeHva) {
    clear_has_event();
    ::perfetto::protos::KvmTestAgeHvaFtraceEvent* temp = _impl_.event_.kvm_test_age_hva_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_test_age_hva_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmTestAgeHvaFtraceEvent& FtraceEvent::_internal_kvm_test_age_hva() const {
  return event_case() == kKvmTestAgeHva
      ? *_impl_.event_.kvm_test_age_hva_
      : reinterpret_cast<::perfetto::protos::KvmTestAgeHvaFtraceEvent&>(::perfetto::protos::_KvmTestAgeHvaFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmTestAgeHvaFtraceEvent& FtraceEvent::kvm_test_age_hva() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_test_age_hva)
  return _internal_kvm_test_age_hva();
}
inline ::perfetto::protos::KvmTestAgeHvaFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_test_age_hva() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_test_age_hva)
  if (event_case() == kKvmTestAgeHva) {
    clear_has_event();
    ::perfetto::protos::KvmTestAgeHvaFtraceEvent* temp = _impl_.event_.kvm_test_age_hva_;
    _impl_.event_.kvm_test_age_hva_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_test_age_hva(::perfetto::protos::KvmTestAgeHvaFtraceEvent* kvm_test_age_hva) {
  clear_event();
  if (kvm_test_age_hva) {
    set_has_kvm_test_age_hva();
    _impl_.event_.kvm_test_age_hva_ = kvm_test_age_hva;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_test_age_hva)
}
inline ::perfetto::protos::KvmTestAgeHvaFtraceEvent* FtraceEvent::_internal_mutable_kvm_test_age_hva() {
  if (event_case() != kKvmTestAgeHva) {
    clear_event();
    set_has_kvm_test_age_hva();
    _impl_.event_.kvm_test_age_hva_ = CreateMaybeMessage< ::perfetto::protos::KvmTestAgeHvaFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_test_age_hva_;
}
inline ::perfetto::protos::KvmTestAgeHvaFtraceEvent* FtraceEvent::mutable_kvm_test_age_hva() {
  ::perfetto::protos::KvmTestAgeHvaFtraceEvent* _msg = _internal_mutable_kvm_test_age_hva();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_test_age_hva)
  return _msg;
}

// .perfetto.protos.KvmTimerEmulateFtraceEvent kvm_timer_emulate = 392;
inline bool FtraceEvent::has_kvm_timer_emulate() const {
  return event_case() == kKvmTimerEmulate;
}
inline bool FtraceEvent::_internal_has_kvm_timer_emulate() const {
  return event_case() == kKvmTimerEmulate;
}
inline void FtraceEvent::set_has_kvm_timer_emulate() {
  _impl_._oneof_case_[0] = kKvmTimerEmulate;
}
inline ::perfetto::protos::KvmTimerEmulateFtraceEvent* FtraceEvent::release_kvm_timer_emulate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_timer_emulate)
  if (event_case() == kKvmTimerEmulate) {
    clear_has_event();
    ::perfetto::protos::KvmTimerEmulateFtraceEvent* temp = _impl_.event_.kvm_timer_emulate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_timer_emulate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmTimerEmulateFtraceEvent& FtraceEvent::_internal_kvm_timer_emulate() const {
  return event_case() == kKvmTimerEmulate
      ? *_impl_.event_.kvm_timer_emulate_
      : reinterpret_cast<::perfetto::protos::KvmTimerEmulateFtraceEvent&>(::perfetto::protos::_KvmTimerEmulateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmTimerEmulateFtraceEvent& FtraceEvent::kvm_timer_emulate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_timer_emulate)
  return _internal_kvm_timer_emulate();
}
inline ::perfetto::protos::KvmTimerEmulateFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_timer_emulate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_timer_emulate)
  if (event_case() == kKvmTimerEmulate) {
    clear_has_event();
    ::perfetto::protos::KvmTimerEmulateFtraceEvent* temp = _impl_.event_.kvm_timer_emulate_;
    _impl_.event_.kvm_timer_emulate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_timer_emulate(::perfetto::protos::KvmTimerEmulateFtraceEvent* kvm_timer_emulate) {
  clear_event();
  if (kvm_timer_emulate) {
    set_has_kvm_timer_emulate();
    _impl_.event_.kvm_timer_emulate_ = kvm_timer_emulate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_emulate)
}
inline ::perfetto::protos::KvmTimerEmulateFtraceEvent* FtraceEvent::_internal_mutable_kvm_timer_emulate() {
  if (event_case() != kKvmTimerEmulate) {
    clear_event();
    set_has_kvm_timer_emulate();
    _impl_.event_.kvm_timer_emulate_ = CreateMaybeMessage< ::perfetto::protos::KvmTimerEmulateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_timer_emulate_;
}
inline ::perfetto::protos::KvmTimerEmulateFtraceEvent* FtraceEvent::mutable_kvm_timer_emulate() {
  ::perfetto::protos::KvmTimerEmulateFtraceEvent* _msg = _internal_mutable_kvm_timer_emulate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_timer_emulate)
  return _msg;
}

// .perfetto.protos.KvmTimerHrtimerExpireFtraceEvent kvm_timer_hrtimer_expire = 393;
inline bool FtraceEvent::has_kvm_timer_hrtimer_expire() const {
  return event_case() == kKvmTimerHrtimerExpire;
}
inline bool FtraceEvent::_internal_has_kvm_timer_hrtimer_expire() const {
  return event_case() == kKvmTimerHrtimerExpire;
}
inline void FtraceEvent::set_has_kvm_timer_hrtimer_expire() {
  _impl_._oneof_case_[0] = kKvmTimerHrtimerExpire;
}
inline ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* FtraceEvent::release_kvm_timer_hrtimer_expire() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_timer_hrtimer_expire)
  if (event_case() == kKvmTimerHrtimerExpire) {
    clear_has_event();
    ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* temp = _impl_.event_.kvm_timer_hrtimer_expire_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_timer_hrtimer_expire_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent& FtraceEvent::_internal_kvm_timer_hrtimer_expire() const {
  return event_case() == kKvmTimerHrtimerExpire
      ? *_impl_.event_.kvm_timer_hrtimer_expire_
      : reinterpret_cast<::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent&>(::perfetto::protos::_KvmTimerHrtimerExpireFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent& FtraceEvent::kvm_timer_hrtimer_expire() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_timer_hrtimer_expire)
  return _internal_kvm_timer_hrtimer_expire();
}
inline ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_timer_hrtimer_expire() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_timer_hrtimer_expire)
  if (event_case() == kKvmTimerHrtimerExpire) {
    clear_has_event();
    ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* temp = _impl_.event_.kvm_timer_hrtimer_expire_;
    _impl_.event_.kvm_timer_hrtimer_expire_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_timer_hrtimer_expire(::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* kvm_timer_hrtimer_expire) {
  clear_event();
  if (kvm_timer_hrtimer_expire) {
    set_has_kvm_timer_hrtimer_expire();
    _impl_.event_.kvm_timer_hrtimer_expire_ = kvm_timer_hrtimer_expire;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_hrtimer_expire)
}
inline ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* FtraceEvent::_internal_mutable_kvm_timer_hrtimer_expire() {
  if (event_case() != kKvmTimerHrtimerExpire) {
    clear_event();
    set_has_kvm_timer_hrtimer_expire();
    _impl_.event_.kvm_timer_hrtimer_expire_ = CreateMaybeMessage< ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_timer_hrtimer_expire_;
}
inline ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* FtraceEvent::mutable_kvm_timer_hrtimer_expire() {
  ::perfetto::protos::KvmTimerHrtimerExpireFtraceEvent* _msg = _internal_mutable_kvm_timer_hrtimer_expire();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_timer_hrtimer_expire)
  return _msg;
}

// .perfetto.protos.KvmTimerRestoreStateFtraceEvent kvm_timer_restore_state = 394;
inline bool FtraceEvent::has_kvm_timer_restore_state() const {
  return event_case() == kKvmTimerRestoreState;
}
inline bool FtraceEvent::_internal_has_kvm_timer_restore_state() const {
  return event_case() == kKvmTimerRestoreState;
}
inline void FtraceEvent::set_has_kvm_timer_restore_state() {
  _impl_._oneof_case_[0] = kKvmTimerRestoreState;
}
inline ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* FtraceEvent::release_kvm_timer_restore_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_timer_restore_state)
  if (event_case() == kKvmTimerRestoreState) {
    clear_has_event();
    ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* temp = _impl_.event_.kvm_timer_restore_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_timer_restore_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmTimerRestoreStateFtraceEvent& FtraceEvent::_internal_kvm_timer_restore_state() const {
  return event_case() == kKvmTimerRestoreState
      ? *_impl_.event_.kvm_timer_restore_state_
      : reinterpret_cast<::perfetto::protos::KvmTimerRestoreStateFtraceEvent&>(::perfetto::protos::_KvmTimerRestoreStateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmTimerRestoreStateFtraceEvent& FtraceEvent::kvm_timer_restore_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_timer_restore_state)
  return _internal_kvm_timer_restore_state();
}
inline ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_timer_restore_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_timer_restore_state)
  if (event_case() == kKvmTimerRestoreState) {
    clear_has_event();
    ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* temp = _impl_.event_.kvm_timer_restore_state_;
    _impl_.event_.kvm_timer_restore_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_timer_restore_state(::perfetto::protos::KvmTimerRestoreStateFtraceEvent* kvm_timer_restore_state) {
  clear_event();
  if (kvm_timer_restore_state) {
    set_has_kvm_timer_restore_state();
    _impl_.event_.kvm_timer_restore_state_ = kvm_timer_restore_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_restore_state)
}
inline ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* FtraceEvent::_internal_mutable_kvm_timer_restore_state() {
  if (event_case() != kKvmTimerRestoreState) {
    clear_event();
    set_has_kvm_timer_restore_state();
    _impl_.event_.kvm_timer_restore_state_ = CreateMaybeMessage< ::perfetto::protos::KvmTimerRestoreStateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_timer_restore_state_;
}
inline ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* FtraceEvent::mutable_kvm_timer_restore_state() {
  ::perfetto::protos::KvmTimerRestoreStateFtraceEvent* _msg = _internal_mutable_kvm_timer_restore_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_timer_restore_state)
  return _msg;
}

// .perfetto.protos.KvmTimerSaveStateFtraceEvent kvm_timer_save_state = 395;
inline bool FtraceEvent::has_kvm_timer_save_state() const {
  return event_case() == kKvmTimerSaveState;
}
inline bool FtraceEvent::_internal_has_kvm_timer_save_state() const {
  return event_case() == kKvmTimerSaveState;
}
inline void FtraceEvent::set_has_kvm_timer_save_state() {
  _impl_._oneof_case_[0] = kKvmTimerSaveState;
}
inline ::perfetto::protos::KvmTimerSaveStateFtraceEvent* FtraceEvent::release_kvm_timer_save_state() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_timer_save_state)
  if (event_case() == kKvmTimerSaveState) {
    clear_has_event();
    ::perfetto::protos::KvmTimerSaveStateFtraceEvent* temp = _impl_.event_.kvm_timer_save_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_timer_save_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmTimerSaveStateFtraceEvent& FtraceEvent::_internal_kvm_timer_save_state() const {
  return event_case() == kKvmTimerSaveState
      ? *_impl_.event_.kvm_timer_save_state_
      : reinterpret_cast<::perfetto::protos::KvmTimerSaveStateFtraceEvent&>(::perfetto::protos::_KvmTimerSaveStateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmTimerSaveStateFtraceEvent& FtraceEvent::kvm_timer_save_state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_timer_save_state)
  return _internal_kvm_timer_save_state();
}
inline ::perfetto::protos::KvmTimerSaveStateFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_timer_save_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_timer_save_state)
  if (event_case() == kKvmTimerSaveState) {
    clear_has_event();
    ::perfetto::protos::KvmTimerSaveStateFtraceEvent* temp = _impl_.event_.kvm_timer_save_state_;
    _impl_.event_.kvm_timer_save_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_timer_save_state(::perfetto::protos::KvmTimerSaveStateFtraceEvent* kvm_timer_save_state) {
  clear_event();
  if (kvm_timer_save_state) {
    set_has_kvm_timer_save_state();
    _impl_.event_.kvm_timer_save_state_ = kvm_timer_save_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_save_state)
}
inline ::perfetto::protos::KvmTimerSaveStateFtraceEvent* FtraceEvent::_internal_mutable_kvm_timer_save_state() {
  if (event_case() != kKvmTimerSaveState) {
    clear_event();
    set_has_kvm_timer_save_state();
    _impl_.event_.kvm_timer_save_state_ = CreateMaybeMessage< ::perfetto::protos::KvmTimerSaveStateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_timer_save_state_;
}
inline ::perfetto::protos::KvmTimerSaveStateFtraceEvent* FtraceEvent::mutable_kvm_timer_save_state() {
  ::perfetto::protos::KvmTimerSaveStateFtraceEvent* _msg = _internal_mutable_kvm_timer_save_state();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_timer_save_state)
  return _msg;
}

// .perfetto.protos.KvmTimerUpdateIrqFtraceEvent kvm_timer_update_irq = 396;
inline bool FtraceEvent::has_kvm_timer_update_irq() const {
  return event_case() == kKvmTimerUpdateIrq;
}
inline bool FtraceEvent::_internal_has_kvm_timer_update_irq() const {
  return event_case() == kKvmTimerUpdateIrq;
}
inline void FtraceEvent::set_has_kvm_timer_update_irq() {
  _impl_._oneof_case_[0] = kKvmTimerUpdateIrq;
}
inline ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* FtraceEvent::release_kvm_timer_update_irq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_timer_update_irq)
  if (event_case() == kKvmTimerUpdateIrq) {
    clear_has_event();
    ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* temp = _impl_.event_.kvm_timer_update_irq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_timer_update_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent& FtraceEvent::_internal_kvm_timer_update_irq() const {
  return event_case() == kKvmTimerUpdateIrq
      ? *_impl_.event_.kvm_timer_update_irq_
      : reinterpret_cast<::perfetto::protos::KvmTimerUpdateIrqFtraceEvent&>(::perfetto::protos::_KvmTimerUpdateIrqFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent& FtraceEvent::kvm_timer_update_irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_timer_update_irq)
  return _internal_kvm_timer_update_irq();
}
inline ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_timer_update_irq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_timer_update_irq)
  if (event_case() == kKvmTimerUpdateIrq) {
    clear_has_event();
    ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* temp = _impl_.event_.kvm_timer_update_irq_;
    _impl_.event_.kvm_timer_update_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_timer_update_irq(::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* kvm_timer_update_irq) {
  clear_event();
  if (kvm_timer_update_irq) {
    set_has_kvm_timer_update_irq();
    _impl_.event_.kvm_timer_update_irq_ = kvm_timer_update_irq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_timer_update_irq)
}
inline ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* FtraceEvent::_internal_mutable_kvm_timer_update_irq() {
  if (event_case() != kKvmTimerUpdateIrq) {
    clear_event();
    set_has_kvm_timer_update_irq();
    _impl_.event_.kvm_timer_update_irq_ = CreateMaybeMessage< ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_timer_update_irq_;
}
inline ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* FtraceEvent::mutable_kvm_timer_update_irq() {
  ::perfetto::protos::KvmTimerUpdateIrqFtraceEvent* _msg = _internal_mutable_kvm_timer_update_irq();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_timer_update_irq)
  return _msg;
}

// .perfetto.protos.KvmToggleCacheFtraceEvent kvm_toggle_cache = 397;
inline bool FtraceEvent::has_kvm_toggle_cache() const {
  return event_case() == kKvmToggleCache;
}
inline bool FtraceEvent::_internal_has_kvm_toggle_cache() const {
  return event_case() == kKvmToggleCache;
}
inline void FtraceEvent::set_has_kvm_toggle_cache() {
  _impl_._oneof_case_[0] = kKvmToggleCache;
}
inline ::perfetto::protos::KvmToggleCacheFtraceEvent* FtraceEvent::release_kvm_toggle_cache() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_toggle_cache)
  if (event_case() == kKvmToggleCache) {
    clear_has_event();
    ::perfetto::protos::KvmToggleCacheFtraceEvent* temp = _impl_.event_.kvm_toggle_cache_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_toggle_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmToggleCacheFtraceEvent& FtraceEvent::_internal_kvm_toggle_cache() const {
  return event_case() == kKvmToggleCache
      ? *_impl_.event_.kvm_toggle_cache_
      : reinterpret_cast<::perfetto::protos::KvmToggleCacheFtraceEvent&>(::perfetto::protos::_KvmToggleCacheFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmToggleCacheFtraceEvent& FtraceEvent::kvm_toggle_cache() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_toggle_cache)
  return _internal_kvm_toggle_cache();
}
inline ::perfetto::protos::KvmToggleCacheFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_toggle_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_toggle_cache)
  if (event_case() == kKvmToggleCache) {
    clear_has_event();
    ::perfetto::protos::KvmToggleCacheFtraceEvent* temp = _impl_.event_.kvm_toggle_cache_;
    _impl_.event_.kvm_toggle_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_toggle_cache(::perfetto::protos::KvmToggleCacheFtraceEvent* kvm_toggle_cache) {
  clear_event();
  if (kvm_toggle_cache) {
    set_has_kvm_toggle_cache();
    _impl_.event_.kvm_toggle_cache_ = kvm_toggle_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_toggle_cache)
}
inline ::perfetto::protos::KvmToggleCacheFtraceEvent* FtraceEvent::_internal_mutable_kvm_toggle_cache() {
  if (event_case() != kKvmToggleCache) {
    clear_event();
    set_has_kvm_toggle_cache();
    _impl_.event_.kvm_toggle_cache_ = CreateMaybeMessage< ::perfetto::protos::KvmToggleCacheFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_toggle_cache_;
}
inline ::perfetto::protos::KvmToggleCacheFtraceEvent* FtraceEvent::mutable_kvm_toggle_cache() {
  ::perfetto::protos::KvmToggleCacheFtraceEvent* _msg = _internal_mutable_kvm_toggle_cache();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_toggle_cache)
  return _msg;
}

// .perfetto.protos.KvmUnmapHvaRangeFtraceEvent kvm_unmap_hva_range = 398;
inline bool FtraceEvent::has_kvm_unmap_hva_range() const {
  return event_case() == kKvmUnmapHvaRange;
}
inline bool FtraceEvent::_internal_has_kvm_unmap_hva_range() const {
  return event_case() == kKvmUnmapHvaRange;
}
inline void FtraceEvent::set_has_kvm_unmap_hva_range() {
  _impl_._oneof_case_[0] = kKvmUnmapHvaRange;
}
inline ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* FtraceEvent::release_kvm_unmap_hva_range() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_unmap_hva_range)
  if (event_case() == kKvmUnmapHvaRange) {
    clear_has_event();
    ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* temp = _impl_.event_.kvm_unmap_hva_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_unmap_hva_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent& FtraceEvent::_internal_kvm_unmap_hva_range() const {
  return event_case() == kKvmUnmapHvaRange
      ? *_impl_.event_.kvm_unmap_hva_range_
      : reinterpret_cast<::perfetto::protos::KvmUnmapHvaRangeFtraceEvent&>(::perfetto::protos::_KvmUnmapHvaRangeFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent& FtraceEvent::kvm_unmap_hva_range() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_unmap_hva_range)
  return _internal_kvm_unmap_hva_range();
}
inline ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_unmap_hva_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_unmap_hva_range)
  if (event_case() == kKvmUnmapHvaRange) {
    clear_has_event();
    ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* temp = _impl_.event_.kvm_unmap_hva_range_;
    _impl_.event_.kvm_unmap_hva_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_unmap_hva_range(::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* kvm_unmap_hva_range) {
  clear_event();
  if (kvm_unmap_hva_range) {
    set_has_kvm_unmap_hva_range();
    _impl_.event_.kvm_unmap_hva_range_ = kvm_unmap_hva_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_unmap_hva_range)
}
inline ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* FtraceEvent::_internal_mutable_kvm_unmap_hva_range() {
  if (event_case() != kKvmUnmapHvaRange) {
    clear_event();
    set_has_kvm_unmap_hva_range();
    _impl_.event_.kvm_unmap_hva_range_ = CreateMaybeMessage< ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_unmap_hva_range_;
}
inline ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* FtraceEvent::mutable_kvm_unmap_hva_range() {
  ::perfetto::protos::KvmUnmapHvaRangeFtraceEvent* _msg = _internal_mutable_kvm_unmap_hva_range();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_unmap_hva_range)
  return _msg;
}

// .perfetto.protos.KvmUserspaceExitFtraceEvent kvm_userspace_exit = 399;
inline bool FtraceEvent::has_kvm_userspace_exit() const {
  return event_case() == kKvmUserspaceExit;
}
inline bool FtraceEvent::_internal_has_kvm_userspace_exit() const {
  return event_case() == kKvmUserspaceExit;
}
inline void FtraceEvent::set_has_kvm_userspace_exit() {
  _impl_._oneof_case_[0] = kKvmUserspaceExit;
}
inline ::perfetto::protos::KvmUserspaceExitFtraceEvent* FtraceEvent::release_kvm_userspace_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_userspace_exit)
  if (event_case() == kKvmUserspaceExit) {
    clear_has_event();
    ::perfetto::protos::KvmUserspaceExitFtraceEvent* temp = _impl_.event_.kvm_userspace_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_userspace_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmUserspaceExitFtraceEvent& FtraceEvent::_internal_kvm_userspace_exit() const {
  return event_case() == kKvmUserspaceExit
      ? *_impl_.event_.kvm_userspace_exit_
      : reinterpret_cast<::perfetto::protos::KvmUserspaceExitFtraceEvent&>(::perfetto::protos::_KvmUserspaceExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmUserspaceExitFtraceEvent& FtraceEvent::kvm_userspace_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_userspace_exit)
  return _internal_kvm_userspace_exit();
}
inline ::perfetto::protos::KvmUserspaceExitFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_userspace_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_userspace_exit)
  if (event_case() == kKvmUserspaceExit) {
    clear_has_event();
    ::perfetto::protos::KvmUserspaceExitFtraceEvent* temp = _impl_.event_.kvm_userspace_exit_;
    _impl_.event_.kvm_userspace_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_userspace_exit(::perfetto::protos::KvmUserspaceExitFtraceEvent* kvm_userspace_exit) {
  clear_event();
  if (kvm_userspace_exit) {
    set_has_kvm_userspace_exit();
    _impl_.event_.kvm_userspace_exit_ = kvm_userspace_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_userspace_exit)
}
inline ::perfetto::protos::KvmUserspaceExitFtraceEvent* FtraceEvent::_internal_mutable_kvm_userspace_exit() {
  if (event_case() != kKvmUserspaceExit) {
    clear_event();
    set_has_kvm_userspace_exit();
    _impl_.event_.kvm_userspace_exit_ = CreateMaybeMessage< ::perfetto::protos::KvmUserspaceExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_userspace_exit_;
}
inline ::perfetto::protos::KvmUserspaceExitFtraceEvent* FtraceEvent::mutable_kvm_userspace_exit() {
  ::perfetto::protos::KvmUserspaceExitFtraceEvent* _msg = _internal_mutable_kvm_userspace_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_userspace_exit)
  return _msg;
}

// .perfetto.protos.KvmVcpuWakeupFtraceEvent kvm_vcpu_wakeup = 400;
inline bool FtraceEvent::has_kvm_vcpu_wakeup() const {
  return event_case() == kKvmVcpuWakeup;
}
inline bool FtraceEvent::_internal_has_kvm_vcpu_wakeup() const {
  return event_case() == kKvmVcpuWakeup;
}
inline void FtraceEvent::set_has_kvm_vcpu_wakeup() {
  _impl_._oneof_case_[0] = kKvmVcpuWakeup;
}
inline ::perfetto::protos::KvmVcpuWakeupFtraceEvent* FtraceEvent::release_kvm_vcpu_wakeup() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_vcpu_wakeup)
  if (event_case() == kKvmVcpuWakeup) {
    clear_has_event();
    ::perfetto::protos::KvmVcpuWakeupFtraceEvent* temp = _impl_.event_.kvm_vcpu_wakeup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_vcpu_wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmVcpuWakeupFtraceEvent& FtraceEvent::_internal_kvm_vcpu_wakeup() const {
  return event_case() == kKvmVcpuWakeup
      ? *_impl_.event_.kvm_vcpu_wakeup_
      : reinterpret_cast<::perfetto::protos::KvmVcpuWakeupFtraceEvent&>(::perfetto::protos::_KvmVcpuWakeupFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmVcpuWakeupFtraceEvent& FtraceEvent::kvm_vcpu_wakeup() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_vcpu_wakeup)
  return _internal_kvm_vcpu_wakeup();
}
inline ::perfetto::protos::KvmVcpuWakeupFtraceEvent* FtraceEvent::unsafe_arena_release_kvm_vcpu_wakeup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_vcpu_wakeup)
  if (event_case() == kKvmVcpuWakeup) {
    clear_has_event();
    ::perfetto::protos::KvmVcpuWakeupFtraceEvent* temp = _impl_.event_.kvm_vcpu_wakeup_;
    _impl_.event_.kvm_vcpu_wakeup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_vcpu_wakeup(::perfetto::protos::KvmVcpuWakeupFtraceEvent* kvm_vcpu_wakeup) {
  clear_event();
  if (kvm_vcpu_wakeup) {
    set_has_kvm_vcpu_wakeup();
    _impl_.event_.kvm_vcpu_wakeup_ = kvm_vcpu_wakeup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_vcpu_wakeup)
}
inline ::perfetto::protos::KvmVcpuWakeupFtraceEvent* FtraceEvent::_internal_mutable_kvm_vcpu_wakeup() {
  if (event_case() != kKvmVcpuWakeup) {
    clear_event();
    set_has_kvm_vcpu_wakeup();
    _impl_.event_.kvm_vcpu_wakeup_ = CreateMaybeMessage< ::perfetto::protos::KvmVcpuWakeupFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_vcpu_wakeup_;
}
inline ::perfetto::protos::KvmVcpuWakeupFtraceEvent* FtraceEvent::mutable_kvm_vcpu_wakeup() {
  ::perfetto::protos::KvmVcpuWakeupFtraceEvent* _msg = _internal_mutable_kvm_vcpu_wakeup();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_vcpu_wakeup)
  return _msg;
}

// .perfetto.protos.KvmWfxArm64FtraceEvent kvm_wfx_arm64 = 401;
inline bool FtraceEvent::has_kvm_wfx_arm64() const {
  return event_case() == kKvmWfxArm64;
}
inline bool FtraceEvent::_internal_has_kvm_wfx_arm64() const {
  return event_case() == kKvmWfxArm64;
}
inline void FtraceEvent::set_has_kvm_wfx_arm64() {
  _impl_._oneof_case_[0] = kKvmWfxArm64;
}
inline ::perfetto::protos::KvmWfxArm64FtraceEvent* FtraceEvent::release_kvm_wfx_arm64() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.kvm_wfx_arm64)
  if (event_case() == kKvmWfxArm64) {
    clear_has_event();
    ::perfetto::protos::KvmWfxArm64FtraceEvent* temp = _impl_.event_.kvm_wfx_arm64_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kvm_wfx_arm64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::KvmWfxArm64FtraceEvent& FtraceEvent::_internal_kvm_wfx_arm64() const {
  return event_case() == kKvmWfxArm64
      ? *_impl_.event_.kvm_wfx_arm64_
      : reinterpret_cast<::perfetto::protos::KvmWfxArm64FtraceEvent&>(::perfetto::protos::_KvmWfxArm64FtraceEvent_default_instance_);
}
inline const ::perfetto::protos::KvmWfxArm64FtraceEvent& FtraceEvent::kvm_wfx_arm64() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.kvm_wfx_arm64)
  return _internal_kvm_wfx_arm64();
}
inline ::perfetto::protos::KvmWfxArm64FtraceEvent* FtraceEvent::unsafe_arena_release_kvm_wfx_arm64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.kvm_wfx_arm64)
  if (event_case() == kKvmWfxArm64) {
    clear_has_event();
    ::perfetto::protos::KvmWfxArm64FtraceEvent* temp = _impl_.event_.kvm_wfx_arm64_;
    _impl_.event_.kvm_wfx_arm64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_kvm_wfx_arm64(::perfetto::protos::KvmWfxArm64FtraceEvent* kvm_wfx_arm64) {
  clear_event();
  if (kvm_wfx_arm64) {
    set_has_kvm_wfx_arm64();
    _impl_.event_.kvm_wfx_arm64_ = kvm_wfx_arm64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.kvm_wfx_arm64)
}
inline ::perfetto::protos::KvmWfxArm64FtraceEvent* FtraceEvent::_internal_mutable_kvm_wfx_arm64() {
  if (event_case() != kKvmWfxArm64) {
    clear_event();
    set_has_kvm_wfx_arm64();
    _impl_.event_.kvm_wfx_arm64_ = CreateMaybeMessage< ::perfetto::protos::KvmWfxArm64FtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.kvm_wfx_arm64_;
}
inline ::perfetto::protos::KvmWfxArm64FtraceEvent* FtraceEvent::mutable_kvm_wfx_arm64() {
  ::perfetto::protos::KvmWfxArm64FtraceEvent* _msg = _internal_mutable_kvm_wfx_arm64();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.kvm_wfx_arm64)
  return _msg;
}

// .perfetto.protos.TrapRegFtraceEvent trap_reg = 402;
inline bool FtraceEvent::has_trap_reg() const {
  return event_case() == kTrapReg;
}
inline bool FtraceEvent::_internal_has_trap_reg() const {
  return event_case() == kTrapReg;
}
inline void FtraceEvent::set_has_trap_reg() {
  _impl_._oneof_case_[0] = kTrapReg;
}
inline ::perfetto::protos::TrapRegFtraceEvent* FtraceEvent::release_trap_reg() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trap_reg)
  if (event_case() == kTrapReg) {
    clear_has_event();
    ::perfetto::protos::TrapRegFtraceEvent* temp = _impl_.event_.trap_reg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trap_reg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrapRegFtraceEvent& FtraceEvent::_internal_trap_reg() const {
  return event_case() == kTrapReg
      ? *_impl_.event_.trap_reg_
      : reinterpret_cast<::perfetto::protos::TrapRegFtraceEvent&>(::perfetto::protos::_TrapRegFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrapRegFtraceEvent& FtraceEvent::trap_reg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trap_reg)
  return _internal_trap_reg();
}
inline ::perfetto::protos::TrapRegFtraceEvent* FtraceEvent::unsafe_arena_release_trap_reg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trap_reg)
  if (event_case() == kTrapReg) {
    clear_has_event();
    ::perfetto::protos::TrapRegFtraceEvent* temp = _impl_.event_.trap_reg_;
    _impl_.event_.trap_reg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trap_reg(::perfetto::protos::TrapRegFtraceEvent* trap_reg) {
  clear_event();
  if (trap_reg) {
    set_has_trap_reg();
    _impl_.event_.trap_reg_ = trap_reg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trap_reg)
}
inline ::perfetto::protos::TrapRegFtraceEvent* FtraceEvent::_internal_mutable_trap_reg() {
  if (event_case() != kTrapReg) {
    clear_event();
    set_has_trap_reg();
    _impl_.event_.trap_reg_ = CreateMaybeMessage< ::perfetto::protos::TrapRegFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trap_reg_;
}
inline ::perfetto::protos::TrapRegFtraceEvent* FtraceEvent::mutable_trap_reg() {
  ::perfetto::protos::TrapRegFtraceEvent* _msg = _internal_mutable_trap_reg();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trap_reg)
  return _msg;
}

// .perfetto.protos.VgicUpdateIrqPendingFtraceEvent vgic_update_irq_pending = 403;
inline bool FtraceEvent::has_vgic_update_irq_pending() const {
  return event_case() == kVgicUpdateIrqPending;
}
inline bool FtraceEvent::_internal_has_vgic_update_irq_pending() const {
  return event_case() == kVgicUpdateIrqPending;
}
inline void FtraceEvent::set_has_vgic_update_irq_pending() {
  _impl_._oneof_case_[0] = kVgicUpdateIrqPending;
}
inline ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* FtraceEvent::release_vgic_update_irq_pending() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.vgic_update_irq_pending)
  if (event_case() == kVgicUpdateIrqPending) {
    clear_has_event();
    ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* temp = _impl_.event_.vgic_update_irq_pending_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vgic_update_irq_pending_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent& FtraceEvent::_internal_vgic_update_irq_pending() const {
  return event_case() == kVgicUpdateIrqPending
      ? *_impl_.event_.vgic_update_irq_pending_
      : reinterpret_cast<::perfetto::protos::VgicUpdateIrqPendingFtraceEvent&>(::perfetto::protos::_VgicUpdateIrqPendingFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent& FtraceEvent::vgic_update_irq_pending() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.vgic_update_irq_pending)
  return _internal_vgic_update_irq_pending();
}
inline ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* FtraceEvent::unsafe_arena_release_vgic_update_irq_pending() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.vgic_update_irq_pending)
  if (event_case() == kVgicUpdateIrqPending) {
    clear_has_event();
    ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* temp = _impl_.event_.vgic_update_irq_pending_;
    _impl_.event_.vgic_update_irq_pending_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_vgic_update_irq_pending(::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* vgic_update_irq_pending) {
  clear_event();
  if (vgic_update_irq_pending) {
    set_has_vgic_update_irq_pending();
    _impl_.event_.vgic_update_irq_pending_ = vgic_update_irq_pending;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.vgic_update_irq_pending)
}
inline ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* FtraceEvent::_internal_mutable_vgic_update_irq_pending() {
  if (event_case() != kVgicUpdateIrqPending) {
    clear_event();
    set_has_vgic_update_irq_pending();
    _impl_.event_.vgic_update_irq_pending_ = CreateMaybeMessage< ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.vgic_update_irq_pending_;
}
inline ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* FtraceEvent::mutable_vgic_update_irq_pending() {
  ::perfetto::protos::VgicUpdateIrqPendingFtraceEvent* _msg = _internal_mutable_vgic_update_irq_pending();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.vgic_update_irq_pending)
  return _msg;
}

// .perfetto.protos.WakeupSourceActivateFtraceEvent wakeup_source_activate = 404;
inline bool FtraceEvent::has_wakeup_source_activate() const {
  return event_case() == kWakeupSourceActivate;
}
inline bool FtraceEvent::_internal_has_wakeup_source_activate() const {
  return event_case() == kWakeupSourceActivate;
}
inline void FtraceEvent::set_has_wakeup_source_activate() {
  _impl_._oneof_case_[0] = kWakeupSourceActivate;
}
inline ::perfetto::protos::WakeupSourceActivateFtraceEvent* FtraceEvent::release_wakeup_source_activate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.wakeup_source_activate)
  if (event_case() == kWakeupSourceActivate) {
    clear_has_event();
    ::perfetto::protos::WakeupSourceActivateFtraceEvent* temp = _impl_.event_.wakeup_source_activate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.wakeup_source_activate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WakeupSourceActivateFtraceEvent& FtraceEvent::_internal_wakeup_source_activate() const {
  return event_case() == kWakeupSourceActivate
      ? *_impl_.event_.wakeup_source_activate_
      : reinterpret_cast<::perfetto::protos::WakeupSourceActivateFtraceEvent&>(::perfetto::protos::_WakeupSourceActivateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::WakeupSourceActivateFtraceEvent& FtraceEvent::wakeup_source_activate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.wakeup_source_activate)
  return _internal_wakeup_source_activate();
}
inline ::perfetto::protos::WakeupSourceActivateFtraceEvent* FtraceEvent::unsafe_arena_release_wakeup_source_activate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.wakeup_source_activate)
  if (event_case() == kWakeupSourceActivate) {
    clear_has_event();
    ::perfetto::protos::WakeupSourceActivateFtraceEvent* temp = _impl_.event_.wakeup_source_activate_;
    _impl_.event_.wakeup_source_activate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_wakeup_source_activate(::perfetto::protos::WakeupSourceActivateFtraceEvent* wakeup_source_activate) {
  clear_event();
  if (wakeup_source_activate) {
    set_has_wakeup_source_activate();
    _impl_.event_.wakeup_source_activate_ = wakeup_source_activate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.wakeup_source_activate)
}
inline ::perfetto::protos::WakeupSourceActivateFtraceEvent* FtraceEvent::_internal_mutable_wakeup_source_activate() {
  if (event_case() != kWakeupSourceActivate) {
    clear_event();
    set_has_wakeup_source_activate();
    _impl_.event_.wakeup_source_activate_ = CreateMaybeMessage< ::perfetto::protos::WakeupSourceActivateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.wakeup_source_activate_;
}
inline ::perfetto::protos::WakeupSourceActivateFtraceEvent* FtraceEvent::mutable_wakeup_source_activate() {
  ::perfetto::protos::WakeupSourceActivateFtraceEvent* _msg = _internal_mutable_wakeup_source_activate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.wakeup_source_activate)
  return _msg;
}

// .perfetto.protos.WakeupSourceDeactivateFtraceEvent wakeup_source_deactivate = 405;
inline bool FtraceEvent::has_wakeup_source_deactivate() const {
  return event_case() == kWakeupSourceDeactivate;
}
inline bool FtraceEvent::_internal_has_wakeup_source_deactivate() const {
  return event_case() == kWakeupSourceDeactivate;
}
inline void FtraceEvent::set_has_wakeup_source_deactivate() {
  _impl_._oneof_case_[0] = kWakeupSourceDeactivate;
}
inline ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* FtraceEvent::release_wakeup_source_deactivate() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.wakeup_source_deactivate)
  if (event_case() == kWakeupSourceDeactivate) {
    clear_has_event();
    ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* temp = _impl_.event_.wakeup_source_deactivate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.wakeup_source_deactivate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::WakeupSourceDeactivateFtraceEvent& FtraceEvent::_internal_wakeup_source_deactivate() const {
  return event_case() == kWakeupSourceDeactivate
      ? *_impl_.event_.wakeup_source_deactivate_
      : reinterpret_cast<::perfetto::protos::WakeupSourceDeactivateFtraceEvent&>(::perfetto::protos::_WakeupSourceDeactivateFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::WakeupSourceDeactivateFtraceEvent& FtraceEvent::wakeup_source_deactivate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.wakeup_source_deactivate)
  return _internal_wakeup_source_deactivate();
}
inline ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* FtraceEvent::unsafe_arena_release_wakeup_source_deactivate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.wakeup_source_deactivate)
  if (event_case() == kWakeupSourceDeactivate) {
    clear_has_event();
    ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* temp = _impl_.event_.wakeup_source_deactivate_;
    _impl_.event_.wakeup_source_deactivate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_wakeup_source_deactivate(::perfetto::protos::WakeupSourceDeactivateFtraceEvent* wakeup_source_deactivate) {
  clear_event();
  if (wakeup_source_deactivate) {
    set_has_wakeup_source_deactivate();
    _impl_.event_.wakeup_source_deactivate_ = wakeup_source_deactivate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.wakeup_source_deactivate)
}
inline ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* FtraceEvent::_internal_mutable_wakeup_source_deactivate() {
  if (event_case() != kWakeupSourceDeactivate) {
    clear_event();
    set_has_wakeup_source_deactivate();
    _impl_.event_.wakeup_source_deactivate_ = CreateMaybeMessage< ::perfetto::protos::WakeupSourceDeactivateFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.wakeup_source_deactivate_;
}
inline ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* FtraceEvent::mutable_wakeup_source_deactivate() {
  ::perfetto::protos::WakeupSourceDeactivateFtraceEvent* _msg = _internal_mutable_wakeup_source_deactivate();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.wakeup_source_deactivate)
  return _msg;
}

// .perfetto.protos.UfshcdCommandFtraceEvent ufshcd_command = 406;
inline bool FtraceEvent::has_ufshcd_command() const {
  return event_case() == kUfshcdCommand;
}
inline bool FtraceEvent::_internal_has_ufshcd_command() const {
  return event_case() == kUfshcdCommand;
}
inline void FtraceEvent::set_has_ufshcd_command() {
  _impl_._oneof_case_[0] = kUfshcdCommand;
}
inline ::perfetto::protos::UfshcdCommandFtraceEvent* FtraceEvent::release_ufshcd_command() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ufshcd_command)
  if (event_case() == kUfshcdCommand) {
    clear_has_event();
    ::perfetto::protos::UfshcdCommandFtraceEvent* temp = _impl_.event_.ufshcd_command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ufshcd_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::UfshcdCommandFtraceEvent& FtraceEvent::_internal_ufshcd_command() const {
  return event_case() == kUfshcdCommand
      ? *_impl_.event_.ufshcd_command_
      : reinterpret_cast<::perfetto::protos::UfshcdCommandFtraceEvent&>(::perfetto::protos::_UfshcdCommandFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::UfshcdCommandFtraceEvent& FtraceEvent::ufshcd_command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ufshcd_command)
  return _internal_ufshcd_command();
}
inline ::perfetto::protos::UfshcdCommandFtraceEvent* FtraceEvent::unsafe_arena_release_ufshcd_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ufshcd_command)
  if (event_case() == kUfshcdCommand) {
    clear_has_event();
    ::perfetto::protos::UfshcdCommandFtraceEvent* temp = _impl_.event_.ufshcd_command_;
    _impl_.event_.ufshcd_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ufshcd_command(::perfetto::protos::UfshcdCommandFtraceEvent* ufshcd_command) {
  clear_event();
  if (ufshcd_command) {
    set_has_ufshcd_command();
    _impl_.event_.ufshcd_command_ = ufshcd_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ufshcd_command)
}
inline ::perfetto::protos::UfshcdCommandFtraceEvent* FtraceEvent::_internal_mutable_ufshcd_command() {
  if (event_case() != kUfshcdCommand) {
    clear_event();
    set_has_ufshcd_command();
    _impl_.event_.ufshcd_command_ = CreateMaybeMessage< ::perfetto::protos::UfshcdCommandFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ufshcd_command_;
}
inline ::perfetto::protos::UfshcdCommandFtraceEvent* FtraceEvent::mutable_ufshcd_command() {
  ::perfetto::protos::UfshcdCommandFtraceEvent* _msg = _internal_mutable_ufshcd_command();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ufshcd_command)
  return _msg;
}

// .perfetto.protos.UfshcdClkGatingFtraceEvent ufshcd_clk_gating = 407;
inline bool FtraceEvent::has_ufshcd_clk_gating() const {
  return event_case() == kUfshcdClkGating;
}
inline bool FtraceEvent::_internal_has_ufshcd_clk_gating() const {
  return event_case() == kUfshcdClkGating;
}
inline void FtraceEvent::set_has_ufshcd_clk_gating() {
  _impl_._oneof_case_[0] = kUfshcdClkGating;
}
inline ::perfetto::protos::UfshcdClkGatingFtraceEvent* FtraceEvent::release_ufshcd_clk_gating() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.ufshcd_clk_gating)
  if (event_case() == kUfshcdClkGating) {
    clear_has_event();
    ::perfetto::protos::UfshcdClkGatingFtraceEvent* temp = _impl_.event_.ufshcd_clk_gating_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ufshcd_clk_gating_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::UfshcdClkGatingFtraceEvent& FtraceEvent::_internal_ufshcd_clk_gating() const {
  return event_case() == kUfshcdClkGating
      ? *_impl_.event_.ufshcd_clk_gating_
      : reinterpret_cast<::perfetto::protos::UfshcdClkGatingFtraceEvent&>(::perfetto::protos::_UfshcdClkGatingFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::UfshcdClkGatingFtraceEvent& FtraceEvent::ufshcd_clk_gating() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.ufshcd_clk_gating)
  return _internal_ufshcd_clk_gating();
}
inline ::perfetto::protos::UfshcdClkGatingFtraceEvent* FtraceEvent::unsafe_arena_release_ufshcd_clk_gating() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.ufshcd_clk_gating)
  if (event_case() == kUfshcdClkGating) {
    clear_has_event();
    ::perfetto::protos::UfshcdClkGatingFtraceEvent* temp = _impl_.event_.ufshcd_clk_gating_;
    _impl_.event_.ufshcd_clk_gating_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_ufshcd_clk_gating(::perfetto::protos::UfshcdClkGatingFtraceEvent* ufshcd_clk_gating) {
  clear_event();
  if (ufshcd_clk_gating) {
    set_has_ufshcd_clk_gating();
    _impl_.event_.ufshcd_clk_gating_ = ufshcd_clk_gating;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.ufshcd_clk_gating)
}
inline ::perfetto::protos::UfshcdClkGatingFtraceEvent* FtraceEvent::_internal_mutable_ufshcd_clk_gating() {
  if (event_case() != kUfshcdClkGating) {
    clear_event();
    set_has_ufshcd_clk_gating();
    _impl_.event_.ufshcd_clk_gating_ = CreateMaybeMessage< ::perfetto::protos::UfshcdClkGatingFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.ufshcd_clk_gating_;
}
inline ::perfetto::protos::UfshcdClkGatingFtraceEvent* FtraceEvent::mutable_ufshcd_clk_gating() {
  ::perfetto::protos::UfshcdClkGatingFtraceEvent* _msg = _internal_mutable_ufshcd_clk_gating();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.ufshcd_clk_gating)
  return _msg;
}

// .perfetto.protos.ConsoleFtraceEvent console = 408;
inline bool FtraceEvent::has_console() const {
  return event_case() == kConsole;
}
inline bool FtraceEvent::_internal_has_console() const {
  return event_case() == kConsole;
}
inline void FtraceEvent::set_has_console() {
  _impl_._oneof_case_[0] = kConsole;
}
inline ::perfetto::protos::ConsoleFtraceEvent* FtraceEvent::release_console() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.console)
  if (event_case() == kConsole) {
    clear_has_event();
    ::perfetto::protos::ConsoleFtraceEvent* temp = _impl_.event_.console_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.console_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::ConsoleFtraceEvent& FtraceEvent::_internal_console() const {
  return event_case() == kConsole
      ? *_impl_.event_.console_
      : reinterpret_cast<::perfetto::protos::ConsoleFtraceEvent&>(::perfetto::protos::_ConsoleFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::ConsoleFtraceEvent& FtraceEvent::console() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.console)
  return _internal_console();
}
inline ::perfetto::protos::ConsoleFtraceEvent* FtraceEvent::unsafe_arena_release_console() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.console)
  if (event_case() == kConsole) {
    clear_has_event();
    ::perfetto::protos::ConsoleFtraceEvent* temp = _impl_.event_.console_;
    _impl_.event_.console_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_console(::perfetto::protos::ConsoleFtraceEvent* console) {
  clear_event();
  if (console) {
    set_has_console();
    _impl_.event_.console_ = console;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.console)
}
inline ::perfetto::protos::ConsoleFtraceEvent* FtraceEvent::_internal_mutable_console() {
  if (event_case() != kConsole) {
    clear_event();
    set_has_console();
    _impl_.event_.console_ = CreateMaybeMessage< ::perfetto::protos::ConsoleFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.console_;
}
inline ::perfetto::protos::ConsoleFtraceEvent* FtraceEvent::mutable_console() {
  ::perfetto::protos::ConsoleFtraceEvent* _msg = _internal_mutable_console();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.console)
  return _msg;
}

// .perfetto.protos.DrmVblankEventFtraceEvent drm_vblank_event = 409;
inline bool FtraceEvent::has_drm_vblank_event() const {
  return event_case() == kDrmVblankEvent;
}
inline bool FtraceEvent::_internal_has_drm_vblank_event() const {
  return event_case() == kDrmVblankEvent;
}
inline void FtraceEvent::set_has_drm_vblank_event() {
  _impl_._oneof_case_[0] = kDrmVblankEvent;
}
inline ::perfetto::protos::DrmVblankEventFtraceEvent* FtraceEvent::release_drm_vblank_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.drm_vblank_event)
  if (event_case() == kDrmVblankEvent) {
    clear_has_event();
    ::perfetto::protos::DrmVblankEventFtraceEvent* temp = _impl_.event_.drm_vblank_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drm_vblank_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DrmVblankEventFtraceEvent& FtraceEvent::_internal_drm_vblank_event() const {
  return event_case() == kDrmVblankEvent
      ? *_impl_.event_.drm_vblank_event_
      : reinterpret_cast<::perfetto::protos::DrmVblankEventFtraceEvent&>(::perfetto::protos::_DrmVblankEventFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DrmVblankEventFtraceEvent& FtraceEvent::drm_vblank_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.drm_vblank_event)
  return _internal_drm_vblank_event();
}
inline ::perfetto::protos::DrmVblankEventFtraceEvent* FtraceEvent::unsafe_arena_release_drm_vblank_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.drm_vblank_event)
  if (event_case() == kDrmVblankEvent) {
    clear_has_event();
    ::perfetto::protos::DrmVblankEventFtraceEvent* temp = _impl_.event_.drm_vblank_event_;
    _impl_.event_.drm_vblank_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_drm_vblank_event(::perfetto::protos::DrmVblankEventFtraceEvent* drm_vblank_event) {
  clear_event();
  if (drm_vblank_event) {
    set_has_drm_vblank_event();
    _impl_.event_.drm_vblank_event_ = drm_vblank_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.drm_vblank_event)
}
inline ::perfetto::protos::DrmVblankEventFtraceEvent* FtraceEvent::_internal_mutable_drm_vblank_event() {
  if (event_case() != kDrmVblankEvent) {
    clear_event();
    set_has_drm_vblank_event();
    _impl_.event_.drm_vblank_event_ = CreateMaybeMessage< ::perfetto::protos::DrmVblankEventFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.drm_vblank_event_;
}
inline ::perfetto::protos::DrmVblankEventFtraceEvent* FtraceEvent::mutable_drm_vblank_event() {
  ::perfetto::protos::DrmVblankEventFtraceEvent* _msg = _internal_mutable_drm_vblank_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.drm_vblank_event)
  return _msg;
}

// .perfetto.protos.DrmVblankEventDeliveredFtraceEvent drm_vblank_event_delivered = 410;
inline bool FtraceEvent::has_drm_vblank_event_delivered() const {
  return event_case() == kDrmVblankEventDelivered;
}
inline bool FtraceEvent::_internal_has_drm_vblank_event_delivered() const {
  return event_case() == kDrmVblankEventDelivered;
}
inline void FtraceEvent::set_has_drm_vblank_event_delivered() {
  _impl_._oneof_case_[0] = kDrmVblankEventDelivered;
}
inline ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* FtraceEvent::release_drm_vblank_event_delivered() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.drm_vblank_event_delivered)
  if (event_case() == kDrmVblankEventDelivered) {
    clear_has_event();
    ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* temp = _impl_.event_.drm_vblank_event_delivered_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drm_vblank_event_delivered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent& FtraceEvent::_internal_drm_vblank_event_delivered() const {
  return event_case() == kDrmVblankEventDelivered
      ? *_impl_.event_.drm_vblank_event_delivered_
      : reinterpret_cast<::perfetto::protos::DrmVblankEventDeliveredFtraceEvent&>(::perfetto::protos::_DrmVblankEventDeliveredFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent& FtraceEvent::drm_vblank_event_delivered() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.drm_vblank_event_delivered)
  return _internal_drm_vblank_event_delivered();
}
inline ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* FtraceEvent::unsafe_arena_release_drm_vblank_event_delivered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.drm_vblank_event_delivered)
  if (event_case() == kDrmVblankEventDelivered) {
    clear_has_event();
    ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* temp = _impl_.event_.drm_vblank_event_delivered_;
    _impl_.event_.drm_vblank_event_delivered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_drm_vblank_event_delivered(::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* drm_vblank_event_delivered) {
  clear_event();
  if (drm_vblank_event_delivered) {
    set_has_drm_vblank_event_delivered();
    _impl_.event_.drm_vblank_event_delivered_ = drm_vblank_event_delivered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.drm_vblank_event_delivered)
}
inline ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* FtraceEvent::_internal_mutable_drm_vblank_event_delivered() {
  if (event_case() != kDrmVblankEventDelivered) {
    clear_event();
    set_has_drm_vblank_event_delivered();
    _impl_.event_.drm_vblank_event_delivered_ = CreateMaybeMessage< ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.drm_vblank_event_delivered_;
}
inline ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* FtraceEvent::mutable_drm_vblank_event_delivered() {
  ::perfetto::protos::DrmVblankEventDeliveredFtraceEvent* _msg = _internal_mutable_drm_vblank_event_delivered();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.drm_vblank_event_delivered)
  return _msg;
}

// .perfetto.protos.DrmSchedJobFtraceEvent drm_sched_job = 411;
inline bool FtraceEvent::has_drm_sched_job() const {
  return event_case() == kDrmSchedJob;
}
inline bool FtraceEvent::_internal_has_drm_sched_job() const {
  return event_case() == kDrmSchedJob;
}
inline void FtraceEvent::set_has_drm_sched_job() {
  _impl_._oneof_case_[0] = kDrmSchedJob;
}
inline ::perfetto::protos::DrmSchedJobFtraceEvent* FtraceEvent::release_drm_sched_job() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.drm_sched_job)
  if (event_case() == kDrmSchedJob) {
    clear_has_event();
    ::perfetto::protos::DrmSchedJobFtraceEvent* temp = _impl_.event_.drm_sched_job_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drm_sched_job_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DrmSchedJobFtraceEvent& FtraceEvent::_internal_drm_sched_job() const {
  return event_case() == kDrmSchedJob
      ? *_impl_.event_.drm_sched_job_
      : reinterpret_cast<::perfetto::protos::DrmSchedJobFtraceEvent&>(::perfetto::protos::_DrmSchedJobFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DrmSchedJobFtraceEvent& FtraceEvent::drm_sched_job() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.drm_sched_job)
  return _internal_drm_sched_job();
}
inline ::perfetto::protos::DrmSchedJobFtraceEvent* FtraceEvent::unsafe_arena_release_drm_sched_job() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.drm_sched_job)
  if (event_case() == kDrmSchedJob) {
    clear_has_event();
    ::perfetto::protos::DrmSchedJobFtraceEvent* temp = _impl_.event_.drm_sched_job_;
    _impl_.event_.drm_sched_job_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_drm_sched_job(::perfetto::protos::DrmSchedJobFtraceEvent* drm_sched_job) {
  clear_event();
  if (drm_sched_job) {
    set_has_drm_sched_job();
    _impl_.event_.drm_sched_job_ = drm_sched_job;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.drm_sched_job)
}
inline ::perfetto::protos::DrmSchedJobFtraceEvent* FtraceEvent::_internal_mutable_drm_sched_job() {
  if (event_case() != kDrmSchedJob) {
    clear_event();
    set_has_drm_sched_job();
    _impl_.event_.drm_sched_job_ = CreateMaybeMessage< ::perfetto::protos::DrmSchedJobFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.drm_sched_job_;
}
inline ::perfetto::protos::DrmSchedJobFtraceEvent* FtraceEvent::mutable_drm_sched_job() {
  ::perfetto::protos::DrmSchedJobFtraceEvent* _msg = _internal_mutable_drm_sched_job();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.drm_sched_job)
  return _msg;
}

// .perfetto.protos.DrmRunJobFtraceEvent drm_run_job = 412;
inline bool FtraceEvent::has_drm_run_job() const {
  return event_case() == kDrmRunJob;
}
inline bool FtraceEvent::_internal_has_drm_run_job() const {
  return event_case() == kDrmRunJob;
}
inline void FtraceEvent::set_has_drm_run_job() {
  _impl_._oneof_case_[0] = kDrmRunJob;
}
inline ::perfetto::protos::DrmRunJobFtraceEvent* FtraceEvent::release_drm_run_job() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.drm_run_job)
  if (event_case() == kDrmRunJob) {
    clear_has_event();
    ::perfetto::protos::DrmRunJobFtraceEvent* temp = _impl_.event_.drm_run_job_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drm_run_job_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DrmRunJobFtraceEvent& FtraceEvent::_internal_drm_run_job() const {
  return event_case() == kDrmRunJob
      ? *_impl_.event_.drm_run_job_
      : reinterpret_cast<::perfetto::protos::DrmRunJobFtraceEvent&>(::perfetto::protos::_DrmRunJobFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DrmRunJobFtraceEvent& FtraceEvent::drm_run_job() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.drm_run_job)
  return _internal_drm_run_job();
}
inline ::perfetto::protos::DrmRunJobFtraceEvent* FtraceEvent::unsafe_arena_release_drm_run_job() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.drm_run_job)
  if (event_case() == kDrmRunJob) {
    clear_has_event();
    ::perfetto::protos::DrmRunJobFtraceEvent* temp = _impl_.event_.drm_run_job_;
    _impl_.event_.drm_run_job_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_drm_run_job(::perfetto::protos::DrmRunJobFtraceEvent* drm_run_job) {
  clear_event();
  if (drm_run_job) {
    set_has_drm_run_job();
    _impl_.event_.drm_run_job_ = drm_run_job;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.drm_run_job)
}
inline ::perfetto::protos::DrmRunJobFtraceEvent* FtraceEvent::_internal_mutable_drm_run_job() {
  if (event_case() != kDrmRunJob) {
    clear_event();
    set_has_drm_run_job();
    _impl_.event_.drm_run_job_ = CreateMaybeMessage< ::perfetto::protos::DrmRunJobFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.drm_run_job_;
}
inline ::perfetto::protos::DrmRunJobFtraceEvent* FtraceEvent::mutable_drm_run_job() {
  ::perfetto::protos::DrmRunJobFtraceEvent* _msg = _internal_mutable_drm_run_job();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.drm_run_job)
  return _msg;
}

// .perfetto.protos.DrmSchedProcessJobFtraceEvent drm_sched_process_job = 413;
inline bool FtraceEvent::has_drm_sched_process_job() const {
  return event_case() == kDrmSchedProcessJob;
}
inline bool FtraceEvent::_internal_has_drm_sched_process_job() const {
  return event_case() == kDrmSchedProcessJob;
}
inline void FtraceEvent::set_has_drm_sched_process_job() {
  _impl_._oneof_case_[0] = kDrmSchedProcessJob;
}
inline ::perfetto::protos::DrmSchedProcessJobFtraceEvent* FtraceEvent::release_drm_sched_process_job() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.drm_sched_process_job)
  if (event_case() == kDrmSchedProcessJob) {
    clear_has_event();
    ::perfetto::protos::DrmSchedProcessJobFtraceEvent* temp = _impl_.event_.drm_sched_process_job_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drm_sched_process_job_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DrmSchedProcessJobFtraceEvent& FtraceEvent::_internal_drm_sched_process_job() const {
  return event_case() == kDrmSchedProcessJob
      ? *_impl_.event_.drm_sched_process_job_
      : reinterpret_cast<::perfetto::protos::DrmSchedProcessJobFtraceEvent&>(::perfetto::protos::_DrmSchedProcessJobFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DrmSchedProcessJobFtraceEvent& FtraceEvent::drm_sched_process_job() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.drm_sched_process_job)
  return _internal_drm_sched_process_job();
}
inline ::perfetto::protos::DrmSchedProcessJobFtraceEvent* FtraceEvent::unsafe_arena_release_drm_sched_process_job() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.drm_sched_process_job)
  if (event_case() == kDrmSchedProcessJob) {
    clear_has_event();
    ::perfetto::protos::DrmSchedProcessJobFtraceEvent* temp = _impl_.event_.drm_sched_process_job_;
    _impl_.event_.drm_sched_process_job_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_drm_sched_process_job(::perfetto::protos::DrmSchedProcessJobFtraceEvent* drm_sched_process_job) {
  clear_event();
  if (drm_sched_process_job) {
    set_has_drm_sched_process_job();
    _impl_.event_.drm_sched_process_job_ = drm_sched_process_job;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.drm_sched_process_job)
}
inline ::perfetto::protos::DrmSchedProcessJobFtraceEvent* FtraceEvent::_internal_mutable_drm_sched_process_job() {
  if (event_case() != kDrmSchedProcessJob) {
    clear_event();
    set_has_drm_sched_process_job();
    _impl_.event_.drm_sched_process_job_ = CreateMaybeMessage< ::perfetto::protos::DrmSchedProcessJobFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.drm_sched_process_job_;
}
inline ::perfetto::protos::DrmSchedProcessJobFtraceEvent* FtraceEvent::mutable_drm_sched_process_job() {
  ::perfetto::protos::DrmSchedProcessJobFtraceEvent* _msg = _internal_mutable_drm_sched_process_job();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.drm_sched_process_job)
  return _msg;
}

// .perfetto.protos.DmaFenceInitFtraceEvent dma_fence_init = 414;
inline bool FtraceEvent::has_dma_fence_init() const {
  return event_case() == kDmaFenceInit;
}
inline bool FtraceEvent::_internal_has_dma_fence_init() const {
  return event_case() == kDmaFenceInit;
}
inline void FtraceEvent::set_has_dma_fence_init() {
  _impl_._oneof_case_[0] = kDmaFenceInit;
}
inline ::perfetto::protos::DmaFenceInitFtraceEvent* FtraceEvent::release_dma_fence_init() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_fence_init)
  if (event_case() == kDmaFenceInit) {
    clear_has_event();
    ::perfetto::protos::DmaFenceInitFtraceEvent* temp = _impl_.event_.dma_fence_init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_fence_init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaFenceInitFtraceEvent& FtraceEvent::_internal_dma_fence_init() const {
  return event_case() == kDmaFenceInit
      ? *_impl_.event_.dma_fence_init_
      : reinterpret_cast<::perfetto::protos::DmaFenceInitFtraceEvent&>(::perfetto::protos::_DmaFenceInitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaFenceInitFtraceEvent& FtraceEvent::dma_fence_init() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_fence_init)
  return _internal_dma_fence_init();
}
inline ::perfetto::protos::DmaFenceInitFtraceEvent* FtraceEvent::unsafe_arena_release_dma_fence_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_fence_init)
  if (event_case() == kDmaFenceInit) {
    clear_has_event();
    ::perfetto::protos::DmaFenceInitFtraceEvent* temp = _impl_.event_.dma_fence_init_;
    _impl_.event_.dma_fence_init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_fence_init(::perfetto::protos::DmaFenceInitFtraceEvent* dma_fence_init) {
  clear_event();
  if (dma_fence_init) {
    set_has_dma_fence_init();
    _impl_.event_.dma_fence_init_ = dma_fence_init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_fence_init)
}
inline ::perfetto::protos::DmaFenceInitFtraceEvent* FtraceEvent::_internal_mutable_dma_fence_init() {
  if (event_case() != kDmaFenceInit) {
    clear_event();
    set_has_dma_fence_init();
    _impl_.event_.dma_fence_init_ = CreateMaybeMessage< ::perfetto::protos::DmaFenceInitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_fence_init_;
}
inline ::perfetto::protos::DmaFenceInitFtraceEvent* FtraceEvent::mutable_dma_fence_init() {
  ::perfetto::protos::DmaFenceInitFtraceEvent* _msg = _internal_mutable_dma_fence_init();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_fence_init)
  return _msg;
}

// .perfetto.protos.DmaFenceEmitFtraceEvent dma_fence_emit = 415;
inline bool FtraceEvent::has_dma_fence_emit() const {
  return event_case() == kDmaFenceEmit;
}
inline bool FtraceEvent::_internal_has_dma_fence_emit() const {
  return event_case() == kDmaFenceEmit;
}
inline void FtraceEvent::set_has_dma_fence_emit() {
  _impl_._oneof_case_[0] = kDmaFenceEmit;
}
inline ::perfetto::protos::DmaFenceEmitFtraceEvent* FtraceEvent::release_dma_fence_emit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_fence_emit)
  if (event_case() == kDmaFenceEmit) {
    clear_has_event();
    ::perfetto::protos::DmaFenceEmitFtraceEvent* temp = _impl_.event_.dma_fence_emit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_fence_emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaFenceEmitFtraceEvent& FtraceEvent::_internal_dma_fence_emit() const {
  return event_case() == kDmaFenceEmit
      ? *_impl_.event_.dma_fence_emit_
      : reinterpret_cast<::perfetto::protos::DmaFenceEmitFtraceEvent&>(::perfetto::protos::_DmaFenceEmitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaFenceEmitFtraceEvent& FtraceEvent::dma_fence_emit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_fence_emit)
  return _internal_dma_fence_emit();
}
inline ::perfetto::protos::DmaFenceEmitFtraceEvent* FtraceEvent::unsafe_arena_release_dma_fence_emit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_fence_emit)
  if (event_case() == kDmaFenceEmit) {
    clear_has_event();
    ::perfetto::protos::DmaFenceEmitFtraceEvent* temp = _impl_.event_.dma_fence_emit_;
    _impl_.event_.dma_fence_emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_fence_emit(::perfetto::protos::DmaFenceEmitFtraceEvent* dma_fence_emit) {
  clear_event();
  if (dma_fence_emit) {
    set_has_dma_fence_emit();
    _impl_.event_.dma_fence_emit_ = dma_fence_emit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_fence_emit)
}
inline ::perfetto::protos::DmaFenceEmitFtraceEvent* FtraceEvent::_internal_mutable_dma_fence_emit() {
  if (event_case() != kDmaFenceEmit) {
    clear_event();
    set_has_dma_fence_emit();
    _impl_.event_.dma_fence_emit_ = CreateMaybeMessage< ::perfetto::protos::DmaFenceEmitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_fence_emit_;
}
inline ::perfetto::protos::DmaFenceEmitFtraceEvent* FtraceEvent::mutable_dma_fence_emit() {
  ::perfetto::protos::DmaFenceEmitFtraceEvent* _msg = _internal_mutable_dma_fence_emit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_fence_emit)
  return _msg;
}

// .perfetto.protos.DmaFenceSignaledFtraceEvent dma_fence_signaled = 416;
inline bool FtraceEvent::has_dma_fence_signaled() const {
  return event_case() == kDmaFenceSignaled;
}
inline bool FtraceEvent::_internal_has_dma_fence_signaled() const {
  return event_case() == kDmaFenceSignaled;
}
inline void FtraceEvent::set_has_dma_fence_signaled() {
  _impl_._oneof_case_[0] = kDmaFenceSignaled;
}
inline ::perfetto::protos::DmaFenceSignaledFtraceEvent* FtraceEvent::release_dma_fence_signaled() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_fence_signaled)
  if (event_case() == kDmaFenceSignaled) {
    clear_has_event();
    ::perfetto::protos::DmaFenceSignaledFtraceEvent* temp = _impl_.event_.dma_fence_signaled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_fence_signaled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaFenceSignaledFtraceEvent& FtraceEvent::_internal_dma_fence_signaled() const {
  return event_case() == kDmaFenceSignaled
      ? *_impl_.event_.dma_fence_signaled_
      : reinterpret_cast<::perfetto::protos::DmaFenceSignaledFtraceEvent&>(::perfetto::protos::_DmaFenceSignaledFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaFenceSignaledFtraceEvent& FtraceEvent::dma_fence_signaled() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_fence_signaled)
  return _internal_dma_fence_signaled();
}
inline ::perfetto::protos::DmaFenceSignaledFtraceEvent* FtraceEvent::unsafe_arena_release_dma_fence_signaled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_fence_signaled)
  if (event_case() == kDmaFenceSignaled) {
    clear_has_event();
    ::perfetto::protos::DmaFenceSignaledFtraceEvent* temp = _impl_.event_.dma_fence_signaled_;
    _impl_.event_.dma_fence_signaled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_fence_signaled(::perfetto::protos::DmaFenceSignaledFtraceEvent* dma_fence_signaled) {
  clear_event();
  if (dma_fence_signaled) {
    set_has_dma_fence_signaled();
    _impl_.event_.dma_fence_signaled_ = dma_fence_signaled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_fence_signaled)
}
inline ::perfetto::protos::DmaFenceSignaledFtraceEvent* FtraceEvent::_internal_mutable_dma_fence_signaled() {
  if (event_case() != kDmaFenceSignaled) {
    clear_event();
    set_has_dma_fence_signaled();
    _impl_.event_.dma_fence_signaled_ = CreateMaybeMessage< ::perfetto::protos::DmaFenceSignaledFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_fence_signaled_;
}
inline ::perfetto::protos::DmaFenceSignaledFtraceEvent* FtraceEvent::mutable_dma_fence_signaled() {
  ::perfetto::protos::DmaFenceSignaledFtraceEvent* _msg = _internal_mutable_dma_fence_signaled();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_fence_signaled)
  return _msg;
}

// .perfetto.protos.DmaFenceWaitStartFtraceEvent dma_fence_wait_start = 417;
inline bool FtraceEvent::has_dma_fence_wait_start() const {
  return event_case() == kDmaFenceWaitStart;
}
inline bool FtraceEvent::_internal_has_dma_fence_wait_start() const {
  return event_case() == kDmaFenceWaitStart;
}
inline void FtraceEvent::set_has_dma_fence_wait_start() {
  _impl_._oneof_case_[0] = kDmaFenceWaitStart;
}
inline ::perfetto::protos::DmaFenceWaitStartFtraceEvent* FtraceEvent::release_dma_fence_wait_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_fence_wait_start)
  if (event_case() == kDmaFenceWaitStart) {
    clear_has_event();
    ::perfetto::protos::DmaFenceWaitStartFtraceEvent* temp = _impl_.event_.dma_fence_wait_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_fence_wait_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaFenceWaitStartFtraceEvent& FtraceEvent::_internal_dma_fence_wait_start() const {
  return event_case() == kDmaFenceWaitStart
      ? *_impl_.event_.dma_fence_wait_start_
      : reinterpret_cast<::perfetto::protos::DmaFenceWaitStartFtraceEvent&>(::perfetto::protos::_DmaFenceWaitStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaFenceWaitStartFtraceEvent& FtraceEvent::dma_fence_wait_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_fence_wait_start)
  return _internal_dma_fence_wait_start();
}
inline ::perfetto::protos::DmaFenceWaitStartFtraceEvent* FtraceEvent::unsafe_arena_release_dma_fence_wait_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_fence_wait_start)
  if (event_case() == kDmaFenceWaitStart) {
    clear_has_event();
    ::perfetto::protos::DmaFenceWaitStartFtraceEvent* temp = _impl_.event_.dma_fence_wait_start_;
    _impl_.event_.dma_fence_wait_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_fence_wait_start(::perfetto::protos::DmaFenceWaitStartFtraceEvent* dma_fence_wait_start) {
  clear_event();
  if (dma_fence_wait_start) {
    set_has_dma_fence_wait_start();
    _impl_.event_.dma_fence_wait_start_ = dma_fence_wait_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_fence_wait_start)
}
inline ::perfetto::protos::DmaFenceWaitStartFtraceEvent* FtraceEvent::_internal_mutable_dma_fence_wait_start() {
  if (event_case() != kDmaFenceWaitStart) {
    clear_event();
    set_has_dma_fence_wait_start();
    _impl_.event_.dma_fence_wait_start_ = CreateMaybeMessage< ::perfetto::protos::DmaFenceWaitStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_fence_wait_start_;
}
inline ::perfetto::protos::DmaFenceWaitStartFtraceEvent* FtraceEvent::mutable_dma_fence_wait_start() {
  ::perfetto::protos::DmaFenceWaitStartFtraceEvent* _msg = _internal_mutable_dma_fence_wait_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_fence_wait_start)
  return _msg;
}

// .perfetto.protos.DmaFenceWaitEndFtraceEvent dma_fence_wait_end = 418;
inline bool FtraceEvent::has_dma_fence_wait_end() const {
  return event_case() == kDmaFenceWaitEnd;
}
inline bool FtraceEvent::_internal_has_dma_fence_wait_end() const {
  return event_case() == kDmaFenceWaitEnd;
}
inline void FtraceEvent::set_has_dma_fence_wait_end() {
  _impl_._oneof_case_[0] = kDmaFenceWaitEnd;
}
inline ::perfetto::protos::DmaFenceWaitEndFtraceEvent* FtraceEvent::release_dma_fence_wait_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dma_fence_wait_end)
  if (event_case() == kDmaFenceWaitEnd) {
    clear_has_event();
    ::perfetto::protos::DmaFenceWaitEndFtraceEvent* temp = _impl_.event_.dma_fence_wait_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dma_fence_wait_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DmaFenceWaitEndFtraceEvent& FtraceEvent::_internal_dma_fence_wait_end() const {
  return event_case() == kDmaFenceWaitEnd
      ? *_impl_.event_.dma_fence_wait_end_
      : reinterpret_cast<::perfetto::protos::DmaFenceWaitEndFtraceEvent&>(::perfetto::protos::_DmaFenceWaitEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DmaFenceWaitEndFtraceEvent& FtraceEvent::dma_fence_wait_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dma_fence_wait_end)
  return _internal_dma_fence_wait_end();
}
inline ::perfetto::protos::DmaFenceWaitEndFtraceEvent* FtraceEvent::unsafe_arena_release_dma_fence_wait_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dma_fence_wait_end)
  if (event_case() == kDmaFenceWaitEnd) {
    clear_has_event();
    ::perfetto::protos::DmaFenceWaitEndFtraceEvent* temp = _impl_.event_.dma_fence_wait_end_;
    _impl_.event_.dma_fence_wait_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dma_fence_wait_end(::perfetto::protos::DmaFenceWaitEndFtraceEvent* dma_fence_wait_end) {
  clear_event();
  if (dma_fence_wait_end) {
    set_has_dma_fence_wait_end();
    _impl_.event_.dma_fence_wait_end_ = dma_fence_wait_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dma_fence_wait_end)
}
inline ::perfetto::protos::DmaFenceWaitEndFtraceEvent* FtraceEvent::_internal_mutable_dma_fence_wait_end() {
  if (event_case() != kDmaFenceWaitEnd) {
    clear_event();
    set_has_dma_fence_wait_end();
    _impl_.event_.dma_fence_wait_end_ = CreateMaybeMessage< ::perfetto::protos::DmaFenceWaitEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dma_fence_wait_end_;
}
inline ::perfetto::protos::DmaFenceWaitEndFtraceEvent* FtraceEvent::mutable_dma_fence_wait_end() {
  ::perfetto::protos::DmaFenceWaitEndFtraceEvent* _msg = _internal_mutable_dma_fence_wait_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dma_fence_wait_end)
  return _msg;
}

// .perfetto.protos.F2fsIostatFtraceEvent f2fs_iostat = 419;
inline bool FtraceEvent::has_f2fs_iostat() const {
  return event_case() == kF2FsIostat;
}
inline bool FtraceEvent::_internal_has_f2fs_iostat() const {
  return event_case() == kF2FsIostat;
}
inline void FtraceEvent::set_has_f2fs_iostat() {
  _impl_._oneof_case_[0] = kF2FsIostat;
}
inline ::perfetto::protos::F2fsIostatFtraceEvent* FtraceEvent::release_f2fs_iostat() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_iostat)
  if (event_case() == kF2FsIostat) {
    clear_has_event();
    ::perfetto::protos::F2fsIostatFtraceEvent* temp = _impl_.event_.f2fs_iostat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_iostat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsIostatFtraceEvent& FtraceEvent::_internal_f2fs_iostat() const {
  return event_case() == kF2FsIostat
      ? *_impl_.event_.f2fs_iostat_
      : reinterpret_cast<::perfetto::protos::F2fsIostatFtraceEvent&>(::perfetto::protos::_F2fsIostatFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsIostatFtraceEvent& FtraceEvent::f2fs_iostat() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_iostat)
  return _internal_f2fs_iostat();
}
inline ::perfetto::protos::F2fsIostatFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_iostat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_iostat)
  if (event_case() == kF2FsIostat) {
    clear_has_event();
    ::perfetto::protos::F2fsIostatFtraceEvent* temp = _impl_.event_.f2fs_iostat_;
    _impl_.event_.f2fs_iostat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_iostat(::perfetto::protos::F2fsIostatFtraceEvent* f2fs_iostat) {
  clear_event();
  if (f2fs_iostat) {
    set_has_f2fs_iostat();
    _impl_.event_.f2fs_iostat_ = f2fs_iostat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_iostat)
}
inline ::perfetto::protos::F2fsIostatFtraceEvent* FtraceEvent::_internal_mutable_f2fs_iostat() {
  if (event_case() != kF2FsIostat) {
    clear_event();
    set_has_f2fs_iostat();
    _impl_.event_.f2fs_iostat_ = CreateMaybeMessage< ::perfetto::protos::F2fsIostatFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_iostat_;
}
inline ::perfetto::protos::F2fsIostatFtraceEvent* FtraceEvent::mutable_f2fs_iostat() {
  ::perfetto::protos::F2fsIostatFtraceEvent* _msg = _internal_mutable_f2fs_iostat();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_iostat)
  return _msg;
}

// .perfetto.protos.F2fsIostatLatencyFtraceEvent f2fs_iostat_latency = 420;
inline bool FtraceEvent::has_f2fs_iostat_latency() const {
  return event_case() == kF2FsIostatLatency;
}
inline bool FtraceEvent::_internal_has_f2fs_iostat_latency() const {
  return event_case() == kF2FsIostatLatency;
}
inline void FtraceEvent::set_has_f2fs_iostat_latency() {
  _impl_._oneof_case_[0] = kF2FsIostatLatency;
}
inline ::perfetto::protos::F2fsIostatLatencyFtraceEvent* FtraceEvent::release_f2fs_iostat_latency() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.f2fs_iostat_latency)
  if (event_case() == kF2FsIostatLatency) {
    clear_has_event();
    ::perfetto::protos::F2fsIostatLatencyFtraceEvent* temp = _impl_.event_.f2fs_iostat_latency_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.f2fs_iostat_latency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::F2fsIostatLatencyFtraceEvent& FtraceEvent::_internal_f2fs_iostat_latency() const {
  return event_case() == kF2FsIostatLatency
      ? *_impl_.event_.f2fs_iostat_latency_
      : reinterpret_cast<::perfetto::protos::F2fsIostatLatencyFtraceEvent&>(::perfetto::protos::_F2fsIostatLatencyFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::F2fsIostatLatencyFtraceEvent& FtraceEvent::f2fs_iostat_latency() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.f2fs_iostat_latency)
  return _internal_f2fs_iostat_latency();
}
inline ::perfetto::protos::F2fsIostatLatencyFtraceEvent* FtraceEvent::unsafe_arena_release_f2fs_iostat_latency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.f2fs_iostat_latency)
  if (event_case() == kF2FsIostatLatency) {
    clear_has_event();
    ::perfetto::protos::F2fsIostatLatencyFtraceEvent* temp = _impl_.event_.f2fs_iostat_latency_;
    _impl_.event_.f2fs_iostat_latency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_f2fs_iostat_latency(::perfetto::protos::F2fsIostatLatencyFtraceEvent* f2fs_iostat_latency) {
  clear_event();
  if (f2fs_iostat_latency) {
    set_has_f2fs_iostat_latency();
    _impl_.event_.f2fs_iostat_latency_ = f2fs_iostat_latency;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.f2fs_iostat_latency)
}
inline ::perfetto::protos::F2fsIostatLatencyFtraceEvent* FtraceEvent::_internal_mutable_f2fs_iostat_latency() {
  if (event_case() != kF2FsIostatLatency) {
    clear_event();
    set_has_f2fs_iostat_latency();
    _impl_.event_.f2fs_iostat_latency_ = CreateMaybeMessage< ::perfetto::protos::F2fsIostatLatencyFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.f2fs_iostat_latency_;
}
inline ::perfetto::protos::F2fsIostatLatencyFtraceEvent* FtraceEvent::mutable_f2fs_iostat_latency() {
  ::perfetto::protos::F2fsIostatLatencyFtraceEvent* _msg = _internal_mutable_f2fs_iostat_latency();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.f2fs_iostat_latency)
  return _msg;
}

// .perfetto.protos.SchedCpuUtilCfsFtraceEvent sched_cpu_util_cfs = 421;
inline bool FtraceEvent::has_sched_cpu_util_cfs() const {
  return event_case() == kSchedCpuUtilCfs;
}
inline bool FtraceEvent::_internal_has_sched_cpu_util_cfs() const {
  return event_case() == kSchedCpuUtilCfs;
}
inline void FtraceEvent::set_has_sched_cpu_util_cfs() {
  _impl_._oneof_case_[0] = kSchedCpuUtilCfs;
}
inline ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* FtraceEvent::release_sched_cpu_util_cfs() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.sched_cpu_util_cfs)
  if (event_case() == kSchedCpuUtilCfs) {
    clear_has_event();
    ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* temp = _impl_.event_.sched_cpu_util_cfs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.sched_cpu_util_cfs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SchedCpuUtilCfsFtraceEvent& FtraceEvent::_internal_sched_cpu_util_cfs() const {
  return event_case() == kSchedCpuUtilCfs
      ? *_impl_.event_.sched_cpu_util_cfs_
      : reinterpret_cast<::perfetto::protos::SchedCpuUtilCfsFtraceEvent&>(::perfetto::protos::_SchedCpuUtilCfsFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SchedCpuUtilCfsFtraceEvent& FtraceEvent::sched_cpu_util_cfs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.sched_cpu_util_cfs)
  return _internal_sched_cpu_util_cfs();
}
inline ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* FtraceEvent::unsafe_arena_release_sched_cpu_util_cfs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.sched_cpu_util_cfs)
  if (event_case() == kSchedCpuUtilCfs) {
    clear_has_event();
    ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* temp = _impl_.event_.sched_cpu_util_cfs_;
    _impl_.event_.sched_cpu_util_cfs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_sched_cpu_util_cfs(::perfetto::protos::SchedCpuUtilCfsFtraceEvent* sched_cpu_util_cfs) {
  clear_event();
  if (sched_cpu_util_cfs) {
    set_has_sched_cpu_util_cfs();
    _impl_.event_.sched_cpu_util_cfs_ = sched_cpu_util_cfs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.sched_cpu_util_cfs)
}
inline ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* FtraceEvent::_internal_mutable_sched_cpu_util_cfs() {
  if (event_case() != kSchedCpuUtilCfs) {
    clear_event();
    set_has_sched_cpu_util_cfs();
    _impl_.event_.sched_cpu_util_cfs_ = CreateMaybeMessage< ::perfetto::protos::SchedCpuUtilCfsFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.sched_cpu_util_cfs_;
}
inline ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* FtraceEvent::mutable_sched_cpu_util_cfs() {
  ::perfetto::protos::SchedCpuUtilCfsFtraceEvent* _msg = _internal_mutable_sched_cpu_util_cfs();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.sched_cpu_util_cfs)
  return _msg;
}

// .perfetto.protos.V4l2QbufFtraceEvent v4l2_qbuf = 422;
inline bool FtraceEvent::has_v4l2_qbuf() const {
  return event_case() == kV4L2Qbuf;
}
inline bool FtraceEvent::_internal_has_v4l2_qbuf() const {
  return event_case() == kV4L2Qbuf;
}
inline void FtraceEvent::set_has_v4l2_qbuf() {
  _impl_._oneof_case_[0] = kV4L2Qbuf;
}
inline ::perfetto::protos::V4l2QbufFtraceEvent* FtraceEvent::release_v4l2_qbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.v4l2_qbuf)
  if (event_case() == kV4L2Qbuf) {
    clear_has_event();
    ::perfetto::protos::V4l2QbufFtraceEvent* temp = _impl_.event_.v4l2_qbuf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.v4l2_qbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::V4l2QbufFtraceEvent& FtraceEvent::_internal_v4l2_qbuf() const {
  return event_case() == kV4L2Qbuf
      ? *_impl_.event_.v4l2_qbuf_
      : reinterpret_cast<::perfetto::protos::V4l2QbufFtraceEvent&>(::perfetto::protos::_V4l2QbufFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::V4l2QbufFtraceEvent& FtraceEvent::v4l2_qbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.v4l2_qbuf)
  return _internal_v4l2_qbuf();
}
inline ::perfetto::protos::V4l2QbufFtraceEvent* FtraceEvent::unsafe_arena_release_v4l2_qbuf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.v4l2_qbuf)
  if (event_case() == kV4L2Qbuf) {
    clear_has_event();
    ::perfetto::protos::V4l2QbufFtraceEvent* temp = _impl_.event_.v4l2_qbuf_;
    _impl_.event_.v4l2_qbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_v4l2_qbuf(::perfetto::protos::V4l2QbufFtraceEvent* v4l2_qbuf) {
  clear_event();
  if (v4l2_qbuf) {
    set_has_v4l2_qbuf();
    _impl_.event_.v4l2_qbuf_ = v4l2_qbuf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.v4l2_qbuf)
}
inline ::perfetto::protos::V4l2QbufFtraceEvent* FtraceEvent::_internal_mutable_v4l2_qbuf() {
  if (event_case() != kV4L2Qbuf) {
    clear_event();
    set_has_v4l2_qbuf();
    _impl_.event_.v4l2_qbuf_ = CreateMaybeMessage< ::perfetto::protos::V4l2QbufFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.v4l2_qbuf_;
}
inline ::perfetto::protos::V4l2QbufFtraceEvent* FtraceEvent::mutable_v4l2_qbuf() {
  ::perfetto::protos::V4l2QbufFtraceEvent* _msg = _internal_mutable_v4l2_qbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.v4l2_qbuf)
  return _msg;
}

// .perfetto.protos.V4l2DqbufFtraceEvent v4l2_dqbuf = 423;
inline bool FtraceEvent::has_v4l2_dqbuf() const {
  return event_case() == kV4L2Dqbuf;
}
inline bool FtraceEvent::_internal_has_v4l2_dqbuf() const {
  return event_case() == kV4L2Dqbuf;
}
inline void FtraceEvent::set_has_v4l2_dqbuf() {
  _impl_._oneof_case_[0] = kV4L2Dqbuf;
}
inline ::perfetto::protos::V4l2DqbufFtraceEvent* FtraceEvent::release_v4l2_dqbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.v4l2_dqbuf)
  if (event_case() == kV4L2Dqbuf) {
    clear_has_event();
    ::perfetto::protos::V4l2DqbufFtraceEvent* temp = _impl_.event_.v4l2_dqbuf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.v4l2_dqbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::V4l2DqbufFtraceEvent& FtraceEvent::_internal_v4l2_dqbuf() const {
  return event_case() == kV4L2Dqbuf
      ? *_impl_.event_.v4l2_dqbuf_
      : reinterpret_cast<::perfetto::protos::V4l2DqbufFtraceEvent&>(::perfetto::protos::_V4l2DqbufFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::V4l2DqbufFtraceEvent& FtraceEvent::v4l2_dqbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.v4l2_dqbuf)
  return _internal_v4l2_dqbuf();
}
inline ::perfetto::protos::V4l2DqbufFtraceEvent* FtraceEvent::unsafe_arena_release_v4l2_dqbuf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.v4l2_dqbuf)
  if (event_case() == kV4L2Dqbuf) {
    clear_has_event();
    ::perfetto::protos::V4l2DqbufFtraceEvent* temp = _impl_.event_.v4l2_dqbuf_;
    _impl_.event_.v4l2_dqbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_v4l2_dqbuf(::perfetto::protos::V4l2DqbufFtraceEvent* v4l2_dqbuf) {
  clear_event();
  if (v4l2_dqbuf) {
    set_has_v4l2_dqbuf();
    _impl_.event_.v4l2_dqbuf_ = v4l2_dqbuf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.v4l2_dqbuf)
}
inline ::perfetto::protos::V4l2DqbufFtraceEvent* FtraceEvent::_internal_mutable_v4l2_dqbuf() {
  if (event_case() != kV4L2Dqbuf) {
    clear_event();
    set_has_v4l2_dqbuf();
    _impl_.event_.v4l2_dqbuf_ = CreateMaybeMessage< ::perfetto::protos::V4l2DqbufFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.v4l2_dqbuf_;
}
inline ::perfetto::protos::V4l2DqbufFtraceEvent* FtraceEvent::mutable_v4l2_dqbuf() {
  ::perfetto::protos::V4l2DqbufFtraceEvent* _msg = _internal_mutable_v4l2_dqbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.v4l2_dqbuf)
  return _msg;
}

// .perfetto.protos.Vb2V4l2BufQueueFtraceEvent vb2_v4l2_buf_queue = 424;
inline bool FtraceEvent::has_vb2_v4l2_buf_queue() const {
  return event_case() == kVb2V4L2BufQueue;
}
inline bool FtraceEvent::_internal_has_vb2_v4l2_buf_queue() const {
  return event_case() == kVb2V4L2BufQueue;
}
inline void FtraceEvent::set_has_vb2_v4l2_buf_queue() {
  _impl_._oneof_case_[0] = kVb2V4L2BufQueue;
}
inline ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* FtraceEvent::release_vb2_v4l2_buf_queue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.vb2_v4l2_buf_queue)
  if (event_case() == kVb2V4L2BufQueue) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* temp = _impl_.event_.vb2_v4l2_buf_queue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vb2_v4l2_buf_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent& FtraceEvent::_internal_vb2_v4l2_buf_queue() const {
  return event_case() == kVb2V4L2BufQueue
      ? *_impl_.event_.vb2_v4l2_buf_queue_
      : reinterpret_cast<::perfetto::protos::Vb2V4l2BufQueueFtraceEvent&>(::perfetto::protos::_Vb2V4l2BufQueueFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent& FtraceEvent::vb2_v4l2_buf_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.vb2_v4l2_buf_queue)
  return _internal_vb2_v4l2_buf_queue();
}
inline ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* FtraceEvent::unsafe_arena_release_vb2_v4l2_buf_queue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.vb2_v4l2_buf_queue)
  if (event_case() == kVb2V4L2BufQueue) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* temp = _impl_.event_.vb2_v4l2_buf_queue_;
    _impl_.event_.vb2_v4l2_buf_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_vb2_v4l2_buf_queue(::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* vb2_v4l2_buf_queue) {
  clear_event();
  if (vb2_v4l2_buf_queue) {
    set_has_vb2_v4l2_buf_queue();
    _impl_.event_.vb2_v4l2_buf_queue_ = vb2_v4l2_buf_queue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_buf_queue)
}
inline ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* FtraceEvent::_internal_mutable_vb2_v4l2_buf_queue() {
  if (event_case() != kVb2V4L2BufQueue) {
    clear_event();
    set_has_vb2_v4l2_buf_queue();
    _impl_.event_.vb2_v4l2_buf_queue_ = CreateMaybeMessage< ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.vb2_v4l2_buf_queue_;
}
inline ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* FtraceEvent::mutable_vb2_v4l2_buf_queue() {
  ::perfetto::protos::Vb2V4l2BufQueueFtraceEvent* _msg = _internal_mutable_vb2_v4l2_buf_queue();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.vb2_v4l2_buf_queue)
  return _msg;
}

// .perfetto.protos.Vb2V4l2BufDoneFtraceEvent vb2_v4l2_buf_done = 425;
inline bool FtraceEvent::has_vb2_v4l2_buf_done() const {
  return event_case() == kVb2V4L2BufDone;
}
inline bool FtraceEvent::_internal_has_vb2_v4l2_buf_done() const {
  return event_case() == kVb2V4L2BufDone;
}
inline void FtraceEvent::set_has_vb2_v4l2_buf_done() {
  _impl_._oneof_case_[0] = kVb2V4L2BufDone;
}
inline ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* FtraceEvent::release_vb2_v4l2_buf_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.vb2_v4l2_buf_done)
  if (event_case() == kVb2V4L2BufDone) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* temp = _impl_.event_.vb2_v4l2_buf_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vb2_v4l2_buf_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent& FtraceEvent::_internal_vb2_v4l2_buf_done() const {
  return event_case() == kVb2V4L2BufDone
      ? *_impl_.event_.vb2_v4l2_buf_done_
      : reinterpret_cast<::perfetto::protos::Vb2V4l2BufDoneFtraceEvent&>(::perfetto::protos::_Vb2V4l2BufDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent& FtraceEvent::vb2_v4l2_buf_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.vb2_v4l2_buf_done)
  return _internal_vb2_v4l2_buf_done();
}
inline ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* FtraceEvent::unsafe_arena_release_vb2_v4l2_buf_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.vb2_v4l2_buf_done)
  if (event_case() == kVb2V4L2BufDone) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* temp = _impl_.event_.vb2_v4l2_buf_done_;
    _impl_.event_.vb2_v4l2_buf_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_vb2_v4l2_buf_done(::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* vb2_v4l2_buf_done) {
  clear_event();
  if (vb2_v4l2_buf_done) {
    set_has_vb2_v4l2_buf_done();
    _impl_.event_.vb2_v4l2_buf_done_ = vb2_v4l2_buf_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_buf_done)
}
inline ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* FtraceEvent::_internal_mutable_vb2_v4l2_buf_done() {
  if (event_case() != kVb2V4L2BufDone) {
    clear_event();
    set_has_vb2_v4l2_buf_done();
    _impl_.event_.vb2_v4l2_buf_done_ = CreateMaybeMessage< ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.vb2_v4l2_buf_done_;
}
inline ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* FtraceEvent::mutable_vb2_v4l2_buf_done() {
  ::perfetto::protos::Vb2V4l2BufDoneFtraceEvent* _msg = _internal_mutable_vb2_v4l2_buf_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.vb2_v4l2_buf_done)
  return _msg;
}

// .perfetto.protos.Vb2V4l2QbufFtraceEvent vb2_v4l2_qbuf = 426;
inline bool FtraceEvent::has_vb2_v4l2_qbuf() const {
  return event_case() == kVb2V4L2Qbuf;
}
inline bool FtraceEvent::_internal_has_vb2_v4l2_qbuf() const {
  return event_case() == kVb2V4L2Qbuf;
}
inline void FtraceEvent::set_has_vb2_v4l2_qbuf() {
  _impl_._oneof_case_[0] = kVb2V4L2Qbuf;
}
inline ::perfetto::protos::Vb2V4l2QbufFtraceEvent* FtraceEvent::release_vb2_v4l2_qbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.vb2_v4l2_qbuf)
  if (event_case() == kVb2V4L2Qbuf) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2QbufFtraceEvent* temp = _impl_.event_.vb2_v4l2_qbuf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vb2_v4l2_qbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Vb2V4l2QbufFtraceEvent& FtraceEvent::_internal_vb2_v4l2_qbuf() const {
  return event_case() == kVb2V4L2Qbuf
      ? *_impl_.event_.vb2_v4l2_qbuf_
      : reinterpret_cast<::perfetto::protos::Vb2V4l2QbufFtraceEvent&>(::perfetto::protos::_Vb2V4l2QbufFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Vb2V4l2QbufFtraceEvent& FtraceEvent::vb2_v4l2_qbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.vb2_v4l2_qbuf)
  return _internal_vb2_v4l2_qbuf();
}
inline ::perfetto::protos::Vb2V4l2QbufFtraceEvent* FtraceEvent::unsafe_arena_release_vb2_v4l2_qbuf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.vb2_v4l2_qbuf)
  if (event_case() == kVb2V4L2Qbuf) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2QbufFtraceEvent* temp = _impl_.event_.vb2_v4l2_qbuf_;
    _impl_.event_.vb2_v4l2_qbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_vb2_v4l2_qbuf(::perfetto::protos::Vb2V4l2QbufFtraceEvent* vb2_v4l2_qbuf) {
  clear_event();
  if (vb2_v4l2_qbuf) {
    set_has_vb2_v4l2_qbuf();
    _impl_.event_.vb2_v4l2_qbuf_ = vb2_v4l2_qbuf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_qbuf)
}
inline ::perfetto::protos::Vb2V4l2QbufFtraceEvent* FtraceEvent::_internal_mutable_vb2_v4l2_qbuf() {
  if (event_case() != kVb2V4L2Qbuf) {
    clear_event();
    set_has_vb2_v4l2_qbuf();
    _impl_.event_.vb2_v4l2_qbuf_ = CreateMaybeMessage< ::perfetto::protos::Vb2V4l2QbufFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.vb2_v4l2_qbuf_;
}
inline ::perfetto::protos::Vb2V4l2QbufFtraceEvent* FtraceEvent::mutable_vb2_v4l2_qbuf() {
  ::perfetto::protos::Vb2V4l2QbufFtraceEvent* _msg = _internal_mutable_vb2_v4l2_qbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.vb2_v4l2_qbuf)
  return _msg;
}

// .perfetto.protos.Vb2V4l2DqbufFtraceEvent vb2_v4l2_dqbuf = 427;
inline bool FtraceEvent::has_vb2_v4l2_dqbuf() const {
  return event_case() == kVb2V4L2Dqbuf;
}
inline bool FtraceEvent::_internal_has_vb2_v4l2_dqbuf() const {
  return event_case() == kVb2V4L2Dqbuf;
}
inline void FtraceEvent::set_has_vb2_v4l2_dqbuf() {
  _impl_._oneof_case_[0] = kVb2V4L2Dqbuf;
}
inline ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* FtraceEvent::release_vb2_v4l2_dqbuf() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.vb2_v4l2_dqbuf)
  if (event_case() == kVb2V4L2Dqbuf) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* temp = _impl_.event_.vb2_v4l2_dqbuf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.vb2_v4l2_dqbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::Vb2V4l2DqbufFtraceEvent& FtraceEvent::_internal_vb2_v4l2_dqbuf() const {
  return event_case() == kVb2V4L2Dqbuf
      ? *_impl_.event_.vb2_v4l2_dqbuf_
      : reinterpret_cast<::perfetto::protos::Vb2V4l2DqbufFtraceEvent&>(::perfetto::protos::_Vb2V4l2DqbufFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::Vb2V4l2DqbufFtraceEvent& FtraceEvent::vb2_v4l2_dqbuf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.vb2_v4l2_dqbuf)
  return _internal_vb2_v4l2_dqbuf();
}
inline ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* FtraceEvent::unsafe_arena_release_vb2_v4l2_dqbuf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.vb2_v4l2_dqbuf)
  if (event_case() == kVb2V4L2Dqbuf) {
    clear_has_event();
    ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* temp = _impl_.event_.vb2_v4l2_dqbuf_;
    _impl_.event_.vb2_v4l2_dqbuf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_vb2_v4l2_dqbuf(::perfetto::protos::Vb2V4l2DqbufFtraceEvent* vb2_v4l2_dqbuf) {
  clear_event();
  if (vb2_v4l2_dqbuf) {
    set_has_vb2_v4l2_dqbuf();
    _impl_.event_.vb2_v4l2_dqbuf_ = vb2_v4l2_dqbuf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.vb2_v4l2_dqbuf)
}
inline ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* FtraceEvent::_internal_mutable_vb2_v4l2_dqbuf() {
  if (event_case() != kVb2V4L2Dqbuf) {
    clear_event();
    set_has_vb2_v4l2_dqbuf();
    _impl_.event_.vb2_v4l2_dqbuf_ = CreateMaybeMessage< ::perfetto::protos::Vb2V4l2DqbufFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.vb2_v4l2_dqbuf_;
}
inline ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* FtraceEvent::mutable_vb2_v4l2_dqbuf() {
  ::perfetto::protos::Vb2V4l2DqbufFtraceEvent* _msg = _internal_mutable_vb2_v4l2_dqbuf();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.vb2_v4l2_dqbuf)
  return _msg;
}

// .perfetto.protos.DsiCmdFifoStatusFtraceEvent dsi_cmd_fifo_status = 428;
inline bool FtraceEvent::has_dsi_cmd_fifo_status() const {
  return event_case() == kDsiCmdFifoStatus;
}
inline bool FtraceEvent::_internal_has_dsi_cmd_fifo_status() const {
  return event_case() == kDsiCmdFifoStatus;
}
inline void FtraceEvent::set_has_dsi_cmd_fifo_status() {
  _impl_._oneof_case_[0] = kDsiCmdFifoStatus;
}
inline ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* FtraceEvent::release_dsi_cmd_fifo_status() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dsi_cmd_fifo_status)
  if (event_case() == kDsiCmdFifoStatus) {
    clear_has_event();
    ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* temp = _impl_.event_.dsi_cmd_fifo_status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dsi_cmd_fifo_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DsiCmdFifoStatusFtraceEvent& FtraceEvent::_internal_dsi_cmd_fifo_status() const {
  return event_case() == kDsiCmdFifoStatus
      ? *_impl_.event_.dsi_cmd_fifo_status_
      : reinterpret_cast<::perfetto::protos::DsiCmdFifoStatusFtraceEvent&>(::perfetto::protos::_DsiCmdFifoStatusFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DsiCmdFifoStatusFtraceEvent& FtraceEvent::dsi_cmd_fifo_status() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dsi_cmd_fifo_status)
  return _internal_dsi_cmd_fifo_status();
}
inline ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* FtraceEvent::unsafe_arena_release_dsi_cmd_fifo_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dsi_cmd_fifo_status)
  if (event_case() == kDsiCmdFifoStatus) {
    clear_has_event();
    ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* temp = _impl_.event_.dsi_cmd_fifo_status_;
    _impl_.event_.dsi_cmd_fifo_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dsi_cmd_fifo_status(::perfetto::protos::DsiCmdFifoStatusFtraceEvent* dsi_cmd_fifo_status) {
  clear_event();
  if (dsi_cmd_fifo_status) {
    set_has_dsi_cmd_fifo_status();
    _impl_.event_.dsi_cmd_fifo_status_ = dsi_cmd_fifo_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dsi_cmd_fifo_status)
}
inline ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* FtraceEvent::_internal_mutable_dsi_cmd_fifo_status() {
  if (event_case() != kDsiCmdFifoStatus) {
    clear_event();
    set_has_dsi_cmd_fifo_status();
    _impl_.event_.dsi_cmd_fifo_status_ = CreateMaybeMessage< ::perfetto::protos::DsiCmdFifoStatusFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dsi_cmd_fifo_status_;
}
inline ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* FtraceEvent::mutable_dsi_cmd_fifo_status() {
  ::perfetto::protos::DsiCmdFifoStatusFtraceEvent* _msg = _internal_mutable_dsi_cmd_fifo_status();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dsi_cmd_fifo_status)
  return _msg;
}

// .perfetto.protos.DsiRxFtraceEvent dsi_rx = 429;
inline bool FtraceEvent::has_dsi_rx() const {
  return event_case() == kDsiRx;
}
inline bool FtraceEvent::_internal_has_dsi_rx() const {
  return event_case() == kDsiRx;
}
inline void FtraceEvent::set_has_dsi_rx() {
  _impl_._oneof_case_[0] = kDsiRx;
}
inline ::perfetto::protos::DsiRxFtraceEvent* FtraceEvent::release_dsi_rx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dsi_rx)
  if (event_case() == kDsiRx) {
    clear_has_event();
    ::perfetto::protos::DsiRxFtraceEvent* temp = _impl_.event_.dsi_rx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dsi_rx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DsiRxFtraceEvent& FtraceEvent::_internal_dsi_rx() const {
  return event_case() == kDsiRx
      ? *_impl_.event_.dsi_rx_
      : reinterpret_cast<::perfetto::protos::DsiRxFtraceEvent&>(::perfetto::protos::_DsiRxFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DsiRxFtraceEvent& FtraceEvent::dsi_rx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dsi_rx)
  return _internal_dsi_rx();
}
inline ::perfetto::protos::DsiRxFtraceEvent* FtraceEvent::unsafe_arena_release_dsi_rx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dsi_rx)
  if (event_case() == kDsiRx) {
    clear_has_event();
    ::perfetto::protos::DsiRxFtraceEvent* temp = _impl_.event_.dsi_rx_;
    _impl_.event_.dsi_rx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dsi_rx(::perfetto::protos::DsiRxFtraceEvent* dsi_rx) {
  clear_event();
  if (dsi_rx) {
    set_has_dsi_rx();
    _impl_.event_.dsi_rx_ = dsi_rx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dsi_rx)
}
inline ::perfetto::protos::DsiRxFtraceEvent* FtraceEvent::_internal_mutable_dsi_rx() {
  if (event_case() != kDsiRx) {
    clear_event();
    set_has_dsi_rx();
    _impl_.event_.dsi_rx_ = CreateMaybeMessage< ::perfetto::protos::DsiRxFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dsi_rx_;
}
inline ::perfetto::protos::DsiRxFtraceEvent* FtraceEvent::mutable_dsi_rx() {
  ::perfetto::protos::DsiRxFtraceEvent* _msg = _internal_mutable_dsi_rx();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dsi_rx)
  return _msg;
}

// .perfetto.protos.DsiTxFtraceEvent dsi_tx = 430;
inline bool FtraceEvent::has_dsi_tx() const {
  return event_case() == kDsiTx;
}
inline bool FtraceEvent::_internal_has_dsi_tx() const {
  return event_case() == kDsiTx;
}
inline void FtraceEvent::set_has_dsi_tx() {
  _impl_._oneof_case_[0] = kDsiTx;
}
inline ::perfetto::protos::DsiTxFtraceEvent* FtraceEvent::release_dsi_tx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.dsi_tx)
  if (event_case() == kDsiTx) {
    clear_has_event();
    ::perfetto::protos::DsiTxFtraceEvent* temp = _impl_.event_.dsi_tx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.dsi_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::DsiTxFtraceEvent& FtraceEvent::_internal_dsi_tx() const {
  return event_case() == kDsiTx
      ? *_impl_.event_.dsi_tx_
      : reinterpret_cast<::perfetto::protos::DsiTxFtraceEvent&>(::perfetto::protos::_DsiTxFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::DsiTxFtraceEvent& FtraceEvent::dsi_tx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.dsi_tx)
  return _internal_dsi_tx();
}
inline ::perfetto::protos::DsiTxFtraceEvent* FtraceEvent::unsafe_arena_release_dsi_tx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.dsi_tx)
  if (event_case() == kDsiTx) {
    clear_has_event();
    ::perfetto::protos::DsiTxFtraceEvent* temp = _impl_.event_.dsi_tx_;
    _impl_.event_.dsi_tx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_dsi_tx(::perfetto::protos::DsiTxFtraceEvent* dsi_tx) {
  clear_event();
  if (dsi_tx) {
    set_has_dsi_tx();
    _impl_.event_.dsi_tx_ = dsi_tx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.dsi_tx)
}
inline ::perfetto::protos::DsiTxFtraceEvent* FtraceEvent::_internal_mutable_dsi_tx() {
  if (event_case() != kDsiTx) {
    clear_event();
    set_has_dsi_tx();
    _impl_.event_.dsi_tx_ = CreateMaybeMessage< ::perfetto::protos::DsiTxFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.dsi_tx_;
}
inline ::perfetto::protos::DsiTxFtraceEvent* FtraceEvent::mutable_dsi_tx() {
  ::perfetto::protos::DsiTxFtraceEvent* _msg = _internal_mutable_dsi_tx();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.dsi_tx)
  return _msg;
}

// .perfetto.protos.AndroidFsDatareadEndFtraceEvent android_fs_dataread_end = 431;
inline bool FtraceEvent::has_android_fs_dataread_end() const {
  return event_case() == kAndroidFsDatareadEnd;
}
inline bool FtraceEvent::_internal_has_android_fs_dataread_end() const {
  return event_case() == kAndroidFsDatareadEnd;
}
inline void FtraceEvent::set_has_android_fs_dataread_end() {
  _impl_._oneof_case_[0] = kAndroidFsDatareadEnd;
}
inline ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* FtraceEvent::release_android_fs_dataread_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.android_fs_dataread_end)
  if (event_case() == kAndroidFsDatareadEnd) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* temp = _impl_.event_.android_fs_dataread_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.android_fs_dataread_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidFsDatareadEndFtraceEvent& FtraceEvent::_internal_android_fs_dataread_end() const {
  return event_case() == kAndroidFsDatareadEnd
      ? *_impl_.event_.android_fs_dataread_end_
      : reinterpret_cast<::perfetto::protos::AndroidFsDatareadEndFtraceEvent&>(::perfetto::protos::_AndroidFsDatareadEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidFsDatareadEndFtraceEvent& FtraceEvent::android_fs_dataread_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.android_fs_dataread_end)
  return _internal_android_fs_dataread_end();
}
inline ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* FtraceEvent::unsafe_arena_release_android_fs_dataread_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.android_fs_dataread_end)
  if (event_case() == kAndroidFsDatareadEnd) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* temp = _impl_.event_.android_fs_dataread_end_;
    _impl_.event_.android_fs_dataread_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_android_fs_dataread_end(::perfetto::protos::AndroidFsDatareadEndFtraceEvent* android_fs_dataread_end) {
  clear_event();
  if (android_fs_dataread_end) {
    set_has_android_fs_dataread_end();
    _impl_.event_.android_fs_dataread_end_ = android_fs_dataread_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.android_fs_dataread_end)
}
inline ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* FtraceEvent::_internal_mutable_android_fs_dataread_end() {
  if (event_case() != kAndroidFsDatareadEnd) {
    clear_event();
    set_has_android_fs_dataread_end();
    _impl_.event_.android_fs_dataread_end_ = CreateMaybeMessage< ::perfetto::protos::AndroidFsDatareadEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.android_fs_dataread_end_;
}
inline ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* FtraceEvent::mutable_android_fs_dataread_end() {
  ::perfetto::protos::AndroidFsDatareadEndFtraceEvent* _msg = _internal_mutable_android_fs_dataread_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.android_fs_dataread_end)
  return _msg;
}

// .perfetto.protos.AndroidFsDatareadStartFtraceEvent android_fs_dataread_start = 432;
inline bool FtraceEvent::has_android_fs_dataread_start() const {
  return event_case() == kAndroidFsDatareadStart;
}
inline bool FtraceEvent::_internal_has_android_fs_dataread_start() const {
  return event_case() == kAndroidFsDatareadStart;
}
inline void FtraceEvent::set_has_android_fs_dataread_start() {
  _impl_._oneof_case_[0] = kAndroidFsDatareadStart;
}
inline ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* FtraceEvent::release_android_fs_dataread_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.android_fs_dataread_start)
  if (event_case() == kAndroidFsDatareadStart) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* temp = _impl_.event_.android_fs_dataread_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.android_fs_dataread_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidFsDatareadStartFtraceEvent& FtraceEvent::_internal_android_fs_dataread_start() const {
  return event_case() == kAndroidFsDatareadStart
      ? *_impl_.event_.android_fs_dataread_start_
      : reinterpret_cast<::perfetto::protos::AndroidFsDatareadStartFtraceEvent&>(::perfetto::protos::_AndroidFsDatareadStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidFsDatareadStartFtraceEvent& FtraceEvent::android_fs_dataread_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.android_fs_dataread_start)
  return _internal_android_fs_dataread_start();
}
inline ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* FtraceEvent::unsafe_arena_release_android_fs_dataread_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.android_fs_dataread_start)
  if (event_case() == kAndroidFsDatareadStart) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* temp = _impl_.event_.android_fs_dataread_start_;
    _impl_.event_.android_fs_dataread_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_android_fs_dataread_start(::perfetto::protos::AndroidFsDatareadStartFtraceEvent* android_fs_dataread_start) {
  clear_event();
  if (android_fs_dataread_start) {
    set_has_android_fs_dataread_start();
    _impl_.event_.android_fs_dataread_start_ = android_fs_dataread_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.android_fs_dataread_start)
}
inline ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* FtraceEvent::_internal_mutable_android_fs_dataread_start() {
  if (event_case() != kAndroidFsDatareadStart) {
    clear_event();
    set_has_android_fs_dataread_start();
    _impl_.event_.android_fs_dataread_start_ = CreateMaybeMessage< ::perfetto::protos::AndroidFsDatareadStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.android_fs_dataread_start_;
}
inline ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* FtraceEvent::mutable_android_fs_dataread_start() {
  ::perfetto::protos::AndroidFsDatareadStartFtraceEvent* _msg = _internal_mutable_android_fs_dataread_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.android_fs_dataread_start)
  return _msg;
}

// .perfetto.protos.AndroidFsDatawriteEndFtraceEvent android_fs_datawrite_end = 433;
inline bool FtraceEvent::has_android_fs_datawrite_end() const {
  return event_case() == kAndroidFsDatawriteEnd;
}
inline bool FtraceEvent::_internal_has_android_fs_datawrite_end() const {
  return event_case() == kAndroidFsDatawriteEnd;
}
inline void FtraceEvent::set_has_android_fs_datawrite_end() {
  _impl_._oneof_case_[0] = kAndroidFsDatawriteEnd;
}
inline ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* FtraceEvent::release_android_fs_datawrite_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.android_fs_datawrite_end)
  if (event_case() == kAndroidFsDatawriteEnd) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* temp = _impl_.event_.android_fs_datawrite_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.android_fs_datawrite_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent& FtraceEvent::_internal_android_fs_datawrite_end() const {
  return event_case() == kAndroidFsDatawriteEnd
      ? *_impl_.event_.android_fs_datawrite_end_
      : reinterpret_cast<::perfetto::protos::AndroidFsDatawriteEndFtraceEvent&>(::perfetto::protos::_AndroidFsDatawriteEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent& FtraceEvent::android_fs_datawrite_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.android_fs_datawrite_end)
  return _internal_android_fs_datawrite_end();
}
inline ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* FtraceEvent::unsafe_arena_release_android_fs_datawrite_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.android_fs_datawrite_end)
  if (event_case() == kAndroidFsDatawriteEnd) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* temp = _impl_.event_.android_fs_datawrite_end_;
    _impl_.event_.android_fs_datawrite_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_android_fs_datawrite_end(::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* android_fs_datawrite_end) {
  clear_event();
  if (android_fs_datawrite_end) {
    set_has_android_fs_datawrite_end();
    _impl_.event_.android_fs_datawrite_end_ = android_fs_datawrite_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.android_fs_datawrite_end)
}
inline ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* FtraceEvent::_internal_mutable_android_fs_datawrite_end() {
  if (event_case() != kAndroidFsDatawriteEnd) {
    clear_event();
    set_has_android_fs_datawrite_end();
    _impl_.event_.android_fs_datawrite_end_ = CreateMaybeMessage< ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.android_fs_datawrite_end_;
}
inline ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* FtraceEvent::mutable_android_fs_datawrite_end() {
  ::perfetto::protos::AndroidFsDatawriteEndFtraceEvent* _msg = _internal_mutable_android_fs_datawrite_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.android_fs_datawrite_end)
  return _msg;
}

// .perfetto.protos.AndroidFsDatawriteStartFtraceEvent android_fs_datawrite_start = 434;
inline bool FtraceEvent::has_android_fs_datawrite_start() const {
  return event_case() == kAndroidFsDatawriteStart;
}
inline bool FtraceEvent::_internal_has_android_fs_datawrite_start() const {
  return event_case() == kAndroidFsDatawriteStart;
}
inline void FtraceEvent::set_has_android_fs_datawrite_start() {
  _impl_._oneof_case_[0] = kAndroidFsDatawriteStart;
}
inline ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* FtraceEvent::release_android_fs_datawrite_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.android_fs_datawrite_start)
  if (event_case() == kAndroidFsDatawriteStart) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* temp = _impl_.event_.android_fs_datawrite_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.android_fs_datawrite_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent& FtraceEvent::_internal_android_fs_datawrite_start() const {
  return event_case() == kAndroidFsDatawriteStart
      ? *_impl_.event_.android_fs_datawrite_start_
      : reinterpret_cast<::perfetto::protos::AndroidFsDatawriteStartFtraceEvent&>(::perfetto::protos::_AndroidFsDatawriteStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent& FtraceEvent::android_fs_datawrite_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.android_fs_datawrite_start)
  return _internal_android_fs_datawrite_start();
}
inline ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* FtraceEvent::unsafe_arena_release_android_fs_datawrite_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.android_fs_datawrite_start)
  if (event_case() == kAndroidFsDatawriteStart) {
    clear_has_event();
    ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* temp = _impl_.event_.android_fs_datawrite_start_;
    _impl_.event_.android_fs_datawrite_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_android_fs_datawrite_start(::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* android_fs_datawrite_start) {
  clear_event();
  if (android_fs_datawrite_start) {
    set_has_android_fs_datawrite_start();
    _impl_.event_.android_fs_datawrite_start_ = android_fs_datawrite_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.android_fs_datawrite_start)
}
inline ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* FtraceEvent::_internal_mutable_android_fs_datawrite_start() {
  if (event_case() != kAndroidFsDatawriteStart) {
    clear_event();
    set_has_android_fs_datawrite_start();
    _impl_.event_.android_fs_datawrite_start_ = CreateMaybeMessage< ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.android_fs_datawrite_start_;
}
inline ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* FtraceEvent::mutable_android_fs_datawrite_start() {
  ::perfetto::protos::AndroidFsDatawriteStartFtraceEvent* _msg = _internal_mutable_android_fs_datawrite_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.android_fs_datawrite_start)
  return _msg;
}

// .perfetto.protos.AndroidFsFsyncEndFtraceEvent android_fs_fsync_end = 435;
inline bool FtraceEvent::has_android_fs_fsync_end() const {
  return event_case() == kAndroidFsFsyncEnd;
}
inline bool FtraceEvent::_internal_has_android_fs_fsync_end() const {
  return event_case() == kAndroidFsFsyncEnd;
}
inline void FtraceEvent::set_has_android_fs_fsync_end() {
  _impl_._oneof_case_[0] = kAndroidFsFsyncEnd;
}
inline ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* FtraceEvent::release_android_fs_fsync_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.android_fs_fsync_end)
  if (event_case() == kAndroidFsFsyncEnd) {
    clear_has_event();
    ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* temp = _impl_.event_.android_fs_fsync_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.android_fs_fsync_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidFsFsyncEndFtraceEvent& FtraceEvent::_internal_android_fs_fsync_end() const {
  return event_case() == kAndroidFsFsyncEnd
      ? *_impl_.event_.android_fs_fsync_end_
      : reinterpret_cast<::perfetto::protos::AndroidFsFsyncEndFtraceEvent&>(::perfetto::protos::_AndroidFsFsyncEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidFsFsyncEndFtraceEvent& FtraceEvent::android_fs_fsync_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.android_fs_fsync_end)
  return _internal_android_fs_fsync_end();
}
inline ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* FtraceEvent::unsafe_arena_release_android_fs_fsync_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.android_fs_fsync_end)
  if (event_case() == kAndroidFsFsyncEnd) {
    clear_has_event();
    ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* temp = _impl_.event_.android_fs_fsync_end_;
    _impl_.event_.android_fs_fsync_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_android_fs_fsync_end(::perfetto::protos::AndroidFsFsyncEndFtraceEvent* android_fs_fsync_end) {
  clear_event();
  if (android_fs_fsync_end) {
    set_has_android_fs_fsync_end();
    _impl_.event_.android_fs_fsync_end_ = android_fs_fsync_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.android_fs_fsync_end)
}
inline ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* FtraceEvent::_internal_mutable_android_fs_fsync_end() {
  if (event_case() != kAndroidFsFsyncEnd) {
    clear_event();
    set_has_android_fs_fsync_end();
    _impl_.event_.android_fs_fsync_end_ = CreateMaybeMessage< ::perfetto::protos::AndroidFsFsyncEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.android_fs_fsync_end_;
}
inline ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* FtraceEvent::mutable_android_fs_fsync_end() {
  ::perfetto::protos::AndroidFsFsyncEndFtraceEvent* _msg = _internal_mutable_android_fs_fsync_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.android_fs_fsync_end)
  return _msg;
}

// .perfetto.protos.AndroidFsFsyncStartFtraceEvent android_fs_fsync_start = 436;
inline bool FtraceEvent::has_android_fs_fsync_start() const {
  return event_case() == kAndroidFsFsyncStart;
}
inline bool FtraceEvent::_internal_has_android_fs_fsync_start() const {
  return event_case() == kAndroidFsFsyncStart;
}
inline void FtraceEvent::set_has_android_fs_fsync_start() {
  _impl_._oneof_case_[0] = kAndroidFsFsyncStart;
}
inline ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* FtraceEvent::release_android_fs_fsync_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.android_fs_fsync_start)
  if (event_case() == kAndroidFsFsyncStart) {
    clear_has_event();
    ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* temp = _impl_.event_.android_fs_fsync_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.android_fs_fsync_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::AndroidFsFsyncStartFtraceEvent& FtraceEvent::_internal_android_fs_fsync_start() const {
  return event_case() == kAndroidFsFsyncStart
      ? *_impl_.event_.android_fs_fsync_start_
      : reinterpret_cast<::perfetto::protos::AndroidFsFsyncStartFtraceEvent&>(::perfetto::protos::_AndroidFsFsyncStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::AndroidFsFsyncStartFtraceEvent& FtraceEvent::android_fs_fsync_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.android_fs_fsync_start)
  return _internal_android_fs_fsync_start();
}
inline ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* FtraceEvent::unsafe_arena_release_android_fs_fsync_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.android_fs_fsync_start)
  if (event_case() == kAndroidFsFsyncStart) {
    clear_has_event();
    ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* temp = _impl_.event_.android_fs_fsync_start_;
    _impl_.event_.android_fs_fsync_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_android_fs_fsync_start(::perfetto::protos::AndroidFsFsyncStartFtraceEvent* android_fs_fsync_start) {
  clear_event();
  if (android_fs_fsync_start) {
    set_has_android_fs_fsync_start();
    _impl_.event_.android_fs_fsync_start_ = android_fs_fsync_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.android_fs_fsync_start)
}
inline ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* FtraceEvent::_internal_mutable_android_fs_fsync_start() {
  if (event_case() != kAndroidFsFsyncStart) {
    clear_event();
    set_has_android_fs_fsync_start();
    _impl_.event_.android_fs_fsync_start_ = CreateMaybeMessage< ::perfetto::protos::AndroidFsFsyncStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.android_fs_fsync_start_;
}
inline ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* FtraceEvent::mutable_android_fs_fsync_start() {
  ::perfetto::protos::AndroidFsFsyncStartFtraceEvent* _msg = _internal_mutable_android_fs_fsync_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.android_fs_fsync_start)
  return _msg;
}

// .perfetto.protos.FuncgraphEntryFtraceEvent funcgraph_entry = 437;
inline bool FtraceEvent::has_funcgraph_entry() const {
  return event_case() == kFuncgraphEntry;
}
inline bool FtraceEvent::_internal_has_funcgraph_entry() const {
  return event_case() == kFuncgraphEntry;
}
inline void FtraceEvent::set_has_funcgraph_entry() {
  _impl_._oneof_case_[0] = kFuncgraphEntry;
}
inline ::perfetto::protos::FuncgraphEntryFtraceEvent* FtraceEvent::release_funcgraph_entry() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.funcgraph_entry)
  if (event_case() == kFuncgraphEntry) {
    clear_has_event();
    ::perfetto::protos::FuncgraphEntryFtraceEvent* temp = _impl_.event_.funcgraph_entry_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.funcgraph_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FuncgraphEntryFtraceEvent& FtraceEvent::_internal_funcgraph_entry() const {
  return event_case() == kFuncgraphEntry
      ? *_impl_.event_.funcgraph_entry_
      : reinterpret_cast<::perfetto::protos::FuncgraphEntryFtraceEvent&>(::perfetto::protos::_FuncgraphEntryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FuncgraphEntryFtraceEvent& FtraceEvent::funcgraph_entry() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.funcgraph_entry)
  return _internal_funcgraph_entry();
}
inline ::perfetto::protos::FuncgraphEntryFtraceEvent* FtraceEvent::unsafe_arena_release_funcgraph_entry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.funcgraph_entry)
  if (event_case() == kFuncgraphEntry) {
    clear_has_event();
    ::perfetto::protos::FuncgraphEntryFtraceEvent* temp = _impl_.event_.funcgraph_entry_;
    _impl_.event_.funcgraph_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_funcgraph_entry(::perfetto::protos::FuncgraphEntryFtraceEvent* funcgraph_entry) {
  clear_event();
  if (funcgraph_entry) {
    set_has_funcgraph_entry();
    _impl_.event_.funcgraph_entry_ = funcgraph_entry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.funcgraph_entry)
}
inline ::perfetto::protos::FuncgraphEntryFtraceEvent* FtraceEvent::_internal_mutable_funcgraph_entry() {
  if (event_case() != kFuncgraphEntry) {
    clear_event();
    set_has_funcgraph_entry();
    _impl_.event_.funcgraph_entry_ = CreateMaybeMessage< ::perfetto::protos::FuncgraphEntryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.funcgraph_entry_;
}
inline ::perfetto::protos::FuncgraphEntryFtraceEvent* FtraceEvent::mutable_funcgraph_entry() {
  ::perfetto::protos::FuncgraphEntryFtraceEvent* _msg = _internal_mutable_funcgraph_entry();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.funcgraph_entry)
  return _msg;
}

// .perfetto.protos.FuncgraphExitFtraceEvent funcgraph_exit = 438;
inline bool FtraceEvent::has_funcgraph_exit() const {
  return event_case() == kFuncgraphExit;
}
inline bool FtraceEvent::_internal_has_funcgraph_exit() const {
  return event_case() == kFuncgraphExit;
}
inline void FtraceEvent::set_has_funcgraph_exit() {
  _impl_._oneof_case_[0] = kFuncgraphExit;
}
inline ::perfetto::protos::FuncgraphExitFtraceEvent* FtraceEvent::release_funcgraph_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.funcgraph_exit)
  if (event_case() == kFuncgraphExit) {
    clear_has_event();
    ::perfetto::protos::FuncgraphExitFtraceEvent* temp = _impl_.event_.funcgraph_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.funcgraph_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::FuncgraphExitFtraceEvent& FtraceEvent::_internal_funcgraph_exit() const {
  return event_case() == kFuncgraphExit
      ? *_impl_.event_.funcgraph_exit_
      : reinterpret_cast<::perfetto::protos::FuncgraphExitFtraceEvent&>(::perfetto::protos::_FuncgraphExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::FuncgraphExitFtraceEvent& FtraceEvent::funcgraph_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.funcgraph_exit)
  return _internal_funcgraph_exit();
}
inline ::perfetto::protos::FuncgraphExitFtraceEvent* FtraceEvent::unsafe_arena_release_funcgraph_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.funcgraph_exit)
  if (event_case() == kFuncgraphExit) {
    clear_has_event();
    ::perfetto::protos::FuncgraphExitFtraceEvent* temp = _impl_.event_.funcgraph_exit_;
    _impl_.event_.funcgraph_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_funcgraph_exit(::perfetto::protos::FuncgraphExitFtraceEvent* funcgraph_exit) {
  clear_event();
  if (funcgraph_exit) {
    set_has_funcgraph_exit();
    _impl_.event_.funcgraph_exit_ = funcgraph_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.funcgraph_exit)
}
inline ::perfetto::protos::FuncgraphExitFtraceEvent* FtraceEvent::_internal_mutable_funcgraph_exit() {
  if (event_case() != kFuncgraphExit) {
    clear_event();
    set_has_funcgraph_exit();
    _impl_.event_.funcgraph_exit_ = CreateMaybeMessage< ::perfetto::protos::FuncgraphExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.funcgraph_exit_;
}
inline ::perfetto::protos::FuncgraphExitFtraceEvent* FtraceEvent::mutable_funcgraph_exit() {
  ::perfetto::protos::FuncgraphExitFtraceEvent* _msg = _internal_mutable_funcgraph_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.funcgraph_exit)
  return _msg;
}

// .perfetto.protos.VirtioVideoCmdFtraceEvent virtio_video_cmd = 439;
inline bool FtraceEvent::has_virtio_video_cmd() const {
  return event_case() == kVirtioVideoCmd;
}
inline bool FtraceEvent::_internal_has_virtio_video_cmd() const {
  return event_case() == kVirtioVideoCmd;
}
inline void FtraceEvent::set_has_virtio_video_cmd() {
  _impl_._oneof_case_[0] = kVirtioVideoCmd;
}
inline ::perfetto::protos::VirtioVideoCmdFtraceEvent* FtraceEvent::release_virtio_video_cmd() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.virtio_video_cmd)
  if (event_case() == kVirtioVideoCmd) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoCmdFtraceEvent* temp = _impl_.event_.virtio_video_cmd_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtio_video_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VirtioVideoCmdFtraceEvent& FtraceEvent::_internal_virtio_video_cmd() const {
  return event_case() == kVirtioVideoCmd
      ? *_impl_.event_.virtio_video_cmd_
      : reinterpret_cast<::perfetto::protos::VirtioVideoCmdFtraceEvent&>(::perfetto::protos::_VirtioVideoCmdFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VirtioVideoCmdFtraceEvent& FtraceEvent::virtio_video_cmd() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.virtio_video_cmd)
  return _internal_virtio_video_cmd();
}
inline ::perfetto::protos::VirtioVideoCmdFtraceEvent* FtraceEvent::unsafe_arena_release_virtio_video_cmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.virtio_video_cmd)
  if (event_case() == kVirtioVideoCmd) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoCmdFtraceEvent* temp = _impl_.event_.virtio_video_cmd_;
    _impl_.event_.virtio_video_cmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_virtio_video_cmd(::perfetto::protos::VirtioVideoCmdFtraceEvent* virtio_video_cmd) {
  clear_event();
  if (virtio_video_cmd) {
    set_has_virtio_video_cmd();
    _impl_.event_.virtio_video_cmd_ = virtio_video_cmd;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.virtio_video_cmd)
}
inline ::perfetto::protos::VirtioVideoCmdFtraceEvent* FtraceEvent::_internal_mutable_virtio_video_cmd() {
  if (event_case() != kVirtioVideoCmd) {
    clear_event();
    set_has_virtio_video_cmd();
    _impl_.event_.virtio_video_cmd_ = CreateMaybeMessage< ::perfetto::protos::VirtioVideoCmdFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.virtio_video_cmd_;
}
inline ::perfetto::protos::VirtioVideoCmdFtraceEvent* FtraceEvent::mutable_virtio_video_cmd() {
  ::perfetto::protos::VirtioVideoCmdFtraceEvent* _msg = _internal_mutable_virtio_video_cmd();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.virtio_video_cmd)
  return _msg;
}

// .perfetto.protos.VirtioVideoCmdDoneFtraceEvent virtio_video_cmd_done = 440;
inline bool FtraceEvent::has_virtio_video_cmd_done() const {
  return event_case() == kVirtioVideoCmdDone;
}
inline bool FtraceEvent::_internal_has_virtio_video_cmd_done() const {
  return event_case() == kVirtioVideoCmdDone;
}
inline void FtraceEvent::set_has_virtio_video_cmd_done() {
  _impl_._oneof_case_[0] = kVirtioVideoCmdDone;
}
inline ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* FtraceEvent::release_virtio_video_cmd_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.virtio_video_cmd_done)
  if (event_case() == kVirtioVideoCmdDone) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* temp = _impl_.event_.virtio_video_cmd_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtio_video_cmd_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent& FtraceEvent::_internal_virtio_video_cmd_done() const {
  return event_case() == kVirtioVideoCmdDone
      ? *_impl_.event_.virtio_video_cmd_done_
      : reinterpret_cast<::perfetto::protos::VirtioVideoCmdDoneFtraceEvent&>(::perfetto::protos::_VirtioVideoCmdDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent& FtraceEvent::virtio_video_cmd_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.virtio_video_cmd_done)
  return _internal_virtio_video_cmd_done();
}
inline ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* FtraceEvent::unsafe_arena_release_virtio_video_cmd_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.virtio_video_cmd_done)
  if (event_case() == kVirtioVideoCmdDone) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* temp = _impl_.event_.virtio_video_cmd_done_;
    _impl_.event_.virtio_video_cmd_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_virtio_video_cmd_done(::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* virtio_video_cmd_done) {
  clear_event();
  if (virtio_video_cmd_done) {
    set_has_virtio_video_cmd_done();
    _impl_.event_.virtio_video_cmd_done_ = virtio_video_cmd_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.virtio_video_cmd_done)
}
inline ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* FtraceEvent::_internal_mutable_virtio_video_cmd_done() {
  if (event_case() != kVirtioVideoCmdDone) {
    clear_event();
    set_has_virtio_video_cmd_done();
    _impl_.event_.virtio_video_cmd_done_ = CreateMaybeMessage< ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.virtio_video_cmd_done_;
}
inline ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* FtraceEvent::mutable_virtio_video_cmd_done() {
  ::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* _msg = _internal_mutable_virtio_video_cmd_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.virtio_video_cmd_done)
  return _msg;
}

// .perfetto.protos.VirtioVideoResourceQueueFtraceEvent virtio_video_resource_queue = 441;
inline bool FtraceEvent::has_virtio_video_resource_queue() const {
  return event_case() == kVirtioVideoResourceQueue;
}
inline bool FtraceEvent::_internal_has_virtio_video_resource_queue() const {
  return event_case() == kVirtioVideoResourceQueue;
}
inline void FtraceEvent::set_has_virtio_video_resource_queue() {
  _impl_._oneof_case_[0] = kVirtioVideoResourceQueue;
}
inline ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* FtraceEvent::release_virtio_video_resource_queue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.virtio_video_resource_queue)
  if (event_case() == kVirtioVideoResourceQueue) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* temp = _impl_.event_.virtio_video_resource_queue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtio_video_resource_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent& FtraceEvent::_internal_virtio_video_resource_queue() const {
  return event_case() == kVirtioVideoResourceQueue
      ? *_impl_.event_.virtio_video_resource_queue_
      : reinterpret_cast<::perfetto::protos::VirtioVideoResourceQueueFtraceEvent&>(::perfetto::protos::_VirtioVideoResourceQueueFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent& FtraceEvent::virtio_video_resource_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.virtio_video_resource_queue)
  return _internal_virtio_video_resource_queue();
}
inline ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* FtraceEvent::unsafe_arena_release_virtio_video_resource_queue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.virtio_video_resource_queue)
  if (event_case() == kVirtioVideoResourceQueue) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* temp = _impl_.event_.virtio_video_resource_queue_;
    _impl_.event_.virtio_video_resource_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_virtio_video_resource_queue(::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* virtio_video_resource_queue) {
  clear_event();
  if (virtio_video_resource_queue) {
    set_has_virtio_video_resource_queue();
    _impl_.event_.virtio_video_resource_queue_ = virtio_video_resource_queue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.virtio_video_resource_queue)
}
inline ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* FtraceEvent::_internal_mutable_virtio_video_resource_queue() {
  if (event_case() != kVirtioVideoResourceQueue) {
    clear_event();
    set_has_virtio_video_resource_queue();
    _impl_.event_.virtio_video_resource_queue_ = CreateMaybeMessage< ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.virtio_video_resource_queue_;
}
inline ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* FtraceEvent::mutable_virtio_video_resource_queue() {
  ::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* _msg = _internal_mutable_virtio_video_resource_queue();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.virtio_video_resource_queue)
  return _msg;
}

// .perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent virtio_video_resource_queue_done = 442;
inline bool FtraceEvent::has_virtio_video_resource_queue_done() const {
  return event_case() == kVirtioVideoResourceQueueDone;
}
inline bool FtraceEvent::_internal_has_virtio_video_resource_queue_done() const {
  return event_case() == kVirtioVideoResourceQueueDone;
}
inline void FtraceEvent::set_has_virtio_video_resource_queue_done() {
  _impl_._oneof_case_[0] = kVirtioVideoResourceQueueDone;
}
inline ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* FtraceEvent::release_virtio_video_resource_queue_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.virtio_video_resource_queue_done)
  if (event_case() == kVirtioVideoResourceQueueDone) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* temp = _impl_.event_.virtio_video_resource_queue_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtio_video_resource_queue_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent& FtraceEvent::_internal_virtio_video_resource_queue_done() const {
  return event_case() == kVirtioVideoResourceQueueDone
      ? *_impl_.event_.virtio_video_resource_queue_done_
      : reinterpret_cast<::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent&>(::perfetto::protos::_VirtioVideoResourceQueueDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent& FtraceEvent::virtio_video_resource_queue_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.virtio_video_resource_queue_done)
  return _internal_virtio_video_resource_queue_done();
}
inline ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* FtraceEvent::unsafe_arena_release_virtio_video_resource_queue_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.virtio_video_resource_queue_done)
  if (event_case() == kVirtioVideoResourceQueueDone) {
    clear_has_event();
    ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* temp = _impl_.event_.virtio_video_resource_queue_done_;
    _impl_.event_.virtio_video_resource_queue_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_virtio_video_resource_queue_done(::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* virtio_video_resource_queue_done) {
  clear_event();
  if (virtio_video_resource_queue_done) {
    set_has_virtio_video_resource_queue_done();
    _impl_.event_.virtio_video_resource_queue_done_ = virtio_video_resource_queue_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.virtio_video_resource_queue_done)
}
inline ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* FtraceEvent::_internal_mutable_virtio_video_resource_queue_done() {
  if (event_case() != kVirtioVideoResourceQueueDone) {
    clear_event();
    set_has_virtio_video_resource_queue_done();
    _impl_.event_.virtio_video_resource_queue_done_ = CreateMaybeMessage< ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.virtio_video_resource_queue_done_;
}
inline ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* FtraceEvent::mutable_virtio_video_resource_queue_done() {
  ::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* _msg = _internal_mutable_virtio_video_resource_queue_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.virtio_video_resource_queue_done)
  return _msg;
}

// .perfetto.protos.MmShrinkSlabStartFtraceEvent mm_shrink_slab_start = 443;
inline bool FtraceEvent::has_mm_shrink_slab_start() const {
  return event_case() == kMmShrinkSlabStart;
}
inline bool FtraceEvent::_internal_has_mm_shrink_slab_start() const {
  return event_case() == kMmShrinkSlabStart;
}
inline void FtraceEvent::set_has_mm_shrink_slab_start() {
  _impl_._oneof_case_[0] = kMmShrinkSlabStart;
}
inline ::perfetto::protos::MmShrinkSlabStartFtraceEvent* FtraceEvent::release_mm_shrink_slab_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_shrink_slab_start)
  if (event_case() == kMmShrinkSlabStart) {
    clear_has_event();
    ::perfetto::protos::MmShrinkSlabStartFtraceEvent* temp = _impl_.event_.mm_shrink_slab_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_shrink_slab_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmShrinkSlabStartFtraceEvent& FtraceEvent::_internal_mm_shrink_slab_start() const {
  return event_case() == kMmShrinkSlabStart
      ? *_impl_.event_.mm_shrink_slab_start_
      : reinterpret_cast<::perfetto::protos::MmShrinkSlabStartFtraceEvent&>(::perfetto::protos::_MmShrinkSlabStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmShrinkSlabStartFtraceEvent& FtraceEvent::mm_shrink_slab_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_shrink_slab_start)
  return _internal_mm_shrink_slab_start();
}
inline ::perfetto::protos::MmShrinkSlabStartFtraceEvent* FtraceEvent::unsafe_arena_release_mm_shrink_slab_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_shrink_slab_start)
  if (event_case() == kMmShrinkSlabStart) {
    clear_has_event();
    ::perfetto::protos::MmShrinkSlabStartFtraceEvent* temp = _impl_.event_.mm_shrink_slab_start_;
    _impl_.event_.mm_shrink_slab_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_shrink_slab_start(::perfetto::protos::MmShrinkSlabStartFtraceEvent* mm_shrink_slab_start) {
  clear_event();
  if (mm_shrink_slab_start) {
    set_has_mm_shrink_slab_start();
    _impl_.event_.mm_shrink_slab_start_ = mm_shrink_slab_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_shrink_slab_start)
}
inline ::perfetto::protos::MmShrinkSlabStartFtraceEvent* FtraceEvent::_internal_mutable_mm_shrink_slab_start() {
  if (event_case() != kMmShrinkSlabStart) {
    clear_event();
    set_has_mm_shrink_slab_start();
    _impl_.event_.mm_shrink_slab_start_ = CreateMaybeMessage< ::perfetto::protos::MmShrinkSlabStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_shrink_slab_start_;
}
inline ::perfetto::protos::MmShrinkSlabStartFtraceEvent* FtraceEvent::mutable_mm_shrink_slab_start() {
  ::perfetto::protos::MmShrinkSlabStartFtraceEvent* _msg = _internal_mutable_mm_shrink_slab_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_shrink_slab_start)
  return _msg;
}

// .perfetto.protos.MmShrinkSlabEndFtraceEvent mm_shrink_slab_end = 444;
inline bool FtraceEvent::has_mm_shrink_slab_end() const {
  return event_case() == kMmShrinkSlabEnd;
}
inline bool FtraceEvent::_internal_has_mm_shrink_slab_end() const {
  return event_case() == kMmShrinkSlabEnd;
}
inline void FtraceEvent::set_has_mm_shrink_slab_end() {
  _impl_._oneof_case_[0] = kMmShrinkSlabEnd;
}
inline ::perfetto::protos::MmShrinkSlabEndFtraceEvent* FtraceEvent::release_mm_shrink_slab_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mm_shrink_slab_end)
  if (event_case() == kMmShrinkSlabEnd) {
    clear_has_event();
    ::perfetto::protos::MmShrinkSlabEndFtraceEvent* temp = _impl_.event_.mm_shrink_slab_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mm_shrink_slab_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MmShrinkSlabEndFtraceEvent& FtraceEvent::_internal_mm_shrink_slab_end() const {
  return event_case() == kMmShrinkSlabEnd
      ? *_impl_.event_.mm_shrink_slab_end_
      : reinterpret_cast<::perfetto::protos::MmShrinkSlabEndFtraceEvent&>(::perfetto::protos::_MmShrinkSlabEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MmShrinkSlabEndFtraceEvent& FtraceEvent::mm_shrink_slab_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mm_shrink_slab_end)
  return _internal_mm_shrink_slab_end();
}
inline ::perfetto::protos::MmShrinkSlabEndFtraceEvent* FtraceEvent::unsafe_arena_release_mm_shrink_slab_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mm_shrink_slab_end)
  if (event_case() == kMmShrinkSlabEnd) {
    clear_has_event();
    ::perfetto::protos::MmShrinkSlabEndFtraceEvent* temp = _impl_.event_.mm_shrink_slab_end_;
    _impl_.event_.mm_shrink_slab_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mm_shrink_slab_end(::perfetto::protos::MmShrinkSlabEndFtraceEvent* mm_shrink_slab_end) {
  clear_event();
  if (mm_shrink_slab_end) {
    set_has_mm_shrink_slab_end();
    _impl_.event_.mm_shrink_slab_end_ = mm_shrink_slab_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mm_shrink_slab_end)
}
inline ::perfetto::protos::MmShrinkSlabEndFtraceEvent* FtraceEvent::_internal_mutable_mm_shrink_slab_end() {
  if (event_case() != kMmShrinkSlabEnd) {
    clear_event();
    set_has_mm_shrink_slab_end();
    _impl_.event_.mm_shrink_slab_end_ = CreateMaybeMessage< ::perfetto::protos::MmShrinkSlabEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mm_shrink_slab_end_;
}
inline ::perfetto::protos::MmShrinkSlabEndFtraceEvent* FtraceEvent::mutable_mm_shrink_slab_end() {
  ::perfetto::protos::MmShrinkSlabEndFtraceEvent* _msg = _internal_mutable_mm_shrink_slab_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mm_shrink_slab_end)
  return _msg;
}

// .perfetto.protos.TrustySmcFtraceEvent trusty_smc = 445;
inline bool FtraceEvent::has_trusty_smc() const {
  return event_case() == kTrustySmc;
}
inline bool FtraceEvent::_internal_has_trusty_smc() const {
  return event_case() == kTrustySmc;
}
inline void FtraceEvent::set_has_trusty_smc() {
  _impl_._oneof_case_[0] = kTrustySmc;
}
inline ::perfetto::protos::TrustySmcFtraceEvent* FtraceEvent::release_trusty_smc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_smc)
  if (event_case() == kTrustySmc) {
    clear_has_event();
    ::perfetto::protos::TrustySmcFtraceEvent* temp = _impl_.event_.trusty_smc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_smc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustySmcFtraceEvent& FtraceEvent::_internal_trusty_smc() const {
  return event_case() == kTrustySmc
      ? *_impl_.event_.trusty_smc_
      : reinterpret_cast<::perfetto::protos::TrustySmcFtraceEvent&>(::perfetto::protos::_TrustySmcFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustySmcFtraceEvent& FtraceEvent::trusty_smc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_smc)
  return _internal_trusty_smc();
}
inline ::perfetto::protos::TrustySmcFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_smc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_smc)
  if (event_case() == kTrustySmc) {
    clear_has_event();
    ::perfetto::protos::TrustySmcFtraceEvent* temp = _impl_.event_.trusty_smc_;
    _impl_.event_.trusty_smc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_smc(::perfetto::protos::TrustySmcFtraceEvent* trusty_smc) {
  clear_event();
  if (trusty_smc) {
    set_has_trusty_smc();
    _impl_.event_.trusty_smc_ = trusty_smc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_smc)
}
inline ::perfetto::protos::TrustySmcFtraceEvent* FtraceEvent::_internal_mutable_trusty_smc() {
  if (event_case() != kTrustySmc) {
    clear_event();
    set_has_trusty_smc();
    _impl_.event_.trusty_smc_ = CreateMaybeMessage< ::perfetto::protos::TrustySmcFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_smc_;
}
inline ::perfetto::protos::TrustySmcFtraceEvent* FtraceEvent::mutable_trusty_smc() {
  ::perfetto::protos::TrustySmcFtraceEvent* _msg = _internal_mutable_trusty_smc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_smc)
  return _msg;
}

// .perfetto.protos.TrustySmcDoneFtraceEvent trusty_smc_done = 446;
inline bool FtraceEvent::has_trusty_smc_done() const {
  return event_case() == kTrustySmcDone;
}
inline bool FtraceEvent::_internal_has_trusty_smc_done() const {
  return event_case() == kTrustySmcDone;
}
inline void FtraceEvent::set_has_trusty_smc_done() {
  _impl_._oneof_case_[0] = kTrustySmcDone;
}
inline ::perfetto::protos::TrustySmcDoneFtraceEvent* FtraceEvent::release_trusty_smc_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_smc_done)
  if (event_case() == kTrustySmcDone) {
    clear_has_event();
    ::perfetto::protos::TrustySmcDoneFtraceEvent* temp = _impl_.event_.trusty_smc_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_smc_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustySmcDoneFtraceEvent& FtraceEvent::_internal_trusty_smc_done() const {
  return event_case() == kTrustySmcDone
      ? *_impl_.event_.trusty_smc_done_
      : reinterpret_cast<::perfetto::protos::TrustySmcDoneFtraceEvent&>(::perfetto::protos::_TrustySmcDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustySmcDoneFtraceEvent& FtraceEvent::trusty_smc_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_smc_done)
  return _internal_trusty_smc_done();
}
inline ::perfetto::protos::TrustySmcDoneFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_smc_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_smc_done)
  if (event_case() == kTrustySmcDone) {
    clear_has_event();
    ::perfetto::protos::TrustySmcDoneFtraceEvent* temp = _impl_.event_.trusty_smc_done_;
    _impl_.event_.trusty_smc_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_smc_done(::perfetto::protos::TrustySmcDoneFtraceEvent* trusty_smc_done) {
  clear_event();
  if (trusty_smc_done) {
    set_has_trusty_smc_done();
    _impl_.event_.trusty_smc_done_ = trusty_smc_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_smc_done)
}
inline ::perfetto::protos::TrustySmcDoneFtraceEvent* FtraceEvent::_internal_mutable_trusty_smc_done() {
  if (event_case() != kTrustySmcDone) {
    clear_event();
    set_has_trusty_smc_done();
    _impl_.event_.trusty_smc_done_ = CreateMaybeMessage< ::perfetto::protos::TrustySmcDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_smc_done_;
}
inline ::perfetto::protos::TrustySmcDoneFtraceEvent* FtraceEvent::mutable_trusty_smc_done() {
  ::perfetto::protos::TrustySmcDoneFtraceEvent* _msg = _internal_mutable_trusty_smc_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_smc_done)
  return _msg;
}

// .perfetto.protos.TrustyStdCall32FtraceEvent trusty_std_call32 = 447;
inline bool FtraceEvent::has_trusty_std_call32() const {
  return event_case() == kTrustyStdCall32;
}
inline bool FtraceEvent::_internal_has_trusty_std_call32() const {
  return event_case() == kTrustyStdCall32;
}
inline void FtraceEvent::set_has_trusty_std_call32() {
  _impl_._oneof_case_[0] = kTrustyStdCall32;
}
inline ::perfetto::protos::TrustyStdCall32FtraceEvent* FtraceEvent::release_trusty_std_call32() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_std_call32)
  if (event_case() == kTrustyStdCall32) {
    clear_has_event();
    ::perfetto::protos::TrustyStdCall32FtraceEvent* temp = _impl_.event_.trusty_std_call32_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_std_call32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyStdCall32FtraceEvent& FtraceEvent::_internal_trusty_std_call32() const {
  return event_case() == kTrustyStdCall32
      ? *_impl_.event_.trusty_std_call32_
      : reinterpret_cast<::perfetto::protos::TrustyStdCall32FtraceEvent&>(::perfetto::protos::_TrustyStdCall32FtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyStdCall32FtraceEvent& FtraceEvent::trusty_std_call32() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_std_call32)
  return _internal_trusty_std_call32();
}
inline ::perfetto::protos::TrustyStdCall32FtraceEvent* FtraceEvent::unsafe_arena_release_trusty_std_call32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_std_call32)
  if (event_case() == kTrustyStdCall32) {
    clear_has_event();
    ::perfetto::protos::TrustyStdCall32FtraceEvent* temp = _impl_.event_.trusty_std_call32_;
    _impl_.event_.trusty_std_call32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_std_call32(::perfetto::protos::TrustyStdCall32FtraceEvent* trusty_std_call32) {
  clear_event();
  if (trusty_std_call32) {
    set_has_trusty_std_call32();
    _impl_.event_.trusty_std_call32_ = trusty_std_call32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_std_call32)
}
inline ::perfetto::protos::TrustyStdCall32FtraceEvent* FtraceEvent::_internal_mutable_trusty_std_call32() {
  if (event_case() != kTrustyStdCall32) {
    clear_event();
    set_has_trusty_std_call32();
    _impl_.event_.trusty_std_call32_ = CreateMaybeMessage< ::perfetto::protos::TrustyStdCall32FtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_std_call32_;
}
inline ::perfetto::protos::TrustyStdCall32FtraceEvent* FtraceEvent::mutable_trusty_std_call32() {
  ::perfetto::protos::TrustyStdCall32FtraceEvent* _msg = _internal_mutable_trusty_std_call32();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_std_call32)
  return _msg;
}

// .perfetto.protos.TrustyStdCall32DoneFtraceEvent trusty_std_call32_done = 448;
inline bool FtraceEvent::has_trusty_std_call32_done() const {
  return event_case() == kTrustyStdCall32Done;
}
inline bool FtraceEvent::_internal_has_trusty_std_call32_done() const {
  return event_case() == kTrustyStdCall32Done;
}
inline void FtraceEvent::set_has_trusty_std_call32_done() {
  _impl_._oneof_case_[0] = kTrustyStdCall32Done;
}
inline ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* FtraceEvent::release_trusty_std_call32_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_std_call32_done)
  if (event_case() == kTrustyStdCall32Done) {
    clear_has_event();
    ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* temp = _impl_.event_.trusty_std_call32_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_std_call32_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyStdCall32DoneFtraceEvent& FtraceEvent::_internal_trusty_std_call32_done() const {
  return event_case() == kTrustyStdCall32Done
      ? *_impl_.event_.trusty_std_call32_done_
      : reinterpret_cast<::perfetto::protos::TrustyStdCall32DoneFtraceEvent&>(::perfetto::protos::_TrustyStdCall32DoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyStdCall32DoneFtraceEvent& FtraceEvent::trusty_std_call32_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_std_call32_done)
  return _internal_trusty_std_call32_done();
}
inline ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_std_call32_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_std_call32_done)
  if (event_case() == kTrustyStdCall32Done) {
    clear_has_event();
    ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* temp = _impl_.event_.trusty_std_call32_done_;
    _impl_.event_.trusty_std_call32_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_std_call32_done(::perfetto::protos::TrustyStdCall32DoneFtraceEvent* trusty_std_call32_done) {
  clear_event();
  if (trusty_std_call32_done) {
    set_has_trusty_std_call32_done();
    _impl_.event_.trusty_std_call32_done_ = trusty_std_call32_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_std_call32_done)
}
inline ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* FtraceEvent::_internal_mutable_trusty_std_call32_done() {
  if (event_case() != kTrustyStdCall32Done) {
    clear_event();
    set_has_trusty_std_call32_done();
    _impl_.event_.trusty_std_call32_done_ = CreateMaybeMessage< ::perfetto::protos::TrustyStdCall32DoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_std_call32_done_;
}
inline ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* FtraceEvent::mutable_trusty_std_call32_done() {
  ::perfetto::protos::TrustyStdCall32DoneFtraceEvent* _msg = _internal_mutable_trusty_std_call32_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_std_call32_done)
  return _msg;
}

// .perfetto.protos.TrustyShareMemoryFtraceEvent trusty_share_memory = 449;
inline bool FtraceEvent::has_trusty_share_memory() const {
  return event_case() == kTrustyShareMemory;
}
inline bool FtraceEvent::_internal_has_trusty_share_memory() const {
  return event_case() == kTrustyShareMemory;
}
inline void FtraceEvent::set_has_trusty_share_memory() {
  _impl_._oneof_case_[0] = kTrustyShareMemory;
}
inline ::perfetto::protos::TrustyShareMemoryFtraceEvent* FtraceEvent::release_trusty_share_memory() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_share_memory)
  if (event_case() == kTrustyShareMemory) {
    clear_has_event();
    ::perfetto::protos::TrustyShareMemoryFtraceEvent* temp = _impl_.event_.trusty_share_memory_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_share_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyShareMemoryFtraceEvent& FtraceEvent::_internal_trusty_share_memory() const {
  return event_case() == kTrustyShareMemory
      ? *_impl_.event_.trusty_share_memory_
      : reinterpret_cast<::perfetto::protos::TrustyShareMemoryFtraceEvent&>(::perfetto::protos::_TrustyShareMemoryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyShareMemoryFtraceEvent& FtraceEvent::trusty_share_memory() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_share_memory)
  return _internal_trusty_share_memory();
}
inline ::perfetto::protos::TrustyShareMemoryFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_share_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_share_memory)
  if (event_case() == kTrustyShareMemory) {
    clear_has_event();
    ::perfetto::protos::TrustyShareMemoryFtraceEvent* temp = _impl_.event_.trusty_share_memory_;
    _impl_.event_.trusty_share_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_share_memory(::perfetto::protos::TrustyShareMemoryFtraceEvent* trusty_share_memory) {
  clear_event();
  if (trusty_share_memory) {
    set_has_trusty_share_memory();
    _impl_.event_.trusty_share_memory_ = trusty_share_memory;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_share_memory)
}
inline ::perfetto::protos::TrustyShareMemoryFtraceEvent* FtraceEvent::_internal_mutable_trusty_share_memory() {
  if (event_case() != kTrustyShareMemory) {
    clear_event();
    set_has_trusty_share_memory();
    _impl_.event_.trusty_share_memory_ = CreateMaybeMessage< ::perfetto::protos::TrustyShareMemoryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_share_memory_;
}
inline ::perfetto::protos::TrustyShareMemoryFtraceEvent* FtraceEvent::mutable_trusty_share_memory() {
  ::perfetto::protos::TrustyShareMemoryFtraceEvent* _msg = _internal_mutable_trusty_share_memory();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_share_memory)
  return _msg;
}

// .perfetto.protos.TrustyShareMemoryDoneFtraceEvent trusty_share_memory_done = 450;
inline bool FtraceEvent::has_trusty_share_memory_done() const {
  return event_case() == kTrustyShareMemoryDone;
}
inline bool FtraceEvent::_internal_has_trusty_share_memory_done() const {
  return event_case() == kTrustyShareMemoryDone;
}
inline void FtraceEvent::set_has_trusty_share_memory_done() {
  _impl_._oneof_case_[0] = kTrustyShareMemoryDone;
}
inline ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* FtraceEvent::release_trusty_share_memory_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_share_memory_done)
  if (event_case() == kTrustyShareMemoryDone) {
    clear_has_event();
    ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* temp = _impl_.event_.trusty_share_memory_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_share_memory_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent& FtraceEvent::_internal_trusty_share_memory_done() const {
  return event_case() == kTrustyShareMemoryDone
      ? *_impl_.event_.trusty_share_memory_done_
      : reinterpret_cast<::perfetto::protos::TrustyShareMemoryDoneFtraceEvent&>(::perfetto::protos::_TrustyShareMemoryDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent& FtraceEvent::trusty_share_memory_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_share_memory_done)
  return _internal_trusty_share_memory_done();
}
inline ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_share_memory_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_share_memory_done)
  if (event_case() == kTrustyShareMemoryDone) {
    clear_has_event();
    ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* temp = _impl_.event_.trusty_share_memory_done_;
    _impl_.event_.trusty_share_memory_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_share_memory_done(::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* trusty_share_memory_done) {
  clear_event();
  if (trusty_share_memory_done) {
    set_has_trusty_share_memory_done();
    _impl_.event_.trusty_share_memory_done_ = trusty_share_memory_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_share_memory_done)
}
inline ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* FtraceEvent::_internal_mutable_trusty_share_memory_done() {
  if (event_case() != kTrustyShareMemoryDone) {
    clear_event();
    set_has_trusty_share_memory_done();
    _impl_.event_.trusty_share_memory_done_ = CreateMaybeMessage< ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_share_memory_done_;
}
inline ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* FtraceEvent::mutable_trusty_share_memory_done() {
  ::perfetto::protos::TrustyShareMemoryDoneFtraceEvent* _msg = _internal_mutable_trusty_share_memory_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_share_memory_done)
  return _msg;
}

// .perfetto.protos.TrustyReclaimMemoryFtraceEvent trusty_reclaim_memory = 451;
inline bool FtraceEvent::has_trusty_reclaim_memory() const {
  return event_case() == kTrustyReclaimMemory;
}
inline bool FtraceEvent::_internal_has_trusty_reclaim_memory() const {
  return event_case() == kTrustyReclaimMemory;
}
inline void FtraceEvent::set_has_trusty_reclaim_memory() {
  _impl_._oneof_case_[0] = kTrustyReclaimMemory;
}
inline ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* FtraceEvent::release_trusty_reclaim_memory() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_reclaim_memory)
  if (event_case() == kTrustyReclaimMemory) {
    clear_has_event();
    ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* temp = _impl_.event_.trusty_reclaim_memory_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_reclaim_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyReclaimMemoryFtraceEvent& FtraceEvent::_internal_trusty_reclaim_memory() const {
  return event_case() == kTrustyReclaimMemory
      ? *_impl_.event_.trusty_reclaim_memory_
      : reinterpret_cast<::perfetto::protos::TrustyReclaimMemoryFtraceEvent&>(::perfetto::protos::_TrustyReclaimMemoryFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyReclaimMemoryFtraceEvent& FtraceEvent::trusty_reclaim_memory() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_reclaim_memory)
  return _internal_trusty_reclaim_memory();
}
inline ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_reclaim_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_reclaim_memory)
  if (event_case() == kTrustyReclaimMemory) {
    clear_has_event();
    ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* temp = _impl_.event_.trusty_reclaim_memory_;
    _impl_.event_.trusty_reclaim_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_reclaim_memory(::perfetto::protos::TrustyReclaimMemoryFtraceEvent* trusty_reclaim_memory) {
  clear_event();
  if (trusty_reclaim_memory) {
    set_has_trusty_reclaim_memory();
    _impl_.event_.trusty_reclaim_memory_ = trusty_reclaim_memory;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_reclaim_memory)
}
inline ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* FtraceEvent::_internal_mutable_trusty_reclaim_memory() {
  if (event_case() != kTrustyReclaimMemory) {
    clear_event();
    set_has_trusty_reclaim_memory();
    _impl_.event_.trusty_reclaim_memory_ = CreateMaybeMessage< ::perfetto::protos::TrustyReclaimMemoryFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_reclaim_memory_;
}
inline ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* FtraceEvent::mutable_trusty_reclaim_memory() {
  ::perfetto::protos::TrustyReclaimMemoryFtraceEvent* _msg = _internal_mutable_trusty_reclaim_memory();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_reclaim_memory)
  return _msg;
}

// .perfetto.protos.TrustyReclaimMemoryDoneFtraceEvent trusty_reclaim_memory_done = 452;
inline bool FtraceEvent::has_trusty_reclaim_memory_done() const {
  return event_case() == kTrustyReclaimMemoryDone;
}
inline bool FtraceEvent::_internal_has_trusty_reclaim_memory_done() const {
  return event_case() == kTrustyReclaimMemoryDone;
}
inline void FtraceEvent::set_has_trusty_reclaim_memory_done() {
  _impl_._oneof_case_[0] = kTrustyReclaimMemoryDone;
}
inline ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* FtraceEvent::release_trusty_reclaim_memory_done() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_reclaim_memory_done)
  if (event_case() == kTrustyReclaimMemoryDone) {
    clear_has_event();
    ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* temp = _impl_.event_.trusty_reclaim_memory_done_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_reclaim_memory_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent& FtraceEvent::_internal_trusty_reclaim_memory_done() const {
  return event_case() == kTrustyReclaimMemoryDone
      ? *_impl_.event_.trusty_reclaim_memory_done_
      : reinterpret_cast<::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent&>(::perfetto::protos::_TrustyReclaimMemoryDoneFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent& FtraceEvent::trusty_reclaim_memory_done() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_reclaim_memory_done)
  return _internal_trusty_reclaim_memory_done();
}
inline ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_reclaim_memory_done() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_reclaim_memory_done)
  if (event_case() == kTrustyReclaimMemoryDone) {
    clear_has_event();
    ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* temp = _impl_.event_.trusty_reclaim_memory_done_;
    _impl_.event_.trusty_reclaim_memory_done_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_reclaim_memory_done(::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* trusty_reclaim_memory_done) {
  clear_event();
  if (trusty_reclaim_memory_done) {
    set_has_trusty_reclaim_memory_done();
    _impl_.event_.trusty_reclaim_memory_done_ = trusty_reclaim_memory_done;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_reclaim_memory_done)
}
inline ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* FtraceEvent::_internal_mutable_trusty_reclaim_memory_done() {
  if (event_case() != kTrustyReclaimMemoryDone) {
    clear_event();
    set_has_trusty_reclaim_memory_done();
    _impl_.event_.trusty_reclaim_memory_done_ = CreateMaybeMessage< ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_reclaim_memory_done_;
}
inline ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* FtraceEvent::mutable_trusty_reclaim_memory_done() {
  ::perfetto::protos::TrustyReclaimMemoryDoneFtraceEvent* _msg = _internal_mutable_trusty_reclaim_memory_done();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_reclaim_memory_done)
  return _msg;
}

// .perfetto.protos.TrustyIrqFtraceEvent trusty_irq = 453;
inline bool FtraceEvent::has_trusty_irq() const {
  return event_case() == kTrustyIrq;
}
inline bool FtraceEvent::_internal_has_trusty_irq() const {
  return event_case() == kTrustyIrq;
}
inline void FtraceEvent::set_has_trusty_irq() {
  _impl_._oneof_case_[0] = kTrustyIrq;
}
inline ::perfetto::protos::TrustyIrqFtraceEvent* FtraceEvent::release_trusty_irq() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_irq)
  if (event_case() == kTrustyIrq) {
    clear_has_event();
    ::perfetto::protos::TrustyIrqFtraceEvent* temp = _impl_.event_.trusty_irq_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIrqFtraceEvent& FtraceEvent::_internal_trusty_irq() const {
  return event_case() == kTrustyIrq
      ? *_impl_.event_.trusty_irq_
      : reinterpret_cast<::perfetto::protos::TrustyIrqFtraceEvent&>(::perfetto::protos::_TrustyIrqFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIrqFtraceEvent& FtraceEvent::trusty_irq() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_irq)
  return _internal_trusty_irq();
}
inline ::perfetto::protos::TrustyIrqFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_irq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_irq)
  if (event_case() == kTrustyIrq) {
    clear_has_event();
    ::perfetto::protos::TrustyIrqFtraceEvent* temp = _impl_.event_.trusty_irq_;
    _impl_.event_.trusty_irq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_irq(::perfetto::protos::TrustyIrqFtraceEvent* trusty_irq) {
  clear_event();
  if (trusty_irq) {
    set_has_trusty_irq();
    _impl_.event_.trusty_irq_ = trusty_irq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_irq)
}
inline ::perfetto::protos::TrustyIrqFtraceEvent* FtraceEvent::_internal_mutable_trusty_irq() {
  if (event_case() != kTrustyIrq) {
    clear_event();
    set_has_trusty_irq();
    _impl_.event_.trusty_irq_ = CreateMaybeMessage< ::perfetto::protos::TrustyIrqFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_irq_;
}
inline ::perfetto::protos::TrustyIrqFtraceEvent* FtraceEvent::mutable_trusty_irq() {
  ::perfetto::protos::TrustyIrqFtraceEvent* _msg = _internal_mutable_trusty_irq();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_irq)
  return _msg;
}

// .perfetto.protos.TrustyIpcHandleEventFtraceEvent trusty_ipc_handle_event = 454;
inline bool FtraceEvent::has_trusty_ipc_handle_event() const {
  return event_case() == kTrustyIpcHandleEvent;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_handle_event() const {
  return event_case() == kTrustyIpcHandleEvent;
}
inline void FtraceEvent::set_has_trusty_ipc_handle_event() {
  _impl_._oneof_case_[0] = kTrustyIpcHandleEvent;
}
inline ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* FtraceEvent::release_trusty_ipc_handle_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_handle_event)
  if (event_case() == kTrustyIpcHandleEvent) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* temp = _impl_.event_.trusty_ipc_handle_event_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_handle_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcHandleEventFtraceEvent& FtraceEvent::_internal_trusty_ipc_handle_event() const {
  return event_case() == kTrustyIpcHandleEvent
      ? *_impl_.event_.trusty_ipc_handle_event_
      : reinterpret_cast<::perfetto::protos::TrustyIpcHandleEventFtraceEvent&>(::perfetto::protos::_TrustyIpcHandleEventFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcHandleEventFtraceEvent& FtraceEvent::trusty_ipc_handle_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_handle_event)
  return _internal_trusty_ipc_handle_event();
}
inline ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_handle_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_handle_event)
  if (event_case() == kTrustyIpcHandleEvent) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* temp = _impl_.event_.trusty_ipc_handle_event_;
    _impl_.event_.trusty_ipc_handle_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_handle_event(::perfetto::protos::TrustyIpcHandleEventFtraceEvent* trusty_ipc_handle_event) {
  clear_event();
  if (trusty_ipc_handle_event) {
    set_has_trusty_ipc_handle_event();
    _impl_.event_.trusty_ipc_handle_event_ = trusty_ipc_handle_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_handle_event)
}
inline ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_handle_event() {
  if (event_case() != kTrustyIpcHandleEvent) {
    clear_event();
    set_has_trusty_ipc_handle_event();
    _impl_.event_.trusty_ipc_handle_event_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcHandleEventFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_handle_event_;
}
inline ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* FtraceEvent::mutable_trusty_ipc_handle_event() {
  ::perfetto::protos::TrustyIpcHandleEventFtraceEvent* _msg = _internal_mutable_trusty_ipc_handle_event();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_handle_event)
  return _msg;
}

// .perfetto.protos.TrustyIpcConnectFtraceEvent trusty_ipc_connect = 455;
inline bool FtraceEvent::has_trusty_ipc_connect() const {
  return event_case() == kTrustyIpcConnect;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_connect() const {
  return event_case() == kTrustyIpcConnect;
}
inline void FtraceEvent::set_has_trusty_ipc_connect() {
  _impl_._oneof_case_[0] = kTrustyIpcConnect;
}
inline ::perfetto::protos::TrustyIpcConnectFtraceEvent* FtraceEvent::release_trusty_ipc_connect() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_connect)
  if (event_case() == kTrustyIpcConnect) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcConnectFtraceEvent* temp = _impl_.event_.trusty_ipc_connect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcConnectFtraceEvent& FtraceEvent::_internal_trusty_ipc_connect() const {
  return event_case() == kTrustyIpcConnect
      ? *_impl_.event_.trusty_ipc_connect_
      : reinterpret_cast<::perfetto::protos::TrustyIpcConnectFtraceEvent&>(::perfetto::protos::_TrustyIpcConnectFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcConnectFtraceEvent& FtraceEvent::trusty_ipc_connect() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_connect)
  return _internal_trusty_ipc_connect();
}
inline ::perfetto::protos::TrustyIpcConnectFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_connect)
  if (event_case() == kTrustyIpcConnect) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcConnectFtraceEvent* temp = _impl_.event_.trusty_ipc_connect_;
    _impl_.event_.trusty_ipc_connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_connect(::perfetto::protos::TrustyIpcConnectFtraceEvent* trusty_ipc_connect) {
  clear_event();
  if (trusty_ipc_connect) {
    set_has_trusty_ipc_connect();
    _impl_.event_.trusty_ipc_connect_ = trusty_ipc_connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_connect)
}
inline ::perfetto::protos::TrustyIpcConnectFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_connect() {
  if (event_case() != kTrustyIpcConnect) {
    clear_event();
    set_has_trusty_ipc_connect();
    _impl_.event_.trusty_ipc_connect_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcConnectFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_connect_;
}
inline ::perfetto::protos::TrustyIpcConnectFtraceEvent* FtraceEvent::mutable_trusty_ipc_connect() {
  ::perfetto::protos::TrustyIpcConnectFtraceEvent* _msg = _internal_mutable_trusty_ipc_connect();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_connect)
  return _msg;
}

// .perfetto.protos.TrustyIpcConnectEndFtraceEvent trusty_ipc_connect_end = 456;
inline bool FtraceEvent::has_trusty_ipc_connect_end() const {
  return event_case() == kTrustyIpcConnectEnd;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_connect_end() const {
  return event_case() == kTrustyIpcConnectEnd;
}
inline void FtraceEvent::set_has_trusty_ipc_connect_end() {
  _impl_._oneof_case_[0] = kTrustyIpcConnectEnd;
}
inline ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* FtraceEvent::release_trusty_ipc_connect_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_connect_end)
  if (event_case() == kTrustyIpcConnectEnd) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* temp = _impl_.event_.trusty_ipc_connect_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_connect_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcConnectEndFtraceEvent& FtraceEvent::_internal_trusty_ipc_connect_end() const {
  return event_case() == kTrustyIpcConnectEnd
      ? *_impl_.event_.trusty_ipc_connect_end_
      : reinterpret_cast<::perfetto::protos::TrustyIpcConnectEndFtraceEvent&>(::perfetto::protos::_TrustyIpcConnectEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcConnectEndFtraceEvent& FtraceEvent::trusty_ipc_connect_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_connect_end)
  return _internal_trusty_ipc_connect_end();
}
inline ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_connect_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_connect_end)
  if (event_case() == kTrustyIpcConnectEnd) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* temp = _impl_.event_.trusty_ipc_connect_end_;
    _impl_.event_.trusty_ipc_connect_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_connect_end(::perfetto::protos::TrustyIpcConnectEndFtraceEvent* trusty_ipc_connect_end) {
  clear_event();
  if (trusty_ipc_connect_end) {
    set_has_trusty_ipc_connect_end();
    _impl_.event_.trusty_ipc_connect_end_ = trusty_ipc_connect_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_connect_end)
}
inline ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_connect_end() {
  if (event_case() != kTrustyIpcConnectEnd) {
    clear_event();
    set_has_trusty_ipc_connect_end();
    _impl_.event_.trusty_ipc_connect_end_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcConnectEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_connect_end_;
}
inline ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* FtraceEvent::mutable_trusty_ipc_connect_end() {
  ::perfetto::protos::TrustyIpcConnectEndFtraceEvent* _msg = _internal_mutable_trusty_ipc_connect_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_connect_end)
  return _msg;
}

// .perfetto.protos.TrustyIpcWriteFtraceEvent trusty_ipc_write = 457;
inline bool FtraceEvent::has_trusty_ipc_write() const {
  return event_case() == kTrustyIpcWrite;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_write() const {
  return event_case() == kTrustyIpcWrite;
}
inline void FtraceEvent::set_has_trusty_ipc_write() {
  _impl_._oneof_case_[0] = kTrustyIpcWrite;
}
inline ::perfetto::protos::TrustyIpcWriteFtraceEvent* FtraceEvent::release_trusty_ipc_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_write)
  if (event_case() == kTrustyIpcWrite) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcWriteFtraceEvent* temp = _impl_.event_.trusty_ipc_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcWriteFtraceEvent& FtraceEvent::_internal_trusty_ipc_write() const {
  return event_case() == kTrustyIpcWrite
      ? *_impl_.event_.trusty_ipc_write_
      : reinterpret_cast<::perfetto::protos::TrustyIpcWriteFtraceEvent&>(::perfetto::protos::_TrustyIpcWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcWriteFtraceEvent& FtraceEvent::trusty_ipc_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_write)
  return _internal_trusty_ipc_write();
}
inline ::perfetto::protos::TrustyIpcWriteFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_write)
  if (event_case() == kTrustyIpcWrite) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcWriteFtraceEvent* temp = _impl_.event_.trusty_ipc_write_;
    _impl_.event_.trusty_ipc_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_write(::perfetto::protos::TrustyIpcWriteFtraceEvent* trusty_ipc_write) {
  clear_event();
  if (trusty_ipc_write) {
    set_has_trusty_ipc_write();
    _impl_.event_.trusty_ipc_write_ = trusty_ipc_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_write)
}
inline ::perfetto::protos::TrustyIpcWriteFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_write() {
  if (event_case() != kTrustyIpcWrite) {
    clear_event();
    set_has_trusty_ipc_write();
    _impl_.event_.trusty_ipc_write_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_write_;
}
inline ::perfetto::protos::TrustyIpcWriteFtraceEvent* FtraceEvent::mutable_trusty_ipc_write() {
  ::perfetto::protos::TrustyIpcWriteFtraceEvent* _msg = _internal_mutable_trusty_ipc_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_write)
  return _msg;
}

// .perfetto.protos.TrustyIpcPollFtraceEvent trusty_ipc_poll = 458;
inline bool FtraceEvent::has_trusty_ipc_poll() const {
  return event_case() == kTrustyIpcPoll;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_poll() const {
  return event_case() == kTrustyIpcPoll;
}
inline void FtraceEvent::set_has_trusty_ipc_poll() {
  _impl_._oneof_case_[0] = kTrustyIpcPoll;
}
inline ::perfetto::protos::TrustyIpcPollFtraceEvent* FtraceEvent::release_trusty_ipc_poll() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_poll)
  if (event_case() == kTrustyIpcPoll) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcPollFtraceEvent* temp = _impl_.event_.trusty_ipc_poll_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_poll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcPollFtraceEvent& FtraceEvent::_internal_trusty_ipc_poll() const {
  return event_case() == kTrustyIpcPoll
      ? *_impl_.event_.trusty_ipc_poll_
      : reinterpret_cast<::perfetto::protos::TrustyIpcPollFtraceEvent&>(::perfetto::protos::_TrustyIpcPollFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcPollFtraceEvent& FtraceEvent::trusty_ipc_poll() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_poll)
  return _internal_trusty_ipc_poll();
}
inline ::perfetto::protos::TrustyIpcPollFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_poll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_poll)
  if (event_case() == kTrustyIpcPoll) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcPollFtraceEvent* temp = _impl_.event_.trusty_ipc_poll_;
    _impl_.event_.trusty_ipc_poll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_poll(::perfetto::protos::TrustyIpcPollFtraceEvent* trusty_ipc_poll) {
  clear_event();
  if (trusty_ipc_poll) {
    set_has_trusty_ipc_poll();
    _impl_.event_.trusty_ipc_poll_ = trusty_ipc_poll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_poll)
}
inline ::perfetto::protos::TrustyIpcPollFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_poll() {
  if (event_case() != kTrustyIpcPoll) {
    clear_event();
    set_has_trusty_ipc_poll();
    _impl_.event_.trusty_ipc_poll_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcPollFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_poll_;
}
inline ::perfetto::protos::TrustyIpcPollFtraceEvent* FtraceEvent::mutable_trusty_ipc_poll() {
  ::perfetto::protos::TrustyIpcPollFtraceEvent* _msg = _internal_mutable_trusty_ipc_poll();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_poll)
  return _msg;
}

// .perfetto.protos.TrustyIpcReadFtraceEvent trusty_ipc_read = 460;
inline bool FtraceEvent::has_trusty_ipc_read() const {
  return event_case() == kTrustyIpcRead;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_read() const {
  return event_case() == kTrustyIpcRead;
}
inline void FtraceEvent::set_has_trusty_ipc_read() {
  _impl_._oneof_case_[0] = kTrustyIpcRead;
}
inline ::perfetto::protos::TrustyIpcReadFtraceEvent* FtraceEvent::release_trusty_ipc_read() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_read)
  if (event_case() == kTrustyIpcRead) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcReadFtraceEvent* temp = _impl_.event_.trusty_ipc_read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcReadFtraceEvent& FtraceEvent::_internal_trusty_ipc_read() const {
  return event_case() == kTrustyIpcRead
      ? *_impl_.event_.trusty_ipc_read_
      : reinterpret_cast<::perfetto::protos::TrustyIpcReadFtraceEvent&>(::perfetto::protos::_TrustyIpcReadFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcReadFtraceEvent& FtraceEvent::trusty_ipc_read() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_read)
  return _internal_trusty_ipc_read();
}
inline ::perfetto::protos::TrustyIpcReadFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_read)
  if (event_case() == kTrustyIpcRead) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcReadFtraceEvent* temp = _impl_.event_.trusty_ipc_read_;
    _impl_.event_.trusty_ipc_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_read(::perfetto::protos::TrustyIpcReadFtraceEvent* trusty_ipc_read) {
  clear_event();
  if (trusty_ipc_read) {
    set_has_trusty_ipc_read();
    _impl_.event_.trusty_ipc_read_ = trusty_ipc_read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_read)
}
inline ::perfetto::protos::TrustyIpcReadFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_read() {
  if (event_case() != kTrustyIpcRead) {
    clear_event();
    set_has_trusty_ipc_read();
    _impl_.event_.trusty_ipc_read_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcReadFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_read_;
}
inline ::perfetto::protos::TrustyIpcReadFtraceEvent* FtraceEvent::mutable_trusty_ipc_read() {
  ::perfetto::protos::TrustyIpcReadFtraceEvent* _msg = _internal_mutable_trusty_ipc_read();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_read)
  return _msg;
}

// .perfetto.protos.TrustyIpcReadEndFtraceEvent trusty_ipc_read_end = 461;
inline bool FtraceEvent::has_trusty_ipc_read_end() const {
  return event_case() == kTrustyIpcReadEnd;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_read_end() const {
  return event_case() == kTrustyIpcReadEnd;
}
inline void FtraceEvent::set_has_trusty_ipc_read_end() {
  _impl_._oneof_case_[0] = kTrustyIpcReadEnd;
}
inline ::perfetto::protos::TrustyIpcReadEndFtraceEvent* FtraceEvent::release_trusty_ipc_read_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_read_end)
  if (event_case() == kTrustyIpcReadEnd) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcReadEndFtraceEvent* temp = _impl_.event_.trusty_ipc_read_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_read_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcReadEndFtraceEvent& FtraceEvent::_internal_trusty_ipc_read_end() const {
  return event_case() == kTrustyIpcReadEnd
      ? *_impl_.event_.trusty_ipc_read_end_
      : reinterpret_cast<::perfetto::protos::TrustyIpcReadEndFtraceEvent&>(::perfetto::protos::_TrustyIpcReadEndFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcReadEndFtraceEvent& FtraceEvent::trusty_ipc_read_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_read_end)
  return _internal_trusty_ipc_read_end();
}
inline ::perfetto::protos::TrustyIpcReadEndFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_read_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_read_end)
  if (event_case() == kTrustyIpcReadEnd) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcReadEndFtraceEvent* temp = _impl_.event_.trusty_ipc_read_end_;
    _impl_.event_.trusty_ipc_read_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_read_end(::perfetto::protos::TrustyIpcReadEndFtraceEvent* trusty_ipc_read_end) {
  clear_event();
  if (trusty_ipc_read_end) {
    set_has_trusty_ipc_read_end();
    _impl_.event_.trusty_ipc_read_end_ = trusty_ipc_read_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_read_end)
}
inline ::perfetto::protos::TrustyIpcReadEndFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_read_end() {
  if (event_case() != kTrustyIpcReadEnd) {
    clear_event();
    set_has_trusty_ipc_read_end();
    _impl_.event_.trusty_ipc_read_end_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcReadEndFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_read_end_;
}
inline ::perfetto::protos::TrustyIpcReadEndFtraceEvent* FtraceEvent::mutable_trusty_ipc_read_end() {
  ::perfetto::protos::TrustyIpcReadEndFtraceEvent* _msg = _internal_mutable_trusty_ipc_read_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_read_end)
  return _msg;
}

// .perfetto.protos.TrustyIpcRxFtraceEvent trusty_ipc_rx = 462;
inline bool FtraceEvent::has_trusty_ipc_rx() const {
  return event_case() == kTrustyIpcRx;
}
inline bool FtraceEvent::_internal_has_trusty_ipc_rx() const {
  return event_case() == kTrustyIpcRx;
}
inline void FtraceEvent::set_has_trusty_ipc_rx() {
  _impl_._oneof_case_[0] = kTrustyIpcRx;
}
inline ::perfetto::protos::TrustyIpcRxFtraceEvent* FtraceEvent::release_trusty_ipc_rx() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_ipc_rx)
  if (event_case() == kTrustyIpcRx) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcRxFtraceEvent* temp = _impl_.event_.trusty_ipc_rx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_ipc_rx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyIpcRxFtraceEvent& FtraceEvent::_internal_trusty_ipc_rx() const {
  return event_case() == kTrustyIpcRx
      ? *_impl_.event_.trusty_ipc_rx_
      : reinterpret_cast<::perfetto::protos::TrustyIpcRxFtraceEvent&>(::perfetto::protos::_TrustyIpcRxFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyIpcRxFtraceEvent& FtraceEvent::trusty_ipc_rx() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_ipc_rx)
  return _internal_trusty_ipc_rx();
}
inline ::perfetto::protos::TrustyIpcRxFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_ipc_rx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_ipc_rx)
  if (event_case() == kTrustyIpcRx) {
    clear_has_event();
    ::perfetto::protos::TrustyIpcRxFtraceEvent* temp = _impl_.event_.trusty_ipc_rx_;
    _impl_.event_.trusty_ipc_rx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_ipc_rx(::perfetto::protos::TrustyIpcRxFtraceEvent* trusty_ipc_rx) {
  clear_event();
  if (trusty_ipc_rx) {
    set_has_trusty_ipc_rx();
    _impl_.event_.trusty_ipc_rx_ = trusty_ipc_rx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_ipc_rx)
}
inline ::perfetto::protos::TrustyIpcRxFtraceEvent* FtraceEvent::_internal_mutable_trusty_ipc_rx() {
  if (event_case() != kTrustyIpcRx) {
    clear_event();
    set_has_trusty_ipc_rx();
    _impl_.event_.trusty_ipc_rx_ = CreateMaybeMessage< ::perfetto::protos::TrustyIpcRxFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_ipc_rx_;
}
inline ::perfetto::protos::TrustyIpcRxFtraceEvent* FtraceEvent::mutable_trusty_ipc_rx() {
  ::perfetto::protos::TrustyIpcRxFtraceEvent* _msg = _internal_mutable_trusty_ipc_rx();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_ipc_rx)
  return _msg;
}

// .perfetto.protos.TrustyEnqueueNopFtraceEvent trusty_enqueue_nop = 464;
inline bool FtraceEvent::has_trusty_enqueue_nop() const {
  return event_case() == kTrustyEnqueueNop;
}
inline bool FtraceEvent::_internal_has_trusty_enqueue_nop() const {
  return event_case() == kTrustyEnqueueNop;
}
inline void FtraceEvent::set_has_trusty_enqueue_nop() {
  _impl_._oneof_case_[0] = kTrustyEnqueueNop;
}
inline ::perfetto::protos::TrustyEnqueueNopFtraceEvent* FtraceEvent::release_trusty_enqueue_nop() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.trusty_enqueue_nop)
  if (event_case() == kTrustyEnqueueNop) {
    clear_has_event();
    ::perfetto::protos::TrustyEnqueueNopFtraceEvent* temp = _impl_.event_.trusty_enqueue_nop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.trusty_enqueue_nop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::TrustyEnqueueNopFtraceEvent& FtraceEvent::_internal_trusty_enqueue_nop() const {
  return event_case() == kTrustyEnqueueNop
      ? *_impl_.event_.trusty_enqueue_nop_
      : reinterpret_cast<::perfetto::protos::TrustyEnqueueNopFtraceEvent&>(::perfetto::protos::_TrustyEnqueueNopFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::TrustyEnqueueNopFtraceEvent& FtraceEvent::trusty_enqueue_nop() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.trusty_enqueue_nop)
  return _internal_trusty_enqueue_nop();
}
inline ::perfetto::protos::TrustyEnqueueNopFtraceEvent* FtraceEvent::unsafe_arena_release_trusty_enqueue_nop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.trusty_enqueue_nop)
  if (event_case() == kTrustyEnqueueNop) {
    clear_has_event();
    ::perfetto::protos::TrustyEnqueueNopFtraceEvent* temp = _impl_.event_.trusty_enqueue_nop_;
    _impl_.event_.trusty_enqueue_nop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_trusty_enqueue_nop(::perfetto::protos::TrustyEnqueueNopFtraceEvent* trusty_enqueue_nop) {
  clear_event();
  if (trusty_enqueue_nop) {
    set_has_trusty_enqueue_nop();
    _impl_.event_.trusty_enqueue_nop_ = trusty_enqueue_nop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.trusty_enqueue_nop)
}
inline ::perfetto::protos::TrustyEnqueueNopFtraceEvent* FtraceEvent::_internal_mutable_trusty_enqueue_nop() {
  if (event_case() != kTrustyEnqueueNop) {
    clear_event();
    set_has_trusty_enqueue_nop();
    _impl_.event_.trusty_enqueue_nop_ = CreateMaybeMessage< ::perfetto::protos::TrustyEnqueueNopFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.trusty_enqueue_nop_;
}
inline ::perfetto::protos::TrustyEnqueueNopFtraceEvent* FtraceEvent::mutable_trusty_enqueue_nop() {
  ::perfetto::protos::TrustyEnqueueNopFtraceEvent* _msg = _internal_mutable_trusty_enqueue_nop();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.trusty_enqueue_nop)
  return _msg;
}

// .perfetto.protos.CmaAllocStartFtraceEvent cma_alloc_start = 465;
inline bool FtraceEvent::has_cma_alloc_start() const {
  return event_case() == kCmaAllocStart;
}
inline bool FtraceEvent::_internal_has_cma_alloc_start() const {
  return event_case() == kCmaAllocStart;
}
inline void FtraceEvent::set_has_cma_alloc_start() {
  _impl_._oneof_case_[0] = kCmaAllocStart;
}
inline ::perfetto::protos::CmaAllocStartFtraceEvent* FtraceEvent::release_cma_alloc_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cma_alloc_start)
  if (event_case() == kCmaAllocStart) {
    clear_has_event();
    ::perfetto::protos::CmaAllocStartFtraceEvent* temp = _impl_.event_.cma_alloc_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cma_alloc_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CmaAllocStartFtraceEvent& FtraceEvent::_internal_cma_alloc_start() const {
  return event_case() == kCmaAllocStart
      ? *_impl_.event_.cma_alloc_start_
      : reinterpret_cast<::perfetto::protos::CmaAllocStartFtraceEvent&>(::perfetto::protos::_CmaAllocStartFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CmaAllocStartFtraceEvent& FtraceEvent::cma_alloc_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cma_alloc_start)
  return _internal_cma_alloc_start();
}
inline ::perfetto::protos::CmaAllocStartFtraceEvent* FtraceEvent::unsafe_arena_release_cma_alloc_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cma_alloc_start)
  if (event_case() == kCmaAllocStart) {
    clear_has_event();
    ::perfetto::protos::CmaAllocStartFtraceEvent* temp = _impl_.event_.cma_alloc_start_;
    _impl_.event_.cma_alloc_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cma_alloc_start(::perfetto::protos::CmaAllocStartFtraceEvent* cma_alloc_start) {
  clear_event();
  if (cma_alloc_start) {
    set_has_cma_alloc_start();
    _impl_.event_.cma_alloc_start_ = cma_alloc_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cma_alloc_start)
}
inline ::perfetto::protos::CmaAllocStartFtraceEvent* FtraceEvent::_internal_mutable_cma_alloc_start() {
  if (event_case() != kCmaAllocStart) {
    clear_event();
    set_has_cma_alloc_start();
    _impl_.event_.cma_alloc_start_ = CreateMaybeMessage< ::perfetto::protos::CmaAllocStartFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cma_alloc_start_;
}
inline ::perfetto::protos::CmaAllocStartFtraceEvent* FtraceEvent::mutable_cma_alloc_start() {
  ::perfetto::protos::CmaAllocStartFtraceEvent* _msg = _internal_mutable_cma_alloc_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cma_alloc_start)
  return _msg;
}

// .perfetto.protos.CmaAllocInfoFtraceEvent cma_alloc_info = 466;
inline bool FtraceEvent::has_cma_alloc_info() const {
  return event_case() == kCmaAllocInfo;
}
inline bool FtraceEvent::_internal_has_cma_alloc_info() const {
  return event_case() == kCmaAllocInfo;
}
inline void FtraceEvent::set_has_cma_alloc_info() {
  _impl_._oneof_case_[0] = kCmaAllocInfo;
}
inline ::perfetto::protos::CmaAllocInfoFtraceEvent* FtraceEvent::release_cma_alloc_info() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.cma_alloc_info)
  if (event_case() == kCmaAllocInfo) {
    clear_has_event();
    ::perfetto::protos::CmaAllocInfoFtraceEvent* temp = _impl_.event_.cma_alloc_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.cma_alloc_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::CmaAllocInfoFtraceEvent& FtraceEvent::_internal_cma_alloc_info() const {
  return event_case() == kCmaAllocInfo
      ? *_impl_.event_.cma_alloc_info_
      : reinterpret_cast<::perfetto::protos::CmaAllocInfoFtraceEvent&>(::perfetto::protos::_CmaAllocInfoFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::CmaAllocInfoFtraceEvent& FtraceEvent::cma_alloc_info() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.cma_alloc_info)
  return _internal_cma_alloc_info();
}
inline ::perfetto::protos::CmaAllocInfoFtraceEvent* FtraceEvent::unsafe_arena_release_cma_alloc_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.cma_alloc_info)
  if (event_case() == kCmaAllocInfo) {
    clear_has_event();
    ::perfetto::protos::CmaAllocInfoFtraceEvent* temp = _impl_.event_.cma_alloc_info_;
    _impl_.event_.cma_alloc_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_cma_alloc_info(::perfetto::protos::CmaAllocInfoFtraceEvent* cma_alloc_info) {
  clear_event();
  if (cma_alloc_info) {
    set_has_cma_alloc_info();
    _impl_.event_.cma_alloc_info_ = cma_alloc_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.cma_alloc_info)
}
inline ::perfetto::protos::CmaAllocInfoFtraceEvent* FtraceEvent::_internal_mutable_cma_alloc_info() {
  if (event_case() != kCmaAllocInfo) {
    clear_event();
    set_has_cma_alloc_info();
    _impl_.event_.cma_alloc_info_ = CreateMaybeMessage< ::perfetto::protos::CmaAllocInfoFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.cma_alloc_info_;
}
inline ::perfetto::protos::CmaAllocInfoFtraceEvent* FtraceEvent::mutable_cma_alloc_info() {
  ::perfetto::protos::CmaAllocInfoFtraceEvent* _msg = _internal_mutable_cma_alloc_info();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.cma_alloc_info)
  return _msg;
}

// .perfetto.protos.LwisTracingMarkWriteFtraceEvent lwis_tracing_mark_write = 467;
inline bool FtraceEvent::has_lwis_tracing_mark_write() const {
  return event_case() == kLwisTracingMarkWrite;
}
inline bool FtraceEvent::_internal_has_lwis_tracing_mark_write() const {
  return event_case() == kLwisTracingMarkWrite;
}
inline void FtraceEvent::set_has_lwis_tracing_mark_write() {
  _impl_._oneof_case_[0] = kLwisTracingMarkWrite;
}
inline ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* FtraceEvent::release_lwis_tracing_mark_write() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.lwis_tracing_mark_write)
  if (event_case() == kLwisTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* temp = _impl_.event_.lwis_tracing_mark_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.lwis_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::LwisTracingMarkWriteFtraceEvent& FtraceEvent::_internal_lwis_tracing_mark_write() const {
  return event_case() == kLwisTracingMarkWrite
      ? *_impl_.event_.lwis_tracing_mark_write_
      : reinterpret_cast<::perfetto::protos::LwisTracingMarkWriteFtraceEvent&>(::perfetto::protos::_LwisTracingMarkWriteFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::LwisTracingMarkWriteFtraceEvent& FtraceEvent::lwis_tracing_mark_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.lwis_tracing_mark_write)
  return _internal_lwis_tracing_mark_write();
}
inline ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* FtraceEvent::unsafe_arena_release_lwis_tracing_mark_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.lwis_tracing_mark_write)
  if (event_case() == kLwisTracingMarkWrite) {
    clear_has_event();
    ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* temp = _impl_.event_.lwis_tracing_mark_write_;
    _impl_.event_.lwis_tracing_mark_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_lwis_tracing_mark_write(::perfetto::protos::LwisTracingMarkWriteFtraceEvent* lwis_tracing_mark_write) {
  clear_event();
  if (lwis_tracing_mark_write) {
    set_has_lwis_tracing_mark_write();
    _impl_.event_.lwis_tracing_mark_write_ = lwis_tracing_mark_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.lwis_tracing_mark_write)
}
inline ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* FtraceEvent::_internal_mutable_lwis_tracing_mark_write() {
  if (event_case() != kLwisTracingMarkWrite) {
    clear_event();
    set_has_lwis_tracing_mark_write();
    _impl_.event_.lwis_tracing_mark_write_ = CreateMaybeMessage< ::perfetto::protos::LwisTracingMarkWriteFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.lwis_tracing_mark_write_;
}
inline ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* FtraceEvent::mutable_lwis_tracing_mark_write() {
  ::perfetto::protos::LwisTracingMarkWriteFtraceEvent* _msg = _internal_mutable_lwis_tracing_mark_write();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.lwis_tracing_mark_write)
  return _msg;
}

// .perfetto.protos.VirtioGpuCmdQueueFtraceEvent virtio_gpu_cmd_queue = 468;
inline bool FtraceEvent::has_virtio_gpu_cmd_queue() const {
  return event_case() == kVirtioGpuCmdQueue;
}
inline bool FtraceEvent::_internal_has_virtio_gpu_cmd_queue() const {
  return event_case() == kVirtioGpuCmdQueue;
}
inline void FtraceEvent::set_has_virtio_gpu_cmd_queue() {
  _impl_._oneof_case_[0] = kVirtioGpuCmdQueue;
}
inline ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* FtraceEvent::release_virtio_gpu_cmd_queue() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.virtio_gpu_cmd_queue)
  if (event_case() == kVirtioGpuCmdQueue) {
    clear_has_event();
    ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* temp = _impl_.event_.virtio_gpu_cmd_queue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtio_gpu_cmd_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent& FtraceEvent::_internal_virtio_gpu_cmd_queue() const {
  return event_case() == kVirtioGpuCmdQueue
      ? *_impl_.event_.virtio_gpu_cmd_queue_
      : reinterpret_cast<::perfetto::protos::VirtioGpuCmdQueueFtraceEvent&>(::perfetto::protos::_VirtioGpuCmdQueueFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent& FtraceEvent::virtio_gpu_cmd_queue() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.virtio_gpu_cmd_queue)
  return _internal_virtio_gpu_cmd_queue();
}
inline ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* FtraceEvent::unsafe_arena_release_virtio_gpu_cmd_queue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.virtio_gpu_cmd_queue)
  if (event_case() == kVirtioGpuCmdQueue) {
    clear_has_event();
    ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* temp = _impl_.event_.virtio_gpu_cmd_queue_;
    _impl_.event_.virtio_gpu_cmd_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_virtio_gpu_cmd_queue(::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* virtio_gpu_cmd_queue) {
  clear_event();
  if (virtio_gpu_cmd_queue) {
    set_has_virtio_gpu_cmd_queue();
    _impl_.event_.virtio_gpu_cmd_queue_ = virtio_gpu_cmd_queue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.virtio_gpu_cmd_queue)
}
inline ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* FtraceEvent::_internal_mutable_virtio_gpu_cmd_queue() {
  if (event_case() != kVirtioGpuCmdQueue) {
    clear_event();
    set_has_virtio_gpu_cmd_queue();
    _impl_.event_.virtio_gpu_cmd_queue_ = CreateMaybeMessage< ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.virtio_gpu_cmd_queue_;
}
inline ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* FtraceEvent::mutable_virtio_gpu_cmd_queue() {
  ::perfetto::protos::VirtioGpuCmdQueueFtraceEvent* _msg = _internal_mutable_virtio_gpu_cmd_queue();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.virtio_gpu_cmd_queue)
  return _msg;
}

// .perfetto.protos.VirtioGpuCmdResponseFtraceEvent virtio_gpu_cmd_response = 469;
inline bool FtraceEvent::has_virtio_gpu_cmd_response() const {
  return event_case() == kVirtioGpuCmdResponse;
}
inline bool FtraceEvent::_internal_has_virtio_gpu_cmd_response() const {
  return event_case() == kVirtioGpuCmdResponse;
}
inline void FtraceEvent::set_has_virtio_gpu_cmd_response() {
  _impl_._oneof_case_[0] = kVirtioGpuCmdResponse;
}
inline ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* FtraceEvent::release_virtio_gpu_cmd_response() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.virtio_gpu_cmd_response)
  if (event_case() == kVirtioGpuCmdResponse) {
    clear_has_event();
    ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* temp = _impl_.event_.virtio_gpu_cmd_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtio_gpu_cmd_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent& FtraceEvent::_internal_virtio_gpu_cmd_response() const {
  return event_case() == kVirtioGpuCmdResponse
      ? *_impl_.event_.virtio_gpu_cmd_response_
      : reinterpret_cast<::perfetto::protos::VirtioGpuCmdResponseFtraceEvent&>(::perfetto::protos::_VirtioGpuCmdResponseFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent& FtraceEvent::virtio_gpu_cmd_response() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.virtio_gpu_cmd_response)
  return _internal_virtio_gpu_cmd_response();
}
inline ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* FtraceEvent::unsafe_arena_release_virtio_gpu_cmd_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.virtio_gpu_cmd_response)
  if (event_case() == kVirtioGpuCmdResponse) {
    clear_has_event();
    ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* temp = _impl_.event_.virtio_gpu_cmd_response_;
    _impl_.event_.virtio_gpu_cmd_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_virtio_gpu_cmd_response(::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* virtio_gpu_cmd_response) {
  clear_event();
  if (virtio_gpu_cmd_response) {
    set_has_virtio_gpu_cmd_response();
    _impl_.event_.virtio_gpu_cmd_response_ = virtio_gpu_cmd_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.virtio_gpu_cmd_response)
}
inline ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* FtraceEvent::_internal_mutable_virtio_gpu_cmd_response() {
  if (event_case() != kVirtioGpuCmdResponse) {
    clear_event();
    set_has_virtio_gpu_cmd_response();
    _impl_.event_.virtio_gpu_cmd_response_ = CreateMaybeMessage< ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.virtio_gpu_cmd_response_;
}
inline ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* FtraceEvent::mutable_virtio_gpu_cmd_response() {
  ::perfetto::protos::VirtioGpuCmdResponseFtraceEvent* _msg = _internal_mutable_virtio_gpu_cmd_response();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.virtio_gpu_cmd_response)
  return _msg;
}

// .perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent mali_mali_KCPU_CQS_SET = 470;
inline bool FtraceEvent::has_mali_mali_kcpu_cqs_set() const {
  return event_case() == kMaliMaliKCPUCQSSET;
}
inline bool FtraceEvent::_internal_has_mali_mali_kcpu_cqs_set() const {
  return event_case() == kMaliMaliKCPUCQSSET;
}
inline void FtraceEvent::set_has_mali_mali_kcpu_cqs_set() {
  _impl_._oneof_case_[0] = kMaliMaliKCPUCQSSET;
}
inline ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* FtraceEvent::release_mali_mali_kcpu_cqs_set() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_SET)
  if (event_case() == kMaliMaliKCPUCQSSET) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_cqs_set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_kcpu_cqs_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent& FtraceEvent::_internal_mali_mali_kcpu_cqs_set() const {
  return event_case() == kMaliMaliKCPUCQSSET
      ? *_impl_.event_.mali_mali_kcpu_cqs_set_
      : reinterpret_cast<::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent&>(::perfetto::protos::_MaliMaliKCPUCQSSETFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent& FtraceEvent::mali_mali_kcpu_cqs_set() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_SET)
  return _internal_mali_mali_kcpu_cqs_set();
}
inline ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_kcpu_cqs_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_SET)
  if (event_case() == kMaliMaliKCPUCQSSET) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_cqs_set_;
    _impl_.event_.mali_mali_kcpu_cqs_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_kcpu_cqs_set(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* mali_mali_kcpu_cqs_set) {
  clear_event();
  if (mali_mali_kcpu_cqs_set) {
    set_has_mali_mali_kcpu_cqs_set();
    _impl_.event_.mali_mali_kcpu_cqs_set_ = mali_mali_kcpu_cqs_set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_SET)
}
inline ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_kcpu_cqs_set() {
  if (event_case() != kMaliMaliKCPUCQSSET) {
    clear_event();
    set_has_mali_mali_kcpu_cqs_set();
    _impl_.event_.mali_mali_kcpu_cqs_set_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_kcpu_cqs_set_;
}
inline ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* FtraceEvent::mutable_mali_mali_kcpu_cqs_set() {
  ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent* _msg = _internal_mutable_mali_mali_kcpu_cqs_set();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_SET)
  return _msg;
}

// .perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent mali_mali_KCPU_CQS_WAIT_START = 471;
inline bool FtraceEvent::has_mali_mali_kcpu_cqs_wait_start() const {
  return event_case() == kMaliMaliKCPUCQSWAITSTART;
}
inline bool FtraceEvent::_internal_has_mali_mali_kcpu_cqs_wait_start() const {
  return event_case() == kMaliMaliKCPUCQSWAITSTART;
}
inline void FtraceEvent::set_has_mali_mali_kcpu_cqs_wait_start() {
  _impl_._oneof_case_[0] = kMaliMaliKCPUCQSWAITSTART;
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* FtraceEvent::release_mali_mali_kcpu_cqs_wait_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_START)
  if (event_case() == kMaliMaliKCPUCQSWAITSTART) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_cqs_wait_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_kcpu_cqs_wait_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent& FtraceEvent::_internal_mali_mali_kcpu_cqs_wait_start() const {
  return event_case() == kMaliMaliKCPUCQSWAITSTART
      ? *_impl_.event_.mali_mali_kcpu_cqs_wait_start_
      : reinterpret_cast<::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent&>(::perfetto::protos::_MaliMaliKCPUCQSWAITSTARTFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent& FtraceEvent::mali_mali_kcpu_cqs_wait_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_START)
  return _internal_mali_mali_kcpu_cqs_wait_start();
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_kcpu_cqs_wait_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_START)
  if (event_case() == kMaliMaliKCPUCQSWAITSTART) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_cqs_wait_start_;
    _impl_.event_.mali_mali_kcpu_cqs_wait_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_kcpu_cqs_wait_start(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* mali_mali_kcpu_cqs_wait_start) {
  clear_event();
  if (mali_mali_kcpu_cqs_wait_start) {
    set_has_mali_mali_kcpu_cqs_wait_start();
    _impl_.event_.mali_mali_kcpu_cqs_wait_start_ = mali_mali_kcpu_cqs_wait_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_START)
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_kcpu_cqs_wait_start() {
  if (event_case() != kMaliMaliKCPUCQSWAITSTART) {
    clear_event();
    set_has_mali_mali_kcpu_cqs_wait_start();
    _impl_.event_.mali_mali_kcpu_cqs_wait_start_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_kcpu_cqs_wait_start_;
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* FtraceEvent::mutable_mali_mali_kcpu_cqs_wait_start() {
  ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent* _msg = _internal_mutable_mali_mali_kcpu_cqs_wait_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_START)
  return _msg;
}

// .perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent mali_mali_KCPU_CQS_WAIT_END = 472;
inline bool FtraceEvent::has_mali_mali_kcpu_cqs_wait_end() const {
  return event_case() == kMaliMaliKCPUCQSWAITEND;
}
inline bool FtraceEvent::_internal_has_mali_mali_kcpu_cqs_wait_end() const {
  return event_case() == kMaliMaliKCPUCQSWAITEND;
}
inline void FtraceEvent::set_has_mali_mali_kcpu_cqs_wait_end() {
  _impl_._oneof_case_[0] = kMaliMaliKCPUCQSWAITEND;
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* FtraceEvent::release_mali_mali_kcpu_cqs_wait_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_END)
  if (event_case() == kMaliMaliKCPUCQSWAITEND) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_cqs_wait_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_kcpu_cqs_wait_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent& FtraceEvent::_internal_mali_mali_kcpu_cqs_wait_end() const {
  return event_case() == kMaliMaliKCPUCQSWAITEND
      ? *_impl_.event_.mali_mali_kcpu_cqs_wait_end_
      : reinterpret_cast<::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent&>(::perfetto::protos::_MaliMaliKCPUCQSWAITENDFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent& FtraceEvent::mali_mali_kcpu_cqs_wait_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_END)
  return _internal_mali_mali_kcpu_cqs_wait_end();
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_kcpu_cqs_wait_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_END)
  if (event_case() == kMaliMaliKCPUCQSWAITEND) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_cqs_wait_end_;
    _impl_.event_.mali_mali_kcpu_cqs_wait_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_kcpu_cqs_wait_end(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* mali_mali_kcpu_cqs_wait_end) {
  clear_event();
  if (mali_mali_kcpu_cqs_wait_end) {
    set_has_mali_mali_kcpu_cqs_wait_end();
    _impl_.event_.mali_mali_kcpu_cqs_wait_end_ = mali_mali_kcpu_cqs_wait_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_END)
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_kcpu_cqs_wait_end() {
  if (event_case() != kMaliMaliKCPUCQSWAITEND) {
    clear_event();
    set_has_mali_mali_kcpu_cqs_wait_end();
    _impl_.event_.mali_mali_kcpu_cqs_wait_end_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_kcpu_cqs_wait_end_;
}
inline ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* FtraceEvent::mutable_mali_mali_kcpu_cqs_wait_end() {
  ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent* _msg = _internal_mutable_mali_mali_kcpu_cqs_wait_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_KCPU_CQS_WAIT_END)
  return _msg;
}

// .perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent mali_mali_KCPU_FENCE_SIGNAL = 473;
inline bool FtraceEvent::has_mali_mali_kcpu_fence_signal() const {
  return event_case() == kMaliMaliKCPUFENCESIGNAL;
}
inline bool FtraceEvent::_internal_has_mali_mali_kcpu_fence_signal() const {
  return event_case() == kMaliMaliKCPUFENCESIGNAL;
}
inline void FtraceEvent::set_has_mali_mali_kcpu_fence_signal() {
  _impl_._oneof_case_[0] = kMaliMaliKCPUFENCESIGNAL;
}
inline ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* FtraceEvent::release_mali_mali_kcpu_fence_signal() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_SIGNAL)
  if (event_case() == kMaliMaliKCPUFENCESIGNAL) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_fence_signal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_kcpu_fence_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent& FtraceEvent::_internal_mali_mali_kcpu_fence_signal() const {
  return event_case() == kMaliMaliKCPUFENCESIGNAL
      ? *_impl_.event_.mali_mali_kcpu_fence_signal_
      : reinterpret_cast<::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent&>(::perfetto::protos::_MaliMaliKCPUFENCESIGNALFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent& FtraceEvent::mali_mali_kcpu_fence_signal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_SIGNAL)
  return _internal_mali_mali_kcpu_fence_signal();
}
inline ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_kcpu_fence_signal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_SIGNAL)
  if (event_case() == kMaliMaliKCPUFENCESIGNAL) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_fence_signal_;
    _impl_.event_.mali_mali_kcpu_fence_signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_kcpu_fence_signal(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* mali_mali_kcpu_fence_signal) {
  clear_event();
  if (mali_mali_kcpu_fence_signal) {
    set_has_mali_mali_kcpu_fence_signal();
    _impl_.event_.mali_mali_kcpu_fence_signal_ = mali_mali_kcpu_fence_signal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_SIGNAL)
}
inline ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_kcpu_fence_signal() {
  if (event_case() != kMaliMaliKCPUFENCESIGNAL) {
    clear_event();
    set_has_mali_mali_kcpu_fence_signal();
    _impl_.event_.mali_mali_kcpu_fence_signal_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_kcpu_fence_signal_;
}
inline ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* FtraceEvent::mutable_mali_mali_kcpu_fence_signal() {
  ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent* _msg = _internal_mutable_mali_mali_kcpu_fence_signal();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_SIGNAL)
  return _msg;
}

// .perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent mali_mali_KCPU_FENCE_WAIT_START = 474;
inline bool FtraceEvent::has_mali_mali_kcpu_fence_wait_start() const {
  return event_case() == kMaliMaliKCPUFENCEWAITSTART;
}
inline bool FtraceEvent::_internal_has_mali_mali_kcpu_fence_wait_start() const {
  return event_case() == kMaliMaliKCPUFENCEWAITSTART;
}
inline void FtraceEvent::set_has_mali_mali_kcpu_fence_wait_start() {
  _impl_._oneof_case_[0] = kMaliMaliKCPUFENCEWAITSTART;
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* FtraceEvent::release_mali_mali_kcpu_fence_wait_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_START)
  if (event_case() == kMaliMaliKCPUFENCEWAITSTART) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_fence_wait_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_kcpu_fence_wait_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent& FtraceEvent::_internal_mali_mali_kcpu_fence_wait_start() const {
  return event_case() == kMaliMaliKCPUFENCEWAITSTART
      ? *_impl_.event_.mali_mali_kcpu_fence_wait_start_
      : reinterpret_cast<::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent&>(::perfetto::protos::_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent& FtraceEvent::mali_mali_kcpu_fence_wait_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_START)
  return _internal_mali_mali_kcpu_fence_wait_start();
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_kcpu_fence_wait_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_START)
  if (event_case() == kMaliMaliKCPUFENCEWAITSTART) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_fence_wait_start_;
    _impl_.event_.mali_mali_kcpu_fence_wait_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_kcpu_fence_wait_start(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* mali_mali_kcpu_fence_wait_start) {
  clear_event();
  if (mali_mali_kcpu_fence_wait_start) {
    set_has_mali_mali_kcpu_fence_wait_start();
    _impl_.event_.mali_mali_kcpu_fence_wait_start_ = mali_mali_kcpu_fence_wait_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_START)
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_kcpu_fence_wait_start() {
  if (event_case() != kMaliMaliKCPUFENCEWAITSTART) {
    clear_event();
    set_has_mali_mali_kcpu_fence_wait_start();
    _impl_.event_.mali_mali_kcpu_fence_wait_start_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_kcpu_fence_wait_start_;
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* FtraceEvent::mutable_mali_mali_kcpu_fence_wait_start() {
  ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent* _msg = _internal_mutable_mali_mali_kcpu_fence_wait_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_START)
  return _msg;
}

// .perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent mali_mali_KCPU_FENCE_WAIT_END = 475;
inline bool FtraceEvent::has_mali_mali_kcpu_fence_wait_end() const {
  return event_case() == kMaliMaliKCPUFENCEWAITEND;
}
inline bool FtraceEvent::_internal_has_mali_mali_kcpu_fence_wait_end() const {
  return event_case() == kMaliMaliKCPUFENCEWAITEND;
}
inline void FtraceEvent::set_has_mali_mali_kcpu_fence_wait_end() {
  _impl_._oneof_case_[0] = kMaliMaliKCPUFENCEWAITEND;
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* FtraceEvent::release_mali_mali_kcpu_fence_wait_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_END)
  if (event_case() == kMaliMaliKCPUFENCEWAITEND) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_fence_wait_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_kcpu_fence_wait_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent& FtraceEvent::_internal_mali_mali_kcpu_fence_wait_end() const {
  return event_case() == kMaliMaliKCPUFENCEWAITEND
      ? *_impl_.event_.mali_mali_kcpu_fence_wait_end_
      : reinterpret_cast<::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent&>(::perfetto::protos::_MaliMaliKCPUFENCEWAITENDFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent& FtraceEvent::mali_mali_kcpu_fence_wait_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_END)
  return _internal_mali_mali_kcpu_fence_wait_end();
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_kcpu_fence_wait_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_END)
  if (event_case() == kMaliMaliKCPUFENCEWAITEND) {
    clear_has_event();
    ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* temp = _impl_.event_.mali_mali_kcpu_fence_wait_end_;
    _impl_.event_.mali_mali_kcpu_fence_wait_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_kcpu_fence_wait_end(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* mali_mali_kcpu_fence_wait_end) {
  clear_event();
  if (mali_mali_kcpu_fence_wait_end) {
    set_has_mali_mali_kcpu_fence_wait_end();
    _impl_.event_.mali_mali_kcpu_fence_wait_end_ = mali_mali_kcpu_fence_wait_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_END)
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_kcpu_fence_wait_end() {
  if (event_case() != kMaliMaliKCPUFENCEWAITEND) {
    clear_event();
    set_has_mali_mali_kcpu_fence_wait_end();
    _impl_.event_.mali_mali_kcpu_fence_wait_end_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_kcpu_fence_wait_end_;
}
inline ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* FtraceEvent::mutable_mali_mali_kcpu_fence_wait_end() {
  ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent* _msg = _internal_mutable_mali_mali_kcpu_fence_wait_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_KCPU_FENCE_WAIT_END)
  return _msg;
}

// .perfetto.protos.HypEnterFtraceEvent hyp_enter = 476;
inline bool FtraceEvent::has_hyp_enter() const {
  return event_case() == kHypEnter;
}
inline bool FtraceEvent::_internal_has_hyp_enter() const {
  return event_case() == kHypEnter;
}
inline void FtraceEvent::set_has_hyp_enter() {
  _impl_._oneof_case_[0] = kHypEnter;
}
inline ::perfetto::protos::HypEnterFtraceEvent* FtraceEvent::release_hyp_enter() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.hyp_enter)
  if (event_case() == kHypEnter) {
    clear_has_event();
    ::perfetto::protos::HypEnterFtraceEvent* temp = _impl_.event_.hyp_enter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.hyp_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HypEnterFtraceEvent& FtraceEvent::_internal_hyp_enter() const {
  return event_case() == kHypEnter
      ? *_impl_.event_.hyp_enter_
      : reinterpret_cast<::perfetto::protos::HypEnterFtraceEvent&>(::perfetto::protos::_HypEnterFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::HypEnterFtraceEvent& FtraceEvent::hyp_enter() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.hyp_enter)
  return _internal_hyp_enter();
}
inline ::perfetto::protos::HypEnterFtraceEvent* FtraceEvent::unsafe_arena_release_hyp_enter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.hyp_enter)
  if (event_case() == kHypEnter) {
    clear_has_event();
    ::perfetto::protos::HypEnterFtraceEvent* temp = _impl_.event_.hyp_enter_;
    _impl_.event_.hyp_enter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_hyp_enter(::perfetto::protos::HypEnterFtraceEvent* hyp_enter) {
  clear_event();
  if (hyp_enter) {
    set_has_hyp_enter();
    _impl_.event_.hyp_enter_ = hyp_enter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.hyp_enter)
}
inline ::perfetto::protos::HypEnterFtraceEvent* FtraceEvent::_internal_mutable_hyp_enter() {
  if (event_case() != kHypEnter) {
    clear_event();
    set_has_hyp_enter();
    _impl_.event_.hyp_enter_ = CreateMaybeMessage< ::perfetto::protos::HypEnterFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.hyp_enter_;
}
inline ::perfetto::protos::HypEnterFtraceEvent* FtraceEvent::mutable_hyp_enter() {
  ::perfetto::protos::HypEnterFtraceEvent* _msg = _internal_mutable_hyp_enter();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.hyp_enter)
  return _msg;
}

// .perfetto.protos.HypExitFtraceEvent hyp_exit = 477;
inline bool FtraceEvent::has_hyp_exit() const {
  return event_case() == kHypExit;
}
inline bool FtraceEvent::_internal_has_hyp_exit() const {
  return event_case() == kHypExit;
}
inline void FtraceEvent::set_has_hyp_exit() {
  _impl_._oneof_case_[0] = kHypExit;
}
inline ::perfetto::protos::HypExitFtraceEvent* FtraceEvent::release_hyp_exit() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.hyp_exit)
  if (event_case() == kHypExit) {
    clear_has_event();
    ::perfetto::protos::HypExitFtraceEvent* temp = _impl_.event_.hyp_exit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.hyp_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HypExitFtraceEvent& FtraceEvent::_internal_hyp_exit() const {
  return event_case() == kHypExit
      ? *_impl_.event_.hyp_exit_
      : reinterpret_cast<::perfetto::protos::HypExitFtraceEvent&>(::perfetto::protos::_HypExitFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::HypExitFtraceEvent& FtraceEvent::hyp_exit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.hyp_exit)
  return _internal_hyp_exit();
}
inline ::perfetto::protos::HypExitFtraceEvent* FtraceEvent::unsafe_arena_release_hyp_exit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.hyp_exit)
  if (event_case() == kHypExit) {
    clear_has_event();
    ::perfetto::protos::HypExitFtraceEvent* temp = _impl_.event_.hyp_exit_;
    _impl_.event_.hyp_exit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_hyp_exit(::perfetto::protos::HypExitFtraceEvent* hyp_exit) {
  clear_event();
  if (hyp_exit) {
    set_has_hyp_exit();
    _impl_.event_.hyp_exit_ = hyp_exit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.hyp_exit)
}
inline ::perfetto::protos::HypExitFtraceEvent* FtraceEvent::_internal_mutable_hyp_exit() {
  if (event_case() != kHypExit) {
    clear_event();
    set_has_hyp_exit();
    _impl_.event_.hyp_exit_ = CreateMaybeMessage< ::perfetto::protos::HypExitFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.hyp_exit_;
}
inline ::perfetto::protos::HypExitFtraceEvent* FtraceEvent::mutable_hyp_exit() {
  ::perfetto::protos::HypExitFtraceEvent* _msg = _internal_mutable_hyp_exit();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.hyp_exit)
  return _msg;
}

// .perfetto.protos.HostHcallFtraceEvent host_hcall = 478;
inline bool FtraceEvent::has_host_hcall() const {
  return event_case() == kHostHcall;
}
inline bool FtraceEvent::_internal_has_host_hcall() const {
  return event_case() == kHostHcall;
}
inline void FtraceEvent::set_has_host_hcall() {
  _impl_._oneof_case_[0] = kHostHcall;
}
inline ::perfetto::protos::HostHcallFtraceEvent* FtraceEvent::release_host_hcall() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.host_hcall)
  if (event_case() == kHostHcall) {
    clear_has_event();
    ::perfetto::protos::HostHcallFtraceEvent* temp = _impl_.event_.host_hcall_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.host_hcall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HostHcallFtraceEvent& FtraceEvent::_internal_host_hcall() const {
  return event_case() == kHostHcall
      ? *_impl_.event_.host_hcall_
      : reinterpret_cast<::perfetto::protos::HostHcallFtraceEvent&>(::perfetto::protos::_HostHcallFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::HostHcallFtraceEvent& FtraceEvent::host_hcall() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.host_hcall)
  return _internal_host_hcall();
}
inline ::perfetto::protos::HostHcallFtraceEvent* FtraceEvent::unsafe_arena_release_host_hcall() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.host_hcall)
  if (event_case() == kHostHcall) {
    clear_has_event();
    ::perfetto::protos::HostHcallFtraceEvent* temp = _impl_.event_.host_hcall_;
    _impl_.event_.host_hcall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_host_hcall(::perfetto::protos::HostHcallFtraceEvent* host_hcall) {
  clear_event();
  if (host_hcall) {
    set_has_host_hcall();
    _impl_.event_.host_hcall_ = host_hcall;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.host_hcall)
}
inline ::perfetto::protos::HostHcallFtraceEvent* FtraceEvent::_internal_mutable_host_hcall() {
  if (event_case() != kHostHcall) {
    clear_event();
    set_has_host_hcall();
    _impl_.event_.host_hcall_ = CreateMaybeMessage< ::perfetto::protos::HostHcallFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.host_hcall_;
}
inline ::perfetto::protos::HostHcallFtraceEvent* FtraceEvent::mutable_host_hcall() {
  ::perfetto::protos::HostHcallFtraceEvent* _msg = _internal_mutable_host_hcall();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.host_hcall)
  return _msg;
}

// .perfetto.protos.HostSmcFtraceEvent host_smc = 479;
inline bool FtraceEvent::has_host_smc() const {
  return event_case() == kHostSmc;
}
inline bool FtraceEvent::_internal_has_host_smc() const {
  return event_case() == kHostSmc;
}
inline void FtraceEvent::set_has_host_smc() {
  _impl_._oneof_case_[0] = kHostSmc;
}
inline ::perfetto::protos::HostSmcFtraceEvent* FtraceEvent::release_host_smc() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.host_smc)
  if (event_case() == kHostSmc) {
    clear_has_event();
    ::perfetto::protos::HostSmcFtraceEvent* temp = _impl_.event_.host_smc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.host_smc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HostSmcFtraceEvent& FtraceEvent::_internal_host_smc() const {
  return event_case() == kHostSmc
      ? *_impl_.event_.host_smc_
      : reinterpret_cast<::perfetto::protos::HostSmcFtraceEvent&>(::perfetto::protos::_HostSmcFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::HostSmcFtraceEvent& FtraceEvent::host_smc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.host_smc)
  return _internal_host_smc();
}
inline ::perfetto::protos::HostSmcFtraceEvent* FtraceEvent::unsafe_arena_release_host_smc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.host_smc)
  if (event_case() == kHostSmc) {
    clear_has_event();
    ::perfetto::protos::HostSmcFtraceEvent* temp = _impl_.event_.host_smc_;
    _impl_.event_.host_smc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_host_smc(::perfetto::protos::HostSmcFtraceEvent* host_smc) {
  clear_event();
  if (host_smc) {
    set_has_host_smc();
    _impl_.event_.host_smc_ = host_smc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.host_smc)
}
inline ::perfetto::protos::HostSmcFtraceEvent* FtraceEvent::_internal_mutable_host_smc() {
  if (event_case() != kHostSmc) {
    clear_event();
    set_has_host_smc();
    _impl_.event_.host_smc_ = CreateMaybeMessage< ::perfetto::protos::HostSmcFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.host_smc_;
}
inline ::perfetto::protos::HostSmcFtraceEvent* FtraceEvent::mutable_host_smc() {
  ::perfetto::protos::HostSmcFtraceEvent* _msg = _internal_mutable_host_smc();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.host_smc)
  return _msg;
}

// .perfetto.protos.HostMemAbortFtraceEvent host_mem_abort = 480;
inline bool FtraceEvent::has_host_mem_abort() const {
  return event_case() == kHostMemAbort;
}
inline bool FtraceEvent::_internal_has_host_mem_abort() const {
  return event_case() == kHostMemAbort;
}
inline void FtraceEvent::set_has_host_mem_abort() {
  _impl_._oneof_case_[0] = kHostMemAbort;
}
inline ::perfetto::protos::HostMemAbortFtraceEvent* FtraceEvent::release_host_mem_abort() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.host_mem_abort)
  if (event_case() == kHostMemAbort) {
    clear_has_event();
    ::perfetto::protos::HostMemAbortFtraceEvent* temp = _impl_.event_.host_mem_abort_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.host_mem_abort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::HostMemAbortFtraceEvent& FtraceEvent::_internal_host_mem_abort() const {
  return event_case() == kHostMemAbort
      ? *_impl_.event_.host_mem_abort_
      : reinterpret_cast<::perfetto::protos::HostMemAbortFtraceEvent&>(::perfetto::protos::_HostMemAbortFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::HostMemAbortFtraceEvent& FtraceEvent::host_mem_abort() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.host_mem_abort)
  return _internal_host_mem_abort();
}
inline ::perfetto::protos::HostMemAbortFtraceEvent* FtraceEvent::unsafe_arena_release_host_mem_abort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.host_mem_abort)
  if (event_case() == kHostMemAbort) {
    clear_has_event();
    ::perfetto::protos::HostMemAbortFtraceEvent* temp = _impl_.event_.host_mem_abort_;
    _impl_.event_.host_mem_abort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_host_mem_abort(::perfetto::protos::HostMemAbortFtraceEvent* host_mem_abort) {
  clear_event();
  if (host_mem_abort) {
    set_has_host_mem_abort();
    _impl_.event_.host_mem_abort_ = host_mem_abort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.host_mem_abort)
}
inline ::perfetto::protos::HostMemAbortFtraceEvent* FtraceEvent::_internal_mutable_host_mem_abort() {
  if (event_case() != kHostMemAbort) {
    clear_event();
    set_has_host_mem_abort();
    _impl_.event_.host_mem_abort_ = CreateMaybeMessage< ::perfetto::protos::HostMemAbortFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.host_mem_abort_;
}
inline ::perfetto::protos::HostMemAbortFtraceEvent* FtraceEvent::mutable_host_mem_abort() {
  ::perfetto::protos::HostMemAbortFtraceEvent* _msg = _internal_mutable_host_mem_abort();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.host_mem_abort)
  return _msg;
}

// .perfetto.protos.SuspendResumeMinimalFtraceEvent suspend_resume_minimal = 481;
inline bool FtraceEvent::has_suspend_resume_minimal() const {
  return event_case() == kSuspendResumeMinimal;
}
inline bool FtraceEvent::_internal_has_suspend_resume_minimal() const {
  return event_case() == kSuspendResumeMinimal;
}
inline void FtraceEvent::set_has_suspend_resume_minimal() {
  _impl_._oneof_case_[0] = kSuspendResumeMinimal;
}
inline ::perfetto::protos::SuspendResumeMinimalFtraceEvent* FtraceEvent::release_suspend_resume_minimal() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.suspend_resume_minimal)
  if (event_case() == kSuspendResumeMinimal) {
    clear_has_event();
    ::perfetto::protos::SuspendResumeMinimalFtraceEvent* temp = _impl_.event_.suspend_resume_minimal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.suspend_resume_minimal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::SuspendResumeMinimalFtraceEvent& FtraceEvent::_internal_suspend_resume_minimal() const {
  return event_case() == kSuspendResumeMinimal
      ? *_impl_.event_.suspend_resume_minimal_
      : reinterpret_cast<::perfetto::protos::SuspendResumeMinimalFtraceEvent&>(::perfetto::protos::_SuspendResumeMinimalFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::SuspendResumeMinimalFtraceEvent& FtraceEvent::suspend_resume_minimal() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.suspend_resume_minimal)
  return _internal_suspend_resume_minimal();
}
inline ::perfetto::protos::SuspendResumeMinimalFtraceEvent* FtraceEvent::unsafe_arena_release_suspend_resume_minimal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.suspend_resume_minimal)
  if (event_case() == kSuspendResumeMinimal) {
    clear_has_event();
    ::perfetto::protos::SuspendResumeMinimalFtraceEvent* temp = _impl_.event_.suspend_resume_minimal_;
    _impl_.event_.suspend_resume_minimal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_suspend_resume_minimal(::perfetto::protos::SuspendResumeMinimalFtraceEvent* suspend_resume_minimal) {
  clear_event();
  if (suspend_resume_minimal) {
    set_has_suspend_resume_minimal();
    _impl_.event_.suspend_resume_minimal_ = suspend_resume_minimal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.suspend_resume_minimal)
}
inline ::perfetto::protos::SuspendResumeMinimalFtraceEvent* FtraceEvent::_internal_mutable_suspend_resume_minimal() {
  if (event_case() != kSuspendResumeMinimal) {
    clear_event();
    set_has_suspend_resume_minimal();
    _impl_.event_.suspend_resume_minimal_ = CreateMaybeMessage< ::perfetto::protos::SuspendResumeMinimalFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.suspend_resume_minimal_;
}
inline ::perfetto::protos::SuspendResumeMinimalFtraceEvent* FtraceEvent::mutable_suspend_resume_minimal() {
  ::perfetto::protos::SuspendResumeMinimalFtraceEvent* _msg = _internal_mutable_suspend_resume_minimal();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.suspend_resume_minimal)
  return _msg;
}

// .perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent mali_mali_CSF_INTERRUPT_START = 482;
inline bool FtraceEvent::has_mali_mali_csf_interrupt_start() const {
  return event_case() == kMaliMaliCSFINTERRUPTSTART;
}
inline bool FtraceEvent::_internal_has_mali_mali_csf_interrupt_start() const {
  return event_case() == kMaliMaliCSFINTERRUPTSTART;
}
inline void FtraceEvent::set_has_mali_mali_csf_interrupt_start() {
  _impl_._oneof_case_[0] = kMaliMaliCSFINTERRUPTSTART;
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* FtraceEvent::release_mali_mali_csf_interrupt_start() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_START)
  if (event_case() == kMaliMaliCSFINTERRUPTSTART) {
    clear_has_event();
    ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* temp = _impl_.event_.mali_mali_csf_interrupt_start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_csf_interrupt_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent& FtraceEvent::_internal_mali_mali_csf_interrupt_start() const {
  return event_case() == kMaliMaliCSFINTERRUPTSTART
      ? *_impl_.event_.mali_mali_csf_interrupt_start_
      : reinterpret_cast<::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent&>(::perfetto::protos::_MaliMaliCSFINTERRUPTSTARTFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent& FtraceEvent::mali_mali_csf_interrupt_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_START)
  return _internal_mali_mali_csf_interrupt_start();
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_csf_interrupt_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_START)
  if (event_case() == kMaliMaliCSFINTERRUPTSTART) {
    clear_has_event();
    ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* temp = _impl_.event_.mali_mali_csf_interrupt_start_;
    _impl_.event_.mali_mali_csf_interrupt_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_csf_interrupt_start(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* mali_mali_csf_interrupt_start) {
  clear_event();
  if (mali_mali_csf_interrupt_start) {
    set_has_mali_mali_csf_interrupt_start();
    _impl_.event_.mali_mali_csf_interrupt_start_ = mali_mali_csf_interrupt_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_START)
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_csf_interrupt_start() {
  if (event_case() != kMaliMaliCSFINTERRUPTSTART) {
    clear_event();
    set_has_mali_mali_csf_interrupt_start();
    _impl_.event_.mali_mali_csf_interrupt_start_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_csf_interrupt_start_;
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* FtraceEvent::mutable_mali_mali_csf_interrupt_start() {
  ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent* _msg = _internal_mutable_mali_mali_csf_interrupt_start();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_START)
  return _msg;
}

// .perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent mali_mali_CSF_INTERRUPT_END = 483;
inline bool FtraceEvent::has_mali_mali_csf_interrupt_end() const {
  return event_case() == kMaliMaliCSFINTERRUPTEND;
}
inline bool FtraceEvent::_internal_has_mali_mali_csf_interrupt_end() const {
  return event_case() == kMaliMaliCSFINTERRUPTEND;
}
inline void FtraceEvent::set_has_mali_mali_csf_interrupt_end() {
  _impl_._oneof_case_[0] = kMaliMaliCSFINTERRUPTEND;
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* FtraceEvent::release_mali_mali_csf_interrupt_end() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_END)
  if (event_case() == kMaliMaliCSFINTERRUPTEND) {
    clear_has_event();
    ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* temp = _impl_.event_.mali_mali_csf_interrupt_end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.mali_mali_csf_interrupt_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent& FtraceEvent::_internal_mali_mali_csf_interrupt_end() const {
  return event_case() == kMaliMaliCSFINTERRUPTEND
      ? *_impl_.event_.mali_mali_csf_interrupt_end_
      : reinterpret_cast<::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent&>(::perfetto::protos::_MaliMaliCSFINTERRUPTENDFtraceEvent_default_instance_);
}
inline const ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent& FtraceEvent::mali_mali_csf_interrupt_end() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_END)
  return _internal_mali_mali_csf_interrupt_end();
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* FtraceEvent::unsafe_arena_release_mali_mali_csf_interrupt_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_END)
  if (event_case() == kMaliMaliCSFINTERRUPTEND) {
    clear_has_event();
    ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* temp = _impl_.event_.mali_mali_csf_interrupt_end_;
    _impl_.event_.mali_mali_csf_interrupt_end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FtraceEvent::unsafe_arena_set_allocated_mali_mali_csf_interrupt_end(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* mali_mali_csf_interrupt_end) {
  clear_event();
  if (mali_mali_csf_interrupt_end) {
    set_has_mali_mali_csf_interrupt_end();
    _impl_.event_.mali_mali_csf_interrupt_end_ = mali_mali_csf_interrupt_end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_END)
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* FtraceEvent::_internal_mutable_mali_mali_csf_interrupt_end() {
  if (event_case() != kMaliMaliCSFINTERRUPTEND) {
    clear_event();
    set_has_mali_mali_csf_interrupt_end();
    _impl_.event_.mali_mali_csf_interrupt_end_ = CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(GetArenaForAllocation());
  }
  return _impl_.event_.mali_mali_csf_interrupt_end_;
}
inline ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* FtraceEvent::mutable_mali_mali_csf_interrupt_end() {
  ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent* _msg = _internal_mutable_mali_mali_csf_interrupt_end();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEvent.mali_mali_CSF_INTERRUPT_END)
  return _msg;
}

inline bool FtraceEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void FtraceEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline FtraceEvent::EventCase FtraceEvent::event_case() const {
  return FtraceEvent::EventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto_2epb_2eh
