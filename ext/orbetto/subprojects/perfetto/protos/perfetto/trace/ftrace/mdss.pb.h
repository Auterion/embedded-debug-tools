// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/mdss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
namespace perfetto {
namespace protos {
class MdpCmdKickoffFtraceEvent;
struct MdpCmdKickoffFtraceEventDefaultTypeInternal;
extern MdpCmdKickoffFtraceEventDefaultTypeInternal _MdpCmdKickoffFtraceEvent_default_instance_;
class MdpCmdPingpongDoneFtraceEvent;
struct MdpCmdPingpongDoneFtraceEventDefaultTypeInternal;
extern MdpCmdPingpongDoneFtraceEventDefaultTypeInternal _MdpCmdPingpongDoneFtraceEvent_default_instance_;
class MdpCmdReadptrDoneFtraceEvent;
struct MdpCmdReadptrDoneFtraceEventDefaultTypeInternal;
extern MdpCmdReadptrDoneFtraceEventDefaultTypeInternal _MdpCmdReadptrDoneFtraceEvent_default_instance_;
class MdpCmdReleaseBwFtraceEvent;
struct MdpCmdReleaseBwFtraceEventDefaultTypeInternal;
extern MdpCmdReleaseBwFtraceEventDefaultTypeInternal _MdpCmdReleaseBwFtraceEvent_default_instance_;
class MdpCmdWaitPingpongFtraceEvent;
struct MdpCmdWaitPingpongFtraceEventDefaultTypeInternal;
extern MdpCmdWaitPingpongFtraceEventDefaultTypeInternal _MdpCmdWaitPingpongFtraceEvent_default_instance_;
class MdpCommitFtraceEvent;
struct MdpCommitFtraceEventDefaultTypeInternal;
extern MdpCommitFtraceEventDefaultTypeInternal _MdpCommitFtraceEvent_default_instance_;
class MdpCompareBwFtraceEvent;
struct MdpCompareBwFtraceEventDefaultTypeInternal;
extern MdpCompareBwFtraceEventDefaultTypeInternal _MdpCompareBwFtraceEvent_default_instance_;
class MdpMisrCrcFtraceEvent;
struct MdpMisrCrcFtraceEventDefaultTypeInternal;
extern MdpMisrCrcFtraceEventDefaultTypeInternal _MdpMisrCrcFtraceEvent_default_instance_;
class MdpMixerUpdateFtraceEvent;
struct MdpMixerUpdateFtraceEventDefaultTypeInternal;
extern MdpMixerUpdateFtraceEventDefaultTypeInternal _MdpMixerUpdateFtraceEvent_default_instance_;
class MdpPerfPrefillCalcFtraceEvent;
struct MdpPerfPrefillCalcFtraceEventDefaultTypeInternal;
extern MdpPerfPrefillCalcFtraceEventDefaultTypeInternal _MdpPerfPrefillCalcFtraceEvent_default_instance_;
class MdpPerfSetOtFtraceEvent;
struct MdpPerfSetOtFtraceEventDefaultTypeInternal;
extern MdpPerfSetOtFtraceEventDefaultTypeInternal _MdpPerfSetOtFtraceEvent_default_instance_;
class MdpPerfSetPanicLutsFtraceEvent;
struct MdpPerfSetPanicLutsFtraceEventDefaultTypeInternal;
extern MdpPerfSetPanicLutsFtraceEventDefaultTypeInternal _MdpPerfSetPanicLutsFtraceEvent_default_instance_;
class MdpPerfSetQosLutsFtraceEvent;
struct MdpPerfSetQosLutsFtraceEventDefaultTypeInternal;
extern MdpPerfSetQosLutsFtraceEventDefaultTypeInternal _MdpPerfSetQosLutsFtraceEvent_default_instance_;
class MdpPerfSetWmLevelsFtraceEvent;
struct MdpPerfSetWmLevelsFtraceEventDefaultTypeInternal;
extern MdpPerfSetWmLevelsFtraceEventDefaultTypeInternal _MdpPerfSetWmLevelsFtraceEvent_default_instance_;
class MdpPerfUpdateBusFtraceEvent;
struct MdpPerfUpdateBusFtraceEventDefaultTypeInternal;
extern MdpPerfUpdateBusFtraceEventDefaultTypeInternal _MdpPerfUpdateBusFtraceEvent_default_instance_;
class MdpSsppChangeFtraceEvent;
struct MdpSsppChangeFtraceEventDefaultTypeInternal;
extern MdpSsppChangeFtraceEventDefaultTypeInternal _MdpSsppChangeFtraceEvent_default_instance_;
class MdpSsppSetFtraceEvent;
struct MdpSsppSetFtraceEventDefaultTypeInternal;
extern MdpSsppSetFtraceEventDefaultTypeInternal _MdpSsppSetFtraceEvent_default_instance_;
class MdpTraceCounterFtraceEvent;
struct MdpTraceCounterFtraceEventDefaultTypeInternal;
extern MdpTraceCounterFtraceEventDefaultTypeInternal _MdpTraceCounterFtraceEvent_default_instance_;
class MdpVideoUnderrunDoneFtraceEvent;
struct MdpVideoUnderrunDoneFtraceEventDefaultTypeInternal;
extern MdpVideoUnderrunDoneFtraceEventDefaultTypeInternal _MdpVideoUnderrunDoneFtraceEvent_default_instance_;
class RotatorBwAoAsContextFtraceEvent;
struct RotatorBwAoAsContextFtraceEventDefaultTypeInternal;
extern RotatorBwAoAsContextFtraceEventDefaultTypeInternal _RotatorBwAoAsContextFtraceEvent_default_instance_;
class TracingMarkWriteFtraceEvent;
struct TracingMarkWriteFtraceEventDefaultTypeInternal;
extern TracingMarkWriteFtraceEventDefaultTypeInternal _TracingMarkWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::MdpCmdKickoffFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdKickoffFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpCmdPingpongDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdPingpongDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpCmdReadptrDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdReadptrDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpCmdReleaseBwFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdReleaseBwFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpCmdWaitPingpongFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCmdWaitPingpongFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpCommitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCommitFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpCompareBwFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpCompareBwFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpMisrCrcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpMisrCrcFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpMixerUpdateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpMixerUpdateFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpPerfPrefillCalcFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfPrefillCalcFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpPerfSetOtFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetOtFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetPanicLutsFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpPerfSetQosLutsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetQosLutsFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfSetWmLevelsFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpPerfUpdateBusFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpPerfUpdateBusFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpSsppChangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpSsppChangeFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpSsppSetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpSsppSetFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpTraceCounterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpTraceCounterFtraceEvent>(Arena*);
template <>
::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MdpVideoUnderrunDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::RotatorBwAoAsContextFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::RotatorBwAoAsContextFtraceEvent>(Arena*);
template <>
::perfetto::protos::TracingMarkWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TracingMarkWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class MdpCmdKickoffFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdKickoffFtraceEvent) */ {
 public:
  inline MdpCmdKickoffFtraceEvent() : MdpCmdKickoffFtraceEvent(nullptr) {}
  ~MdpCmdKickoffFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCmdKickoffFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCmdKickoffFtraceEvent(const MdpCmdKickoffFtraceEvent& from);
  MdpCmdKickoffFtraceEvent(MdpCmdKickoffFtraceEvent&& from) noexcept
    : MdpCmdKickoffFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdKickoffFtraceEvent& operator=(const MdpCmdKickoffFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdKickoffFtraceEvent& operator=(MdpCmdKickoffFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCmdKickoffFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCmdKickoffFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdKickoffFtraceEvent*>(
               &_MdpCmdKickoffFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MdpCmdKickoffFtraceEvent& a, MdpCmdKickoffFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdKickoffFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCmdKickoffFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCmdKickoffFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCmdKickoffFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCmdKickoffFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCmdKickoffFtraceEvent& from) {
    MdpCmdKickoffFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCmdKickoffFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCmdKickoffFtraceEvent";
  }
  protected:
  explicit MdpCmdKickoffFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kKickoffCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num() ;
  ::uint32_t ctl_num() const;
  void set_ctl_num(::uint32_t value);

  private:
  ::uint32_t _internal_ctl_num() const;
  void _internal_set_ctl_num(::uint32_t value);

  public:
  // optional int32 kickoff_cnt = 2;
  bool has_kickoff_cnt() const;
  void clear_kickoff_cnt() ;
  ::int32_t kickoff_cnt() const;
  void set_kickoff_cnt(::int32_t value);

  private:
  ::int32_t _internal_kickoff_cnt() const;
  void _internal_set_kickoff_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdKickoffFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ctl_num_;
    ::int32_t kickoff_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpCommitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCommitFtraceEvent) */ {
 public:
  inline MdpCommitFtraceEvent() : MdpCommitFtraceEvent(nullptr) {}
  ~MdpCommitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCommitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCommitFtraceEvent(const MdpCommitFtraceEvent& from);
  MdpCommitFtraceEvent(MdpCommitFtraceEvent&& from) noexcept
    : MdpCommitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCommitFtraceEvent& operator=(const MdpCommitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCommitFtraceEvent& operator=(MdpCommitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCommitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCommitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCommitFtraceEvent*>(
               &_MdpCommitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MdpCommitFtraceEvent& a, MdpCommitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCommitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCommitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCommitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCommitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCommitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCommitFtraceEvent& from) {
    MdpCommitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCommitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCommitFtraceEvent";
  }
  protected:
  explicit MdpCommitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kPlayCntFieldNumber = 2,
    kBandwidthFieldNumber = 4,
    kClkRateFieldNumber = 3,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  void clear_num() ;
  ::uint32_t num() const;
  void set_num(::uint32_t value);

  private:
  ::uint32_t _internal_num() const;
  void _internal_set_num(::uint32_t value);

  public:
  // optional uint32 play_cnt = 2;
  bool has_play_cnt() const;
  void clear_play_cnt() ;
  ::uint32_t play_cnt() const;
  void set_play_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_play_cnt() const;
  void _internal_set_play_cnt(::uint32_t value);

  public:
  // optional uint64 bandwidth = 4;
  bool has_bandwidth() const;
  void clear_bandwidth() ;
  ::uint64_t bandwidth() const;
  void set_bandwidth(::uint64_t value);

  private:
  ::uint64_t _internal_bandwidth() const;
  void _internal_set_bandwidth(::uint64_t value);

  public:
  // optional uint32 clk_rate = 3;
  bool has_clk_rate() const;
  void clear_clk_rate() ;
  ::uint32_t clk_rate() const;
  void set_clk_rate(::uint32_t value);

  private:
  ::uint32_t _internal_clk_rate() const;
  void _internal_set_clk_rate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCommitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t num_;
    ::uint32_t play_cnt_;
    ::uint64_t bandwidth_;
    ::uint32_t clk_rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpPerfSetOtFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetOtFtraceEvent) */ {
 public:
  inline MdpPerfSetOtFtraceEvent() : MdpPerfSetOtFtraceEvent(nullptr) {}
  ~MdpPerfSetOtFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpPerfSetOtFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpPerfSetOtFtraceEvent(const MdpPerfSetOtFtraceEvent& from);
  MdpPerfSetOtFtraceEvent(MdpPerfSetOtFtraceEvent&& from) noexcept
    : MdpPerfSetOtFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetOtFtraceEvent& operator=(const MdpPerfSetOtFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetOtFtraceEvent& operator=(MdpPerfSetOtFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpPerfSetOtFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpPerfSetOtFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetOtFtraceEvent*>(
               &_MdpPerfSetOtFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MdpPerfSetOtFtraceEvent& a, MdpPerfSetOtFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetOtFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpPerfSetOtFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpPerfSetOtFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpPerfSetOtFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpPerfSetOtFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpPerfSetOtFtraceEvent& from) {
    MdpPerfSetOtFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpPerfSetOtFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpPerfSetOtFtraceEvent";
  }
  protected:
  explicit MdpPerfSetOtFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kXinIdFieldNumber = 2,
    kRdLimFieldNumber = 3,
    kIsVbifRtFieldNumber = 4,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum() ;
  ::uint32_t pnum() const;
  void set_pnum(::uint32_t value);

  private:
  ::uint32_t _internal_pnum() const;
  void _internal_set_pnum(::uint32_t value);

  public:
  // optional uint32 xin_id = 2;
  bool has_xin_id() const;
  void clear_xin_id() ;
  ::uint32_t xin_id() const;
  void set_xin_id(::uint32_t value);

  private:
  ::uint32_t _internal_xin_id() const;
  void _internal_set_xin_id(::uint32_t value);

  public:
  // optional uint32 rd_lim = 3;
  bool has_rd_lim() const;
  void clear_rd_lim() ;
  ::uint32_t rd_lim() const;
  void set_rd_lim(::uint32_t value);

  private:
  ::uint32_t _internal_rd_lim() const;
  void _internal_set_rd_lim(::uint32_t value);

  public:
  // optional uint32 is_vbif_rt = 4;
  bool has_is_vbif_rt() const;
  void clear_is_vbif_rt() ;
  ::uint32_t is_vbif_rt() const;
  void set_is_vbif_rt(::uint32_t value);

  private:
  ::uint32_t _internal_is_vbif_rt() const;
  void _internal_set_is_vbif_rt(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetOtFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t pnum_;
    ::uint32_t xin_id_;
    ::uint32_t rd_lim_;
    ::uint32_t is_vbif_rt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpSsppChangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpSsppChangeFtraceEvent) */ {
 public:
  inline MdpSsppChangeFtraceEvent() : MdpSsppChangeFtraceEvent(nullptr) {}
  ~MdpSsppChangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpSsppChangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpSsppChangeFtraceEvent(const MdpSsppChangeFtraceEvent& from);
  MdpSsppChangeFtraceEvent(MdpSsppChangeFtraceEvent&& from) noexcept
    : MdpSsppChangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpSsppChangeFtraceEvent& operator=(const MdpSsppChangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpSsppChangeFtraceEvent& operator=(MdpSsppChangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpSsppChangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpSsppChangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpSsppChangeFtraceEvent*>(
               &_MdpSsppChangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MdpSsppChangeFtraceEvent& a, MdpSsppChangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpSsppChangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpSsppChangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpSsppChangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpSsppChangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpSsppChangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpSsppChangeFtraceEvent& from) {
    MdpSsppChangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpSsppChangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpSsppChangeFtraceEvent";
  }
  protected:
  explicit MdpSsppChangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kPlayCntFieldNumber = 2,
    kMixerFieldNumber = 3,
    kStageFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kFormatFieldNumber = 6,
    kImgWFieldNumber = 7,
    kImgHFieldNumber = 8,
    kSrcXFieldNumber = 9,
    kSrcYFieldNumber = 10,
    kSrcWFieldNumber = 11,
    kSrcHFieldNumber = 12,
    kDstXFieldNumber = 13,
    kDstYFieldNumber = 14,
    kDstWFieldNumber = 15,
    kDstHFieldNumber = 16,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  void clear_num() ;
  ::uint32_t num() const;
  void set_num(::uint32_t value);

  private:
  ::uint32_t _internal_num() const;
  void _internal_set_num(::uint32_t value);

  public:
  // optional uint32 play_cnt = 2;
  bool has_play_cnt() const;
  void clear_play_cnt() ;
  ::uint32_t play_cnt() const;
  void set_play_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_play_cnt() const;
  void _internal_set_play_cnt(::uint32_t value);

  public:
  // optional uint32 mixer = 3;
  bool has_mixer() const;
  void clear_mixer() ;
  ::uint32_t mixer() const;
  void set_mixer(::uint32_t value);

  private:
  ::uint32_t _internal_mixer() const;
  void _internal_set_mixer(::uint32_t value);

  public:
  // optional uint32 stage = 4;
  bool has_stage() const;
  void clear_stage() ;
  ::uint32_t stage() const;
  void set_stage(::uint32_t value);

  private:
  ::uint32_t _internal_stage() const;
  void _internal_set_stage(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 format = 6;
  bool has_format() const;
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // optional uint32 img_w = 7;
  bool has_img_w() const;
  void clear_img_w() ;
  ::uint32_t img_w() const;
  void set_img_w(::uint32_t value);

  private:
  ::uint32_t _internal_img_w() const;
  void _internal_set_img_w(::uint32_t value);

  public:
  // optional uint32 img_h = 8;
  bool has_img_h() const;
  void clear_img_h() ;
  ::uint32_t img_h() const;
  void set_img_h(::uint32_t value);

  private:
  ::uint32_t _internal_img_h() const;
  void _internal_set_img_h(::uint32_t value);

  public:
  // optional uint32 src_x = 9;
  bool has_src_x() const;
  void clear_src_x() ;
  ::uint32_t src_x() const;
  void set_src_x(::uint32_t value);

  private:
  ::uint32_t _internal_src_x() const;
  void _internal_set_src_x(::uint32_t value);

  public:
  // optional uint32 src_y = 10;
  bool has_src_y() const;
  void clear_src_y() ;
  ::uint32_t src_y() const;
  void set_src_y(::uint32_t value);

  private:
  ::uint32_t _internal_src_y() const;
  void _internal_set_src_y(::uint32_t value);

  public:
  // optional uint32 src_w = 11;
  bool has_src_w() const;
  void clear_src_w() ;
  ::uint32_t src_w() const;
  void set_src_w(::uint32_t value);

  private:
  ::uint32_t _internal_src_w() const;
  void _internal_set_src_w(::uint32_t value);

  public:
  // optional uint32 src_h = 12;
  bool has_src_h() const;
  void clear_src_h() ;
  ::uint32_t src_h() const;
  void set_src_h(::uint32_t value);

  private:
  ::uint32_t _internal_src_h() const;
  void _internal_set_src_h(::uint32_t value);

  public:
  // optional uint32 dst_x = 13;
  bool has_dst_x() const;
  void clear_dst_x() ;
  ::uint32_t dst_x() const;
  void set_dst_x(::uint32_t value);

  private:
  ::uint32_t _internal_dst_x() const;
  void _internal_set_dst_x(::uint32_t value);

  public:
  // optional uint32 dst_y = 14;
  bool has_dst_y() const;
  void clear_dst_y() ;
  ::uint32_t dst_y() const;
  void set_dst_y(::uint32_t value);

  private:
  ::uint32_t _internal_dst_y() const;
  void _internal_set_dst_y(::uint32_t value);

  public:
  // optional uint32 dst_w = 15;
  bool has_dst_w() const;
  void clear_dst_w() ;
  ::uint32_t dst_w() const;
  void set_dst_w(::uint32_t value);

  private:
  ::uint32_t _internal_dst_w() const;
  void _internal_set_dst_w(::uint32_t value);

  public:
  // optional uint32 dst_h = 16;
  bool has_dst_h() const;
  void clear_dst_h() ;
  ::uint32_t dst_h() const;
  void set_dst_h(::uint32_t value);

  private:
  ::uint32_t _internal_dst_h() const;
  void _internal_set_dst_h(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpSsppChangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t num_;
    ::uint32_t play_cnt_;
    ::uint32_t mixer_;
    ::uint32_t stage_;
    ::uint32_t flags_;
    ::uint32_t format_;
    ::uint32_t img_w_;
    ::uint32_t img_h_;
    ::uint32_t src_x_;
    ::uint32_t src_y_;
    ::uint32_t src_w_;
    ::uint32_t src_h_;
    ::uint32_t dst_x_;
    ::uint32_t dst_y_;
    ::uint32_t dst_w_;
    ::uint32_t dst_h_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class TracingMarkWriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TracingMarkWriteFtraceEvent) */ {
 public:
  inline TracingMarkWriteFtraceEvent() : TracingMarkWriteFtraceEvent(nullptr) {}
  ~TracingMarkWriteFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TracingMarkWriteFtraceEvent(const TracingMarkWriteFtraceEvent& from);
  TracingMarkWriteFtraceEvent(TracingMarkWriteFtraceEvent&& from) noexcept
    : TracingMarkWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TracingMarkWriteFtraceEvent& operator=(const TracingMarkWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracingMarkWriteFtraceEvent& operator=(TracingMarkWriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TracingMarkWriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TracingMarkWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TracingMarkWriteFtraceEvent*>(
               &_TracingMarkWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TracingMarkWriteFtraceEvent& a, TracingMarkWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracingMarkWriteFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TracingMarkWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TracingMarkWriteFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TracingMarkWriteFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TracingMarkWriteFtraceEvent& from) {
    TracingMarkWriteFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracingMarkWriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TracingMarkWriteFtraceEvent";
  }
  protected:
  explicit TracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kTraceBeginFieldNumber = 3,
  };
  // optional string trace_name = 2;
  bool has_trace_name() const;
  void clear_trace_name() ;
  const std::string& trace_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_name(Arg_&& arg, Args_... args);
  std::string* mutable_trace_name();
  PROTOBUF_NODISCARD std::string* release_trace_name();
  void set_allocated_trace_name(std::string* ptr);

  private:
  const std::string& _internal_trace_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_name(
      const std::string& value);
  std::string* _internal_mutable_trace_name();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional uint32 trace_begin = 3;
  bool has_trace_begin() const;
  void clear_trace_begin() ;
  ::uint32_t trace_begin() const;
  void set_trace_begin(::uint32_t value);

  private:
  ::uint32_t _internal_trace_begin() const;
  void _internal_set_trace_begin(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TracingMarkWriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_name_;
    ::int32_t pid_;
    ::uint32_t trace_begin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpCmdPingpongDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdPingpongDoneFtraceEvent) */ {
 public:
  inline MdpCmdPingpongDoneFtraceEvent() : MdpCmdPingpongDoneFtraceEvent(nullptr) {}
  ~MdpCmdPingpongDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCmdPingpongDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCmdPingpongDoneFtraceEvent(const MdpCmdPingpongDoneFtraceEvent& from);
  MdpCmdPingpongDoneFtraceEvent(MdpCmdPingpongDoneFtraceEvent&& from) noexcept
    : MdpCmdPingpongDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdPingpongDoneFtraceEvent& operator=(const MdpCmdPingpongDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdPingpongDoneFtraceEvent& operator=(MdpCmdPingpongDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCmdPingpongDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCmdPingpongDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdPingpongDoneFtraceEvent*>(
               &_MdpCmdPingpongDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MdpCmdPingpongDoneFtraceEvent& a, MdpCmdPingpongDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdPingpongDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCmdPingpongDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCmdPingpongDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCmdPingpongDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCmdPingpongDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCmdPingpongDoneFtraceEvent& from) {
    MdpCmdPingpongDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCmdPingpongDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCmdPingpongDoneFtraceEvent";
  }
  protected:
  explicit MdpCmdPingpongDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kIntfNumFieldNumber = 2,
    kPpNumFieldNumber = 3,
    kKoffCntFieldNumber = 4,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num() ;
  ::uint32_t ctl_num() const;
  void set_ctl_num(::uint32_t value);

  private:
  ::uint32_t _internal_ctl_num() const;
  void _internal_set_ctl_num(::uint32_t value);

  public:
  // optional uint32 intf_num = 2;
  bool has_intf_num() const;
  void clear_intf_num() ;
  ::uint32_t intf_num() const;
  void set_intf_num(::uint32_t value);

  private:
  ::uint32_t _internal_intf_num() const;
  void _internal_set_intf_num(::uint32_t value);

  public:
  // optional uint32 pp_num = 3;
  bool has_pp_num() const;
  void clear_pp_num() ;
  ::uint32_t pp_num() const;
  void set_pp_num(::uint32_t value);

  private:
  ::uint32_t _internal_pp_num() const;
  void _internal_set_pp_num(::uint32_t value);

  public:
  // optional int32 koff_cnt = 4;
  bool has_koff_cnt() const;
  void clear_koff_cnt() ;
  ::int32_t koff_cnt() const;
  void set_koff_cnt(::int32_t value);

  private:
  ::int32_t _internal_koff_cnt() const;
  void _internal_set_koff_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdPingpongDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ctl_num_;
    ::uint32_t intf_num_;
    ::uint32_t pp_num_;
    ::int32_t koff_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpCompareBwFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCompareBwFtraceEvent) */ {
 public:
  inline MdpCompareBwFtraceEvent() : MdpCompareBwFtraceEvent(nullptr) {}
  ~MdpCompareBwFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCompareBwFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCompareBwFtraceEvent(const MdpCompareBwFtraceEvent& from);
  MdpCompareBwFtraceEvent(MdpCompareBwFtraceEvent&& from) noexcept
    : MdpCompareBwFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCompareBwFtraceEvent& operator=(const MdpCompareBwFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCompareBwFtraceEvent& operator=(MdpCompareBwFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCompareBwFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCompareBwFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCompareBwFtraceEvent*>(
               &_MdpCompareBwFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MdpCompareBwFtraceEvent& a, MdpCompareBwFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCompareBwFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCompareBwFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCompareBwFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCompareBwFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCompareBwFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCompareBwFtraceEvent& from) {
    MdpCompareBwFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCompareBwFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCompareBwFtraceEvent";
  }
  protected:
  explicit MdpCompareBwFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAbFieldNumber = 1,
    kNewIbFieldNumber = 2,
    kNewWbFieldNumber = 3,
    kOldAbFieldNumber = 4,
    kOldIbFieldNumber = 5,
    kOldWbFieldNumber = 6,
    kParamsChangedFieldNumber = 7,
    kUpdateBwFieldNumber = 8,
  };
  // optional uint64 new_ab = 1;
  bool has_new_ab() const;
  void clear_new_ab() ;
  ::uint64_t new_ab() const;
  void set_new_ab(::uint64_t value);

  private:
  ::uint64_t _internal_new_ab() const;
  void _internal_set_new_ab(::uint64_t value);

  public:
  // optional uint64 new_ib = 2;
  bool has_new_ib() const;
  void clear_new_ib() ;
  ::uint64_t new_ib() const;
  void set_new_ib(::uint64_t value);

  private:
  ::uint64_t _internal_new_ib() const;
  void _internal_set_new_ib(::uint64_t value);

  public:
  // optional uint64 new_wb = 3;
  bool has_new_wb() const;
  void clear_new_wb() ;
  ::uint64_t new_wb() const;
  void set_new_wb(::uint64_t value);

  private:
  ::uint64_t _internal_new_wb() const;
  void _internal_set_new_wb(::uint64_t value);

  public:
  // optional uint64 old_ab = 4;
  bool has_old_ab() const;
  void clear_old_ab() ;
  ::uint64_t old_ab() const;
  void set_old_ab(::uint64_t value);

  private:
  ::uint64_t _internal_old_ab() const;
  void _internal_set_old_ab(::uint64_t value);

  public:
  // optional uint64 old_ib = 5;
  bool has_old_ib() const;
  void clear_old_ib() ;
  ::uint64_t old_ib() const;
  void set_old_ib(::uint64_t value);

  private:
  ::uint64_t _internal_old_ib() const;
  void _internal_set_old_ib(::uint64_t value);

  public:
  // optional uint64 old_wb = 6;
  bool has_old_wb() const;
  void clear_old_wb() ;
  ::uint64_t old_wb() const;
  void set_old_wb(::uint64_t value);

  private:
  ::uint64_t _internal_old_wb() const;
  void _internal_set_old_wb(::uint64_t value);

  public:
  // optional uint32 params_changed = 7;
  bool has_params_changed() const;
  void clear_params_changed() ;
  ::uint32_t params_changed() const;
  void set_params_changed(::uint32_t value);

  private:
  ::uint32_t _internal_params_changed() const;
  void _internal_set_params_changed(::uint32_t value);

  public:
  // optional uint32 update_bw = 8;
  bool has_update_bw() const;
  void clear_update_bw() ;
  ::uint32_t update_bw() const;
  void set_update_bw(::uint32_t value);

  private:
  ::uint32_t _internal_update_bw() const;
  void _internal_set_update_bw(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCompareBwFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t new_ab_;
    ::uint64_t new_ib_;
    ::uint64_t new_wb_;
    ::uint64_t old_ab_;
    ::uint64_t old_ib_;
    ::uint64_t old_wb_;
    ::uint32_t params_changed_;
    ::uint32_t update_bw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpPerfSetPanicLutsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent) */ {
 public:
  inline MdpPerfSetPanicLutsFtraceEvent() : MdpPerfSetPanicLutsFtraceEvent(nullptr) {}
  ~MdpPerfSetPanicLutsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpPerfSetPanicLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpPerfSetPanicLutsFtraceEvent(const MdpPerfSetPanicLutsFtraceEvent& from);
  MdpPerfSetPanicLutsFtraceEvent(MdpPerfSetPanicLutsFtraceEvent&& from) noexcept
    : MdpPerfSetPanicLutsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetPanicLutsFtraceEvent& operator=(const MdpPerfSetPanicLutsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetPanicLutsFtraceEvent& operator=(MdpPerfSetPanicLutsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpPerfSetPanicLutsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpPerfSetPanicLutsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetPanicLutsFtraceEvent*>(
               &_MdpPerfSetPanicLutsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MdpPerfSetPanicLutsFtraceEvent& a, MdpPerfSetPanicLutsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetPanicLutsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpPerfSetPanicLutsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpPerfSetPanicLutsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpPerfSetPanicLutsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpPerfSetPanicLutsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpPerfSetPanicLutsFtraceEvent& from) {
    MdpPerfSetPanicLutsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpPerfSetPanicLutsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpPerfSetPanicLutsFtraceEvent";
  }
  protected:
  explicit MdpPerfSetPanicLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kFmtFieldNumber = 2,
    kModeFieldNumber = 3,
    kPanicLutFieldNumber = 4,
    kRobustLutFieldNumber = 5,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum() ;
  ::uint32_t pnum() const;
  void set_pnum(::uint32_t value);

  private:
  ::uint32_t _internal_pnum() const;
  void _internal_set_pnum(::uint32_t value);

  public:
  // optional uint32 fmt = 2;
  bool has_fmt() const;
  void clear_fmt() ;
  ::uint32_t fmt() const;
  void set_fmt(::uint32_t value);

  private:
  ::uint32_t _internal_fmt() const;
  void _internal_set_fmt(::uint32_t value);

  public:
  // optional uint32 mode = 3;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // optional uint32 panic_lut = 4;
  bool has_panic_lut() const;
  void clear_panic_lut() ;
  ::uint32_t panic_lut() const;
  void set_panic_lut(::uint32_t value);

  private:
  ::uint32_t _internal_panic_lut() const;
  void _internal_set_panic_lut(::uint32_t value);

  public:
  // optional uint32 robust_lut = 5;
  bool has_robust_lut() const;
  void clear_robust_lut() ;
  ::uint32_t robust_lut() const;
  void set_robust_lut(::uint32_t value);

  private:
  ::uint32_t _internal_robust_lut() const;
  void _internal_set_robust_lut(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t pnum_;
    ::uint32_t fmt_;
    ::uint32_t mode_;
    ::uint32_t panic_lut_;
    ::uint32_t robust_lut_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpSsppSetFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpSsppSetFtraceEvent) */ {
 public:
  inline MdpSsppSetFtraceEvent() : MdpSsppSetFtraceEvent(nullptr) {}
  ~MdpSsppSetFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpSsppSetFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpSsppSetFtraceEvent(const MdpSsppSetFtraceEvent& from);
  MdpSsppSetFtraceEvent(MdpSsppSetFtraceEvent&& from) noexcept
    : MdpSsppSetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpSsppSetFtraceEvent& operator=(const MdpSsppSetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpSsppSetFtraceEvent& operator=(MdpSsppSetFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpSsppSetFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpSsppSetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpSsppSetFtraceEvent*>(
               &_MdpSsppSetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MdpSsppSetFtraceEvent& a, MdpSsppSetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpSsppSetFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpSsppSetFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpSsppSetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpSsppSetFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpSsppSetFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpSsppSetFtraceEvent& from) {
    MdpSsppSetFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpSsppSetFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpSsppSetFtraceEvent";
  }
  protected:
  explicit MdpSsppSetFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kPlayCntFieldNumber = 2,
    kMixerFieldNumber = 3,
    kStageFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kFormatFieldNumber = 6,
    kImgWFieldNumber = 7,
    kImgHFieldNumber = 8,
    kSrcXFieldNumber = 9,
    kSrcYFieldNumber = 10,
    kSrcWFieldNumber = 11,
    kSrcHFieldNumber = 12,
    kDstXFieldNumber = 13,
    kDstYFieldNumber = 14,
    kDstWFieldNumber = 15,
    kDstHFieldNumber = 16,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  void clear_num() ;
  ::uint32_t num() const;
  void set_num(::uint32_t value);

  private:
  ::uint32_t _internal_num() const;
  void _internal_set_num(::uint32_t value);

  public:
  // optional uint32 play_cnt = 2;
  bool has_play_cnt() const;
  void clear_play_cnt() ;
  ::uint32_t play_cnt() const;
  void set_play_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_play_cnt() const;
  void _internal_set_play_cnt(::uint32_t value);

  public:
  // optional uint32 mixer = 3;
  bool has_mixer() const;
  void clear_mixer() ;
  ::uint32_t mixer() const;
  void set_mixer(::uint32_t value);

  private:
  ::uint32_t _internal_mixer() const;
  void _internal_set_mixer(::uint32_t value);

  public:
  // optional uint32 stage = 4;
  bool has_stage() const;
  void clear_stage() ;
  ::uint32_t stage() const;
  void set_stage(::uint32_t value);

  private:
  ::uint32_t _internal_stage() const;
  void _internal_set_stage(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 format = 6;
  bool has_format() const;
  void clear_format() ;
  ::uint32_t format() const;
  void set_format(::uint32_t value);

  private:
  ::uint32_t _internal_format() const;
  void _internal_set_format(::uint32_t value);

  public:
  // optional uint32 img_w = 7;
  bool has_img_w() const;
  void clear_img_w() ;
  ::uint32_t img_w() const;
  void set_img_w(::uint32_t value);

  private:
  ::uint32_t _internal_img_w() const;
  void _internal_set_img_w(::uint32_t value);

  public:
  // optional uint32 img_h = 8;
  bool has_img_h() const;
  void clear_img_h() ;
  ::uint32_t img_h() const;
  void set_img_h(::uint32_t value);

  private:
  ::uint32_t _internal_img_h() const;
  void _internal_set_img_h(::uint32_t value);

  public:
  // optional uint32 src_x = 9;
  bool has_src_x() const;
  void clear_src_x() ;
  ::uint32_t src_x() const;
  void set_src_x(::uint32_t value);

  private:
  ::uint32_t _internal_src_x() const;
  void _internal_set_src_x(::uint32_t value);

  public:
  // optional uint32 src_y = 10;
  bool has_src_y() const;
  void clear_src_y() ;
  ::uint32_t src_y() const;
  void set_src_y(::uint32_t value);

  private:
  ::uint32_t _internal_src_y() const;
  void _internal_set_src_y(::uint32_t value);

  public:
  // optional uint32 src_w = 11;
  bool has_src_w() const;
  void clear_src_w() ;
  ::uint32_t src_w() const;
  void set_src_w(::uint32_t value);

  private:
  ::uint32_t _internal_src_w() const;
  void _internal_set_src_w(::uint32_t value);

  public:
  // optional uint32 src_h = 12;
  bool has_src_h() const;
  void clear_src_h() ;
  ::uint32_t src_h() const;
  void set_src_h(::uint32_t value);

  private:
  ::uint32_t _internal_src_h() const;
  void _internal_set_src_h(::uint32_t value);

  public:
  // optional uint32 dst_x = 13;
  bool has_dst_x() const;
  void clear_dst_x() ;
  ::uint32_t dst_x() const;
  void set_dst_x(::uint32_t value);

  private:
  ::uint32_t _internal_dst_x() const;
  void _internal_set_dst_x(::uint32_t value);

  public:
  // optional uint32 dst_y = 14;
  bool has_dst_y() const;
  void clear_dst_y() ;
  ::uint32_t dst_y() const;
  void set_dst_y(::uint32_t value);

  private:
  ::uint32_t _internal_dst_y() const;
  void _internal_set_dst_y(::uint32_t value);

  public:
  // optional uint32 dst_w = 15;
  bool has_dst_w() const;
  void clear_dst_w() ;
  ::uint32_t dst_w() const;
  void set_dst_w(::uint32_t value);

  private:
  ::uint32_t _internal_dst_w() const;
  void _internal_set_dst_w(::uint32_t value);

  public:
  // optional uint32 dst_h = 16;
  bool has_dst_h() const;
  void clear_dst_h() ;
  ::uint32_t dst_h() const;
  void set_dst_h(::uint32_t value);

  private:
  ::uint32_t _internal_dst_h() const;
  void _internal_set_dst_h(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpSsppSetFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t num_;
    ::uint32_t play_cnt_;
    ::uint32_t mixer_;
    ::uint32_t stage_;
    ::uint32_t flags_;
    ::uint32_t format_;
    ::uint32_t img_w_;
    ::uint32_t img_h_;
    ::uint32_t src_x_;
    ::uint32_t src_y_;
    ::uint32_t src_w_;
    ::uint32_t src_h_;
    ::uint32_t dst_x_;
    ::uint32_t dst_y_;
    ::uint32_t dst_w_;
    ::uint32_t dst_h_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpCmdReadptrDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdReadptrDoneFtraceEvent) */ {
 public:
  inline MdpCmdReadptrDoneFtraceEvent() : MdpCmdReadptrDoneFtraceEvent(nullptr) {}
  ~MdpCmdReadptrDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCmdReadptrDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCmdReadptrDoneFtraceEvent(const MdpCmdReadptrDoneFtraceEvent& from);
  MdpCmdReadptrDoneFtraceEvent(MdpCmdReadptrDoneFtraceEvent&& from) noexcept
    : MdpCmdReadptrDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdReadptrDoneFtraceEvent& operator=(const MdpCmdReadptrDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdReadptrDoneFtraceEvent& operator=(MdpCmdReadptrDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCmdReadptrDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCmdReadptrDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdReadptrDoneFtraceEvent*>(
               &_MdpCmdReadptrDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MdpCmdReadptrDoneFtraceEvent& a, MdpCmdReadptrDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdReadptrDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCmdReadptrDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCmdReadptrDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCmdReadptrDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCmdReadptrDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCmdReadptrDoneFtraceEvent& from) {
    MdpCmdReadptrDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCmdReadptrDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCmdReadptrDoneFtraceEvent";
  }
  protected:
  explicit MdpCmdReadptrDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kKoffCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num() ;
  ::uint32_t ctl_num() const;
  void set_ctl_num(::uint32_t value);

  private:
  ::uint32_t _internal_ctl_num() const;
  void _internal_set_ctl_num(::uint32_t value);

  public:
  // optional int32 koff_cnt = 2;
  bool has_koff_cnt() const;
  void clear_koff_cnt() ;
  ::int32_t koff_cnt() const;
  void set_koff_cnt(::int32_t value);

  private:
  ::int32_t _internal_koff_cnt() const;
  void _internal_set_koff_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdReadptrDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ctl_num_;
    ::int32_t koff_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpMisrCrcFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpMisrCrcFtraceEvent) */ {
 public:
  inline MdpMisrCrcFtraceEvent() : MdpMisrCrcFtraceEvent(nullptr) {}
  ~MdpMisrCrcFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpMisrCrcFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpMisrCrcFtraceEvent(const MdpMisrCrcFtraceEvent& from);
  MdpMisrCrcFtraceEvent(MdpMisrCrcFtraceEvent&& from) noexcept
    : MdpMisrCrcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpMisrCrcFtraceEvent& operator=(const MdpMisrCrcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpMisrCrcFtraceEvent& operator=(MdpMisrCrcFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpMisrCrcFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpMisrCrcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpMisrCrcFtraceEvent*>(
               &_MdpMisrCrcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MdpMisrCrcFtraceEvent& a, MdpMisrCrcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpMisrCrcFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpMisrCrcFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpMisrCrcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpMisrCrcFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpMisrCrcFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpMisrCrcFtraceEvent& from) {
    MdpMisrCrcFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpMisrCrcFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpMisrCrcFtraceEvent";
  }
  protected:
  explicit MdpMisrCrcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kVsyncCntFieldNumber = 2,
    kCrcFieldNumber = 3,
  };
  // optional uint32 block_id = 1;
  bool has_block_id() const;
  void clear_block_id() ;
  ::uint32_t block_id() const;
  void set_block_id(::uint32_t value);

  private:
  ::uint32_t _internal_block_id() const;
  void _internal_set_block_id(::uint32_t value);

  public:
  // optional uint32 vsync_cnt = 2;
  bool has_vsync_cnt() const;
  void clear_vsync_cnt() ;
  ::uint32_t vsync_cnt() const;
  void set_vsync_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_vsync_cnt() const;
  void _internal_set_vsync_cnt(::uint32_t value);

  public:
  // optional uint32 crc = 3;
  bool has_crc() const;
  void clear_crc() ;
  ::uint32_t crc() const;
  void set_crc(::uint32_t value);

  private:
  ::uint32_t _internal_crc() const;
  void _internal_set_crc(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpMisrCrcFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t block_id_;
    ::uint32_t vsync_cnt_;
    ::uint32_t crc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpPerfSetQosLutsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetQosLutsFtraceEvent) */ {
 public:
  inline MdpPerfSetQosLutsFtraceEvent() : MdpPerfSetQosLutsFtraceEvent(nullptr) {}
  ~MdpPerfSetQosLutsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpPerfSetQosLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpPerfSetQosLutsFtraceEvent(const MdpPerfSetQosLutsFtraceEvent& from);
  MdpPerfSetQosLutsFtraceEvent(MdpPerfSetQosLutsFtraceEvent&& from) noexcept
    : MdpPerfSetQosLutsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetQosLutsFtraceEvent& operator=(const MdpPerfSetQosLutsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetQosLutsFtraceEvent& operator=(MdpPerfSetQosLutsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpPerfSetQosLutsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpPerfSetQosLutsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetQosLutsFtraceEvent*>(
               &_MdpPerfSetQosLutsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MdpPerfSetQosLutsFtraceEvent& a, MdpPerfSetQosLutsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetQosLutsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpPerfSetQosLutsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpPerfSetQosLutsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpPerfSetQosLutsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpPerfSetQosLutsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpPerfSetQosLutsFtraceEvent& from) {
    MdpPerfSetQosLutsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpPerfSetQosLutsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpPerfSetQosLutsFtraceEvent";
  }
  protected:
  explicit MdpPerfSetQosLutsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kFmtFieldNumber = 2,
    kIntfFieldNumber = 3,
    kRotFieldNumber = 4,
    kFlFieldNumber = 5,
    kLutFieldNumber = 6,
    kLinearFieldNumber = 7,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum() ;
  ::uint32_t pnum() const;
  void set_pnum(::uint32_t value);

  private:
  ::uint32_t _internal_pnum() const;
  void _internal_set_pnum(::uint32_t value);

  public:
  // optional uint32 fmt = 2;
  bool has_fmt() const;
  void clear_fmt() ;
  ::uint32_t fmt() const;
  void set_fmt(::uint32_t value);

  private:
  ::uint32_t _internal_fmt() const;
  void _internal_set_fmt(::uint32_t value);

  public:
  // optional uint32 intf = 3;
  bool has_intf() const;
  void clear_intf() ;
  ::uint32_t intf() const;
  void set_intf(::uint32_t value);

  private:
  ::uint32_t _internal_intf() const;
  void _internal_set_intf(::uint32_t value);

  public:
  // optional uint32 rot = 4;
  bool has_rot() const;
  void clear_rot() ;
  ::uint32_t rot() const;
  void set_rot(::uint32_t value);

  private:
  ::uint32_t _internal_rot() const;
  void _internal_set_rot(::uint32_t value);

  public:
  // optional uint32 fl = 5;
  bool has_fl() const;
  void clear_fl() ;
  ::uint32_t fl() const;
  void set_fl(::uint32_t value);

  private:
  ::uint32_t _internal_fl() const;
  void _internal_set_fl(::uint32_t value);

  public:
  // optional uint32 lut = 6;
  bool has_lut() const;
  void clear_lut() ;
  ::uint32_t lut() const;
  void set_lut(::uint32_t value);

  private:
  ::uint32_t _internal_lut() const;
  void _internal_set_lut(::uint32_t value);

  public:
  // optional uint32 linear = 7;
  bool has_linear() const;
  void clear_linear() ;
  ::uint32_t linear() const;
  void set_linear(::uint32_t value);

  private:
  ::uint32_t _internal_linear() const;
  void _internal_set_linear(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetQosLutsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t pnum_;
    ::uint32_t fmt_;
    ::uint32_t intf_;
    ::uint32_t rot_;
    ::uint32_t fl_;
    ::uint32_t lut_;
    ::uint32_t linear_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpTraceCounterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpTraceCounterFtraceEvent) */ {
 public:
  inline MdpTraceCounterFtraceEvent() : MdpTraceCounterFtraceEvent(nullptr) {}
  ~MdpTraceCounterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpTraceCounterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpTraceCounterFtraceEvent(const MdpTraceCounterFtraceEvent& from);
  MdpTraceCounterFtraceEvent(MdpTraceCounterFtraceEvent&& from) noexcept
    : MdpTraceCounterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpTraceCounterFtraceEvent& operator=(const MdpTraceCounterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpTraceCounterFtraceEvent& operator=(MdpTraceCounterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpTraceCounterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpTraceCounterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpTraceCounterFtraceEvent*>(
               &_MdpTraceCounterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MdpTraceCounterFtraceEvent& a, MdpTraceCounterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpTraceCounterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpTraceCounterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpTraceCounterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpTraceCounterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpTraceCounterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpTraceCounterFtraceEvent& from) {
    MdpTraceCounterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpTraceCounterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpTraceCounterFtraceEvent";
  }
  protected:
  explicit MdpTraceCounterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kValueFieldNumber = 3,
  };
  // optional string counter_name = 2;
  bool has_counter_name() const;
  void clear_counter_name() ;
  const std::string& counter_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_counter_name(Arg_&& arg, Args_... args);
  std::string* mutable_counter_name();
  PROTOBUF_NODISCARD std::string* release_counter_name();
  void set_allocated_counter_name(std::string* ptr);

  private:
  const std::string& _internal_counter_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_name(
      const std::string& value);
  std::string* _internal_mutable_counter_name();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 value = 3;
  bool has_value() const;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpTraceCounterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_name_;
    ::int32_t pid_;
    ::int32_t value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpCmdReleaseBwFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdReleaseBwFtraceEvent) */ {
 public:
  inline MdpCmdReleaseBwFtraceEvent() : MdpCmdReleaseBwFtraceEvent(nullptr) {}
  ~MdpCmdReleaseBwFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCmdReleaseBwFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCmdReleaseBwFtraceEvent(const MdpCmdReleaseBwFtraceEvent& from);
  MdpCmdReleaseBwFtraceEvent(MdpCmdReleaseBwFtraceEvent&& from) noexcept
    : MdpCmdReleaseBwFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdReleaseBwFtraceEvent& operator=(const MdpCmdReleaseBwFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdReleaseBwFtraceEvent& operator=(MdpCmdReleaseBwFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCmdReleaseBwFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCmdReleaseBwFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdReleaseBwFtraceEvent*>(
               &_MdpCmdReleaseBwFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MdpCmdReleaseBwFtraceEvent& a, MdpCmdReleaseBwFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdReleaseBwFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCmdReleaseBwFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCmdReleaseBwFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCmdReleaseBwFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCmdReleaseBwFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCmdReleaseBwFtraceEvent& from) {
    MdpCmdReleaseBwFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCmdReleaseBwFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCmdReleaseBwFtraceEvent";
  }
  protected:
  explicit MdpCmdReleaseBwFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num() ;
  ::uint32_t ctl_num() const;
  void set_ctl_num(::uint32_t value);

  private:
  ::uint32_t _internal_ctl_num() const;
  void _internal_set_ctl_num(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdReleaseBwFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ctl_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpMixerUpdateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpMixerUpdateFtraceEvent) */ {
 public:
  inline MdpMixerUpdateFtraceEvent() : MdpMixerUpdateFtraceEvent(nullptr) {}
  ~MdpMixerUpdateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpMixerUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpMixerUpdateFtraceEvent(const MdpMixerUpdateFtraceEvent& from);
  MdpMixerUpdateFtraceEvent(MdpMixerUpdateFtraceEvent&& from) noexcept
    : MdpMixerUpdateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpMixerUpdateFtraceEvent& operator=(const MdpMixerUpdateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpMixerUpdateFtraceEvent& operator=(MdpMixerUpdateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpMixerUpdateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpMixerUpdateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpMixerUpdateFtraceEvent*>(
               &_MdpMixerUpdateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MdpMixerUpdateFtraceEvent& a, MdpMixerUpdateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpMixerUpdateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpMixerUpdateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpMixerUpdateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpMixerUpdateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpMixerUpdateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpMixerUpdateFtraceEvent& from) {
    MdpMixerUpdateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpMixerUpdateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpMixerUpdateFtraceEvent";
  }
  protected:
  explicit MdpMixerUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMixerNumFieldNumber = 1,
  };
  // optional uint32 mixer_num = 1;
  bool has_mixer_num() const;
  void clear_mixer_num() ;
  ::uint32_t mixer_num() const;
  void set_mixer_num(::uint32_t value);

  private:
  ::uint32_t _internal_mixer_num() const;
  void _internal_set_mixer_num(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpMixerUpdateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t mixer_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpPerfSetWmLevelsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent) */ {
 public:
  inline MdpPerfSetWmLevelsFtraceEvent() : MdpPerfSetWmLevelsFtraceEvent(nullptr) {}
  ~MdpPerfSetWmLevelsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpPerfSetWmLevelsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpPerfSetWmLevelsFtraceEvent(const MdpPerfSetWmLevelsFtraceEvent& from);
  MdpPerfSetWmLevelsFtraceEvent(MdpPerfSetWmLevelsFtraceEvent&& from) noexcept
    : MdpPerfSetWmLevelsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfSetWmLevelsFtraceEvent& operator=(const MdpPerfSetWmLevelsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfSetWmLevelsFtraceEvent& operator=(MdpPerfSetWmLevelsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpPerfSetWmLevelsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpPerfSetWmLevelsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfSetWmLevelsFtraceEvent*>(
               &_MdpPerfSetWmLevelsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MdpPerfSetWmLevelsFtraceEvent& a, MdpPerfSetWmLevelsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfSetWmLevelsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpPerfSetWmLevelsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpPerfSetWmLevelsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpPerfSetWmLevelsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpPerfSetWmLevelsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpPerfSetWmLevelsFtraceEvent& from) {
    MdpPerfSetWmLevelsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpPerfSetWmLevelsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpPerfSetWmLevelsFtraceEvent";
  }
  protected:
  explicit MdpPerfSetWmLevelsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kUseSpaceFieldNumber = 2,
    kPriorityBytesFieldNumber = 3,
    kWm0FieldNumber = 4,
    kWm1FieldNumber = 5,
    kWm2FieldNumber = 6,
    kMbCntFieldNumber = 7,
    kMbSizeFieldNumber = 8,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum() ;
  ::uint32_t pnum() const;
  void set_pnum(::uint32_t value);

  private:
  ::uint32_t _internal_pnum() const;
  void _internal_set_pnum(::uint32_t value);

  public:
  // optional uint32 use_space = 2;
  bool has_use_space() const;
  void clear_use_space() ;
  ::uint32_t use_space() const;
  void set_use_space(::uint32_t value);

  private:
  ::uint32_t _internal_use_space() const;
  void _internal_set_use_space(::uint32_t value);

  public:
  // optional uint32 priority_bytes = 3;
  bool has_priority_bytes() const;
  void clear_priority_bytes() ;
  ::uint32_t priority_bytes() const;
  void set_priority_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_priority_bytes() const;
  void _internal_set_priority_bytes(::uint32_t value);

  public:
  // optional uint32 wm0 = 4;
  bool has_wm0() const;
  void clear_wm0() ;
  ::uint32_t wm0() const;
  void set_wm0(::uint32_t value);

  private:
  ::uint32_t _internal_wm0() const;
  void _internal_set_wm0(::uint32_t value);

  public:
  // optional uint32 wm1 = 5;
  bool has_wm1() const;
  void clear_wm1() ;
  ::uint32_t wm1() const;
  void set_wm1(::uint32_t value);

  private:
  ::uint32_t _internal_wm1() const;
  void _internal_set_wm1(::uint32_t value);

  public:
  // optional uint32 wm2 = 6;
  bool has_wm2() const;
  void clear_wm2() ;
  ::uint32_t wm2() const;
  void set_wm2(::uint32_t value);

  private:
  ::uint32_t _internal_wm2() const;
  void _internal_set_wm2(::uint32_t value);

  public:
  // optional uint32 mb_cnt = 7;
  bool has_mb_cnt() const;
  void clear_mb_cnt() ;
  ::uint32_t mb_cnt() const;
  void set_mb_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_mb_cnt() const;
  void _internal_set_mb_cnt(::uint32_t value);

  public:
  // optional uint32 mb_size = 8;
  bool has_mb_size() const;
  void clear_mb_size() ;
  ::uint32_t mb_size() const;
  void set_mb_size(::uint32_t value);

  private:
  ::uint32_t _internal_mb_size() const;
  void _internal_set_mb_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t pnum_;
    ::uint32_t use_space_;
    ::uint32_t priority_bytes_;
    ::uint32_t wm0_;
    ::uint32_t wm1_;
    ::uint32_t wm2_;
    ::uint32_t mb_cnt_;
    ::uint32_t mb_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpVideoUnderrunDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent) */ {
 public:
  inline MdpVideoUnderrunDoneFtraceEvent() : MdpVideoUnderrunDoneFtraceEvent(nullptr) {}
  ~MdpVideoUnderrunDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpVideoUnderrunDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpVideoUnderrunDoneFtraceEvent(const MdpVideoUnderrunDoneFtraceEvent& from);
  MdpVideoUnderrunDoneFtraceEvent(MdpVideoUnderrunDoneFtraceEvent&& from) noexcept
    : MdpVideoUnderrunDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpVideoUnderrunDoneFtraceEvent& operator=(const MdpVideoUnderrunDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpVideoUnderrunDoneFtraceEvent& operator=(MdpVideoUnderrunDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpVideoUnderrunDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpVideoUnderrunDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpVideoUnderrunDoneFtraceEvent*>(
               &_MdpVideoUnderrunDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MdpVideoUnderrunDoneFtraceEvent& a, MdpVideoUnderrunDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpVideoUnderrunDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpVideoUnderrunDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpVideoUnderrunDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpVideoUnderrunDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpVideoUnderrunDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpVideoUnderrunDoneFtraceEvent& from) {
    MdpVideoUnderrunDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpVideoUnderrunDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpVideoUnderrunDoneFtraceEvent";
  }
  protected:
  explicit MdpVideoUnderrunDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kUnderrunCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num() ;
  ::uint32_t ctl_num() const;
  void set_ctl_num(::uint32_t value);

  private:
  ::uint32_t _internal_ctl_num() const;
  void _internal_set_ctl_num(::uint32_t value);

  public:
  // optional uint32 underrun_cnt = 2;
  bool has_underrun_cnt() const;
  void clear_underrun_cnt() ;
  ::uint32_t underrun_cnt() const;
  void set_underrun_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_underrun_cnt() const;
  void _internal_set_underrun_cnt(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ctl_num_;
    ::uint32_t underrun_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpCmdWaitPingpongFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpCmdWaitPingpongFtraceEvent) */ {
 public:
  inline MdpCmdWaitPingpongFtraceEvent() : MdpCmdWaitPingpongFtraceEvent(nullptr) {}
  ~MdpCmdWaitPingpongFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpCmdWaitPingpongFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpCmdWaitPingpongFtraceEvent(const MdpCmdWaitPingpongFtraceEvent& from);
  MdpCmdWaitPingpongFtraceEvent(MdpCmdWaitPingpongFtraceEvent&& from) noexcept
    : MdpCmdWaitPingpongFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpCmdWaitPingpongFtraceEvent& operator=(const MdpCmdWaitPingpongFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpCmdWaitPingpongFtraceEvent& operator=(MdpCmdWaitPingpongFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpCmdWaitPingpongFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpCmdWaitPingpongFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpCmdWaitPingpongFtraceEvent*>(
               &_MdpCmdWaitPingpongFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MdpCmdWaitPingpongFtraceEvent& a, MdpCmdWaitPingpongFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpCmdWaitPingpongFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpCmdWaitPingpongFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpCmdWaitPingpongFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpCmdWaitPingpongFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpCmdWaitPingpongFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpCmdWaitPingpongFtraceEvent& from) {
    MdpCmdWaitPingpongFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpCmdWaitPingpongFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpCmdWaitPingpongFtraceEvent";
  }
  protected:
  explicit MdpCmdWaitPingpongFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtlNumFieldNumber = 1,
    kKickoffCntFieldNumber = 2,
  };
  // optional uint32 ctl_num = 1;
  bool has_ctl_num() const;
  void clear_ctl_num() ;
  ::uint32_t ctl_num() const;
  void set_ctl_num(::uint32_t value);

  private:
  ::uint32_t _internal_ctl_num() const;
  void _internal_set_ctl_num(::uint32_t value);

  public:
  // optional int32 kickoff_cnt = 2;
  bool has_kickoff_cnt() const;
  void clear_kickoff_cnt() ;
  ::int32_t kickoff_cnt() const;
  void set_kickoff_cnt(::int32_t value);

  private:
  ::int32_t _internal_kickoff_cnt() const;
  void _internal_set_kickoff_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpCmdWaitPingpongFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ctl_num_;
    ::int32_t kickoff_cnt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpPerfPrefillCalcFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfPrefillCalcFtraceEvent) */ {
 public:
  inline MdpPerfPrefillCalcFtraceEvent() : MdpPerfPrefillCalcFtraceEvent(nullptr) {}
  ~MdpPerfPrefillCalcFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpPerfPrefillCalcFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpPerfPrefillCalcFtraceEvent(const MdpPerfPrefillCalcFtraceEvent& from);
  MdpPerfPrefillCalcFtraceEvent(MdpPerfPrefillCalcFtraceEvent&& from) noexcept
    : MdpPerfPrefillCalcFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfPrefillCalcFtraceEvent& operator=(const MdpPerfPrefillCalcFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfPrefillCalcFtraceEvent& operator=(MdpPerfPrefillCalcFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpPerfPrefillCalcFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpPerfPrefillCalcFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfPrefillCalcFtraceEvent*>(
               &_MdpPerfPrefillCalcFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MdpPerfPrefillCalcFtraceEvent& a, MdpPerfPrefillCalcFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfPrefillCalcFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpPerfPrefillCalcFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpPerfPrefillCalcFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpPerfPrefillCalcFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpPerfPrefillCalcFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpPerfPrefillCalcFtraceEvent& from) {
    MdpPerfPrefillCalcFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpPerfPrefillCalcFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpPerfPrefillCalcFtraceEvent";
  }
  protected:
  explicit MdpPerfPrefillCalcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPnumFieldNumber = 1,
    kLatencyBufFieldNumber = 2,
    kOtFieldNumber = 3,
    kYBufFieldNumber = 4,
    kYScalerFieldNumber = 5,
    kPpLinesFieldNumber = 6,
    kPpBytesFieldNumber = 7,
    kPostScFieldNumber = 8,
    kFbcBytesFieldNumber = 9,
    kPrefillBytesFieldNumber = 10,
  };
  // optional uint32 pnum = 1;
  bool has_pnum() const;
  void clear_pnum() ;
  ::uint32_t pnum() const;
  void set_pnum(::uint32_t value);

  private:
  ::uint32_t _internal_pnum() const;
  void _internal_set_pnum(::uint32_t value);

  public:
  // optional uint32 latency_buf = 2;
  bool has_latency_buf() const;
  void clear_latency_buf() ;
  ::uint32_t latency_buf() const;
  void set_latency_buf(::uint32_t value);

  private:
  ::uint32_t _internal_latency_buf() const;
  void _internal_set_latency_buf(::uint32_t value);

  public:
  // optional uint32 ot = 3;
  bool has_ot() const;
  void clear_ot() ;
  ::uint32_t ot() const;
  void set_ot(::uint32_t value);

  private:
  ::uint32_t _internal_ot() const;
  void _internal_set_ot(::uint32_t value);

  public:
  // optional uint32 y_buf = 4;
  bool has_y_buf() const;
  void clear_y_buf() ;
  ::uint32_t y_buf() const;
  void set_y_buf(::uint32_t value);

  private:
  ::uint32_t _internal_y_buf() const;
  void _internal_set_y_buf(::uint32_t value);

  public:
  // optional uint32 y_scaler = 5;
  bool has_y_scaler() const;
  void clear_y_scaler() ;
  ::uint32_t y_scaler() const;
  void set_y_scaler(::uint32_t value);

  private:
  ::uint32_t _internal_y_scaler() const;
  void _internal_set_y_scaler(::uint32_t value);

  public:
  // optional uint32 pp_lines = 6;
  bool has_pp_lines() const;
  void clear_pp_lines() ;
  ::uint32_t pp_lines() const;
  void set_pp_lines(::uint32_t value);

  private:
  ::uint32_t _internal_pp_lines() const;
  void _internal_set_pp_lines(::uint32_t value);

  public:
  // optional uint32 pp_bytes = 7;
  bool has_pp_bytes() const;
  void clear_pp_bytes() ;
  ::uint32_t pp_bytes() const;
  void set_pp_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_pp_bytes() const;
  void _internal_set_pp_bytes(::uint32_t value);

  public:
  // optional uint32 post_sc = 8;
  bool has_post_sc() const;
  void clear_post_sc() ;
  ::uint32_t post_sc() const;
  void set_post_sc(::uint32_t value);

  private:
  ::uint32_t _internal_post_sc() const;
  void _internal_set_post_sc(::uint32_t value);

  public:
  // optional uint32 fbc_bytes = 9;
  bool has_fbc_bytes() const;
  void clear_fbc_bytes() ;
  ::uint32_t fbc_bytes() const;
  void set_fbc_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_fbc_bytes() const;
  void _internal_set_fbc_bytes(::uint32_t value);

  public:
  // optional uint32 prefill_bytes = 10;
  bool has_prefill_bytes() const;
  void clear_prefill_bytes() ;
  ::uint32_t prefill_bytes() const;
  void set_prefill_bytes(::uint32_t value);

  private:
  ::uint32_t _internal_prefill_bytes() const;
  void _internal_set_prefill_bytes(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfPrefillCalcFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t pnum_;
    ::uint32_t latency_buf_;
    ::uint32_t ot_;
    ::uint32_t y_buf_;
    ::uint32_t y_scaler_;
    ::uint32_t pp_lines_;
    ::uint32_t pp_bytes_;
    ::uint32_t post_sc_;
    ::uint32_t fbc_bytes_;
    ::uint32_t prefill_bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class MdpPerfUpdateBusFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MdpPerfUpdateBusFtraceEvent) */ {
 public:
  inline MdpPerfUpdateBusFtraceEvent() : MdpPerfUpdateBusFtraceEvent(nullptr) {}
  ~MdpPerfUpdateBusFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MdpPerfUpdateBusFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MdpPerfUpdateBusFtraceEvent(const MdpPerfUpdateBusFtraceEvent& from);
  MdpPerfUpdateBusFtraceEvent(MdpPerfUpdateBusFtraceEvent&& from) noexcept
    : MdpPerfUpdateBusFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MdpPerfUpdateBusFtraceEvent& operator=(const MdpPerfUpdateBusFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MdpPerfUpdateBusFtraceEvent& operator=(MdpPerfUpdateBusFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MdpPerfUpdateBusFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MdpPerfUpdateBusFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MdpPerfUpdateBusFtraceEvent*>(
               &_MdpPerfUpdateBusFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MdpPerfUpdateBusFtraceEvent& a, MdpPerfUpdateBusFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MdpPerfUpdateBusFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MdpPerfUpdateBusFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MdpPerfUpdateBusFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MdpPerfUpdateBusFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MdpPerfUpdateBusFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MdpPerfUpdateBusFtraceEvent& from) {
    MdpPerfUpdateBusFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdpPerfUpdateBusFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MdpPerfUpdateBusFtraceEvent";
  }
  protected:
  explicit MdpPerfUpdateBusFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbQuotaFieldNumber = 2,
    kIbQuotaFieldNumber = 3,
    kClientFieldNumber = 1,
  };
  // optional uint64 ab_quota = 2;
  bool has_ab_quota() const;
  void clear_ab_quota() ;
  ::uint64_t ab_quota() const;
  void set_ab_quota(::uint64_t value);

  private:
  ::uint64_t _internal_ab_quota() const;
  void _internal_set_ab_quota(::uint64_t value);

  public:
  // optional uint64 ib_quota = 3;
  bool has_ib_quota() const;
  void clear_ib_quota() ;
  ::uint64_t ib_quota() const;
  void set_ib_quota(::uint64_t value);

  private:
  ::uint64_t _internal_ib_quota() const;
  void _internal_set_ib_quota(::uint64_t value);

  public:
  // optional int32 client = 1;
  bool has_client() const;
  void clear_client() ;
  ::int32_t client() const;
  void set_client(::int32_t value);

  private:
  ::int32_t _internal_client() const;
  void _internal_set_client(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MdpPerfUpdateBusFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t ab_quota_;
    ::uint64_t ib_quota_;
    ::int32_t client_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};// -------------------------------------------------------------------

class RotatorBwAoAsContextFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.RotatorBwAoAsContextFtraceEvent) */ {
 public:
  inline RotatorBwAoAsContextFtraceEvent() : RotatorBwAoAsContextFtraceEvent(nullptr) {}
  ~RotatorBwAoAsContextFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RotatorBwAoAsContextFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotatorBwAoAsContextFtraceEvent(const RotatorBwAoAsContextFtraceEvent& from);
  RotatorBwAoAsContextFtraceEvent(RotatorBwAoAsContextFtraceEvent&& from) noexcept
    : RotatorBwAoAsContextFtraceEvent() {
    *this = ::std::move(from);
  }

  inline RotatorBwAoAsContextFtraceEvent& operator=(const RotatorBwAoAsContextFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotatorBwAoAsContextFtraceEvent& operator=(RotatorBwAoAsContextFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RotatorBwAoAsContextFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotatorBwAoAsContextFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const RotatorBwAoAsContextFtraceEvent*>(
               &_RotatorBwAoAsContextFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RotatorBwAoAsContextFtraceEvent& a, RotatorBwAoAsContextFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RotatorBwAoAsContextFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotatorBwAoAsContextFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotatorBwAoAsContextFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotatorBwAoAsContextFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RotatorBwAoAsContextFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RotatorBwAoAsContextFtraceEvent& from) {
    RotatorBwAoAsContextFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotatorBwAoAsContextFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.RotatorBwAoAsContextFtraceEvent";
  }
  protected:
  explicit RotatorBwAoAsContextFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional uint32 state = 1;
  bool has_state() const;
  void clear_state() ;
  ::uint32_t state() const;
  void set_state(::uint32_t value);

  private:
  ::uint32_t _internal_state() const;
  void _internal_set_state(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.RotatorBwAoAsContextFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MdpCmdKickoffFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdKickoffFtraceEvent::has_ctl_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCmdKickoffFtraceEvent::clear_ctl_num() {
  _impl_.ctl_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpCmdKickoffFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdKickoffFtraceEvent.ctl_num)
  return _internal_ctl_num();
}
inline void MdpCmdKickoffFtraceEvent::set_ctl_num(::uint32_t value) {
  _internal_set_ctl_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdKickoffFtraceEvent.ctl_num)
}
inline ::uint32_t MdpCmdKickoffFtraceEvent::_internal_ctl_num() const {
  return _impl_.ctl_num_;
}
inline void MdpCmdKickoffFtraceEvent::_internal_set_ctl_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_num_ = value;
}

// optional int32 kickoff_cnt = 2;
inline bool MdpCmdKickoffFtraceEvent::has_kickoff_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpCmdKickoffFtraceEvent::clear_kickoff_cnt() {
  _impl_.kickoff_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MdpCmdKickoffFtraceEvent::kickoff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdKickoffFtraceEvent.kickoff_cnt)
  return _internal_kickoff_cnt();
}
inline void MdpCmdKickoffFtraceEvent::set_kickoff_cnt(::int32_t value) {
  _internal_set_kickoff_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdKickoffFtraceEvent.kickoff_cnt)
}
inline ::int32_t MdpCmdKickoffFtraceEvent::_internal_kickoff_cnt() const {
  return _impl_.kickoff_cnt_;
}
inline void MdpCmdKickoffFtraceEvent::_internal_set_kickoff_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kickoff_cnt_ = value;
}

// -------------------------------------------------------------------

// MdpCommitFtraceEvent

// optional uint32 num = 1;
inline bool MdpCommitFtraceEvent::has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCommitFtraceEvent::clear_num() {
  _impl_.num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpCommitFtraceEvent::num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.num)
  return _internal_num();
}
inline void MdpCommitFtraceEvent::set_num(::uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.num)
}
inline ::uint32_t MdpCommitFtraceEvent::_internal_num() const {
  return _impl_.num_;
}
inline void MdpCommitFtraceEvent::_internal_set_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_ = value;
}

// optional uint32 play_cnt = 2;
inline bool MdpCommitFtraceEvent::has_play_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpCommitFtraceEvent::clear_play_cnt() {
  _impl_.play_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpCommitFtraceEvent::play_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.play_cnt)
  return _internal_play_cnt();
}
inline void MdpCommitFtraceEvent::set_play_cnt(::uint32_t value) {
  _internal_set_play_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.play_cnt)
}
inline ::uint32_t MdpCommitFtraceEvent::_internal_play_cnt() const {
  return _impl_.play_cnt_;
}
inline void MdpCommitFtraceEvent::_internal_set_play_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.play_cnt_ = value;
}

// optional uint32 clk_rate = 3;
inline bool MdpCommitFtraceEvent::has_clk_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpCommitFtraceEvent::clear_clk_rate() {
  _impl_.clk_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpCommitFtraceEvent::clk_rate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.clk_rate)
  return _internal_clk_rate();
}
inline void MdpCommitFtraceEvent::set_clk_rate(::uint32_t value) {
  _internal_set_clk_rate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.clk_rate)
}
inline ::uint32_t MdpCommitFtraceEvent::_internal_clk_rate() const {
  return _impl_.clk_rate_;
}
inline void MdpCommitFtraceEvent::_internal_set_clk_rate(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.clk_rate_ = value;
}

// optional uint64 bandwidth = 4;
inline bool MdpCommitFtraceEvent::has_bandwidth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpCommitFtraceEvent::clear_bandwidth() {
  _impl_.bandwidth_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t MdpCommitFtraceEvent::bandwidth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCommitFtraceEvent.bandwidth)
  return _internal_bandwidth();
}
inline void MdpCommitFtraceEvent::set_bandwidth(::uint64_t value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCommitFtraceEvent.bandwidth)
}
inline ::uint64_t MdpCommitFtraceEvent::_internal_bandwidth() const {
  return _impl_.bandwidth_;
}
inline void MdpCommitFtraceEvent::_internal_set_bandwidth(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bandwidth_ = value;
}

// -------------------------------------------------------------------

// MdpPerfSetOtFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetOtFtraceEvent::has_pnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpPerfSetOtFtraceEvent::clear_pnum() {
  _impl_.pnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.pnum)
  return _internal_pnum();
}
inline void MdpPerfSetOtFtraceEvent::set_pnum(::uint32_t value) {
  _internal_set_pnum(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.pnum)
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::_internal_pnum() const {
  return _impl_.pnum_;
}
inline void MdpPerfSetOtFtraceEvent::_internal_set_pnum(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pnum_ = value;
}

// optional uint32 xin_id = 2;
inline bool MdpPerfSetOtFtraceEvent::has_xin_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpPerfSetOtFtraceEvent::clear_xin_id() {
  _impl_.xin_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::xin_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.xin_id)
  return _internal_xin_id();
}
inline void MdpPerfSetOtFtraceEvent::set_xin_id(::uint32_t value) {
  _internal_set_xin_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.xin_id)
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::_internal_xin_id() const {
  return _impl_.xin_id_;
}
inline void MdpPerfSetOtFtraceEvent::_internal_set_xin_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.xin_id_ = value;
}

// optional uint32 rd_lim = 3;
inline bool MdpPerfSetOtFtraceEvent::has_rd_lim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpPerfSetOtFtraceEvent::clear_rd_lim() {
  _impl_.rd_lim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::rd_lim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.rd_lim)
  return _internal_rd_lim();
}
inline void MdpPerfSetOtFtraceEvent::set_rd_lim(::uint32_t value) {
  _internal_set_rd_lim(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.rd_lim)
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::_internal_rd_lim() const {
  return _impl_.rd_lim_;
}
inline void MdpPerfSetOtFtraceEvent::_internal_set_rd_lim(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rd_lim_ = value;
}

// optional uint32 is_vbif_rt = 4;
inline bool MdpPerfSetOtFtraceEvent::has_is_vbif_rt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpPerfSetOtFtraceEvent::clear_is_vbif_rt() {
  _impl_.is_vbif_rt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::is_vbif_rt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetOtFtraceEvent.is_vbif_rt)
  return _internal_is_vbif_rt();
}
inline void MdpPerfSetOtFtraceEvent::set_is_vbif_rt(::uint32_t value) {
  _internal_set_is_vbif_rt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetOtFtraceEvent.is_vbif_rt)
}
inline ::uint32_t MdpPerfSetOtFtraceEvent::_internal_is_vbif_rt() const {
  return _impl_.is_vbif_rt_;
}
inline void MdpPerfSetOtFtraceEvent::_internal_set_is_vbif_rt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_vbif_rt_ = value;
}

// -------------------------------------------------------------------

// MdpSsppChangeFtraceEvent

// optional uint32 num = 1;
inline bool MdpSsppChangeFtraceEvent::has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_num() {
  _impl_.num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.num)
  return _internal_num();
}
inline void MdpSsppChangeFtraceEvent::set_num(::uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.num)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_num() const {
  return _impl_.num_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_ = value;
}

// optional uint32 play_cnt = 2;
inline bool MdpSsppChangeFtraceEvent::has_play_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_play_cnt() {
  _impl_.play_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::play_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.play_cnt)
  return _internal_play_cnt();
}
inline void MdpSsppChangeFtraceEvent::set_play_cnt(::uint32_t value) {
  _internal_set_play_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.play_cnt)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_play_cnt() const {
  return _impl_.play_cnt_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_play_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.play_cnt_ = value;
}

// optional uint32 mixer = 3;
inline bool MdpSsppChangeFtraceEvent::has_mixer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_mixer() {
  _impl_.mixer_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::mixer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.mixer)
  return _internal_mixer();
}
inline void MdpSsppChangeFtraceEvent::set_mixer(::uint32_t value) {
  _internal_set_mixer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.mixer)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_mixer() const {
  return _impl_.mixer_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_mixer(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mixer_ = value;
}

// optional uint32 stage = 4;
inline bool MdpSsppChangeFtraceEvent::has_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_stage() {
  _impl_.stage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::stage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.stage)
  return _internal_stage();
}
inline void MdpSsppChangeFtraceEvent::set_stage(::uint32_t value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.stage)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_stage() const {
  return _impl_.stage_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_stage(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stage_ = value;
}

// optional uint32 flags = 5;
inline bool MdpSsppChangeFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.flags)
  return _internal_flags();
}
inline void MdpSsppChangeFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.flags)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// optional uint32 format = 6;
inline bool MdpSsppChangeFtraceEvent::has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_format() {
  _impl_.format_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.format)
  return _internal_format();
}
inline void MdpSsppChangeFtraceEvent::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.format)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_format() const {
  return _impl_.format_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_format(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.format_ = value;
}

// optional uint32 img_w = 7;
inline bool MdpSsppChangeFtraceEvent::has_img_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_img_w() {
  _impl_.img_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::img_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.img_w)
  return _internal_img_w();
}
inline void MdpSsppChangeFtraceEvent::set_img_w(::uint32_t value) {
  _internal_set_img_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.img_w)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_img_w() const {
  return _impl_.img_w_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_img_w(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.img_w_ = value;
}

// optional uint32 img_h = 8;
inline bool MdpSsppChangeFtraceEvent::has_img_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_img_h() {
  _impl_.img_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::img_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.img_h)
  return _internal_img_h();
}
inline void MdpSsppChangeFtraceEvent::set_img_h(::uint32_t value) {
  _internal_set_img_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.img_h)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_img_h() const {
  return _impl_.img_h_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_img_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.img_h_ = value;
}

// optional uint32 src_x = 9;
inline bool MdpSsppChangeFtraceEvent::has_src_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_src_x() {
  _impl_.src_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::src_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_x)
  return _internal_src_x();
}
inline void MdpSsppChangeFtraceEvent::set_src_x(::uint32_t value) {
  _internal_set_src_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_x)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_src_x() const {
  return _impl_.src_x_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_src_x(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.src_x_ = value;
}

// optional uint32 src_y = 10;
inline bool MdpSsppChangeFtraceEvent::has_src_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_src_y() {
  _impl_.src_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::src_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_y)
  return _internal_src_y();
}
inline void MdpSsppChangeFtraceEvent::set_src_y(::uint32_t value) {
  _internal_set_src_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_y)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_src_y() const {
  return _impl_.src_y_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_src_y(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.src_y_ = value;
}

// optional uint32 src_w = 11;
inline bool MdpSsppChangeFtraceEvent::has_src_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_src_w() {
  _impl_.src_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::src_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_w)
  return _internal_src_w();
}
inline void MdpSsppChangeFtraceEvent::set_src_w(::uint32_t value) {
  _internal_set_src_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_w)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_src_w() const {
  return _impl_.src_w_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_src_w(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.src_w_ = value;
}

// optional uint32 src_h = 12;
inline bool MdpSsppChangeFtraceEvent::has_src_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_src_h() {
  _impl_.src_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::src_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.src_h)
  return _internal_src_h();
}
inline void MdpSsppChangeFtraceEvent::set_src_h(::uint32_t value) {
  _internal_set_src_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.src_h)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_src_h() const {
  return _impl_.src_h_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_src_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.src_h_ = value;
}

// optional uint32 dst_x = 13;
inline bool MdpSsppChangeFtraceEvent::has_dst_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_x() {
  _impl_.dst_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::dst_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_x)
  return _internal_dst_x();
}
inline void MdpSsppChangeFtraceEvent::set_dst_x(::uint32_t value) {
  _internal_set_dst_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_x)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_dst_x() const {
  return _impl_.dst_x_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_dst_x(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.dst_x_ = value;
}

// optional uint32 dst_y = 14;
inline bool MdpSsppChangeFtraceEvent::has_dst_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_y() {
  _impl_.dst_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::dst_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_y)
  return _internal_dst_y();
}
inline void MdpSsppChangeFtraceEvent::set_dst_y(::uint32_t value) {
  _internal_set_dst_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_y)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_dst_y() const {
  return _impl_.dst_y_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_dst_y(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.dst_y_ = value;
}

// optional uint32 dst_w = 15;
inline bool MdpSsppChangeFtraceEvent::has_dst_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_w() {
  _impl_.dst_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::dst_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_w)
  return _internal_dst_w();
}
inline void MdpSsppChangeFtraceEvent::set_dst_w(::uint32_t value) {
  _internal_set_dst_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_w)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_dst_w() const {
  return _impl_.dst_w_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_dst_w(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.dst_w_ = value;
}

// optional uint32 dst_h = 16;
inline bool MdpSsppChangeFtraceEvent::has_dst_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void MdpSsppChangeFtraceEvent::clear_dst_h() {
  _impl_.dst_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t MdpSsppChangeFtraceEvent::dst_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppChangeFtraceEvent.dst_h)
  return _internal_dst_h();
}
inline void MdpSsppChangeFtraceEvent::set_dst_h(::uint32_t value) {
  _internal_set_dst_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppChangeFtraceEvent.dst_h)
}
inline ::uint32_t MdpSsppChangeFtraceEvent::_internal_dst_h() const {
  return _impl_.dst_h_;
}
inline void MdpSsppChangeFtraceEvent::_internal_set_dst_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.dst_h_ = value;
}

// -------------------------------------------------------------------

// TracingMarkWriteFtraceEvent

// optional int32 pid = 1;
inline bool TracingMarkWriteFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TracingMarkWriteFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TracingMarkWriteFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingMarkWriteFtraceEvent.pid)
  return _internal_pid();
}
inline void TracingMarkWriteFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingMarkWriteFtraceEvent.pid)
}
inline ::int32_t TracingMarkWriteFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void TracingMarkWriteFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional string trace_name = 2;
inline bool TracingMarkWriteFtraceEvent::has_trace_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TracingMarkWriteFtraceEvent::clear_trace_name() {
  _impl_.trace_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TracingMarkWriteFtraceEvent::trace_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
  return _internal_trace_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TracingMarkWriteFtraceEvent::set_trace_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trace_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}
inline std::string* TracingMarkWriteFtraceEvent::mutable_trace_name() {
  std::string* _s = _internal_mutable_trace_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
  return _s;
}
inline const std::string& TracingMarkWriteFtraceEvent::_internal_trace_name() const {
  return _impl_.trace_name_.Get();
}
inline void TracingMarkWriteFtraceEvent::_internal_set_trace_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.trace_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TracingMarkWriteFtraceEvent::_internal_mutable_trace_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.trace_name_.Mutable( GetArenaForAllocation());
}
inline std::string* TracingMarkWriteFtraceEvent::release_trace_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.trace_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trace_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TracingMarkWriteFtraceEvent::set_allocated_trace_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trace_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_name_.IsDefault()) {
          _impl_.trace_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TracingMarkWriteFtraceEvent.trace_name)
}

// optional uint32 trace_begin = 3;
inline bool TracingMarkWriteFtraceEvent::has_trace_begin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TracingMarkWriteFtraceEvent::clear_trace_begin() {
  _impl_.trace_begin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TracingMarkWriteFtraceEvent::trace_begin() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TracingMarkWriteFtraceEvent.trace_begin)
  return _internal_trace_begin();
}
inline void TracingMarkWriteFtraceEvent::set_trace_begin(::uint32_t value) {
  _internal_set_trace_begin(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TracingMarkWriteFtraceEvent.trace_begin)
}
inline ::uint32_t TracingMarkWriteFtraceEvent::_internal_trace_begin() const {
  return _impl_.trace_begin_;
}
inline void TracingMarkWriteFtraceEvent::_internal_set_trace_begin(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trace_begin_ = value;
}

// -------------------------------------------------------------------

// MdpCmdPingpongDoneFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdPingpongDoneFtraceEvent::has_ctl_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_ctl_num() {
  _impl_.ctl_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpCmdPingpongDoneFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.ctl_num)
  return _internal_ctl_num();
}
inline void MdpCmdPingpongDoneFtraceEvent::set_ctl_num(::uint32_t value) {
  _internal_set_ctl_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.ctl_num)
}
inline ::uint32_t MdpCmdPingpongDoneFtraceEvent::_internal_ctl_num() const {
  return _impl_.ctl_num_;
}
inline void MdpCmdPingpongDoneFtraceEvent::_internal_set_ctl_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_num_ = value;
}

// optional uint32 intf_num = 2;
inline bool MdpCmdPingpongDoneFtraceEvent::has_intf_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_intf_num() {
  _impl_.intf_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpCmdPingpongDoneFtraceEvent::intf_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.intf_num)
  return _internal_intf_num();
}
inline void MdpCmdPingpongDoneFtraceEvent::set_intf_num(::uint32_t value) {
  _internal_set_intf_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.intf_num)
}
inline ::uint32_t MdpCmdPingpongDoneFtraceEvent::_internal_intf_num() const {
  return _impl_.intf_num_;
}
inline void MdpCmdPingpongDoneFtraceEvent::_internal_set_intf_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.intf_num_ = value;
}

// optional uint32 pp_num = 3;
inline bool MdpCmdPingpongDoneFtraceEvent::has_pp_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_pp_num() {
  _impl_.pp_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpCmdPingpongDoneFtraceEvent::pp_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.pp_num)
  return _internal_pp_num();
}
inline void MdpCmdPingpongDoneFtraceEvent::set_pp_num(::uint32_t value) {
  _internal_set_pp_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.pp_num)
}
inline ::uint32_t MdpCmdPingpongDoneFtraceEvent::_internal_pp_num() const {
  return _impl_.pp_num_;
}
inline void MdpCmdPingpongDoneFtraceEvent::_internal_set_pp_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pp_num_ = value;
}

// optional int32 koff_cnt = 4;
inline bool MdpCmdPingpongDoneFtraceEvent::has_koff_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpCmdPingpongDoneFtraceEvent::clear_koff_cnt() {
  _impl_.koff_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t MdpCmdPingpongDoneFtraceEvent::koff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.koff_cnt)
  return _internal_koff_cnt();
}
inline void MdpCmdPingpongDoneFtraceEvent::set_koff_cnt(::int32_t value) {
  _internal_set_koff_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdPingpongDoneFtraceEvent.koff_cnt)
}
inline ::int32_t MdpCmdPingpongDoneFtraceEvent::_internal_koff_cnt() const {
  return _impl_.koff_cnt_;
}
inline void MdpCmdPingpongDoneFtraceEvent::_internal_set_koff_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.koff_cnt_ = value;
}

// -------------------------------------------------------------------

// MdpCompareBwFtraceEvent

// optional uint64 new_ab = 1;
inline bool MdpCompareBwFtraceEvent::has_new_ab() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_new_ab() {
  _impl_.new_ab_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t MdpCompareBwFtraceEvent::new_ab() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.new_ab)
  return _internal_new_ab();
}
inline void MdpCompareBwFtraceEvent::set_new_ab(::uint64_t value) {
  _internal_set_new_ab(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.new_ab)
}
inline ::uint64_t MdpCompareBwFtraceEvent::_internal_new_ab() const {
  return _impl_.new_ab_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_new_ab(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_ab_ = value;
}

// optional uint64 new_ib = 2;
inline bool MdpCompareBwFtraceEvent::has_new_ib() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_new_ib() {
  _impl_.new_ib_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t MdpCompareBwFtraceEvent::new_ib() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.new_ib)
  return _internal_new_ib();
}
inline void MdpCompareBwFtraceEvent::set_new_ib(::uint64_t value) {
  _internal_set_new_ib(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.new_ib)
}
inline ::uint64_t MdpCompareBwFtraceEvent::_internal_new_ib() const {
  return _impl_.new_ib_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_new_ib(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_ib_ = value;
}

// optional uint64 new_wb = 3;
inline bool MdpCompareBwFtraceEvent::has_new_wb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_new_wb() {
  _impl_.new_wb_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t MdpCompareBwFtraceEvent::new_wb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.new_wb)
  return _internal_new_wb();
}
inline void MdpCompareBwFtraceEvent::set_new_wb(::uint64_t value) {
  _internal_set_new_wb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.new_wb)
}
inline ::uint64_t MdpCompareBwFtraceEvent::_internal_new_wb() const {
  return _impl_.new_wb_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_new_wb(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_wb_ = value;
}

// optional uint64 old_ab = 4;
inline bool MdpCompareBwFtraceEvent::has_old_ab() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_old_ab() {
  _impl_.old_ab_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t MdpCompareBwFtraceEvent::old_ab() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.old_ab)
  return _internal_old_ab();
}
inline void MdpCompareBwFtraceEvent::set_old_ab(::uint64_t value) {
  _internal_set_old_ab(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.old_ab)
}
inline ::uint64_t MdpCompareBwFtraceEvent::_internal_old_ab() const {
  return _impl_.old_ab_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_old_ab(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.old_ab_ = value;
}

// optional uint64 old_ib = 5;
inline bool MdpCompareBwFtraceEvent::has_old_ib() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_old_ib() {
  _impl_.old_ib_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t MdpCompareBwFtraceEvent::old_ib() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.old_ib)
  return _internal_old_ib();
}
inline void MdpCompareBwFtraceEvent::set_old_ib(::uint64_t value) {
  _internal_set_old_ib(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.old_ib)
}
inline ::uint64_t MdpCompareBwFtraceEvent::_internal_old_ib() const {
  return _impl_.old_ib_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_old_ib(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.old_ib_ = value;
}

// optional uint64 old_wb = 6;
inline bool MdpCompareBwFtraceEvent::has_old_wb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_old_wb() {
  _impl_.old_wb_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t MdpCompareBwFtraceEvent::old_wb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.old_wb)
  return _internal_old_wb();
}
inline void MdpCompareBwFtraceEvent::set_old_wb(::uint64_t value) {
  _internal_set_old_wb(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.old_wb)
}
inline ::uint64_t MdpCompareBwFtraceEvent::_internal_old_wb() const {
  return _impl_.old_wb_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_old_wb(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.old_wb_ = value;
}

// optional uint32 params_changed = 7;
inline bool MdpCompareBwFtraceEvent::has_params_changed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_params_changed() {
  _impl_.params_changed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t MdpCompareBwFtraceEvent::params_changed() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.params_changed)
  return _internal_params_changed();
}
inline void MdpCompareBwFtraceEvent::set_params_changed(::uint32_t value) {
  _internal_set_params_changed(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.params_changed)
}
inline ::uint32_t MdpCompareBwFtraceEvent::_internal_params_changed() const {
  return _impl_.params_changed_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_params_changed(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.params_changed_ = value;
}

// optional uint32 update_bw = 8;
inline bool MdpCompareBwFtraceEvent::has_update_bw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MdpCompareBwFtraceEvent::clear_update_bw() {
  _impl_.update_bw_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t MdpCompareBwFtraceEvent::update_bw() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCompareBwFtraceEvent.update_bw)
  return _internal_update_bw();
}
inline void MdpCompareBwFtraceEvent::set_update_bw(::uint32_t value) {
  _internal_set_update_bw(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCompareBwFtraceEvent.update_bw)
}
inline ::uint32_t MdpCompareBwFtraceEvent::_internal_update_bw() const {
  return _impl_.update_bw_;
}
inline void MdpCompareBwFtraceEvent::_internal_set_update_bw(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.update_bw_ = value;
}

// -------------------------------------------------------------------

// MdpPerfSetPanicLutsFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_pnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_pnum() {
  _impl_.pnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.pnum)
  return _internal_pnum();
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_pnum(::uint32_t value) {
  _internal_set_pnum(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.pnum)
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::_internal_pnum() const {
  return _impl_.pnum_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::_internal_set_pnum(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pnum_ = value;
}

// optional uint32 fmt = 2;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_fmt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_fmt() {
  _impl_.fmt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::fmt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.fmt)
  return _internal_fmt();
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_fmt(::uint32_t value) {
  _internal_set_fmt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.fmt)
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::_internal_fmt() const {
  return _impl_.fmt_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::_internal_set_fmt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fmt_ = value;
}

// optional uint32 mode = 3;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.mode)
  return _internal_mode();
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.mode)
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mode_ = value;
}

// optional uint32 panic_lut = 4;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_panic_lut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_panic_lut() {
  _impl_.panic_lut_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::panic_lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.panic_lut)
  return _internal_panic_lut();
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_panic_lut(::uint32_t value) {
  _internal_set_panic_lut(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.panic_lut)
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::_internal_panic_lut() const {
  return _impl_.panic_lut_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::_internal_set_panic_lut(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.panic_lut_ = value;
}

// optional uint32 robust_lut = 5;
inline bool MdpPerfSetPanicLutsFtraceEvent::has_robust_lut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpPerfSetPanicLutsFtraceEvent::clear_robust_lut() {
  _impl_.robust_lut_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::robust_lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.robust_lut)
  return _internal_robust_lut();
}
inline void MdpPerfSetPanicLutsFtraceEvent::set_robust_lut(::uint32_t value) {
  _internal_set_robust_lut(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetPanicLutsFtraceEvent.robust_lut)
}
inline ::uint32_t MdpPerfSetPanicLutsFtraceEvent::_internal_robust_lut() const {
  return _impl_.robust_lut_;
}
inline void MdpPerfSetPanicLutsFtraceEvent::_internal_set_robust_lut(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.robust_lut_ = value;
}

// -------------------------------------------------------------------

// MdpSsppSetFtraceEvent

// optional uint32 num = 1;
inline bool MdpSsppSetFtraceEvent::has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_num() {
  _impl_.num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.num)
  return _internal_num();
}
inline void MdpSsppSetFtraceEvent::set_num(::uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.num)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_num() const {
  return _impl_.num_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_ = value;
}

// optional uint32 play_cnt = 2;
inline bool MdpSsppSetFtraceEvent::has_play_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_play_cnt() {
  _impl_.play_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::play_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.play_cnt)
  return _internal_play_cnt();
}
inline void MdpSsppSetFtraceEvent::set_play_cnt(::uint32_t value) {
  _internal_set_play_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.play_cnt)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_play_cnt() const {
  return _impl_.play_cnt_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_play_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.play_cnt_ = value;
}

// optional uint32 mixer = 3;
inline bool MdpSsppSetFtraceEvent::has_mixer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_mixer() {
  _impl_.mixer_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::mixer() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.mixer)
  return _internal_mixer();
}
inline void MdpSsppSetFtraceEvent::set_mixer(::uint32_t value) {
  _internal_set_mixer(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.mixer)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_mixer() const {
  return _impl_.mixer_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_mixer(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mixer_ = value;
}

// optional uint32 stage = 4;
inline bool MdpSsppSetFtraceEvent::has_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_stage() {
  _impl_.stage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::stage() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.stage)
  return _internal_stage();
}
inline void MdpSsppSetFtraceEvent::set_stage(::uint32_t value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.stage)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_stage() const {
  return _impl_.stage_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_stage(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stage_ = value;
}

// optional uint32 flags = 5;
inline bool MdpSsppSetFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.flags)
  return _internal_flags();
}
inline void MdpSsppSetFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.flags)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// optional uint32 format = 6;
inline bool MdpSsppSetFtraceEvent::has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_format() {
  _impl_.format_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::format() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.format)
  return _internal_format();
}
inline void MdpSsppSetFtraceEvent::set_format(::uint32_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.format)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_format() const {
  return _impl_.format_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_format(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.format_ = value;
}

// optional uint32 img_w = 7;
inline bool MdpSsppSetFtraceEvent::has_img_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_img_w() {
  _impl_.img_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::img_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.img_w)
  return _internal_img_w();
}
inline void MdpSsppSetFtraceEvent::set_img_w(::uint32_t value) {
  _internal_set_img_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.img_w)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_img_w() const {
  return _impl_.img_w_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_img_w(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.img_w_ = value;
}

// optional uint32 img_h = 8;
inline bool MdpSsppSetFtraceEvent::has_img_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_img_h() {
  _impl_.img_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::img_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.img_h)
  return _internal_img_h();
}
inline void MdpSsppSetFtraceEvent::set_img_h(::uint32_t value) {
  _internal_set_img_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.img_h)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_img_h() const {
  return _impl_.img_h_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_img_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.img_h_ = value;
}

// optional uint32 src_x = 9;
inline bool MdpSsppSetFtraceEvent::has_src_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_src_x() {
  _impl_.src_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::src_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_x)
  return _internal_src_x();
}
inline void MdpSsppSetFtraceEvent::set_src_x(::uint32_t value) {
  _internal_set_src_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_x)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_src_x() const {
  return _impl_.src_x_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_src_x(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.src_x_ = value;
}

// optional uint32 src_y = 10;
inline bool MdpSsppSetFtraceEvent::has_src_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_src_y() {
  _impl_.src_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::src_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_y)
  return _internal_src_y();
}
inline void MdpSsppSetFtraceEvent::set_src_y(::uint32_t value) {
  _internal_set_src_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_y)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_src_y() const {
  return _impl_.src_y_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_src_y(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.src_y_ = value;
}

// optional uint32 src_w = 11;
inline bool MdpSsppSetFtraceEvent::has_src_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_src_w() {
  _impl_.src_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::src_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_w)
  return _internal_src_w();
}
inline void MdpSsppSetFtraceEvent::set_src_w(::uint32_t value) {
  _internal_set_src_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_w)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_src_w() const {
  return _impl_.src_w_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_src_w(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.src_w_ = value;
}

// optional uint32 src_h = 12;
inline bool MdpSsppSetFtraceEvent::has_src_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_src_h() {
  _impl_.src_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::src_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.src_h)
  return _internal_src_h();
}
inline void MdpSsppSetFtraceEvent::set_src_h(::uint32_t value) {
  _internal_set_src_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.src_h)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_src_h() const {
  return _impl_.src_h_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_src_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.src_h_ = value;
}

// optional uint32 dst_x = 13;
inline bool MdpSsppSetFtraceEvent::has_dst_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_dst_x() {
  _impl_.dst_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::dst_x() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_x)
  return _internal_dst_x();
}
inline void MdpSsppSetFtraceEvent::set_dst_x(::uint32_t value) {
  _internal_set_dst_x(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_x)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_dst_x() const {
  return _impl_.dst_x_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_dst_x(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.dst_x_ = value;
}

// optional uint32 dst_y = 14;
inline bool MdpSsppSetFtraceEvent::has_dst_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_dst_y() {
  _impl_.dst_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::dst_y() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_y)
  return _internal_dst_y();
}
inline void MdpSsppSetFtraceEvent::set_dst_y(::uint32_t value) {
  _internal_set_dst_y(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_y)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_dst_y() const {
  return _impl_.dst_y_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_dst_y(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.dst_y_ = value;
}

// optional uint32 dst_w = 15;
inline bool MdpSsppSetFtraceEvent::has_dst_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_dst_w() {
  _impl_.dst_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::dst_w() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_w)
  return _internal_dst_w();
}
inline void MdpSsppSetFtraceEvent::set_dst_w(::uint32_t value) {
  _internal_set_dst_w(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_w)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_dst_w() const {
  return _impl_.dst_w_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_dst_w(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.dst_w_ = value;
}

// optional uint32 dst_h = 16;
inline bool MdpSsppSetFtraceEvent::has_dst_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void MdpSsppSetFtraceEvent::clear_dst_h() {
  _impl_.dst_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t MdpSsppSetFtraceEvent::dst_h() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpSsppSetFtraceEvent.dst_h)
  return _internal_dst_h();
}
inline void MdpSsppSetFtraceEvent::set_dst_h(::uint32_t value) {
  _internal_set_dst_h(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpSsppSetFtraceEvent.dst_h)
}
inline ::uint32_t MdpSsppSetFtraceEvent::_internal_dst_h() const {
  return _impl_.dst_h_;
}
inline void MdpSsppSetFtraceEvent::_internal_set_dst_h(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.dst_h_ = value;
}

// -------------------------------------------------------------------

// MdpCmdReadptrDoneFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdReadptrDoneFtraceEvent::has_ctl_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCmdReadptrDoneFtraceEvent::clear_ctl_num() {
  _impl_.ctl_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpCmdReadptrDoneFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.ctl_num)
  return _internal_ctl_num();
}
inline void MdpCmdReadptrDoneFtraceEvent::set_ctl_num(::uint32_t value) {
  _internal_set_ctl_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.ctl_num)
}
inline ::uint32_t MdpCmdReadptrDoneFtraceEvent::_internal_ctl_num() const {
  return _impl_.ctl_num_;
}
inline void MdpCmdReadptrDoneFtraceEvent::_internal_set_ctl_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_num_ = value;
}

// optional int32 koff_cnt = 2;
inline bool MdpCmdReadptrDoneFtraceEvent::has_koff_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpCmdReadptrDoneFtraceEvent::clear_koff_cnt() {
  _impl_.koff_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MdpCmdReadptrDoneFtraceEvent::koff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.koff_cnt)
  return _internal_koff_cnt();
}
inline void MdpCmdReadptrDoneFtraceEvent::set_koff_cnt(::int32_t value) {
  _internal_set_koff_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdReadptrDoneFtraceEvent.koff_cnt)
}
inline ::int32_t MdpCmdReadptrDoneFtraceEvent::_internal_koff_cnt() const {
  return _impl_.koff_cnt_;
}
inline void MdpCmdReadptrDoneFtraceEvent::_internal_set_koff_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.koff_cnt_ = value;
}

// -------------------------------------------------------------------

// MdpMisrCrcFtraceEvent

// optional uint32 block_id = 1;
inline bool MdpMisrCrcFtraceEvent::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpMisrCrcFtraceEvent::clear_block_id() {
  _impl_.block_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpMisrCrcFtraceEvent::block_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMisrCrcFtraceEvent.block_id)
  return _internal_block_id();
}
inline void MdpMisrCrcFtraceEvent::set_block_id(::uint32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMisrCrcFtraceEvent.block_id)
}
inline ::uint32_t MdpMisrCrcFtraceEvent::_internal_block_id() const {
  return _impl_.block_id_;
}
inline void MdpMisrCrcFtraceEvent::_internal_set_block_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.block_id_ = value;
}

// optional uint32 vsync_cnt = 2;
inline bool MdpMisrCrcFtraceEvent::has_vsync_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpMisrCrcFtraceEvent::clear_vsync_cnt() {
  _impl_.vsync_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpMisrCrcFtraceEvent::vsync_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMisrCrcFtraceEvent.vsync_cnt)
  return _internal_vsync_cnt();
}
inline void MdpMisrCrcFtraceEvent::set_vsync_cnt(::uint32_t value) {
  _internal_set_vsync_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMisrCrcFtraceEvent.vsync_cnt)
}
inline ::uint32_t MdpMisrCrcFtraceEvent::_internal_vsync_cnt() const {
  return _impl_.vsync_cnt_;
}
inline void MdpMisrCrcFtraceEvent::_internal_set_vsync_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.vsync_cnt_ = value;
}

// optional uint32 crc = 3;
inline bool MdpMisrCrcFtraceEvent::has_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpMisrCrcFtraceEvent::clear_crc() {
  _impl_.crc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpMisrCrcFtraceEvent::crc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMisrCrcFtraceEvent.crc)
  return _internal_crc();
}
inline void MdpMisrCrcFtraceEvent::set_crc(::uint32_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMisrCrcFtraceEvent.crc)
}
inline ::uint32_t MdpMisrCrcFtraceEvent::_internal_crc() const {
  return _impl_.crc_;
}
inline void MdpMisrCrcFtraceEvent::_internal_set_crc(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.crc_ = value;
}

// -------------------------------------------------------------------

// MdpPerfSetQosLutsFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetQosLutsFtraceEvent::has_pnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_pnum() {
  _impl_.pnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.pnum)
  return _internal_pnum();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_pnum(::uint32_t value) {
  _internal_set_pnum(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.pnum)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_pnum() const {
  return _impl_.pnum_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_pnum(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pnum_ = value;
}

// optional uint32 fmt = 2;
inline bool MdpPerfSetQosLutsFtraceEvent::has_fmt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_fmt() {
  _impl_.fmt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::fmt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fmt)
  return _internal_fmt();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_fmt(::uint32_t value) {
  _internal_set_fmt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fmt)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_fmt() const {
  return _impl_.fmt_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_fmt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fmt_ = value;
}

// optional uint32 intf = 3;
inline bool MdpPerfSetQosLutsFtraceEvent::has_intf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_intf() {
  _impl_.intf_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::intf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.intf)
  return _internal_intf();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_intf(::uint32_t value) {
  _internal_set_intf(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.intf)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_intf() const {
  return _impl_.intf_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_intf(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.intf_ = value;
}

// optional uint32 rot = 4;
inline bool MdpPerfSetQosLutsFtraceEvent::has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_rot() {
  _impl_.rot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::rot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.rot)
  return _internal_rot();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_rot(::uint32_t value) {
  _internal_set_rot(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.rot)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_rot() const {
  return _impl_.rot_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_rot(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rot_ = value;
}

// optional uint32 fl = 5;
inline bool MdpPerfSetQosLutsFtraceEvent::has_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_fl() {
  _impl_.fl_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::fl() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fl)
  return _internal_fl();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_fl(::uint32_t value) {
  _internal_set_fl(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.fl)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_fl() const {
  return _impl_.fl_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_fl(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fl_ = value;
}

// optional uint32 lut = 6;
inline bool MdpPerfSetQosLutsFtraceEvent::has_lut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_lut() {
  _impl_.lut_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::lut() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.lut)
  return _internal_lut();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_lut(::uint32_t value) {
  _internal_set_lut(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.lut)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_lut() const {
  return _impl_.lut_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_lut(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lut_ = value;
}

// optional uint32 linear = 7;
inline bool MdpPerfSetQosLutsFtraceEvent::has_linear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MdpPerfSetQosLutsFtraceEvent::clear_linear() {
  _impl_.linear_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::linear() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.linear)
  return _internal_linear();
}
inline void MdpPerfSetQosLutsFtraceEvent::set_linear(::uint32_t value) {
  _internal_set_linear(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetQosLutsFtraceEvent.linear)
}
inline ::uint32_t MdpPerfSetQosLutsFtraceEvent::_internal_linear() const {
  return _impl_.linear_;
}
inline void MdpPerfSetQosLutsFtraceEvent::_internal_set_linear(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.linear_ = value;
}

// -------------------------------------------------------------------

// MdpTraceCounterFtraceEvent

// optional int32 pid = 1;
inline bool MdpTraceCounterFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpTraceCounterFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MdpTraceCounterFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpTraceCounterFtraceEvent.pid)
  return _internal_pid();
}
inline void MdpTraceCounterFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpTraceCounterFtraceEvent.pid)
}
inline ::int32_t MdpTraceCounterFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void MdpTraceCounterFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional string counter_name = 2;
inline bool MdpTraceCounterFtraceEvent::has_counter_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpTraceCounterFtraceEvent::clear_counter_name() {
  _impl_.counter_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MdpTraceCounterFtraceEvent::counter_name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
  return _internal_counter_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MdpTraceCounterFtraceEvent::set_counter_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.counter_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}
inline std::string* MdpTraceCounterFtraceEvent::mutable_counter_name() {
  std::string* _s = _internal_mutable_counter_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
  return _s;
}
inline const std::string& MdpTraceCounterFtraceEvent::_internal_counter_name() const {
  return _impl_.counter_name_.Get();
}
inline void MdpTraceCounterFtraceEvent::_internal_set_counter_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.counter_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MdpTraceCounterFtraceEvent::_internal_mutable_counter_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.counter_name_.Mutable( GetArenaForAllocation());
}
inline std::string* MdpTraceCounterFtraceEvent::release_counter_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.counter_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counter_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MdpTraceCounterFtraceEvent::set_allocated_counter_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.counter_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.counter_name_.IsDefault()) {
          _impl_.counter_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.MdpTraceCounterFtraceEvent.counter_name)
}

// optional int32 value = 3;
inline bool MdpTraceCounterFtraceEvent::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpTraceCounterFtraceEvent::clear_value() {
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t MdpTraceCounterFtraceEvent::value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpTraceCounterFtraceEvent.value)
  return _internal_value();
}
inline void MdpTraceCounterFtraceEvent::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpTraceCounterFtraceEvent.value)
}
inline ::int32_t MdpTraceCounterFtraceEvent::_internal_value() const {
  return _impl_.value_;
}
inline void MdpTraceCounterFtraceEvent::_internal_set_value(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// MdpCmdReleaseBwFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdReleaseBwFtraceEvent::has_ctl_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCmdReleaseBwFtraceEvent::clear_ctl_num() {
  _impl_.ctl_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpCmdReleaseBwFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdReleaseBwFtraceEvent.ctl_num)
  return _internal_ctl_num();
}
inline void MdpCmdReleaseBwFtraceEvent::set_ctl_num(::uint32_t value) {
  _internal_set_ctl_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdReleaseBwFtraceEvent.ctl_num)
}
inline ::uint32_t MdpCmdReleaseBwFtraceEvent::_internal_ctl_num() const {
  return _impl_.ctl_num_;
}
inline void MdpCmdReleaseBwFtraceEvent::_internal_set_ctl_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_num_ = value;
}

// -------------------------------------------------------------------

// MdpMixerUpdateFtraceEvent

// optional uint32 mixer_num = 1;
inline bool MdpMixerUpdateFtraceEvent::has_mixer_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpMixerUpdateFtraceEvent::clear_mixer_num() {
  _impl_.mixer_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpMixerUpdateFtraceEvent::mixer_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpMixerUpdateFtraceEvent.mixer_num)
  return _internal_mixer_num();
}
inline void MdpMixerUpdateFtraceEvent::set_mixer_num(::uint32_t value) {
  _internal_set_mixer_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpMixerUpdateFtraceEvent.mixer_num)
}
inline ::uint32_t MdpMixerUpdateFtraceEvent::_internal_mixer_num() const {
  return _impl_.mixer_num_;
}
inline void MdpMixerUpdateFtraceEvent::_internal_set_mixer_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mixer_num_ = value;
}

// -------------------------------------------------------------------

// MdpPerfSetWmLevelsFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_pnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_pnum() {
  _impl_.pnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.pnum)
  return _internal_pnum();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_pnum(::uint32_t value) {
  _internal_set_pnum(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.pnum)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_pnum() const {
  return _impl_.pnum_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_pnum(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pnum_ = value;
}

// optional uint32 use_space = 2;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_use_space() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_use_space() {
  _impl_.use_space_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::use_space() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.use_space)
  return _internal_use_space();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_use_space(::uint32_t value) {
  _internal_set_use_space(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.use_space)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_use_space() const {
  return _impl_.use_space_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_use_space(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.use_space_ = value;
}

// optional uint32 priority_bytes = 3;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_priority_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_priority_bytes() {
  _impl_.priority_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::priority_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.priority_bytes)
  return _internal_priority_bytes();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_priority_bytes(::uint32_t value) {
  _internal_set_priority_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.priority_bytes)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_priority_bytes() const {
  return _impl_.priority_bytes_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_priority_bytes(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.priority_bytes_ = value;
}

// optional uint32 wm0 = 4;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_wm0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_wm0() {
  _impl_.wm0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::wm0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm0)
  return _internal_wm0();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_wm0(::uint32_t value) {
  _internal_set_wm0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm0)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_wm0() const {
  return _impl_.wm0_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_wm0(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.wm0_ = value;
}

// optional uint32 wm1 = 5;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_wm1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_wm1() {
  _impl_.wm1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::wm1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm1)
  return _internal_wm1();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_wm1(::uint32_t value) {
  _internal_set_wm1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm1)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_wm1() const {
  return _impl_.wm1_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_wm1(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.wm1_ = value;
}

// optional uint32 wm2 = 6;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_wm2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_wm2() {
  _impl_.wm2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::wm2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm2)
  return _internal_wm2();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_wm2(::uint32_t value) {
  _internal_set_wm2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.wm2)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_wm2() const {
  return _impl_.wm2_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_wm2(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.wm2_ = value;
}

// optional uint32 mb_cnt = 7;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_mb_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_mb_cnt() {
  _impl_.mb_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::mb_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_cnt)
  return _internal_mb_cnt();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_mb_cnt(::uint32_t value) {
  _internal_set_mb_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_cnt)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_mb_cnt() const {
  return _impl_.mb_cnt_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_mb_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mb_cnt_ = value;
}

// optional uint32 mb_size = 8;
inline bool MdpPerfSetWmLevelsFtraceEvent::has_mb_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MdpPerfSetWmLevelsFtraceEvent::clear_mb_size() {
  _impl_.mb_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::mb_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_size)
  return _internal_mb_size();
}
inline void MdpPerfSetWmLevelsFtraceEvent::set_mb_size(::uint32_t value) {
  _internal_set_mb_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfSetWmLevelsFtraceEvent.mb_size)
}
inline ::uint32_t MdpPerfSetWmLevelsFtraceEvent::_internal_mb_size() const {
  return _impl_.mb_size_;
}
inline void MdpPerfSetWmLevelsFtraceEvent::_internal_set_mb_size(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mb_size_ = value;
}

// -------------------------------------------------------------------

// MdpVideoUnderrunDoneFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpVideoUnderrunDoneFtraceEvent::has_ctl_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpVideoUnderrunDoneFtraceEvent::clear_ctl_num() {
  _impl_.ctl_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpVideoUnderrunDoneFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.ctl_num)
  return _internal_ctl_num();
}
inline void MdpVideoUnderrunDoneFtraceEvent::set_ctl_num(::uint32_t value) {
  _internal_set_ctl_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.ctl_num)
}
inline ::uint32_t MdpVideoUnderrunDoneFtraceEvent::_internal_ctl_num() const {
  return _impl_.ctl_num_;
}
inline void MdpVideoUnderrunDoneFtraceEvent::_internal_set_ctl_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_num_ = value;
}

// optional uint32 underrun_cnt = 2;
inline bool MdpVideoUnderrunDoneFtraceEvent::has_underrun_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpVideoUnderrunDoneFtraceEvent::clear_underrun_cnt() {
  _impl_.underrun_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpVideoUnderrunDoneFtraceEvent::underrun_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.underrun_cnt)
  return _internal_underrun_cnt();
}
inline void MdpVideoUnderrunDoneFtraceEvent::set_underrun_cnt(::uint32_t value) {
  _internal_set_underrun_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpVideoUnderrunDoneFtraceEvent.underrun_cnt)
}
inline ::uint32_t MdpVideoUnderrunDoneFtraceEvent::_internal_underrun_cnt() const {
  return _impl_.underrun_cnt_;
}
inline void MdpVideoUnderrunDoneFtraceEvent::_internal_set_underrun_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.underrun_cnt_ = value;
}

// -------------------------------------------------------------------

// MdpCmdWaitPingpongFtraceEvent

// optional uint32 ctl_num = 1;
inline bool MdpCmdWaitPingpongFtraceEvent::has_ctl_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpCmdWaitPingpongFtraceEvent::clear_ctl_num() {
  _impl_.ctl_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpCmdWaitPingpongFtraceEvent::ctl_num() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.ctl_num)
  return _internal_ctl_num();
}
inline void MdpCmdWaitPingpongFtraceEvent::set_ctl_num(::uint32_t value) {
  _internal_set_ctl_num(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.ctl_num)
}
inline ::uint32_t MdpCmdWaitPingpongFtraceEvent::_internal_ctl_num() const {
  return _impl_.ctl_num_;
}
inline void MdpCmdWaitPingpongFtraceEvent::_internal_set_ctl_num(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctl_num_ = value;
}

// optional int32 kickoff_cnt = 2;
inline bool MdpCmdWaitPingpongFtraceEvent::has_kickoff_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpCmdWaitPingpongFtraceEvent::clear_kickoff_cnt() {
  _impl_.kickoff_cnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t MdpCmdWaitPingpongFtraceEvent::kickoff_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.kickoff_cnt)
  return _internal_kickoff_cnt();
}
inline void MdpCmdWaitPingpongFtraceEvent::set_kickoff_cnt(::int32_t value) {
  _internal_set_kickoff_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpCmdWaitPingpongFtraceEvent.kickoff_cnt)
}
inline ::int32_t MdpCmdWaitPingpongFtraceEvent::_internal_kickoff_cnt() const {
  return _impl_.kickoff_cnt_;
}
inline void MdpCmdWaitPingpongFtraceEvent::_internal_set_kickoff_cnt(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kickoff_cnt_ = value;
}

// -------------------------------------------------------------------

// MdpPerfPrefillCalcFtraceEvent

// optional uint32 pnum = 1;
inline bool MdpPerfPrefillCalcFtraceEvent::has_pnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_pnum() {
  _impl_.pnum_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::pnum() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pnum)
  return _internal_pnum();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_pnum(::uint32_t value) {
  _internal_set_pnum(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pnum)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_pnum() const {
  return _impl_.pnum_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_pnum(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pnum_ = value;
}

// optional uint32 latency_buf = 2;
inline bool MdpPerfPrefillCalcFtraceEvent::has_latency_buf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_latency_buf() {
  _impl_.latency_buf_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::latency_buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.latency_buf)
  return _internal_latency_buf();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_latency_buf(::uint32_t value) {
  _internal_set_latency_buf(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.latency_buf)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_latency_buf() const {
  return _impl_.latency_buf_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_latency_buf(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.latency_buf_ = value;
}

// optional uint32 ot = 3;
inline bool MdpPerfPrefillCalcFtraceEvent::has_ot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_ot() {
  _impl_.ot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::ot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.ot)
  return _internal_ot();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_ot(::uint32_t value) {
  _internal_set_ot(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.ot)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_ot() const {
  return _impl_.ot_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_ot(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ot_ = value;
}

// optional uint32 y_buf = 4;
inline bool MdpPerfPrefillCalcFtraceEvent::has_y_buf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_y_buf() {
  _impl_.y_buf_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::y_buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_buf)
  return _internal_y_buf();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_y_buf(::uint32_t value) {
  _internal_set_y_buf(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_buf)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_y_buf() const {
  return _impl_.y_buf_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_y_buf(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.y_buf_ = value;
}

// optional uint32 y_scaler = 5;
inline bool MdpPerfPrefillCalcFtraceEvent::has_y_scaler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_y_scaler() {
  _impl_.y_scaler_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::y_scaler() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_scaler)
  return _internal_y_scaler();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_y_scaler(::uint32_t value) {
  _internal_set_y_scaler(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.y_scaler)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_y_scaler() const {
  return _impl_.y_scaler_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_y_scaler(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.y_scaler_ = value;
}

// optional uint32 pp_lines = 6;
inline bool MdpPerfPrefillCalcFtraceEvent::has_pp_lines() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_pp_lines() {
  _impl_.pp_lines_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::pp_lines() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_lines)
  return _internal_pp_lines();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_pp_lines(::uint32_t value) {
  _internal_set_pp_lines(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_lines)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_pp_lines() const {
  return _impl_.pp_lines_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_pp_lines(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pp_lines_ = value;
}

// optional uint32 pp_bytes = 7;
inline bool MdpPerfPrefillCalcFtraceEvent::has_pp_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_pp_bytes() {
  _impl_.pp_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::pp_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_bytes)
  return _internal_pp_bytes();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_pp_bytes(::uint32_t value) {
  _internal_set_pp_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.pp_bytes)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_pp_bytes() const {
  return _impl_.pp_bytes_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_pp_bytes(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pp_bytes_ = value;
}

// optional uint32 post_sc = 8;
inline bool MdpPerfPrefillCalcFtraceEvent::has_post_sc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_post_sc() {
  _impl_.post_sc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::post_sc() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.post_sc)
  return _internal_post_sc();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_post_sc(::uint32_t value) {
  _internal_set_post_sc(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.post_sc)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_post_sc() const {
  return _impl_.post_sc_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_post_sc(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.post_sc_ = value;
}

// optional uint32 fbc_bytes = 9;
inline bool MdpPerfPrefillCalcFtraceEvent::has_fbc_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_fbc_bytes() {
  _impl_.fbc_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::fbc_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.fbc_bytes)
  return _internal_fbc_bytes();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_fbc_bytes(::uint32_t value) {
  _internal_set_fbc_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.fbc_bytes)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_fbc_bytes() const {
  return _impl_.fbc_bytes_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_fbc_bytes(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.fbc_bytes_ = value;
}

// optional uint32 prefill_bytes = 10;
inline bool MdpPerfPrefillCalcFtraceEvent::has_prefill_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void MdpPerfPrefillCalcFtraceEvent::clear_prefill_bytes() {
  _impl_.prefill_bytes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::prefill_bytes() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.prefill_bytes)
  return _internal_prefill_bytes();
}
inline void MdpPerfPrefillCalcFtraceEvent::set_prefill_bytes(::uint32_t value) {
  _internal_set_prefill_bytes(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfPrefillCalcFtraceEvent.prefill_bytes)
}
inline ::uint32_t MdpPerfPrefillCalcFtraceEvent::_internal_prefill_bytes() const {
  return _impl_.prefill_bytes_;
}
inline void MdpPerfPrefillCalcFtraceEvent::_internal_set_prefill_bytes(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.prefill_bytes_ = value;
}

// -------------------------------------------------------------------

// MdpPerfUpdateBusFtraceEvent

// optional int32 client = 1;
inline bool MdpPerfUpdateBusFtraceEvent::has_client() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MdpPerfUpdateBusFtraceEvent::clear_client() {
  _impl_.client_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t MdpPerfUpdateBusFtraceEvent::client() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfUpdateBusFtraceEvent.client)
  return _internal_client();
}
inline void MdpPerfUpdateBusFtraceEvent::set_client(::int32_t value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfUpdateBusFtraceEvent.client)
}
inline ::int32_t MdpPerfUpdateBusFtraceEvent::_internal_client() const {
  return _impl_.client_;
}
inline void MdpPerfUpdateBusFtraceEvent::_internal_set_client(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.client_ = value;
}

// optional uint64 ab_quota = 2;
inline bool MdpPerfUpdateBusFtraceEvent::has_ab_quota() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MdpPerfUpdateBusFtraceEvent::clear_ab_quota() {
  _impl_.ab_quota_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t MdpPerfUpdateBusFtraceEvent::ab_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ab_quota)
  return _internal_ab_quota();
}
inline void MdpPerfUpdateBusFtraceEvent::set_ab_quota(::uint64_t value) {
  _internal_set_ab_quota(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ab_quota)
}
inline ::uint64_t MdpPerfUpdateBusFtraceEvent::_internal_ab_quota() const {
  return _impl_.ab_quota_;
}
inline void MdpPerfUpdateBusFtraceEvent::_internal_set_ab_quota(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ab_quota_ = value;
}

// optional uint64 ib_quota = 3;
inline bool MdpPerfUpdateBusFtraceEvent::has_ib_quota() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MdpPerfUpdateBusFtraceEvent::clear_ib_quota() {
  _impl_.ib_quota_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t MdpPerfUpdateBusFtraceEvent::ib_quota() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ib_quota)
  return _internal_ib_quota();
}
inline void MdpPerfUpdateBusFtraceEvent::set_ib_quota(::uint64_t value) {
  _internal_set_ib_quota(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MdpPerfUpdateBusFtraceEvent.ib_quota)
}
inline ::uint64_t MdpPerfUpdateBusFtraceEvent::_internal_ib_quota() const {
  return _impl_.ib_quota_;
}
inline void MdpPerfUpdateBusFtraceEvent::_internal_set_ib_quota(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ib_quota_ = value;
}

// -------------------------------------------------------------------

// RotatorBwAoAsContextFtraceEvent

// optional uint32 state = 1;
inline bool RotatorBwAoAsContextFtraceEvent::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RotatorBwAoAsContextFtraceEvent::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RotatorBwAoAsContextFtraceEvent::state() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.RotatorBwAoAsContextFtraceEvent.state)
  return _internal_state();
}
inline void RotatorBwAoAsContextFtraceEvent::set_state(::uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.RotatorBwAoAsContextFtraceEvent.state)
}
inline ::uint32_t RotatorBwAoAsContextFtraceEvent::_internal_state() const {
  return _impl_.state_;
}
inline void RotatorBwAoAsContextFtraceEvent::_internal_set_state(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fmdss_2eproto_2epb_2eh
