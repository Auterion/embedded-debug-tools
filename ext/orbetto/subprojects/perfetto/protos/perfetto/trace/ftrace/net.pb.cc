// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/net.proto

#include "protos/perfetto/trace/ftrace/net.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skbaddr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.len_)*/ 0u
} {}
struct NetifReceiveSkbFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetifReceiveSkbFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetifReceiveSkbFtraceEventDefaultTypeInternal() {}
  union {
    NetifReceiveSkbFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetifReceiveSkbFtraceEventDefaultTypeInternal _NetifReceiveSkbFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.len_)*/ 0u

  , /*decltype(_impl_.rc_)*/ 0

  , /*decltype(_impl_.skbaddr_)*/ ::uint64_t{0u}
} {}
struct NetDevXmitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetDevXmitFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetDevXmitFtraceEventDefaultTypeInternal() {}
  union {
    NetDevXmitFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetDevXmitFtraceEventDefaultTypeInternal _NetDevXmitFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_len_)*/ 0u

  , /*decltype(_impl_.gso_size_)*/ 0u

  , /*decltype(_impl_.gso_type_)*/ 0u

  , /*decltype(_impl_.hash_)*/ 0u

  , /*decltype(_impl_.ip_summed_)*/ 0u

  , /*decltype(_impl_.l4_hash_)*/ 0u

  , /*decltype(_impl_.len_)*/ 0u

  , /*decltype(_impl_.mac_header_)*/ 0

  , /*decltype(_impl_.mac_header_valid_)*/ 0u

  , /*decltype(_impl_.napi_id_)*/ 0u

  , /*decltype(_impl_.nr_frags_)*/ 0u

  , /*decltype(_impl_.protocol_)*/ 0u

  , /*decltype(_impl_.skbaddr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.queue_mapping_)*/ 0u

  , /*decltype(_impl_.truesize_)*/ 0u

  , /*decltype(_impl_.vlan_proto_)*/ 0u

  , /*decltype(_impl_.vlan_tagged_)*/ 0u

  , /*decltype(_impl_.vlan_tci_)*/ 0u
} {}
struct NapiGroReceiveEntryFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NapiGroReceiveEntryFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NapiGroReceiveEntryFtraceEventDefaultTypeInternal() {}
  union {
    NapiGroReceiveEntryFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NapiGroReceiveEntryFtraceEventDefaultTypeInternal _NapiGroReceiveEntryFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ret_)*/ 0
} {}
struct NapiGroReceiveExitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NapiGroReceiveExitFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NapiGroReceiveExitFtraceEventDefaultTypeInternal() {}
  union {
    NapiGroReceiveExitFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NapiGroReceiveExitFtraceEventDefaultTypeInternal _NapiGroReceiveExitFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetifReceiveSkbFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetifReceiveSkbFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetifReceiveSkbFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetifReceiveSkbFtraceEvent, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetifReceiveSkbFtraceEvent, _impl_.skbaddr_),
    2,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetDevXmitFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetDevXmitFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetDevXmitFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetDevXmitFtraceEvent, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetDevXmitFtraceEvent, _impl_.rc_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NetDevXmitFtraceEvent, _impl_.skbaddr_),
    1,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.data_len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.gso_size_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.gso_type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.ip_summed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.l4_hash_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.mac_header_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.mac_header_valid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.napi_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.nr_frags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.protocol_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.queue_mapping_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.skbaddr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.truesize_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.vlan_proto_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.vlan_tagged_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveEntryFtraceEvent, _impl_.vlan_tci_),
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    0,
    10,
    11,
    12,
    14,
    13,
    15,
    16,
    17,
    18,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveExitFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveExitFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::NapiGroReceiveExitFtraceEvent, _impl_.ret_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::perfetto::protos::NetifReceiveSkbFtraceEvent)},
        { 14, 26, -1, sizeof(::perfetto::protos::NetDevXmitFtraceEvent)},
        { 30, 57, -1, sizeof(::perfetto::protos::NapiGroReceiveEntryFtraceEvent)},
        { 76, 85, -1, sizeof(::perfetto::protos::NapiGroReceiveExitFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_NetifReceiveSkbFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_NetDevXmitFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_NapiGroReceiveEntryFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_NapiGroReceiveExitFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/ftrace/net.proto"
    "\022\017perfetto.protos\"H\n\032NetifReceiveSkbFtra"
    "ceEvent\022\013\n\003len\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007sk"
    "baddr\030\003 \001(\004\"O\n\025NetDevXmitFtraceEvent\022\013\n\003"
    "len\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\n\n\002rc\030\003 \001(\005\022\017\n\007s"
    "kbaddr\030\004 \001(\004\"\373\002\n\036NapiGroReceiveEntryFtra"
    "ceEvent\022\020\n\010data_len\030\001 \001(\r\022\020\n\010gso_size\030\002 "
    "\001(\r\022\020\n\010gso_type\030\003 \001(\r\022\014\n\004hash\030\004 \001(\r\022\021\n\ti"
    "p_summed\030\005 \001(\r\022\017\n\007l4_hash\030\006 \001(\r\022\013\n\003len\030\007"
    " \001(\r\022\022\n\nmac_header\030\010 \001(\005\022\030\n\020mac_header_v"
    "alid\030\t \001(\r\022\014\n\004name\030\n \001(\t\022\017\n\007napi_id\030\013 \001("
    "\r\022\020\n\010nr_frags\030\014 \001(\r\022\020\n\010protocol\030\r \001(\r\022\025\n"
    "\rqueue_mapping\030\016 \001(\r\022\017\n\007skbaddr\030\017 \001(\004\022\020\n"
    "\010truesize\030\020 \001(\r\022\022\n\nvlan_proto\030\021 \001(\r\022\023\n\013v"
    "lan_tagged\030\022 \001(\r\022\020\n\010vlan_tci\030\023 \001(\r\",\n\035Na"
    "piGroReceiveExitFtraceEvent\022\013\n\003ret\030\001 \001(\005"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto = {
    false,
    false,
    640,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto,
    "protos/perfetto/trace/ftrace/net.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class NetifReceiveSkbFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NetifReceiveSkbFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetifReceiveSkbFtraceEvent, _impl_._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skbaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NetifReceiveSkbFtraceEvent)
}
NetifReceiveSkbFtraceEvent::NetifReceiveSkbFtraceEvent(const NetifReceiveSkbFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetifReceiveSkbFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.skbaddr_) {}

    , decltype(_impl_.len_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skbaddr_, &from._impl_.skbaddr_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.len_) -
    reinterpret_cast<char*>(&_impl_.skbaddr_)) + sizeof(_impl_.len_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NetifReceiveSkbFtraceEvent)
}

inline void NetifReceiveSkbFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.skbaddr_) { ::uint64_t{0u} }

    , decltype(_impl_.len_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetifReceiveSkbFtraceEvent::~NetifReceiveSkbFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NetifReceiveSkbFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetifReceiveSkbFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void NetifReceiveSkbFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetifReceiveSkbFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NetifReceiveSkbFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.skbaddr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.len_) -
        reinterpret_cast<char*>(&_impl_.skbaddr_)) + sizeof(_impl_.len_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetifReceiveSkbFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.NetifReceiveSkbFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 skbaddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_skbaddr(&has_bits);
          _impl_.skbaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetifReceiveSkbFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NetifReceiveSkbFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 len = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_len(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.NetifReceiveSkbFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint64 skbaddr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skbaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NetifReceiveSkbFtraceEvent)
  return target;
}

::size_t NetifReceiveSkbFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NetifReceiveSkbFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint64 skbaddr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_skbaddr());
    }

    // optional uint32 len = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetifReceiveSkbFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetifReceiveSkbFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetifReceiveSkbFtraceEvent::GetClassData() const { return &_class_data_; }


void NetifReceiveSkbFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetifReceiveSkbFtraceEvent*>(&to_msg);
  auto& from = static_cast<const NetifReceiveSkbFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NetifReceiveSkbFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.skbaddr_ = from._impl_.skbaddr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetifReceiveSkbFtraceEvent::CopyFrom(const NetifReceiveSkbFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NetifReceiveSkbFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetifReceiveSkbFtraceEvent::IsInitialized() const {
  return true;
}

void NetifReceiveSkbFtraceEvent::InternalSwap(NetifReceiveSkbFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetifReceiveSkbFtraceEvent, _impl_.len_)
      + sizeof(NetifReceiveSkbFtraceEvent::_impl_.len_)
      - PROTOBUF_FIELD_OFFSET(NetifReceiveSkbFtraceEvent, _impl_.skbaddr_)>(
          reinterpret_cast<char*>(&_impl_.skbaddr_),
          reinterpret_cast<char*>(&other->_impl_.skbaddr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetifReceiveSkbFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto[0]);
}
// ===================================================================

class NetDevXmitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NetDevXmitFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NetDevXmitFtraceEvent, _impl_._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skbaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NetDevXmitFtraceEvent)
}
NetDevXmitFtraceEvent::NetDevXmitFtraceEvent(const NetDevXmitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetDevXmitFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.len_) {}

    , decltype(_impl_.rc_) {}

    , decltype(_impl_.skbaddr_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.len_, &from._impl_.len_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.skbaddr_) -
    reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.skbaddr_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NetDevXmitFtraceEvent)
}

inline void NetDevXmitFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.len_) { 0u }

    , decltype(_impl_.rc_) { 0 }

    , decltype(_impl_.skbaddr_) { ::uint64_t{0u} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetDevXmitFtraceEvent::~NetDevXmitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NetDevXmitFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetDevXmitFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void NetDevXmitFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetDevXmitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NetDevXmitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.len_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.skbaddr_) -
        reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.skbaddr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetDevXmitFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.NetDevXmitFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 rc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_rc(&has_bits);
          _impl_.rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 skbaddr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_skbaddr(&has_bits);
          _impl_.skbaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NetDevXmitFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NetDevXmitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_len(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.NetDevXmitFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 rc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_rc(), target);
  }

  // optional uint64 skbaddr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_skbaddr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NetDevXmitFtraceEvent)
  return target;
}

::size_t NetDevXmitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NetDevXmitFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint32 len = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

    // optional int32 rc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_rc());
    }

    // optional uint64 skbaddr = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_skbaddr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetDevXmitFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetDevXmitFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetDevXmitFtraceEvent::GetClassData() const { return &_class_data_; }


void NetDevXmitFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetDevXmitFtraceEvent*>(&to_msg);
  auto& from = static_cast<const NetDevXmitFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NetDevXmitFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rc_ = from._impl_.rc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.skbaddr_ = from._impl_.skbaddr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetDevXmitFtraceEvent::CopyFrom(const NetDevXmitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NetDevXmitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDevXmitFtraceEvent::IsInitialized() const {
  return true;
}

void NetDevXmitFtraceEvent::InternalSwap(NetDevXmitFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetDevXmitFtraceEvent, _impl_.skbaddr_)
      + sizeof(NetDevXmitFtraceEvent::_impl_.skbaddr_)
      - PROTOBUF_FIELD_OFFSET(NetDevXmitFtraceEvent, _impl_.len_)>(
          reinterpret_cast<char*>(&_impl_.len_),
          reinterpret_cast<char*>(&other->_impl_.len_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetDevXmitFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto[1]);
}
// ===================================================================

class NapiGroReceiveEntryFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NapiGroReceiveEntryFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NapiGroReceiveEntryFtraceEvent, _impl_._has_bits_);
  static void set_has_data_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gso_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gso_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ip_summed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_l4_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mac_header(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mac_header_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_napi_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_nr_frags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_queue_mapping(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_skbaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_truesize(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_vlan_proto(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_vlan_tagged(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vlan_tci(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
}
NapiGroReceiveEntryFtraceEvent::NapiGroReceiveEntryFtraceEvent(const NapiGroReceiveEntryFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NapiGroReceiveEntryFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.data_len_) {}

    , decltype(_impl_.gso_size_) {}

    , decltype(_impl_.gso_type_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.ip_summed_) {}

    , decltype(_impl_.l4_hash_) {}

    , decltype(_impl_.len_) {}

    , decltype(_impl_.mac_header_) {}

    , decltype(_impl_.mac_header_valid_) {}

    , decltype(_impl_.napi_id_) {}

    , decltype(_impl_.nr_frags_) {}

    , decltype(_impl_.protocol_) {}

    , decltype(_impl_.skbaddr_) {}

    , decltype(_impl_.queue_mapping_) {}

    , decltype(_impl_.truesize_) {}

    , decltype(_impl_.vlan_proto_) {}

    , decltype(_impl_.vlan_tagged_) {}

    , decltype(_impl_.vlan_tci_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.data_len_, &from._impl_.data_len_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.vlan_tci_) -
    reinterpret_cast<char*>(&_impl_.data_len_)) + sizeof(_impl_.vlan_tci_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
}

inline void NapiGroReceiveEntryFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.data_len_) { 0u }

    , decltype(_impl_.gso_size_) { 0u }

    , decltype(_impl_.gso_type_) { 0u }

    , decltype(_impl_.hash_) { 0u }

    , decltype(_impl_.ip_summed_) { 0u }

    , decltype(_impl_.l4_hash_) { 0u }

    , decltype(_impl_.len_) { 0u }

    , decltype(_impl_.mac_header_) { 0 }

    , decltype(_impl_.mac_header_valid_) { 0u }

    , decltype(_impl_.napi_id_) { 0u }

    , decltype(_impl_.nr_frags_) { 0u }

    , decltype(_impl_.protocol_) { 0u }

    , decltype(_impl_.skbaddr_) { ::uint64_t{0u} }

    , decltype(_impl_.queue_mapping_) { 0u }

    , decltype(_impl_.truesize_) { 0u }

    , decltype(_impl_.vlan_proto_) { 0u }

    , decltype(_impl_.vlan_tagged_) { 0u }

    , decltype(_impl_.vlan_tci_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NapiGroReceiveEntryFtraceEvent::~NapiGroReceiveEntryFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NapiGroReceiveEntryFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void NapiGroReceiveEntryFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NapiGroReceiveEntryFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.data_len_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.len_) -
        reinterpret_cast<char*>(&_impl_.data_len_)) + sizeof(_impl_.len_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.mac_header_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.truesize_) -
        reinterpret_cast<char*>(&_impl_.mac_header_)) + sizeof(_impl_.truesize_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.vlan_proto_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vlan_tci_) -
        reinterpret_cast<char*>(&_impl_.vlan_proto_)) + sizeof(_impl_.vlan_tci_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NapiGroReceiveEntryFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 data_len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_data_len(&has_bits);
          _impl_.data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 gso_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_gso_size(&has_bits);
          _impl_.gso_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 gso_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_gso_type(&has_bits);
          _impl_.gso_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_hash(&has_bits);
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ip_summed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_ip_summed(&has_bits);
          _impl_.ip_summed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 l4_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_l4_hash(&has_bits);
          _impl_.l4_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 len = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_len(&has_bits);
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 mac_header = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_mac_header(&has_bits);
          _impl_.mac_header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 mac_header_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_mac_header_valid(&has_bits);
          _impl_.mac_header_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.NapiGroReceiveEntryFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 napi_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_napi_id(&has_bits);
          _impl_.napi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 nr_frags = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_nr_frags(&has_bits);
          _impl_.nr_frags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 protocol = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_protocol(&has_bits);
          _impl_.protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 queue_mapping = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_queue_mapping(&has_bits);
          _impl_.queue_mapping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 skbaddr = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_skbaddr(&has_bits);
          _impl_.skbaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 truesize = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_truesize(&has_bits);
          _impl_.truesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 vlan_proto = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_vlan_proto(&has_bits);
          _impl_.vlan_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 vlan_tagged = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_vlan_tagged(&has_bits);
          _impl_.vlan_tagged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 vlan_tci = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_vlan_tci(&has_bits);
          _impl_.vlan_tci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NapiGroReceiveEntryFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 data_len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_data_len(), target);
  }

  // optional uint32 gso_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_gso_size(), target);
  }

  // optional uint32 gso_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_gso_type(), target);
  }

  // optional uint32 hash = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_hash(), target);
  }

  // optional uint32 ip_summed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_ip_summed(), target);
  }

  // optional uint32 l4_hash = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_l4_hash(), target);
  }

  // optional uint32 len = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_len(), target);
  }

  // optional int32 mac_header = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        8, this->_internal_mac_header(), target);
  }

  // optional uint32 mac_header_valid = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_mac_header_valid(), target);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.NapiGroReceiveEntryFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional uint32 napi_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_napi_id(), target);
  }

  // optional uint32 nr_frags = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_nr_frags(), target);
  }

  // optional uint32 protocol = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_protocol(), target);
  }

  // optional uint32 queue_mapping = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_queue_mapping(), target);
  }

  // optional uint64 skbaddr = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        15, this->_internal_skbaddr(), target);
  }

  // optional uint32 truesize = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_truesize(), target);
  }

  // optional uint32 vlan_proto = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_vlan_proto(), target);
  }

  // optional uint32 vlan_tagged = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_vlan_tagged(), target);
  }

  // optional uint32 vlan_tci = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_vlan_tci(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  return target;
}

::size_t NapiGroReceiveEntryFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional uint32 data_len = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_data_len());
    }

    // optional uint32 gso_size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gso_size());
    }

    // optional uint32 gso_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gso_type());
    }

    // optional uint32 hash = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_hash());
    }

    // optional uint32 ip_summed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ip_summed());
    }

    // optional uint32 l4_hash = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_l4_hash());
    }

    // optional uint32 len = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 mac_header = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mac_header());
    }

    // optional uint32 mac_header_valid = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_mac_header_valid());
    }

    // optional uint32 napi_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_napi_id());
    }

    // optional uint32 nr_frags = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_nr_frags());
    }

    // optional uint32 protocol = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_protocol());
    }

    // optional uint64 skbaddr = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_skbaddr());
    }

    // optional uint32 queue_mapping = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_queue_mapping());
    }

    // optional uint32 truesize = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_truesize());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 vlan_proto = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_vlan_proto());
    }

    // optional uint32 vlan_tagged = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_vlan_tagged());
    }

    // optional uint32 vlan_tci = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_vlan_tci());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NapiGroReceiveEntryFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NapiGroReceiveEntryFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NapiGroReceiveEntryFtraceEvent::GetClassData() const { return &_class_data_; }


void NapiGroReceiveEntryFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NapiGroReceiveEntryFtraceEvent*>(&to_msg);
  auto& from = static_cast<const NapiGroReceiveEntryFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_len_ = from._impl_.data_len_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gso_size_ = from._impl_.gso_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gso_type_ = from._impl_.gso_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hash_ = from._impl_.hash_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ip_summed_ = from._impl_.ip_summed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.l4_hash_ = from._impl_.l4_hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.mac_header_ = from._impl_.mac_header_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mac_header_valid_ = from._impl_.mac_header_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.napi_id_ = from._impl_.napi_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.nr_frags_ = from._impl_.nr_frags_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.skbaddr_ = from._impl_.skbaddr_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.queue_mapping_ = from._impl_.queue_mapping_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.truesize_ = from._impl_.truesize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.vlan_proto_ = from._impl_.vlan_proto_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.vlan_tagged_ = from._impl_.vlan_tagged_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.vlan_tci_ = from._impl_.vlan_tci_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NapiGroReceiveEntryFtraceEvent::CopyFrom(const NapiGroReceiveEntryFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NapiGroReceiveEntryFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NapiGroReceiveEntryFtraceEvent::IsInitialized() const {
  return true;
}

void NapiGroReceiveEntryFtraceEvent::InternalSwap(NapiGroReceiveEntryFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NapiGroReceiveEntryFtraceEvent, _impl_.vlan_tci_)
      + sizeof(NapiGroReceiveEntryFtraceEvent::_impl_.vlan_tci_)
      - PROTOBUF_FIELD_OFFSET(NapiGroReceiveEntryFtraceEvent, _impl_.data_len_)>(
          reinterpret_cast<char*>(&_impl_.data_len_),
          reinterpret_cast<char*>(&other->_impl_.data_len_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NapiGroReceiveEntryFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto[2]);
}
// ===================================================================

class NapiGroReceiveExitFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NapiGroReceiveExitFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NapiGroReceiveExitFtraceEvent, _impl_._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.NapiGroReceiveExitFtraceEvent)
}
NapiGroReceiveExitFtraceEvent::NapiGroReceiveExitFtraceEvent(const NapiGroReceiveExitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.NapiGroReceiveExitFtraceEvent)
}

inline void NapiGroReceiveExitFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ret_) { 0 }

  };
}

NapiGroReceiveExitFtraceEvent::~NapiGroReceiveExitFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NapiGroReceiveExitFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void NapiGroReceiveExitFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NapiGroReceiveExitFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ret_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NapiGroReceiveExitFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NapiGroReceiveExitFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  return target;
}

::size_t NapiGroReceiveExitFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ret = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NapiGroReceiveExitFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NapiGroReceiveExitFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NapiGroReceiveExitFtraceEvent::GetClassData() const { return &_class_data_; }


void NapiGroReceiveExitFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NapiGroReceiveExitFtraceEvent*>(&to_msg);
  auto& from = static_cast<const NapiGroReceiveExitFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_ret(from._internal_ret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NapiGroReceiveExitFtraceEvent::CopyFrom(const NapiGroReceiveExitFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.NapiGroReceiveExitFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NapiGroReceiveExitFtraceEvent::IsInitialized() const {
  return true;
}

void NapiGroReceiveExitFtraceEvent::InternalSwap(NapiGroReceiveExitFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.ret_, other->_impl_.ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NapiGroReceiveExitFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fnet_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::NetifReceiveSkbFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::NetifReceiveSkbFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NetifReceiveSkbFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::NetDevXmitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::NetDevXmitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NetDevXmitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::NapiGroReceiveEntryFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::NapiGroReceiveEntryFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NapiGroReceiveEntryFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::NapiGroReceiveExitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::NapiGroReceiveExitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::NapiGroReceiveExitFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
