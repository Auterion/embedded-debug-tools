// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
namespace perfetto {
namespace protos {
class TaskNewtaskFtraceEvent;
struct TaskNewtaskFtraceEventDefaultTypeInternal;
extern TaskNewtaskFtraceEventDefaultTypeInternal _TaskNewtaskFtraceEvent_default_instance_;
class TaskRenameFtraceEvent;
struct TaskRenameFtraceEventDefaultTypeInternal;
extern TaskRenameFtraceEventDefaultTypeInternal _TaskRenameFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::TaskNewtaskFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TaskNewtaskFtraceEvent>(Arena*);
template <>
::perfetto::protos::TaskRenameFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::TaskRenameFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class TaskNewtaskFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TaskNewtaskFtraceEvent) */ {
 public:
  inline TaskNewtaskFtraceEvent() : TaskNewtaskFtraceEvent(nullptr) {}
  ~TaskNewtaskFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskNewtaskFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskNewtaskFtraceEvent(const TaskNewtaskFtraceEvent& from);
  TaskNewtaskFtraceEvent(TaskNewtaskFtraceEvent&& from) noexcept
    : TaskNewtaskFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TaskNewtaskFtraceEvent& operator=(const TaskNewtaskFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskNewtaskFtraceEvent& operator=(TaskNewtaskFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskNewtaskFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskNewtaskFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TaskNewtaskFtraceEvent*>(
               &_TaskNewtaskFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskNewtaskFtraceEvent& a, TaskNewtaskFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskNewtaskFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskNewtaskFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskNewtaskFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskNewtaskFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskNewtaskFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskNewtaskFtraceEvent& from) {
    TaskNewtaskFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNewtaskFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TaskNewtaskFtraceEvent";
  }
  protected:
  explicit TaskNewtaskFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 2,
    kPidFieldNumber = 1,
    kOomScoreAdjFieldNumber = 4,
    kCloneFlagsFieldNumber = 3,
  };
  // optional string comm = 2;
  bool has_comm() const;
  void clear_comm() ;
  const std::string& comm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comm(Arg_&& arg, Args_... args);
  std::string* mutable_comm();
  PROTOBUF_NODISCARD std::string* release_comm();
  void set_allocated_comm(std::string* ptr);

  private:
  const std::string& _internal_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comm(
      const std::string& value);
  std::string* _internal_mutable_comm();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 oom_score_adj = 4;
  bool has_oom_score_adj() const;
  void clear_oom_score_adj() ;
  ::int32_t oom_score_adj() const;
  void set_oom_score_adj(::int32_t value);

  private:
  ::int32_t _internal_oom_score_adj() const;
  void _internal_set_oom_score_adj(::int32_t value);

  public:
  // optional uint64 clone_flags = 3;
  bool has_clone_flags() const;
  void clear_clone_flags() ;
  ::uint64_t clone_flags() const;
  void set_clone_flags(::uint64_t value);

  private:
  ::uint64_t _internal_clone_flags() const;
  void _internal_set_clone_flags(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TaskNewtaskFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
    ::int32_t pid_;
    ::int32_t oom_score_adj_;
    ::uint64_t clone_flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
};// -------------------------------------------------------------------

class TaskRenameFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.TaskRenameFtraceEvent) */ {
 public:
  inline TaskRenameFtraceEvent() : TaskRenameFtraceEvent(nullptr) {}
  ~TaskRenameFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskRenameFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskRenameFtraceEvent(const TaskRenameFtraceEvent& from);
  TaskRenameFtraceEvent(TaskRenameFtraceEvent&& from) noexcept
    : TaskRenameFtraceEvent() {
    *this = ::std::move(from);
  }

  inline TaskRenameFtraceEvent& operator=(const TaskRenameFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRenameFtraceEvent& operator=(TaskRenameFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskRenameFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskRenameFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const TaskRenameFtraceEvent*>(
               &_TaskRenameFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskRenameFtraceEvent& a, TaskRenameFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRenameFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRenameFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskRenameFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskRenameFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskRenameFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskRenameFtraceEvent& from) {
    TaskRenameFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRenameFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.TaskRenameFtraceEvent";
  }
  protected:
  explicit TaskRenameFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldcommFieldNumber = 2,
    kNewcommFieldNumber = 3,
    kPidFieldNumber = 1,
    kOomScoreAdjFieldNumber = 4,
  };
  // optional string oldcomm = 2;
  bool has_oldcomm() const;
  void clear_oldcomm() ;
  const std::string& oldcomm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oldcomm(Arg_&& arg, Args_... args);
  std::string* mutable_oldcomm();
  PROTOBUF_NODISCARD std::string* release_oldcomm();
  void set_allocated_oldcomm(std::string* ptr);

  private:
  const std::string& _internal_oldcomm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldcomm(
      const std::string& value);
  std::string* _internal_mutable_oldcomm();

  public:
  // optional string newcomm = 3;
  bool has_newcomm() const;
  void clear_newcomm() ;
  const std::string& newcomm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_newcomm(Arg_&& arg, Args_... args);
  std::string* mutable_newcomm();
  PROTOBUF_NODISCARD std::string* release_newcomm();
  void set_allocated_newcomm(std::string* ptr);

  private:
  const std::string& _internal_newcomm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newcomm(
      const std::string& value);
  std::string* _internal_mutable_newcomm();

  public:
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // optional int32 oom_score_adj = 4;
  bool has_oom_score_adj() const;
  void clear_oom_score_adj() ;
  ::int32_t oom_score_adj() const;
  void set_oom_score_adj(::int32_t value);

  private:
  ::int32_t _internal_oom_score_adj() const;
  void _internal_set_oom_score_adj(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.TaskRenameFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldcomm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcomm_;
    ::int32_t pid_;
    ::int32_t oom_score_adj_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TaskNewtaskFtraceEvent

// optional int32 pid = 1;
inline bool TaskNewtaskFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskNewtaskFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TaskNewtaskFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.pid)
  return _internal_pid();
}
inline void TaskNewtaskFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.pid)
}
inline ::int32_t TaskNewtaskFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void TaskNewtaskFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pid_ = value;
}

// optional string comm = 2;
inline bool TaskNewtaskFtraceEvent::has_comm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskNewtaskFtraceEvent::clear_comm() {
  _impl_.comm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskNewtaskFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.comm)
  return _internal_comm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskNewtaskFtraceEvent::set_comm(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}
inline std::string* TaskNewtaskFtraceEvent::mutable_comm() {
  std::string* _s = _internal_mutable_comm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TaskNewtaskFtraceEvent.comm)
  return _s;
}
inline const std::string& TaskNewtaskFtraceEvent::_internal_comm() const {
  return _impl_.comm_.Get();
}
inline void TaskNewtaskFtraceEvent::_internal_set_comm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.comm_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskNewtaskFtraceEvent::_internal_mutable_comm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comm_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskNewtaskFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TaskNewtaskFtraceEvent.comm)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.comm_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskNewtaskFtraceEvent::set_allocated_comm(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comm_.IsDefault()) {
          _impl_.comm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TaskNewtaskFtraceEvent.comm)
}

// optional uint64 clone_flags = 3;
inline bool TaskNewtaskFtraceEvent::has_clone_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TaskNewtaskFtraceEvent::clear_clone_flags() {
  _impl_.clone_flags_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t TaskNewtaskFtraceEvent::clone_flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.clone_flags)
  return _internal_clone_flags();
}
inline void TaskNewtaskFtraceEvent::set_clone_flags(::uint64_t value) {
  _internal_set_clone_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.clone_flags)
}
inline ::uint64_t TaskNewtaskFtraceEvent::_internal_clone_flags() const {
  return _impl_.clone_flags_;
}
inline void TaskNewtaskFtraceEvent::_internal_set_clone_flags(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.clone_flags_ = value;
}

// optional int32 oom_score_adj = 4;
inline bool TaskNewtaskFtraceEvent::has_oom_score_adj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TaskNewtaskFtraceEvent::clear_oom_score_adj() {
  _impl_.oom_score_adj_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TaskNewtaskFtraceEvent::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskNewtaskFtraceEvent.oom_score_adj)
  return _internal_oom_score_adj();
}
inline void TaskNewtaskFtraceEvent::set_oom_score_adj(::int32_t value) {
  _internal_set_oom_score_adj(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskNewtaskFtraceEvent.oom_score_adj)
}
inline ::int32_t TaskNewtaskFtraceEvent::_internal_oom_score_adj() const {
  return _impl_.oom_score_adj_;
}
inline void TaskNewtaskFtraceEvent::_internal_set_oom_score_adj(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.oom_score_adj_ = value;
}

// -------------------------------------------------------------------

// TaskRenameFtraceEvent

// optional int32 pid = 1;
inline bool TaskRenameFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TaskRenameFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t TaskRenameFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.pid)
  return _internal_pid();
}
inline void TaskRenameFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.pid)
}
inline ::int32_t TaskRenameFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void TaskRenameFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// optional string oldcomm = 2;
inline bool TaskRenameFtraceEvent::has_oldcomm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TaskRenameFtraceEvent::clear_oldcomm() {
  _impl_.oldcomm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskRenameFtraceEvent::oldcomm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
  return _internal_oldcomm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRenameFtraceEvent::set_oldcomm(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.oldcomm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}
inline std::string* TaskRenameFtraceEvent::mutable_oldcomm() {
  std::string* _s = _internal_mutable_oldcomm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
  return _s;
}
inline const std::string& TaskRenameFtraceEvent::_internal_oldcomm() const {
  return _impl_.oldcomm_.Get();
}
inline void TaskRenameFtraceEvent::_internal_set_oldcomm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.oldcomm_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskRenameFtraceEvent::_internal_mutable_oldcomm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.oldcomm_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskRenameFtraceEvent::release_oldcomm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.oldcomm_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldcomm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskRenameFtraceEvent::set_allocated_oldcomm(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.oldcomm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oldcomm_.IsDefault()) {
          _impl_.oldcomm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TaskRenameFtraceEvent.oldcomm)
}

// optional string newcomm = 3;
inline bool TaskRenameFtraceEvent::has_newcomm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TaskRenameFtraceEvent::clear_newcomm() {
  _impl_.newcomm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TaskRenameFtraceEvent::newcomm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.newcomm)
  return _internal_newcomm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskRenameFtraceEvent::set_newcomm(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.newcomm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}
inline std::string* TaskRenameFtraceEvent::mutable_newcomm() {
  std::string* _s = _internal_mutable_newcomm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.TaskRenameFtraceEvent.newcomm)
  return _s;
}
inline const std::string& TaskRenameFtraceEvent::_internal_newcomm() const {
  return _impl_.newcomm_.Get();
}
inline void TaskRenameFtraceEvent::_internal_set_newcomm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.newcomm_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskRenameFtraceEvent::_internal_mutable_newcomm() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.newcomm_.Mutable( GetArenaForAllocation());
}
inline std::string* TaskRenameFtraceEvent::release_newcomm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.TaskRenameFtraceEvent.newcomm)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.newcomm_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newcomm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TaskRenameFtraceEvent::set_allocated_newcomm(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.newcomm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.newcomm_.IsDefault()) {
          _impl_.newcomm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.TaskRenameFtraceEvent.newcomm)
}

// optional int32 oom_score_adj = 4;
inline bool TaskRenameFtraceEvent::has_oom_score_adj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TaskRenameFtraceEvent::clear_oom_score_adj() {
  _impl_.oom_score_adj_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t TaskRenameFtraceEvent::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.TaskRenameFtraceEvent.oom_score_adj)
  return _internal_oom_score_adj();
}
inline void TaskRenameFtraceEvent::set_oom_score_adj(::int32_t value) {
  _internal_set_oom_score_adj(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.TaskRenameFtraceEvent.oom_score_adj)
}
inline ::int32_t TaskRenameFtraceEvent::_internal_oom_score_adj() const {
  return _impl_.oom_score_adj_;
}
inline void TaskRenameFtraceEvent::_internal_set_oom_score_adj(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.oom_score_adj_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ftask_2eproto_2epb_2eh
