// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/virtio_video.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto;
namespace perfetto {
namespace protos {
class VirtioVideoCmdDoneFtraceEvent;
struct VirtioVideoCmdDoneFtraceEventDefaultTypeInternal;
extern VirtioVideoCmdDoneFtraceEventDefaultTypeInternal _VirtioVideoCmdDoneFtraceEvent_default_instance_;
class VirtioVideoCmdFtraceEvent;
struct VirtioVideoCmdFtraceEventDefaultTypeInternal;
extern VirtioVideoCmdFtraceEventDefaultTypeInternal _VirtioVideoCmdFtraceEvent_default_instance_;
class VirtioVideoResourceQueueDoneFtraceEvent;
struct VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal;
extern VirtioVideoResourceQueueDoneFtraceEventDefaultTypeInternal _VirtioVideoResourceQueueDoneFtraceEvent_default_instance_;
class VirtioVideoResourceQueueFtraceEvent;
struct VirtioVideoResourceQueueFtraceEventDefaultTypeInternal;
extern VirtioVideoResourceQueueFtraceEventDefaultTypeInternal _VirtioVideoResourceQueueFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::VirtioVideoCmdDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VirtioVideoCmdDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::VirtioVideoCmdFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VirtioVideoCmdFtraceEvent>(Arena*);
template <>
::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VirtioVideoResourceQueueDoneFtraceEvent>(Arena*);
template <>
::perfetto::protos::VirtioVideoResourceQueueFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::VirtioVideoResourceQueueFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class VirtioVideoCmdFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VirtioVideoCmdFtraceEvent) */ {
 public:
  inline VirtioVideoCmdFtraceEvent() : VirtioVideoCmdFtraceEvent(nullptr) {}
  ~VirtioVideoCmdFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtioVideoCmdFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioVideoCmdFtraceEvent(const VirtioVideoCmdFtraceEvent& from);
  VirtioVideoCmdFtraceEvent(VirtioVideoCmdFtraceEvent&& from) noexcept
    : VirtioVideoCmdFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VirtioVideoCmdFtraceEvent& operator=(const VirtioVideoCmdFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioVideoCmdFtraceEvent& operator=(VirtioVideoCmdFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioVideoCmdFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioVideoCmdFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VirtioVideoCmdFtraceEvent*>(
               &_VirtioVideoCmdFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VirtioVideoCmdFtraceEvent& a, VirtioVideoCmdFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioVideoCmdFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioVideoCmdFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioVideoCmdFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioVideoCmdFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioVideoCmdFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioVideoCmdFtraceEvent& from) {
    VirtioVideoCmdFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioVideoCmdFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VirtioVideoCmdFtraceEvent";
  }
  protected:
  explicit VirtioVideoCmdFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id() ;
  ::uint32_t stream_id() const;
  void set_stream_id(::uint32_t value);

  private:
  ::uint32_t _internal_stream_id() const;
  void _internal_set_stream_id(::uint32_t value);

  public:
  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VirtioVideoCmdFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t stream_id_;
    ::uint32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto;
};// -------------------------------------------------------------------

class VirtioVideoCmdDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VirtioVideoCmdDoneFtraceEvent) */ {
 public:
  inline VirtioVideoCmdDoneFtraceEvent() : VirtioVideoCmdDoneFtraceEvent(nullptr) {}
  ~VirtioVideoCmdDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtioVideoCmdDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioVideoCmdDoneFtraceEvent(const VirtioVideoCmdDoneFtraceEvent& from);
  VirtioVideoCmdDoneFtraceEvent(VirtioVideoCmdDoneFtraceEvent&& from) noexcept
    : VirtioVideoCmdDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VirtioVideoCmdDoneFtraceEvent& operator=(const VirtioVideoCmdDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioVideoCmdDoneFtraceEvent& operator=(VirtioVideoCmdDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioVideoCmdDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioVideoCmdDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VirtioVideoCmdDoneFtraceEvent*>(
               &_VirtioVideoCmdDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VirtioVideoCmdDoneFtraceEvent& a, VirtioVideoCmdDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioVideoCmdDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioVideoCmdDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioVideoCmdDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioVideoCmdDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioVideoCmdDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioVideoCmdDoneFtraceEvent& from) {
    VirtioVideoCmdDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioVideoCmdDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VirtioVideoCmdDoneFtraceEvent";
  }
  protected:
  explicit VirtioVideoCmdDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional uint32 stream_id = 1;
  bool has_stream_id() const;
  void clear_stream_id() ;
  ::uint32_t stream_id() const;
  void set_stream_id(::uint32_t value);

  private:
  ::uint32_t _internal_stream_id() const;
  void _internal_set_stream_id(::uint32_t value);

  public:
  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type() ;
  ::uint32_t type() const;
  void set_type(::uint32_t value);

  private:
  ::uint32_t _internal_type() const;
  void _internal_set_type(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VirtioVideoCmdDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t stream_id_;
    ::uint32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto;
};// -------------------------------------------------------------------

class VirtioVideoResourceQueueFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VirtioVideoResourceQueueFtraceEvent) */ {
 public:
  inline VirtioVideoResourceQueueFtraceEvent() : VirtioVideoResourceQueueFtraceEvent(nullptr) {}
  ~VirtioVideoResourceQueueFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtioVideoResourceQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioVideoResourceQueueFtraceEvent(const VirtioVideoResourceQueueFtraceEvent& from);
  VirtioVideoResourceQueueFtraceEvent(VirtioVideoResourceQueueFtraceEvent&& from) noexcept
    : VirtioVideoResourceQueueFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VirtioVideoResourceQueueFtraceEvent& operator=(const VirtioVideoResourceQueueFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioVideoResourceQueueFtraceEvent& operator=(VirtioVideoResourceQueueFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioVideoResourceQueueFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioVideoResourceQueueFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VirtioVideoResourceQueueFtraceEvent*>(
               &_VirtioVideoResourceQueueFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VirtioVideoResourceQueueFtraceEvent& a, VirtioVideoResourceQueueFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioVideoResourceQueueFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioVideoResourceQueueFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioVideoResourceQueueFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioVideoResourceQueueFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioVideoResourceQueueFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioVideoResourceQueueFtraceEvent& from) {
    VirtioVideoResourceQueueFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioVideoResourceQueueFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VirtioVideoResourceQueueFtraceEvent";
  }
  protected:
  explicit VirtioVideoResourceQueueFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSize0FieldNumber = 1,
    kDataSize1FieldNumber = 2,
    kDataSize2FieldNumber = 3,
    kDataSize3FieldNumber = 4,
    kQueueTypeFieldNumber = 5,
    kResourceIdFieldNumber = 6,
    kTimestampFieldNumber = 8,
    kStreamIdFieldNumber = 7,
  };
  // optional uint32 data_size0 = 1;
  bool has_data_size0() const;
  void clear_data_size0() ;
  ::uint32_t data_size0() const;
  void set_data_size0(::uint32_t value);

  private:
  ::uint32_t _internal_data_size0() const;
  void _internal_set_data_size0(::uint32_t value);

  public:
  // optional uint32 data_size1 = 2;
  bool has_data_size1() const;
  void clear_data_size1() ;
  ::uint32_t data_size1() const;
  void set_data_size1(::uint32_t value);

  private:
  ::uint32_t _internal_data_size1() const;
  void _internal_set_data_size1(::uint32_t value);

  public:
  // optional uint32 data_size2 = 3;
  bool has_data_size2() const;
  void clear_data_size2() ;
  ::uint32_t data_size2() const;
  void set_data_size2(::uint32_t value);

  private:
  ::uint32_t _internal_data_size2() const;
  void _internal_set_data_size2(::uint32_t value);

  public:
  // optional uint32 data_size3 = 4;
  bool has_data_size3() const;
  void clear_data_size3() ;
  ::uint32_t data_size3() const;
  void set_data_size3(::uint32_t value);

  private:
  ::uint32_t _internal_data_size3() const;
  void _internal_set_data_size3(::uint32_t value);

  public:
  // optional uint32 queue_type = 5;
  bool has_queue_type() const;
  void clear_queue_type() ;
  ::uint32_t queue_type() const;
  void set_queue_type(::uint32_t value);

  private:
  ::uint32_t _internal_queue_type() const;
  void _internal_set_queue_type(::uint32_t value);

  public:
  // optional int32 resource_id = 6;
  bool has_resource_id() const;
  void clear_resource_id() ;
  ::int32_t resource_id() const;
  void set_resource_id(::int32_t value);

  private:
  ::int32_t _internal_resource_id() const;
  void _internal_set_resource_id(::int32_t value);

  public:
  // optional uint64 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional int32 stream_id = 7;
  bool has_stream_id() const;
  void clear_stream_id() ;
  ::int32_t stream_id() const;
  void set_stream_id(::int32_t value);

  private:
  ::int32_t _internal_stream_id() const;
  void _internal_set_stream_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VirtioVideoResourceQueueFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t data_size0_;
    ::uint32_t data_size1_;
    ::uint32_t data_size2_;
    ::uint32_t data_size3_;
    ::uint32_t queue_type_;
    ::int32_t resource_id_;
    ::uint64_t timestamp_;
    ::int32_t stream_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto;
};// -------------------------------------------------------------------

class VirtioVideoResourceQueueDoneFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent) */ {
 public:
  inline VirtioVideoResourceQueueDoneFtraceEvent() : VirtioVideoResourceQueueDoneFtraceEvent(nullptr) {}
  ~VirtioVideoResourceQueueDoneFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtioVideoResourceQueueDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtioVideoResourceQueueDoneFtraceEvent(const VirtioVideoResourceQueueDoneFtraceEvent& from);
  VirtioVideoResourceQueueDoneFtraceEvent(VirtioVideoResourceQueueDoneFtraceEvent&& from) noexcept
    : VirtioVideoResourceQueueDoneFtraceEvent() {
    *this = ::std::move(from);
  }

  inline VirtioVideoResourceQueueDoneFtraceEvent& operator=(const VirtioVideoResourceQueueDoneFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtioVideoResourceQueueDoneFtraceEvent& operator=(VirtioVideoResourceQueueDoneFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtioVideoResourceQueueDoneFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtioVideoResourceQueueDoneFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const VirtioVideoResourceQueueDoneFtraceEvent*>(
               &_VirtioVideoResourceQueueDoneFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VirtioVideoResourceQueueDoneFtraceEvent& a, VirtioVideoResourceQueueDoneFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtioVideoResourceQueueDoneFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtioVideoResourceQueueDoneFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtioVideoResourceQueueDoneFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtioVideoResourceQueueDoneFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtioVideoResourceQueueDoneFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtioVideoResourceQueueDoneFtraceEvent& from) {
    VirtioVideoResourceQueueDoneFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtioVideoResourceQueueDoneFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent";
  }
  protected:
  explicit VirtioVideoResourceQueueDoneFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSize0FieldNumber = 1,
    kDataSize1FieldNumber = 2,
    kDataSize2FieldNumber = 3,
    kDataSize3FieldNumber = 4,
    kQueueTypeFieldNumber = 5,
    kResourceIdFieldNumber = 6,
    kTimestampFieldNumber = 8,
    kStreamIdFieldNumber = 7,
  };
  // optional uint32 data_size0 = 1;
  bool has_data_size0() const;
  void clear_data_size0() ;
  ::uint32_t data_size0() const;
  void set_data_size0(::uint32_t value);

  private:
  ::uint32_t _internal_data_size0() const;
  void _internal_set_data_size0(::uint32_t value);

  public:
  // optional uint32 data_size1 = 2;
  bool has_data_size1() const;
  void clear_data_size1() ;
  ::uint32_t data_size1() const;
  void set_data_size1(::uint32_t value);

  private:
  ::uint32_t _internal_data_size1() const;
  void _internal_set_data_size1(::uint32_t value);

  public:
  // optional uint32 data_size2 = 3;
  bool has_data_size2() const;
  void clear_data_size2() ;
  ::uint32_t data_size2() const;
  void set_data_size2(::uint32_t value);

  private:
  ::uint32_t _internal_data_size2() const;
  void _internal_set_data_size2(::uint32_t value);

  public:
  // optional uint32 data_size3 = 4;
  bool has_data_size3() const;
  void clear_data_size3() ;
  ::uint32_t data_size3() const;
  void set_data_size3(::uint32_t value);

  private:
  ::uint32_t _internal_data_size3() const;
  void _internal_set_data_size3(::uint32_t value);

  public:
  // optional uint32 queue_type = 5;
  bool has_queue_type() const;
  void clear_queue_type() ;
  ::uint32_t queue_type() const;
  void set_queue_type(::uint32_t value);

  private:
  ::uint32_t _internal_queue_type() const;
  void _internal_set_queue_type(::uint32_t value);

  public:
  // optional int32 resource_id = 6;
  bool has_resource_id() const;
  void clear_resource_id() ;
  ::int32_t resource_id() const;
  void set_resource_id(::int32_t value);

  private:
  ::int32_t _internal_resource_id() const;
  void _internal_set_resource_id(::int32_t value);

  public:
  // optional uint64 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // optional int32 stream_id = 7;
  bool has_stream_id() const;
  void clear_stream_id() ;
  ::int32_t stream_id() const;
  void set_stream_id(::int32_t value);

  private:
  ::int32_t _internal_stream_id() const;
  void _internal_set_stream_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t data_size0_;
    ::uint32_t data_size1_;
    ::uint32_t data_size2_;
    ::uint32_t data_size3_;
    ::uint32_t queue_type_;
    ::int32_t resource_id_;
    ::uint64_t timestamp_;
    ::int32_t stream_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VirtioVideoCmdFtraceEvent

// optional uint32 stream_id = 1;
inline bool VirtioVideoCmdFtraceEvent::has_stream_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VirtioVideoCmdFtraceEvent::clear_stream_id() {
  _impl_.stream_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t VirtioVideoCmdFtraceEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoCmdFtraceEvent.stream_id)
  return _internal_stream_id();
}
inline void VirtioVideoCmdFtraceEvent::set_stream_id(::uint32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoCmdFtraceEvent.stream_id)
}
inline ::uint32_t VirtioVideoCmdFtraceEvent::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline void VirtioVideoCmdFtraceEvent::_internal_set_stream_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_ = value;
}

// optional uint32 type = 2;
inline bool VirtioVideoCmdFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VirtioVideoCmdFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VirtioVideoCmdFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoCmdFtraceEvent.type)
  return _internal_type();
}
inline void VirtioVideoCmdFtraceEvent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoCmdFtraceEvent.type)
}
inline ::uint32_t VirtioVideoCmdFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void VirtioVideoCmdFtraceEvent::_internal_set_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// VirtioVideoCmdDoneFtraceEvent

// optional uint32 stream_id = 1;
inline bool VirtioVideoCmdDoneFtraceEvent::has_stream_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VirtioVideoCmdDoneFtraceEvent::clear_stream_id() {
  _impl_.stream_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t VirtioVideoCmdDoneFtraceEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoCmdDoneFtraceEvent.stream_id)
  return _internal_stream_id();
}
inline void VirtioVideoCmdDoneFtraceEvent::set_stream_id(::uint32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoCmdDoneFtraceEvent.stream_id)
}
inline ::uint32_t VirtioVideoCmdDoneFtraceEvent::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline void VirtioVideoCmdDoneFtraceEvent::_internal_set_stream_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_ = value;
}

// optional uint32 type = 2;
inline bool VirtioVideoCmdDoneFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VirtioVideoCmdDoneFtraceEvent::clear_type() {
  _impl_.type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VirtioVideoCmdDoneFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoCmdDoneFtraceEvent.type)
  return _internal_type();
}
inline void VirtioVideoCmdDoneFtraceEvent::set_type(::uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoCmdDoneFtraceEvent.type)
}
inline ::uint32_t VirtioVideoCmdDoneFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void VirtioVideoCmdDoneFtraceEvent::_internal_set_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// VirtioVideoResourceQueueFtraceEvent

// optional uint32 data_size0 = 1;
inline bool VirtioVideoResourceQueueFtraceEvent::has_data_size0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_data_size0() {
  _impl_.data_size0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::data_size0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size0)
  return _internal_data_size0();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_data_size0(::uint32_t value) {
  _internal_set_data_size0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size0)
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::_internal_data_size0() const {
  return _impl_.data_size0_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_data_size0(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_size0_ = value;
}

// optional uint32 data_size1 = 2;
inline bool VirtioVideoResourceQueueFtraceEvent::has_data_size1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_data_size1() {
  _impl_.data_size1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::data_size1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size1)
  return _internal_data_size1();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_data_size1(::uint32_t value) {
  _internal_set_data_size1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size1)
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::_internal_data_size1() const {
  return _impl_.data_size1_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_data_size1(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_size1_ = value;
}

// optional uint32 data_size2 = 3;
inline bool VirtioVideoResourceQueueFtraceEvent::has_data_size2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_data_size2() {
  _impl_.data_size2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::data_size2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size2)
  return _internal_data_size2();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_data_size2(::uint32_t value) {
  _internal_set_data_size2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size2)
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::_internal_data_size2() const {
  return _impl_.data_size2_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_data_size2(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_size2_ = value;
}

// optional uint32 data_size3 = 4;
inline bool VirtioVideoResourceQueueFtraceEvent::has_data_size3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_data_size3() {
  _impl_.data_size3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::data_size3() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size3)
  return _internal_data_size3();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_data_size3(::uint32_t value) {
  _internal_set_data_size3(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.data_size3)
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::_internal_data_size3() const {
  return _impl_.data_size3_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_data_size3(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_size3_ = value;
}

// optional uint32 queue_type = 5;
inline bool VirtioVideoResourceQueueFtraceEvent::has_queue_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_queue_type() {
  _impl_.queue_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::queue_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.queue_type)
  return _internal_queue_type();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_queue_type(::uint32_t value) {
  _internal_set_queue_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.queue_type)
}
inline ::uint32_t VirtioVideoResourceQueueFtraceEvent::_internal_queue_type() const {
  return _impl_.queue_type_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_queue_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.queue_type_ = value;
}

// optional int32 resource_id = 6;
inline bool VirtioVideoResourceQueueFtraceEvent::has_resource_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_resource_id() {
  _impl_.resource_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t VirtioVideoResourceQueueFtraceEvent::resource_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.resource_id)
  return _internal_resource_id();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_resource_id(::int32_t value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.resource_id)
}
inline ::int32_t VirtioVideoResourceQueueFtraceEvent::_internal_resource_id() const {
  return _impl_.resource_id_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_resource_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.resource_id_ = value;
}

// optional int32 stream_id = 7;
inline bool VirtioVideoResourceQueueFtraceEvent::has_stream_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_stream_id() {
  _impl_.stream_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t VirtioVideoResourceQueueFtraceEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.stream_id)
  return _internal_stream_id();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_stream_id(::int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.stream_id)
}
inline ::int32_t VirtioVideoResourceQueueFtraceEvent::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_stream_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.stream_id_ = value;
}

// optional uint64 timestamp = 8;
inline bool VirtioVideoResourceQueueFtraceEvent::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t VirtioVideoResourceQueueFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void VirtioVideoResourceQueueFtraceEvent::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueFtraceEvent.timestamp)
}
inline ::uint64_t VirtioVideoResourceQueueFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void VirtioVideoResourceQueueFtraceEvent::_internal_set_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// VirtioVideoResourceQueueDoneFtraceEvent

// optional uint32 data_size0 = 1;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_data_size0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_data_size0() {
  _impl_.data_size0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::data_size0() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size0)
  return _internal_data_size0();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_data_size0(::uint32_t value) {
  _internal_set_data_size0(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size0)
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_data_size0() const {
  return _impl_.data_size0_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_data_size0(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_size0_ = value;
}

// optional uint32 data_size1 = 2;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_data_size1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_data_size1() {
  _impl_.data_size1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::data_size1() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size1)
  return _internal_data_size1();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_data_size1(::uint32_t value) {
  _internal_set_data_size1(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size1)
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_data_size1() const {
  return _impl_.data_size1_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_data_size1(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_size1_ = value;
}

// optional uint32 data_size2 = 3;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_data_size2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_data_size2() {
  _impl_.data_size2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::data_size2() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size2)
  return _internal_data_size2();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_data_size2(::uint32_t value) {
  _internal_set_data_size2(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size2)
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_data_size2() const {
  return _impl_.data_size2_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_data_size2(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.data_size2_ = value;
}

// optional uint32 data_size3 = 4;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_data_size3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_data_size3() {
  _impl_.data_size3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::data_size3() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size3)
  return _internal_data_size3();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_data_size3(::uint32_t value) {
  _internal_set_data_size3(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.data_size3)
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_data_size3() const {
  return _impl_.data_size3_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_data_size3(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_size3_ = value;
}

// optional uint32 queue_type = 5;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_queue_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_queue_type() {
  _impl_.queue_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::queue_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.queue_type)
  return _internal_queue_type();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_queue_type(::uint32_t value) {
  _internal_set_queue_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.queue_type)
}
inline ::uint32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_queue_type() const {
  return _impl_.queue_type_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_queue_type(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.queue_type_ = value;
}

// optional int32 resource_id = 6;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_resource_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_resource_id() {
  _impl_.resource_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t VirtioVideoResourceQueueDoneFtraceEvent::resource_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.resource_id)
  return _internal_resource_id();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_resource_id(::int32_t value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.resource_id)
}
inline ::int32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_resource_id() const {
  return _impl_.resource_id_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_resource_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.resource_id_ = value;
}

// optional int32 stream_id = 7;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_stream_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_stream_id() {
  _impl_.stream_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t VirtioVideoResourceQueueDoneFtraceEvent::stream_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.stream_id)
  return _internal_stream_id();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_stream_id(::int32_t value) {
  _internal_set_stream_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.stream_id)
}
inline ::int32_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_stream_id() const {
  return _impl_.stream_id_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_stream_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.stream_id_ = value;
}

// optional uint64 timestamp = 8;
inline bool VirtioVideoResourceQueueDoneFtraceEvent::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t VirtioVideoResourceQueueDoneFtraceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.timestamp)
  return _internal_timestamp();
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.VirtioVideoResourceQueueDoneFtraceEvent.timestamp)
}
inline ::uint64_t VirtioVideoResourceQueueDoneFtraceEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void VirtioVideoResourceQueueDoneFtraceEvent::_internal_set_timestamp(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fvirtio_5fvideo_2eproto_2epb_2eh
