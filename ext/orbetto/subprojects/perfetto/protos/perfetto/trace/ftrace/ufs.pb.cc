// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ufs.proto

#include "protos/perfetto/trace/ftrace/ufs.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dev_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.str_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.doorbell_)*/ 0u

  , /*decltype(_impl_.intr_)*/ 0u

  , /*decltype(_impl_.lba_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.opcode_)*/ 0u

  , /*decltype(_impl_.tag_)*/ 0u

  , /*decltype(_impl_.transfer_len_)*/ 0

  , /*decltype(_impl_.group_id_)*/ 0u

  , /*decltype(_impl_.str_t_)*/ 0u
} {}
struct UfshcdCommandFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UfshcdCommandFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UfshcdCommandFtraceEventDefaultTypeInternal() {}
  union {
    UfshcdCommandFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UfshcdCommandFtraceEventDefaultTypeInternal _UfshcdCommandFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dev_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ 0
} {}
struct UfshcdClkGatingFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UfshcdClkGatingFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UfshcdClkGatingFtraceEventDefaultTypeInternal() {}
  union {
    UfshcdClkGatingFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UfshcdClkGatingFtraceEventDefaultTypeInternal _UfshcdClkGatingFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.dev_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.doorbell_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.intr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.lba_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.opcode_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.str_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.transfer_len_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdCommandFtraceEvent, _impl_.str_t_),
    0,
    2,
    3,
    4,
    5,
    1,
    6,
    7,
    8,
    9,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdClkGatingFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdClkGatingFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdClkGatingFtraceEvent, _impl_.dev_name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::UfshcdClkGatingFtraceEvent, _impl_.state_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 18, -1, sizeof(::perfetto::protos::UfshcdCommandFtraceEvent)},
        { 28, 38, -1, sizeof(::perfetto::protos::UfshcdClkGatingFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_UfshcdCommandFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_UfshcdClkGatingFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/ftrace/ufs.proto"
    "\022\017perfetto.protos\"\272\001\n\030UfshcdCommandFtrac"
    "eEvent\022\020\n\010dev_name\030\001 \001(\t\022\020\n\010doorbell\030\002 \001"
    "(\r\022\014\n\004intr\030\003 \001(\r\022\013\n\003lba\030\004 \001(\004\022\016\n\006opcode\030"
    "\005 \001(\r\022\013\n\003str\030\006 \001(\t\022\013\n\003tag\030\007 \001(\r\022\024\n\014trans"
    "fer_len\030\010 \001(\005\022\020\n\010group_id\030\t \001(\r\022\r\n\005str_t"
    "\030\n \001(\r\"=\n\032UfshcdClkGatingFtraceEvent\022\020\n\010"
    "dev_name\030\001 \001(\t\022\r\n\005state\030\002 \001(\005"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto = {
    false,
    false,
    309,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto,
    "protos/perfetto/trace/ftrace/ufs.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class UfshcdCommandFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<UfshcdCommandFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UfshcdCommandFtraceEvent, _impl_._has_bits_);
  static void set_has_dev_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_doorbell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_intr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lba(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_transfer_len(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_str_t(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.UfshcdCommandFtraceEvent)
}
UfshcdCommandFtraceEvent::UfshcdCommandFtraceEvent(const UfshcdCommandFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UfshcdCommandFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_name_) {}

    , decltype(_impl_.str_) {}

    , decltype(_impl_.doorbell_) {}

    , decltype(_impl_.intr_) {}

    , decltype(_impl_.lba_) {}

    , decltype(_impl_.opcode_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.transfer_len_) {}

    , decltype(_impl_.group_id_) {}

    , decltype(_impl_.str_t_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dev_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dev_name_.Set(from._internal_dev_name(), _this->GetArenaForAllocation());
  }
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.str_.Set(from._internal_str(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.doorbell_, &from._impl_.doorbell_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.str_t_) -
    reinterpret_cast<char*>(&_impl_.doorbell_)) + sizeof(_impl_.str_t_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.UfshcdCommandFtraceEvent)
}

inline void UfshcdCommandFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_name_) {}

    , decltype(_impl_.str_) {}

    , decltype(_impl_.doorbell_) { 0u }

    , decltype(_impl_.intr_) { 0u }

    , decltype(_impl_.lba_) { ::uint64_t{0u} }

    , decltype(_impl_.opcode_) { 0u }

    , decltype(_impl_.tag_) { 0u }

    , decltype(_impl_.transfer_len_) { 0 }

    , decltype(_impl_.group_id_) { 0u }

    , decltype(_impl_.str_t_) { 0u }

  };
  _impl_.dev_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dev_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UfshcdCommandFtraceEvent::~UfshcdCommandFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.UfshcdCommandFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UfshcdCommandFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_name_.Destroy();
  _impl_.str_.Destroy();
}

void UfshcdCommandFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UfshcdCommandFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.UfshcdCommandFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dev_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.doorbell_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.transfer_len_) -
        reinterpret_cast<char*>(&_impl_.doorbell_)) + sizeof(_impl_.transfer_len_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.group_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.str_t_) -
        reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.str_t_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UfshcdCommandFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string dev_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.UfshcdCommandFtraceEvent.dev_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 doorbell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_doorbell(&has_bits);
          _impl_.doorbell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 intr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_intr(&has_bits);
          _impl_.intr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 lba = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_lba(&has_bits);
          _impl_.lba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 opcode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_opcode(&has_bits);
          _impl_.opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string str = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.UfshcdCommandFtraceEvent.str");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_tag(&has_bits);
          _impl_.tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 transfer_len = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_transfer_len(&has_bits);
          _impl_.transfer_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 group_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_group_id(&has_bits);
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 str_t = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_str_t(&has_bits);
          _impl_.str_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UfshcdCommandFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.UfshcdCommandFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string dev_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_dev_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.UfshcdCommandFtraceEvent.dev_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 doorbell = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_doorbell(), target);
  }

  // optional uint32 intr = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_intr(), target);
  }

  // optional uint64 lba = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_lba(), target);
  }

  // optional uint32 opcode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_opcode(), target);
  }

  // optional string str = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_str();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.UfshcdCommandFtraceEvent.str");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional uint32 tag = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_tag(), target);
  }

  // optional int32 transfer_len = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        8, this->_internal_transfer_len(), target);
  }

  // optional uint32 group_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_group_id(), target);
  }

  // optional uint32 str_t = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_str_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.UfshcdCommandFtraceEvent)
  return target;
}

::size_t UfshcdCommandFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.UfshcdCommandFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string dev_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dev_name());
    }

    // optional string str = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_str());
    }

    // optional uint32 doorbell = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_doorbell());
    }

    // optional uint32 intr = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_intr());
    }

    // optional uint64 lba = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_lba());
    }

    // optional uint32 opcode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_opcode());
    }

    // optional uint32 tag = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tag());
    }

    // optional int32 transfer_len = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_transfer_len());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 group_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_group_id());
    }

    // optional uint32 str_t = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_str_t());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UfshcdCommandFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UfshcdCommandFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UfshcdCommandFtraceEvent::GetClassData() const { return &_class_data_; }


void UfshcdCommandFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UfshcdCommandFtraceEvent*>(&to_msg);
  auto& from = static_cast<const UfshcdCommandFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.UfshcdCommandFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dev_name(from._internal_dev_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_str(from._internal_str());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.doorbell_ = from._impl_.doorbell_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.intr_ = from._impl_.intr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lba_ = from._impl_.lba_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.opcode_ = from._impl_.opcode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tag_ = from._impl_.tag_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.transfer_len_ = from._impl_.transfer_len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.group_id_ = from._impl_.group_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.str_t_ = from._impl_.str_t_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UfshcdCommandFtraceEvent::CopyFrom(const UfshcdCommandFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.UfshcdCommandFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UfshcdCommandFtraceEvent::IsInitialized() const {
  return true;
}

void UfshcdCommandFtraceEvent::InternalSwap(UfshcdCommandFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dev_name_, lhs_arena,
                                       &other->_impl_.dev_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.str_, lhs_arena,
                                       &other->_impl_.str_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UfshcdCommandFtraceEvent, _impl_.str_t_)
      + sizeof(UfshcdCommandFtraceEvent::_impl_.str_t_)
      - PROTOBUF_FIELD_OFFSET(UfshcdCommandFtraceEvent, _impl_.doorbell_)>(
          reinterpret_cast<char*>(&_impl_.doorbell_),
          reinterpret_cast<char*>(&other->_impl_.doorbell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UfshcdCommandFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto[0]);
}
// ===================================================================

class UfshcdClkGatingFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<UfshcdClkGatingFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UfshcdClkGatingFtraceEvent, _impl_._has_bits_);
  static void set_has_dev_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.UfshcdClkGatingFtraceEvent)
}
UfshcdClkGatingFtraceEvent::UfshcdClkGatingFtraceEvent(const UfshcdClkGatingFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UfshcdClkGatingFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_name_) {}

    , decltype(_impl_.state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dev_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dev_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dev_name_.Set(from._internal_dev_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.UfshcdClkGatingFtraceEvent)
}

inline void UfshcdClkGatingFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dev_name_) {}

    , decltype(_impl_.state_) { 0 }

  };
  _impl_.dev_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dev_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UfshcdClkGatingFtraceEvent::~UfshcdClkGatingFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.UfshcdClkGatingFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UfshcdClkGatingFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dev_name_.Destroy();
}

void UfshcdClkGatingFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UfshcdClkGatingFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.dev_name_.ClearNonDefaultToEmpty();
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UfshcdClkGatingFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string dev_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dev_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UfshcdClkGatingFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string dev_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_dev_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.UfshcdClkGatingFtraceEvent.dev_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.UfshcdClkGatingFtraceEvent)
  return target;
}

::size_t UfshcdClkGatingFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string dev_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dev_name());
    }

    // optional int32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UfshcdClkGatingFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UfshcdClkGatingFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UfshcdClkGatingFtraceEvent::GetClassData() const { return &_class_data_; }


void UfshcdClkGatingFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UfshcdClkGatingFtraceEvent*>(&to_msg);
  auto& from = static_cast<const UfshcdClkGatingFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_dev_name(from._internal_dev_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UfshcdClkGatingFtraceEvent::CopyFrom(const UfshcdClkGatingFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.UfshcdClkGatingFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UfshcdClkGatingFtraceEvent::IsInitialized() const {
  return true;
}

void UfshcdClkGatingFtraceEvent::InternalSwap(UfshcdClkGatingFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dev_name_, lhs_arena,
                                       &other->_impl_.dev_name_, rhs_arena);

  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UfshcdClkGatingFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fufs_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::UfshcdCommandFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::UfshcdCommandFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::UfshcdCommandFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::UfshcdClkGatingFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::UfshcdClkGatingFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::UfshcdClkGatingFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
