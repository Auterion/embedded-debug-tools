// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "protos/perfetto/trace/ftrace/ftrace_event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
namespace perfetto {
namespace protos {
class FtraceEventBundle;
struct FtraceEventBundleDefaultTypeInternal;
extern FtraceEventBundleDefaultTypeInternal _FtraceEventBundle_default_instance_;
class FtraceEventBundle_CompactSched;
struct FtraceEventBundle_CompactSchedDefaultTypeInternal;
extern FtraceEventBundle_CompactSchedDefaultTypeInternal _FtraceEventBundle_CompactSched_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::FtraceEventBundle* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle>(Arena*);
template <>
::perfetto::protos::FtraceEventBundle_CompactSched* Arena::CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_CompactSched>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {
enum FtraceClock : int {
  FTRACE_CLOCK_UNSPECIFIED = 0,
  FTRACE_CLOCK_UNKNOWN = 1,
  FTRACE_CLOCK_GLOBAL = 2,
  FTRACE_CLOCK_LOCAL = 3,
  FTRACE_CLOCK_MONO_RAW = 4,
};

bool FtraceClock_IsValid(int value);
constexpr FtraceClock FtraceClock_MIN = static_cast<FtraceClock>(0);
constexpr FtraceClock FtraceClock_MAX = static_cast<FtraceClock>(4);
constexpr int FtraceClock_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FtraceClock_descriptor();
template <typename T>
const std::string& FtraceClock_Name(T value) {
  static_assert(std::is_same<T, FtraceClock>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FtraceClock_Name().");
  return FtraceClock_Name(static_cast<FtraceClock>(value));
}
template <>
inline const std::string& FtraceClock_Name(FtraceClock value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FtraceClock_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool FtraceClock_Parse(absl::string_view name, FtraceClock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FtraceClock>(
      FtraceClock_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FtraceEventBundle_CompactSched final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle.CompactSched) */ {
 public:
  inline FtraceEventBundle_CompactSched() : FtraceEventBundle_CompactSched(nullptr) {}
  ~FtraceEventBundle_CompactSched() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceEventBundle_CompactSched(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched& from);
  FtraceEventBundle_CompactSched(FtraceEventBundle_CompactSched&& from) noexcept
    : FtraceEventBundle_CompactSched() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle_CompactSched& operator=(const FtraceEventBundle_CompactSched& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle_CompactSched& operator=(FtraceEventBundle_CompactSched&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceEventBundle_CompactSched& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceEventBundle_CompactSched* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle_CompactSched*>(
               &_FtraceEventBundle_CompactSched_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtraceEventBundle_CompactSched& a, FtraceEventBundle_CompactSched& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceEventBundle_CompactSched* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceEventBundle_CompactSched* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceEventBundle_CompactSched* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceEventBundle_CompactSched>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceEventBundle_CompactSched& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceEventBundle_CompactSched& from) {
    FtraceEventBundle_CompactSched::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceEventBundle_CompactSched* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceEventBundle.CompactSched";
  }
  protected:
  explicit FtraceEventBundle_CompactSched(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchTimestampFieldNumber = 1,
    kSwitchPrevStateFieldNumber = 2,
    kSwitchNextPidFieldNumber = 3,
    kSwitchNextPrioFieldNumber = 4,
    kInternTableFieldNumber = 5,
    kSwitchNextCommIndexFieldNumber = 6,
    kWakingTimestampFieldNumber = 7,
    kWakingPidFieldNumber = 8,
    kWakingTargetCpuFieldNumber = 9,
    kWakingPrioFieldNumber = 10,
    kWakingCommIndexFieldNumber = 11,
    kWakingCommonFlagsFieldNumber = 12,
  };
  // repeated uint64 switch_timestamp = 1 [packed = true];
  int switch_timestamp_size() const;
  private:
  int _internal_switch_timestamp_size() const;

  public:
  void clear_switch_timestamp() ;
  ::uint64_t switch_timestamp(int index) const;
  void set_switch_timestamp(int index, ::uint64_t value);
  void add_switch_timestamp(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& switch_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_switch_timestamp();

  private:
  ::uint64_t _internal_switch_timestamp(int index) const;
  void _internal_add_switch_timestamp(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_switch_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_switch_timestamp();

  public:
  // repeated int64 switch_prev_state = 2 [packed = true];
  int switch_prev_state_size() const;
  private:
  int _internal_switch_prev_state_size() const;

  public:
  void clear_switch_prev_state() ;
  ::int64_t switch_prev_state(int index) const;
  void set_switch_prev_state(int index, ::int64_t value);
  void add_switch_prev_state(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& switch_prev_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_switch_prev_state();

  private:
  ::int64_t _internal_switch_prev_state(int index) const;
  void _internal_add_switch_prev_state(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_switch_prev_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_switch_prev_state();

  public:
  // repeated int32 switch_next_pid = 3 [packed = true];
  int switch_next_pid_size() const;
  private:
  int _internal_switch_next_pid_size() const;

  public:
  void clear_switch_next_pid() ;
  ::int32_t switch_next_pid(int index) const;
  void set_switch_next_pid(int index, ::int32_t value);
  void add_switch_next_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& switch_next_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_switch_next_pid();

  private:
  ::int32_t _internal_switch_next_pid(int index) const;
  void _internal_add_switch_next_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_switch_next_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_switch_next_pid();

  public:
  // repeated int32 switch_next_prio = 4 [packed = true];
  int switch_next_prio_size() const;
  private:
  int _internal_switch_next_prio_size() const;

  public:
  void clear_switch_next_prio() ;
  ::int32_t switch_next_prio(int index) const;
  void set_switch_next_prio(int index, ::int32_t value);
  void add_switch_next_prio(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& switch_next_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_switch_next_prio();

  private:
  ::int32_t _internal_switch_next_prio(int index) const;
  void _internal_add_switch_next_prio(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_switch_next_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_switch_next_prio();

  public:
  // repeated string intern_table = 5;
  int intern_table_size() const;
  private:
  int _internal_intern_table_size() const;

  public:
  void clear_intern_table() ;
  const std::string& intern_table(int index) const;
  std::string* mutable_intern_table(int index);
  void set_intern_table(int index, const std::string& value);
  void set_intern_table(int index, std::string&& value);
  void set_intern_table(int index, const char* value);
  void set_intern_table(int index, const char* value, std::size_t size);
  void set_intern_table(int index, absl::string_view value);
  std::string* add_intern_table();
  void add_intern_table(const std::string& value);
  void add_intern_table(std::string&& value);
  void add_intern_table(const char* value);
  void add_intern_table(const char* value, std::size_t size);
  void add_intern_table(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intern_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intern_table();

  private:
  const std::string& _internal_intern_table(int index) const;
  std::string* _internal_add_intern_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_intern_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_intern_table();

  public:
  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  int switch_next_comm_index_size() const;
  private:
  int _internal_switch_next_comm_index_size() const;

  public:
  void clear_switch_next_comm_index() ;
  ::uint32_t switch_next_comm_index(int index) const;
  void set_switch_next_comm_index(int index, ::uint32_t value);
  void add_switch_next_comm_index(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& switch_next_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_switch_next_comm_index();

  private:
  ::uint32_t _internal_switch_next_comm_index(int index) const;
  void _internal_add_switch_next_comm_index(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_switch_next_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_switch_next_comm_index();

  public:
  // repeated uint64 waking_timestamp = 7 [packed = true];
  int waking_timestamp_size() const;
  private:
  int _internal_waking_timestamp_size() const;

  public:
  void clear_waking_timestamp() ;
  ::uint64_t waking_timestamp(int index) const;
  void set_waking_timestamp(int index, ::uint64_t value);
  void add_waking_timestamp(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& waking_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_waking_timestamp();

  private:
  ::uint64_t _internal_waking_timestamp(int index) const;
  void _internal_add_waking_timestamp(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_waking_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_waking_timestamp();

  public:
  // repeated int32 waking_pid = 8 [packed = true];
  int waking_pid_size() const;
  private:
  int _internal_waking_pid_size() const;

  public:
  void clear_waking_pid() ;
  ::int32_t waking_pid(int index) const;
  void set_waking_pid(int index, ::int32_t value);
  void add_waking_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& waking_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_waking_pid();

  private:
  ::int32_t _internal_waking_pid(int index) const;
  void _internal_add_waking_pid(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_waking_pid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_waking_pid();

  public:
  // repeated int32 waking_target_cpu = 9 [packed = true];
  int waking_target_cpu_size() const;
  private:
  int _internal_waking_target_cpu_size() const;

  public:
  void clear_waking_target_cpu() ;
  ::int32_t waking_target_cpu(int index) const;
  void set_waking_target_cpu(int index, ::int32_t value);
  void add_waking_target_cpu(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& waking_target_cpu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_waking_target_cpu();

  private:
  ::int32_t _internal_waking_target_cpu(int index) const;
  void _internal_add_waking_target_cpu(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_waking_target_cpu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_waking_target_cpu();

  public:
  // repeated int32 waking_prio = 10 [packed = true];
  int waking_prio_size() const;
  private:
  int _internal_waking_prio_size() const;

  public:
  void clear_waking_prio() ;
  ::int32_t waking_prio(int index) const;
  void set_waking_prio(int index, ::int32_t value);
  void add_waking_prio(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& waking_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_waking_prio();

  private:
  ::int32_t _internal_waking_prio(int index) const;
  void _internal_add_waking_prio(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_waking_prio() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_waking_prio();

  public:
  // repeated uint32 waking_comm_index = 11 [packed = true];
  int waking_comm_index_size() const;
  private:
  int _internal_waking_comm_index_size() const;

  public:
  void clear_waking_comm_index() ;
  ::uint32_t waking_comm_index(int index) const;
  void set_waking_comm_index(int index, ::uint32_t value);
  void add_waking_comm_index(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& waking_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_waking_comm_index();

  private:
  ::uint32_t _internal_waking_comm_index(int index) const;
  void _internal_add_waking_comm_index(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_waking_comm_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_waking_comm_index();

  public:
  // repeated uint32 waking_common_flags = 12 [packed = true];
  int waking_common_flags_size() const;
  private:
  int _internal_waking_common_flags_size() const;

  public:
  void clear_waking_common_flags() ;
  ::uint32_t waking_common_flags(int index) const;
  void set_waking_common_flags(int index, ::uint32_t value);
  void add_waking_common_flags(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& waking_common_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_waking_common_flags();

  private:
  ::uint32_t _internal_waking_common_flags(int index) const;
  void _internal_add_waking_common_flags(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_waking_common_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_waking_common_flags();

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle.CompactSched)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> switch_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _switch_timestamp_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> switch_prev_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _switch_prev_state_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> switch_next_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _switch_next_pid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> switch_next_prio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _switch_next_prio_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intern_table_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> switch_next_comm_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _switch_next_comm_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> waking_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _waking_timestamp_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> waking_pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _waking_pid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> waking_target_cpu_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _waking_target_cpu_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> waking_prio_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _waking_prio_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> waking_comm_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _waking_comm_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> waking_common_flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _waking_common_flags_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};// -------------------------------------------------------------------

class FtraceEventBundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FtraceEventBundle) */ {
 public:
  inline FtraceEventBundle() : FtraceEventBundle(nullptr) {}
  ~FtraceEventBundle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FtraceEventBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtraceEventBundle(const FtraceEventBundle& from);
  FtraceEventBundle(FtraceEventBundle&& from) noexcept
    : FtraceEventBundle() {
    *this = ::std::move(from);
  }

  inline FtraceEventBundle& operator=(const FtraceEventBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtraceEventBundle& operator=(FtraceEventBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtraceEventBundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtraceEventBundle* internal_default_instance() {
    return reinterpret_cast<const FtraceEventBundle*>(
               &_FtraceEventBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtraceEventBundle& a, FtraceEventBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(FtraceEventBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtraceEventBundle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtraceEventBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtraceEventBundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtraceEventBundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtraceEventBundle& from) {
    FtraceEventBundle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtraceEventBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FtraceEventBundle";
  }
  protected:
  explicit FtraceEventBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FtraceEventBundle_CompactSched CompactSched;

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kCompactSchedFieldNumber = 4,
    kCpuFieldNumber = 1,
    kLostEventsFieldNumber = 3,
    kFtraceTimestampFieldNumber = 6,
    kBootTimestampFieldNumber = 7,
    kFtraceClockFieldNumber = 5,
  };
  // repeated .perfetto.protos.FtraceEvent event = 2;
  int event_size() const;
  private:
  int _internal_event_size() const;

  public:
  void clear_event() ;
  ::perfetto::protos::FtraceEvent* mutable_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >*
      mutable_event();
  private:
  const ::perfetto::protos::FtraceEvent& _internal_event(int index) const;
  ::perfetto::protos::FtraceEvent* _internal_add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceEvent>& _internal_event() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceEvent>* _internal_mutable_event();
  public:
  const ::perfetto::protos::FtraceEvent& event(int index) const;
  ::perfetto::protos::FtraceEvent* add_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >&
      event() const;
  // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
  bool has_compact_sched() const;
  void clear_compact_sched() ;
  const ::perfetto::protos::FtraceEventBundle_CompactSched& compact_sched() const;
  PROTOBUF_NODISCARD ::perfetto::protos::FtraceEventBundle_CompactSched* release_compact_sched();
  ::perfetto::protos::FtraceEventBundle_CompactSched* mutable_compact_sched();
  void set_allocated_compact_sched(::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched);
  private:
  const ::perfetto::protos::FtraceEventBundle_CompactSched& _internal_compact_sched() const;
  ::perfetto::protos::FtraceEventBundle_CompactSched* _internal_mutable_compact_sched();
  public:
  void unsafe_arena_set_allocated_compact_sched(
      ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched);
  ::perfetto::protos::FtraceEventBundle_CompactSched* unsafe_arena_release_compact_sched();
  // optional uint32 cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  ::uint32_t cpu() const;
  void set_cpu(::uint32_t value);

  private:
  ::uint32_t _internal_cpu() const;
  void _internal_set_cpu(::uint32_t value);

  public:
  // optional bool lost_events = 3;
  bool has_lost_events() const;
  void clear_lost_events() ;
  bool lost_events() const;
  void set_lost_events(bool value);

  private:
  bool _internal_lost_events() const;
  void _internal_set_lost_events(bool value);

  public:
  // optional int64 ftrace_timestamp = 6;
  bool has_ftrace_timestamp() const;
  void clear_ftrace_timestamp() ;
  ::int64_t ftrace_timestamp() const;
  void set_ftrace_timestamp(::int64_t value);

  private:
  ::int64_t _internal_ftrace_timestamp() const;
  void _internal_set_ftrace_timestamp(::int64_t value);

  public:
  // optional int64 boot_timestamp = 7;
  bool has_boot_timestamp() const;
  void clear_boot_timestamp() ;
  ::int64_t boot_timestamp() const;
  void set_boot_timestamp(::int64_t value);

  private:
  ::int64_t _internal_boot_timestamp() const;
  void _internal_set_boot_timestamp(::int64_t value);

  public:
  // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
  bool has_ftrace_clock() const;
  void clear_ftrace_clock() ;
  ::perfetto::protos::FtraceClock ftrace_clock() const;
  void set_ftrace_clock(::perfetto::protos::FtraceClock value);

  private:
  ::perfetto::protos::FtraceClock _internal_ftrace_clock() const;
  void _internal_set_ftrace_clock(::perfetto::protos::FtraceClock value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FtraceEventBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent > event_;
    ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched_;
    ::uint32_t cpu_;
    bool lost_events_;
    ::int64_t ftrace_timestamp_;
    ::int64_t boot_timestamp_;
    int ftrace_clock_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FtraceEventBundle_CompactSched

// repeated string intern_table = 5;
inline int FtraceEventBundle_CompactSched::_internal_intern_table_size() const {
  return _impl_.intern_table_.size();
}
inline int FtraceEventBundle_CompactSched::intern_table_size() const {
  return _internal_intern_table_size();
}
inline void FtraceEventBundle_CompactSched::clear_intern_table() {
  _internal_mutable_intern_table()->Clear();
}
inline std::string* FtraceEventBundle_CompactSched::add_intern_table() {
  std::string* _s = _internal_add_intern_table();
  // @@protoc_insertion_point(field_add_mutable:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _s;
}
inline const std::string& FtraceEventBundle_CompactSched::intern_table(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _internal_intern_table(index);
}
inline std::string* FtraceEventBundle_CompactSched::mutable_intern_table(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _internal_mutable_intern_table()->Mutable(index);
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const std::string& value) {
  _internal_mutable_intern_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, std::string&& value) {
  _internal_mutable_intern_table()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_intern_table()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_intern_table()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::set_intern_table(int index, absl::string_view value) {
  _internal_mutable_intern_table()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const std::string& value) {
  _internal_mutable_intern_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(std::string&& value) {
  _internal_mutable_intern_table()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_intern_table()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(const char* value, std::size_t size) {
  _internal_mutable_intern_table()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline void FtraceEventBundle_CompactSched::add_intern_table(absl::string_view value) {
  _internal_mutable_intern_table()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceEventBundle_CompactSched::intern_table() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _internal_intern_table();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FtraceEventBundle_CompactSched::mutable_intern_table() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.intern_table)
  return _internal_mutable_intern_table();
}
inline const std::string& FtraceEventBundle_CompactSched::_internal_intern_table(int index) const {
  return _internal_intern_table().Get(index);
}
inline std::string* FtraceEventBundle_CompactSched::_internal_add_intern_table() {
  return _internal_mutable_intern_table()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FtraceEventBundle_CompactSched::_internal_intern_table() const {
  return _impl_.intern_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FtraceEventBundle_CompactSched::_internal_mutable_intern_table() {
  return &_impl_.intern_table_;
}

// repeated uint64 switch_timestamp = 1 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_timestamp_size() const {
  return _impl_.switch_timestamp_.size();
}
inline int FtraceEventBundle_CompactSched::switch_timestamp_size() const {
  return _internal_switch_timestamp_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_timestamp() {
  _internal_mutable_switch_timestamp()->Clear();
}
inline ::uint64_t FtraceEventBundle_CompactSched::switch_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return _internal_switch_timestamp(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_timestamp(int index, ::uint64_t value) {
  _internal_mutable_switch_timestamp()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
}
inline void FtraceEventBundle_CompactSched::add_switch_timestamp(::uint64_t value) {
  _internal_add_switch_timestamp(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& FtraceEventBundle_CompactSched::switch_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return _internal_switch_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* FtraceEventBundle_CompactSched::mutable_switch_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_timestamp)
  return _internal_mutable_switch_timestamp();
}

inline ::uint64_t FtraceEventBundle_CompactSched::_internal_switch_timestamp(int index) const {
  return _internal_switch_timestamp().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_timestamp(::uint64_t value) {
  _internal_mutable_switch_timestamp()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& FtraceEventBundle_CompactSched::_internal_switch_timestamp() const {
  return _impl_.switch_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* FtraceEventBundle_CompactSched::_internal_mutable_switch_timestamp() {
  return &_impl_.switch_timestamp_;
}

// repeated int64 switch_prev_state = 2 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_prev_state_size() const {
  return _impl_.switch_prev_state_.size();
}
inline int FtraceEventBundle_CompactSched::switch_prev_state_size() const {
  return _internal_switch_prev_state_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_prev_state() {
  _internal_mutable_switch_prev_state()->Clear();
}
inline ::int64_t FtraceEventBundle_CompactSched::switch_prev_state(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return _internal_switch_prev_state(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_prev_state(int index, ::int64_t value) {
  _internal_mutable_switch_prev_state()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
}
inline void FtraceEventBundle_CompactSched::add_switch_prev_state(::int64_t value) {
  _internal_add_switch_prev_state(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FtraceEventBundle_CompactSched::switch_prev_state() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return _internal_switch_prev_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FtraceEventBundle_CompactSched::mutable_switch_prev_state() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_prev_state)
  return _internal_mutable_switch_prev_state();
}

inline ::int64_t FtraceEventBundle_CompactSched::_internal_switch_prev_state(int index) const {
  return _internal_switch_prev_state().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_prev_state(::int64_t value) {
  _internal_mutable_switch_prev_state()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& FtraceEventBundle_CompactSched::_internal_switch_prev_state() const {
  return _impl_.switch_prev_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* FtraceEventBundle_CompactSched::_internal_mutable_switch_prev_state() {
  return &_impl_.switch_prev_state_;
}

// repeated int32 switch_next_pid = 3 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_next_pid_size() const {
  return _impl_.switch_next_pid_.size();
}
inline int FtraceEventBundle_CompactSched::switch_next_pid_size() const {
  return _internal_switch_next_pid_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_pid() {
  _internal_mutable_switch_next_pid()->Clear();
}
inline ::int32_t FtraceEventBundle_CompactSched::switch_next_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return _internal_switch_next_pid(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_pid(int index, ::int32_t value) {
  _internal_mutable_switch_next_pid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
}
inline void FtraceEventBundle_CompactSched::add_switch_next_pid(::int32_t value) {
  _internal_add_switch_next_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::switch_next_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return _internal_switch_next_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::mutable_switch_next_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_pid)
  return _internal_mutable_switch_next_pid();
}

inline ::int32_t FtraceEventBundle_CompactSched::_internal_switch_next_pid(int index) const {
  return _internal_switch_next_pid().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_next_pid(::int32_t value) {
  _internal_mutable_switch_next_pid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::_internal_switch_next_pid() const {
  return _impl_.switch_next_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::_internal_mutable_switch_next_pid() {
  return &_impl_.switch_next_pid_;
}

// repeated int32 switch_next_prio = 4 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_next_prio_size() const {
  return _impl_.switch_next_prio_.size();
}
inline int FtraceEventBundle_CompactSched::switch_next_prio_size() const {
  return _internal_switch_next_prio_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_prio() {
  _internal_mutable_switch_next_prio()->Clear();
}
inline ::int32_t FtraceEventBundle_CompactSched::switch_next_prio(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return _internal_switch_next_prio(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_prio(int index, ::int32_t value) {
  _internal_mutable_switch_next_prio()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
}
inline void FtraceEventBundle_CompactSched::add_switch_next_prio(::int32_t value) {
  _internal_add_switch_next_prio(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::switch_next_prio() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return _internal_switch_next_prio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::mutable_switch_next_prio() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_prio)
  return _internal_mutable_switch_next_prio();
}

inline ::int32_t FtraceEventBundle_CompactSched::_internal_switch_next_prio(int index) const {
  return _internal_switch_next_prio().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_next_prio(::int32_t value) {
  _internal_mutable_switch_next_prio()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::_internal_switch_next_prio() const {
  return _impl_.switch_next_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::_internal_mutable_switch_next_prio() {
  return &_impl_.switch_next_prio_;
}

// repeated uint32 switch_next_comm_index = 6 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_switch_next_comm_index_size() const {
  return _impl_.switch_next_comm_index_.size();
}
inline int FtraceEventBundle_CompactSched::switch_next_comm_index_size() const {
  return _internal_switch_next_comm_index_size();
}
inline void FtraceEventBundle_CompactSched::clear_switch_next_comm_index() {
  _internal_mutable_switch_next_comm_index()->Clear();
}
inline ::uint32_t FtraceEventBundle_CompactSched::switch_next_comm_index(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return _internal_switch_next_comm_index(index);
}
inline void FtraceEventBundle_CompactSched::set_switch_next_comm_index(int index, ::uint32_t value) {
  _internal_mutable_switch_next_comm_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
}
inline void FtraceEventBundle_CompactSched::add_switch_next_comm_index(::uint32_t value) {
  _internal_add_switch_next_comm_index(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& FtraceEventBundle_CompactSched::switch_next_comm_index() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return _internal_switch_next_comm_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* FtraceEventBundle_CompactSched::mutable_switch_next_comm_index() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.switch_next_comm_index)
  return _internal_mutable_switch_next_comm_index();
}

inline ::uint32_t FtraceEventBundle_CompactSched::_internal_switch_next_comm_index(int index) const {
  return _internal_switch_next_comm_index().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_switch_next_comm_index(::uint32_t value) {
  _internal_mutable_switch_next_comm_index()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& FtraceEventBundle_CompactSched::_internal_switch_next_comm_index() const {
  return _impl_.switch_next_comm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* FtraceEventBundle_CompactSched::_internal_mutable_switch_next_comm_index() {
  return &_impl_.switch_next_comm_index_;
}

// repeated uint64 waking_timestamp = 7 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_timestamp_size() const {
  return _impl_.waking_timestamp_.size();
}
inline int FtraceEventBundle_CompactSched::waking_timestamp_size() const {
  return _internal_waking_timestamp_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_timestamp() {
  _internal_mutable_waking_timestamp()->Clear();
}
inline ::uint64_t FtraceEventBundle_CompactSched::waking_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return _internal_waking_timestamp(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_timestamp(int index, ::uint64_t value) {
  _internal_mutable_waking_timestamp()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
}
inline void FtraceEventBundle_CompactSched::add_waking_timestamp(::uint64_t value) {
  _internal_add_waking_timestamp(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& FtraceEventBundle_CompactSched::waking_timestamp() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return _internal_waking_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* FtraceEventBundle_CompactSched::mutable_waking_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_timestamp)
  return _internal_mutable_waking_timestamp();
}

inline ::uint64_t FtraceEventBundle_CompactSched::_internal_waking_timestamp(int index) const {
  return _internal_waking_timestamp().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_timestamp(::uint64_t value) {
  _internal_mutable_waking_timestamp()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& FtraceEventBundle_CompactSched::_internal_waking_timestamp() const {
  return _impl_.waking_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* FtraceEventBundle_CompactSched::_internal_mutable_waking_timestamp() {
  return &_impl_.waking_timestamp_;
}

// repeated int32 waking_pid = 8 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_pid_size() const {
  return _impl_.waking_pid_.size();
}
inline int FtraceEventBundle_CompactSched::waking_pid_size() const {
  return _internal_waking_pid_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_pid() {
  _internal_mutable_waking_pid()->Clear();
}
inline ::int32_t FtraceEventBundle_CompactSched::waking_pid(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return _internal_waking_pid(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_pid(int index, ::int32_t value) {
  _internal_mutable_waking_pid()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
}
inline void FtraceEventBundle_CompactSched::add_waking_pid(::int32_t value) {
  _internal_add_waking_pid(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::waking_pid() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return _internal_waking_pid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::mutable_waking_pid() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_pid)
  return _internal_mutable_waking_pid();
}

inline ::int32_t FtraceEventBundle_CompactSched::_internal_waking_pid(int index) const {
  return _internal_waking_pid().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_pid(::int32_t value) {
  _internal_mutable_waking_pid()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::_internal_waking_pid() const {
  return _impl_.waking_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::_internal_mutable_waking_pid() {
  return &_impl_.waking_pid_;
}

// repeated int32 waking_target_cpu = 9 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_target_cpu_size() const {
  return _impl_.waking_target_cpu_.size();
}
inline int FtraceEventBundle_CompactSched::waking_target_cpu_size() const {
  return _internal_waking_target_cpu_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_target_cpu() {
  _internal_mutable_waking_target_cpu()->Clear();
}
inline ::int32_t FtraceEventBundle_CompactSched::waking_target_cpu(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return _internal_waking_target_cpu(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_target_cpu(int index, ::int32_t value) {
  _internal_mutable_waking_target_cpu()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
}
inline void FtraceEventBundle_CompactSched::add_waking_target_cpu(::int32_t value) {
  _internal_add_waking_target_cpu(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::waking_target_cpu() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return _internal_waking_target_cpu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::mutable_waking_target_cpu() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_target_cpu)
  return _internal_mutable_waking_target_cpu();
}

inline ::int32_t FtraceEventBundle_CompactSched::_internal_waking_target_cpu(int index) const {
  return _internal_waking_target_cpu().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_target_cpu(::int32_t value) {
  _internal_mutable_waking_target_cpu()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::_internal_waking_target_cpu() const {
  return _impl_.waking_target_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::_internal_mutable_waking_target_cpu() {
  return &_impl_.waking_target_cpu_;
}

// repeated int32 waking_prio = 10 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_prio_size() const {
  return _impl_.waking_prio_.size();
}
inline int FtraceEventBundle_CompactSched::waking_prio_size() const {
  return _internal_waking_prio_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_prio() {
  _internal_mutable_waking_prio()->Clear();
}
inline ::int32_t FtraceEventBundle_CompactSched::waking_prio(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return _internal_waking_prio(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_prio(int index, ::int32_t value) {
  _internal_mutable_waking_prio()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
}
inline void FtraceEventBundle_CompactSched::add_waking_prio(::int32_t value) {
  _internal_add_waking_prio(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::waking_prio() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return _internal_waking_prio();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::mutable_waking_prio() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_prio)
  return _internal_mutable_waking_prio();
}

inline ::int32_t FtraceEventBundle_CompactSched::_internal_waking_prio(int index) const {
  return _internal_waking_prio().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_prio(::int32_t value) {
  _internal_mutable_waking_prio()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& FtraceEventBundle_CompactSched::_internal_waking_prio() const {
  return _impl_.waking_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* FtraceEventBundle_CompactSched::_internal_mutable_waking_prio() {
  return &_impl_.waking_prio_;
}

// repeated uint32 waking_comm_index = 11 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_comm_index_size() const {
  return _impl_.waking_comm_index_.size();
}
inline int FtraceEventBundle_CompactSched::waking_comm_index_size() const {
  return _internal_waking_comm_index_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_comm_index() {
  _internal_mutable_waking_comm_index()->Clear();
}
inline ::uint32_t FtraceEventBundle_CompactSched::waking_comm_index(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return _internal_waking_comm_index(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_comm_index(int index, ::uint32_t value) {
  _internal_mutable_waking_comm_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
}
inline void FtraceEventBundle_CompactSched::add_waking_comm_index(::uint32_t value) {
  _internal_add_waking_comm_index(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& FtraceEventBundle_CompactSched::waking_comm_index() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return _internal_waking_comm_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* FtraceEventBundle_CompactSched::mutable_waking_comm_index() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_comm_index)
  return _internal_mutable_waking_comm_index();
}

inline ::uint32_t FtraceEventBundle_CompactSched::_internal_waking_comm_index(int index) const {
  return _internal_waking_comm_index().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_comm_index(::uint32_t value) {
  _internal_mutable_waking_comm_index()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& FtraceEventBundle_CompactSched::_internal_waking_comm_index() const {
  return _impl_.waking_comm_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* FtraceEventBundle_CompactSched::_internal_mutable_waking_comm_index() {
  return &_impl_.waking_comm_index_;
}

// repeated uint32 waking_common_flags = 12 [packed = true];
inline int FtraceEventBundle_CompactSched::_internal_waking_common_flags_size() const {
  return _impl_.waking_common_flags_.size();
}
inline int FtraceEventBundle_CompactSched::waking_common_flags_size() const {
  return _internal_waking_common_flags_size();
}
inline void FtraceEventBundle_CompactSched::clear_waking_common_flags() {
  _internal_mutable_waking_common_flags()->Clear();
}
inline ::uint32_t FtraceEventBundle_CompactSched::waking_common_flags(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
  return _internal_waking_common_flags(index);
}
inline void FtraceEventBundle_CompactSched::set_waking_common_flags(int index, ::uint32_t value) {
  _internal_mutable_waking_common_flags()->Set(index, value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
}
inline void FtraceEventBundle_CompactSched::add_waking_common_flags(::uint32_t value) {
  _internal_add_waking_common_flags(value);
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& FtraceEventBundle_CompactSched::waking_common_flags() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
  return _internal_waking_common_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* FtraceEventBundle_CompactSched::mutable_waking_common_flags() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.CompactSched.waking_common_flags)
  return _internal_mutable_waking_common_flags();
}

inline ::uint32_t FtraceEventBundle_CompactSched::_internal_waking_common_flags(int index) const {
  return _internal_waking_common_flags().Get(index);
}
inline void FtraceEventBundle_CompactSched::_internal_add_waking_common_flags(::uint32_t value) {
  _internal_mutable_waking_common_flags()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& FtraceEventBundle_CompactSched::_internal_waking_common_flags() const {
  return _impl_.waking_common_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* FtraceEventBundle_CompactSched::_internal_mutable_waking_common_flags() {
  return &_impl_.waking_common_flags_;
}

// -------------------------------------------------------------------

// FtraceEventBundle

// optional uint32 cpu = 1;
inline bool FtraceEventBundle::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FtraceEventBundle::clear_cpu() {
  _impl_.cpu_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t FtraceEventBundle::cpu() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.cpu)
  return _internal_cpu();
}
inline void FtraceEventBundle::set_cpu(::uint32_t value) {
  _internal_set_cpu(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.cpu)
}
inline ::uint32_t FtraceEventBundle::_internal_cpu() const {
  return _impl_.cpu_;
}
inline void FtraceEventBundle::_internal_set_cpu(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cpu_ = value;
}

// repeated .perfetto.protos.FtraceEvent event = 2;
inline int FtraceEventBundle::_internal_event_size() const {
  return _impl_.event_.size();
}
inline int FtraceEventBundle::event_size() const {
  return _internal_event_size();
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.event)
  return _internal_mutable_event()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >*
FtraceEventBundle::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.FtraceEventBundle.event)
  return _internal_mutable_event();
}
inline const ::perfetto::protos::FtraceEvent& FtraceEventBundle::_internal_event(int index) const {
  return _internal_event().Get(index);
}
inline const ::perfetto::protos::FtraceEvent& FtraceEventBundle::event(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.event)
  return _internal_event(index);
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::_internal_add_event() {
  return _internal_mutable_event()->Add();
}
inline ::perfetto::protos::FtraceEvent* FtraceEventBundle::add_event() {
  ::perfetto::protos::FtraceEvent* _add = _internal_add_event();
  // @@protoc_insertion_point(field_add:perfetto.protos.FtraceEventBundle.event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::FtraceEvent >&
FtraceEventBundle::event() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.FtraceEventBundle.event)
  return _internal_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceEvent>&
FtraceEventBundle::_internal_event() const {
  return _impl_.event_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::perfetto::protos::FtraceEvent>*
FtraceEventBundle::_internal_mutable_event() {
  return &_impl_.event_;
}

// optional bool lost_events = 3;
inline bool FtraceEventBundle::has_lost_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FtraceEventBundle::clear_lost_events() {
  _impl_.lost_events_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FtraceEventBundle::lost_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.lost_events)
  return _internal_lost_events();
}
inline void FtraceEventBundle::set_lost_events(bool value) {
  _internal_set_lost_events(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.lost_events)
}
inline bool FtraceEventBundle::_internal_lost_events() const {
  return _impl_.lost_events_;
}
inline void FtraceEventBundle::_internal_set_lost_events(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lost_events_ = value;
}

// optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
inline bool FtraceEventBundle::has_compact_sched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compact_sched_ != nullptr);
  return value;
}
inline void FtraceEventBundle::clear_compact_sched() {
  if (_impl_.compact_sched_ != nullptr) _impl_.compact_sched_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::perfetto::protos::FtraceEventBundle_CompactSched& FtraceEventBundle::_internal_compact_sched() const {
  const ::perfetto::protos::FtraceEventBundle_CompactSched* p = _impl_.compact_sched_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::FtraceEventBundle_CompactSched&>(
      ::perfetto::protos::_FtraceEventBundle_CompactSched_default_instance_);
}
inline const ::perfetto::protos::FtraceEventBundle_CompactSched& FtraceEventBundle::compact_sched() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.compact_sched)
  return _internal_compact_sched();
}
inline void FtraceEventBundle::unsafe_arena_set_allocated_compact_sched(
    ::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compact_sched_);
  }
  _impl_.compact_sched_ = compact_sched;
  if (compact_sched) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.FtraceEventBundle.compact_sched)
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::release_compact_sched() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceEventBundle_CompactSched* temp = _impl_.compact_sched_;
  _impl_.compact_sched_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::unsafe_arena_release_compact_sched() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FtraceEventBundle.compact_sched)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::FtraceEventBundle_CompactSched* temp = _impl_.compact_sched_;
  _impl_.compact_sched_ = nullptr;
  return temp;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::_internal_mutable_compact_sched() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.compact_sched_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::FtraceEventBundle_CompactSched>(GetArenaForAllocation());
    _impl_.compact_sched_ = p;
  }
  return _impl_.compact_sched_;
}
inline ::perfetto::protos::FtraceEventBundle_CompactSched* FtraceEventBundle::mutable_compact_sched() {
  ::perfetto::protos::FtraceEventBundle_CompactSched* _msg = _internal_mutable_compact_sched();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FtraceEventBundle.compact_sched)
  return _msg;
}
inline void FtraceEventBundle::set_allocated_compact_sched(::perfetto::protos::FtraceEventBundle_CompactSched* compact_sched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compact_sched_;
  }
  if (compact_sched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compact_sched);
    if (message_arena != submessage_arena) {
      compact_sched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_sched, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.compact_sched_ = compact_sched;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FtraceEventBundle.compact_sched)
}

// optional .perfetto.protos.FtraceClock ftrace_clock = 5;
inline bool FtraceEventBundle::has_ftrace_clock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FtraceEventBundle::clear_ftrace_clock() {
  _impl_.ftrace_clock_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::perfetto::protos::FtraceClock FtraceEventBundle::ftrace_clock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.ftrace_clock)
  return _internal_ftrace_clock();
}
inline void FtraceEventBundle::set_ftrace_clock(::perfetto::protos::FtraceClock value) {
   _internal_set_ftrace_clock(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.ftrace_clock)
}
inline ::perfetto::protos::FtraceClock FtraceEventBundle::_internal_ftrace_clock() const {
  return static_cast<::perfetto::protos::FtraceClock>(_impl_.ftrace_clock_);
}
inline void FtraceEventBundle::_internal_set_ftrace_clock(::perfetto::protos::FtraceClock value) {
  assert(::perfetto::protos::FtraceClock_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ftrace_clock_ = value;
}

// optional int64 ftrace_timestamp = 6;
inline bool FtraceEventBundle::has_ftrace_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FtraceEventBundle::clear_ftrace_timestamp() {
  _impl_.ftrace_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FtraceEventBundle::ftrace_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.ftrace_timestamp)
  return _internal_ftrace_timestamp();
}
inline void FtraceEventBundle::set_ftrace_timestamp(::int64_t value) {
  _internal_set_ftrace_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.ftrace_timestamp)
}
inline ::int64_t FtraceEventBundle::_internal_ftrace_timestamp() const {
  return _impl_.ftrace_timestamp_;
}
inline void FtraceEventBundle::_internal_set_ftrace_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ftrace_timestamp_ = value;
}

// optional int64 boot_timestamp = 7;
inline bool FtraceEventBundle::has_boot_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FtraceEventBundle::clear_boot_timestamp() {
  _impl_.boot_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t FtraceEventBundle::boot_timestamp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FtraceEventBundle.boot_timestamp)
  return _internal_boot_timestamp();
}
inline void FtraceEventBundle::set_boot_timestamp(::int64_t value) {
  _internal_set_boot_timestamp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FtraceEventBundle.boot_timestamp)
}
inline ::int64_t FtraceEventBundle::_internal_boot_timestamp() const {
  return _impl_.boot_timestamp_;
}
inline void FtraceEventBundle::_internal_set_boot_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.boot_timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::perfetto::protos::FtraceClock> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::perfetto::protos::FtraceClock>() {
  return ::perfetto::protos::FtraceClock_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_2epb_2eh
