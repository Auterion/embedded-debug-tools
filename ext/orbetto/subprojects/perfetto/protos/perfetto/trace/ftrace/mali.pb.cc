// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/mali.proto

#include "protos/perfetto/trace/ftrace/mali.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.type_)*/ 0u

  , /*decltype(_impl_.value_)*/ 0
} {}
struct MaliTracingMarkWriteFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliTracingMarkWriteFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliTracingMarkWriteFtraceEventDefaultTypeInternal() {}
  union {
    MaliTracingMarkWriteFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliTracingMarkWriteFtraceEventDefaultTypeInternal _MaliTracingMarkWriteFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.info_val2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kctx_tgid_)*/ 0
} {}
struct MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSSETFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSSETFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSSETFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.info_val2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kctx_tgid_)*/ 0
} {}
struct MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSWAITSTARTFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSWAITSTARTFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSWAITSTARTFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.info_val2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kctx_tgid_)*/ 0
} {}
struct MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUCQSWAITENDFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUCQSWAITENDFtraceEventDefaultTypeInternal _MaliMaliKCPUCQSWAITENDFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.info_val2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kctx_tgid_)*/ 0

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.id_)*/ 0u
} {}
struct MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCESIGNALFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCESIGNALFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCESIGNALFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.info_val2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kctx_tgid_)*/ 0

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.id_)*/ 0u
} {}
struct MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCEWAITSTARTFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCEWAITSTARTFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCEWAITSTARTFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_val1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.info_val2_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.kctx_tgid_)*/ 0

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.id_)*/ 0u
} {}
struct MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliKCPUFENCEWAITENDFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliKCPUFENCEWAITENDFtraceEventDefaultTypeInternal _MaliMaliKCPUFENCEWAITENDFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/ 0

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.info_val_)*/ ::uint64_t{0u}
} {}
struct MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliCSFINTERRUPTSTARTFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliCSFINTERRUPTSTARTFtraceEventDefaultTypeInternal _MaliMaliCSFINTERRUPTSTARTFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kctx_tgid_)*/ 0

  , /*decltype(_impl_.kctx_id_)*/ 0u

  , /*decltype(_impl_.info_val_)*/ ::uint64_t{0u}
} {}
struct MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal() {}
  union {
    MaliMaliCSFINTERRUPTENDFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaliMaliCSFINTERRUPTENDFtraceEventDefaultTypeInternal _MaliMaliCSFINTERRUPTENDFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliTracingMarkWriteFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliTracingMarkWriteFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliTracingMarkWriteFtraceEvent, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliTracingMarkWriteFtraceEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliTracingMarkWriteFtraceEvent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliTracingMarkWriteFtraceEvent, _impl_.value_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _impl_.info_val1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _impl_.info_val2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent, _impl_.kctx_tgid_),
    1,
    0,
    3,
    2,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.info_val1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.info_val2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.kctx_tgid_),
    1,
    0,
    3,
    2,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.info_val1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.info_val2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.kctx_tgid_),
    1,
    0,
    3,
    2,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.info_val1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.info_val2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.kctx_tgid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.id_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.info_val1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.info_val2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.kctx_tgid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.id_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.info_val1_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.info_val2_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.kctx_tgid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.id_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.kctx_tgid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.info_val_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.kctx_tgid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.kctx_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.info_val_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::perfetto::protos::MaliTracingMarkWriteFtraceEvent)},
        { 16, 29, -1, sizeof(::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent)},
        { 34, 47, -1, sizeof(::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent)},
        { 52, 65, -1, sizeof(::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent)},
        { 70, 83, -1, sizeof(::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent)},
        { 88, 101, -1, sizeof(::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent)},
        { 106, 119, -1, sizeof(::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent)},
        { 124, 135, -1, sizeof(::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent)},
        { 138, 149, -1, sizeof(::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_MaliTracingMarkWriteFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliKCPUCQSSETFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliKCPUCQSWAITSTARTFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliKCPUCQSWAITENDFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliKCPUFENCESIGNALFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliKCPUFENCEWAITSTARTFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliKCPUFENCEWAITENDFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliCSFINTERRUPTSTARTFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MaliMaliCSFINTERRUPTENDFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'protos/perfetto/trace/ftrace/mali.prot"
    "o\022\017perfetto.protos\"Y\n\037MaliTracingMarkWri"
    "teFtraceEvent\022\014\n\004name\030\001 \001(\t\022\013\n\003pid\030\002 \001(\005"
    "\022\014\n\004type\030\003 \001(\r\022\r\n\005value\030\004 \001(\005\"u\n\035MaliMal"
    "iKCPUCQSSETFtraceEvent\022\n\n\002id\030\001 \001(\r\022\021\n\tin"
    "fo_val1\030\002 \001(\004\022\021\n\tinfo_val2\030\003 \001(\004\022\017\n\007kctx"
    "_id\030\004 \001(\r\022\021\n\tkctx_tgid\030\005 \001(\005\"{\n#MaliMali"
    "KCPUCQSWAITSTARTFtraceEvent\022\n\n\002id\030\001 \001(\r\022"
    "\021\n\tinfo_val1\030\002 \001(\004\022\021\n\tinfo_val2\030\003 \001(\004\022\017\n"
    "\007kctx_id\030\004 \001(\r\022\021\n\tkctx_tgid\030\005 \001(\005\"y\n!Mal"
    "iMaliKCPUCQSWAITENDFtraceEvent\022\n\n\002id\030\001 \001"
    "(\r\022\021\n\tinfo_val1\030\002 \001(\004\022\021\n\tinfo_val2\030\003 \001(\004"
    "\022\017\n\007kctx_id\030\004 \001(\r\022\021\n\tkctx_tgid\030\005 \001(\005\"z\n\""
    "MaliMaliKCPUFENCESIGNALFtraceEvent\022\021\n\tin"
    "fo_val1\030\001 \001(\004\022\021\n\tinfo_val2\030\002 \001(\004\022\021\n\tkctx"
    "_tgid\030\003 \001(\005\022\017\n\007kctx_id\030\004 \001(\r\022\n\n\002id\030\005 \001(\r"
    "\"}\n%MaliMaliKCPUFENCEWAITSTARTFtraceEven"
    "t\022\021\n\tinfo_val1\030\001 \001(\004\022\021\n\tinfo_val2\030\002 \001(\004\022"
    "\021\n\tkctx_tgid\030\003 \001(\005\022\017\n\007kctx_id\030\004 \001(\r\022\n\n\002i"
    "d\030\005 \001(\r\"{\n#MaliMaliKCPUFENCEWAITENDFtrac"
    "eEvent\022\021\n\tinfo_val1\030\001 \001(\004\022\021\n\tinfo_val2\030\002"
    " \001(\004\022\021\n\tkctx_tgid\030\003 \001(\005\022\017\n\007kctx_id\030\004 \001(\r"
    "\022\n\n\002id\030\005 \001(\r\"\\\n$MaliMaliCSFINTERRUPTSTAR"
    "TFtraceEvent\022\021\n\tkctx_tgid\030\001 \001(\005\022\017\n\007kctx_"
    "id\030\002 \001(\r\022\020\n\010info_val\030\003 \001(\004\"Z\n\"MaliMaliCS"
    "FINTERRUPTENDFtraceEvent\022\021\n\tkctx_tgid\030\001 "
    "\001(\005\022\017\n\007kctx_id\030\002 \001(\r\022\020\n\010info_val\030\003 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto = {
    false,
    false,
    1078,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto,
    "protos/perfetto/trace/ftrace/mali.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class MaliTracingMarkWriteFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliTracingMarkWriteFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
}
MaliTracingMarkWriteFtraceEvent::MaliTracingMarkWriteFtraceEvent(const MaliTracingMarkWriteFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MaliTracingMarkWriteFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.value_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
}

inline void MaliTracingMarkWriteFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.type_) { 0u }

    , decltype(_impl_.value_) { 0 }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MaliTracingMarkWriteFtraceEvent::~MaliTracingMarkWriteFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliTracingMarkWriteFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MaliTracingMarkWriteFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliTracingMarkWriteFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliTracingMarkWriteFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.MaliTracingMarkWriteFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliTracingMarkWriteFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.MaliTracingMarkWriteFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 pid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_pid(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_type(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  return target;
}

::size_t MaliTracingMarkWriteFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 pid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_type());
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliTracingMarkWriteFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliTracingMarkWriteFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliTracingMarkWriteFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliTracingMarkWriteFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliTracingMarkWriteFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliTracingMarkWriteFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliTracingMarkWriteFtraceEvent::CopyFrom(const MaliTracingMarkWriteFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliTracingMarkWriteFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliTracingMarkWriteFtraceEvent::IsInitialized() const {
  return true;
}

void MaliTracingMarkWriteFtraceEvent::InternalSwap(MaliTracingMarkWriteFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, _impl_.value_)
      + sizeof(MaliTracingMarkWriteFtraceEvent::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(MaliTracingMarkWriteFtraceEvent, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliTracingMarkWriteFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[0]);
}
// ===================================================================

class MaliMaliKCPUCQSSETFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSSETFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
}
MaliMaliKCPUCQSSETFtraceEvent::MaliMaliKCPUCQSSETFtraceEvent(const MaliMaliKCPUCQSSETFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
}

inline void MaliMaliKCPUCQSSETFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_) { ::uint64_t{0u} }

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.info_val2_) { ::uint64_t{0u} }

    , decltype(_impl_.kctx_tgid_) { 0 }

  };
}

MaliMaliKCPUCQSSETFtraceEvent::~MaliMaliKCPUCQSSETFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSSETFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSSETFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUCQSSETFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliKCPUCQSSETFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliKCPUCQSSETFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  return target;
}

::size_t MaliMaliKCPUCQSSETFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliKCPUCQSSETFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliKCPUCQSSETFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliKCPUCQSSETFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliKCPUCQSSETFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliKCPUCQSSETFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliKCPUCQSSETFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliKCPUCQSSETFtraceEvent::CopyFrom(const MaliMaliKCPUCQSSETFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSSETFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSSETFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSSETFtraceEvent::InternalSwap(MaliMaliKCPUCQSSETFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, _impl_.kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSSETFtraceEvent::_impl_.kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSSETFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliKCPUCQSSETFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[1]);
}
// ===================================================================

class MaliMaliKCPUCQSWAITSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSWAITSTARTFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
}
MaliMaliKCPUCQSWAITSTARTFtraceEvent::MaliMaliKCPUCQSWAITSTARTFtraceEvent(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
}

inline void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_) { ::uint64_t{0u} }

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.info_val2_) { ::uint64_t{0u} }

    , decltype(_impl_.kctx_tgid_) { 0 }

  };
}

MaliMaliKCPUCQSWAITSTARTFtraceEvent::~MaliMaliKCPUCQSWAITSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliKCPUCQSWAITSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliKCPUCQSWAITSTARTFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  return target;
}

::size_t MaliMaliKCPUCQSWAITSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliKCPUCQSWAITSTARTFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliKCPUCQSWAITSTARTFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliKCPUCQSWAITSTARTFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliKCPUCQSWAITSTARTFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliKCPUCQSWAITSTARTFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliKCPUCQSWAITSTARTFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::CopyFrom(const MaliMaliKCPUCQSWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSWAITSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSWAITSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSWAITSTARTFtraceEvent::InternalSwap(MaliMaliKCPUCQSWAITSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSWAITSTARTFtraceEvent::_impl_.kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITSTARTFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliKCPUCQSWAITSTARTFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[2]);
}
// ===================================================================

class MaliMaliKCPUCQSWAITENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUCQSWAITENDFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
}
MaliMaliKCPUCQSWAITENDFtraceEvent::MaliMaliKCPUCQSWAITENDFtraceEvent(const MaliMaliKCPUCQSWAITENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
}

inline void MaliMaliKCPUCQSWAITENDFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_) { ::uint64_t{0u} }

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.info_val2_) { ::uint64_t{0u} }

    , decltype(_impl_.kctx_tgid_) { 0 }

  };
}

MaliMaliKCPUCQSWAITENDFtraceEvent::~MaliMaliKCPUCQSWAITENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUCQSWAITENDFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kctx_tgid_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.kctx_tgid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliKCPUCQSWAITENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kctx_tgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliKCPUCQSWAITENDFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // optional uint64 info_val1 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_info_val2(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kctx_id(), target);
  }

  // optional int32 kctx_tgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_kctx_tgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  return target;
}

::size_t MaliMaliKCPUCQSWAITENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val1());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint64 info_val2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliKCPUCQSWAITENDFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliKCPUCQSWAITENDFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliKCPUCQSWAITENDFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliKCPUCQSWAITENDFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliKCPUCQSWAITENDFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliKCPUCQSWAITENDFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::CopyFrom(const MaliMaliKCPUCQSWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUCQSWAITENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUCQSWAITENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUCQSWAITENDFtraceEvent::InternalSwap(MaliMaliKCPUCQSWAITENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.kctx_tgid_)
      + sizeof(MaliMaliKCPUCQSWAITENDFtraceEvent::_impl_.kctx_tgid_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUCQSWAITENDFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliKCPUCQSWAITENDFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[3]);
}
// ===================================================================

class MaliMaliKCPUFENCESIGNALFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCESIGNALFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
}
MaliMaliKCPUFENCESIGNALFtraceEvent::MaliMaliKCPUFENCESIGNALFtraceEvent(const MaliMaliKCPUFENCESIGNALFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
}

inline void MaliMaliKCPUFENCESIGNALFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_) { ::uint64_t{0u} }

    , decltype(_impl_.info_val2_) { ::uint64_t{0u} }

    , decltype(_impl_.kctx_tgid_) { 0 }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.id_) { 0u }

  };
}

MaliMaliKCPUFENCESIGNALFtraceEvent::~MaliMaliKCPUFENCESIGNALFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCESIGNALFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliKCPUFENCESIGNALFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliKCPUFENCESIGNALFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  return target;
}

::size_t MaliMaliKCPUFENCESIGNALFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliKCPUFENCESIGNALFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliKCPUFENCESIGNALFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliKCPUFENCESIGNALFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliKCPUFENCESIGNALFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliKCPUFENCESIGNALFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliKCPUFENCESIGNALFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::CopyFrom(const MaliMaliKCPUFENCESIGNALFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCESIGNALFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCESIGNALFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCESIGNALFtraceEvent::InternalSwap(MaliMaliKCPUFENCESIGNALFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.id_)
      + sizeof(MaliMaliKCPUFENCESIGNALFtraceEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCESIGNALFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliKCPUFENCESIGNALFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[4]);
}
// ===================================================================

class MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCEWAITSTARTFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
}
MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MaliMaliKCPUFENCEWAITSTARTFtraceEvent(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
}

inline void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_) { ::uint64_t{0u} }

    , decltype(_impl_.info_val2_) { ::uint64_t{0u} }

    , decltype(_impl_.kctx_tgid_) { 0 }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.id_) { 0u }

  };
}

MaliMaliKCPUFENCEWAITSTARTFtraceEvent::~MaliMaliKCPUFENCEWAITSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  return target;
}

::size_t MaliMaliKCPUFENCEWAITSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliKCPUFENCEWAITSTARTFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliKCPUFENCEWAITSTARTFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliKCPUFENCEWAITSTARTFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::CopyFrom(const MaliMaliKCPUFENCEWAITSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCEWAITSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCEWAITSTARTFtraceEvent::InternalSwap(MaliMaliKCPUFENCEWAITSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.id_)
      + sizeof(MaliMaliKCPUFENCEWAITSTARTFtraceEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITSTARTFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliKCPUFENCEWAITSTARTFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[5]);
}
// ===================================================================

class MaliMaliKCPUFENCEWAITENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliKCPUFENCEWAITENDFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_._has_bits_);
  static void set_has_info_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_info_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
}
MaliMaliKCPUFENCEWAITENDFtraceEvent::MaliMaliKCPUFENCEWAITENDFtraceEvent(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
}

inline void MaliMaliKCPUFENCEWAITENDFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_val1_) { ::uint64_t{0u} }

    , decltype(_impl_.info_val2_) { ::uint64_t{0u} }

    , decltype(_impl_.kctx_tgid_) { 0 }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.id_) { 0u }

  };
}

MaliMaliKCPUFENCEWAITENDFtraceEvent::~MaliMaliKCPUFENCEWAITENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliKCPUFENCEWAITENDFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.info_val1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.info_val1_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliKCPUFENCEWAITENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 info_val1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_info_val1(&has_bits);
          _impl_.info_val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_info_val2(&has_bits);
          _impl_.info_val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 kctx_tgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliKCPUFENCEWAITENDFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 info_val1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_info_val1(), target);
  }

  // optional uint64 info_val2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_info_val2(), target);
  }

  // optional int32 kctx_tgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kctx_id(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  return target;
}

::size_t MaliMaliKCPUFENCEWAITENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 info_val1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val1());
    }

    // optional uint64 info_val2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val2());
    }

    // optional int32 kctx_tgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliKCPUFENCEWAITENDFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliKCPUFENCEWAITENDFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliKCPUFENCEWAITENDFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliKCPUFENCEWAITENDFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliKCPUFENCEWAITENDFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliKCPUFENCEWAITENDFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.info_val1_ = from._impl_.info_val1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.info_val2_ = from._impl_.info_val2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::CopyFrom(const MaliMaliKCPUFENCEWAITENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliKCPUFENCEWAITENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliKCPUFENCEWAITENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliKCPUFENCEWAITENDFtraceEvent::InternalSwap(MaliMaliKCPUFENCEWAITENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.id_)
      + sizeof(MaliMaliKCPUFENCEWAITENDFtraceEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliKCPUFENCEWAITENDFtraceEvent, _impl_.info_val1_)>(
          reinterpret_cast<char*>(&_impl_.info_val1_),
          reinterpret_cast<char*>(&other->_impl_.info_val1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliKCPUFENCEWAITENDFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[6]);
}
// ===================================================================

class MaliMaliCSFINTERRUPTSTARTFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliCSFINTERRUPTSTARTFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
}
MaliMaliCSFINTERRUPTSTARTFtraceEvent::MaliMaliCSFINTERRUPTSTARTFtraceEvent(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
}

inline void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_) { 0 }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.info_val_) { ::uint64_t{0u} }

  };
}

MaliMaliCSFINTERRUPTSTARTFtraceEvent::~MaliMaliCSFINTERRUPTSTARTFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliCSFINTERRUPTSTARTFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliCSFINTERRUPTSTARTFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  return target;
}

::size_t MaliMaliCSFINTERRUPTSTARTFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliCSFINTERRUPTSTARTFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliCSFINTERRUPTSTARTFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliCSFINTERRUPTSTARTFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliCSFINTERRUPTSTARTFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliCSFINTERRUPTSTARTFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliCSFINTERRUPTSTARTFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::CopyFrom(const MaliMaliCSFINTERRUPTSTARTFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliCSFINTERRUPTSTARTFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliCSFINTERRUPTSTARTFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliCSFINTERRUPTSTARTFtraceEvent::InternalSwap(MaliMaliCSFINTERRUPTSTARTFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliCSFINTERRUPTSTARTFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTSTARTFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliCSFINTERRUPTSTARTFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[7]);
}
// ===================================================================

class MaliMaliCSFINTERRUPTENDFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MaliMaliCSFINTERRUPTENDFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_._has_bits_);
  static void set_has_kctx_tgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kctx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_info_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
}
MaliMaliCSFINTERRUPTENDFtraceEvent::MaliMaliCSFINTERRUPTENDFtraceEvent(const MaliMaliCSFINTERRUPTENDFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
}

inline void MaliMaliCSFINTERRUPTENDFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kctx_tgid_) { 0 }

    , decltype(_impl_.kctx_id_) { 0u }

    , decltype(_impl_.info_val_) { ::uint64_t{0u} }

  };
}

MaliMaliCSFINTERRUPTENDFtraceEvent::~MaliMaliCSFINTERRUPTENDFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaliMaliCSFINTERRUPTENDFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.kctx_tgid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.info_val_) -
        reinterpret_cast<char*>(&_impl_.kctx_tgid_)) + sizeof(_impl_.info_val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaliMaliCSFINTERRUPTENDFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 kctx_tgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_kctx_tgid(&has_bits);
          _impl_.kctx_tgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kctx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_kctx_id(&has_bits);
          _impl_.kctx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 info_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_info_val(&has_bits);
          _impl_.info_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaliMaliCSFINTERRUPTENDFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 kctx_tgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_kctx_tgid(), target);
  }

  // optional uint32 kctx_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_kctx_id(), target);
  }

  // optional uint64 info_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_info_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  return target;
}

::size_t MaliMaliCSFINTERRUPTENDFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kctx_tgid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_kctx_tgid());
    }

    // optional uint32 kctx_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kctx_id());
    }

    // optional uint64 info_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_info_val());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaliMaliCSFINTERRUPTENDFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaliMaliCSFINTERRUPTENDFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaliMaliCSFINTERRUPTENDFtraceEvent::GetClassData() const { return &_class_data_; }


void MaliMaliCSFINTERRUPTENDFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaliMaliCSFINTERRUPTENDFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MaliMaliCSFINTERRUPTENDFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.kctx_tgid_ = from._impl_.kctx_tgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kctx_id_ = from._impl_.kctx_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.info_val_ = from._impl_.info_val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::CopyFrom(const MaliMaliCSFINTERRUPTENDFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MaliMaliCSFINTERRUPTENDFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaliMaliCSFINTERRUPTENDFtraceEvent::IsInitialized() const {
  return true;
}

void MaliMaliCSFINTERRUPTENDFtraceEvent::InternalSwap(MaliMaliCSFINTERRUPTENDFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.info_val_)
      + sizeof(MaliMaliCSFINTERRUPTENDFtraceEvent::_impl_.info_val_)
      - PROTOBUF_FIELD_OFFSET(MaliMaliCSFINTERRUPTENDFtraceEvent, _impl_.kctx_tgid_)>(
          reinterpret_cast<char*>(&_impl_.kctx_tgid_),
          reinterpret_cast<char*>(&other->_impl_.kctx_tgid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaliMaliCSFINTERRUPTENDFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fmali_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliTracingMarkWriteFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliTracingMarkWriteFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSSETFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSWAITSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUCQSWAITENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCESIGNALFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCEWAITSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliKCPUFENCEWAITENDFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliCSFINTERRUPTSTARTFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MaliMaliCSFINTERRUPTENDFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
