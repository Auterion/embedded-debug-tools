// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/i2c.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
namespace perfetto {
namespace protos {
class I2cReadFtraceEvent;
struct I2cReadFtraceEventDefaultTypeInternal;
extern I2cReadFtraceEventDefaultTypeInternal _I2cReadFtraceEvent_default_instance_;
class I2cReplyFtraceEvent;
struct I2cReplyFtraceEventDefaultTypeInternal;
extern I2cReplyFtraceEventDefaultTypeInternal _I2cReplyFtraceEvent_default_instance_;
class I2cResultFtraceEvent;
struct I2cResultFtraceEventDefaultTypeInternal;
extern I2cResultFtraceEventDefaultTypeInternal _I2cResultFtraceEvent_default_instance_;
class I2cWriteFtraceEvent;
struct I2cWriteFtraceEventDefaultTypeInternal;
extern I2cWriteFtraceEventDefaultTypeInternal _I2cWriteFtraceEvent_default_instance_;
class SmbusReadFtraceEvent;
struct SmbusReadFtraceEventDefaultTypeInternal;
extern SmbusReadFtraceEventDefaultTypeInternal _SmbusReadFtraceEvent_default_instance_;
class SmbusReplyFtraceEvent;
struct SmbusReplyFtraceEventDefaultTypeInternal;
extern SmbusReplyFtraceEventDefaultTypeInternal _SmbusReplyFtraceEvent_default_instance_;
class SmbusResultFtraceEvent;
struct SmbusResultFtraceEventDefaultTypeInternal;
extern SmbusResultFtraceEventDefaultTypeInternal _SmbusResultFtraceEvent_default_instance_;
class SmbusWriteFtraceEvent;
struct SmbusWriteFtraceEventDefaultTypeInternal;
extern SmbusWriteFtraceEventDefaultTypeInternal _SmbusWriteFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::I2cReadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cReadFtraceEvent>(Arena*);
template <>
::perfetto::protos::I2cReplyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cReplyFtraceEvent>(Arena*);
template <>
::perfetto::protos::I2cResultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cResultFtraceEvent>(Arena*);
template <>
::perfetto::protos::I2cWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::I2cWriteFtraceEvent>(Arena*);
template <>
::perfetto::protos::SmbusReadFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusReadFtraceEvent>(Arena*);
template <>
::perfetto::protos::SmbusReplyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusReplyFtraceEvent>(Arena*);
template <>
::perfetto::protos::SmbusResultFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusResultFtraceEvent>(Arena*);
template <>
::perfetto::protos::SmbusWriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::SmbusWriteFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class I2cReadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cReadFtraceEvent) */ {
 public:
  inline I2cReadFtraceEvent() : I2cReadFtraceEvent(nullptr) {}
  ~I2cReadFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR I2cReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  I2cReadFtraceEvent(const I2cReadFtraceEvent& from);
  I2cReadFtraceEvent(I2cReadFtraceEvent&& from) noexcept
    : I2cReadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cReadFtraceEvent& operator=(const I2cReadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cReadFtraceEvent& operator=(I2cReadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const I2cReadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const I2cReadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cReadFtraceEvent*>(
               &_I2cReadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(I2cReadFtraceEvent& a, I2cReadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cReadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(I2cReadFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  I2cReadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<I2cReadFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const I2cReadFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const I2cReadFtraceEvent& from) {
    I2cReadFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I2cReadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.I2cReadFtraceEvent";
  }
  protected:
  explicit I2cReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kMsgNrFieldNumber = 2,
    kAddrFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kLenFieldNumber = 5,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 msg_nr = 2;
  bool has_msg_nr() const;
  void clear_msg_nr() ;
  ::uint32_t msg_nr() const;
  void set_msg_nr(::uint32_t value);

  private:
  ::uint32_t _internal_msg_nr() const;
  void _internal_set_msg_nr(::uint32_t value);

  public:
  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cReadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t msg_nr_;
    ::uint32_t addr_;
    ::uint32_t flags_;
    ::uint32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class I2cWriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cWriteFtraceEvent) */ {
 public:
  inline I2cWriteFtraceEvent() : I2cWriteFtraceEvent(nullptr) {}
  ~I2cWriteFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR I2cWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  I2cWriteFtraceEvent(const I2cWriteFtraceEvent& from);
  I2cWriteFtraceEvent(I2cWriteFtraceEvent&& from) noexcept
    : I2cWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cWriteFtraceEvent& operator=(const I2cWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cWriteFtraceEvent& operator=(I2cWriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const I2cWriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const I2cWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cWriteFtraceEvent*>(
               &_I2cWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(I2cWriteFtraceEvent& a, I2cWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cWriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(I2cWriteFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  I2cWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<I2cWriteFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const I2cWriteFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const I2cWriteFtraceEvent& from) {
    I2cWriteFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I2cWriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.I2cWriteFtraceEvent";
  }
  protected:
  explicit I2cWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kMsgNrFieldNumber = 2,
    kAddrFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kLenFieldNumber = 5,
    kBufFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 msg_nr = 2;
  bool has_msg_nr() const;
  void clear_msg_nr() ;
  ::uint32_t msg_nr() const;
  void set_msg_nr(::uint32_t value);

  private:
  ::uint32_t _internal_msg_nr() const;
  void _internal_set_msg_nr(::uint32_t value);

  public:
  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 buf = 6;
  bool has_buf() const;
  void clear_buf() ;
  ::uint32_t buf() const;
  void set_buf(::uint32_t value);

  private:
  ::uint32_t _internal_buf() const;
  void _internal_set_buf(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cWriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t msg_nr_;
    ::uint32_t addr_;
    ::uint32_t flags_;
    ::uint32_t len_;
    ::uint32_t buf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class I2cResultFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cResultFtraceEvent) */ {
 public:
  inline I2cResultFtraceEvent() : I2cResultFtraceEvent(nullptr) {}
  ~I2cResultFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR I2cResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  I2cResultFtraceEvent(const I2cResultFtraceEvent& from);
  I2cResultFtraceEvent(I2cResultFtraceEvent&& from) noexcept
    : I2cResultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cResultFtraceEvent& operator=(const I2cResultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cResultFtraceEvent& operator=(I2cResultFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const I2cResultFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const I2cResultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cResultFtraceEvent*>(
               &_I2cResultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(I2cResultFtraceEvent& a, I2cResultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cResultFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(I2cResultFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  I2cResultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<I2cResultFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const I2cResultFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const I2cResultFtraceEvent& from) {
    I2cResultFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I2cResultFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.I2cResultFtraceEvent";
  }
  protected:
  explicit I2cResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kNrMsgsFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 nr_msgs = 2;
  bool has_nr_msgs() const;
  void clear_nr_msgs() ;
  ::uint32_t nr_msgs() const;
  void set_nr_msgs(::uint32_t value);

  private:
  ::uint32_t _internal_nr_msgs() const;
  void _internal_set_nr_msgs(::uint32_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cResultFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t nr_msgs_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class I2cReplyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.I2cReplyFtraceEvent) */ {
 public:
  inline I2cReplyFtraceEvent() : I2cReplyFtraceEvent(nullptr) {}
  ~I2cReplyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR I2cReplyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  I2cReplyFtraceEvent(const I2cReplyFtraceEvent& from);
  I2cReplyFtraceEvent(I2cReplyFtraceEvent&& from) noexcept
    : I2cReplyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline I2cReplyFtraceEvent& operator=(const I2cReplyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline I2cReplyFtraceEvent& operator=(I2cReplyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const I2cReplyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const I2cReplyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const I2cReplyFtraceEvent*>(
               &_I2cReplyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(I2cReplyFtraceEvent& a, I2cReplyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(I2cReplyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(I2cReplyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  I2cReplyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<I2cReplyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const I2cReplyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const I2cReplyFtraceEvent& from) {
    I2cReplyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I2cReplyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.I2cReplyFtraceEvent";
  }
  protected:
  explicit I2cReplyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kMsgNrFieldNumber = 2,
    kAddrFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kLenFieldNumber = 5,
    kBufFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 msg_nr = 2;
  bool has_msg_nr() const;
  void clear_msg_nr() ;
  ::uint32_t msg_nr() const;
  void set_msg_nr(::uint32_t value);

  private:
  ::uint32_t _internal_msg_nr() const;
  void _internal_set_msg_nr(::uint32_t value);

  public:
  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 flags = 4;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 buf = 6;
  bool has_buf() const;
  void clear_buf() ;
  ::uint32_t buf() const;
  void set_buf(::uint32_t value);

  private:
  ::uint32_t _internal_buf() const;
  void _internal_set_buf(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.I2cReplyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t msg_nr_;
    ::uint32_t addr_;
    ::uint32_t flags_;
    ::uint32_t len_;
    ::uint32_t buf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class SmbusReadFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusReadFtraceEvent) */ {
 public:
  inline SmbusReadFtraceEvent() : SmbusReadFtraceEvent(nullptr) {}
  ~SmbusReadFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmbusReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmbusReadFtraceEvent(const SmbusReadFtraceEvent& from);
  SmbusReadFtraceEvent(SmbusReadFtraceEvent&& from) noexcept
    : SmbusReadFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusReadFtraceEvent& operator=(const SmbusReadFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusReadFtraceEvent& operator=(SmbusReadFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmbusReadFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmbusReadFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusReadFtraceEvent*>(
               &_SmbusReadFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SmbusReadFtraceEvent& a, SmbusReadFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusReadFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmbusReadFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmbusReadFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmbusReadFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmbusReadFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmbusReadFtraceEvent& from) {
    SmbusReadFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmbusReadFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SmbusReadFtraceEvent";
  }
  protected:
  explicit SmbusReadFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kAddrFieldNumber = 3,
    kCommandFieldNumber = 4,
    kProtocolFieldNumber = 5,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 flags = 2;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 addr = 3;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 command = 4;
  bool has_command() const;
  void clear_command() ;
  ::uint32_t command() const;
  void set_command(::uint32_t value);

  private:
  ::uint32_t _internal_command() const;
  void _internal_set_command(::uint32_t value);

  public:
  // optional uint32 protocol = 5;
  bool has_protocol() const;
  void clear_protocol() ;
  ::uint32_t protocol() const;
  void set_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_protocol() const;
  void _internal_set_protocol(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusReadFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t flags_;
    ::uint32_t addr_;
    ::uint32_t command_;
    ::uint32_t protocol_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class SmbusWriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusWriteFtraceEvent) */ {
 public:
  inline SmbusWriteFtraceEvent() : SmbusWriteFtraceEvent(nullptr) {}
  ~SmbusWriteFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmbusWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmbusWriteFtraceEvent(const SmbusWriteFtraceEvent& from);
  SmbusWriteFtraceEvent(SmbusWriteFtraceEvent&& from) noexcept
    : SmbusWriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusWriteFtraceEvent& operator=(const SmbusWriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusWriteFtraceEvent& operator=(SmbusWriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmbusWriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmbusWriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusWriteFtraceEvent*>(
               &_SmbusWriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SmbusWriteFtraceEvent& a, SmbusWriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusWriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmbusWriteFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmbusWriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmbusWriteFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmbusWriteFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmbusWriteFtraceEvent& from) {
    SmbusWriteFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmbusWriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SmbusWriteFtraceEvent";
  }
  protected:
  explicit SmbusWriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kAddrFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kCommandFieldNumber = 4,
    kLenFieldNumber = 5,
    kProtocolFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 addr = 2;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 command = 4;
  bool has_command() const;
  void clear_command() ;
  ::uint32_t command() const;
  void set_command(::uint32_t value);

  private:
  ::uint32_t _internal_command() const;
  void _internal_set_command(::uint32_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 protocol = 6;
  bool has_protocol() const;
  void clear_protocol() ;
  ::uint32_t protocol() const;
  void set_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_protocol() const;
  void _internal_set_protocol(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusWriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t addr_;
    ::uint32_t flags_;
    ::uint32_t command_;
    ::uint32_t len_;
    ::uint32_t protocol_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class SmbusResultFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusResultFtraceEvent) */ {
 public:
  inline SmbusResultFtraceEvent() : SmbusResultFtraceEvent(nullptr) {}
  ~SmbusResultFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmbusResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmbusResultFtraceEvent(const SmbusResultFtraceEvent& from);
  SmbusResultFtraceEvent(SmbusResultFtraceEvent&& from) noexcept
    : SmbusResultFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusResultFtraceEvent& operator=(const SmbusResultFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusResultFtraceEvent& operator=(SmbusResultFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmbusResultFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmbusResultFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusResultFtraceEvent*>(
               &_SmbusResultFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SmbusResultFtraceEvent& a, SmbusResultFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusResultFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmbusResultFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmbusResultFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmbusResultFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmbusResultFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmbusResultFtraceEvent& from) {
    SmbusResultFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmbusResultFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SmbusResultFtraceEvent";
  }
  protected:
  explicit SmbusResultFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kAddrFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kReadWriteFieldNumber = 4,
    kCommandFieldNumber = 5,
    kResFieldNumber = 6,
    kProtocolFieldNumber = 7,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 addr = 2;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 read_write = 4;
  bool has_read_write() const;
  void clear_read_write() ;
  ::uint32_t read_write() const;
  void set_read_write(::uint32_t value);

  private:
  ::uint32_t _internal_read_write() const;
  void _internal_set_read_write(::uint32_t value);

  public:
  // optional uint32 command = 5;
  bool has_command() const;
  void clear_command() ;
  ::uint32_t command() const;
  void set_command(::uint32_t value);

  private:
  ::uint32_t _internal_command() const;
  void _internal_set_command(::uint32_t value);

  public:
  // optional int32 res = 6;
  bool has_res() const;
  void clear_res() ;
  ::int32_t res() const;
  void set_res(::int32_t value);

  private:
  ::int32_t _internal_res() const;
  void _internal_set_res(::int32_t value);

  public:
  // optional uint32 protocol = 7;
  bool has_protocol() const;
  void clear_protocol() ;
  ::uint32_t protocol() const;
  void set_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_protocol() const;
  void _internal_set_protocol(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusResultFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t addr_;
    ::uint32_t flags_;
    ::uint32_t read_write_;
    ::uint32_t command_;
    ::int32_t res_;
    ::uint32_t protocol_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};// -------------------------------------------------------------------

class SmbusReplyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.SmbusReplyFtraceEvent) */ {
 public:
  inline SmbusReplyFtraceEvent() : SmbusReplyFtraceEvent(nullptr) {}
  ~SmbusReplyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SmbusReplyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmbusReplyFtraceEvent(const SmbusReplyFtraceEvent& from);
  SmbusReplyFtraceEvent(SmbusReplyFtraceEvent&& from) noexcept
    : SmbusReplyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline SmbusReplyFtraceEvent& operator=(const SmbusReplyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmbusReplyFtraceEvent& operator=(SmbusReplyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmbusReplyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmbusReplyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const SmbusReplyFtraceEvent*>(
               &_SmbusReplyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SmbusReplyFtraceEvent& a, SmbusReplyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SmbusReplyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmbusReplyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmbusReplyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmbusReplyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmbusReplyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SmbusReplyFtraceEvent& from) {
    SmbusReplyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmbusReplyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.SmbusReplyFtraceEvent";
  }
  protected:
  explicit SmbusReplyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdapterNrFieldNumber = 1,
    kAddrFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kCommandFieldNumber = 4,
    kLenFieldNumber = 5,
    kProtocolFieldNumber = 6,
  };
  // optional int32 adapter_nr = 1;
  bool has_adapter_nr() const;
  void clear_adapter_nr() ;
  ::int32_t adapter_nr() const;
  void set_adapter_nr(::int32_t value);

  private:
  ::int32_t _internal_adapter_nr() const;
  void _internal_set_adapter_nr(::int32_t value);

  public:
  // optional uint32 addr = 2;
  bool has_addr() const;
  void clear_addr() ;
  ::uint32_t addr() const;
  void set_addr(::uint32_t value);

  private:
  ::uint32_t _internal_addr() const;
  void _internal_set_addr(::uint32_t value);

  public:
  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // optional uint32 command = 4;
  bool has_command() const;
  void clear_command() ;
  ::uint32_t command() const;
  void set_command(::uint32_t value);

  private:
  ::uint32_t _internal_command() const;
  void _internal_set_command(::uint32_t value);

  public:
  // optional uint32 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 protocol = 6;
  bool has_protocol() const;
  void clear_protocol() ;
  ::uint32_t protocol() const;
  void set_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_protocol() const;
  void _internal_set_protocol(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.SmbusReplyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t adapter_nr_;
    ::uint32_t addr_;
    ::uint32_t flags_;
    ::uint32_t command_;
    ::uint32_t len_;
    ::uint32_t protocol_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// I2cReadFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cReadFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void I2cReadFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t I2cReadFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void I2cReadFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.adapter_nr)
}
inline ::int32_t I2cReadFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void I2cReadFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 msg_nr = 2;
inline bool I2cReadFtraceEvent::has_msg_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void I2cReadFtraceEvent::clear_msg_nr() {
  _impl_.msg_nr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t I2cReadFtraceEvent::msg_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.msg_nr)
  return _internal_msg_nr();
}
inline void I2cReadFtraceEvent::set_msg_nr(::uint32_t value) {
  _internal_set_msg_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.msg_nr)
}
inline ::uint32_t I2cReadFtraceEvent::_internal_msg_nr() const {
  return _impl_.msg_nr_;
}
inline void I2cReadFtraceEvent::_internal_set_msg_nr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_nr_ = value;
}

// optional uint32 addr = 3;
inline bool I2cReadFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void I2cReadFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t I2cReadFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.addr)
  return _internal_addr();
}
inline void I2cReadFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.addr)
}
inline ::uint32_t I2cReadFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void I2cReadFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addr_ = value;
}

// optional uint32 flags = 4;
inline bool I2cReadFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void I2cReadFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t I2cReadFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.flags)
  return _internal_flags();
}
inline void I2cReadFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.flags)
}
inline ::uint32_t I2cReadFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void I2cReadFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}

// optional uint32 len = 5;
inline bool I2cReadFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void I2cReadFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t I2cReadFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReadFtraceEvent.len)
  return _internal_len();
}
inline void I2cReadFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReadFtraceEvent.len)
}
inline ::uint32_t I2cReadFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void I2cReadFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// I2cWriteFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cWriteFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void I2cWriteFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t I2cWriteFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void I2cWriteFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.adapter_nr)
}
inline ::int32_t I2cWriteFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void I2cWriteFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 msg_nr = 2;
inline bool I2cWriteFtraceEvent::has_msg_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void I2cWriteFtraceEvent::clear_msg_nr() {
  _impl_.msg_nr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t I2cWriteFtraceEvent::msg_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.msg_nr)
  return _internal_msg_nr();
}
inline void I2cWriteFtraceEvent::set_msg_nr(::uint32_t value) {
  _internal_set_msg_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.msg_nr)
}
inline ::uint32_t I2cWriteFtraceEvent::_internal_msg_nr() const {
  return _impl_.msg_nr_;
}
inline void I2cWriteFtraceEvent::_internal_set_msg_nr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_nr_ = value;
}

// optional uint32 addr = 3;
inline bool I2cWriteFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void I2cWriteFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t I2cWriteFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.addr)
  return _internal_addr();
}
inline void I2cWriteFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.addr)
}
inline ::uint32_t I2cWriteFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void I2cWriteFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addr_ = value;
}

// optional uint32 flags = 4;
inline bool I2cWriteFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void I2cWriteFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t I2cWriteFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.flags)
  return _internal_flags();
}
inline void I2cWriteFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.flags)
}
inline ::uint32_t I2cWriteFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void I2cWriteFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}

// optional uint32 len = 5;
inline bool I2cWriteFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void I2cWriteFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t I2cWriteFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.len)
  return _internal_len();
}
inline void I2cWriteFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.len)
}
inline ::uint32_t I2cWriteFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void I2cWriteFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// optional uint32 buf = 6;
inline bool I2cWriteFtraceEvent::has_buf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void I2cWriteFtraceEvent::clear_buf() {
  _impl_.buf_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t I2cWriteFtraceEvent::buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cWriteFtraceEvent.buf)
  return _internal_buf();
}
inline void I2cWriteFtraceEvent::set_buf(::uint32_t value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cWriteFtraceEvent.buf)
}
inline ::uint32_t I2cWriteFtraceEvent::_internal_buf() const {
  return _impl_.buf_;
}
inline void I2cWriteFtraceEvent::_internal_set_buf(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.buf_ = value;
}

// -------------------------------------------------------------------

// I2cResultFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cResultFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void I2cResultFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t I2cResultFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cResultFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void I2cResultFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cResultFtraceEvent.adapter_nr)
}
inline ::int32_t I2cResultFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void I2cResultFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 nr_msgs = 2;
inline bool I2cResultFtraceEvent::has_nr_msgs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void I2cResultFtraceEvent::clear_nr_msgs() {
  _impl_.nr_msgs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t I2cResultFtraceEvent::nr_msgs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cResultFtraceEvent.nr_msgs)
  return _internal_nr_msgs();
}
inline void I2cResultFtraceEvent::set_nr_msgs(::uint32_t value) {
  _internal_set_nr_msgs(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cResultFtraceEvent.nr_msgs)
}
inline ::uint32_t I2cResultFtraceEvent::_internal_nr_msgs() const {
  return _impl_.nr_msgs_;
}
inline void I2cResultFtraceEvent::_internal_set_nr_msgs(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nr_msgs_ = value;
}

// optional int32 ret = 3;
inline bool I2cResultFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void I2cResultFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t I2cResultFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cResultFtraceEvent.ret)
  return _internal_ret();
}
inline void I2cResultFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cResultFtraceEvent.ret)
}
inline ::int32_t I2cResultFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void I2cResultFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// I2cReplyFtraceEvent

// optional int32 adapter_nr = 1;
inline bool I2cReplyFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void I2cReplyFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t I2cReplyFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void I2cReplyFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.adapter_nr)
}
inline ::int32_t I2cReplyFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void I2cReplyFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 msg_nr = 2;
inline bool I2cReplyFtraceEvent::has_msg_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void I2cReplyFtraceEvent::clear_msg_nr() {
  _impl_.msg_nr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t I2cReplyFtraceEvent::msg_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.msg_nr)
  return _internal_msg_nr();
}
inline void I2cReplyFtraceEvent::set_msg_nr(::uint32_t value) {
  _internal_set_msg_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.msg_nr)
}
inline ::uint32_t I2cReplyFtraceEvent::_internal_msg_nr() const {
  return _impl_.msg_nr_;
}
inline void I2cReplyFtraceEvent::_internal_set_msg_nr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_nr_ = value;
}

// optional uint32 addr = 3;
inline bool I2cReplyFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void I2cReplyFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t I2cReplyFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.addr)
  return _internal_addr();
}
inline void I2cReplyFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.addr)
}
inline ::uint32_t I2cReplyFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void I2cReplyFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addr_ = value;
}

// optional uint32 flags = 4;
inline bool I2cReplyFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void I2cReplyFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t I2cReplyFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.flags)
  return _internal_flags();
}
inline void I2cReplyFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.flags)
}
inline ::uint32_t I2cReplyFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void I2cReplyFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flags_ = value;
}

// optional uint32 len = 5;
inline bool I2cReplyFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void I2cReplyFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t I2cReplyFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.len)
  return _internal_len();
}
inline void I2cReplyFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.len)
}
inline ::uint32_t I2cReplyFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void I2cReplyFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// optional uint32 buf = 6;
inline bool I2cReplyFtraceEvent::has_buf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void I2cReplyFtraceEvent::clear_buf() {
  _impl_.buf_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t I2cReplyFtraceEvent::buf() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.I2cReplyFtraceEvent.buf)
  return _internal_buf();
}
inline void I2cReplyFtraceEvent::set_buf(::uint32_t value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.I2cReplyFtraceEvent.buf)
}
inline ::uint32_t I2cReplyFtraceEvent::_internal_buf() const {
  return _impl_.buf_;
}
inline void I2cReplyFtraceEvent::_internal_set_buf(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.buf_ = value;
}

// -------------------------------------------------------------------

// SmbusReadFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusReadFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SmbusReadFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SmbusReadFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void SmbusReadFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.adapter_nr)
}
inline ::int32_t SmbusReadFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void SmbusReadFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 flags = 2;
inline bool SmbusReadFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SmbusReadFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SmbusReadFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.flags)
  return _internal_flags();
}
inline void SmbusReadFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.flags)
}
inline ::uint32_t SmbusReadFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void SmbusReadFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.flags_ = value;
}

// optional uint32 addr = 3;
inline bool SmbusReadFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SmbusReadFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SmbusReadFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.addr)
  return _internal_addr();
}
inline void SmbusReadFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.addr)
}
inline ::uint32_t SmbusReadFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void SmbusReadFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.addr_ = value;
}

// optional uint32 command = 4;
inline bool SmbusReadFtraceEvent::has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SmbusReadFtraceEvent::clear_command() {
  _impl_.command_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SmbusReadFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.command)
  return _internal_command();
}
inline void SmbusReadFtraceEvent::set_command(::uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.command)
}
inline ::uint32_t SmbusReadFtraceEvent::_internal_command() const {
  return _impl_.command_;
}
inline void SmbusReadFtraceEvent::_internal_set_command(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.command_ = value;
}

// optional uint32 protocol = 5;
inline bool SmbusReadFtraceEvent::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SmbusReadFtraceEvent::clear_protocol() {
  _impl_.protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SmbusReadFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReadFtraceEvent.protocol)
  return _internal_protocol();
}
inline void SmbusReadFtraceEvent::set_protocol(::uint32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReadFtraceEvent.protocol)
}
inline ::uint32_t SmbusReadFtraceEvent::_internal_protocol() const {
  return _impl_.protocol_;
}
inline void SmbusReadFtraceEvent::_internal_set_protocol(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.protocol_ = value;
}

// -------------------------------------------------------------------

// SmbusWriteFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusWriteFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SmbusWriteFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SmbusWriteFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void SmbusWriteFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.adapter_nr)
}
inline ::int32_t SmbusWriteFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void SmbusWriteFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 addr = 2;
inline bool SmbusWriteFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SmbusWriteFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SmbusWriteFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.addr)
  return _internal_addr();
}
inline void SmbusWriteFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.addr)
}
inline ::uint32_t SmbusWriteFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void SmbusWriteFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.addr_ = value;
}

// optional uint32 flags = 3;
inline bool SmbusWriteFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SmbusWriteFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SmbusWriteFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.flags)
  return _internal_flags();
}
inline void SmbusWriteFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.flags)
}
inline ::uint32_t SmbusWriteFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void SmbusWriteFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.flags_ = value;
}

// optional uint32 command = 4;
inline bool SmbusWriteFtraceEvent::has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SmbusWriteFtraceEvent::clear_command() {
  _impl_.command_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SmbusWriteFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.command)
  return _internal_command();
}
inline void SmbusWriteFtraceEvent::set_command(::uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.command)
}
inline ::uint32_t SmbusWriteFtraceEvent::_internal_command() const {
  return _impl_.command_;
}
inline void SmbusWriteFtraceEvent::_internal_set_command(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.command_ = value;
}

// optional uint32 len = 5;
inline bool SmbusWriteFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SmbusWriteFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SmbusWriteFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.len)
  return _internal_len();
}
inline void SmbusWriteFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.len)
}
inline ::uint32_t SmbusWriteFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void SmbusWriteFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// optional uint32 protocol = 6;
inline bool SmbusWriteFtraceEvent::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SmbusWriteFtraceEvent::clear_protocol() {
  _impl_.protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SmbusWriteFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusWriteFtraceEvent.protocol)
  return _internal_protocol();
}
inline void SmbusWriteFtraceEvent::set_protocol(::uint32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusWriteFtraceEvent.protocol)
}
inline ::uint32_t SmbusWriteFtraceEvent::_internal_protocol() const {
  return _impl_.protocol_;
}
inline void SmbusWriteFtraceEvent::_internal_set_protocol(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.protocol_ = value;
}

// -------------------------------------------------------------------

// SmbusResultFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusResultFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SmbusResultFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void SmbusResultFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.adapter_nr)
}
inline ::int32_t SmbusResultFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void SmbusResultFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 addr = 2;
inline bool SmbusResultFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SmbusResultFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.addr)
  return _internal_addr();
}
inline void SmbusResultFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.addr)
}
inline ::uint32_t SmbusResultFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void SmbusResultFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.addr_ = value;
}

// optional uint32 flags = 3;
inline bool SmbusResultFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SmbusResultFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.flags)
  return _internal_flags();
}
inline void SmbusResultFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.flags)
}
inline ::uint32_t SmbusResultFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void SmbusResultFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.flags_ = value;
}

// optional uint32 read_write = 4;
inline bool SmbusResultFtraceEvent::has_read_write() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_read_write() {
  _impl_.read_write_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SmbusResultFtraceEvent::read_write() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.read_write)
  return _internal_read_write();
}
inline void SmbusResultFtraceEvent::set_read_write(::uint32_t value) {
  _internal_set_read_write(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.read_write)
}
inline ::uint32_t SmbusResultFtraceEvent::_internal_read_write() const {
  return _impl_.read_write_;
}
inline void SmbusResultFtraceEvent::_internal_set_read_write(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.read_write_ = value;
}

// optional uint32 command = 5;
inline bool SmbusResultFtraceEvent::has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_command() {
  _impl_.command_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SmbusResultFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.command)
  return _internal_command();
}
inline void SmbusResultFtraceEvent::set_command(::uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.command)
}
inline ::uint32_t SmbusResultFtraceEvent::_internal_command() const {
  return _impl_.command_;
}
inline void SmbusResultFtraceEvent::_internal_set_command(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.command_ = value;
}

// optional int32 res = 6;
inline bool SmbusResultFtraceEvent::has_res() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_res() {
  _impl_.res_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t SmbusResultFtraceEvent::res() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.res)
  return _internal_res();
}
inline void SmbusResultFtraceEvent::set_res(::int32_t value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.res)
}
inline ::int32_t SmbusResultFtraceEvent::_internal_res() const {
  return _impl_.res_;
}
inline void SmbusResultFtraceEvent::_internal_set_res(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.res_ = value;
}

// optional uint32 protocol = 7;
inline bool SmbusResultFtraceEvent::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SmbusResultFtraceEvent::clear_protocol() {
  _impl_.protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t SmbusResultFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusResultFtraceEvent.protocol)
  return _internal_protocol();
}
inline void SmbusResultFtraceEvent::set_protocol(::uint32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusResultFtraceEvent.protocol)
}
inline ::uint32_t SmbusResultFtraceEvent::_internal_protocol() const {
  return _impl_.protocol_;
}
inline void SmbusResultFtraceEvent::_internal_set_protocol(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.protocol_ = value;
}

// -------------------------------------------------------------------

// SmbusReplyFtraceEvent

// optional int32 adapter_nr = 1;
inline bool SmbusReplyFtraceEvent::has_adapter_nr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SmbusReplyFtraceEvent::clear_adapter_nr() {
  _impl_.adapter_nr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SmbusReplyFtraceEvent::adapter_nr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.adapter_nr)
  return _internal_adapter_nr();
}
inline void SmbusReplyFtraceEvent::set_adapter_nr(::int32_t value) {
  _internal_set_adapter_nr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.adapter_nr)
}
inline ::int32_t SmbusReplyFtraceEvent::_internal_adapter_nr() const {
  return _impl_.adapter_nr_;
}
inline void SmbusReplyFtraceEvent::_internal_set_adapter_nr(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adapter_nr_ = value;
}

// optional uint32 addr = 2;
inline bool SmbusReplyFtraceEvent::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SmbusReplyFtraceEvent::clear_addr() {
  _impl_.addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SmbusReplyFtraceEvent::addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.addr)
  return _internal_addr();
}
inline void SmbusReplyFtraceEvent::set_addr(::uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.addr)
}
inline ::uint32_t SmbusReplyFtraceEvent::_internal_addr() const {
  return _impl_.addr_;
}
inline void SmbusReplyFtraceEvent::_internal_set_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.addr_ = value;
}

// optional uint32 flags = 3;
inline bool SmbusReplyFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SmbusReplyFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SmbusReplyFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.flags)
  return _internal_flags();
}
inline void SmbusReplyFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.flags)
}
inline ::uint32_t SmbusReplyFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void SmbusReplyFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.flags_ = value;
}

// optional uint32 command = 4;
inline bool SmbusReplyFtraceEvent::has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SmbusReplyFtraceEvent::clear_command() {
  _impl_.command_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SmbusReplyFtraceEvent::command() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.command)
  return _internal_command();
}
inline void SmbusReplyFtraceEvent::set_command(::uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.command)
}
inline ::uint32_t SmbusReplyFtraceEvent::_internal_command() const {
  return _impl_.command_;
}
inline void SmbusReplyFtraceEvent::_internal_set_command(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.command_ = value;
}

// optional uint32 len = 5;
inline bool SmbusReplyFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SmbusReplyFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SmbusReplyFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.len)
  return _internal_len();
}
inline void SmbusReplyFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.len)
}
inline ::uint32_t SmbusReplyFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void SmbusReplyFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.len_ = value;
}

// optional uint32 protocol = 6;
inline bool SmbusReplyFtraceEvent::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SmbusReplyFtraceEvent::clear_protocol() {
  _impl_.protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SmbusReplyFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmbusReplyFtraceEvent.protocol)
  return _internal_protocol();
}
inline void SmbusReplyFtraceEvent::set_protocol(::uint32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmbusReplyFtraceEvent.protocol)
}
inline ::uint32_t SmbusReplyFtraceEvent::_internal_protocol() const {
  return _impl_.protocol_;
}
inline void SmbusReplyFtraceEvent::_internal_set_protocol(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.protocol_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fi2c_2eproto_2epb_2eh
