// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/oom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto;
namespace perfetto {
namespace protos {
class MarkVictimFtraceEvent;
struct MarkVictimFtraceEventDefaultTypeInternal;
extern MarkVictimFtraceEventDefaultTypeInternal _MarkVictimFtraceEvent_default_instance_;
class OomScoreAdjUpdateFtraceEvent;
struct OomScoreAdjUpdateFtraceEventDefaultTypeInternal;
extern OomScoreAdjUpdateFtraceEventDefaultTypeInternal _OomScoreAdjUpdateFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::MarkVictimFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::MarkVictimFtraceEvent>(Arena*);
template <>
::perfetto::protos::OomScoreAdjUpdateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::OomScoreAdjUpdateFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class OomScoreAdjUpdateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.OomScoreAdjUpdateFtraceEvent) */ {
 public:
  inline OomScoreAdjUpdateFtraceEvent() : OomScoreAdjUpdateFtraceEvent(nullptr) {}
  ~OomScoreAdjUpdateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OomScoreAdjUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OomScoreAdjUpdateFtraceEvent(const OomScoreAdjUpdateFtraceEvent& from);
  OomScoreAdjUpdateFtraceEvent(OomScoreAdjUpdateFtraceEvent&& from) noexcept
    : OomScoreAdjUpdateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline OomScoreAdjUpdateFtraceEvent& operator=(const OomScoreAdjUpdateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OomScoreAdjUpdateFtraceEvent& operator=(OomScoreAdjUpdateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OomScoreAdjUpdateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const OomScoreAdjUpdateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const OomScoreAdjUpdateFtraceEvent*>(
               &_OomScoreAdjUpdateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OomScoreAdjUpdateFtraceEvent& a, OomScoreAdjUpdateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(OomScoreAdjUpdateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OomScoreAdjUpdateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OomScoreAdjUpdateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OomScoreAdjUpdateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OomScoreAdjUpdateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OomScoreAdjUpdateFtraceEvent& from) {
    OomScoreAdjUpdateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OomScoreAdjUpdateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.OomScoreAdjUpdateFtraceEvent";
  }
  protected:
  explicit OomScoreAdjUpdateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommFieldNumber = 1,
    kOomScoreAdjFieldNumber = 2,
    kPidFieldNumber = 3,
  };
  // optional string comm = 1;
  bool has_comm() const;
  void clear_comm() ;
  const std::string& comm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_comm(Arg_&& arg, Args_... args);
  std::string* mutable_comm();
  PROTOBUF_NODISCARD std::string* release_comm();
  void set_allocated_comm(std::string* ptr);

  private:
  const std::string& _internal_comm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comm(
      const std::string& value);
  std::string* _internal_mutable_comm();

  public:
  // optional int32 oom_score_adj = 2;
  bool has_oom_score_adj() const;
  void clear_oom_score_adj() ;
  ::int32_t oom_score_adj() const;
  void set_oom_score_adj(::int32_t value);

  private:
  ::int32_t _internal_oom_score_adj() const;
  void _internal_set_oom_score_adj(::int32_t value);

  public:
  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.OomScoreAdjUpdateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comm_;
    ::int32_t oom_score_adj_;
    ::int32_t pid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto;
};// -------------------------------------------------------------------

class MarkVictimFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.MarkVictimFtraceEvent) */ {
 public:
  inline MarkVictimFtraceEvent() : MarkVictimFtraceEvent(nullptr) {}
  ~MarkVictimFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarkVictimFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarkVictimFtraceEvent(const MarkVictimFtraceEvent& from);
  MarkVictimFtraceEvent(MarkVictimFtraceEvent&& from) noexcept
    : MarkVictimFtraceEvent() {
    *this = ::std::move(from);
  }

  inline MarkVictimFtraceEvent& operator=(const MarkVictimFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkVictimFtraceEvent& operator=(MarkVictimFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkVictimFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkVictimFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const MarkVictimFtraceEvent*>(
               &_MarkVictimFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarkVictimFtraceEvent& a, MarkVictimFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkVictimFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkVictimFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkVictimFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkVictimFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarkVictimFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarkVictimFtraceEvent& from) {
    MarkVictimFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkVictimFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.MarkVictimFtraceEvent";
  }
  protected:
  explicit MarkVictimFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.MarkVictimFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t pid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OomScoreAdjUpdateFtraceEvent

// optional string comm = 1;
inline bool OomScoreAdjUpdateFtraceEvent::has_comm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OomScoreAdjUpdateFtraceEvent::clear_comm() {
  _impl_.comm_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OomScoreAdjUpdateFtraceEvent::comm() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.OomScoreAdjUpdateFtraceEvent.comm)
  return _internal_comm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OomScoreAdjUpdateFtraceEvent::set_comm(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.comm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.OomScoreAdjUpdateFtraceEvent.comm)
}
inline std::string* OomScoreAdjUpdateFtraceEvent::mutable_comm() {
  std::string* _s = _internal_mutable_comm();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.OomScoreAdjUpdateFtraceEvent.comm)
  return _s;
}
inline const std::string& OomScoreAdjUpdateFtraceEvent::_internal_comm() const {
  return _impl_.comm_.Get();
}
inline void OomScoreAdjUpdateFtraceEvent::_internal_set_comm(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.comm_.Set(value, GetArenaForAllocation());
}
inline std::string* OomScoreAdjUpdateFtraceEvent::_internal_mutable_comm() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.comm_.Mutable( GetArenaForAllocation());
}
inline std::string* OomScoreAdjUpdateFtraceEvent::release_comm() {
  // @@protoc_insertion_point(field_release:perfetto.protos.OomScoreAdjUpdateFtraceEvent.comm)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.comm_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OomScoreAdjUpdateFtraceEvent::set_allocated_comm(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.comm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.comm_.IsDefault()) {
          _impl_.comm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.OomScoreAdjUpdateFtraceEvent.comm)
}

// optional int32 oom_score_adj = 2;
inline bool OomScoreAdjUpdateFtraceEvent::has_oom_score_adj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OomScoreAdjUpdateFtraceEvent::clear_oom_score_adj() {
  _impl_.oom_score_adj_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t OomScoreAdjUpdateFtraceEvent::oom_score_adj() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.OomScoreAdjUpdateFtraceEvent.oom_score_adj)
  return _internal_oom_score_adj();
}
inline void OomScoreAdjUpdateFtraceEvent::set_oom_score_adj(::int32_t value) {
  _internal_set_oom_score_adj(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.OomScoreAdjUpdateFtraceEvent.oom_score_adj)
}
inline ::int32_t OomScoreAdjUpdateFtraceEvent::_internal_oom_score_adj() const {
  return _impl_.oom_score_adj_;
}
inline void OomScoreAdjUpdateFtraceEvent::_internal_set_oom_score_adj(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.oom_score_adj_ = value;
}

// optional int32 pid = 3;
inline bool OomScoreAdjUpdateFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void OomScoreAdjUpdateFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t OomScoreAdjUpdateFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.OomScoreAdjUpdateFtraceEvent.pid)
  return _internal_pid();
}
inline void OomScoreAdjUpdateFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.OomScoreAdjUpdateFtraceEvent.pid)
}
inline ::int32_t OomScoreAdjUpdateFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void OomScoreAdjUpdateFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// MarkVictimFtraceEvent

// optional int32 pid = 1;
inline bool MarkVictimFtraceEvent::has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MarkVictimFtraceEvent::clear_pid() {
  _impl_.pid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t MarkVictimFtraceEvent::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.MarkVictimFtraceEvent.pid)
  return _internal_pid();
}
inline void MarkVictimFtraceEvent::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.MarkVictimFtraceEvent.pid)
}
inline ::int32_t MarkVictimFtraceEvent::_internal_pid() const {
  return _impl_.pid_;
}
inline void MarkVictimFtraceEvent::_internal_set_pid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2foom_2eproto_2epb_2eh
