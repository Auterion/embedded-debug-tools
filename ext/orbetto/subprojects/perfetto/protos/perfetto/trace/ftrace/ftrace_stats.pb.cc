// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_stats.proto

#include "protos/perfetto/trace/ftrace/ftrace_stats.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR FtraceCpuStats::FtraceCpuStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cpu_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.entries_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.overrun_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.commit_overrun_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bytes_read_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.oldest_event_ts_)*/ 0

  , /*decltype(_impl_.now_ts_)*/ 0

  , /*decltype(_impl_.dropped_events_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.read_events_)*/ ::uint64_t{0u}
} {}
struct FtraceCpuStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceCpuStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceCpuStatsDefaultTypeInternal() {}
  union {
    FtraceCpuStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceCpuStatsDefaultTypeInternal _FtraceCpuStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FtraceStats::FtraceStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cpu_stats_)*/{}
  , /*decltype(_impl_.unknown_ftrace_events_)*/{}
  , /*decltype(_impl_.failed_ftrace_events_)*/{}
  , /*decltype(_impl_.atrace_errors_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.phase_)*/ 0

  , /*decltype(_impl_.kernel_symbols_parsed_)*/ 0u

  , /*decltype(_impl_.kernel_symbols_mem_kb_)*/ 0u

  , /*decltype(_impl_.preserve_ftrace_buffer_)*/ false
} {}
struct FtraceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceStatsDefaultTypeInternal() {}
  union {
    FtraceStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceStatsDefaultTypeInternal _FtraceStats_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.entries_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.overrun_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.commit_overrun_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.bytes_read_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.oldest_event_ts_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.now_ts_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.dropped_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceCpuStats, _impl_.read_events_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.phase_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.cpu_stats_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.kernel_symbols_parsed_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.kernel_symbols_mem_kb_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.atrace_errors_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.unknown_ftrace_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.failed_ftrace_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceStats, _impl_.preserve_ftrace_buffer_),
    1,
    ~0u,
    2,
    3,
    0,
    ~0u,
    ~0u,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 17, -1, sizeof(::perfetto::protos::FtraceCpuStats)},
        { 26, 42, -1, sizeof(::perfetto::protos::FtraceStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_FtraceCpuStats_default_instance_._instance,
    &::perfetto::protos::_FtraceStats_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/protos/perfetto/trace/ftrace/ftrace_st"
    "ats.proto\022\017perfetto.protos\"\301\001\n\016FtraceCpu"
    "Stats\022\013\n\003cpu\030\001 \001(\004\022\017\n\007entries\030\002 \001(\004\022\017\n\007o"
    "verrun\030\003 \001(\004\022\026\n\016commit_overrun\030\004 \001(\004\022\022\n\n"
    "bytes_read\030\005 \001(\004\022\027\n\017oldest_event_ts\030\006 \001("
    "\001\022\016\n\006now_ts\030\007 \001(\001\022\026\n\016dropped_events\030\010 \001("
    "\004\022\023\n\013read_events\030\t \001(\004\"\346\002\n\013FtraceStats\0221"
    "\n\005phase\030\001 \001(\0162\".perfetto.protos.FtraceSt"
    "ats.Phase\0222\n\tcpu_stats\030\002 \003(\0132\037.perfetto."
    "protos.FtraceCpuStats\022\035\n\025kernel_symbols_"
    "parsed\030\003 \001(\r\022\035\n\025kernel_symbols_mem_kb\030\004 "
    "\001(\r\022\025\n\ratrace_errors\030\005 \001(\t\022\035\n\025unknown_ft"
    "race_events\030\006 \003(\t\022\034\n\024failed_ftrace_event"
    "s\030\007 \003(\t\022\036\n\026preserve_ftrace_buffer\030\010 \001(\010\""
    ">\n\005Phase\022\017\n\013UNSPECIFIED\020\000\022\022\n\016START_OF_TR"
    "ACE\020\001\022\020\n\014END_OF_TRACE\020\002"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto = {
    false,
    false,
    623,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto,
    "protos/perfetto/trace/ftrace/ftrace_stats.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FtraceStats_Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto[0];
}
bool FtraceStats_Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr FtraceStats_Phase FtraceStats::UNSPECIFIED;
constexpr FtraceStats_Phase FtraceStats::START_OF_TRACE;
constexpr FtraceStats_Phase FtraceStats::END_OF_TRACE;
constexpr FtraceStats_Phase FtraceStats::Phase_MIN;
constexpr FtraceStats_Phase FtraceStats::Phase_MAX;
constexpr int FtraceStats::Phase_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class FtraceCpuStats::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceCpuStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceCpuStats, _impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overrun(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commit_overrun(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_oldest_event_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_now_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dropped_events(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_read_events(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

FtraceCpuStats::FtraceCpuStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceCpuStats)
}
FtraceCpuStats::FtraceCpuStats(const FtraceCpuStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceCpuStats)
}

inline void FtraceCpuStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cpu_) { ::uint64_t{0u} }

    , decltype(_impl_.entries_) { ::uint64_t{0u} }

    , decltype(_impl_.overrun_) { ::uint64_t{0u} }

    , decltype(_impl_.commit_overrun_) { ::uint64_t{0u} }

    , decltype(_impl_.bytes_read_) { ::uint64_t{0u} }

    , decltype(_impl_.oldest_event_ts_) { 0 }

    , decltype(_impl_.now_ts_) { 0 }

    , decltype(_impl_.dropped_events_) { ::uint64_t{0u} }

    , decltype(_impl_.read_events_) { ::uint64_t{0u} }

  };
}

FtraceCpuStats::~FtraceCpuStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceCpuStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceCpuStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtraceCpuStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceCpuStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceCpuStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cpu_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dropped_events_) -
        reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.dropped_events_));
  }
  _impl_.read_events_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceCpuStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_entries(&has_bits);
          _impl_.entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 overrun = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_overrun(&has_bits);
          _impl_.overrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 commit_overrun = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_commit_overrun(&has_bits);
          _impl_.commit_overrun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 bytes_read = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_bytes_read(&has_bits);
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double oldest_event_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 49)) {
          _Internal::set_has_oldest_event_ts(&has_bits);
          _impl_.oldest_event_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional double now_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 57)) {
          _Internal::set_has_now_ts(&has_bits);
          _impl_.now_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 dropped_events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_dropped_events(&has_bits);
          _impl_.dropped_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 read_events = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_read_events(&has_bits);
          _impl_.read_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceCpuStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceCpuStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_cpu(), target);
  }

  // optional uint64 entries = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_entries(), target);
  }

  // optional uint64 overrun = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_overrun(), target);
  }

  // optional uint64 commit_overrun = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_commit_overrun(), target);
  }

  // optional uint64 bytes_read = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_bytes_read(), target);
  }

  // optional double oldest_event_ts = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_oldest_event_ts(), target);
  }

  // optional double now_ts = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_now_ts(), target);
  }

  // optional uint64 dropped_events = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_dropped_events(), target);
  }

  // optional uint64 read_events = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_read_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceCpuStats)
  return target;
}

::size_t FtraceCpuStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceCpuStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_cpu());
    }

    // optional uint64 entries = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_entries());
    }

    // optional uint64 overrun = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_overrun());
    }

    // optional uint64 commit_overrun = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_commit_overrun());
    }

    // optional uint64 bytes_read = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_bytes_read());
    }

    // optional double oldest_event_ts = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 9;
    }

    // optional double now_ts = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional uint64 dropped_events = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_dropped_events());
    }

  }
  // optional uint64 read_events = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_read_events());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceCpuStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceCpuStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceCpuStats::GetClassData() const { return &_class_data_; }


void FtraceCpuStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceCpuStats*>(&to_msg);
  auto& from = static_cast<const FtraceCpuStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceCpuStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entries_ = from._impl_.entries_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.overrun_ = from._impl_.overrun_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.commit_overrun_ = from._impl_.commit_overrun_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bytes_read_ = from._impl_.bytes_read_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.oldest_event_ts_ = from._impl_.oldest_event_ts_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.now_ts_ = from._impl_.now_ts_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.dropped_events_ = from._impl_.dropped_events_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_read_events(from._internal_read_events());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceCpuStats::CopyFrom(const FtraceCpuStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceCpuStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceCpuStats::IsInitialized() const {
  return true;
}

void FtraceCpuStats::InternalSwap(FtraceCpuStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceCpuStats, _impl_.read_events_)
      + sizeof(FtraceCpuStats::_impl_.read_events_)
      - PROTOBUF_FIELD_OFFSET(FtraceCpuStats, _impl_.cpu_)>(
          reinterpret_cast<char*>(&_impl_.cpu_),
          reinterpret_cast<char*>(&other->_impl_.cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceCpuStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto[0]);
}
// ===================================================================

class FtraceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceStats, _impl_._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernel_symbols_parsed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kernel_symbols_mem_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_atrace_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preserve_ftrace_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FtraceStats::FtraceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceStats)
}
FtraceStats::FtraceStats(const FtraceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cpu_stats_){from._impl_.cpu_stats_}
    , decltype(_impl_.unknown_ftrace_events_){from._impl_.unknown_ftrace_events_}
    , decltype(_impl_.failed_ftrace_events_){from._impl_.failed_ftrace_events_}
    , decltype(_impl_.atrace_errors_) {}

    , decltype(_impl_.phase_) {}

    , decltype(_impl_.kernel_symbols_parsed_) {}

    , decltype(_impl_.kernel_symbols_mem_kb_) {}

    , decltype(_impl_.preserve_ftrace_buffer_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.atrace_errors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.atrace_errors_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.atrace_errors_.Set(from._internal_atrace_errors(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.phase_, &from._impl_.phase_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.preserve_ftrace_buffer_) -
    reinterpret_cast<char*>(&_impl_.phase_)) + sizeof(_impl_.preserve_ftrace_buffer_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceStats)
}

inline void FtraceStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cpu_stats_){arena}
    , decltype(_impl_.unknown_ftrace_events_){arena}
    , decltype(_impl_.failed_ftrace_events_){arena}
    , decltype(_impl_.atrace_errors_) {}

    , decltype(_impl_.phase_) { 0 }

    , decltype(_impl_.kernel_symbols_parsed_) { 0u }

    , decltype(_impl_.kernel_symbols_mem_kb_) { 0u }

    , decltype(_impl_.preserve_ftrace_buffer_) { false }

  };
  _impl_.atrace_errors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.atrace_errors_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FtraceStats::~FtraceStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cpu_stats()->~RepeatedPtrField();
  _internal_mutable_unknown_ftrace_events()->~RepeatedPtrField();
  _internal_mutable_failed_ftrace_events()->~RepeatedPtrField();
  _impl_.atrace_errors_.Destroy();
}

void FtraceStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cpu_stats()->Clear();
  _internal_mutable_unknown_ftrace_events()->Clear();
  _internal_mutable_failed_ftrace_events()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.atrace_errors_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.phase_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.preserve_ftrace_buffer_) -
        reinterpret_cast<char*>(&_impl_.phase_)) + sizeof(_impl_.preserve_ftrace_buffer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .perfetto.protos.FtraceStats.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceStats_Phase_IsValid(static_cast<int>(val)))) {
            _internal_set_phase(static_cast<::perfetto::protos::FtraceStats_Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kernel_symbols_parsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_kernel_symbols_parsed(&has_bits);
          _impl_.kernel_symbols_parsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 kernel_symbols_mem_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_kernel_symbols_mem_kb(&has_bits);
          _impl_.kernel_symbols_mem_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string atrace_errors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_atrace_errors();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceStats.atrace_errors");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string unknown_ftrace_events = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unknown_ftrace_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceStats.unknown_ftrace_events");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string failed_ftrace_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_ftrace_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceStats.failed_ftrace_events");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool preserve_ftrace_buffer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_preserve_ftrace_buffer(&has_bits);
          _impl_.preserve_ftrace_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .perfetto.protos.FtraceStats.Phase phase = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_phase(), target);
  }

  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cpu_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_cpu_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 kernel_symbols_parsed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_kernel_symbols_parsed(), target);
  }

  // optional uint32 kernel_symbols_mem_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_kernel_symbols_mem_kb(), target);
  }

  // optional string atrace_errors = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_atrace_errors();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceStats.atrace_errors");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated string unknown_ftrace_events = 6;
  for (int i = 0, n = this->_internal_unknown_ftrace_events_size(); i < n; ++i) {
    const auto& s = this->_internal_unknown_ftrace_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceStats.unknown_ftrace_events");
    target = stream->WriteString(6, s, target);
  }

  // repeated string failed_ftrace_events = 7;
  for (int i = 0, n = this->_internal_failed_ftrace_events_size(); i < n; ++i) {
    const auto& s = this->_internal_failed_ftrace_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceStats.failed_ftrace_events");
    target = stream->WriteString(7, s, target);
  }

  // optional bool preserve_ftrace_buffer = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_preserve_ftrace_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceStats)
  return target;
}

::size_t FtraceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceCpuStats cpu_stats = 2;
  total_size += 1UL * this->_internal_cpu_stats_size();
  for (const auto& msg : this->_internal_cpu_stats()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string unknown_ftrace_events = 6;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_unknown_ftrace_events().size());
  for (int i = 0, n = _internal_unknown_ftrace_events().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_unknown_ftrace_events().Get(i));
  }

  // repeated string failed_ftrace_events = 7;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_failed_ftrace_events().size());
  for (int i = 0, n = _internal_failed_ftrace_events().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_failed_ftrace_events().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string atrace_errors = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_atrace_errors());
    }

    // optional .perfetto.protos.FtraceStats.Phase phase = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional uint32 kernel_symbols_parsed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kernel_symbols_parsed());
    }

    // optional uint32 kernel_symbols_mem_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_kernel_symbols_mem_kb());
    }

    // optional bool preserve_ftrace_buffer = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceStats::GetClassData() const { return &_class_data_; }


void FtraceStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceStats*>(&to_msg);
  auto& from = static_cast<const FtraceStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cpu_stats()->MergeFrom(from._internal_cpu_stats());
  _this->_internal_mutable_unknown_ftrace_events()->MergeFrom(from._internal_unknown_ftrace_events());
  _this->_internal_mutable_failed_ftrace_events()->MergeFrom(from._internal_failed_ftrace_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_atrace_errors(from._internal_atrace_errors());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.phase_ = from._impl_.phase_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kernel_symbols_parsed_ = from._impl_.kernel_symbols_parsed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kernel_symbols_mem_kb_ = from._impl_.kernel_symbols_mem_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preserve_ftrace_buffer_ = from._impl_.preserve_ftrace_buffer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceStats::CopyFrom(const FtraceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceStats::IsInitialized() const {
  return true;
}

void FtraceStats::InternalSwap(FtraceStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_cpu_stats()->InternalSwap(other->_internal_mutable_cpu_stats());
  _internal_mutable_unknown_ftrace_events()->InternalSwap(
      other->_internal_mutable_unknown_ftrace_events());
  _internal_mutable_failed_ftrace_events()->InternalSwap(
      other->_internal_mutable_failed_ftrace_events());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.atrace_errors_, lhs_arena,
                                       &other->_impl_.atrace_errors_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceStats, _impl_.preserve_ftrace_buffer_)
      + sizeof(FtraceStats::_impl_.preserve_ftrace_buffer_)
      - PROTOBUF_FIELD_OFFSET(FtraceStats, _impl_.phase_)>(
          reinterpret_cast<char*>(&_impl_.phase_),
          reinterpret_cast<char*>(&other->_impl_.phase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fstats_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceCpuStats*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceCpuStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceCpuStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceStats*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
