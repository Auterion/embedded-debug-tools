// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/ftrace_event_bundle.proto

#include "protos/perfetto/trace/ftrace/ftrace_event_bundle.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.switch_timestamp_)*/ {}
  ,/* _impl_._switch_timestamp_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.switch_prev_state_)*/ {}
  ,/* _impl_._switch_prev_state_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.switch_next_pid_)*/ {}
  ,/* _impl_._switch_next_pid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.switch_next_prio_)*/ {}
  ,/* _impl_._switch_next_prio_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.intern_table_)*/{}
  , /*decltype(_impl_.switch_next_comm_index_)*/ {}
  ,/* _impl_._switch_next_comm_index_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.waking_timestamp_)*/ {}
  ,/* _impl_._waking_timestamp_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.waking_pid_)*/ {}
  ,/* _impl_._waking_pid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.waking_target_cpu_)*/ {}
  ,/* _impl_._waking_target_cpu_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.waking_prio_)*/ {}
  ,/* _impl_._waking_prio_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.waking_comm_index_)*/ {}
  ,/* _impl_._waking_comm_index_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.waking_common_flags_)*/ {}
  ,/* _impl_._waking_common_flags_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FtraceEventBundle_CompactSchedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceEventBundle_CompactSchedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceEventBundle_CompactSchedDefaultTypeInternal() {}
  union {
    FtraceEventBundle_CompactSched _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceEventBundle_CompactSchedDefaultTypeInternal _FtraceEventBundle_CompactSched_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FtraceEventBundle::FtraceEventBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_.compact_sched_)*/nullptr
  , /*decltype(_impl_.cpu_)*/ 0u

  , /*decltype(_impl_.lost_events_)*/ false

  , /*decltype(_impl_.ftrace_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.boot_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.ftrace_clock_)*/ 0
} {}
struct FtraceEventBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtraceEventBundleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtraceEventBundleDefaultTypeInternal() {}
  union {
    FtraceEventBundle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtraceEventBundleDefaultTypeInternal _FtraceEventBundle_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.intern_table_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.switch_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.switch_prev_state_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.switch_next_pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.switch_next_prio_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.switch_next_comm_index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.waking_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.waking_pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.waking_target_cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.waking_prio_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.waking_comm_index_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle_CompactSched, _impl_.waking_common_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.cpu_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.event_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.lost_events_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.compact_sched_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.ftrace_clock_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.ftrace_timestamp_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::FtraceEventBundle, _impl_.boot_timestamp_),
    1,
    ~0u,
    2,
    0,
    5,
    3,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::perfetto::protos::FtraceEventBundle_CompactSched)},
        { 20, 35, -1, sizeof(::perfetto::protos::FtraceEventBundle)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_FtraceEventBundle_CompactSched_default_instance_._instance,
    &::perfetto::protos::_FtraceEventBundle_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n6protos/perfetto/trace/ftrace/ftrace_ev"
    "ent_bundle.proto\022\017perfetto.protos\032/proto"
    "s/perfetto/trace/ftrace/ftrace_event.pro"
    "to\"\201\005\n\021FtraceEventBundle\022\013\n\003cpu\030\001 \001(\r\022+\n"
    "\005event\030\002 \003(\0132\034.perfetto.protos.FtraceEve"
    "nt\022\023\n\013lost_events\030\003 \001(\010\022F\n\rcompact_sched"
    "\030\004 \001(\0132/.perfetto.protos.FtraceEventBund"
    "le.CompactSched\0222\n\014ftrace_clock\030\005 \001(\0162\034."
    "perfetto.protos.FtraceClock\022\030\n\020ftrace_ti"
    "mestamp\030\006 \001(\003\022\026\n\016boot_timestamp\030\007 \001(\003\032\356\002"
    "\n\014CompactSched\022\024\n\014intern_table\030\005 \003(\t\022\034\n\020"
    "switch_timestamp\030\001 \003(\004B\002\020\001\022\035\n\021switch_pre"
    "v_state\030\002 \003(\003B\002\020\001\022\033\n\017switch_next_pid\030\003 \003"
    "(\005B\002\020\001\022\034\n\020switch_next_prio\030\004 \003(\005B\002\020\001\022\"\n\026"
    "switch_next_comm_index\030\006 \003(\rB\002\020\001\022\034\n\020waki"
    "ng_timestamp\030\007 \003(\004B\002\020\001\022\026\n\nwaking_pid\030\010 \003"
    "(\005B\002\020\001\022\035\n\021waking_target_cpu\030\t \003(\005B\002\020\001\022\027\n"
    "\013waking_prio\030\n \003(\005B\002\020\001\022\035\n\021waking_comm_in"
    "dex\030\013 \003(\rB\002\020\001\022\037\n\023waking_common_flags\030\014 \003"
    "(\rB\002\020\001*\221\001\n\013FtraceClock\022\034\n\030FTRACE_CLOCK_U"
    "NSPECIFIED\020\000\022\030\n\024FTRACE_CLOCK_UNKNOWN\020\001\022\027"
    "\n\023FTRACE_CLOCK_GLOBAL\020\002\022\026\n\022FTRACE_CLOCK_"
    "LOCAL\020\003\022\031\n\025FTRACE_CLOCK_MONO_RAW\020\004"
};
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_deps[1] =
    {
        &::descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_2eproto,
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto = {
    false,
    false,
    914,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto,
    "protos/perfetto/trace/ftrace/ftrace_event_bundle.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_once,
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto);
namespace perfetto {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FtraceClock_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto);
  return file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto[0];
}
bool FtraceClock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class FtraceEventBundle_CompactSched::_Internal {
 public:
};

FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceEventBundle.CompactSched)
}
FtraceEventBundle_CompactSched::FtraceEventBundle_CompactSched(const FtraceEventBundle_CompactSched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceEventBundle_CompactSched* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.switch_timestamp_) { from._impl_.switch_timestamp_ }
    ,/* _impl_._switch_timestamp_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.switch_prev_state_) { from._impl_.switch_prev_state_ }
    ,/* _impl_._switch_prev_state_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.switch_next_pid_) { from._impl_.switch_next_pid_ }
    ,/* _impl_._switch_next_pid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.switch_next_prio_) { from._impl_.switch_next_prio_ }
    ,/* _impl_._switch_next_prio_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.intern_table_){from._impl_.intern_table_}
    , decltype(_impl_.switch_next_comm_index_) { from._impl_.switch_next_comm_index_ }
    ,/* _impl_._switch_next_comm_index_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_timestamp_) { from._impl_.waking_timestamp_ }
    ,/* _impl_._waking_timestamp_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_pid_) { from._impl_.waking_pid_ }
    ,/* _impl_._waking_pid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_target_cpu_) { from._impl_.waking_target_cpu_ }
    ,/* _impl_._waking_target_cpu_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_prio_) { from._impl_.waking_prio_ }
    ,/* _impl_._waking_prio_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_comm_index_) { from._impl_.waking_comm_index_ }
    ,/* _impl_._waking_comm_index_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_common_flags_) { from._impl_.waking_common_flags_ }
    ,/* _impl_._waking_common_flags_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEventBundle.CompactSched)
}

inline void FtraceEventBundle_CompactSched::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.switch_timestamp_) { arena }
    ,/* _impl_._switch_timestamp_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.switch_prev_state_) { arena }
    ,/* _impl_._switch_prev_state_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.switch_next_pid_) { arena }
    ,/* _impl_._switch_next_pid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.switch_next_prio_) { arena }
    ,/* _impl_._switch_next_prio_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.intern_table_){arena}
    , decltype(_impl_.switch_next_comm_index_) { arena }
    ,/* _impl_._switch_next_comm_index_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_timestamp_) { arena }
    ,/* _impl_._waking_timestamp_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_pid_) { arena }
    ,/* _impl_._waking_pid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_target_cpu_) { arena }
    ,/* _impl_._waking_target_cpu_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_prio_) { arena }
    ,/* _impl_._waking_prio_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_comm_index_) { arena }
    ,/* _impl_._waking_comm_index_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.waking_common_flags_) { arena }
    ,/* _impl_._waking_common_flags_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FtraceEventBundle_CompactSched::~FtraceEventBundle_CompactSched() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEventBundle.CompactSched)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceEventBundle_CompactSched::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.switch_timestamp_.~RepeatedField();
  _impl_.switch_prev_state_.~RepeatedField();
  _impl_.switch_next_pid_.~RepeatedField();
  _impl_.switch_next_prio_.~RepeatedField();
  _internal_mutable_intern_table()->~RepeatedPtrField();
  _impl_.switch_next_comm_index_.~RepeatedField();
  _impl_.waking_timestamp_.~RepeatedField();
  _impl_.waking_pid_.~RepeatedField();
  _impl_.waking_target_cpu_.~RepeatedField();
  _impl_.waking_prio_.~RepeatedField();
  _impl_.waking_comm_index_.~RepeatedField();
  _impl_.waking_common_flags_.~RepeatedField();
}

void FtraceEventBundle_CompactSched::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceEventBundle_CompactSched::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEventBundle.CompactSched)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_switch_timestamp()->Clear();
  _internal_mutable_switch_prev_state()->Clear();
  _internal_mutable_switch_next_pid()->Clear();
  _internal_mutable_switch_next_prio()->Clear();
  _internal_mutable_intern_table()->Clear();
  _internal_mutable_switch_next_comm_index()->Clear();
  _internal_mutable_waking_timestamp()->Clear();
  _internal_mutable_waking_pid()->Clear();
  _internal_mutable_waking_target_cpu()->Clear();
  _internal_mutable_waking_prio()->Clear();
  _internal_mutable_waking_comm_index()->Clear();
  _internal_mutable_waking_common_flags()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceEventBundle_CompactSched::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 switch_timestamp = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_switch_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_switch_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int64 switch_prev_state = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_switch_prev_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_switch_prev_state(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 switch_next_pid = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_switch_next_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_switch_next_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 switch_next_prio = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_switch_next_prio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_switch_next_prio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string intern_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_intern_table();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "perfetto.protos.FtraceEventBundle.CompactSched.intern_table");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 switch_next_comm_index = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_switch_next_comm_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 48) {
          _internal_add_switch_next_comm_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 waking_timestamp = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_waking_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 56) {
          _internal_add_waking_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 waking_pid = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waking_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_waking_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 waking_target_cpu = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waking_target_cpu(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 72) {
          _internal_add_waking_target_cpu(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 waking_prio = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_waking_prio(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 80) {
          _internal_add_waking_prio(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 waking_comm_index = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_waking_comm_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 88) {
          _internal_add_waking_comm_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 waking_common_flags = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_waking_common_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 96) {
          _internal_add_waking_common_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceEventBundle_CompactSched::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceEventBundle.CompactSched)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 switch_timestamp = 1 [packed = true];
  {
    int byte_size = _impl_._switch_timestamp_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_switch_timestamp(),
                                                 byte_size, target);
    }
  }

  // repeated int64 switch_prev_state = 2 [packed = true];
  {
    int byte_size = _impl_._switch_prev_state_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(2, _internal_switch_prev_state(),
                                                 byte_size, target);
    }
  }

  // repeated int32 switch_next_pid = 3 [packed = true];
  {
    int byte_size = _impl_._switch_next_pid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_switch_next_pid(),
                                                 byte_size, target);
    }
  }

  // repeated int32 switch_next_prio = 4 [packed = true];
  {
    int byte_size = _impl_._switch_next_prio_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(4, _internal_switch_next_prio(),
                                                 byte_size, target);
    }
  }

  // repeated string intern_table = 5;
  for (int i = 0, n = this->_internal_intern_table_size(); i < n; ++i) {
    const auto& s = this->_internal_intern_table(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.FtraceEventBundle.CompactSched.intern_table");
    target = stream->WriteString(5, s, target);
  }

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  {
    int byte_size = _impl_._switch_next_comm_index_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(6, _internal_switch_next_comm_index(),
                                                 byte_size, target);
    }
  }

  // repeated uint64 waking_timestamp = 7 [packed = true];
  {
    int byte_size = _impl_._waking_timestamp_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(7, _internal_waking_timestamp(),
                                                 byte_size, target);
    }
  }

  // repeated int32 waking_pid = 8 [packed = true];
  {
    int byte_size = _impl_._waking_pid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(8, _internal_waking_pid(),
                                                 byte_size, target);
    }
  }

  // repeated int32 waking_target_cpu = 9 [packed = true];
  {
    int byte_size = _impl_._waking_target_cpu_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(9, _internal_waking_target_cpu(),
                                                 byte_size, target);
    }
  }

  // repeated int32 waking_prio = 10 [packed = true];
  {
    int byte_size = _impl_._waking_prio_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(10, _internal_waking_prio(),
                                                 byte_size, target);
    }
  }

  // repeated uint32 waking_comm_index = 11 [packed = true];
  {
    int byte_size = _impl_._waking_comm_index_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(11, _internal_waking_comm_index(),
                                                 byte_size, target);
    }
  }

  // repeated uint32 waking_common_flags = 12 [packed = true];
  {
    int byte_size = _impl_._waking_common_flags_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(12, _internal_waking_common_flags(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceEventBundle.CompactSched)
  return target;
}

::size_t FtraceEventBundle_CompactSched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEventBundle.CompactSched)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 switch_timestamp = 1 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_switch_timestamp())
    ;
    _impl_._switch_timestamp_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int64 switch_prev_state = 2 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_switch_prev_state())
    ;
    _impl_._switch_prev_state_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 switch_next_pid = 3 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_switch_next_pid())
    ;
    _impl_._switch_next_pid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 switch_next_prio = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_switch_next_prio())
    ;
    _impl_._switch_next_prio_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated string intern_table = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_intern_table().size());
  for (int i = 0, n = _internal_intern_table().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_intern_table().Get(i));
  }

  // repeated uint32 switch_next_comm_index = 6 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_switch_next_comm_index())
    ;
    _impl_._switch_next_comm_index_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint64 waking_timestamp = 7 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_waking_timestamp())
    ;
    _impl_._waking_timestamp_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 waking_pid = 8 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_waking_pid())
    ;
    _impl_._waking_pid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 waking_target_cpu = 9 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_waking_target_cpu())
    ;
    _impl_._waking_target_cpu_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated int32 waking_prio = 10 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_waking_prio())
    ;
    _impl_._waking_prio_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 waking_comm_index = 11 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_waking_comm_index())
    ;
    _impl_._waking_comm_index_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated uint32 waking_common_flags = 12 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_waking_common_flags())
    ;
    _impl_._waking_common_flags_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceEventBundle_CompactSched::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceEventBundle_CompactSched::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceEventBundle_CompactSched::GetClassData() const { return &_class_data_; }


void FtraceEventBundle_CompactSched::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceEventBundle_CompactSched*>(&to_msg);
  auto& from = static_cast<const FtraceEventBundle_CompactSched&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEventBundle.CompactSched)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.switch_timestamp_.MergeFrom(from._impl_.switch_timestamp_);
  _this->_impl_.switch_prev_state_.MergeFrom(from._impl_.switch_prev_state_);
  _this->_impl_.switch_next_pid_.MergeFrom(from._impl_.switch_next_pid_);
  _this->_impl_.switch_next_prio_.MergeFrom(from._impl_.switch_next_prio_);
  _this->_internal_mutable_intern_table()->MergeFrom(from._internal_intern_table());
  _this->_impl_.switch_next_comm_index_.MergeFrom(from._impl_.switch_next_comm_index_);
  _this->_impl_.waking_timestamp_.MergeFrom(from._impl_.waking_timestamp_);
  _this->_impl_.waking_pid_.MergeFrom(from._impl_.waking_pid_);
  _this->_impl_.waking_target_cpu_.MergeFrom(from._impl_.waking_target_cpu_);
  _this->_impl_.waking_prio_.MergeFrom(from._impl_.waking_prio_);
  _this->_impl_.waking_comm_index_.MergeFrom(from._impl_.waking_comm_index_);
  _this->_impl_.waking_common_flags_.MergeFrom(from._impl_.waking_common_flags_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceEventBundle_CompactSched::CopyFrom(const FtraceEventBundle_CompactSched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEventBundle.CompactSched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEventBundle_CompactSched::IsInitialized() const {
  return true;
}

void FtraceEventBundle_CompactSched::InternalSwap(FtraceEventBundle_CompactSched* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.switch_timestamp_.InternalSwap(&other->_impl_.switch_timestamp_);
  _impl_.switch_prev_state_.InternalSwap(&other->_impl_.switch_prev_state_);
  _impl_.switch_next_pid_.InternalSwap(&other->_impl_.switch_next_pid_);
  _impl_.switch_next_prio_.InternalSwap(&other->_impl_.switch_next_prio_);
  _internal_mutable_intern_table()->InternalSwap(
      other->_internal_mutable_intern_table());
  _impl_.switch_next_comm_index_.InternalSwap(&other->_impl_.switch_next_comm_index_);
  _impl_.waking_timestamp_.InternalSwap(&other->_impl_.waking_timestamp_);
  _impl_.waking_pid_.InternalSwap(&other->_impl_.waking_pid_);
  _impl_.waking_target_cpu_.InternalSwap(&other->_impl_.waking_target_cpu_);
  _impl_.waking_prio_.InternalSwap(&other->_impl_.waking_prio_);
  _impl_.waking_comm_index_.InternalSwap(&other->_impl_.waking_comm_index_);
  _impl_.waking_common_flags_.InternalSwap(&other->_impl_.waking_common_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceEventBundle_CompactSched::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto[0]);
}
// ===================================================================

class FtraceEventBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceEventBundle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FtraceEventBundle, _impl_._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lost_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::FtraceEventBundle_CompactSched& compact_sched(const FtraceEventBundle* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ftrace_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ftrace_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boot_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::perfetto::protos::FtraceEventBundle_CompactSched&
FtraceEventBundle::_Internal::compact_sched(const FtraceEventBundle* msg) {
  return *msg->_impl_.compact_sched_;
}
void FtraceEventBundle::clear_event() {
  _internal_mutable_event()->Clear();
}
FtraceEventBundle::FtraceEventBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceEventBundle)
}
FtraceEventBundle::FtraceEventBundle(const FtraceEventBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FtraceEventBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){from._impl_.event_}
    , decltype(_impl_.compact_sched_){nullptr}
    , decltype(_impl_.cpu_) {}

    , decltype(_impl_.lost_events_) {}

    , decltype(_impl_.ftrace_timestamp_) {}

    , decltype(_impl_.boot_timestamp_) {}

    , decltype(_impl_.ftrace_clock_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.compact_sched_ = new ::perfetto::protos::FtraceEventBundle_CompactSched(*from._impl_.compact_sched_);
  }
  ::memcpy(&_impl_.cpu_, &from._impl_.cpu_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ftrace_clock_) -
    reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.ftrace_clock_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceEventBundle)
}

inline void FtraceEventBundle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){arena}
    , decltype(_impl_.compact_sched_){nullptr}
    , decltype(_impl_.cpu_) { 0u }

    , decltype(_impl_.lost_events_) { false }

    , decltype(_impl_.ftrace_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.boot_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.ftrace_clock_) { 0 }

  };
}

FtraceEventBundle::~FtraceEventBundle() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceEventBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtraceEventBundle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_event()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.compact_sched_;
}

void FtraceEventBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FtraceEventBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceEventBundle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_event()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.compact_sched_ != nullptr);
    _impl_.compact_sched_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.cpu_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ftrace_clock_) -
        reinterpret_cast<char*>(&_impl_.cpu_)) + sizeof(_impl_.ftrace_clock_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtraceEventBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          _impl_.cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .perfetto.protos.FtraceEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool lost_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_lost_events(&has_bits);
          _impl_.lost_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::FtraceClock_IsValid(static_cast<int>(val)))) {
            _internal_set_ftrace_clock(static_cast<::perfetto::protos::FtraceClock>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 ftrace_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_ftrace_timestamp(&has_bits);
          _impl_.ftrace_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 boot_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_boot_timestamp(&has_bits);
          _impl_.boot_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FtraceEventBundle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceEventBundle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cpu(), target);
  }

  // repeated .perfetto.protos.FtraceEvent event = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool lost_events = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_lost_events(), target);
  }

  // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::compact_sched(this),
        _Internal::compact_sched(this).GetCachedSize(), target, stream);
  }

  // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_ftrace_clock(), target);
  }

  // optional int64 ftrace_timestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_ftrace_timestamp(), target);
  }

  // optional int64 boot_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        7, this->_internal_boot_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceEventBundle)
  return target;
}

::size_t FtraceEventBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceEventBundle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceEvent event = 2;
  total_size += 1UL * this->_internal_event_size();
  for (const auto& msg : this->_internal_event()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.FtraceEventBundle.CompactSched compact_sched = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.compact_sched_);
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cpu());
    }

    // optional bool lost_events = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional int64 ftrace_timestamp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_ftrace_timestamp());
    }

    // optional int64 boot_timestamp = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_boot_timestamp());
    }

    // optional .perfetto.protos.FtraceClock ftrace_clock = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_ftrace_clock());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtraceEventBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FtraceEventBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtraceEventBundle::GetClassData() const { return &_class_data_; }


void FtraceEventBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FtraceEventBundle*>(&to_msg);
  auto& from = static_cast<const FtraceEventBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceEventBundle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_event()->MergeFrom(from._internal_event());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_compact_sched()->::perfetto::protos::FtraceEventBundle_CompactSched::MergeFrom(
          from._internal_compact_sched());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cpu_ = from._impl_.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lost_events_ = from._impl_.lost_events_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ftrace_timestamp_ = from._impl_.ftrace_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.boot_timestamp_ = from._impl_.boot_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ftrace_clock_ = from._impl_.ftrace_clock_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtraceEventBundle::CopyFrom(const FtraceEventBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceEventBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceEventBundle::IsInitialized() const {
  return true;
}

void FtraceEventBundle::InternalSwap(FtraceEventBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_event()->InternalSwap(other->_internal_mutable_event());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceEventBundle, _impl_.ftrace_clock_)
      + sizeof(FtraceEventBundle::_impl_.ftrace_clock_)
      - PROTOBUF_FIELD_OFFSET(FtraceEventBundle, _impl_.compact_sched_)>(
          reinterpret_cast<char*>(&_impl_.compact_sched_),
          reinterpret_cast<char*>(&other->_impl_.compact_sched_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FtraceEventBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fftrace_5fevent_5fbundle_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEventBundle_CompactSched*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle_CompactSched >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceEventBundle_CompactSched >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceEventBundle*
Arena::CreateMaybeMessage< ::perfetto::protos::FtraceEventBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceEventBundle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
