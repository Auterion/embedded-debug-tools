// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/cgroup.proto

#include "protos/perfetto/trace/ftrace/cgroup.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR CgroupAttachTaskFtraceEvent::CgroupAttachTaskFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_root_)*/ 0

  , /*decltype(_impl_.dst_id_)*/ 0

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.dst_level_)*/ 0
} {}
struct CgroupAttachTaskFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupAttachTaskFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupAttachTaskFtraceEventDefaultTypeInternal() {}
  union {
    CgroupAttachTaskFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupAttachTaskFtraceEventDefaultTypeInternal _CgroupAttachTaskFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupMkdirFtraceEvent::CgroupMkdirFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_.level_)*/ 0
} {}
struct CgroupMkdirFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupMkdirFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupMkdirFtraceEventDefaultTypeInternal() {}
  union {
    CgroupMkdirFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupMkdirFtraceEventDefaultTypeInternal _CgroupMkdirFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupRemountFtraceEvent::CgroupRemountFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.ss_mask_)*/ 0u
} {}
struct CgroupRemountFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupRemountFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupRemountFtraceEventDefaultTypeInternal() {}
  union {
    CgroupRemountFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupRemountFtraceEventDefaultTypeInternal _CgroupRemountFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupRmdirFtraceEvent::CgroupRmdirFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_.level_)*/ 0
} {}
struct CgroupRmdirFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupRmdirFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupRmdirFtraceEventDefaultTypeInternal() {}
  union {
    CgroupRmdirFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupRmdirFtraceEventDefaultTypeInternal _CgroupRmdirFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupTransferTasksFtraceEvent::CgroupTransferTasksFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_root_)*/ 0

  , /*decltype(_impl_.dst_id_)*/ 0

  , /*decltype(_impl_.pid_)*/ 0

  , /*decltype(_impl_.dst_level_)*/ 0
} {}
struct CgroupTransferTasksFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupTransferTasksFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupTransferTasksFtraceEventDefaultTypeInternal() {}
  union {
    CgroupTransferTasksFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupTransferTasksFtraceEventDefaultTypeInternal _CgroupTransferTasksFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupDestroyRootFtraceEvent::CgroupDestroyRootFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.ss_mask_)*/ 0u
} {}
struct CgroupDestroyRootFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupDestroyRootFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupDestroyRootFtraceEventDefaultTypeInternal() {}
  union {
    CgroupDestroyRootFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupDestroyRootFtraceEventDefaultTypeInternal _CgroupDestroyRootFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupReleaseFtraceEvent::CgroupReleaseFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_.level_)*/ 0
} {}
struct CgroupReleaseFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupReleaseFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupReleaseFtraceEventDefaultTypeInternal() {}
  union {
    CgroupReleaseFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupReleaseFtraceEventDefaultTypeInternal _CgroupReleaseFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupRenameFtraceEvent::CgroupRenameFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_.level_)*/ 0
} {}
struct CgroupRenameFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupRenameFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupRenameFtraceEventDefaultTypeInternal() {}
  union {
    CgroupRenameFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupRenameFtraceEventDefaultTypeInternal _CgroupRenameFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CgroupSetupRootFtraceEvent::CgroupSetupRootFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.root_)*/ 0

  , /*decltype(_impl_.ss_mask_)*/ 0u
} {}
struct CgroupSetupRootFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CgroupSetupRootFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CgroupSetupRootFtraceEventDefaultTypeInternal() {}
  union {
    CgroupSetupRootFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CgroupSetupRootFtraceEventDefaultTypeInternal _CgroupSetupRootFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.dst_root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.dst_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.comm_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.cname_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.dst_level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupAttachTaskFtraceEvent, _impl_.dst_path_),
    3,
    4,
    5,
    0,
    1,
    6,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _impl_.cname_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupMkdirFtraceEvent, _impl_.path_),
    2,
    3,
    0,
    4,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRemountFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRemountFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRemountFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRemountFtraceEvent, _impl_.ss_mask_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRemountFtraceEvent, _impl_.name_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _impl_.cname_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRmdirFtraceEvent, _impl_.path_),
    2,
    3,
    0,
    4,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.dst_root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.dst_id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.comm_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.cname_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.dst_level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupTransferTasksFtraceEvent, _impl_.dst_path_),
    3,
    4,
    5,
    0,
    1,
    6,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupDestroyRootFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupDestroyRootFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupDestroyRootFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupDestroyRootFtraceEvent, _impl_.ss_mask_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupDestroyRootFtraceEvent, _impl_.name_),
    1,
    2,
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _impl_.cname_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupReleaseFtraceEvent, _impl_.path_),
    2,
    3,
    0,
    4,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _impl_.cname_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupRenameFtraceEvent, _impl_.path_),
    2,
    3,
    0,
    4,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupSetupRootFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupSetupRootFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupSetupRootFtraceEvent, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupSetupRootFtraceEvent, _impl_.ss_mask_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::CgroupSetupRootFtraceEvent, _impl_.name_),
    1,
    2,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::perfetto::protos::CgroupAttachTaskFtraceEvent)},
        { 22, 35, -1, sizeof(::perfetto::protos::CgroupMkdirFtraceEvent)},
        { 40, 51, -1, sizeof(::perfetto::protos::CgroupRemountFtraceEvent)},
        { 54, 67, -1, sizeof(::perfetto::protos::CgroupRmdirFtraceEvent)},
        { 72, 87, -1, sizeof(::perfetto::protos::CgroupTransferTasksFtraceEvent)},
        { 94, 105, -1, sizeof(::perfetto::protos::CgroupDestroyRootFtraceEvent)},
        { 108, 121, -1, sizeof(::perfetto::protos::CgroupReleaseFtraceEvent)},
        { 126, 139, -1, sizeof(::perfetto::protos::CgroupRenameFtraceEvent)},
        { 144, 155, -1, sizeof(::perfetto::protos::CgroupSetupRootFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_CgroupAttachTaskFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupMkdirFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupRemountFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupRmdirFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupTransferTasksFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupDestroyRootFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupReleaseFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupRenameFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_CgroupSetupRootFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)protos/perfetto/trace/ftrace/cgroup.pr"
    "oto\022\017perfetto.protos\"\216\001\n\033CgroupAttachTas"
    "kFtraceEvent\022\020\n\010dst_root\030\001 \001(\005\022\016\n\006dst_id"
    "\030\002 \001(\005\022\013\n\003pid\030\003 \001(\005\022\014\n\004comm\030\004 \001(\t\022\r\n\005cna"
    "me\030\005 \001(\t\022\021\n\tdst_level\030\006 \001(\005\022\020\n\010dst_path\030"
    "\007 \001(\t\"^\n\026CgroupMkdirFtraceEvent\022\014\n\004root\030"
    "\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005cname\030\003 \001(\t\022\r\n\005leve"
    "l\030\004 \001(\005\022\014\n\004path\030\005 \001(\t\"G\n\030CgroupRemountFt"
    "raceEvent\022\014\n\004root\030\001 \001(\005\022\017\n\007ss_mask\030\002 \001(\r"
    "\022\014\n\004name\030\003 \001(\t\"^\n\026CgroupRmdirFtraceEvent"
    "\022\014\n\004root\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005cname\030\003 \001("
    "\t\022\r\n\005level\030\004 \001(\005\022\014\n\004path\030\005 \001(\t\"\221\001\n\036Cgrou"
    "pTransferTasksFtraceEvent\022\020\n\010dst_root\030\001 "
    "\001(\005\022\016\n\006dst_id\030\002 \001(\005\022\013\n\003pid\030\003 \001(\005\022\014\n\004comm"
    "\030\004 \001(\t\022\r\n\005cname\030\005 \001(\t\022\021\n\tdst_level\030\006 \001(\005"
    "\022\020\n\010dst_path\030\007 \001(\t\"K\n\034CgroupDestroyRootF"
    "traceEvent\022\014\n\004root\030\001 \001(\005\022\017\n\007ss_mask\030\002 \001("
    "\r\022\014\n\004name\030\003 \001(\t\"`\n\030CgroupReleaseFtraceEv"
    "ent\022\014\n\004root\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005cname\030\003"
    " \001(\t\022\r\n\005level\030\004 \001(\005\022\014\n\004path\030\005 \001(\t\"_\n\027Cgr"
    "oupRenameFtraceEvent\022\014\n\004root\030\001 \001(\005\022\n\n\002id"
    "\030\002 \001(\005\022\r\n\005cname\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\014\n\004"
    "path\030\005 \001(\t\"I\n\032CgroupSetupRootFtraceEvent"
    "\022\014\n\004root\030\001 \001(\005\022\017\n\007ss_mask\030\002 \001(\r\022\014\n\004name\030"
    "\003 \001(\t"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto = {
    false,
    false,
    965,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto,
    "protos/perfetto/trace/ftrace/cgroup.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class CgroupAttachTaskFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupAttachTaskFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupAttachTaskFtraceEvent, _impl_._has_bits_);
  static void set_has_dst_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dst_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dst_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CgroupAttachTaskFtraceEvent::CgroupAttachTaskFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupAttachTaskFtraceEvent)
}
CgroupAttachTaskFtraceEvent::CgroupAttachTaskFtraceEvent(const CgroupAttachTaskFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupAttachTaskFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cname_) {}

    , decltype(_impl_.dst_path_) {}

    , decltype(_impl_.dst_root_) {}

    , decltype(_impl_.dst_id_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.dst_level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cname_.Set(from._internal_cname(), _this->GetArenaForAllocation());
  }
  _impl_.dst_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.dst_path_.Set(from._internal_dst_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dst_root_, &from._impl_.dst_root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dst_level_) -
    reinterpret_cast<char*>(&_impl_.dst_root_)) + sizeof(_impl_.dst_level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupAttachTaskFtraceEvent)
}

inline void CgroupAttachTaskFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cname_) {}

    , decltype(_impl_.dst_path_) {}

    , decltype(_impl_.dst_root_) { 0 }

    , decltype(_impl_.dst_id_) { 0 }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.dst_level_) { 0 }

  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupAttachTaskFtraceEvent::~CgroupAttachTaskFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupAttachTaskFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupAttachTaskFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comm_.Destroy();
  _impl_.cname_.Destroy();
  _impl_.dst_path_.Destroy();
}

void CgroupAttachTaskFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupAttachTaskFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupAttachTaskFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dst_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.dst_root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dst_level_) -
        reinterpret_cast<char*>(&_impl_.dst_root_)) + sizeof(_impl_.dst_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupAttachTaskFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dst_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dst_root(&has_bits);
          _impl_.dst_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 dst_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_dst_id(&has_bits);
          _impl_.dst_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupAttachTaskFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupAttachTaskFtraceEvent.cname");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 dst_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_dst_level(&has_bits);
          _impl_.dst_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string dst_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dst_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupAttachTaskFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupAttachTaskFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dst_root = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_dst_root(), target);
  }

  // optional int32 dst_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_dst_id(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pid(), target);
  }

  // optional string comm = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupAttachTaskFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string cname = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupAttachTaskFtraceEvent.cname");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional int32 dst_level = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_dst_level(), target);
  }

  // optional string dst_path = 7;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_dst_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupAttachTaskFtraceEvent.dst_path");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupAttachTaskFtraceEvent)
  return target;
}

::size_t CgroupAttachTaskFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupAttachTaskFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string comm = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional string cname = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cname());
    }

    // optional string dst_path = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dst_path());
    }

    // optional int32 dst_root = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_root());
    }

    // optional int32 dst_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_id());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional int32 dst_level = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupAttachTaskFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupAttachTaskFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupAttachTaskFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupAttachTaskFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupAttachTaskFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupAttachTaskFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupAttachTaskFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cname(from._internal_cname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_dst_path(from._internal_dst_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dst_root_ = from._impl_.dst_root_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dst_id_ = from._impl_.dst_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.dst_level_ = from._impl_.dst_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupAttachTaskFtraceEvent::CopyFrom(const CgroupAttachTaskFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupAttachTaskFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupAttachTaskFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupAttachTaskFtraceEvent::InternalSwap(CgroupAttachTaskFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cname_, lhs_arena,
                                       &other->_impl_.cname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dst_path_, lhs_arena,
                                       &other->_impl_.dst_path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupAttachTaskFtraceEvent, _impl_.dst_level_)
      + sizeof(CgroupAttachTaskFtraceEvent::_impl_.dst_level_)
      - PROTOBUF_FIELD_OFFSET(CgroupAttachTaskFtraceEvent, _impl_.dst_root_)>(
          reinterpret_cast<char*>(&_impl_.dst_root_),
          reinterpret_cast<char*>(&other->_impl_.dst_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupAttachTaskFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[0]);
}
// ===================================================================

class CgroupMkdirFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupMkdirFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupMkdirFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CgroupMkdirFtraceEvent::CgroupMkdirFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupMkdirFtraceEvent)
}
CgroupMkdirFtraceEvent::CgroupMkdirFtraceEvent(const CgroupMkdirFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupMkdirFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cname_.Set(from._internal_cname(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupMkdirFtraceEvent)
}

inline void CgroupMkdirFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.id_) { 0 }

    , decltype(_impl_.level_) { 0 }

  };
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupMkdirFtraceEvent::~CgroupMkdirFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupMkdirFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupMkdirFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cname_.Destroy();
  _impl_.path_.Destroy();
}

void CgroupMkdirFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupMkdirFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupMkdirFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupMkdirFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupMkdirFtraceEvent.cname");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupMkdirFtraceEvent.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupMkdirFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupMkdirFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional string cname = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupMkdirFtraceEvent.cname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_level(), target);
  }

  // optional string path = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupMkdirFtraceEvent.path");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupMkdirFtraceEvent)
  return target;
}

::size_t CgroupMkdirFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupMkdirFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cname());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupMkdirFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupMkdirFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupMkdirFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupMkdirFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupMkdirFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupMkdirFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupMkdirFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cname(from._internal_cname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupMkdirFtraceEvent::CopyFrom(const CgroupMkdirFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupMkdirFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupMkdirFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupMkdirFtraceEvent::InternalSwap(CgroupMkdirFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cname_, lhs_arena,
                                       &other->_impl_.cname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupMkdirFtraceEvent, _impl_.level_)
      + sizeof(CgroupMkdirFtraceEvent::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CgroupMkdirFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupMkdirFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[1]);
}
// ===================================================================

class CgroupRemountFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupRemountFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupRemountFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ss_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CgroupRemountFtraceEvent::CgroupRemountFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupRemountFtraceEvent)
}
CgroupRemountFtraceEvent::CgroupRemountFtraceEvent(const CgroupRemountFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupRemountFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.ss_mask_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ss_mask_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.ss_mask_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupRemountFtraceEvent)
}

inline void CgroupRemountFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.ss_mask_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupRemountFtraceEvent::~CgroupRemountFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupRemountFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupRemountFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CgroupRemountFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupRemountFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupRemountFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ss_mask_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.ss_mask_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupRemountFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ss_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ss_mask(&has_bits);
          _impl_.ss_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupRemountFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupRemountFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupRemountFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional uint32 ss_mask = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_ss_mask(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupRemountFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupRemountFtraceEvent)
  return target;
}

::size_t CgroupRemountFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupRemountFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional uint32 ss_mask = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ss_mask());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupRemountFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupRemountFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupRemountFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupRemountFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupRemountFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupRemountFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupRemountFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ss_mask_ = from._impl_.ss_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupRemountFtraceEvent::CopyFrom(const CgroupRemountFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupRemountFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupRemountFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupRemountFtraceEvent::InternalSwap(CgroupRemountFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupRemountFtraceEvent, _impl_.ss_mask_)
      + sizeof(CgroupRemountFtraceEvent::_impl_.ss_mask_)
      - PROTOBUF_FIELD_OFFSET(CgroupRemountFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupRemountFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[2]);
}
// ===================================================================

class CgroupRmdirFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupRmdirFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupRmdirFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CgroupRmdirFtraceEvent::CgroupRmdirFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupRmdirFtraceEvent)
}
CgroupRmdirFtraceEvent::CgroupRmdirFtraceEvent(const CgroupRmdirFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupRmdirFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cname_.Set(from._internal_cname(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupRmdirFtraceEvent)
}

inline void CgroupRmdirFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.id_) { 0 }

    , decltype(_impl_.level_) { 0 }

  };
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupRmdirFtraceEvent::~CgroupRmdirFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupRmdirFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupRmdirFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cname_.Destroy();
  _impl_.path_.Destroy();
}

void CgroupRmdirFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupRmdirFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupRmdirFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupRmdirFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupRmdirFtraceEvent.cname");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupRmdirFtraceEvent.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupRmdirFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupRmdirFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional string cname = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupRmdirFtraceEvent.cname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_level(), target);
  }

  // optional string path = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupRmdirFtraceEvent.path");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupRmdirFtraceEvent)
  return target;
}

::size_t CgroupRmdirFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupRmdirFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cname());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupRmdirFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupRmdirFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupRmdirFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupRmdirFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupRmdirFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupRmdirFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupRmdirFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cname(from._internal_cname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupRmdirFtraceEvent::CopyFrom(const CgroupRmdirFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupRmdirFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupRmdirFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupRmdirFtraceEvent::InternalSwap(CgroupRmdirFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cname_, lhs_arena,
                                       &other->_impl_.cname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupRmdirFtraceEvent, _impl_.level_)
      + sizeof(CgroupRmdirFtraceEvent::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CgroupRmdirFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupRmdirFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[3]);
}
// ===================================================================

class CgroupTransferTasksFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupTransferTasksFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupTransferTasksFtraceEvent, _impl_._has_bits_);
  static void set_has_dst_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dst_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_comm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dst_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dst_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CgroupTransferTasksFtraceEvent::CgroupTransferTasksFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupTransferTasksFtraceEvent)
}
CgroupTransferTasksFtraceEvent::CgroupTransferTasksFtraceEvent(const CgroupTransferTasksFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupTransferTasksFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cname_) {}

    , decltype(_impl_.dst_path_) {}

    , decltype(_impl_.dst_root_) {}

    , decltype(_impl_.dst_id_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.dst_level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.comm_.Set(from._internal_comm(), _this->GetArenaForAllocation());
  }
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cname_.Set(from._internal_cname(), _this->GetArenaForAllocation());
  }
  _impl_.dst_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.dst_path_.Set(from._internal_dst_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.dst_root_, &from._impl_.dst_root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dst_level_) -
    reinterpret_cast<char*>(&_impl_.dst_root_)) + sizeof(_impl_.dst_level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupTransferTasksFtraceEvent)
}

inline void CgroupTransferTasksFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comm_) {}

    , decltype(_impl_.cname_) {}

    , decltype(_impl_.dst_path_) {}

    , decltype(_impl_.dst_root_) { 0 }

    , decltype(_impl_.dst_id_) { 0 }

    , decltype(_impl_.pid_) { 0 }

    , decltype(_impl_.dst_level_) { 0 }

  };
  _impl_.comm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.comm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupTransferTasksFtraceEvent::~CgroupTransferTasksFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupTransferTasksFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupTransferTasksFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.comm_.Destroy();
  _impl_.cname_.Destroy();
  _impl_.dst_path_.Destroy();
}

void CgroupTransferTasksFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupTransferTasksFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupTransferTasksFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.comm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dst_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.dst_root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dst_level_) -
        reinterpret_cast<char*>(&_impl_.dst_root_)) + sizeof(_impl_.dst_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupTransferTasksFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dst_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_dst_root(&has_bits);
          _impl_.dst_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 dst_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_dst_id(&has_bits);
          _impl_.dst_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string comm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_comm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupTransferTasksFtraceEvent.comm");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupTransferTasksFtraceEvent.cname");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 dst_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_dst_level(&has_bits);
          _impl_.dst_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string dst_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_dst_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupTransferTasksFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupTransferTasksFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dst_root = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_dst_root(), target);
  }

  // optional int32 dst_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_dst_id(), target);
  }

  // optional int32 pid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_pid(), target);
  }

  // optional string comm = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_comm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupTransferTasksFtraceEvent.comm");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string cname = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_cname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupTransferTasksFtraceEvent.cname");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional int32 dst_level = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_dst_level(), target);
  }

  // optional string dst_path = 7;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_dst_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupTransferTasksFtraceEvent.dst_path");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupTransferTasksFtraceEvent)
  return target;
}

::size_t CgroupTransferTasksFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupTransferTasksFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string comm = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_comm());
    }

    // optional string cname = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cname());
    }

    // optional string dst_path = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dst_path());
    }

    // optional int32 dst_root = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_root());
    }

    // optional int32 dst_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_id());
    }

    // optional int32 pid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_pid());
    }

    // optional int32 dst_level = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_dst_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupTransferTasksFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupTransferTasksFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupTransferTasksFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupTransferTasksFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupTransferTasksFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupTransferTasksFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupTransferTasksFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_comm(from._internal_comm());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cname(from._internal_cname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_dst_path(from._internal_dst_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dst_root_ = from._impl_.dst_root_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dst_id_ = from._impl_.dst_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.dst_level_ = from._impl_.dst_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupTransferTasksFtraceEvent::CopyFrom(const CgroupTransferTasksFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupTransferTasksFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupTransferTasksFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupTransferTasksFtraceEvent::InternalSwap(CgroupTransferTasksFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.comm_, lhs_arena,
                                       &other->_impl_.comm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cname_, lhs_arena,
                                       &other->_impl_.cname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dst_path_, lhs_arena,
                                       &other->_impl_.dst_path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupTransferTasksFtraceEvent, _impl_.dst_level_)
      + sizeof(CgroupTransferTasksFtraceEvent::_impl_.dst_level_)
      - PROTOBUF_FIELD_OFFSET(CgroupTransferTasksFtraceEvent, _impl_.dst_root_)>(
          reinterpret_cast<char*>(&_impl_.dst_root_),
          reinterpret_cast<char*>(&other->_impl_.dst_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupTransferTasksFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[4]);
}
// ===================================================================

class CgroupDestroyRootFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupDestroyRootFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupDestroyRootFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ss_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CgroupDestroyRootFtraceEvent::CgroupDestroyRootFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupDestroyRootFtraceEvent)
}
CgroupDestroyRootFtraceEvent::CgroupDestroyRootFtraceEvent(const CgroupDestroyRootFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupDestroyRootFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.ss_mask_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ss_mask_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.ss_mask_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupDestroyRootFtraceEvent)
}

inline void CgroupDestroyRootFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.ss_mask_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupDestroyRootFtraceEvent::~CgroupDestroyRootFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupDestroyRootFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupDestroyRootFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CgroupDestroyRootFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupDestroyRootFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupDestroyRootFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ss_mask_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.ss_mask_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupDestroyRootFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ss_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ss_mask(&has_bits);
          _impl_.ss_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupDestroyRootFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupDestroyRootFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupDestroyRootFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional uint32 ss_mask = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_ss_mask(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupDestroyRootFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupDestroyRootFtraceEvent)
  return target;
}

::size_t CgroupDestroyRootFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupDestroyRootFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional uint32 ss_mask = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ss_mask());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupDestroyRootFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupDestroyRootFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupDestroyRootFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupDestroyRootFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupDestroyRootFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupDestroyRootFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupDestroyRootFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ss_mask_ = from._impl_.ss_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupDestroyRootFtraceEvent::CopyFrom(const CgroupDestroyRootFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupDestroyRootFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupDestroyRootFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupDestroyRootFtraceEvent::InternalSwap(CgroupDestroyRootFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupDestroyRootFtraceEvent, _impl_.ss_mask_)
      + sizeof(CgroupDestroyRootFtraceEvent::_impl_.ss_mask_)
      - PROTOBUF_FIELD_OFFSET(CgroupDestroyRootFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupDestroyRootFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[5]);
}
// ===================================================================

class CgroupReleaseFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupReleaseFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupReleaseFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CgroupReleaseFtraceEvent::CgroupReleaseFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupReleaseFtraceEvent)
}
CgroupReleaseFtraceEvent::CgroupReleaseFtraceEvent(const CgroupReleaseFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupReleaseFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cname_.Set(from._internal_cname(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupReleaseFtraceEvent)
}

inline void CgroupReleaseFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.id_) { 0 }

    , decltype(_impl_.level_) { 0 }

  };
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupReleaseFtraceEvent::~CgroupReleaseFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupReleaseFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupReleaseFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cname_.Destroy();
  _impl_.path_.Destroy();
}

void CgroupReleaseFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupReleaseFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupReleaseFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupReleaseFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupReleaseFtraceEvent.cname");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupReleaseFtraceEvent.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupReleaseFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupReleaseFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional string cname = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupReleaseFtraceEvent.cname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_level(), target);
  }

  // optional string path = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupReleaseFtraceEvent.path");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupReleaseFtraceEvent)
  return target;
}

::size_t CgroupReleaseFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupReleaseFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cname());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupReleaseFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupReleaseFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupReleaseFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupReleaseFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupReleaseFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupReleaseFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupReleaseFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cname(from._internal_cname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupReleaseFtraceEvent::CopyFrom(const CgroupReleaseFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupReleaseFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupReleaseFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupReleaseFtraceEvent::InternalSwap(CgroupReleaseFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cname_, lhs_arena,
                                       &other->_impl_.cname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupReleaseFtraceEvent, _impl_.level_)
      + sizeof(CgroupReleaseFtraceEvent::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CgroupReleaseFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupReleaseFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[6]);
}
// ===================================================================

class CgroupRenameFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupRenameFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupRenameFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CgroupRenameFtraceEvent::CgroupRenameFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupRenameFtraceEvent)
}
CgroupRenameFtraceEvent::CgroupRenameFtraceEvent(const CgroupRenameFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupRenameFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.level_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cname_.Set(from._internal_cname(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupRenameFtraceEvent)
}

inline void CgroupRenameFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cname_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.id_) { 0 }

    , decltype(_impl_.level_) { 0 }

  };
  _impl_.cname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupRenameFtraceEvent::~CgroupRenameFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupRenameFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupRenameFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cname_.Destroy();
  _impl_.path_.Destroy();
}

void CgroupRenameFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupRenameFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupRenameFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupRenameFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupRenameFtraceEvent.cname");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupRenameFtraceEvent.path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupRenameFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupRenameFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_id(), target);
  }

  // optional string cname = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupRenameFtraceEvent.cname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_level(), target);
  }

  // optional string path = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupRenameFtraceEvent.path");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupRenameFtraceEvent)
  return target;
}

::size_t CgroupRenameFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupRenameFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cname());
    }

    // optional string path = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupRenameFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupRenameFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupRenameFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupRenameFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupRenameFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupRenameFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupRenameFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cname(from._internal_cname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupRenameFtraceEvent::CopyFrom(const CgroupRenameFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupRenameFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupRenameFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupRenameFtraceEvent::InternalSwap(CgroupRenameFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cname_, lhs_arena,
                                       &other->_impl_.cname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupRenameFtraceEvent, _impl_.level_)
      + sizeof(CgroupRenameFtraceEvent::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CgroupRenameFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupRenameFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[7]);
}
// ===================================================================

class CgroupSetupRootFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CgroupSetupRootFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CgroupSetupRootFtraceEvent, _impl_._has_bits_);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ss_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CgroupSetupRootFtraceEvent::CgroupSetupRootFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CgroupSetupRootFtraceEvent)
}
CgroupSetupRootFtraceEvent::CgroupSetupRootFtraceEvent(const CgroupSetupRootFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CgroupSetupRootFtraceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.root_) {}

    , decltype(_impl_.ss_mask_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.root_, &from._impl_.root_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ss_mask_) -
    reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.ss_mask_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CgroupSetupRootFtraceEvent)
}

inline void CgroupSetupRootFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.root_) { 0 }

    , decltype(_impl_.ss_mask_) { 0u }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CgroupSetupRootFtraceEvent::~CgroupSetupRootFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CgroupSetupRootFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CgroupSetupRootFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CgroupSetupRootFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CgroupSetupRootFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CgroupSetupRootFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.root_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ss_mask_) -
        reinterpret_cast<char*>(&_impl_.root_)) + sizeof(_impl_.ss_mask_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CgroupSetupRootFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_root(&has_bits);
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 ss_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_ss_mask(&has_bits);
          _impl_.ss_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "perfetto.protos.CgroupSetupRootFtraceEvent.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CgroupSetupRootFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CgroupSetupRootFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 root = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_root(), target);
  }

  // optional uint32 ss_mask = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_ss_mask(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "perfetto.protos.CgroupSetupRootFtraceEvent.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CgroupSetupRootFtraceEvent)
  return target;
}

::size_t CgroupSetupRootFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CgroupSetupRootFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 root = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_root());
    }

    // optional uint32 ss_mask = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ss_mask());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CgroupSetupRootFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CgroupSetupRootFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CgroupSetupRootFtraceEvent::GetClassData() const { return &_class_data_; }


void CgroupSetupRootFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CgroupSetupRootFtraceEvent*>(&to_msg);
  auto& from = static_cast<const CgroupSetupRootFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CgroupSetupRootFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.root_ = from._impl_.root_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ss_mask_ = from._impl_.ss_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CgroupSetupRootFtraceEvent::CopyFrom(const CgroupSetupRootFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CgroupSetupRootFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CgroupSetupRootFtraceEvent::IsInitialized() const {
  return true;
}

void CgroupSetupRootFtraceEvent::InternalSwap(CgroupSetupRootFtraceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CgroupSetupRootFtraceEvent, _impl_.ss_mask_)
      + sizeof(CgroupSetupRootFtraceEvent::_impl_.ss_mask_)
      - PROTOBUF_FIELD_OFFSET(CgroupSetupRootFtraceEvent, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CgroupSetupRootFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fcgroup_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupAttachTaskFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupAttachTaskFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupAttachTaskFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupMkdirFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupMkdirFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupMkdirFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupRemountFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupRemountFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupRemountFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupRmdirFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupRmdirFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupRmdirFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupTransferTasksFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupTransferTasksFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupTransferTasksFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupDestroyRootFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupDestroyRootFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupDestroyRootFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupReleaseFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupReleaseFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupReleaseFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupRenameFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupRenameFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupRenameFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CgroupSetupRootFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::CgroupSetupRootFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CgroupSetupRootFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
