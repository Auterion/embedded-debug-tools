// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/panel.proto

#include "protos/perfetto/trace/ftrace/panel.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR DsiCmdFifoStatusFtraceEvent::DsiCmdFifoStatusFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/ 0u

  , /*decltype(_impl_.payload_)*/ 0u
} {}
struct DsiCmdFifoStatusFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DsiCmdFifoStatusFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DsiCmdFifoStatusFtraceEventDefaultTypeInternal() {}
  union {
    DsiCmdFifoStatusFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DsiCmdFifoStatusFtraceEventDefaultTypeInternal _DsiCmdFifoStatusFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DsiRxFtraceEvent::DsiRxFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_)*/ 0u

  , /*decltype(_impl_.rx_buf_)*/ 0u
} {}
struct DsiRxFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DsiRxFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DsiRxFtraceEventDefaultTypeInternal() {}
  union {
    DsiRxFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DsiRxFtraceEventDefaultTypeInternal _DsiRxFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DsiTxFtraceEvent::DsiTxFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.last_)*/ 0u

  , /*decltype(_impl_.tx_buf_)*/ 0u

  , /*decltype(_impl_.type_)*/ 0u
} {}
struct DsiTxFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DsiTxFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DsiTxFtraceEventDefaultTypeInternal() {}
  union {
    DsiTxFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DsiTxFtraceEventDefaultTypeInternal _DsiTxFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiCmdFifoStatusFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiCmdFifoStatusFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiCmdFifoStatusFtraceEvent, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiCmdFifoStatusFtraceEvent, _impl_.payload_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiRxFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiRxFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiRxFtraceEvent, _impl_.cmd_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiRxFtraceEvent, _impl_.rx_buf_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiTxFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiTxFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiTxFtraceEvent, _impl_.last_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiTxFtraceEvent, _impl_.tx_buf_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::DsiTxFtraceEvent, _impl_.type_),
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::perfetto::protos::DsiCmdFifoStatusFtraceEvent)},
        { 12, 22, -1, sizeof(::perfetto::protos::DsiRxFtraceEvent)},
        { 24, 35, -1, sizeof(::perfetto::protos::DsiTxFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_DsiCmdFifoStatusFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_DsiRxFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_DsiTxFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(protos/perfetto/trace/ftrace/panel.pro"
    "to\022\017perfetto.protos\">\n\033DsiCmdFifoStatusF"
    "traceEvent\022\016\n\006header\030\001 \001(\r\022\017\n\007payload\030\002 "
    "\001(\r\"/\n\020DsiRxFtraceEvent\022\013\n\003cmd\030\001 \001(\r\022\016\n\006"
    "rx_buf\030\002 \001(\r\">\n\020DsiTxFtraceEvent\022\014\n\004last"
    "\030\001 \001(\r\022\016\n\006tx_buf\030\002 \001(\r\022\014\n\004type\030\003 \001(\r"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto = {
    false,
    false,
    236,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto,
    "protos/perfetto/trace/ftrace/panel.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class DsiCmdFifoStatusFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DsiCmdFifoStatusFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DsiCmdFifoStatusFtraceEvent, _impl_._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DsiCmdFifoStatusFtraceEvent::DsiCmdFifoStatusFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
}
DsiCmdFifoStatusFtraceEvent::DsiCmdFifoStatusFtraceEvent(const DsiCmdFifoStatusFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
}

inline void DsiCmdFifoStatusFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_) { 0u }

    , decltype(_impl_.payload_) { 0u }

  };
}

DsiCmdFifoStatusFtraceEvent::~DsiCmdFifoStatusFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DsiCmdFifoStatusFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DsiCmdFifoStatusFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DsiCmdFifoStatusFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.header_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.payload_) -
        reinterpret_cast<char*>(&_impl_.header_)) + sizeof(_impl_.payload_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DsiCmdFifoStatusFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_header(&has_bits);
          _impl_.header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_payload(&has_bits);
          _impl_.payload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DsiCmdFifoStatusFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_header(), target);
  }

  // optional uint32 payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  return target;
}

::size_t DsiCmdFifoStatusFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_header());
    }

    // optional uint32 payload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_payload());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DsiCmdFifoStatusFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DsiCmdFifoStatusFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DsiCmdFifoStatusFtraceEvent::GetClassData() const { return &_class_data_; }


void DsiCmdFifoStatusFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DsiCmdFifoStatusFtraceEvent*>(&to_msg);
  auto& from = static_cast<const DsiCmdFifoStatusFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.header_ = from._impl_.header_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.payload_ = from._impl_.payload_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DsiCmdFifoStatusFtraceEvent::CopyFrom(const DsiCmdFifoStatusFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DsiCmdFifoStatusFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsiCmdFifoStatusFtraceEvent::IsInitialized() const {
  return true;
}

void DsiCmdFifoStatusFtraceEvent::InternalSwap(DsiCmdFifoStatusFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DsiCmdFifoStatusFtraceEvent, _impl_.payload_)
      + sizeof(DsiCmdFifoStatusFtraceEvent::_impl_.payload_)
      - PROTOBUF_FIELD_OFFSET(DsiCmdFifoStatusFtraceEvent, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DsiCmdFifoStatusFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto[0]);
}
// ===================================================================

class DsiRxFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DsiRxFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DsiRxFtraceEvent, _impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rx_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DsiRxFtraceEvent::DsiRxFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DsiRxFtraceEvent)
}
DsiRxFtraceEvent::DsiRxFtraceEvent(const DsiRxFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DsiRxFtraceEvent)
}

inline void DsiRxFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_) { 0u }

    , decltype(_impl_.rx_buf_) { 0u }

  };
}

DsiRxFtraceEvent::~DsiRxFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DsiRxFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DsiRxFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DsiRxFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DsiRxFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DsiRxFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cmd_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rx_buf_) -
        reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.rx_buf_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DsiRxFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cmd(&has_bits);
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 rx_buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_rx_buf(&has_bits);
          _impl_.rx_buf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DsiRxFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DsiRxFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cmd(), target);
  }

  // optional uint32 rx_buf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_rx_buf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DsiRxFtraceEvent)
  return target;
}

::size_t DsiRxFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DsiRxFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cmd());
    }

    // optional uint32 rx_buf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rx_buf());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DsiRxFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DsiRxFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DsiRxFtraceEvent::GetClassData() const { return &_class_data_; }


void DsiRxFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DsiRxFtraceEvent*>(&to_msg);
  auto& from = static_cast<const DsiRxFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DsiRxFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cmd_ = from._impl_.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rx_buf_ = from._impl_.rx_buf_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DsiRxFtraceEvent::CopyFrom(const DsiRxFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DsiRxFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsiRxFtraceEvent::IsInitialized() const {
  return true;
}

void DsiRxFtraceEvent::InternalSwap(DsiRxFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DsiRxFtraceEvent, _impl_.rx_buf_)
      + sizeof(DsiRxFtraceEvent::_impl_.rx_buf_)
      - PROTOBUF_FIELD_OFFSET(DsiRxFtraceEvent, _impl_.cmd_)>(
          reinterpret_cast<char*>(&_impl_.cmd_),
          reinterpret_cast<char*>(&other->_impl_.cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DsiRxFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto[1]);
}
// ===================================================================

class DsiTxFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DsiTxFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DsiTxFtraceEvent, _impl_._has_bits_);
  static void set_has_last(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DsiTxFtraceEvent::DsiTxFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.DsiTxFtraceEvent)
}
DsiTxFtraceEvent::DsiTxFtraceEvent(const DsiTxFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.DsiTxFtraceEvent)
}

inline void DsiTxFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_) { 0u }

    , decltype(_impl_.tx_buf_) { 0u }

    , decltype(_impl_.type_) { 0u }

  };
}

DsiTxFtraceEvent::~DsiTxFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.DsiTxFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DsiTxFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DsiTxFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DsiTxFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.DsiTxFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.last_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.last_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DsiTxFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 last = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_last(&has_bits);
          _impl_.last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 tx_buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_tx_buf(&has_bits);
          _impl_.tx_buf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DsiTxFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.DsiTxFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 last = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_last(), target);
  }

  // optional uint32 tx_buf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_tx_buf(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.DsiTxFtraceEvent)
  return target;
}

::size_t DsiTxFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.DsiTxFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 last = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_last());
    }

    // optional uint32 tx_buf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tx_buf());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DsiTxFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DsiTxFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DsiTxFtraceEvent::GetClassData() const { return &_class_data_; }


void DsiTxFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DsiTxFtraceEvent*>(&to_msg);
  auto& from = static_cast<const DsiTxFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.DsiTxFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.last_ = from._impl_.last_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tx_buf_ = from._impl_.tx_buf_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DsiTxFtraceEvent::CopyFrom(const DsiTxFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.DsiTxFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsiTxFtraceEvent::IsInitialized() const {
  return true;
}

void DsiTxFtraceEvent::InternalSwap(DsiTxFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DsiTxFtraceEvent, _impl_.type_)
      + sizeof(DsiTxFtraceEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(DsiTxFtraceEvent, _impl_.last_)>(
          reinterpret_cast<char*>(&_impl_.last_),
          reinterpret_cast<char*>(&other->_impl_.last_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DsiTxFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fpanel_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::DsiCmdFifoStatusFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::DsiCmdFifoStatusFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DsiCmdFifoStatusFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DsiRxFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::DsiRxFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DsiRxFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::DsiTxFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::DsiTxFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::DsiTxFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
