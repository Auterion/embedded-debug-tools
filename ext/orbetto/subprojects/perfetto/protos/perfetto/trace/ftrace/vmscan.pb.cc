// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/vmscan.proto

#include "protos/perfetto/trace/ftrace/vmscan.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.may_writepage_)*/ 0

  , /*decltype(_impl_.gfp_flags_)*/ 0u
} {}
struct MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanDirectReclaimBeginFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanDirectReclaimBeginFtraceEventDefaultTypeInternal _MmVmscanDirectReclaimBeginFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nr_reclaimed_)*/ ::uint64_t{0u}
} {}
struct MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanDirectReclaimEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanDirectReclaimEndFtraceEventDefaultTypeInternal _MmVmscanDirectReclaimEndFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.order_)*/ 0

  , /*decltype(_impl_.zid_)*/ 0
} {}
struct MmVmscanKswapdWakeFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanKswapdWakeFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanKswapdWakeFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanKswapdWakeFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanKswapdWakeFtraceEventDefaultTypeInternal _MmVmscanKswapdWakeFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nid_)*/ 0
} {}
struct MmVmscanKswapdSleepFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmVmscanKswapdSleepFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmVmscanKswapdSleepFtraceEventDefaultTypeInternal() {}
  union {
    MmVmscanKswapdSleepFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmVmscanKswapdSleepFtraceEventDefaultTypeInternal _MmVmscanKswapdSleepFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cache_items_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.delta_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.lru_pgs_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.nr_objects_to_shrink_)*/ ::int64_t{0}

  , /*decltype(_impl_.pgs_scanned_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.gfp_flags_)*/ 0u

  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.shr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.shrink_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.total_scan_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.priority_)*/ 0
} {}
struct MmShrinkSlabStartFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmShrinkSlabStartFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmShrinkSlabStartFtraceEventDefaultTypeInternal() {}
  union {
    MmShrinkSlabStartFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmShrinkSlabStartFtraceEventDefaultTypeInternal _MmShrinkSlabStartFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_scan_)*/ ::int64_t{0}

  , /*decltype(_impl_.shr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.shrink_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.retval_)*/ 0

  , /*decltype(_impl_.nid_)*/ 0

  , /*decltype(_impl_.total_scan_)*/ ::int64_t{0}

  , /*decltype(_impl_.unused_scan_)*/ ::int64_t{0}
} {}
struct MmShrinkSlabEndFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MmShrinkSlabEndFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MmShrinkSlabEndFtraceEventDefaultTypeInternal() {}
  union {
    MmShrinkSlabEndFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MmShrinkSlabEndFtraceEventDefaultTypeInternal _MmShrinkSlabEndFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent, _impl_.may_writepage_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent, _impl_.gfp_flags_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent, _impl_.nr_reclaimed_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent, _impl_.zid_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent, _impl_.nid_),
    0,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.cache_items_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.delta_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.gfp_flags_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.lru_pgs_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.nr_objects_to_shrink_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.pgs_scanned_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.shr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.shrink_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.total_scan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.nid_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabStartFtraceEvent, _impl_.priority_),
    0,
    1,
    5,
    2,
    3,
    4,
    7,
    8,
    9,
    6,
    10,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.new_scan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.retval_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.shr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.shrink_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.total_scan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.unused_scan_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::MmShrinkSlabEndFtraceEvent, _impl_.nid_),
    0,
    3,
    1,
    2,
    5,
    6,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent)},
        { 14, 23, -1, sizeof(::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent)},
        { 24, 35, -1, sizeof(::perfetto::protos::MmVmscanKswapdWakeFtraceEvent)},
        { 38, 47, -1, sizeof(::perfetto::protos::MmVmscanKswapdSleepFtraceEvent)},
        { 48, 67, -1, sizeof(::perfetto::protos::MmShrinkSlabStartFtraceEvent)},
        { 78, 93, -1, sizeof(::perfetto::protos::MmShrinkSlabEndFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_MmVmscanDirectReclaimBeginFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmVmscanDirectReclaimEndFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmVmscanKswapdWakeFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmVmscanKswapdSleepFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmShrinkSlabStartFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_MmShrinkSlabEndFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)protos/perfetto/trace/ftrace/vmscan.pr"
    "oto\022\017perfetto.protos\"`\n%MmVmscanDirectRe"
    "claimBeginFtraceEvent\022\r\n\005order\030\001 \001(\005\022\025\n\r"
    "may_writepage\030\002 \001(\005\022\021\n\tgfp_flags\030\003 \001(\r\";"
    "\n#MmVmscanDirectReclaimEndFtraceEvent\022\024\n"
    "\014nr_reclaimed\030\001 \001(\004\"H\n\035MmVmscanKswapdWak"
    "eFtraceEvent\022\013\n\003nid\030\001 \001(\005\022\r\n\005order\030\002 \001(\005"
    "\022\013\n\003zid\030\003 \001(\005\"-\n\036MmVmscanKswapdSleepFtra"
    "ceEvent\022\013\n\003nid\030\001 \001(\005\"\351\001\n\034MmShrinkSlabSta"
    "rtFtraceEvent\022\023\n\013cache_items\030\001 \001(\004\022\r\n\005de"
    "lta\030\002 \001(\004\022\021\n\tgfp_flags\030\003 \001(\r\022\017\n\007lru_pgs\030"
    "\004 \001(\004\022\034\n\024nr_objects_to_shrink\030\005 \001(\003\022\023\n\013p"
    "gs_scanned\030\006 \001(\004\022\013\n\003shr\030\007 \001(\004\022\016\n\006shrink\030"
    "\010 \001(\004\022\022\n\ntotal_scan\030\t \001(\004\022\013\n\003nid\030\n \001(\005\022\020"
    "\n\010priority\030\013 \001(\005\"\221\001\n\032MmShrinkSlabEndFtra"
    "ceEvent\022\020\n\010new_scan\030\001 \001(\003\022\016\n\006retval\030\002 \001("
    "\005\022\013\n\003shr\030\003 \001(\004\022\016\n\006shrink\030\004 \001(\004\022\022\n\ntotal_"
    "scan\030\005 \001(\003\022\023\n\013unused_scan\030\006 \001(\003\022\013\n\003nid\030\007"
    " \001(\005"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto = {
    false,
    false,
    724,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto,
    "protos/perfetto/trace/ftrace/vmscan.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class MmVmscanDirectReclaimBeginFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanDirectReclaimBeginFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmVmscanDirectReclaimBeginFtraceEvent, _impl_._has_bits_);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_writepage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gfp_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}
MmVmscanDirectReclaimBeginFtraceEvent::MmVmscanDirectReclaimBeginFtraceEvent(const MmVmscanDirectReclaimBeginFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
}

inline void MmVmscanDirectReclaimBeginFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.may_writepage_) { 0 }

    , decltype(_impl_.gfp_flags_) { 0u }

  };
}

MmVmscanDirectReclaimBeginFtraceEvent::~MmVmscanDirectReclaimBeginFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanDirectReclaimBeginFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanDirectReclaimBeginFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanDirectReclaimBeginFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.order_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gfp_flags_) -
        reinterpret_cast<char*>(&_impl_.order_)) + sizeof(_impl_.gfp_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmVmscanDirectReclaimBeginFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 may_writepage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_may_writepage(&has_bits);
          _impl_.may_writepage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 gfp_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_gfp_flags(&has_bits);
          _impl_.gfp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmVmscanDirectReclaimBeginFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_order(), target);
  }

  // optional int32 may_writepage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_may_writepage(), target);
  }

  // optional uint32 gfp_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_gfp_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  return target;
}

::size_t MmVmscanDirectReclaimBeginFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional int32 may_writepage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_may_writepage());
    }

    // optional uint32 gfp_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gfp_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmVmscanDirectReclaimBeginFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmVmscanDirectReclaimBeginFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmVmscanDirectReclaimBeginFtraceEvent::GetClassData() const { return &_class_data_; }


void MmVmscanDirectReclaimBeginFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmVmscanDirectReclaimBeginFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmVmscanDirectReclaimBeginFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.may_writepage_ = from._impl_.may_writepage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gfp_flags_ = from._impl_.gfp_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmVmscanDirectReclaimBeginFtraceEvent::CopyFrom(const MmVmscanDirectReclaimBeginFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanDirectReclaimBeginFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanDirectReclaimBeginFtraceEvent::InternalSwap(MmVmscanDirectReclaimBeginFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmVmscanDirectReclaimBeginFtraceEvent, _impl_.gfp_flags_)
      + sizeof(MmVmscanDirectReclaimBeginFtraceEvent::_impl_.gfp_flags_)
      - PROTOBUF_FIELD_OFFSET(MmVmscanDirectReclaimBeginFtraceEvent, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmVmscanDirectReclaimBeginFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[0]);
}
// ===================================================================

class MmVmscanDirectReclaimEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanDirectReclaimEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmVmscanDirectReclaimEndFtraceEvent, _impl_._has_bits_);
  static void set_has_nr_reclaimed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}
MmVmscanDirectReclaimEndFtraceEvent::MmVmscanDirectReclaimEndFtraceEvent(const MmVmscanDirectReclaimEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
}

inline void MmVmscanDirectReclaimEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nr_reclaimed_) { ::uint64_t{0u} }

  };
}

MmVmscanDirectReclaimEndFtraceEvent::~MmVmscanDirectReclaimEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanDirectReclaimEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanDirectReclaimEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanDirectReclaimEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nr_reclaimed_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmVmscanDirectReclaimEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 nr_reclaimed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nr_reclaimed(&has_bits);
          _impl_.nr_reclaimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmVmscanDirectReclaimEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 nr_reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_nr_reclaimed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  return target;
}

::size_t MmVmscanDirectReclaimEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 nr_reclaimed = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_nr_reclaimed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmVmscanDirectReclaimEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmVmscanDirectReclaimEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmVmscanDirectReclaimEndFtraceEvent::GetClassData() const { return &_class_data_; }


void MmVmscanDirectReclaimEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmVmscanDirectReclaimEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmVmscanDirectReclaimEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_nr_reclaimed(from._internal_nr_reclaimed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmVmscanDirectReclaimEndFtraceEvent::CopyFrom(const MmVmscanDirectReclaimEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanDirectReclaimEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanDirectReclaimEndFtraceEvent::InternalSwap(MmVmscanDirectReclaimEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.nr_reclaimed_, other->_impl_.nr_reclaimed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MmVmscanDirectReclaimEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[1]);
}
// ===================================================================

class MmVmscanKswapdWakeFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanKswapdWakeFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmVmscanKswapdWakeFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}
MmVmscanKswapdWakeFtraceEvent::MmVmscanKswapdWakeFtraceEvent(const MmVmscanKswapdWakeFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
}

inline void MmVmscanKswapdWakeFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.order_) { 0 }

    , decltype(_impl_.zid_) { 0 }

  };
}

MmVmscanKswapdWakeFtraceEvent::~MmVmscanKswapdWakeFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanKswapdWakeFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanKswapdWakeFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanKswapdWakeFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.nid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zid_) -
        reinterpret_cast<char*>(&_impl_.nid_)) + sizeof(_impl_.zid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmVmscanKswapdWakeFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_zid(&has_bits);
          _impl_.zid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmVmscanKswapdWakeFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  // optional int32 order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_order(), target);
  }

  // optional int32 zid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_zid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  return target;
}

::size_t MmVmscanKswapdWakeFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional int32 order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_order());
    }

    // optional int32 zid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmVmscanKswapdWakeFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmVmscanKswapdWakeFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmVmscanKswapdWakeFtraceEvent::GetClassData() const { return &_class_data_; }


void MmVmscanKswapdWakeFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmVmscanKswapdWakeFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmVmscanKswapdWakeFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.zid_ = from._impl_.zid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmVmscanKswapdWakeFtraceEvent::CopyFrom(const MmVmscanKswapdWakeFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanKswapdWakeFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanKswapdWakeFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanKswapdWakeFtraceEvent::InternalSwap(MmVmscanKswapdWakeFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmVmscanKswapdWakeFtraceEvent, _impl_.zid_)
      + sizeof(MmVmscanKswapdWakeFtraceEvent::_impl_.zid_)
      - PROTOBUF_FIELD_OFFSET(MmVmscanKswapdWakeFtraceEvent, _impl_.nid_)>(
          reinterpret_cast<char*>(&_impl_.nid_),
          reinterpret_cast<char*>(&other->_impl_.nid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmVmscanKswapdWakeFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[2]);
}
// ===================================================================

class MmVmscanKswapdSleepFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmVmscanKswapdSleepFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmVmscanKswapdSleepFtraceEvent, _impl_._has_bits_);
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}
MmVmscanKswapdSleepFtraceEvent::MmVmscanKswapdSleepFtraceEvent(const MmVmscanKswapdSleepFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
}

inline void MmVmscanKswapdSleepFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nid_) { 0 }

  };
}

MmVmscanKswapdSleepFtraceEvent::~MmVmscanKswapdSleepFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmVmscanKswapdSleepFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmVmscanKswapdSleepFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmVmscanKswapdSleepFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmVmscanKswapdSleepFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 nid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmVmscanKswapdSleepFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 nid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  return target;
}

::size_t MmVmscanKswapdSleepFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmVmscanKswapdSleepFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmVmscanKswapdSleepFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmVmscanKswapdSleepFtraceEvent::GetClassData() const { return &_class_data_; }


void MmVmscanKswapdSleepFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmVmscanKswapdSleepFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmVmscanKswapdSleepFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_nid(from._internal_nid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmVmscanKswapdSleepFtraceEvent::CopyFrom(const MmVmscanKswapdSleepFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmVmscanKswapdSleepFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmVmscanKswapdSleepFtraceEvent::IsInitialized() const {
  return true;
}

void MmVmscanKswapdSleepFtraceEvent::InternalSwap(MmVmscanKswapdSleepFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.nid_, other->_impl_.nid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MmVmscanKswapdSleepFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[3]);
}
// ===================================================================

class MmShrinkSlabStartFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmShrinkSlabStartFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmShrinkSlabStartFtraceEvent, _impl_._has_bits_);
  static void set_has_cache_items(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gfp_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lru_pgs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nr_objects_to_shrink(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pgs_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_shrink(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmShrinkSlabStartFtraceEvent)
}
MmShrinkSlabStartFtraceEvent::MmShrinkSlabStartFtraceEvent(const MmShrinkSlabStartFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmShrinkSlabStartFtraceEvent)
}

inline void MmShrinkSlabStartFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cache_items_) { ::uint64_t{0u} }

    , decltype(_impl_.delta_) { ::uint64_t{0u} }

    , decltype(_impl_.lru_pgs_) { ::uint64_t{0u} }

    , decltype(_impl_.nr_objects_to_shrink_) { ::int64_t{0} }

    , decltype(_impl_.pgs_scanned_) { ::uint64_t{0u} }

    , decltype(_impl_.gfp_flags_) { 0u }

    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.shr_) { ::uint64_t{0u} }

    , decltype(_impl_.shrink_) { ::uint64_t{0u} }

    , decltype(_impl_.total_scan_) { ::uint64_t{0u} }

    , decltype(_impl_.priority_) { 0 }

  };
}

MmShrinkSlabStartFtraceEvent::~MmShrinkSlabStartFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmShrinkSlabStartFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmShrinkSlabStartFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmShrinkSlabStartFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cache_items_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.shr_) -
        reinterpret_cast<char*>(&_impl_.cache_items_)) + sizeof(_impl_.shr_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.shrink_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.priority_) -
        reinterpret_cast<char*>(&_impl_.shrink_)) + sizeof(_impl_.priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmShrinkSlabStartFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 cache_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_cache_items(&has_bits);
          _impl_.cache_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 gfp_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_gfp_flags(&has_bits);
          _impl_.gfp_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 lru_pgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_lru_pgs(&has_bits);
          _impl_.lru_pgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 nr_objects_to_shrink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_nr_objects_to_shrink(&has_bits);
          _impl_.nr_objects_to_shrink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 pgs_scanned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_pgs_scanned(&has_bits);
          _impl_.pgs_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_shr(&has_bits);
          _impl_.shr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shrink = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_shrink(&has_bits);
          _impl_.shrink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 total_scan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_total_scan(&has_bits);
          _impl_.total_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 nid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 priority = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmShrinkSlabStartFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 cache_items = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_cache_items(), target);
  }

  // optional uint64 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_delta(), target);
  }

  // optional uint32 gfp_flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_gfp_flags(), target);
  }

  // optional uint64 lru_pgs = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_lru_pgs(), target);
  }

  // optional int64 nr_objects_to_shrink = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_nr_objects_to_shrink(), target);
  }

  // optional uint64 pgs_scanned = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_pgs_scanned(), target);
  }

  // optional uint64 shr = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_shr(), target);
  }

  // optional uint64 shrink = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_shrink(), target);
  }

  // optional uint64 total_scan = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_total_scan(), target);
  }

  // optional int32 nid = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_nid(), target);
  }

  // optional int32 priority = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        11, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  return target;
}

::size_t MmShrinkSlabStartFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 cache_items = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_cache_items());
    }

    // optional uint64 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_delta());
    }

    // optional uint64 lru_pgs = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_lru_pgs());
    }

    // optional int64 nr_objects_to_shrink = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_nr_objects_to_shrink());
    }

    // optional uint64 pgs_scanned = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_pgs_scanned());
    }

    // optional uint32 gfp_flags = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_gfp_flags());
    }

    // optional int32 nid = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional uint64 shr = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shr());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 shrink = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shrink());
    }

    // optional uint64 total_scan = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_total_scan());
    }

    // optional int32 priority = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmShrinkSlabStartFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmShrinkSlabStartFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmShrinkSlabStartFtraceEvent::GetClassData() const { return &_class_data_; }


void MmShrinkSlabStartFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmShrinkSlabStartFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmShrinkSlabStartFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cache_items_ = from._impl_.cache_items_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lru_pgs_ = from._impl_.lru_pgs_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nr_objects_to_shrink_ = from._impl_.nr_objects_to_shrink_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pgs_scanned_ = from._impl_.pgs_scanned_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gfp_flags_ = from._impl_.gfp_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.shr_ = from._impl_.shr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.shrink_ = from._impl_.shrink_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.total_scan_ = from._impl_.total_scan_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmShrinkSlabStartFtraceEvent::CopyFrom(const MmShrinkSlabStartFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmShrinkSlabStartFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmShrinkSlabStartFtraceEvent::IsInitialized() const {
  return true;
}

void MmShrinkSlabStartFtraceEvent::InternalSwap(MmShrinkSlabStartFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmShrinkSlabStartFtraceEvent, _impl_.priority_)
      + sizeof(MmShrinkSlabStartFtraceEvent::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(MmShrinkSlabStartFtraceEvent, _impl_.cache_items_)>(
          reinterpret_cast<char*>(&_impl_.cache_items_),
          reinterpret_cast<char*>(&other->_impl_.cache_items_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmShrinkSlabStartFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[4]);
}
// ===================================================================

class MmShrinkSlabEndFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MmShrinkSlabEndFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MmShrinkSlabEndFtraceEvent, _impl_._has_bits_);
  static void set_has_new_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_retval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shrink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unused_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_nid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.MmShrinkSlabEndFtraceEvent)
}
MmShrinkSlabEndFtraceEvent::MmShrinkSlabEndFtraceEvent(const MmShrinkSlabEndFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.MmShrinkSlabEndFtraceEvent)
}

inline void MmShrinkSlabEndFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_scan_) { ::int64_t{0} }

    , decltype(_impl_.shr_) { ::uint64_t{0u} }

    , decltype(_impl_.shrink_) { ::uint64_t{0u} }

    , decltype(_impl_.retval_) { 0 }

    , decltype(_impl_.nid_) { 0 }

    , decltype(_impl_.total_scan_) { ::int64_t{0} }

    , decltype(_impl_.unused_scan_) { ::int64_t{0} }

  };
}

MmShrinkSlabEndFtraceEvent::~MmShrinkSlabEndFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MmShrinkSlabEndFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MmShrinkSlabEndFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MmShrinkSlabEndFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.new_scan_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.unused_scan_) -
        reinterpret_cast<char*>(&_impl_.new_scan_)) + sizeof(_impl_.unused_scan_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MmShrinkSlabEndFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 new_scan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_new_scan(&has_bits);
          _impl_.new_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 retval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_retval(&has_bits);
          _impl_.retval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_shr(&has_bits);
          _impl_.shr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 shrink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_shrink(&has_bits);
          _impl_.shrink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 total_scan = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_total_scan(&has_bits);
          _impl_.total_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 unused_scan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_unused_scan(&has_bits);
          _impl_.unused_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 nid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_nid(&has_bits);
          _impl_.nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MmShrinkSlabEndFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 new_scan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_new_scan(), target);
  }

  // optional int32 retval = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_retval(), target);
  }

  // optional uint64 shr = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_shr(), target);
  }

  // optional uint64 shrink = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_shrink(), target);
  }

  // optional int64 total_scan = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_total_scan(), target);
  }

  // optional int64 unused_scan = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_unused_scan(), target);
  }

  // optional int32 nid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  return target;
}

::size_t MmShrinkSlabEndFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 new_scan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_new_scan());
    }

    // optional uint64 shr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shr());
    }

    // optional uint64 shrink = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_shrink());
    }

    // optional int32 retval = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_retval());
    }

    // optional int32 nid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nid());
    }

    // optional int64 total_scan = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_total_scan());
    }

    // optional int64 unused_scan = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_unused_scan());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MmShrinkSlabEndFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MmShrinkSlabEndFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MmShrinkSlabEndFtraceEvent::GetClassData() const { return &_class_data_; }


void MmShrinkSlabEndFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MmShrinkSlabEndFtraceEvent*>(&to_msg);
  auto& from = static_cast<const MmShrinkSlabEndFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.new_scan_ = from._impl_.new_scan_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shr_ = from._impl_.shr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shrink_ = from._impl_.shrink_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.retval_ = from._impl_.retval_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nid_ = from._impl_.nid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.total_scan_ = from._impl_.total_scan_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.unused_scan_ = from._impl_.unused_scan_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MmShrinkSlabEndFtraceEvent::CopyFrom(const MmShrinkSlabEndFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.MmShrinkSlabEndFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MmShrinkSlabEndFtraceEvent::IsInitialized() const {
  return true;
}

void MmShrinkSlabEndFtraceEvent::InternalSwap(MmShrinkSlabEndFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MmShrinkSlabEndFtraceEvent, _impl_.unused_scan_)
      + sizeof(MmShrinkSlabEndFtraceEvent::_impl_.unused_scan_)
      - PROTOBUF_FIELD_OFFSET(MmShrinkSlabEndFtraceEvent, _impl_.new_scan_)>(
          reinterpret_cast<char*>(&_impl_.new_scan_),
          reinterpret_cast<char*>(&other->_impl_.new_scan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MmShrinkSlabEndFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fvmscan_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanDirectReclaimBeginFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanDirectReclaimEndFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanKswapdWakeFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmVmscanKswapdSleepFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmShrinkSlabStartFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmShrinkSlabStartFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmShrinkSlabStartFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::MmShrinkSlabEndFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::MmShrinkSlabEndFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::MmShrinkSlabEndFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
