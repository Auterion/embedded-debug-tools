// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/hyp.proto

#include "protos/perfetto/trace/ftrace/hyp.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace perfetto {
namespace protos {
template <typename>
PROTOBUF_CONSTEXPR HypEnterFtraceEvent::HypEnterFtraceEvent(
    ::_pbi::ConstantInitialized) {}
struct HypEnterFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HypEnterFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HypEnterFtraceEventDefaultTypeInternal() {}
  union {
    HypEnterFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HypEnterFtraceEventDefaultTypeInternal _HypEnterFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HypExitFtraceEvent::HypExitFtraceEvent(
    ::_pbi::ConstantInitialized) {}
struct HypExitFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HypExitFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HypExitFtraceEventDefaultTypeInternal() {}
  union {
    HypExitFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HypExitFtraceEventDefaultTypeInternal _HypExitFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HostHcallFtraceEvent::HostHcallFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.invalid_)*/ 0u
} {}
struct HostHcallFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostHcallFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostHcallFtraceEventDefaultTypeInternal() {}
  union {
    HostHcallFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostHcallFtraceEventDefaultTypeInternal _HostHcallFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HostSmcFtraceEvent::HostSmcFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.forwarded_)*/ 0u
} {}
struct HostSmcFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostSmcFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostSmcFtraceEventDefaultTypeInternal() {}
  union {
    HostSmcFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostSmcFtraceEventDefaultTypeInternal _HostSmcFtraceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HostMemAbortFtraceEvent::HostMemAbortFtraceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.esr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.addr_)*/ ::uint64_t{0u}
} {}
struct HostMemAbortFtraceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostMemAbortFtraceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostMemAbortFtraceEventDefaultTypeInternal() {}
  union {
    HostMemAbortFtraceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostMemAbortFtraceEventDefaultTypeInternal _HostMemAbortFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
static ::_pb::Metadata file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto = nullptr;
const ::uint32_t TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HypEnterFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HypExitFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostHcallFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostHcallFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostHcallFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostHcallFtraceEvent, _impl_.invalid_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostSmcFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostSmcFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostSmcFtraceEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostSmcFtraceEvent, _impl_.forwarded_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostMemAbortFtraceEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostMemAbortFtraceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostMemAbortFtraceEvent, _impl_.esr_),
    PROTOBUF_FIELD_OFFSET(::perfetto::protos::HostMemAbortFtraceEvent, _impl_.addr_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::perfetto::protos::HypEnterFtraceEvent)},
        { 8, -1, -1, sizeof(::perfetto::protos::HypExitFtraceEvent)},
        { 16, 26, -1, sizeof(::perfetto::protos::HostHcallFtraceEvent)},
        { 28, 38, -1, sizeof(::perfetto::protos::HostSmcFtraceEvent)},
        { 40, 50, -1, sizeof(::perfetto::protos::HostMemAbortFtraceEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::perfetto::protos::_HypEnterFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_HypExitFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_HostHcallFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_HostSmcFtraceEvent_default_instance_._instance,
    &::perfetto::protos::_HostMemAbortFtraceEvent_default_instance_._instance,
};
const char descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&protos/perfetto/trace/ftrace/hyp.proto"
    "\022\017perfetto.protos\"\025\n\023HypEnterFtraceEvent"
    "\"\024\n\022HypExitFtraceEvent\"3\n\024HostHcallFtrac"
    "eEvent\022\n\n\002id\030\001 \001(\r\022\017\n\007invalid\030\002 \001(\r\"3\n\022H"
    "ostSmcFtraceEvent\022\n\n\002id\030\001 \001(\004\022\021\n\tforward"
    "ed\030\002 \001(\r\"4\n\027HostMemAbortFtraceEvent\022\013\n\003e"
    "sr\030\001 \001(\004\022\014\n\004addr\030\002 \001(\004"
};
static ::absl::once_flag descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto = {
    false,
    false,
    262,
    descriptor_table_protodef_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto,
    "protos/perfetto/trace/ftrace/hyp.proto",
    &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto::offsets,
    file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto,
    file_level_enum_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto,
    file_level_service_descriptors_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_getter() {
  return &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto(&descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto);
namespace perfetto {
namespace protos {
// ===================================================================

class HypEnterFtraceEvent::_Internal {
 public:
};

HypEnterFtraceEvent::HypEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HypEnterFtraceEvent)
}
HypEnterFtraceEvent::HypEnterFtraceEvent(const HypEnterFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HypEnterFtraceEvent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HypEnterFtraceEvent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HypEnterFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HypEnterFtraceEvent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HypEnterFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[0]);
}
// ===================================================================

class HypExitFtraceEvent::_Internal {
 public:
};

HypExitFtraceEvent::HypExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HypExitFtraceEvent)
}
HypExitFtraceEvent::HypExitFtraceEvent(const HypExitFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HypExitFtraceEvent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HypExitFtraceEvent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HypExitFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HypExitFtraceEvent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HypExitFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[1]);
}
// ===================================================================

class HostHcallFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<HostHcallFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HostHcallFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invalid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HostHcallFtraceEvent::HostHcallFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HostHcallFtraceEvent)
}
HostHcallFtraceEvent::HostHcallFtraceEvent(const HostHcallFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HostHcallFtraceEvent)
}

inline void HostHcallFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.invalid_) { 0u }

  };
}

HostHcallFtraceEvent::~HostHcallFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HostHcallFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostHcallFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostHcallFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostHcallFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HostHcallFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.invalid_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.invalid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostHcallFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 invalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_invalid(&has_bits);
          _impl_.invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HostHcallFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HostHcallFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // optional uint32 invalid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_invalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HostHcallFtraceEvent)
  return target;
}

::size_t HostHcallFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HostHcallFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 invalid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_invalid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostHcallFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostHcallFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostHcallFtraceEvent::GetClassData() const { return &_class_data_; }


void HostHcallFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostHcallFtraceEvent*>(&to_msg);
  auto& from = static_cast<const HostHcallFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HostHcallFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.invalid_ = from._impl_.invalid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostHcallFtraceEvent::CopyFrom(const HostHcallFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HostHcallFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostHcallFtraceEvent::IsInitialized() const {
  return true;
}

void HostHcallFtraceEvent::InternalSwap(HostHcallFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostHcallFtraceEvent, _impl_.invalid_)
      + sizeof(HostHcallFtraceEvent::_impl_.invalid_)
      - PROTOBUF_FIELD_OFFSET(HostHcallFtraceEvent, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostHcallFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[2]);
}
// ===================================================================

class HostSmcFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<HostSmcFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HostSmcFtraceEvent, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forwarded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HostSmcFtraceEvent::HostSmcFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HostSmcFtraceEvent)
}
HostSmcFtraceEvent::HostSmcFtraceEvent(const HostSmcFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HostSmcFtraceEvent)
}

inline void HostSmcFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.forwarded_) { 0u }

  };
}

HostSmcFtraceEvent::~HostSmcFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HostSmcFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostSmcFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostSmcFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostSmcFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HostSmcFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.forwarded_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.forwarded_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostSmcFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 forwarded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_forwarded(&has_bits);
          _impl_.forwarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HostSmcFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HostSmcFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // optional uint32 forwarded = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_forwarded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HostSmcFtraceEvent)
  return target;
}

::size_t HostSmcFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HostSmcFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
    }

    // optional uint32 forwarded = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_forwarded());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostSmcFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostSmcFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostSmcFtraceEvent::GetClassData() const { return &_class_data_; }


void HostSmcFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostSmcFtraceEvent*>(&to_msg);
  auto& from = static_cast<const HostSmcFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HostSmcFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.forwarded_ = from._impl_.forwarded_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostSmcFtraceEvent::CopyFrom(const HostSmcFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HostSmcFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostSmcFtraceEvent::IsInitialized() const {
  return true;
}

void HostSmcFtraceEvent::InternalSwap(HostSmcFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostSmcFtraceEvent, _impl_.forwarded_)
      + sizeof(HostSmcFtraceEvent::_impl_.forwarded_)
      - PROTOBUF_FIELD_OFFSET(HostSmcFtraceEvent, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostSmcFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[3]);
}
// ===================================================================

class HostMemAbortFtraceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<HostMemAbortFtraceEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HostMemAbortFtraceEvent, _impl_._has_bits_);
  static void set_has_esr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HostMemAbortFtraceEvent::HostMemAbortFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.HostMemAbortFtraceEvent)
}
HostMemAbortFtraceEvent::HostMemAbortFtraceEvent(const HostMemAbortFtraceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.HostMemAbortFtraceEvent)
}

inline void HostMemAbortFtraceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.esr_) { ::uint64_t{0u} }

    , decltype(_impl_.addr_) { ::uint64_t{0u} }

  };
}

HostMemAbortFtraceEvent::~HostMemAbortFtraceEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.HostMemAbortFtraceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostMemAbortFtraceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostMemAbortFtraceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostMemAbortFtraceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.HostMemAbortFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.esr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.addr_) -
        reinterpret_cast<char*>(&_impl_.esr_)) + sizeof(_impl_.addr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostMemAbortFtraceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 esr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_esr(&has_bits);
          _impl_.esr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_addr(&has_bits);
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HostMemAbortFtraceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.HostMemAbortFtraceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 esr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_esr(), target);
  }

  // optional uint64 addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.HostMemAbortFtraceEvent)
  return target;
}

::size_t HostMemAbortFtraceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.HostMemAbortFtraceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 esr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_esr());
    }

    // optional uint64 addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_addr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostMemAbortFtraceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostMemAbortFtraceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostMemAbortFtraceEvent::GetClassData() const { return &_class_data_; }


void HostMemAbortFtraceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostMemAbortFtraceEvent*>(&to_msg);
  auto& from = static_cast<const HostMemAbortFtraceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.HostMemAbortFtraceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.esr_ = from._impl_.esr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostMemAbortFtraceEvent::CopyFrom(const HostMemAbortFtraceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.HostMemAbortFtraceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostMemAbortFtraceEvent::IsInitialized() const {
  return true;
}

void HostMemAbortFtraceEvent::InternalSwap(HostMemAbortFtraceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostMemAbortFtraceEvent, _impl_.addr_)
      + sizeof(HostMemAbortFtraceEvent::_impl_.addr_)
      - PROTOBUF_FIELD_OFFSET(HostMemAbortFtraceEvent, _impl_.esr_)>(
          reinterpret_cast<char*>(&_impl_.esr_),
          reinterpret_cast<char*>(&other->_impl_.esr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostMemAbortFtraceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_getter, &descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto_once,
      file_level_metadata_protos_2fperfetto_2ftrace_2fftrace_2fhyp_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::HypEnterFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::HypEnterFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HypEnterFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HypExitFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::HypExitFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HypExitFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HostHcallFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::HostHcallFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HostHcallFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HostSmcFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::HostSmcFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HostSmcFtraceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::HostMemAbortFtraceEvent*
Arena::CreateMaybeMessage< ::perfetto::protos::HostMemAbortFtraceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::HostMemAbortFtraceEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
