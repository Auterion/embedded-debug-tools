// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/f2fs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
namespace perfetto {
namespace protos {
class F2fsDoSubmitBioFtraceEvent;
struct F2fsDoSubmitBioFtraceEventDefaultTypeInternal;
extern F2fsDoSubmitBioFtraceEventDefaultTypeInternal _F2fsDoSubmitBioFtraceEvent_default_instance_;
class F2fsEvictInodeFtraceEvent;
struct F2fsEvictInodeFtraceEventDefaultTypeInternal;
extern F2fsEvictInodeFtraceEventDefaultTypeInternal _F2fsEvictInodeFtraceEvent_default_instance_;
class F2fsFallocateFtraceEvent;
struct F2fsFallocateFtraceEventDefaultTypeInternal;
extern F2fsFallocateFtraceEventDefaultTypeInternal _F2fsFallocateFtraceEvent_default_instance_;
class F2fsGetDataBlockFtraceEvent;
struct F2fsGetDataBlockFtraceEventDefaultTypeInternal;
extern F2fsGetDataBlockFtraceEventDefaultTypeInternal _F2fsGetDataBlockFtraceEvent_default_instance_;
class F2fsGetVictimFtraceEvent;
struct F2fsGetVictimFtraceEventDefaultTypeInternal;
extern F2fsGetVictimFtraceEventDefaultTypeInternal _F2fsGetVictimFtraceEvent_default_instance_;
class F2fsIgetExitFtraceEvent;
struct F2fsIgetExitFtraceEventDefaultTypeInternal;
extern F2fsIgetExitFtraceEventDefaultTypeInternal _F2fsIgetExitFtraceEvent_default_instance_;
class F2fsIgetFtraceEvent;
struct F2fsIgetFtraceEventDefaultTypeInternal;
extern F2fsIgetFtraceEventDefaultTypeInternal _F2fsIgetFtraceEvent_default_instance_;
class F2fsIostatFtraceEvent;
struct F2fsIostatFtraceEventDefaultTypeInternal;
extern F2fsIostatFtraceEventDefaultTypeInternal _F2fsIostatFtraceEvent_default_instance_;
class F2fsIostatLatencyFtraceEvent;
struct F2fsIostatLatencyFtraceEventDefaultTypeInternal;
extern F2fsIostatLatencyFtraceEventDefaultTypeInternal _F2fsIostatLatencyFtraceEvent_default_instance_;
class F2fsNewInodeFtraceEvent;
struct F2fsNewInodeFtraceEventDefaultTypeInternal;
extern F2fsNewInodeFtraceEventDefaultTypeInternal _F2fsNewInodeFtraceEvent_default_instance_;
class F2fsReadpageFtraceEvent;
struct F2fsReadpageFtraceEventDefaultTypeInternal;
extern F2fsReadpageFtraceEventDefaultTypeInternal _F2fsReadpageFtraceEvent_default_instance_;
class F2fsReserveNewBlockFtraceEvent;
struct F2fsReserveNewBlockFtraceEventDefaultTypeInternal;
extern F2fsReserveNewBlockFtraceEventDefaultTypeInternal _F2fsReserveNewBlockFtraceEvent_default_instance_;
class F2fsSetPageDirtyFtraceEvent;
struct F2fsSetPageDirtyFtraceEventDefaultTypeInternal;
extern F2fsSetPageDirtyFtraceEventDefaultTypeInternal _F2fsSetPageDirtyFtraceEvent_default_instance_;
class F2fsSubmitWritePageFtraceEvent;
struct F2fsSubmitWritePageFtraceEventDefaultTypeInternal;
extern F2fsSubmitWritePageFtraceEventDefaultTypeInternal _F2fsSubmitWritePageFtraceEvent_default_instance_;
class F2fsSyncFileEnterFtraceEvent;
struct F2fsSyncFileEnterFtraceEventDefaultTypeInternal;
extern F2fsSyncFileEnterFtraceEventDefaultTypeInternal _F2fsSyncFileEnterFtraceEvent_default_instance_;
class F2fsSyncFileExitFtraceEvent;
struct F2fsSyncFileExitFtraceEventDefaultTypeInternal;
extern F2fsSyncFileExitFtraceEventDefaultTypeInternal _F2fsSyncFileExitFtraceEvent_default_instance_;
class F2fsSyncFsFtraceEvent;
struct F2fsSyncFsFtraceEventDefaultTypeInternal;
extern F2fsSyncFsFtraceEventDefaultTypeInternal _F2fsSyncFsFtraceEvent_default_instance_;
class F2fsTruncateBlocksEnterFtraceEvent;
struct F2fsTruncateBlocksEnterFtraceEventDefaultTypeInternal;
extern F2fsTruncateBlocksEnterFtraceEventDefaultTypeInternal _F2fsTruncateBlocksEnterFtraceEvent_default_instance_;
class F2fsTruncateBlocksExitFtraceEvent;
struct F2fsTruncateBlocksExitFtraceEventDefaultTypeInternal;
extern F2fsTruncateBlocksExitFtraceEventDefaultTypeInternal _F2fsTruncateBlocksExitFtraceEvent_default_instance_;
class F2fsTruncateDataBlocksRangeFtraceEvent;
struct F2fsTruncateDataBlocksRangeFtraceEventDefaultTypeInternal;
extern F2fsTruncateDataBlocksRangeFtraceEventDefaultTypeInternal _F2fsTruncateDataBlocksRangeFtraceEvent_default_instance_;
class F2fsTruncateFtraceEvent;
struct F2fsTruncateFtraceEventDefaultTypeInternal;
extern F2fsTruncateFtraceEventDefaultTypeInternal _F2fsTruncateFtraceEvent_default_instance_;
class F2fsTruncateInodeBlocksEnterFtraceEvent;
struct F2fsTruncateInodeBlocksEnterFtraceEventDefaultTypeInternal;
extern F2fsTruncateInodeBlocksEnterFtraceEventDefaultTypeInternal _F2fsTruncateInodeBlocksEnterFtraceEvent_default_instance_;
class F2fsTruncateInodeBlocksExitFtraceEvent;
struct F2fsTruncateInodeBlocksExitFtraceEventDefaultTypeInternal;
extern F2fsTruncateInodeBlocksExitFtraceEventDefaultTypeInternal _F2fsTruncateInodeBlocksExitFtraceEvent_default_instance_;
class F2fsTruncateNodeFtraceEvent;
struct F2fsTruncateNodeFtraceEventDefaultTypeInternal;
extern F2fsTruncateNodeFtraceEventDefaultTypeInternal _F2fsTruncateNodeFtraceEvent_default_instance_;
class F2fsTruncateNodesEnterFtraceEvent;
struct F2fsTruncateNodesEnterFtraceEventDefaultTypeInternal;
extern F2fsTruncateNodesEnterFtraceEventDefaultTypeInternal _F2fsTruncateNodesEnterFtraceEvent_default_instance_;
class F2fsTruncateNodesExitFtraceEvent;
struct F2fsTruncateNodesExitFtraceEventDefaultTypeInternal;
extern F2fsTruncateNodesExitFtraceEventDefaultTypeInternal _F2fsTruncateNodesExitFtraceEvent_default_instance_;
class F2fsTruncatePartialNodesFtraceEvent;
struct F2fsTruncatePartialNodesFtraceEventDefaultTypeInternal;
extern F2fsTruncatePartialNodesFtraceEventDefaultTypeInternal _F2fsTruncatePartialNodesFtraceEvent_default_instance_;
class F2fsUnlinkEnterFtraceEvent;
struct F2fsUnlinkEnterFtraceEventDefaultTypeInternal;
extern F2fsUnlinkEnterFtraceEventDefaultTypeInternal _F2fsUnlinkEnterFtraceEvent_default_instance_;
class F2fsUnlinkExitFtraceEvent;
struct F2fsUnlinkExitFtraceEventDefaultTypeInternal;
extern F2fsUnlinkExitFtraceEventDefaultTypeInternal _F2fsUnlinkExitFtraceEvent_default_instance_;
class F2fsVmPageMkwriteFtraceEvent;
struct F2fsVmPageMkwriteFtraceEventDefaultTypeInternal;
extern F2fsVmPageMkwriteFtraceEventDefaultTypeInternal _F2fsVmPageMkwriteFtraceEvent_default_instance_;
class F2fsWriteBeginFtraceEvent;
struct F2fsWriteBeginFtraceEventDefaultTypeInternal;
extern F2fsWriteBeginFtraceEventDefaultTypeInternal _F2fsWriteBeginFtraceEvent_default_instance_;
class F2fsWriteCheckpointFtraceEvent;
struct F2fsWriteCheckpointFtraceEventDefaultTypeInternal;
extern F2fsWriteCheckpointFtraceEventDefaultTypeInternal _F2fsWriteCheckpointFtraceEvent_default_instance_;
class F2fsWriteEndFtraceEvent;
struct F2fsWriteEndFtraceEventDefaultTypeInternal;
extern F2fsWriteEndFtraceEventDefaultTypeInternal _F2fsWriteEndFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::F2fsDoSubmitBioFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsDoSubmitBioFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsEvictInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsEvictInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsFallocateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsFallocateFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsGetDataBlockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsGetDataBlockFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsGetVictimFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsGetVictimFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsIgetExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsIgetExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsIgetFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsIgetFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsIostatFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsIostatFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsIostatLatencyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsIostatLatencyFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsNewInodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsNewInodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsReadpageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsReadpageFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsReserveNewBlockFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsReserveNewBlockFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsSetPageDirtyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSetPageDirtyFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsSubmitWritePageFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSubmitWritePageFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsSyncFileEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSyncFileEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsSyncFileExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSyncFileExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsSyncFsFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsSyncFsFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateBlocksEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateBlocksExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateDataBlocksRangeFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateInodeBlocksEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateInodeBlocksExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateNodeFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateNodeFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateNodesEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncateNodesExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncateNodesExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsTruncatePartialNodesFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsUnlinkEnterFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsUnlinkEnterFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsUnlinkExitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsUnlinkExitFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsVmPageMkwriteFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsVmPageMkwriteFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsWriteBeginFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsWriteBeginFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsWriteCheckpointFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsWriteCheckpointFtraceEvent>(Arena*);
template <>
::perfetto::protos::F2fsWriteEndFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::F2fsWriteEndFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class F2fsDoSubmitBioFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsDoSubmitBioFtraceEvent) */ {
 public:
  inline F2fsDoSubmitBioFtraceEvent() : F2fsDoSubmitBioFtraceEvent(nullptr) {}
  ~F2fsDoSubmitBioFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsDoSubmitBioFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsDoSubmitBioFtraceEvent(const F2fsDoSubmitBioFtraceEvent& from);
  F2fsDoSubmitBioFtraceEvent(F2fsDoSubmitBioFtraceEvent&& from) noexcept
    : F2fsDoSubmitBioFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsDoSubmitBioFtraceEvent& operator=(const F2fsDoSubmitBioFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsDoSubmitBioFtraceEvent& operator=(F2fsDoSubmitBioFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsDoSubmitBioFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsDoSubmitBioFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsDoSubmitBioFtraceEvent*>(
               &_F2fsDoSubmitBioFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(F2fsDoSubmitBioFtraceEvent& a, F2fsDoSubmitBioFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsDoSubmitBioFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsDoSubmitBioFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsDoSubmitBioFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsDoSubmitBioFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsDoSubmitBioFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsDoSubmitBioFtraceEvent& from) {
    F2fsDoSubmitBioFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsDoSubmitBioFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsDoSubmitBioFtraceEvent";
  }
  protected:
  explicit F2fsDoSubmitBioFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kBtypeFieldNumber = 2,
    kSyncFieldNumber = 3,
    kSectorFieldNumber = 4,
    kSizeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 btype = 2;
  bool has_btype() const;
  void clear_btype() ;
  ::int32_t btype() const;
  void set_btype(::int32_t value);

  private:
  ::int32_t _internal_btype() const;
  void _internal_set_btype(::int32_t value);

  public:
  // optional uint32 sync = 3;
  bool has_sync() const;
  void clear_sync() ;
  ::uint32_t sync() const;
  void set_sync(::uint32_t value);

  private:
  ::uint32_t _internal_sync() const;
  void _internal_set_sync(::uint32_t value);

  public:
  // optional uint64 sector = 4;
  bool has_sector() const;
  void clear_sector() ;
  ::uint64_t sector() const;
  void set_sector(::uint64_t value);

  private:
  ::uint64_t _internal_sector() const;
  void _internal_set_sector(::uint64_t value);

  public:
  // optional uint32 size = 5;
  bool has_size() const;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsDoSubmitBioFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t btype_;
    ::uint32_t sync_;
    ::uint64_t sector_;
    ::uint32_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsEvictInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsEvictInodeFtraceEvent) */ {
 public:
  inline F2fsEvictInodeFtraceEvent() : F2fsEvictInodeFtraceEvent(nullptr) {}
  ~F2fsEvictInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsEvictInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsEvictInodeFtraceEvent(const F2fsEvictInodeFtraceEvent& from);
  F2fsEvictInodeFtraceEvent(F2fsEvictInodeFtraceEvent&& from) noexcept
    : F2fsEvictInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsEvictInodeFtraceEvent& operator=(const F2fsEvictInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsEvictInodeFtraceEvent& operator=(F2fsEvictInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsEvictInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsEvictInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsEvictInodeFtraceEvent*>(
               &_F2fsEvictInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(F2fsEvictInodeFtraceEvent& a, F2fsEvictInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsEvictInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsEvictInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsEvictInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsEvictInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsEvictInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsEvictInodeFtraceEvent& from) {
    F2fsEvictInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsEvictInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsEvictInodeFtraceEvent";
  }
  protected:
  explicit F2fsEvictInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino() ;
  ::uint64_t pino() const;
  void set_pino(::uint64_t value);

  private:
  ::uint64_t _internal_pino() const;
  void _internal_set_pino(::uint64_t value);

  public:
  // optional int64 size = 5;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink() ;
  ::uint32_t nlink() const;
  void set_nlink(::uint32_t value);

  private:
  ::uint32_t _internal_nlink() const;
  void _internal_set_nlink(::uint32_t value);

  public:
  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise() ;
  ::uint32_t advise() const;
  void set_advise(::uint32_t value);

  private:
  ::uint32_t _internal_advise() const;
  void _internal_set_advise(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsEvictInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pino_;
    ::int64_t size_;
    ::uint32_t mode_;
    ::uint32_t nlink_;
    ::uint64_t blocks_;
    ::uint32_t advise_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsFallocateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsFallocateFtraceEvent) */ {
 public:
  inline F2fsFallocateFtraceEvent() : F2fsFallocateFtraceEvent(nullptr) {}
  ~F2fsFallocateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsFallocateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsFallocateFtraceEvent(const F2fsFallocateFtraceEvent& from);
  F2fsFallocateFtraceEvent(F2fsFallocateFtraceEvent&& from) noexcept
    : F2fsFallocateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsFallocateFtraceEvent& operator=(const F2fsFallocateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsFallocateFtraceEvent& operator=(F2fsFallocateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsFallocateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsFallocateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsFallocateFtraceEvent*>(
               &_F2fsFallocateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(F2fsFallocateFtraceEvent& a, F2fsFallocateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsFallocateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsFallocateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsFallocateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsFallocateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsFallocateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsFallocateFtraceEvent& from) {
    F2fsFallocateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsFallocateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsFallocateFtraceEvent";
  }
  protected:
  explicit F2fsFallocateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kOffsetFieldNumber = 4,
    kLenFieldNumber = 5,
    kModeFieldNumber = 3,
    kRetFieldNumber = 8,
    kSizeFieldNumber = 6,
    kBlocksFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 offset = 4;
  bool has_offset() const;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // optional int64 len = 5;
  bool has_len() const;
  void clear_len() ;
  ::int64_t len() const;
  void set_len(::int64_t value);

  private:
  ::int64_t _internal_len() const;
  void _internal_set_len(::int64_t value);

  public:
  // optional int32 mode = 3;
  bool has_mode() const;
  void clear_mode() ;
  ::int32_t mode() const;
  void set_mode(::int32_t value);

  private:
  ::int32_t _internal_mode() const;
  void _internal_set_mode(::int32_t value);

  public:
  // optional int32 ret = 8;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional int64 size = 6;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsFallocateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t offset_;
    ::int64_t len_;
    ::int32_t mode_;
    ::int32_t ret_;
    ::int64_t size_;
    ::uint64_t blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsGetDataBlockFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsGetDataBlockFtraceEvent) */ {
 public:
  inline F2fsGetDataBlockFtraceEvent() : F2fsGetDataBlockFtraceEvent(nullptr) {}
  ~F2fsGetDataBlockFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsGetDataBlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsGetDataBlockFtraceEvent(const F2fsGetDataBlockFtraceEvent& from);
  F2fsGetDataBlockFtraceEvent(F2fsGetDataBlockFtraceEvent&& from) noexcept
    : F2fsGetDataBlockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsGetDataBlockFtraceEvent& operator=(const F2fsGetDataBlockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsGetDataBlockFtraceEvent& operator=(F2fsGetDataBlockFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsGetDataBlockFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsGetDataBlockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsGetDataBlockFtraceEvent*>(
               &_F2fsGetDataBlockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(F2fsGetDataBlockFtraceEvent& a, F2fsGetDataBlockFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsGetDataBlockFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsGetDataBlockFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsGetDataBlockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsGetDataBlockFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsGetDataBlockFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsGetDataBlockFtraceEvent& from) {
    F2fsGetDataBlockFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsGetDataBlockFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsGetDataBlockFtraceEvent";
  }
  protected:
  explicit F2fsGetDataBlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIblockFieldNumber = 3,
    kBhStartFieldNumber = 4,
    kBhSizeFieldNumber = 5,
    kRetFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 iblock = 3;
  bool has_iblock() const;
  void clear_iblock() ;
  ::uint64_t iblock() const;
  void set_iblock(::uint64_t value);

  private:
  ::uint64_t _internal_iblock() const;
  void _internal_set_iblock(::uint64_t value);

  public:
  // optional uint64 bh_start = 4;
  bool has_bh_start() const;
  void clear_bh_start() ;
  ::uint64_t bh_start() const;
  void set_bh_start(::uint64_t value);

  private:
  ::uint64_t _internal_bh_start() const;
  void _internal_set_bh_start(::uint64_t value);

  public:
  // optional uint64 bh_size = 5;
  bool has_bh_size() const;
  void clear_bh_size() ;
  ::uint64_t bh_size() const;
  void set_bh_size(::uint64_t value);

  private:
  ::uint64_t _internal_bh_size() const;
  void _internal_set_bh_size(::uint64_t value);

  public:
  // optional int32 ret = 6;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsGetDataBlockFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t iblock_;
    ::uint64_t bh_start_;
    ::uint64_t bh_size_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsGetVictimFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsGetVictimFtraceEvent) */ {
 public:
  inline F2fsGetVictimFtraceEvent() : F2fsGetVictimFtraceEvent(nullptr) {}
  ~F2fsGetVictimFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsGetVictimFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsGetVictimFtraceEvent(const F2fsGetVictimFtraceEvent& from);
  F2fsGetVictimFtraceEvent(F2fsGetVictimFtraceEvent&& from) noexcept
    : F2fsGetVictimFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsGetVictimFtraceEvent& operator=(const F2fsGetVictimFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsGetVictimFtraceEvent& operator=(F2fsGetVictimFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsGetVictimFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsGetVictimFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsGetVictimFtraceEvent*>(
               &_F2fsGetVictimFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(F2fsGetVictimFtraceEvent& a, F2fsGetVictimFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsGetVictimFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsGetVictimFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsGetVictimFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsGetVictimFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsGetVictimFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsGetVictimFtraceEvent& from) {
    F2fsGetVictimFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsGetVictimFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsGetVictimFtraceEvent";
  }
  protected:
  explicit F2fsGetVictimFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kTypeFieldNumber = 2,
    kGcTypeFieldNumber = 3,
    kAllocModeFieldNumber = 4,
    kGcModeFieldNumber = 5,
    kVictimFieldNumber = 6,
    kOfsUnitFieldNumber = 7,
    kPreVictimFieldNumber = 8,
    kPrefreeFieldNumber = 9,
    kFreeFieldNumber = 10,
    kCostFieldNumber = 11,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 type = 2;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional int32 gc_type = 3;
  bool has_gc_type() const;
  void clear_gc_type() ;
  ::int32_t gc_type() const;
  void set_gc_type(::int32_t value);

  private:
  ::int32_t _internal_gc_type() const;
  void _internal_set_gc_type(::int32_t value);

  public:
  // optional int32 alloc_mode = 4;
  bool has_alloc_mode() const;
  void clear_alloc_mode() ;
  ::int32_t alloc_mode() const;
  void set_alloc_mode(::int32_t value);

  private:
  ::int32_t _internal_alloc_mode() const;
  void _internal_set_alloc_mode(::int32_t value);

  public:
  // optional int32 gc_mode = 5;
  bool has_gc_mode() const;
  void clear_gc_mode() ;
  ::int32_t gc_mode() const;
  void set_gc_mode(::int32_t value);

  private:
  ::int32_t _internal_gc_mode() const;
  void _internal_set_gc_mode(::int32_t value);

  public:
  // optional uint32 victim = 6;
  bool has_victim() const;
  void clear_victim() ;
  ::uint32_t victim() const;
  void set_victim(::uint32_t value);

  private:
  ::uint32_t _internal_victim() const;
  void _internal_set_victim(::uint32_t value);

  public:
  // optional uint32 ofs_unit = 7;
  bool has_ofs_unit() const;
  void clear_ofs_unit() ;
  ::uint32_t ofs_unit() const;
  void set_ofs_unit(::uint32_t value);

  private:
  ::uint32_t _internal_ofs_unit() const;
  void _internal_set_ofs_unit(::uint32_t value);

  public:
  // optional uint32 pre_victim = 8;
  bool has_pre_victim() const;
  void clear_pre_victim() ;
  ::uint32_t pre_victim() const;
  void set_pre_victim(::uint32_t value);

  private:
  ::uint32_t _internal_pre_victim() const;
  void _internal_set_pre_victim(::uint32_t value);

  public:
  // optional uint32 prefree = 9;
  bool has_prefree() const;
  void clear_prefree() ;
  ::uint32_t prefree() const;
  void set_prefree(::uint32_t value);

  private:
  ::uint32_t _internal_prefree() const;
  void _internal_set_prefree(::uint32_t value);

  public:
  // optional uint32 free = 10;
  bool has_free() const;
  void clear_free() ;
  ::uint32_t free() const;
  void set_free(::uint32_t value);

  private:
  ::uint32_t _internal_free() const;
  void _internal_set_free(::uint32_t value);

  public:
  // optional uint32 cost = 11;
  bool has_cost() const;
  void clear_cost() ;
  ::uint32_t cost() const;
  void set_cost(::uint32_t value);

  private:
  ::uint32_t _internal_cost() const;
  void _internal_set_cost(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsGetVictimFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t type_;
    ::int32_t gc_type_;
    ::int32_t alloc_mode_;
    ::int32_t gc_mode_;
    ::uint32_t victim_;
    ::uint32_t ofs_unit_;
    ::uint32_t pre_victim_;
    ::uint32_t prefree_;
    ::uint32_t free_;
    ::uint32_t cost_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsIgetFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsIgetFtraceEvent) */ {
 public:
  inline F2fsIgetFtraceEvent() : F2fsIgetFtraceEvent(nullptr) {}
  ~F2fsIgetFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsIgetFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsIgetFtraceEvent(const F2fsIgetFtraceEvent& from);
  F2fsIgetFtraceEvent(F2fsIgetFtraceEvent&& from) noexcept
    : F2fsIgetFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsIgetFtraceEvent& operator=(const F2fsIgetFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsIgetFtraceEvent& operator=(F2fsIgetFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsIgetFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsIgetFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsIgetFtraceEvent*>(
               &_F2fsIgetFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(F2fsIgetFtraceEvent& a, F2fsIgetFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsIgetFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsIgetFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsIgetFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsIgetFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsIgetFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsIgetFtraceEvent& from) {
    F2fsIgetFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsIgetFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsIgetFtraceEvent";
  }
  protected:
  explicit F2fsIgetFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino() ;
  ::uint64_t pino() const;
  void set_pino(::uint64_t value);

  private:
  ::uint64_t _internal_pino() const;
  void _internal_set_pino(::uint64_t value);

  public:
  // optional int64 size = 5;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink() ;
  ::uint32_t nlink() const;
  void set_nlink(::uint32_t value);

  private:
  ::uint32_t _internal_nlink() const;
  void _internal_set_nlink(::uint32_t value);

  public:
  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise() ;
  ::uint32_t advise() const;
  void set_advise(::uint32_t value);

  private:
  ::uint32_t _internal_advise() const;
  void _internal_set_advise(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsIgetFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pino_;
    ::int64_t size_;
    ::uint32_t mode_;
    ::uint32_t nlink_;
    ::uint64_t blocks_;
    ::uint32_t advise_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsIgetExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsIgetExitFtraceEvent) */ {
 public:
  inline F2fsIgetExitFtraceEvent() : F2fsIgetExitFtraceEvent(nullptr) {}
  ~F2fsIgetExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsIgetExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsIgetExitFtraceEvent(const F2fsIgetExitFtraceEvent& from);
  F2fsIgetExitFtraceEvent(F2fsIgetExitFtraceEvent&& from) noexcept
    : F2fsIgetExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsIgetExitFtraceEvent& operator=(const F2fsIgetExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsIgetExitFtraceEvent& operator=(F2fsIgetExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsIgetExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsIgetExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsIgetExitFtraceEvent*>(
               &_F2fsIgetExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(F2fsIgetExitFtraceEvent& a, F2fsIgetExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsIgetExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsIgetExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsIgetExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsIgetExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsIgetExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsIgetExitFtraceEvent& from) {
    F2fsIgetExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsIgetExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsIgetExitFtraceEvent";
  }
  protected:
  explicit F2fsIgetExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsIgetExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsNewInodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsNewInodeFtraceEvent) */ {
 public:
  inline F2fsNewInodeFtraceEvent() : F2fsNewInodeFtraceEvent(nullptr) {}
  ~F2fsNewInodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsNewInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsNewInodeFtraceEvent(const F2fsNewInodeFtraceEvent& from);
  F2fsNewInodeFtraceEvent(F2fsNewInodeFtraceEvent&& from) noexcept
    : F2fsNewInodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsNewInodeFtraceEvent& operator=(const F2fsNewInodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsNewInodeFtraceEvent& operator=(F2fsNewInodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsNewInodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsNewInodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsNewInodeFtraceEvent*>(
               &_F2fsNewInodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(F2fsNewInodeFtraceEvent& a, F2fsNewInodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsNewInodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsNewInodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsNewInodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsNewInodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsNewInodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsNewInodeFtraceEvent& from) {
    F2fsNewInodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsNewInodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsNewInodeFtraceEvent";
  }
  protected:
  explicit F2fsNewInodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsNewInodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsReadpageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsReadpageFtraceEvent) */ {
 public:
  inline F2fsReadpageFtraceEvent() : F2fsReadpageFtraceEvent(nullptr) {}
  ~F2fsReadpageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsReadpageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsReadpageFtraceEvent(const F2fsReadpageFtraceEvent& from);
  F2fsReadpageFtraceEvent(F2fsReadpageFtraceEvent&& from) noexcept
    : F2fsReadpageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsReadpageFtraceEvent& operator=(const F2fsReadpageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsReadpageFtraceEvent& operator=(F2fsReadpageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsReadpageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsReadpageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsReadpageFtraceEvent*>(
               &_F2fsReadpageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(F2fsReadpageFtraceEvent& a, F2fsReadpageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsReadpageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsReadpageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsReadpageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsReadpageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsReadpageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsReadpageFtraceEvent& from) {
    F2fsReadpageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsReadpageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsReadpageFtraceEvent";
  }
  protected:
  explicit F2fsReadpageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 3,
    kBlkaddrFieldNumber = 4,
    kTypeFieldNumber = 5,
    kDirFieldNumber = 6,
    kDirtyFieldNumber = 7,
    kUptodateFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 3;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional uint64 blkaddr = 4;
  bool has_blkaddr() const;
  void clear_blkaddr() ;
  ::uint64_t blkaddr() const;
  void set_blkaddr(::uint64_t value);

  private:
  ::uint64_t _internal_blkaddr() const;
  void _internal_set_blkaddr(::uint64_t value);

  public:
  // optional int32 type = 5;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional int32 dir = 6;
  bool has_dir() const;
  void clear_dir() ;
  ::int32_t dir() const;
  void set_dir(::int32_t value);

  private:
  ::int32_t _internal_dir() const;
  void _internal_set_dir(::int32_t value);

  public:
  // optional int32 dirty = 7;
  bool has_dirty() const;
  void clear_dirty() ;
  ::int32_t dirty() const;
  void set_dirty(::int32_t value);

  private:
  ::int32_t _internal_dirty() const;
  void _internal_set_dirty(::int32_t value);

  public:
  // optional int32 uptodate = 8;
  bool has_uptodate() const;
  void clear_uptodate() ;
  ::int32_t uptodate() const;
  void set_uptodate(::int32_t value);

  private:
  ::int32_t _internal_uptodate() const;
  void _internal_set_uptodate(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsReadpageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
    ::uint64_t blkaddr_;
    ::int32_t type_;
    ::int32_t dir_;
    ::int32_t dirty_;
    ::int32_t uptodate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsReserveNewBlockFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsReserveNewBlockFtraceEvent) */ {
 public:
  inline F2fsReserveNewBlockFtraceEvent() : F2fsReserveNewBlockFtraceEvent(nullptr) {}
  ~F2fsReserveNewBlockFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsReserveNewBlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsReserveNewBlockFtraceEvent(const F2fsReserveNewBlockFtraceEvent& from);
  F2fsReserveNewBlockFtraceEvent(F2fsReserveNewBlockFtraceEvent&& from) noexcept
    : F2fsReserveNewBlockFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsReserveNewBlockFtraceEvent& operator=(const F2fsReserveNewBlockFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsReserveNewBlockFtraceEvent& operator=(F2fsReserveNewBlockFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsReserveNewBlockFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsReserveNewBlockFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsReserveNewBlockFtraceEvent*>(
               &_F2fsReserveNewBlockFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(F2fsReserveNewBlockFtraceEvent& a, F2fsReserveNewBlockFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsReserveNewBlockFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsReserveNewBlockFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsReserveNewBlockFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsReserveNewBlockFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsReserveNewBlockFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsReserveNewBlockFtraceEvent& from) {
    F2fsReserveNewBlockFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsReserveNewBlockFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsReserveNewBlockFtraceEvent";
  }
  protected:
  explicit F2fsReserveNewBlockFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kNidFieldNumber = 2,
    kOfsInNodeFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 nid = 2;
  bool has_nid() const;
  void clear_nid() ;
  ::uint32_t nid() const;
  void set_nid(::uint32_t value);

  private:
  ::uint32_t _internal_nid() const;
  void _internal_set_nid(::uint32_t value);

  public:
  // optional uint32 ofs_in_node = 3;
  bool has_ofs_in_node() const;
  void clear_ofs_in_node() ;
  ::uint32_t ofs_in_node() const;
  void set_ofs_in_node(::uint32_t value);

  private:
  ::uint32_t _internal_ofs_in_node() const;
  void _internal_set_ofs_in_node(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsReserveNewBlockFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint32_t nid_;
    ::uint32_t ofs_in_node_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsSetPageDirtyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSetPageDirtyFtraceEvent) */ {
 public:
  inline F2fsSetPageDirtyFtraceEvent() : F2fsSetPageDirtyFtraceEvent(nullptr) {}
  ~F2fsSetPageDirtyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsSetPageDirtyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsSetPageDirtyFtraceEvent(const F2fsSetPageDirtyFtraceEvent& from);
  F2fsSetPageDirtyFtraceEvent(F2fsSetPageDirtyFtraceEvent&& from) noexcept
    : F2fsSetPageDirtyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSetPageDirtyFtraceEvent& operator=(const F2fsSetPageDirtyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSetPageDirtyFtraceEvent& operator=(F2fsSetPageDirtyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsSetPageDirtyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsSetPageDirtyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSetPageDirtyFtraceEvent*>(
               &_F2fsSetPageDirtyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(F2fsSetPageDirtyFtraceEvent& a, F2fsSetPageDirtyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSetPageDirtyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsSetPageDirtyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsSetPageDirtyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsSetPageDirtyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsSetPageDirtyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsSetPageDirtyFtraceEvent& from) {
    F2fsSetPageDirtyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsSetPageDirtyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsSetPageDirtyFtraceEvent";
  }
  protected:
  explicit F2fsSetPageDirtyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDirFieldNumber = 4,
    kIndexFieldNumber = 5,
    kDirtyFieldNumber = 6,
    kUptodateFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 type = 3;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional int32 dir = 4;
  bool has_dir() const;
  void clear_dir() ;
  ::int32_t dir() const;
  void set_dir(::int32_t value);

  private:
  ::int32_t _internal_dir() const;
  void _internal_set_dir(::int32_t value);

  public:
  // optional uint64 index = 5;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional int32 dirty = 6;
  bool has_dirty() const;
  void clear_dirty() ;
  ::int32_t dirty() const;
  void set_dirty(::int32_t value);

  private:
  ::int32_t _internal_dirty() const;
  void _internal_set_dirty(::int32_t value);

  public:
  // optional int32 uptodate = 7;
  bool has_uptodate() const;
  void clear_uptodate() ;
  ::int32_t uptodate() const;
  void set_uptodate(::int32_t value);

  private:
  ::int32_t _internal_uptodate() const;
  void _internal_set_uptodate(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSetPageDirtyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t type_;
    ::int32_t dir_;
    ::uint64_t index_;
    ::int32_t dirty_;
    ::int32_t uptodate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsSubmitWritePageFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSubmitWritePageFtraceEvent) */ {
 public:
  inline F2fsSubmitWritePageFtraceEvent() : F2fsSubmitWritePageFtraceEvent(nullptr) {}
  ~F2fsSubmitWritePageFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsSubmitWritePageFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsSubmitWritePageFtraceEvent(const F2fsSubmitWritePageFtraceEvent& from);
  F2fsSubmitWritePageFtraceEvent(F2fsSubmitWritePageFtraceEvent&& from) noexcept
    : F2fsSubmitWritePageFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSubmitWritePageFtraceEvent& operator=(const F2fsSubmitWritePageFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSubmitWritePageFtraceEvent& operator=(F2fsSubmitWritePageFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsSubmitWritePageFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsSubmitWritePageFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSubmitWritePageFtraceEvent*>(
               &_F2fsSubmitWritePageFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(F2fsSubmitWritePageFtraceEvent& a, F2fsSubmitWritePageFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSubmitWritePageFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsSubmitWritePageFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsSubmitWritePageFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsSubmitWritePageFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsSubmitWritePageFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsSubmitWritePageFtraceEvent& from) {
    F2fsSubmitWritePageFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsSubmitWritePageFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsSubmitWritePageFtraceEvent";
  }
  protected:
  explicit F2fsSubmitWritePageFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kIndexFieldNumber = 4,
    kTypeFieldNumber = 3,
    kBlockFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 index = 4;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional int32 type = 3;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional uint32 block = 5;
  bool has_block() const;
  void clear_block() ;
  ::uint32_t block() const;
  void set_block(::uint32_t value);

  private:
  ::uint32_t _internal_block() const;
  void _internal_set_block(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSubmitWritePageFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t index_;
    ::int32_t type_;
    ::uint32_t block_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsSyncFileEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSyncFileEnterFtraceEvent) */ {
 public:
  inline F2fsSyncFileEnterFtraceEvent() : F2fsSyncFileEnterFtraceEvent(nullptr) {}
  ~F2fsSyncFileEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsSyncFileEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsSyncFileEnterFtraceEvent(const F2fsSyncFileEnterFtraceEvent& from);
  F2fsSyncFileEnterFtraceEvent(F2fsSyncFileEnterFtraceEvent&& from) noexcept
    : F2fsSyncFileEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSyncFileEnterFtraceEvent& operator=(const F2fsSyncFileEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSyncFileEnterFtraceEvent& operator=(F2fsSyncFileEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsSyncFileEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsSyncFileEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSyncFileEnterFtraceEvent*>(
               &_F2fsSyncFileEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(F2fsSyncFileEnterFtraceEvent& a, F2fsSyncFileEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSyncFileEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsSyncFileEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsSyncFileEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsSyncFileEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsSyncFileEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsSyncFileEnterFtraceEvent& from) {
    F2fsSyncFileEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsSyncFileEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsSyncFileEnterFtraceEvent";
  }
  protected:
  explicit F2fsSyncFileEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino() ;
  ::uint64_t pino() const;
  void set_pino(::uint64_t value);

  private:
  ::uint64_t _internal_pino() const;
  void _internal_set_pino(::uint64_t value);

  public:
  // optional int64 size = 5;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink() ;
  ::uint32_t nlink() const;
  void set_nlink(::uint32_t value);

  private:
  ::uint32_t _internal_nlink() const;
  void _internal_set_nlink(::uint32_t value);

  public:
  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise() ;
  ::uint32_t advise() const;
  void set_advise(::uint32_t value);

  private:
  ::uint32_t _internal_advise() const;
  void _internal_set_advise(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSyncFileEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pino_;
    ::int64_t size_;
    ::uint32_t mode_;
    ::uint32_t nlink_;
    ::uint64_t blocks_;
    ::uint32_t advise_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsSyncFileExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSyncFileExitFtraceEvent) */ {
 public:
  inline F2fsSyncFileExitFtraceEvent() : F2fsSyncFileExitFtraceEvent(nullptr) {}
  ~F2fsSyncFileExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsSyncFileExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsSyncFileExitFtraceEvent(const F2fsSyncFileExitFtraceEvent& from);
  F2fsSyncFileExitFtraceEvent(F2fsSyncFileExitFtraceEvent&& from) noexcept
    : F2fsSyncFileExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSyncFileExitFtraceEvent& operator=(const F2fsSyncFileExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSyncFileExitFtraceEvent& operator=(F2fsSyncFileExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsSyncFileExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsSyncFileExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSyncFileExitFtraceEvent*>(
               &_F2fsSyncFileExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(F2fsSyncFileExitFtraceEvent& a, F2fsSyncFileExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSyncFileExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsSyncFileExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsSyncFileExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsSyncFileExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsSyncFileExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsSyncFileExitFtraceEvent& from) {
    F2fsSyncFileExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsSyncFileExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsSyncFileExitFtraceEvent";
  }
  protected:
  explicit F2fsSyncFileExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNeedCpFieldNumber = 3,
    kDatasyncFieldNumber = 4,
    kRetFieldNumber = 5,
    kCpReasonFieldNumber = 6,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 need_cp = 3;
  bool has_need_cp() const;
  void clear_need_cp() ;
  ::uint32_t need_cp() const;
  void set_need_cp(::uint32_t value);

  private:
  ::uint32_t _internal_need_cp() const;
  void _internal_set_need_cp(::uint32_t value);

  public:
  // optional int32 datasync = 4;
  bool has_datasync() const;
  void clear_datasync() ;
  ::int32_t datasync() const;
  void set_datasync(::int32_t value);

  private:
  ::int32_t _internal_datasync() const;
  void _internal_set_datasync(::int32_t value);

  public:
  // optional int32 ret = 5;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional int32 cp_reason = 6;
  bool has_cp_reason() const;
  void clear_cp_reason() ;
  ::int32_t cp_reason() const;
  void set_cp_reason(::int32_t value);

  private:
  ::int32_t _internal_cp_reason() const;
  void _internal_set_cp_reason(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSyncFileExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t need_cp_;
    ::int32_t datasync_;
    ::int32_t ret_;
    ::int32_t cp_reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsSyncFsFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsSyncFsFtraceEvent) */ {
 public:
  inline F2fsSyncFsFtraceEvent() : F2fsSyncFsFtraceEvent(nullptr) {}
  ~F2fsSyncFsFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsSyncFsFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsSyncFsFtraceEvent(const F2fsSyncFsFtraceEvent& from);
  F2fsSyncFsFtraceEvent(F2fsSyncFsFtraceEvent&& from) noexcept
    : F2fsSyncFsFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsSyncFsFtraceEvent& operator=(const F2fsSyncFsFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsSyncFsFtraceEvent& operator=(F2fsSyncFsFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsSyncFsFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsSyncFsFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsSyncFsFtraceEvent*>(
               &_F2fsSyncFsFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(F2fsSyncFsFtraceEvent& a, F2fsSyncFsFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsSyncFsFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsSyncFsFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsSyncFsFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsSyncFsFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsSyncFsFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsSyncFsFtraceEvent& from) {
    F2fsSyncFsFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsSyncFsFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsSyncFsFtraceEvent";
  }
  protected:
  explicit F2fsSyncFsFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kDirtyFieldNumber = 2,
    kWaitFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional int32 dirty = 2;
  bool has_dirty() const;
  void clear_dirty() ;
  ::int32_t dirty() const;
  void set_dirty(::int32_t value);

  private:
  ::int32_t _internal_dirty() const;
  void _internal_set_dirty(::int32_t value);

  public:
  // optional int32 wait = 3;
  bool has_wait() const;
  void clear_wait() ;
  ::int32_t wait() const;
  void set_wait(::int32_t value);

  private:
  ::int32_t _internal_wait() const;
  void _internal_set_wait(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsSyncFsFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::int32_t dirty_;
    ::int32_t wait_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateFtraceEvent) */ {
 public:
  inline F2fsTruncateFtraceEvent() : F2fsTruncateFtraceEvent(nullptr) {}
  ~F2fsTruncateFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateFtraceEvent(const F2fsTruncateFtraceEvent& from);
  F2fsTruncateFtraceEvent(F2fsTruncateFtraceEvent&& from) noexcept
    : F2fsTruncateFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateFtraceEvent& operator=(const F2fsTruncateFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateFtraceEvent& operator=(F2fsTruncateFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateFtraceEvent*>(
               &_F2fsTruncateFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(F2fsTruncateFtraceEvent& a, F2fsTruncateFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateFtraceEvent& from) {
    F2fsTruncateFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateFtraceEvent";
  }
  protected:
  explicit F2fsTruncateFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPinoFieldNumber = 3,
    kSizeFieldNumber = 5,
    kModeFieldNumber = 4,
    kNlinkFieldNumber = 6,
    kBlocksFieldNumber = 7,
    kAdviseFieldNumber = 8,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint64 pino = 3;
  bool has_pino() const;
  void clear_pino() ;
  ::uint64_t pino() const;
  void set_pino(::uint64_t value);

  private:
  ::uint64_t _internal_pino() const;
  void _internal_set_pino(::uint64_t value);

  public:
  // optional int64 size = 5;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint32 mode = 4;
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // optional uint32 nlink = 6;
  bool has_nlink() const;
  void clear_nlink() ;
  ::uint32_t nlink() const;
  void set_nlink(::uint32_t value);

  private:
  ::uint32_t _internal_nlink() const;
  void _internal_set_nlink(::uint32_t value);

  public:
  // optional uint64 blocks = 7;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint32 advise = 8;
  bool has_advise() const;
  void clear_advise() ;
  ::uint32_t advise() const;
  void set_advise(::uint32_t value);

  private:
  ::uint32_t _internal_advise() const;
  void _internal_set_advise(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint64_t pino_;
    ::int64_t size_;
    ::uint32_t mode_;
    ::uint32_t nlink_;
    ::uint64_t blocks_;
    ::uint32_t advise_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateBlocksEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent) */ {
 public:
  inline F2fsTruncateBlocksEnterFtraceEvent() : F2fsTruncateBlocksEnterFtraceEvent(nullptr) {}
  ~F2fsTruncateBlocksEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateBlocksEnterFtraceEvent(const F2fsTruncateBlocksEnterFtraceEvent& from);
  F2fsTruncateBlocksEnterFtraceEvent(F2fsTruncateBlocksEnterFtraceEvent&& from) noexcept
    : F2fsTruncateBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateBlocksEnterFtraceEvent& operator=(const F2fsTruncateBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateBlocksEnterFtraceEvent& operator=(F2fsTruncateBlocksEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateBlocksEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateBlocksEnterFtraceEvent*>(
               &_F2fsTruncateBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(F2fsTruncateBlocksEnterFtraceEvent& a, F2fsTruncateBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateBlocksEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateBlocksEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateBlocksEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateBlocksEnterFtraceEvent& from) {
    F2fsTruncateBlocksEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateBlocksEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent";
  }
  protected:
  explicit F2fsTruncateBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBlocksFieldNumber = 4,
    kFromFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 size = 3;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint64 blocks = 4;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint64 from = 5;
  bool has_from() const;
  void clear_from() ;
  ::uint64_t from() const;
  void set_from(::uint64_t value);

  private:
  ::uint64_t _internal_from() const;
  void _internal_set_from(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t size_;
    ::uint64_t blocks_;
    ::uint64_t from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateBlocksExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent) */ {
 public:
  inline F2fsTruncateBlocksExitFtraceEvent() : F2fsTruncateBlocksExitFtraceEvent(nullptr) {}
  ~F2fsTruncateBlocksExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateBlocksExitFtraceEvent(const F2fsTruncateBlocksExitFtraceEvent& from);
  F2fsTruncateBlocksExitFtraceEvent(F2fsTruncateBlocksExitFtraceEvent&& from) noexcept
    : F2fsTruncateBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateBlocksExitFtraceEvent& operator=(const F2fsTruncateBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateBlocksExitFtraceEvent& operator=(F2fsTruncateBlocksExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateBlocksExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateBlocksExitFtraceEvent*>(
               &_F2fsTruncateBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(F2fsTruncateBlocksExitFtraceEvent& a, F2fsTruncateBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateBlocksExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateBlocksExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateBlocksExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateBlocksExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateBlocksExitFtraceEvent& from) {
    F2fsTruncateBlocksExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateBlocksExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateBlocksExitFtraceEvent";
  }
  protected:
  explicit F2fsTruncateBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateDataBlocksRangeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent) */ {
 public:
  inline F2fsTruncateDataBlocksRangeFtraceEvent() : F2fsTruncateDataBlocksRangeFtraceEvent(nullptr) {}
  ~F2fsTruncateDataBlocksRangeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateDataBlocksRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateDataBlocksRangeFtraceEvent(const F2fsTruncateDataBlocksRangeFtraceEvent& from);
  F2fsTruncateDataBlocksRangeFtraceEvent(F2fsTruncateDataBlocksRangeFtraceEvent&& from) noexcept
    : F2fsTruncateDataBlocksRangeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateDataBlocksRangeFtraceEvent& operator=(const F2fsTruncateDataBlocksRangeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateDataBlocksRangeFtraceEvent& operator=(F2fsTruncateDataBlocksRangeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateDataBlocksRangeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateDataBlocksRangeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateDataBlocksRangeFtraceEvent*>(
               &_F2fsTruncateDataBlocksRangeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(F2fsTruncateDataBlocksRangeFtraceEvent& a, F2fsTruncateDataBlocksRangeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateDataBlocksRangeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateDataBlocksRangeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateDataBlocksRangeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateDataBlocksRangeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateDataBlocksRangeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateDataBlocksRangeFtraceEvent& from) {
    F2fsTruncateDataBlocksRangeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateDataBlocksRangeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent";
  }
  protected:
  explicit F2fsTruncateDataBlocksRangeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kOfsFieldNumber = 4,
    kFreeFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid() ;
  ::uint32_t nid() const;
  void set_nid(::uint32_t value);

  private:
  ::uint32_t _internal_nid() const;
  void _internal_set_nid(::uint32_t value);

  public:
  // optional uint32 ofs = 4;
  bool has_ofs() const;
  void clear_ofs() ;
  ::uint32_t ofs() const;
  void set_ofs(::uint32_t value);

  private:
  ::uint32_t _internal_ofs() const;
  void _internal_set_ofs(::uint32_t value);

  public:
  // optional int32 free = 5;
  bool has_free() const;
  void clear_free() ;
  ::int32_t free() const;
  void set_free(::int32_t value);

  private:
  ::int32_t _internal_free() const;
  void _internal_set_free(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t nid_;
    ::uint32_t ofs_;
    ::int32_t free_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateInodeBlocksEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent) */ {
 public:
  inline F2fsTruncateInodeBlocksEnterFtraceEvent() : F2fsTruncateInodeBlocksEnterFtraceEvent(nullptr) {}
  ~F2fsTruncateInodeBlocksEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateInodeBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateInodeBlocksEnterFtraceEvent(const F2fsTruncateInodeBlocksEnterFtraceEvent& from);
  F2fsTruncateInodeBlocksEnterFtraceEvent(F2fsTruncateInodeBlocksEnterFtraceEvent&& from) noexcept
    : F2fsTruncateInodeBlocksEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateInodeBlocksEnterFtraceEvent& operator=(const F2fsTruncateInodeBlocksEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateInodeBlocksEnterFtraceEvent& operator=(F2fsTruncateInodeBlocksEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateInodeBlocksEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateInodeBlocksEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateInodeBlocksEnterFtraceEvent*>(
               &_F2fsTruncateInodeBlocksEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(F2fsTruncateInodeBlocksEnterFtraceEvent& a, F2fsTruncateInodeBlocksEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateInodeBlocksEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateInodeBlocksEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateInodeBlocksEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateInodeBlocksEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateInodeBlocksEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateInodeBlocksEnterFtraceEvent& from) {
    F2fsTruncateInodeBlocksEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateInodeBlocksEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent";
  }
  protected:
  explicit F2fsTruncateInodeBlocksEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBlocksFieldNumber = 4,
    kFromFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 size = 3;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint64 blocks = 4;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // optional uint64 from = 5;
  bool has_from() const;
  void clear_from() ;
  ::uint64_t from() const;
  void set_from(::uint64_t value);

  private:
  ::uint64_t _internal_from() const;
  void _internal_set_from(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t size_;
    ::uint64_t blocks_;
    ::uint64_t from_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateInodeBlocksExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent) */ {
 public:
  inline F2fsTruncateInodeBlocksExitFtraceEvent() : F2fsTruncateInodeBlocksExitFtraceEvent(nullptr) {}
  ~F2fsTruncateInodeBlocksExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateInodeBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateInodeBlocksExitFtraceEvent(const F2fsTruncateInodeBlocksExitFtraceEvent& from);
  F2fsTruncateInodeBlocksExitFtraceEvent(F2fsTruncateInodeBlocksExitFtraceEvent&& from) noexcept
    : F2fsTruncateInodeBlocksExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateInodeBlocksExitFtraceEvent& operator=(const F2fsTruncateInodeBlocksExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateInodeBlocksExitFtraceEvent& operator=(F2fsTruncateInodeBlocksExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateInodeBlocksExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateInodeBlocksExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateInodeBlocksExitFtraceEvent*>(
               &_F2fsTruncateInodeBlocksExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(F2fsTruncateInodeBlocksExitFtraceEvent& a, F2fsTruncateInodeBlocksExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateInodeBlocksExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateInodeBlocksExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateInodeBlocksExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateInodeBlocksExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateInodeBlocksExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateInodeBlocksExitFtraceEvent& from) {
    F2fsTruncateInodeBlocksExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateInodeBlocksExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent";
  }
  protected:
  explicit F2fsTruncateInodeBlocksExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateNodeFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateNodeFtraceEvent) */ {
 public:
  inline F2fsTruncateNodeFtraceEvent() : F2fsTruncateNodeFtraceEvent(nullptr) {}
  ~F2fsTruncateNodeFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateNodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateNodeFtraceEvent(const F2fsTruncateNodeFtraceEvent& from);
  F2fsTruncateNodeFtraceEvent(F2fsTruncateNodeFtraceEvent&& from) noexcept
    : F2fsTruncateNodeFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateNodeFtraceEvent& operator=(const F2fsTruncateNodeFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateNodeFtraceEvent& operator=(F2fsTruncateNodeFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateNodeFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateNodeFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateNodeFtraceEvent*>(
               &_F2fsTruncateNodeFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(F2fsTruncateNodeFtraceEvent& a, F2fsTruncateNodeFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateNodeFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateNodeFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateNodeFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateNodeFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateNodeFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateNodeFtraceEvent& from) {
    F2fsTruncateNodeFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateNodeFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateNodeFtraceEvent";
  }
  protected:
  explicit F2fsTruncateNodeFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kBlkAddrFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid() ;
  ::uint32_t nid() const;
  void set_nid(::uint32_t value);

  private:
  ::uint32_t _internal_nid() const;
  void _internal_set_nid(::uint32_t value);

  public:
  // optional uint32 blk_addr = 4;
  bool has_blk_addr() const;
  void clear_blk_addr() ;
  ::uint32_t blk_addr() const;
  void set_blk_addr(::uint32_t value);

  private:
  ::uint32_t _internal_blk_addr() const;
  void _internal_set_blk_addr(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateNodeFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t nid_;
    ::uint32_t blk_addr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateNodesEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent) */ {
 public:
  inline F2fsTruncateNodesEnterFtraceEvent() : F2fsTruncateNodesEnterFtraceEvent(nullptr) {}
  ~F2fsTruncateNodesEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateNodesEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateNodesEnterFtraceEvent(const F2fsTruncateNodesEnterFtraceEvent& from);
  F2fsTruncateNodesEnterFtraceEvent(F2fsTruncateNodesEnterFtraceEvent&& from) noexcept
    : F2fsTruncateNodesEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateNodesEnterFtraceEvent& operator=(const F2fsTruncateNodesEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateNodesEnterFtraceEvent& operator=(F2fsTruncateNodesEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateNodesEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateNodesEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateNodesEnterFtraceEvent*>(
               &_F2fsTruncateNodesEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(F2fsTruncateNodesEnterFtraceEvent& a, F2fsTruncateNodesEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateNodesEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateNodesEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateNodesEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateNodesEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateNodesEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateNodesEnterFtraceEvent& from) {
    F2fsTruncateNodesEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateNodesEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateNodesEnterFtraceEvent";
  }
  protected:
  explicit F2fsTruncateNodesEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kBlkAddrFieldNumber = 4,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid() ;
  ::uint32_t nid() const;
  void set_nid(::uint32_t value);

  private:
  ::uint32_t _internal_nid() const;
  void _internal_set_nid(::uint32_t value);

  public:
  // optional uint32 blk_addr = 4;
  bool has_blk_addr() const;
  void clear_blk_addr() ;
  ::uint32_t blk_addr() const;
  void set_blk_addr(::uint32_t value);

  private:
  ::uint32_t _internal_blk_addr() const;
  void _internal_set_blk_addr(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t nid_;
    ::uint32_t blk_addr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncateNodesExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncateNodesExitFtraceEvent) */ {
 public:
  inline F2fsTruncateNodesExitFtraceEvent() : F2fsTruncateNodesExitFtraceEvent(nullptr) {}
  ~F2fsTruncateNodesExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncateNodesExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncateNodesExitFtraceEvent(const F2fsTruncateNodesExitFtraceEvent& from);
  F2fsTruncateNodesExitFtraceEvent(F2fsTruncateNodesExitFtraceEvent&& from) noexcept
    : F2fsTruncateNodesExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncateNodesExitFtraceEvent& operator=(const F2fsTruncateNodesExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncateNodesExitFtraceEvent& operator=(F2fsTruncateNodesExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncateNodesExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncateNodesExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncateNodesExitFtraceEvent*>(
               &_F2fsTruncateNodesExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(F2fsTruncateNodesExitFtraceEvent& a, F2fsTruncateNodesExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncateNodesExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncateNodesExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncateNodesExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncateNodesExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncateNodesExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncateNodesExitFtraceEvent& from) {
    F2fsTruncateNodesExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncateNodesExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncateNodesExitFtraceEvent";
  }
  protected:
  explicit F2fsTruncateNodesExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncateNodesExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsTruncatePartialNodesFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent) */ {
 public:
  inline F2fsTruncatePartialNodesFtraceEvent() : F2fsTruncatePartialNodesFtraceEvent(nullptr) {}
  ~F2fsTruncatePartialNodesFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsTruncatePartialNodesFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsTruncatePartialNodesFtraceEvent(const F2fsTruncatePartialNodesFtraceEvent& from);
  F2fsTruncatePartialNodesFtraceEvent(F2fsTruncatePartialNodesFtraceEvent&& from) noexcept
    : F2fsTruncatePartialNodesFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsTruncatePartialNodesFtraceEvent& operator=(const F2fsTruncatePartialNodesFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsTruncatePartialNodesFtraceEvent& operator=(F2fsTruncatePartialNodesFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsTruncatePartialNodesFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsTruncatePartialNodesFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsTruncatePartialNodesFtraceEvent*>(
               &_F2fsTruncatePartialNodesFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(F2fsTruncatePartialNodesFtraceEvent& a, F2fsTruncatePartialNodesFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsTruncatePartialNodesFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsTruncatePartialNodesFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsTruncatePartialNodesFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsTruncatePartialNodesFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsTruncatePartialNodesFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsTruncatePartialNodesFtraceEvent& from) {
    F2fsTruncatePartialNodesFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsTruncatePartialNodesFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsTruncatePartialNodesFtraceEvent";
  }
  protected:
  explicit F2fsTruncatePartialNodesFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kNidFieldNumber = 3,
    kDepthFieldNumber = 4,
    kErrFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional uint32 nid = 3;
  bool has_nid() const;
  void clear_nid() ;
  ::uint32_t nid() const;
  void set_nid(::uint32_t value);

  private:
  ::uint32_t _internal_nid() const;
  void _internal_set_nid(::uint32_t value);

  public:
  // optional int32 depth = 4;
  bool has_depth() const;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // optional int32 err = 5;
  bool has_err() const;
  void clear_err() ;
  ::int32_t err() const;
  void set_err(::int32_t value);

  private:
  ::int32_t _internal_err() const;
  void _internal_set_err(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::uint32_t nid_;
    ::int32_t depth_;
    ::int32_t err_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsUnlinkEnterFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsUnlinkEnterFtraceEvent) */ {
 public:
  inline F2fsUnlinkEnterFtraceEvent() : F2fsUnlinkEnterFtraceEvent(nullptr) {}
  ~F2fsUnlinkEnterFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsUnlinkEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsUnlinkEnterFtraceEvent(const F2fsUnlinkEnterFtraceEvent& from);
  F2fsUnlinkEnterFtraceEvent(F2fsUnlinkEnterFtraceEvent&& from) noexcept
    : F2fsUnlinkEnterFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsUnlinkEnterFtraceEvent& operator=(const F2fsUnlinkEnterFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsUnlinkEnterFtraceEvent& operator=(F2fsUnlinkEnterFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsUnlinkEnterFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsUnlinkEnterFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsUnlinkEnterFtraceEvent*>(
               &_F2fsUnlinkEnterFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(F2fsUnlinkEnterFtraceEvent& a, F2fsUnlinkEnterFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsUnlinkEnterFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsUnlinkEnterFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsUnlinkEnterFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsUnlinkEnterFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsUnlinkEnterFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsUnlinkEnterFtraceEvent& from) {
    F2fsUnlinkEnterFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsUnlinkEnterFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsUnlinkEnterFtraceEvent";
  }
  protected:
  explicit F2fsUnlinkEnterFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kSizeFieldNumber = 3,
    kBlocksFieldNumber = 4,
  };
  // optional string name = 5;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 size = 3;
  bool has_size() const;
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // optional uint64 blocks = 4;
  bool has_blocks() const;
  void clear_blocks() ;
  ::uint64_t blocks() const;
  void set_blocks(::uint64_t value);

  private:
  ::uint64_t _internal_blocks() const;
  void _internal_set_blocks(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsUnlinkEnterFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t size_;
    ::uint64_t blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsUnlinkExitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsUnlinkExitFtraceEvent) */ {
 public:
  inline F2fsUnlinkExitFtraceEvent() : F2fsUnlinkExitFtraceEvent(nullptr) {}
  ~F2fsUnlinkExitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsUnlinkExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsUnlinkExitFtraceEvent(const F2fsUnlinkExitFtraceEvent& from);
  F2fsUnlinkExitFtraceEvent(F2fsUnlinkExitFtraceEvent&& from) noexcept
    : F2fsUnlinkExitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsUnlinkExitFtraceEvent& operator=(const F2fsUnlinkExitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsUnlinkExitFtraceEvent& operator=(F2fsUnlinkExitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsUnlinkExitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsUnlinkExitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsUnlinkExitFtraceEvent*>(
               &_F2fsUnlinkExitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(F2fsUnlinkExitFtraceEvent& a, F2fsUnlinkExitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsUnlinkExitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsUnlinkExitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsUnlinkExitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsUnlinkExitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsUnlinkExitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsUnlinkExitFtraceEvent& from) {
    F2fsUnlinkExitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsUnlinkExitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsUnlinkExitFtraceEvent";
  }
  protected:
  explicit F2fsUnlinkExitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 ret = 3;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsUnlinkExitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsVmPageMkwriteFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsVmPageMkwriteFtraceEvent) */ {
 public:
  inline F2fsVmPageMkwriteFtraceEvent() : F2fsVmPageMkwriteFtraceEvent(nullptr) {}
  ~F2fsVmPageMkwriteFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsVmPageMkwriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsVmPageMkwriteFtraceEvent(const F2fsVmPageMkwriteFtraceEvent& from);
  F2fsVmPageMkwriteFtraceEvent(F2fsVmPageMkwriteFtraceEvent&& from) noexcept
    : F2fsVmPageMkwriteFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsVmPageMkwriteFtraceEvent& operator=(const F2fsVmPageMkwriteFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsVmPageMkwriteFtraceEvent& operator=(F2fsVmPageMkwriteFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsVmPageMkwriteFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsVmPageMkwriteFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsVmPageMkwriteFtraceEvent*>(
               &_F2fsVmPageMkwriteFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(F2fsVmPageMkwriteFtraceEvent& a, F2fsVmPageMkwriteFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsVmPageMkwriteFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsVmPageMkwriteFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsVmPageMkwriteFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsVmPageMkwriteFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsVmPageMkwriteFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsVmPageMkwriteFtraceEvent& from) {
    F2fsVmPageMkwriteFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsVmPageMkwriteFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsVmPageMkwriteFtraceEvent";
  }
  protected:
  explicit F2fsVmPageMkwriteFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDirFieldNumber = 4,
    kIndexFieldNumber = 5,
    kDirtyFieldNumber = 6,
    kUptodateFieldNumber = 7,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int32 type = 3;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional int32 dir = 4;
  bool has_dir() const;
  void clear_dir() ;
  ::int32_t dir() const;
  void set_dir(::int32_t value);

  private:
  ::int32_t _internal_dir() const;
  void _internal_set_dir(::int32_t value);

  public:
  // optional uint64 index = 5;
  bool has_index() const;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // optional int32 dirty = 6;
  bool has_dirty() const;
  void clear_dirty() ;
  ::int32_t dirty() const;
  void set_dirty(::int32_t value);

  private:
  ::int32_t _internal_dirty() const;
  void _internal_set_dirty(::int32_t value);

  public:
  // optional int32 uptodate = 7;
  bool has_uptodate() const;
  void clear_uptodate() ;
  ::int32_t uptodate() const;
  void set_uptodate(::int32_t value);

  private:
  ::int32_t _internal_uptodate() const;
  void _internal_set_uptodate(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsVmPageMkwriteFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int32_t type_;
    ::int32_t dir_;
    ::uint64_t index_;
    ::int32_t dirty_;
    ::int32_t uptodate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsWriteBeginFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsWriteBeginFtraceEvent) */ {
 public:
  inline F2fsWriteBeginFtraceEvent() : F2fsWriteBeginFtraceEvent(nullptr) {}
  ~F2fsWriteBeginFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsWriteBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsWriteBeginFtraceEvent(const F2fsWriteBeginFtraceEvent& from);
  F2fsWriteBeginFtraceEvent(F2fsWriteBeginFtraceEvent&& from) noexcept
    : F2fsWriteBeginFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsWriteBeginFtraceEvent& operator=(const F2fsWriteBeginFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsWriteBeginFtraceEvent& operator=(F2fsWriteBeginFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsWriteBeginFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsWriteBeginFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsWriteBeginFtraceEvent*>(
               &_F2fsWriteBeginFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(F2fsWriteBeginFtraceEvent& a, F2fsWriteBeginFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsWriteBeginFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsWriteBeginFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsWriteBeginFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsWriteBeginFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsWriteBeginFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsWriteBeginFtraceEvent& from) {
    F2fsWriteBeginFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsWriteBeginFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsWriteBeginFtraceEvent";
  }
  protected:
  explicit F2fsWriteBeginFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kFlagsFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 flags = 5;
  bool has_flags() const;
  void clear_flags() ;
  ::uint32_t flags() const;
  void set_flags(::uint32_t value);

  private:
  ::uint32_t _internal_flags() const;
  void _internal_set_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsWriteBeginFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsWriteCheckpointFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsWriteCheckpointFtraceEvent) */ {
 public:
  inline F2fsWriteCheckpointFtraceEvent() : F2fsWriteCheckpointFtraceEvent(nullptr) {}
  ~F2fsWriteCheckpointFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsWriteCheckpointFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsWriteCheckpointFtraceEvent(const F2fsWriteCheckpointFtraceEvent& from);
  F2fsWriteCheckpointFtraceEvent(F2fsWriteCheckpointFtraceEvent&& from) noexcept
    : F2fsWriteCheckpointFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsWriteCheckpointFtraceEvent& operator=(const F2fsWriteCheckpointFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsWriteCheckpointFtraceEvent& operator=(F2fsWriteCheckpointFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsWriteCheckpointFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsWriteCheckpointFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsWriteCheckpointFtraceEvent*>(
               &_F2fsWriteCheckpointFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(F2fsWriteCheckpointFtraceEvent& a, F2fsWriteCheckpointFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsWriteCheckpointFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsWriteCheckpointFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsWriteCheckpointFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsWriteCheckpointFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsWriteCheckpointFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsWriteCheckpointFtraceEvent& from) {
    F2fsWriteCheckpointFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsWriteCheckpointFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsWriteCheckpointFtraceEvent";
  }
  protected:
  explicit F2fsWriteCheckpointFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kDevFieldNumber = 1,
    kIsUmountFieldNumber = 2,
    kReasonFieldNumber = 4,
  };
  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg() ;
  const std::string& msg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 is_umount = 2;
  bool has_is_umount() const;
  void clear_is_umount() ;
  ::uint32_t is_umount() const;
  void set_is_umount(::uint32_t value);

  private:
  ::uint32_t _internal_is_umount() const;
  void _internal_set_is_umount(::uint32_t value);

  public:
  // optional int32 reason = 4;
  bool has_reason() const;
  void clear_reason() ;
  ::int32_t reason() const;
  void set_reason(::int32_t value);

  private:
  ::int32_t _internal_reason() const;
  void _internal_set_reason(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsWriteCheckpointFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::uint64_t dev_;
    ::uint32_t is_umount_;
    ::int32_t reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsWriteEndFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsWriteEndFtraceEvent) */ {
 public:
  inline F2fsWriteEndFtraceEvent() : F2fsWriteEndFtraceEvent(nullptr) {}
  ~F2fsWriteEndFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsWriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsWriteEndFtraceEvent(const F2fsWriteEndFtraceEvent& from);
  F2fsWriteEndFtraceEvent(F2fsWriteEndFtraceEvent&& from) noexcept
    : F2fsWriteEndFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsWriteEndFtraceEvent& operator=(const F2fsWriteEndFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsWriteEndFtraceEvent& operator=(F2fsWriteEndFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsWriteEndFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsWriteEndFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsWriteEndFtraceEvent*>(
               &_F2fsWriteEndFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(F2fsWriteEndFtraceEvent& a, F2fsWriteEndFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsWriteEndFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsWriteEndFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsWriteEndFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsWriteEndFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsWriteEndFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsWriteEndFtraceEvent& from) {
    F2fsWriteEndFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsWriteEndFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsWriteEndFtraceEvent";
  }
  protected:
  explicit F2fsWriteEndFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevFieldNumber = 1,
    kInoFieldNumber = 2,
    kPosFieldNumber = 3,
    kLenFieldNumber = 4,
    kCopiedFieldNumber = 5,
  };
  // optional uint64 dev = 1;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 ino = 2;
  bool has_ino() const;
  void clear_ino() ;
  ::uint64_t ino() const;
  void set_ino(::uint64_t value);

  private:
  ::uint64_t _internal_ino() const;
  void _internal_set_ino(::uint64_t value);

  public:
  // optional int64 pos = 3;
  bool has_pos() const;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // optional uint32 len = 4;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // optional uint32 copied = 5;
  bool has_copied() const;
  void clear_copied() ;
  ::uint32_t copied() const;
  void set_copied(::uint32_t value);

  private:
  ::uint32_t _internal_copied() const;
  void _internal_set_copied(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsWriteEndFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t dev_;
    ::uint64_t ino_;
    ::int64_t pos_;
    ::uint32_t len_;
    ::uint32_t copied_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsIostatFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsIostatFtraceEvent) */ {
 public:
  inline F2fsIostatFtraceEvent() : F2fsIostatFtraceEvent(nullptr) {}
  ~F2fsIostatFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsIostatFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsIostatFtraceEvent(const F2fsIostatFtraceEvent& from);
  F2fsIostatFtraceEvent(F2fsIostatFtraceEvent&& from) noexcept
    : F2fsIostatFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsIostatFtraceEvent& operator=(const F2fsIostatFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsIostatFtraceEvent& operator=(F2fsIostatFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsIostatFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsIostatFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsIostatFtraceEvent*>(
               &_F2fsIostatFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(F2fsIostatFtraceEvent& a, F2fsIostatFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsIostatFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsIostatFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsIostatFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsIostatFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsIostatFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsIostatFtraceEvent& from) {
    F2fsIostatFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsIostatFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsIostatFtraceEvent";
  }
  protected:
  explicit F2fsIostatFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppBioFieldNumber = 1,
    kAppBrioFieldNumber = 2,
    kAppDioFieldNumber = 3,
    kAppDrioFieldNumber = 4,
    kAppMioFieldNumber = 5,
    kAppMrioFieldNumber = 6,
    kAppRioFieldNumber = 7,
    kAppWioFieldNumber = 8,
    kDevFieldNumber = 9,
    kFsCdrioFieldNumber = 10,
    kFsCpDioFieldNumber = 11,
    kFsCpMioFieldNumber = 12,
    kFsCpNioFieldNumber = 13,
    kFsDioFieldNumber = 14,
    kFsDiscardFieldNumber = 15,
    kFsDrioFieldNumber = 16,
    kFsGcDioFieldNumber = 17,
    kFsGcNioFieldNumber = 18,
    kFsGdrioFieldNumber = 19,
    kFsMioFieldNumber = 20,
    kFsMrioFieldNumber = 21,
    kFsNioFieldNumber = 22,
    kFsNrioFieldNumber = 23,
  };
  // optional uint64 app_bio = 1;
  bool has_app_bio() const;
  void clear_app_bio() ;
  ::uint64_t app_bio() const;
  void set_app_bio(::uint64_t value);

  private:
  ::uint64_t _internal_app_bio() const;
  void _internal_set_app_bio(::uint64_t value);

  public:
  // optional uint64 app_brio = 2;
  bool has_app_brio() const;
  void clear_app_brio() ;
  ::uint64_t app_brio() const;
  void set_app_brio(::uint64_t value);

  private:
  ::uint64_t _internal_app_brio() const;
  void _internal_set_app_brio(::uint64_t value);

  public:
  // optional uint64 app_dio = 3;
  bool has_app_dio() const;
  void clear_app_dio() ;
  ::uint64_t app_dio() const;
  void set_app_dio(::uint64_t value);

  private:
  ::uint64_t _internal_app_dio() const;
  void _internal_set_app_dio(::uint64_t value);

  public:
  // optional uint64 app_drio = 4;
  bool has_app_drio() const;
  void clear_app_drio() ;
  ::uint64_t app_drio() const;
  void set_app_drio(::uint64_t value);

  private:
  ::uint64_t _internal_app_drio() const;
  void _internal_set_app_drio(::uint64_t value);

  public:
  // optional uint64 app_mio = 5;
  bool has_app_mio() const;
  void clear_app_mio() ;
  ::uint64_t app_mio() const;
  void set_app_mio(::uint64_t value);

  private:
  ::uint64_t _internal_app_mio() const;
  void _internal_set_app_mio(::uint64_t value);

  public:
  // optional uint64 app_mrio = 6;
  bool has_app_mrio() const;
  void clear_app_mrio() ;
  ::uint64_t app_mrio() const;
  void set_app_mrio(::uint64_t value);

  private:
  ::uint64_t _internal_app_mrio() const;
  void _internal_set_app_mrio(::uint64_t value);

  public:
  // optional uint64 app_rio = 7;
  bool has_app_rio() const;
  void clear_app_rio() ;
  ::uint64_t app_rio() const;
  void set_app_rio(::uint64_t value);

  private:
  ::uint64_t _internal_app_rio() const;
  void _internal_set_app_rio(::uint64_t value);

  public:
  // optional uint64 app_wio = 8;
  bool has_app_wio() const;
  void clear_app_wio() ;
  ::uint64_t app_wio() const;
  void set_app_wio(::uint64_t value);

  private:
  ::uint64_t _internal_app_wio() const;
  void _internal_set_app_wio(::uint64_t value);

  public:
  // optional uint64 dev = 9;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint64 fs_cdrio = 10;
  bool has_fs_cdrio() const;
  void clear_fs_cdrio() ;
  ::uint64_t fs_cdrio() const;
  void set_fs_cdrio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_cdrio() const;
  void _internal_set_fs_cdrio(::uint64_t value);

  public:
  // optional uint64 fs_cp_dio = 11;
  bool has_fs_cp_dio() const;
  void clear_fs_cp_dio() ;
  ::uint64_t fs_cp_dio() const;
  void set_fs_cp_dio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_cp_dio() const;
  void _internal_set_fs_cp_dio(::uint64_t value);

  public:
  // optional uint64 fs_cp_mio = 12;
  bool has_fs_cp_mio() const;
  void clear_fs_cp_mio() ;
  ::uint64_t fs_cp_mio() const;
  void set_fs_cp_mio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_cp_mio() const;
  void _internal_set_fs_cp_mio(::uint64_t value);

  public:
  // optional uint64 fs_cp_nio = 13;
  bool has_fs_cp_nio() const;
  void clear_fs_cp_nio() ;
  ::uint64_t fs_cp_nio() const;
  void set_fs_cp_nio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_cp_nio() const;
  void _internal_set_fs_cp_nio(::uint64_t value);

  public:
  // optional uint64 fs_dio = 14;
  bool has_fs_dio() const;
  void clear_fs_dio() ;
  ::uint64_t fs_dio() const;
  void set_fs_dio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_dio() const;
  void _internal_set_fs_dio(::uint64_t value);

  public:
  // optional uint64 fs_discard = 15;
  bool has_fs_discard() const;
  void clear_fs_discard() ;
  ::uint64_t fs_discard() const;
  void set_fs_discard(::uint64_t value);

  private:
  ::uint64_t _internal_fs_discard() const;
  void _internal_set_fs_discard(::uint64_t value);

  public:
  // optional uint64 fs_drio = 16;
  bool has_fs_drio() const;
  void clear_fs_drio() ;
  ::uint64_t fs_drio() const;
  void set_fs_drio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_drio() const;
  void _internal_set_fs_drio(::uint64_t value);

  public:
  // optional uint64 fs_gc_dio = 17;
  bool has_fs_gc_dio() const;
  void clear_fs_gc_dio() ;
  ::uint64_t fs_gc_dio() const;
  void set_fs_gc_dio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_gc_dio() const;
  void _internal_set_fs_gc_dio(::uint64_t value);

  public:
  // optional uint64 fs_gc_nio = 18;
  bool has_fs_gc_nio() const;
  void clear_fs_gc_nio() ;
  ::uint64_t fs_gc_nio() const;
  void set_fs_gc_nio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_gc_nio() const;
  void _internal_set_fs_gc_nio(::uint64_t value);

  public:
  // optional uint64 fs_gdrio = 19;
  bool has_fs_gdrio() const;
  void clear_fs_gdrio() ;
  ::uint64_t fs_gdrio() const;
  void set_fs_gdrio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_gdrio() const;
  void _internal_set_fs_gdrio(::uint64_t value);

  public:
  // optional uint64 fs_mio = 20;
  bool has_fs_mio() const;
  void clear_fs_mio() ;
  ::uint64_t fs_mio() const;
  void set_fs_mio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_mio() const;
  void _internal_set_fs_mio(::uint64_t value);

  public:
  // optional uint64 fs_mrio = 21;
  bool has_fs_mrio() const;
  void clear_fs_mrio() ;
  ::uint64_t fs_mrio() const;
  void set_fs_mrio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_mrio() const;
  void _internal_set_fs_mrio(::uint64_t value);

  public:
  // optional uint64 fs_nio = 22;
  bool has_fs_nio() const;
  void clear_fs_nio() ;
  ::uint64_t fs_nio() const;
  void set_fs_nio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_nio() const;
  void _internal_set_fs_nio(::uint64_t value);

  public:
  // optional uint64 fs_nrio = 23;
  bool has_fs_nrio() const;
  void clear_fs_nrio() ;
  ::uint64_t fs_nrio() const;
  void set_fs_nrio(::uint64_t value);

  private:
  ::uint64_t _internal_fs_nrio() const;
  void _internal_set_fs_nrio(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsIostatFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t app_bio_;
    ::uint64_t app_brio_;
    ::uint64_t app_dio_;
    ::uint64_t app_drio_;
    ::uint64_t app_mio_;
    ::uint64_t app_mrio_;
    ::uint64_t app_rio_;
    ::uint64_t app_wio_;
    ::uint64_t dev_;
    ::uint64_t fs_cdrio_;
    ::uint64_t fs_cp_dio_;
    ::uint64_t fs_cp_mio_;
    ::uint64_t fs_cp_nio_;
    ::uint64_t fs_dio_;
    ::uint64_t fs_discard_;
    ::uint64_t fs_drio_;
    ::uint64_t fs_gc_dio_;
    ::uint64_t fs_gc_nio_;
    ::uint64_t fs_gdrio_;
    ::uint64_t fs_mio_;
    ::uint64_t fs_mrio_;
    ::uint64_t fs_nio_;
    ::uint64_t fs_nrio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};// -------------------------------------------------------------------

class F2fsIostatLatencyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.F2fsIostatLatencyFtraceEvent) */ {
 public:
  inline F2fsIostatLatencyFtraceEvent() : F2fsIostatLatencyFtraceEvent(nullptr) {}
  ~F2fsIostatLatencyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR F2fsIostatLatencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  F2fsIostatLatencyFtraceEvent(const F2fsIostatLatencyFtraceEvent& from);
  F2fsIostatLatencyFtraceEvent(F2fsIostatLatencyFtraceEvent&& from) noexcept
    : F2fsIostatLatencyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline F2fsIostatLatencyFtraceEvent& operator=(const F2fsIostatLatencyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline F2fsIostatLatencyFtraceEvent& operator=(F2fsIostatLatencyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const F2fsIostatLatencyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const F2fsIostatLatencyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const F2fsIostatLatencyFtraceEvent*>(
               &_F2fsIostatLatencyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(F2fsIostatLatencyFtraceEvent& a, F2fsIostatLatencyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(F2fsIostatLatencyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(F2fsIostatLatencyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  F2fsIostatLatencyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<F2fsIostatLatencyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const F2fsIostatLatencyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const F2fsIostatLatencyFtraceEvent& from) {
    F2fsIostatLatencyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(F2fsIostatLatencyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.F2fsIostatLatencyFtraceEvent";
  }
  protected:
  explicit F2fsIostatLatencyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDRdAvgFieldNumber = 1,
    kDRdCntFieldNumber = 2,
    kDRdPeakFieldNumber = 3,
    kDWrAsAvgFieldNumber = 4,
    kDWrAsCntFieldNumber = 5,
    kDWrAsPeakFieldNumber = 6,
    kDWrSAvgFieldNumber = 7,
    kDWrSCntFieldNumber = 8,
    kDevFieldNumber = 10,
    kDWrSPeakFieldNumber = 9,
    kMRdAvgFieldNumber = 11,
    kMRdCntFieldNumber = 12,
    kMRdPeakFieldNumber = 13,
    kMWrAsAvgFieldNumber = 14,
    kMWrAsCntFieldNumber = 15,
    kMWrAsPeakFieldNumber = 16,
    kMWrSAvgFieldNumber = 17,
    kMWrSCntFieldNumber = 18,
    kMWrSPeakFieldNumber = 19,
    kNRdAvgFieldNumber = 20,
    kNRdCntFieldNumber = 21,
    kNRdPeakFieldNumber = 22,
    kNWrAsAvgFieldNumber = 23,
    kNWrAsCntFieldNumber = 24,
    kNWrAsPeakFieldNumber = 25,
    kNWrSAvgFieldNumber = 26,
    kNWrSCntFieldNumber = 27,
    kNWrSPeakFieldNumber = 28,
  };
  // optional uint32 d_rd_avg = 1;
  bool has_d_rd_avg() const;
  void clear_d_rd_avg() ;
  ::uint32_t d_rd_avg() const;
  void set_d_rd_avg(::uint32_t value);

  private:
  ::uint32_t _internal_d_rd_avg() const;
  void _internal_set_d_rd_avg(::uint32_t value);

  public:
  // optional uint32 d_rd_cnt = 2;
  bool has_d_rd_cnt() const;
  void clear_d_rd_cnt() ;
  ::uint32_t d_rd_cnt() const;
  void set_d_rd_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_d_rd_cnt() const;
  void _internal_set_d_rd_cnt(::uint32_t value);

  public:
  // optional uint32 d_rd_peak = 3;
  bool has_d_rd_peak() const;
  void clear_d_rd_peak() ;
  ::uint32_t d_rd_peak() const;
  void set_d_rd_peak(::uint32_t value);

  private:
  ::uint32_t _internal_d_rd_peak() const;
  void _internal_set_d_rd_peak(::uint32_t value);

  public:
  // optional uint32 d_wr_as_avg = 4;
  bool has_d_wr_as_avg() const;
  void clear_d_wr_as_avg() ;
  ::uint32_t d_wr_as_avg() const;
  void set_d_wr_as_avg(::uint32_t value);

  private:
  ::uint32_t _internal_d_wr_as_avg() const;
  void _internal_set_d_wr_as_avg(::uint32_t value);

  public:
  // optional uint32 d_wr_as_cnt = 5;
  bool has_d_wr_as_cnt() const;
  void clear_d_wr_as_cnt() ;
  ::uint32_t d_wr_as_cnt() const;
  void set_d_wr_as_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_d_wr_as_cnt() const;
  void _internal_set_d_wr_as_cnt(::uint32_t value);

  public:
  // optional uint32 d_wr_as_peak = 6;
  bool has_d_wr_as_peak() const;
  void clear_d_wr_as_peak() ;
  ::uint32_t d_wr_as_peak() const;
  void set_d_wr_as_peak(::uint32_t value);

  private:
  ::uint32_t _internal_d_wr_as_peak() const;
  void _internal_set_d_wr_as_peak(::uint32_t value);

  public:
  // optional uint32 d_wr_s_avg = 7;
  bool has_d_wr_s_avg() const;
  void clear_d_wr_s_avg() ;
  ::uint32_t d_wr_s_avg() const;
  void set_d_wr_s_avg(::uint32_t value);

  private:
  ::uint32_t _internal_d_wr_s_avg() const;
  void _internal_set_d_wr_s_avg(::uint32_t value);

  public:
  // optional uint32 d_wr_s_cnt = 8;
  bool has_d_wr_s_cnt() const;
  void clear_d_wr_s_cnt() ;
  ::uint32_t d_wr_s_cnt() const;
  void set_d_wr_s_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_d_wr_s_cnt() const;
  void _internal_set_d_wr_s_cnt(::uint32_t value);

  public:
  // optional uint64 dev = 10;
  bool has_dev() const;
  void clear_dev() ;
  ::uint64_t dev() const;
  void set_dev(::uint64_t value);

  private:
  ::uint64_t _internal_dev() const;
  void _internal_set_dev(::uint64_t value);

  public:
  // optional uint32 d_wr_s_peak = 9;
  bool has_d_wr_s_peak() const;
  void clear_d_wr_s_peak() ;
  ::uint32_t d_wr_s_peak() const;
  void set_d_wr_s_peak(::uint32_t value);

  private:
  ::uint32_t _internal_d_wr_s_peak() const;
  void _internal_set_d_wr_s_peak(::uint32_t value);

  public:
  // optional uint32 m_rd_avg = 11;
  bool has_m_rd_avg() const;
  void clear_m_rd_avg() ;
  ::uint32_t m_rd_avg() const;
  void set_m_rd_avg(::uint32_t value);

  private:
  ::uint32_t _internal_m_rd_avg() const;
  void _internal_set_m_rd_avg(::uint32_t value);

  public:
  // optional uint32 m_rd_cnt = 12;
  bool has_m_rd_cnt() const;
  void clear_m_rd_cnt() ;
  ::uint32_t m_rd_cnt() const;
  void set_m_rd_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_m_rd_cnt() const;
  void _internal_set_m_rd_cnt(::uint32_t value);

  public:
  // optional uint32 m_rd_peak = 13;
  bool has_m_rd_peak() const;
  void clear_m_rd_peak() ;
  ::uint32_t m_rd_peak() const;
  void set_m_rd_peak(::uint32_t value);

  private:
  ::uint32_t _internal_m_rd_peak() const;
  void _internal_set_m_rd_peak(::uint32_t value);

  public:
  // optional uint32 m_wr_as_avg = 14;
  bool has_m_wr_as_avg() const;
  void clear_m_wr_as_avg() ;
  ::uint32_t m_wr_as_avg() const;
  void set_m_wr_as_avg(::uint32_t value);

  private:
  ::uint32_t _internal_m_wr_as_avg() const;
  void _internal_set_m_wr_as_avg(::uint32_t value);

  public:
  // optional uint32 m_wr_as_cnt = 15;
  bool has_m_wr_as_cnt() const;
  void clear_m_wr_as_cnt() ;
  ::uint32_t m_wr_as_cnt() const;
  void set_m_wr_as_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_m_wr_as_cnt() const;
  void _internal_set_m_wr_as_cnt(::uint32_t value);

  public:
  // optional uint32 m_wr_as_peak = 16;
  bool has_m_wr_as_peak() const;
  void clear_m_wr_as_peak() ;
  ::uint32_t m_wr_as_peak() const;
  void set_m_wr_as_peak(::uint32_t value);

  private:
  ::uint32_t _internal_m_wr_as_peak() const;
  void _internal_set_m_wr_as_peak(::uint32_t value);

  public:
  // optional uint32 m_wr_s_avg = 17;
  bool has_m_wr_s_avg() const;
  void clear_m_wr_s_avg() ;
  ::uint32_t m_wr_s_avg() const;
  void set_m_wr_s_avg(::uint32_t value);

  private:
  ::uint32_t _internal_m_wr_s_avg() const;
  void _internal_set_m_wr_s_avg(::uint32_t value);

  public:
  // optional uint32 m_wr_s_cnt = 18;
  bool has_m_wr_s_cnt() const;
  void clear_m_wr_s_cnt() ;
  ::uint32_t m_wr_s_cnt() const;
  void set_m_wr_s_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_m_wr_s_cnt() const;
  void _internal_set_m_wr_s_cnt(::uint32_t value);

  public:
  // optional uint32 m_wr_s_peak = 19;
  bool has_m_wr_s_peak() const;
  void clear_m_wr_s_peak() ;
  ::uint32_t m_wr_s_peak() const;
  void set_m_wr_s_peak(::uint32_t value);

  private:
  ::uint32_t _internal_m_wr_s_peak() const;
  void _internal_set_m_wr_s_peak(::uint32_t value);

  public:
  // optional uint32 n_rd_avg = 20;
  bool has_n_rd_avg() const;
  void clear_n_rd_avg() ;
  ::uint32_t n_rd_avg() const;
  void set_n_rd_avg(::uint32_t value);

  private:
  ::uint32_t _internal_n_rd_avg() const;
  void _internal_set_n_rd_avg(::uint32_t value);

  public:
  // optional uint32 n_rd_cnt = 21;
  bool has_n_rd_cnt() const;
  void clear_n_rd_cnt() ;
  ::uint32_t n_rd_cnt() const;
  void set_n_rd_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_n_rd_cnt() const;
  void _internal_set_n_rd_cnt(::uint32_t value);

  public:
  // optional uint32 n_rd_peak = 22;
  bool has_n_rd_peak() const;
  void clear_n_rd_peak() ;
  ::uint32_t n_rd_peak() const;
  void set_n_rd_peak(::uint32_t value);

  private:
  ::uint32_t _internal_n_rd_peak() const;
  void _internal_set_n_rd_peak(::uint32_t value);

  public:
  // optional uint32 n_wr_as_avg = 23;
  bool has_n_wr_as_avg() const;
  void clear_n_wr_as_avg() ;
  ::uint32_t n_wr_as_avg() const;
  void set_n_wr_as_avg(::uint32_t value);

  private:
  ::uint32_t _internal_n_wr_as_avg() const;
  void _internal_set_n_wr_as_avg(::uint32_t value);

  public:
  // optional uint32 n_wr_as_cnt = 24;
  bool has_n_wr_as_cnt() const;
  void clear_n_wr_as_cnt() ;
  ::uint32_t n_wr_as_cnt() const;
  void set_n_wr_as_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_n_wr_as_cnt() const;
  void _internal_set_n_wr_as_cnt(::uint32_t value);

  public:
  // optional uint32 n_wr_as_peak = 25;
  bool has_n_wr_as_peak() const;
  void clear_n_wr_as_peak() ;
  ::uint32_t n_wr_as_peak() const;
  void set_n_wr_as_peak(::uint32_t value);

  private:
  ::uint32_t _internal_n_wr_as_peak() const;
  void _internal_set_n_wr_as_peak(::uint32_t value);

  public:
  // optional uint32 n_wr_s_avg = 26;
  bool has_n_wr_s_avg() const;
  void clear_n_wr_s_avg() ;
  ::uint32_t n_wr_s_avg() const;
  void set_n_wr_s_avg(::uint32_t value);

  private:
  ::uint32_t _internal_n_wr_s_avg() const;
  void _internal_set_n_wr_s_avg(::uint32_t value);

  public:
  // optional uint32 n_wr_s_cnt = 27;
  bool has_n_wr_s_cnt() const;
  void clear_n_wr_s_cnt() ;
  ::uint32_t n_wr_s_cnt() const;
  void set_n_wr_s_cnt(::uint32_t value);

  private:
  ::uint32_t _internal_n_wr_s_cnt() const;
  void _internal_set_n_wr_s_cnt(::uint32_t value);

  public:
  // optional uint32 n_wr_s_peak = 28;
  bool has_n_wr_s_peak() const;
  void clear_n_wr_s_peak() ;
  ::uint32_t n_wr_s_peak() const;
  void set_n_wr_s_peak(::uint32_t value);

  private:
  ::uint32_t _internal_n_wr_s_peak() const;
  void _internal_set_n_wr_s_peak(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.F2fsIostatLatencyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t d_rd_avg_;
    ::uint32_t d_rd_cnt_;
    ::uint32_t d_rd_peak_;
    ::uint32_t d_wr_as_avg_;
    ::uint32_t d_wr_as_cnt_;
    ::uint32_t d_wr_as_peak_;
    ::uint32_t d_wr_s_avg_;
    ::uint32_t d_wr_s_cnt_;
    ::uint64_t dev_;
    ::uint32_t d_wr_s_peak_;
    ::uint32_t m_rd_avg_;
    ::uint32_t m_rd_cnt_;
    ::uint32_t m_rd_peak_;
    ::uint32_t m_wr_as_avg_;
    ::uint32_t m_wr_as_cnt_;
    ::uint32_t m_wr_as_peak_;
    ::uint32_t m_wr_s_avg_;
    ::uint32_t m_wr_s_cnt_;
    ::uint32_t m_wr_s_peak_;
    ::uint32_t n_rd_avg_;
    ::uint32_t n_rd_cnt_;
    ::uint32_t n_rd_peak_;
    ::uint32_t n_wr_as_avg_;
    ::uint32_t n_wr_as_cnt_;
    ::uint32_t n_wr_as_peak_;
    ::uint32_t n_wr_s_avg_;
    ::uint32_t n_wr_s_cnt_;
    ::uint32_t n_wr_s_peak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// F2fsDoSubmitBioFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsDoSubmitBioFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsDoSubmitBioFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsDoSubmitBioFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.dev)
}
inline ::uint64_t F2fsDoSubmitBioFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsDoSubmitBioFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 btype = 2;
inline bool F2fsDoSubmitBioFtraceEvent::has_btype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_btype() {
  _impl_.btype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t F2fsDoSubmitBioFtraceEvent::btype() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.btype)
  return _internal_btype();
}
inline void F2fsDoSubmitBioFtraceEvent::set_btype(::int32_t value) {
  _internal_set_btype(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.btype)
}
inline ::int32_t F2fsDoSubmitBioFtraceEvent::_internal_btype() const {
  return _impl_.btype_;
}
inline void F2fsDoSubmitBioFtraceEvent::_internal_set_btype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.btype_ = value;
}

// optional uint32 sync = 3;
inline bool F2fsDoSubmitBioFtraceEvent::has_sync() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_sync() {
  _impl_.sync_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsDoSubmitBioFtraceEvent::sync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sync)
  return _internal_sync();
}
inline void F2fsDoSubmitBioFtraceEvent::set_sync(::uint32_t value) {
  _internal_set_sync(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sync)
}
inline ::uint32_t F2fsDoSubmitBioFtraceEvent::_internal_sync() const {
  return _impl_.sync_;
}
inline void F2fsDoSubmitBioFtraceEvent::_internal_set_sync(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sync_ = value;
}

// optional uint64 sector = 4;
inline bool F2fsDoSubmitBioFtraceEvent::has_sector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_sector() {
  _impl_.sector_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t F2fsDoSubmitBioFtraceEvent::sector() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sector)
  return _internal_sector();
}
inline void F2fsDoSubmitBioFtraceEvent::set_sector(::uint64_t value) {
  _internal_set_sector(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.sector)
}
inline ::uint64_t F2fsDoSubmitBioFtraceEvent::_internal_sector() const {
  return _impl_.sector_;
}
inline void F2fsDoSubmitBioFtraceEvent::_internal_set_sector(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sector_ = value;
}

// optional uint32 size = 5;
inline bool F2fsDoSubmitBioFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsDoSubmitBioFtraceEvent::clear_size() {
  _impl_.size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsDoSubmitBioFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsDoSubmitBioFtraceEvent.size)
  return _internal_size();
}
inline void F2fsDoSubmitBioFtraceEvent::set_size(::uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsDoSubmitBioFtraceEvent.size)
}
inline ::uint32_t F2fsDoSubmitBioFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsDoSubmitBioFtraceEvent::_internal_set_size(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// F2fsEvictInodeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsEvictInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsEvictInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.dev)
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsEvictInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsEvictInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.ino)
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pino = 3;
inline bool F2fsEvictInodeFtraceEvent::has_pino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_pino() {
  _impl_.pino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.pino)
  return _internal_pino();
}
inline void F2fsEvictInodeFtraceEvent::set_pino(::uint64_t value) {
  _internal_set_pino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.pino)
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::_internal_pino() const {
  return _impl_.pino_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_pino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pino_ = value;
}

// optional uint32 mode = 4;
inline bool F2fsEvictInodeFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsEvictInodeFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.mode)
  return _internal_mode();
}
inline void F2fsEvictInodeFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.mode)
}
inline ::uint32_t F2fsEvictInodeFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// optional int64 size = 5;
inline bool F2fsEvictInodeFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t F2fsEvictInodeFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.size)
  return _internal_size();
}
inline void F2fsEvictInodeFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.size)
}
inline ::int64_t F2fsEvictInodeFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}

// optional uint32 nlink = 6;
inline bool F2fsEvictInodeFtraceEvent::has_nlink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_nlink() {
  _impl_.nlink_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t F2fsEvictInodeFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.nlink)
  return _internal_nlink();
}
inline void F2fsEvictInodeFtraceEvent::set_nlink(::uint32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.nlink)
}
inline ::uint32_t F2fsEvictInodeFtraceEvent::_internal_nlink() const {
  return _impl_.nlink_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_nlink(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nlink_ = value;
}

// optional uint64 blocks = 7;
inline bool F2fsEvictInodeFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsEvictInodeFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.blocks)
}
inline ::uint64_t F2fsEvictInodeFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.blocks_ = value;
}

// optional uint32 advise = 8;
inline bool F2fsEvictInodeFtraceEvent::has_advise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsEvictInodeFtraceEvent::clear_advise() {
  _impl_.advise_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t F2fsEvictInodeFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsEvictInodeFtraceEvent.advise)
  return _internal_advise();
}
inline void F2fsEvictInodeFtraceEvent::set_advise(::uint32_t value) {
  _internal_set_advise(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsEvictInodeFtraceEvent.advise)
}
inline ::uint32_t F2fsEvictInodeFtraceEvent::_internal_advise() const {
  return _impl_.advise_;
}
inline void F2fsEvictInodeFtraceEvent::_internal_set_advise(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.advise_ = value;
}

// -------------------------------------------------------------------

// F2fsFallocateFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsFallocateFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsFallocateFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsFallocateFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.dev)
}
inline ::uint64_t F2fsFallocateFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsFallocateFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsFallocateFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsFallocateFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.ino)
}
inline ::uint64_t F2fsFallocateFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 mode = 3;
inline bool F2fsFallocateFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t F2fsFallocateFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.mode)
  return _internal_mode();
}
inline void F2fsFallocateFtraceEvent::set_mode(::int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.mode)
}
inline ::int32_t F2fsFallocateFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// optional int64 offset = 4;
inline bool F2fsFallocateFtraceEvent::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t F2fsFallocateFtraceEvent::offset() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.offset)
  return _internal_offset();
}
inline void F2fsFallocateFtraceEvent::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.offset)
}
inline ::int64_t F2fsFallocateFtraceEvent::_internal_offset() const {
  return _impl_.offset_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_offset(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.offset_ = value;
}

// optional int64 len = 5;
inline bool F2fsFallocateFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_len() {
  _impl_.len_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t F2fsFallocateFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.len)
  return _internal_len();
}
inline void F2fsFallocateFtraceEvent::set_len(::int64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.len)
}
inline ::int64_t F2fsFallocateFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_len(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional int64 size = 6;
inline bool F2fsFallocateFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t F2fsFallocateFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.size)
  return _internal_size();
}
inline void F2fsFallocateFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.size)
}
inline ::int64_t F2fsFallocateFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.size_ = value;
}

// optional uint64 blocks = 7;
inline bool F2fsFallocateFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t F2fsFallocateFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsFallocateFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.blocks)
}
inline ::uint64_t F2fsFallocateFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.blocks_ = value;
}

// optional int32 ret = 8;
inline bool F2fsFallocateFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsFallocateFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t F2fsFallocateFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsFallocateFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsFallocateFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsFallocateFtraceEvent.ret)
}
inline ::int32_t F2fsFallocateFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsFallocateFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsGetDataBlockFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsGetDataBlockFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsGetDataBlockFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsGetDataBlockFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.dev)
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsGetDataBlockFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsGetDataBlockFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsGetDataBlockFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsGetDataBlockFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.ino)
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsGetDataBlockFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 iblock = 3;
inline bool F2fsGetDataBlockFtraceEvent::has_iblock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsGetDataBlockFtraceEvent::clear_iblock() {
  _impl_.iblock_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::iblock() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.iblock)
  return _internal_iblock();
}
inline void F2fsGetDataBlockFtraceEvent::set_iblock(::uint64_t value) {
  _internal_set_iblock(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.iblock)
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::_internal_iblock() const {
  return _impl_.iblock_;
}
inline void F2fsGetDataBlockFtraceEvent::_internal_set_iblock(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.iblock_ = value;
}

// optional uint64 bh_start = 4;
inline bool F2fsGetDataBlockFtraceEvent::has_bh_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsGetDataBlockFtraceEvent::clear_bh_start() {
  _impl_.bh_start_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::bh_start() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_start)
  return _internal_bh_start();
}
inline void F2fsGetDataBlockFtraceEvent::set_bh_start(::uint64_t value) {
  _internal_set_bh_start(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_start)
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::_internal_bh_start() const {
  return _impl_.bh_start_;
}
inline void F2fsGetDataBlockFtraceEvent::_internal_set_bh_start(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bh_start_ = value;
}

// optional uint64 bh_size = 5;
inline bool F2fsGetDataBlockFtraceEvent::has_bh_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsGetDataBlockFtraceEvent::clear_bh_size() {
  _impl_.bh_size_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::bh_size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_size)
  return _internal_bh_size();
}
inline void F2fsGetDataBlockFtraceEvent::set_bh_size(::uint64_t value) {
  _internal_set_bh_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.bh_size)
}
inline ::uint64_t F2fsGetDataBlockFtraceEvent::_internal_bh_size() const {
  return _impl_.bh_size_;
}
inline void F2fsGetDataBlockFtraceEvent::_internal_set_bh_size(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bh_size_ = value;
}

// optional int32 ret = 6;
inline bool F2fsGetDataBlockFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsGetDataBlockFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t F2fsGetDataBlockFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetDataBlockFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsGetDataBlockFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetDataBlockFtraceEvent.ret)
}
inline ::int32_t F2fsGetDataBlockFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsGetDataBlockFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsGetVictimFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsGetVictimFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsGetVictimFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsGetVictimFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.dev)
}
inline ::uint64_t F2fsGetVictimFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 type = 2;
inline bool F2fsGetVictimFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t F2fsGetVictimFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.type)
  return _internal_type();
}
inline void F2fsGetVictimFtraceEvent::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.type)
}
inline ::int32_t F2fsGetVictimFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}

// optional int32 gc_type = 3;
inline bool F2fsGetVictimFtraceEvent::has_gc_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_gc_type() {
  _impl_.gc_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsGetVictimFtraceEvent::gc_type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.gc_type)
  return _internal_gc_type();
}
inline void F2fsGetVictimFtraceEvent::set_gc_type(::int32_t value) {
  _internal_set_gc_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.gc_type)
}
inline ::int32_t F2fsGetVictimFtraceEvent::_internal_gc_type() const {
  return _impl_.gc_type_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_gc_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gc_type_ = value;
}

// optional int32 alloc_mode = 4;
inline bool F2fsGetVictimFtraceEvent::has_alloc_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_alloc_mode() {
  _impl_.alloc_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsGetVictimFtraceEvent::alloc_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.alloc_mode)
  return _internal_alloc_mode();
}
inline void F2fsGetVictimFtraceEvent::set_alloc_mode(::int32_t value) {
  _internal_set_alloc_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.alloc_mode)
}
inline ::int32_t F2fsGetVictimFtraceEvent::_internal_alloc_mode() const {
  return _impl_.alloc_mode_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_alloc_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alloc_mode_ = value;
}

// optional int32 gc_mode = 5;
inline bool F2fsGetVictimFtraceEvent::has_gc_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_gc_mode() {
  _impl_.gc_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t F2fsGetVictimFtraceEvent::gc_mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.gc_mode)
  return _internal_gc_mode();
}
inline void F2fsGetVictimFtraceEvent::set_gc_mode(::int32_t value) {
  _internal_set_gc_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.gc_mode)
}
inline ::int32_t F2fsGetVictimFtraceEvent::_internal_gc_mode() const {
  return _impl_.gc_mode_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_gc_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.gc_mode_ = value;
}

// optional uint32 victim = 6;
inline bool F2fsGetVictimFtraceEvent::has_victim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_victim() {
  _impl_.victim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t F2fsGetVictimFtraceEvent::victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.victim)
  return _internal_victim();
}
inline void F2fsGetVictimFtraceEvent::set_victim(::uint32_t value) {
  _internal_set_victim(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.victim)
}
inline ::uint32_t F2fsGetVictimFtraceEvent::_internal_victim() const {
  return _impl_.victim_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_victim(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.victim_ = value;
}

// optional uint32 ofs_unit = 7;
inline bool F2fsGetVictimFtraceEvent::has_ofs_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_ofs_unit() {
  _impl_.ofs_unit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t F2fsGetVictimFtraceEvent::ofs_unit() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.ofs_unit)
  return _internal_ofs_unit();
}
inline void F2fsGetVictimFtraceEvent::set_ofs_unit(::uint32_t value) {
  _internal_set_ofs_unit(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.ofs_unit)
}
inline ::uint32_t F2fsGetVictimFtraceEvent::_internal_ofs_unit() const {
  return _impl_.ofs_unit_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_ofs_unit(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ofs_unit_ = value;
}

// optional uint32 pre_victim = 8;
inline bool F2fsGetVictimFtraceEvent::has_pre_victim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_pre_victim() {
  _impl_.pre_victim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t F2fsGetVictimFtraceEvent::pre_victim() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.pre_victim)
  return _internal_pre_victim();
}
inline void F2fsGetVictimFtraceEvent::set_pre_victim(::uint32_t value) {
  _internal_set_pre_victim(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.pre_victim)
}
inline ::uint32_t F2fsGetVictimFtraceEvent::_internal_pre_victim() const {
  return _impl_.pre_victim_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_pre_victim(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pre_victim_ = value;
}

// optional uint32 prefree = 9;
inline bool F2fsGetVictimFtraceEvent::has_prefree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_prefree() {
  _impl_.prefree_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t F2fsGetVictimFtraceEvent::prefree() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.prefree)
  return _internal_prefree();
}
inline void F2fsGetVictimFtraceEvent::set_prefree(::uint32_t value) {
  _internal_set_prefree(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.prefree)
}
inline ::uint32_t F2fsGetVictimFtraceEvent::_internal_prefree() const {
  return _impl_.prefree_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_prefree(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.prefree_ = value;
}

// optional uint32 free = 10;
inline bool F2fsGetVictimFtraceEvent::has_free() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_free() {
  _impl_.free_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t F2fsGetVictimFtraceEvent::free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.free)
  return _internal_free();
}
inline void F2fsGetVictimFtraceEvent::set_free(::uint32_t value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.free)
}
inline ::uint32_t F2fsGetVictimFtraceEvent::_internal_free() const {
  return _impl_.free_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_free(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.free_ = value;
}

// optional uint32 cost = 11;
inline bool F2fsGetVictimFtraceEvent::has_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void F2fsGetVictimFtraceEvent::clear_cost() {
  _impl_.cost_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t F2fsGetVictimFtraceEvent::cost() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsGetVictimFtraceEvent.cost)
  return _internal_cost();
}
inline void F2fsGetVictimFtraceEvent::set_cost(::uint32_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsGetVictimFtraceEvent.cost)
}
inline ::uint32_t F2fsGetVictimFtraceEvent::_internal_cost() const {
  return _impl_.cost_;
}
inline void F2fsGetVictimFtraceEvent::_internal_set_cost(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cost_ = value;
}

// -------------------------------------------------------------------

// F2fsIgetFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsIgetFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsIgetFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsIgetFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.dev)
}
inline ::uint64_t F2fsIgetFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsIgetFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsIgetFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsIgetFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsIgetFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.ino)
}
inline ::uint64_t F2fsIgetFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsIgetFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pino = 3;
inline bool F2fsIgetFtraceEvent::has_pino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_pino() {
  _impl_.pino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsIgetFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.pino)
  return _internal_pino();
}
inline void F2fsIgetFtraceEvent::set_pino(::uint64_t value) {
  _internal_set_pino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.pino)
}
inline ::uint64_t F2fsIgetFtraceEvent::_internal_pino() const {
  return _impl_.pino_;
}
inline void F2fsIgetFtraceEvent::_internal_set_pino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pino_ = value;
}

// optional uint32 mode = 4;
inline bool F2fsIgetFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsIgetFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.mode)
  return _internal_mode();
}
inline void F2fsIgetFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.mode)
}
inline ::uint32_t F2fsIgetFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void F2fsIgetFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// optional int64 size = 5;
inline bool F2fsIgetFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t F2fsIgetFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.size)
  return _internal_size();
}
inline void F2fsIgetFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.size)
}
inline ::int64_t F2fsIgetFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsIgetFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}

// optional uint32 nlink = 6;
inline bool F2fsIgetFtraceEvent::has_nlink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_nlink() {
  _impl_.nlink_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t F2fsIgetFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.nlink)
  return _internal_nlink();
}
inline void F2fsIgetFtraceEvent::set_nlink(::uint32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.nlink)
}
inline ::uint32_t F2fsIgetFtraceEvent::_internal_nlink() const {
  return _impl_.nlink_;
}
inline void F2fsIgetFtraceEvent::_internal_set_nlink(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nlink_ = value;
}

// optional uint64 blocks = 7;
inline bool F2fsIgetFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t F2fsIgetFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsIgetFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.blocks)
}
inline ::uint64_t F2fsIgetFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsIgetFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.blocks_ = value;
}

// optional uint32 advise = 8;
inline bool F2fsIgetFtraceEvent::has_advise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsIgetFtraceEvent::clear_advise() {
  _impl_.advise_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t F2fsIgetFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetFtraceEvent.advise)
  return _internal_advise();
}
inline void F2fsIgetFtraceEvent::set_advise(::uint32_t value) {
  _internal_set_advise(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetFtraceEvent.advise)
}
inline ::uint32_t F2fsIgetFtraceEvent::_internal_advise() const {
  return _impl_.advise_;
}
inline void F2fsIgetFtraceEvent::_internal_set_advise(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.advise_ = value;
}

// -------------------------------------------------------------------

// F2fsIgetExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsIgetExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsIgetExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsIgetExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetExitFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsIgetExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetExitFtraceEvent.dev)
}
inline ::uint64_t F2fsIgetExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsIgetExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsIgetExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsIgetExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsIgetExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetExitFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsIgetExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetExitFtraceEvent.ino)
}
inline ::uint64_t F2fsIgetExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsIgetExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool F2fsIgetExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsIgetExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsIgetExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIgetExitFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsIgetExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIgetExitFtraceEvent.ret)
}
inline ::int32_t F2fsIgetExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsIgetExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsNewInodeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsNewInodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsNewInodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsNewInodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsNewInodeFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsNewInodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsNewInodeFtraceEvent.dev)
}
inline ::uint64_t F2fsNewInodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsNewInodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsNewInodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsNewInodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsNewInodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsNewInodeFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsNewInodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsNewInodeFtraceEvent.ino)
}
inline ::uint64_t F2fsNewInodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsNewInodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool F2fsNewInodeFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsNewInodeFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsNewInodeFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsNewInodeFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsNewInodeFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsNewInodeFtraceEvent.ret)
}
inline ::int32_t F2fsNewInodeFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsNewInodeFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsReadpageFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsReadpageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsReadpageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsReadpageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.dev)
}
inline ::uint64_t F2fsReadpageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsReadpageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsReadpageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsReadpageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.ino)
}
inline ::uint64_t F2fsReadpageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 index = 3;
inline bool F2fsReadpageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsReadpageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.index)
  return _internal_index();
}
inline void F2fsReadpageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.index)
}
inline ::uint64_t F2fsReadpageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// optional uint64 blkaddr = 4;
inline bool F2fsReadpageFtraceEvent::has_blkaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_blkaddr() {
  _impl_.blkaddr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t F2fsReadpageFtraceEvent::blkaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.blkaddr)
  return _internal_blkaddr();
}
inline void F2fsReadpageFtraceEvent::set_blkaddr(::uint64_t value) {
  _internal_set_blkaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.blkaddr)
}
inline ::uint64_t F2fsReadpageFtraceEvent::_internal_blkaddr() const {
  return _impl_.blkaddr_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_blkaddr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blkaddr_ = value;
}

// optional int32 type = 5;
inline bool F2fsReadpageFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t F2fsReadpageFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.type)
  return _internal_type();
}
inline void F2fsReadpageFtraceEvent::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.type)
}
inline ::int32_t F2fsReadpageFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}

// optional int32 dir = 6;
inline bool F2fsReadpageFtraceEvent::has_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_dir() {
  _impl_.dir_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t F2fsReadpageFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.dir)
  return _internal_dir();
}
inline void F2fsReadpageFtraceEvent::set_dir(::int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.dir)
}
inline ::int32_t F2fsReadpageFtraceEvent::_internal_dir() const {
  return _impl_.dir_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_dir(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dir_ = value;
}

// optional int32 dirty = 7;
inline bool F2fsReadpageFtraceEvent::has_dirty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_dirty() {
  _impl_.dirty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t F2fsReadpageFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.dirty)
  return _internal_dirty();
}
inline void F2fsReadpageFtraceEvent::set_dirty(::int32_t value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.dirty)
}
inline ::int32_t F2fsReadpageFtraceEvent::_internal_dirty() const {
  return _impl_.dirty_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_dirty(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.dirty_ = value;
}

// optional int32 uptodate = 8;
inline bool F2fsReadpageFtraceEvent::has_uptodate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsReadpageFtraceEvent::clear_uptodate() {
  _impl_.uptodate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t F2fsReadpageFtraceEvent::uptodate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReadpageFtraceEvent.uptodate)
  return _internal_uptodate();
}
inline void F2fsReadpageFtraceEvent::set_uptodate(::int32_t value) {
  _internal_set_uptodate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReadpageFtraceEvent.uptodate)
}
inline ::int32_t F2fsReadpageFtraceEvent::_internal_uptodate() const {
  return _impl_.uptodate_;
}
inline void F2fsReadpageFtraceEvent::_internal_set_uptodate(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.uptodate_ = value;
}

// -------------------------------------------------------------------

// F2fsReserveNewBlockFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsReserveNewBlockFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsReserveNewBlockFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsReserveNewBlockFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReserveNewBlockFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsReserveNewBlockFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReserveNewBlockFtraceEvent.dev)
}
inline ::uint64_t F2fsReserveNewBlockFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsReserveNewBlockFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint32 nid = 2;
inline bool F2fsReserveNewBlockFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsReserveNewBlockFtraceEvent::clear_nid() {
  _impl_.nid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t F2fsReserveNewBlockFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReserveNewBlockFtraceEvent.nid)
  return _internal_nid();
}
inline void F2fsReserveNewBlockFtraceEvent::set_nid(::uint32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReserveNewBlockFtraceEvent.nid)
}
inline ::uint32_t F2fsReserveNewBlockFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void F2fsReserveNewBlockFtraceEvent::_internal_set_nid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nid_ = value;
}

// optional uint32 ofs_in_node = 3;
inline bool F2fsReserveNewBlockFtraceEvent::has_ofs_in_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsReserveNewBlockFtraceEvent::clear_ofs_in_node() {
  _impl_.ofs_in_node_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsReserveNewBlockFtraceEvent::ofs_in_node() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsReserveNewBlockFtraceEvent.ofs_in_node)
  return _internal_ofs_in_node();
}
inline void F2fsReserveNewBlockFtraceEvent::set_ofs_in_node(::uint32_t value) {
  _internal_set_ofs_in_node(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsReserveNewBlockFtraceEvent.ofs_in_node)
}
inline ::uint32_t F2fsReserveNewBlockFtraceEvent::_internal_ofs_in_node() const {
  return _impl_.ofs_in_node_;
}
inline void F2fsReserveNewBlockFtraceEvent::_internal_set_ofs_in_node(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ofs_in_node_ = value;
}

// -------------------------------------------------------------------

// F2fsSetPageDirtyFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSetPageDirtyFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsSetPageDirtyFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsSetPageDirtyFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dev)
}
inline ::uint64_t F2fsSetPageDirtyFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsSetPageDirtyFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsSetPageDirtyFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsSetPageDirtyFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.ino)
}
inline ::uint64_t F2fsSetPageDirtyFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 type = 3;
inline bool F2fsSetPageDirtyFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.type)
  return _internal_type();
}
inline void F2fsSetPageDirtyFtraceEvent::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.type)
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional int32 dir = 4;
inline bool F2fsSetPageDirtyFtraceEvent::has_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_dir() {
  _impl_.dir_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dir)
  return _internal_dir();
}
inline void F2fsSetPageDirtyFtraceEvent::set_dir(::int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dir)
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::_internal_dir() const {
  return _impl_.dir_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_dir(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dir_ = value;
}

// optional uint64 index = 5;
inline bool F2fsSetPageDirtyFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsSetPageDirtyFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.index)
  return _internal_index();
}
inline void F2fsSetPageDirtyFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.index)
}
inline ::uint64_t F2fsSetPageDirtyFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}

// optional int32 dirty = 6;
inline bool F2fsSetPageDirtyFtraceEvent::has_dirty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_dirty() {
  _impl_.dirty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dirty)
  return _internal_dirty();
}
inline void F2fsSetPageDirtyFtraceEvent::set_dirty(::int32_t value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.dirty)
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::_internal_dirty() const {
  return _impl_.dirty_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_dirty(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dirty_ = value;
}

// optional int32 uptodate = 7;
inline bool F2fsSetPageDirtyFtraceEvent::has_uptodate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsSetPageDirtyFtraceEvent::clear_uptodate() {
  _impl_.uptodate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::uptodate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSetPageDirtyFtraceEvent.uptodate)
  return _internal_uptodate();
}
inline void F2fsSetPageDirtyFtraceEvent::set_uptodate(::int32_t value) {
  _internal_set_uptodate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSetPageDirtyFtraceEvent.uptodate)
}
inline ::int32_t F2fsSetPageDirtyFtraceEvent::_internal_uptodate() const {
  return _impl_.uptodate_;
}
inline void F2fsSetPageDirtyFtraceEvent::_internal_set_uptodate(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.uptodate_ = value;
}

// -------------------------------------------------------------------

// F2fsSubmitWritePageFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSubmitWritePageFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsSubmitWritePageFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsSubmitWritePageFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.dev)
}
inline ::uint64_t F2fsSubmitWritePageFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsSubmitWritePageFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsSubmitWritePageFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsSubmitWritePageFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsSubmitWritePageFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.ino)
}
inline ::uint64_t F2fsSubmitWritePageFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsSubmitWritePageFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 type = 3;
inline bool F2fsSubmitWritePageFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsSubmitWritePageFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.type)
  return _internal_type();
}
inline void F2fsSubmitWritePageFtraceEvent::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.type)
}
inline ::int32_t F2fsSubmitWritePageFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void F2fsSubmitWritePageFtraceEvent::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}

// optional uint64 index = 4;
inline bool F2fsSubmitWritePageFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsSubmitWritePageFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.index)
  return _internal_index();
}
inline void F2fsSubmitWritePageFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.index)
}
inline ::uint64_t F2fsSubmitWritePageFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void F2fsSubmitWritePageFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}

// optional uint32 block = 5;
inline bool F2fsSubmitWritePageFtraceEvent::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsSubmitWritePageFtraceEvent::clear_block() {
  _impl_.block_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsSubmitWritePageFtraceEvent::block() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSubmitWritePageFtraceEvent.block)
  return _internal_block();
}
inline void F2fsSubmitWritePageFtraceEvent::set_block(::uint32_t value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSubmitWritePageFtraceEvent.block)
}
inline ::uint32_t F2fsSubmitWritePageFtraceEvent::_internal_block() const {
  return _impl_.block_;
}
inline void F2fsSubmitWritePageFtraceEvent::_internal_set_block(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.block_ = value;
}

// -------------------------------------------------------------------

// F2fsSyncFileEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSyncFileEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsSyncFileEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.dev)
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsSyncFileEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsSyncFileEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.ino)
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pino = 3;
inline bool F2fsSyncFileEnterFtraceEvent::has_pino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_pino() {
  _impl_.pino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.pino)
  return _internal_pino();
}
inline void F2fsSyncFileEnterFtraceEvent::set_pino(::uint64_t value) {
  _internal_set_pino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.pino)
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::_internal_pino() const {
  return _impl_.pino_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_pino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pino_ = value;
}

// optional uint32 mode = 4;
inline bool F2fsSyncFileEnterFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsSyncFileEnterFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.mode)
  return _internal_mode();
}
inline void F2fsSyncFileEnterFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.mode)
}
inline ::uint32_t F2fsSyncFileEnterFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// optional int64 size = 5;
inline bool F2fsSyncFileEnterFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t F2fsSyncFileEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.size)
  return _internal_size();
}
inline void F2fsSyncFileEnterFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.size)
}
inline ::int64_t F2fsSyncFileEnterFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}

// optional uint32 nlink = 6;
inline bool F2fsSyncFileEnterFtraceEvent::has_nlink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_nlink() {
  _impl_.nlink_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t F2fsSyncFileEnterFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.nlink)
  return _internal_nlink();
}
inline void F2fsSyncFileEnterFtraceEvent::set_nlink(::uint32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.nlink)
}
inline ::uint32_t F2fsSyncFileEnterFtraceEvent::_internal_nlink() const {
  return _impl_.nlink_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_nlink(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nlink_ = value;
}

// optional uint64 blocks = 7;
inline bool F2fsSyncFileEnterFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsSyncFileEnterFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.blocks)
}
inline ::uint64_t F2fsSyncFileEnterFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.blocks_ = value;
}

// optional uint32 advise = 8;
inline bool F2fsSyncFileEnterFtraceEvent::has_advise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsSyncFileEnterFtraceEvent::clear_advise() {
  _impl_.advise_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t F2fsSyncFileEnterFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileEnterFtraceEvent.advise)
  return _internal_advise();
}
inline void F2fsSyncFileEnterFtraceEvent::set_advise(::uint32_t value) {
  _internal_set_advise(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileEnterFtraceEvent.advise)
}
inline ::uint32_t F2fsSyncFileEnterFtraceEvent::_internal_advise() const {
  return _impl_.advise_;
}
inline void F2fsSyncFileEnterFtraceEvent::_internal_set_advise(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.advise_ = value;
}

// -------------------------------------------------------------------

// F2fsSyncFileExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSyncFileExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsSyncFileExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsSyncFileExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsSyncFileExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.dev)
}
inline ::uint64_t F2fsSyncFileExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsSyncFileExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsSyncFileExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsSyncFileExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsSyncFileExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsSyncFileExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.ino)
}
inline ::uint64_t F2fsSyncFileExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsSyncFileExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 need_cp = 3;
inline bool F2fsSyncFileExitFtraceEvent::has_need_cp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsSyncFileExitFtraceEvent::clear_need_cp() {
  _impl_.need_cp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsSyncFileExitFtraceEvent::need_cp() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.need_cp)
  return _internal_need_cp();
}
inline void F2fsSyncFileExitFtraceEvent::set_need_cp(::uint32_t value) {
  _internal_set_need_cp(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.need_cp)
}
inline ::uint32_t F2fsSyncFileExitFtraceEvent::_internal_need_cp() const {
  return _impl_.need_cp_;
}
inline void F2fsSyncFileExitFtraceEvent::_internal_set_need_cp(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.need_cp_ = value;
}

// optional int32 datasync = 4;
inline bool F2fsSyncFileExitFtraceEvent::has_datasync() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsSyncFileExitFtraceEvent::clear_datasync() {
  _impl_.datasync_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsSyncFileExitFtraceEvent::datasync() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.datasync)
  return _internal_datasync();
}
inline void F2fsSyncFileExitFtraceEvent::set_datasync(::int32_t value) {
  _internal_set_datasync(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.datasync)
}
inline ::int32_t F2fsSyncFileExitFtraceEvent::_internal_datasync() const {
  return _impl_.datasync_;
}
inline void F2fsSyncFileExitFtraceEvent::_internal_set_datasync(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.datasync_ = value;
}

// optional int32 ret = 5;
inline bool F2fsSyncFileExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsSyncFileExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t F2fsSyncFileExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsSyncFileExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.ret)
}
inline ::int32_t F2fsSyncFileExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsSyncFileExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ret_ = value;
}

// optional int32 cp_reason = 6;
inline bool F2fsSyncFileExitFtraceEvent::has_cp_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsSyncFileExitFtraceEvent::clear_cp_reason() {
  _impl_.cp_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t F2fsSyncFileExitFtraceEvent::cp_reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFileExitFtraceEvent.cp_reason)
  return _internal_cp_reason();
}
inline void F2fsSyncFileExitFtraceEvent::set_cp_reason(::int32_t value) {
  _internal_set_cp_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFileExitFtraceEvent.cp_reason)
}
inline ::int32_t F2fsSyncFileExitFtraceEvent::_internal_cp_reason() const {
  return _impl_.cp_reason_;
}
inline void F2fsSyncFileExitFtraceEvent::_internal_set_cp_reason(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cp_reason_ = value;
}

// -------------------------------------------------------------------

// F2fsSyncFsFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsSyncFsFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsSyncFsFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsSyncFsFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFsFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsSyncFsFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFsFtraceEvent.dev)
}
inline ::uint64_t F2fsSyncFsFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsSyncFsFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional int32 dirty = 2;
inline bool F2fsSyncFsFtraceEvent::has_dirty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsSyncFsFtraceEvent::clear_dirty() {
  _impl_.dirty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t F2fsSyncFsFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFsFtraceEvent.dirty)
  return _internal_dirty();
}
inline void F2fsSyncFsFtraceEvent::set_dirty(::int32_t value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFsFtraceEvent.dirty)
}
inline ::int32_t F2fsSyncFsFtraceEvent::_internal_dirty() const {
  return _impl_.dirty_;
}
inline void F2fsSyncFsFtraceEvent::_internal_set_dirty(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dirty_ = value;
}

// optional int32 wait = 3;
inline bool F2fsSyncFsFtraceEvent::has_wait() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsSyncFsFtraceEvent::clear_wait() {
  _impl_.wait_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsSyncFsFtraceEvent::wait() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsSyncFsFtraceEvent.wait)
  return _internal_wait();
}
inline void F2fsSyncFsFtraceEvent::set_wait(::int32_t value) {
  _internal_set_wait(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsSyncFsFtraceEvent.wait)
}
inline ::int32_t F2fsSyncFsFtraceEvent::_internal_wait() const {
  return _impl_.wait_;
}
inline void F2fsSyncFsFtraceEvent::_internal_set_wait(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.wait_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint64 pino = 3;
inline bool F2fsTruncateFtraceEvent::has_pino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_pino() {
  _impl_.pino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsTruncateFtraceEvent::pino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.pino)
  return _internal_pino();
}
inline void F2fsTruncateFtraceEvent::set_pino(::uint64_t value) {
  _internal_set_pino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.pino)
}
inline ::uint64_t F2fsTruncateFtraceEvent::_internal_pino() const {
  return _impl_.pino_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_pino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pino_ = value;
}

// optional uint32 mode = 4;
inline bool F2fsTruncateFtraceEvent::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsTruncateFtraceEvent::mode() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.mode)
  return _internal_mode();
}
inline void F2fsTruncateFtraceEvent::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.mode)
}
inline ::uint32_t F2fsTruncateFtraceEvent::_internal_mode() const {
  return _impl_.mode_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_mode(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mode_ = value;
}

// optional int64 size = 5;
inline bool F2fsTruncateFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t F2fsTruncateFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.size)
  return _internal_size();
}
inline void F2fsTruncateFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.size)
}
inline ::int64_t F2fsTruncateFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}

// optional uint32 nlink = 6;
inline bool F2fsTruncateFtraceEvent::has_nlink() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_nlink() {
  _impl_.nlink_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t F2fsTruncateFtraceEvent::nlink() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.nlink)
  return _internal_nlink();
}
inline void F2fsTruncateFtraceEvent::set_nlink(::uint32_t value) {
  _internal_set_nlink(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.nlink)
}
inline ::uint32_t F2fsTruncateFtraceEvent::_internal_nlink() const {
  return _impl_.nlink_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_nlink(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nlink_ = value;
}

// optional uint64 blocks = 7;
inline bool F2fsTruncateFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t F2fsTruncateFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsTruncateFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.blocks)
}
inline ::uint64_t F2fsTruncateFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.blocks_ = value;
}

// optional uint32 advise = 8;
inline bool F2fsTruncateFtraceEvent::has_advise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsTruncateFtraceEvent::clear_advise() {
  _impl_.advise_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t F2fsTruncateFtraceEvent::advise() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateFtraceEvent.advise)
  return _internal_advise();
}
inline void F2fsTruncateFtraceEvent::set_advise(::uint32_t value) {
  _internal_set_advise(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateFtraceEvent.advise)
}
inline ::uint32_t F2fsTruncateFtraceEvent::_internal_advise() const {
  return _impl_.advise_;
}
inline void F2fsTruncateFtraceEvent::_internal_set_advise(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.advise_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 size = 3;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t F2fsTruncateBlocksEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.size)
  return _internal_size();
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.size)
}
inline ::int64_t F2fsTruncateBlocksEnterFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.size_ = value;
}

// optional uint64 blocks = 4;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.blocks)
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blocks_ = value;
}

// optional uint64 from = 5;
inline bool F2fsTruncateBlocksEnterFtraceEvent::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::clear_from() {
  _impl_.from_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.from)
  return _internal_from();
}
inline void F2fsTruncateBlocksEnterFtraceEvent::set_from(::uint64_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent.from)
}
inline ::uint64_t F2fsTruncateBlocksEnterFtraceEvent::_internal_from() const {
  return _impl_.from_;
}
inline void F2fsTruncateBlocksEnterFtraceEvent::_internal_set_from(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.from_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateBlocksExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateBlocksExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateBlocksExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateBlocksExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateBlocksExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateBlocksExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateBlocksExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateBlocksExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateBlocksExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateBlocksExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool F2fsTruncateBlocksExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateBlocksExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsTruncateBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsTruncateBlocksExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateBlocksExitFtraceEvent.ret)
}
inline ::int32_t F2fsTruncateBlocksExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsTruncateBlocksExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateDataBlocksRangeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateDataBlocksRangeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateDataBlocksRangeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateDataBlocksRangeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateDataBlocksRangeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 nid = 3;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_nid() {
  _impl_.nid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsTruncateDataBlocksRangeFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.nid)
  return _internal_nid();
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_nid(::uint32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.nid)
}
inline ::uint32_t F2fsTruncateDataBlocksRangeFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::_internal_set_nid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nid_ = value;
}

// optional uint32 ofs = 4;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_ofs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_ofs() {
  _impl_.ofs_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t F2fsTruncateDataBlocksRangeFtraceEvent::ofs() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ofs)
  return _internal_ofs();
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_ofs(::uint32_t value) {
  _internal_set_ofs(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.ofs)
}
inline ::uint32_t F2fsTruncateDataBlocksRangeFtraceEvent::_internal_ofs() const {
  return _impl_.ofs_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::_internal_set_ofs(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ofs_ = value;
}

// optional int32 free = 5;
inline bool F2fsTruncateDataBlocksRangeFtraceEvent::has_free() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::clear_free() {
  _impl_.free_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t F2fsTruncateDataBlocksRangeFtraceEvent::free() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.free)
  return _internal_free();
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::set_free(::int32_t value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent.free)
}
inline ::int32_t F2fsTruncateDataBlocksRangeFtraceEvent::_internal_free() const {
  return _impl_.free_;
}
inline void F2fsTruncateDataBlocksRangeFtraceEvent::_internal_set_free(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.free_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateInodeBlocksEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 size = 3;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t F2fsTruncateInodeBlocksEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.size)
  return _internal_size();
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.size)
}
inline ::int64_t F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.size_ = value;
}

// optional uint64 blocks = 4;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.blocks)
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blocks_ = value;
}

// optional uint64 from = 5;
inline bool F2fsTruncateInodeBlocksEnterFtraceEvent::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::clear_from() {
  _impl_.from_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::from() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.from)
  return _internal_from();
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::set_from(::uint64_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent.from)
}
inline ::uint64_t F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_from() const {
  return _impl_.from_;
}
inline void F2fsTruncateInodeBlocksEnterFtraceEvent::_internal_set_from(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.from_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateInodeBlocksExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateInodeBlocksExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateInodeBlocksExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateInodeBlocksExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateInodeBlocksExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateInodeBlocksExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateInodeBlocksExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool F2fsTruncateInodeBlocksExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsTruncateInodeBlocksExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent.ret)
}
inline ::int32_t F2fsTruncateInodeBlocksExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsTruncateInodeBlocksExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateNodeFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateNodeFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateNodeFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateNodeFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateNodeFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateNodeFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateNodeFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateNodeFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateNodeFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateNodeFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateNodeFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateNodeFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateNodeFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 nid = 3;
inline bool F2fsTruncateNodeFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateNodeFtraceEvent::clear_nid() {
  _impl_.nid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsTruncateNodeFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.nid)
  return _internal_nid();
}
inline void F2fsTruncateNodeFtraceEvent::set_nid(::uint32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.nid)
}
inline ::uint32_t F2fsTruncateNodeFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void F2fsTruncateNodeFtraceEvent::_internal_set_nid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nid_ = value;
}

// optional uint32 blk_addr = 4;
inline bool F2fsTruncateNodeFtraceEvent::has_blk_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncateNodeFtraceEvent::clear_blk_addr() {
  _impl_.blk_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t F2fsTruncateNodeFtraceEvent::blk_addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodeFtraceEvent.blk_addr)
  return _internal_blk_addr();
}
inline void F2fsTruncateNodeFtraceEvent::set_blk_addr(::uint32_t value) {
  _internal_set_blk_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodeFtraceEvent.blk_addr)
}
inline ::uint32_t F2fsTruncateNodeFtraceEvent::_internal_blk_addr() const {
  return _impl_.blk_addr_;
}
inline void F2fsTruncateNodeFtraceEvent::_internal_set_blk_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blk_addr_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateNodesEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateNodesEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateNodesEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateNodesEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateNodesEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 nid = 3;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_nid() {
  _impl_.nid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsTruncateNodesEnterFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.nid)
  return _internal_nid();
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_nid(::uint32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.nid)
}
inline ::uint32_t F2fsTruncateNodesEnterFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::_internal_set_nid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nid_ = value;
}

// optional uint32 blk_addr = 4;
inline bool F2fsTruncateNodesEnterFtraceEvent::has_blk_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncateNodesEnterFtraceEvent::clear_blk_addr() {
  _impl_.blk_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t F2fsTruncateNodesEnterFtraceEvent::blk_addr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.blk_addr)
  return _internal_blk_addr();
}
inline void F2fsTruncateNodesEnterFtraceEvent::set_blk_addr(::uint32_t value) {
  _internal_set_blk_addr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesEnterFtraceEvent.blk_addr)
}
inline ::uint32_t F2fsTruncateNodesEnterFtraceEvent::_internal_blk_addr() const {
  return _impl_.blk_addr_;
}
inline void F2fsTruncateNodesEnterFtraceEvent::_internal_set_blk_addr(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.blk_addr_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncateNodesExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncateNodesExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncateNodesExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncateNodesExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncateNodesExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncateNodesExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncateNodesExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncateNodesExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncateNodesExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncateNodesExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncateNodesExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncateNodesExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncateNodesExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool F2fsTruncateNodesExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncateNodesExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsTruncateNodesExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsTruncateNodesExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncateNodesExitFtraceEvent.ret)
}
inline ::int32_t F2fsTruncateNodesExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsTruncateNodesExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsTruncatePartialNodesFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsTruncatePartialNodesFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.dev)
}
inline ::uint64_t F2fsTruncatePartialNodesFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsTruncatePartialNodesFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.ino)
}
inline ::uint64_t F2fsTruncatePartialNodesFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional uint32 nid = 3;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_nid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_nid() {
  _impl_.nid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsTruncatePartialNodesFtraceEvent::nid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.nid)
  return _internal_nid();
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_nid(::uint32_t value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.nid)
}
inline ::uint32_t F2fsTruncatePartialNodesFtraceEvent::_internal_nid() const {
  return _impl_.nid_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::_internal_set_nid(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.nid_ = value;
}

// optional int32 depth = 4;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_depth() {
  _impl_.depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsTruncatePartialNodesFtraceEvent::depth() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.depth)
  return _internal_depth();
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.depth)
}
inline ::int32_t F2fsTruncatePartialNodesFtraceEvent::_internal_depth() const {
  return _impl_.depth_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::_internal_set_depth(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.depth_ = value;
}

// optional int32 err = 5;
inline bool F2fsTruncatePartialNodesFtraceEvent::has_err() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsTruncatePartialNodesFtraceEvent::clear_err() {
  _impl_.err_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t F2fsTruncatePartialNodesFtraceEvent::err() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.err)
  return _internal_err();
}
inline void F2fsTruncatePartialNodesFtraceEvent::set_err(::int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsTruncatePartialNodesFtraceEvent.err)
}
inline ::int32_t F2fsTruncatePartialNodesFtraceEvent::_internal_err() const {
  return _impl_.err_;
}
inline void F2fsTruncatePartialNodesFtraceEvent::_internal_set_err(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.err_ = value;
}

// -------------------------------------------------------------------

// F2fsUnlinkEnterFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsUnlinkEnterFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsUnlinkEnterFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsUnlinkEnterFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.dev)
}
inline ::uint64_t F2fsUnlinkEnterFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsUnlinkEnterFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsUnlinkEnterFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsUnlinkEnterFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsUnlinkEnterFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.ino)
}
inline ::uint64_t F2fsUnlinkEnterFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsUnlinkEnterFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ino_ = value;
}

// optional int64 size = 3;
inline bool F2fsUnlinkEnterFtraceEvent::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_size() {
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t F2fsUnlinkEnterFtraceEvent::size() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.size)
  return _internal_size();
}
inline void F2fsUnlinkEnterFtraceEvent::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.size)
}
inline ::int64_t F2fsUnlinkEnterFtraceEvent::_internal_size() const {
  return _impl_.size_;
}
inline void F2fsUnlinkEnterFtraceEvent::_internal_set_size(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}

// optional uint64 blocks = 4;
inline bool F2fsUnlinkEnterFtraceEvent::has_blocks() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_blocks() {
  _impl_.blocks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsUnlinkEnterFtraceEvent::blocks() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.blocks)
  return _internal_blocks();
}
inline void F2fsUnlinkEnterFtraceEvent::set_blocks(::uint64_t value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.blocks)
}
inline ::uint64_t F2fsUnlinkEnterFtraceEvent::_internal_blocks() const {
  return _impl_.blocks_;
}
inline void F2fsUnlinkEnterFtraceEvent::_internal_set_blocks(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.blocks_ = value;
}

// optional string name = 5;
inline bool F2fsUnlinkEnterFtraceEvent::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsUnlinkEnterFtraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& F2fsUnlinkEnterFtraceEvent::name() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void F2fsUnlinkEnterFtraceEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}
inline std::string* F2fsUnlinkEnterFtraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
  return _s;
}
inline const std::string& F2fsUnlinkEnterFtraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void F2fsUnlinkEnterFtraceEvent::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* F2fsUnlinkEnterFtraceEvent::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* F2fsUnlinkEnterFtraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void F2fsUnlinkEnterFtraceEvent::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.F2fsUnlinkEnterFtraceEvent.name)
}

// -------------------------------------------------------------------

// F2fsUnlinkExitFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsUnlinkExitFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsUnlinkExitFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsUnlinkExitFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkExitFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsUnlinkExitFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkExitFtraceEvent.dev)
}
inline ::uint64_t F2fsUnlinkExitFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsUnlinkExitFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsUnlinkExitFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsUnlinkExitFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsUnlinkExitFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkExitFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsUnlinkExitFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkExitFtraceEvent.ino)
}
inline ::uint64_t F2fsUnlinkExitFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsUnlinkExitFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 ret = 3;
inline bool F2fsUnlinkExitFtraceEvent::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsUnlinkExitFtraceEvent::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsUnlinkExitFtraceEvent::ret() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsUnlinkExitFtraceEvent.ret)
  return _internal_ret();
}
inline void F2fsUnlinkExitFtraceEvent::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsUnlinkExitFtraceEvent.ret)
}
inline ::int32_t F2fsUnlinkExitFtraceEvent::_internal_ret() const {
  return _impl_.ret_;
}
inline void F2fsUnlinkExitFtraceEvent::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// -------------------------------------------------------------------

// F2fsVmPageMkwriteFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsVmPageMkwriteFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsVmPageMkwriteFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dev)
}
inline ::uint64_t F2fsVmPageMkwriteFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsVmPageMkwriteFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsVmPageMkwriteFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.ino)
}
inline ::uint64_t F2fsVmPageMkwriteFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int32 type = 3;
inline bool F2fsVmPageMkwriteFtraceEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::type() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.type)
  return _internal_type();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.type)
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::_internal_type() const {
  return _impl_.type_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional int32 dir = 4;
inline bool F2fsVmPageMkwriteFtraceEvent::has_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_dir() {
  _impl_.dir_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::dir() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dir)
  return _internal_dir();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_dir(::int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dir)
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::_internal_dir() const {
  return _impl_.dir_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_dir(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dir_ = value;
}

// optional uint64 index = 5;
inline bool F2fsVmPageMkwriteFtraceEvent::has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsVmPageMkwriteFtraceEvent::index() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.index)
  return _internal_index();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.index)
}
inline ::uint64_t F2fsVmPageMkwriteFtraceEvent::_internal_index() const {
  return _impl_.index_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_index(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}

// optional int32 dirty = 6;
inline bool F2fsVmPageMkwriteFtraceEvent::has_dirty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_dirty() {
  _impl_.dirty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::dirty() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dirty)
  return _internal_dirty();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_dirty(::int32_t value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.dirty)
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::_internal_dirty() const {
  return _impl_.dirty_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_dirty(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dirty_ = value;
}

// optional int32 uptodate = 7;
inline bool F2fsVmPageMkwriteFtraceEvent::has_uptodate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsVmPageMkwriteFtraceEvent::clear_uptodate() {
  _impl_.uptodate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::uptodate() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.uptodate)
  return _internal_uptodate();
}
inline void F2fsVmPageMkwriteFtraceEvent::set_uptodate(::int32_t value) {
  _internal_set_uptodate(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsVmPageMkwriteFtraceEvent.uptodate)
}
inline ::int32_t F2fsVmPageMkwriteFtraceEvent::_internal_uptodate() const {
  return _impl_.uptodate_;
}
inline void F2fsVmPageMkwriteFtraceEvent::_internal_set_uptodate(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.uptodate_ = value;
}

// -------------------------------------------------------------------

// F2fsWriteBeginFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsWriteBeginFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsWriteBeginFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsWriteBeginFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsWriteBeginFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.dev)
}
inline ::uint64_t F2fsWriteBeginFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsWriteBeginFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsWriteBeginFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsWriteBeginFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsWriteBeginFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsWriteBeginFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.ino)
}
inline ::uint64_t F2fsWriteBeginFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsWriteBeginFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool F2fsWriteBeginFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsWriteBeginFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t F2fsWriteBeginFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.pos)
  return _internal_pos();
}
inline void F2fsWriteBeginFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.pos)
}
inline ::int64_t F2fsWriteBeginFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void F2fsWriteBeginFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool F2fsWriteBeginFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsWriteBeginFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t F2fsWriteBeginFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.len)
  return _internal_len();
}
inline void F2fsWriteBeginFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.len)
}
inline ::uint32_t F2fsWriteBeginFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void F2fsWriteBeginFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 flags = 5;
inline bool F2fsWriteBeginFtraceEvent::has_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsWriteBeginFtraceEvent::clear_flags() {
  _impl_.flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsWriteBeginFtraceEvent::flags() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteBeginFtraceEvent.flags)
  return _internal_flags();
}
inline void F2fsWriteBeginFtraceEvent::set_flags(::uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteBeginFtraceEvent.flags)
}
inline ::uint32_t F2fsWriteBeginFtraceEvent::_internal_flags() const {
  return _impl_.flags_;
}
inline void F2fsWriteBeginFtraceEvent::_internal_set_flags(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// F2fsWriteCheckpointFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsWriteCheckpointFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsWriteCheckpointFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsWriteCheckpointFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.dev)
}
inline ::uint64_t F2fsWriteCheckpointFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsWriteCheckpointFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dev_ = value;
}

// optional uint32 is_umount = 2;
inline bool F2fsWriteCheckpointFtraceEvent::has_is_umount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_is_umount() {
  _impl_.is_umount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsWriteCheckpointFtraceEvent::is_umount() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.is_umount)
  return _internal_is_umount();
}
inline void F2fsWriteCheckpointFtraceEvent::set_is_umount(::uint32_t value) {
  _internal_set_is_umount(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.is_umount)
}
inline ::uint32_t F2fsWriteCheckpointFtraceEvent::_internal_is_umount() const {
  return _impl_.is_umount_;
}
inline void F2fsWriteCheckpointFtraceEvent::_internal_set_is_umount(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_umount_ = value;
}

// optional string msg = 3;
inline bool F2fsWriteCheckpointFtraceEvent::has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& F2fsWriteCheckpointFtraceEvent::msg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void F2fsWriteCheckpointFtraceEvent::set_msg(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}
inline std::string* F2fsWriteCheckpointFtraceEvent::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
  return _s;
}
inline const std::string& F2fsWriteCheckpointFtraceEvent::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void F2fsWriteCheckpointFtraceEvent::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* F2fsWriteCheckpointFtraceEvent::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* F2fsWriteCheckpointFtraceEvent::release_msg() {
  // @@protoc_insertion_point(field_release:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.msg_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void F2fsWriteCheckpointFtraceEvent::set_allocated_msg(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.F2fsWriteCheckpointFtraceEvent.msg)
}

// optional int32 reason = 4;
inline bool F2fsWriteCheckpointFtraceEvent::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsWriteCheckpointFtraceEvent::clear_reason() {
  _impl_.reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t F2fsWriteCheckpointFtraceEvent::reason() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteCheckpointFtraceEvent.reason)
  return _internal_reason();
}
inline void F2fsWriteCheckpointFtraceEvent::set_reason(::int32_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteCheckpointFtraceEvent.reason)
}
inline ::int32_t F2fsWriteCheckpointFtraceEvent::_internal_reason() const {
  return _impl_.reason_;
}
inline void F2fsWriteCheckpointFtraceEvent::_internal_set_reason(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.reason_ = value;
}

// -------------------------------------------------------------------

// F2fsWriteEndFtraceEvent

// optional uint64 dev = 1;
inline bool F2fsWriteEndFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsWriteEndFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsWriteEndFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsWriteEndFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.dev)
}
inline ::uint64_t F2fsWriteEndFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsWriteEndFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dev_ = value;
}

// optional uint64 ino = 2;
inline bool F2fsWriteEndFtraceEvent::has_ino() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsWriteEndFtraceEvent::clear_ino() {
  _impl_.ino_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsWriteEndFtraceEvent::ino() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.ino)
  return _internal_ino();
}
inline void F2fsWriteEndFtraceEvent::set_ino(::uint64_t value) {
  _internal_set_ino(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.ino)
}
inline ::uint64_t F2fsWriteEndFtraceEvent::_internal_ino() const {
  return _impl_.ino_;
}
inline void F2fsWriteEndFtraceEvent::_internal_set_ino(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ino_ = value;
}

// optional int64 pos = 3;
inline bool F2fsWriteEndFtraceEvent::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsWriteEndFtraceEvent::clear_pos() {
  _impl_.pos_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t F2fsWriteEndFtraceEvent::pos() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.pos)
  return _internal_pos();
}
inline void F2fsWriteEndFtraceEvent::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.pos)
}
inline ::int64_t F2fsWriteEndFtraceEvent::_internal_pos() const {
  return _impl_.pos_;
}
inline void F2fsWriteEndFtraceEvent::_internal_set_pos(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pos_ = value;
}

// optional uint32 len = 4;
inline bool F2fsWriteEndFtraceEvent::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsWriteEndFtraceEvent::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t F2fsWriteEndFtraceEvent::len() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.len)
  return _internal_len();
}
inline void F2fsWriteEndFtraceEvent::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.len)
}
inline ::uint32_t F2fsWriteEndFtraceEvent::_internal_len() const {
  return _impl_.len_;
}
inline void F2fsWriteEndFtraceEvent::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.len_ = value;
}

// optional uint32 copied = 5;
inline bool F2fsWriteEndFtraceEvent::has_copied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsWriteEndFtraceEvent::clear_copied() {
  _impl_.copied_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsWriteEndFtraceEvent::copied() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsWriteEndFtraceEvent.copied)
  return _internal_copied();
}
inline void F2fsWriteEndFtraceEvent::set_copied(::uint32_t value) {
  _internal_set_copied(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsWriteEndFtraceEvent.copied)
}
inline ::uint32_t F2fsWriteEndFtraceEvent::_internal_copied() const {
  return _impl_.copied_;
}
inline void F2fsWriteEndFtraceEvent::_internal_set_copied(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.copied_ = value;
}

// -------------------------------------------------------------------

// F2fsIostatFtraceEvent

// optional uint64 app_bio = 1;
inline bool F2fsIostatFtraceEvent::has_app_bio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_bio() {
  _impl_.app_bio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_bio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_bio)
  return _internal_app_bio();
}
inline void F2fsIostatFtraceEvent::set_app_bio(::uint64_t value) {
  _internal_set_app_bio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_bio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_bio() const {
  return _impl_.app_bio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_bio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_bio_ = value;
}

// optional uint64 app_brio = 2;
inline bool F2fsIostatFtraceEvent::has_app_brio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_brio() {
  _impl_.app_brio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_brio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_brio)
  return _internal_app_brio();
}
inline void F2fsIostatFtraceEvent::set_app_brio(::uint64_t value) {
  _internal_set_app_brio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_brio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_brio() const {
  return _impl_.app_brio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_brio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_brio_ = value;
}

// optional uint64 app_dio = 3;
inline bool F2fsIostatFtraceEvent::has_app_dio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_dio() {
  _impl_.app_dio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_dio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_dio)
  return _internal_app_dio();
}
inline void F2fsIostatFtraceEvent::set_app_dio(::uint64_t value) {
  _internal_set_app_dio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_dio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_dio() const {
  return _impl_.app_dio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_dio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.app_dio_ = value;
}

// optional uint64 app_drio = 4;
inline bool F2fsIostatFtraceEvent::has_app_drio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_drio() {
  _impl_.app_drio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_drio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_drio)
  return _internal_app_drio();
}
inline void F2fsIostatFtraceEvent::set_app_drio(::uint64_t value) {
  _internal_set_app_drio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_drio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_drio() const {
  return _impl_.app_drio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_drio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.app_drio_ = value;
}

// optional uint64 app_mio = 5;
inline bool F2fsIostatFtraceEvent::has_app_mio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_mio() {
  _impl_.app_mio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_mio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_mio)
  return _internal_app_mio();
}
inline void F2fsIostatFtraceEvent::set_app_mio(::uint64_t value) {
  _internal_set_app_mio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_mio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_mio() const {
  return _impl_.app_mio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_mio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.app_mio_ = value;
}

// optional uint64 app_mrio = 6;
inline bool F2fsIostatFtraceEvent::has_app_mrio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_mrio() {
  _impl_.app_mrio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_mrio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_mrio)
  return _internal_app_mrio();
}
inline void F2fsIostatFtraceEvent::set_app_mrio(::uint64_t value) {
  _internal_set_app_mrio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_mrio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_mrio() const {
  return _impl_.app_mrio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_mrio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.app_mrio_ = value;
}

// optional uint64 app_rio = 7;
inline bool F2fsIostatFtraceEvent::has_app_rio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_rio() {
  _impl_.app_rio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_rio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_rio)
  return _internal_app_rio();
}
inline void F2fsIostatFtraceEvent::set_app_rio(::uint64_t value) {
  _internal_set_app_rio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_rio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_rio() const {
  return _impl_.app_rio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_rio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.app_rio_ = value;
}

// optional uint64 app_wio = 8;
inline bool F2fsIostatFtraceEvent::has_app_wio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_app_wio() {
  _impl_.app_wio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t F2fsIostatFtraceEvent::app_wio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.app_wio)
  return _internal_app_wio();
}
inline void F2fsIostatFtraceEvent::set_app_wio(::uint64_t value) {
  _internal_set_app_wio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.app_wio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_app_wio() const {
  return _impl_.app_wio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_app_wio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.app_wio_ = value;
}

// optional uint64 dev = 9;
inline bool F2fsIostatFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t F2fsIostatFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsIostatFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.dev)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsIostatFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.dev_ = value;
}

// optional uint64 fs_cdrio = 10;
inline bool F2fsIostatFtraceEvent::has_fs_cdrio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_cdrio() {
  _impl_.fs_cdrio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_cdrio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_cdrio)
  return _internal_fs_cdrio();
}
inline void F2fsIostatFtraceEvent::set_fs_cdrio(::uint64_t value) {
  _internal_set_fs_cdrio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_cdrio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_cdrio() const {
  return _impl_.fs_cdrio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_cdrio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.fs_cdrio_ = value;
}

// optional uint64 fs_cp_dio = 11;
inline bool F2fsIostatFtraceEvent::has_fs_cp_dio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_cp_dio() {
  _impl_.fs_cp_dio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_cp_dio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_cp_dio)
  return _internal_fs_cp_dio();
}
inline void F2fsIostatFtraceEvent::set_fs_cp_dio(::uint64_t value) {
  _internal_set_fs_cp_dio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_cp_dio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_cp_dio() const {
  return _impl_.fs_cp_dio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_cp_dio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.fs_cp_dio_ = value;
}

// optional uint64 fs_cp_mio = 12;
inline bool F2fsIostatFtraceEvent::has_fs_cp_mio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_cp_mio() {
  _impl_.fs_cp_mio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_cp_mio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_cp_mio)
  return _internal_fs_cp_mio();
}
inline void F2fsIostatFtraceEvent::set_fs_cp_mio(::uint64_t value) {
  _internal_set_fs_cp_mio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_cp_mio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_cp_mio() const {
  return _impl_.fs_cp_mio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_cp_mio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.fs_cp_mio_ = value;
}

// optional uint64 fs_cp_nio = 13;
inline bool F2fsIostatFtraceEvent::has_fs_cp_nio() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_cp_nio() {
  _impl_.fs_cp_nio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_cp_nio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_cp_nio)
  return _internal_fs_cp_nio();
}
inline void F2fsIostatFtraceEvent::set_fs_cp_nio(::uint64_t value) {
  _internal_set_fs_cp_nio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_cp_nio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_cp_nio() const {
  return _impl_.fs_cp_nio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_cp_nio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fs_cp_nio_ = value;
}

// optional uint64 fs_dio = 14;
inline bool F2fsIostatFtraceEvent::has_fs_dio() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_dio() {
  _impl_.fs_dio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_dio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_dio)
  return _internal_fs_dio();
}
inline void F2fsIostatFtraceEvent::set_fs_dio(::uint64_t value) {
  _internal_set_fs_dio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_dio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_dio() const {
  return _impl_.fs_dio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_dio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.fs_dio_ = value;
}

// optional uint64 fs_discard = 15;
inline bool F2fsIostatFtraceEvent::has_fs_discard() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_discard() {
  _impl_.fs_discard_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_discard() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_discard)
  return _internal_fs_discard();
}
inline void F2fsIostatFtraceEvent::set_fs_discard(::uint64_t value) {
  _internal_set_fs_discard(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_discard)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_discard() const {
  return _impl_.fs_discard_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_discard(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.fs_discard_ = value;
}

// optional uint64 fs_drio = 16;
inline bool F2fsIostatFtraceEvent::has_fs_drio() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_drio() {
  _impl_.fs_drio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_drio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_drio)
  return _internal_fs_drio();
}
inline void F2fsIostatFtraceEvent::set_fs_drio(::uint64_t value) {
  _internal_set_fs_drio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_drio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_drio() const {
  return _impl_.fs_drio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_drio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.fs_drio_ = value;
}

// optional uint64 fs_gc_dio = 17;
inline bool F2fsIostatFtraceEvent::has_fs_gc_dio() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_gc_dio() {
  _impl_.fs_gc_dio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_gc_dio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_gc_dio)
  return _internal_fs_gc_dio();
}
inline void F2fsIostatFtraceEvent::set_fs_gc_dio(::uint64_t value) {
  _internal_set_fs_gc_dio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_gc_dio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_gc_dio() const {
  return _impl_.fs_gc_dio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_gc_dio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.fs_gc_dio_ = value;
}

// optional uint64 fs_gc_nio = 18;
inline bool F2fsIostatFtraceEvent::has_fs_gc_nio() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_gc_nio() {
  _impl_.fs_gc_nio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_gc_nio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_gc_nio)
  return _internal_fs_gc_nio();
}
inline void F2fsIostatFtraceEvent::set_fs_gc_nio(::uint64_t value) {
  _internal_set_fs_gc_nio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_gc_nio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_gc_nio() const {
  return _impl_.fs_gc_nio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_gc_nio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.fs_gc_nio_ = value;
}

// optional uint64 fs_gdrio = 19;
inline bool F2fsIostatFtraceEvent::has_fs_gdrio() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_gdrio() {
  _impl_.fs_gdrio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_gdrio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_gdrio)
  return _internal_fs_gdrio();
}
inline void F2fsIostatFtraceEvent::set_fs_gdrio(::uint64_t value) {
  _internal_set_fs_gdrio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_gdrio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_gdrio() const {
  return _impl_.fs_gdrio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_gdrio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.fs_gdrio_ = value;
}

// optional uint64 fs_mio = 20;
inline bool F2fsIostatFtraceEvent::has_fs_mio() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_mio() {
  _impl_.fs_mio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_mio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_mio)
  return _internal_fs_mio();
}
inline void F2fsIostatFtraceEvent::set_fs_mio(::uint64_t value) {
  _internal_set_fs_mio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_mio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_mio() const {
  return _impl_.fs_mio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_mio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.fs_mio_ = value;
}

// optional uint64 fs_mrio = 21;
inline bool F2fsIostatFtraceEvent::has_fs_mrio() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_mrio() {
  _impl_.fs_mrio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_mrio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_mrio)
  return _internal_fs_mrio();
}
inline void F2fsIostatFtraceEvent::set_fs_mrio(::uint64_t value) {
  _internal_set_fs_mrio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_mrio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_mrio() const {
  return _impl_.fs_mrio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_mrio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.fs_mrio_ = value;
}

// optional uint64 fs_nio = 22;
inline bool F2fsIostatFtraceEvent::has_fs_nio() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_nio() {
  _impl_.fs_nio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_nio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_nio)
  return _internal_fs_nio();
}
inline void F2fsIostatFtraceEvent::set_fs_nio(::uint64_t value) {
  _internal_set_fs_nio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_nio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_nio() const {
  return _impl_.fs_nio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_nio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.fs_nio_ = value;
}

// optional uint64 fs_nrio = 23;
inline bool F2fsIostatFtraceEvent::has_fs_nrio() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void F2fsIostatFtraceEvent::clear_fs_nrio() {
  _impl_.fs_nrio_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::uint64_t F2fsIostatFtraceEvent::fs_nrio() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatFtraceEvent.fs_nrio)
  return _internal_fs_nrio();
}
inline void F2fsIostatFtraceEvent::set_fs_nrio(::uint64_t value) {
  _internal_set_fs_nrio(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatFtraceEvent.fs_nrio)
}
inline ::uint64_t F2fsIostatFtraceEvent::_internal_fs_nrio() const {
  return _impl_.fs_nrio_;
}
inline void F2fsIostatFtraceEvent::_internal_set_fs_nrio(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.fs_nrio_ = value;
}

// -------------------------------------------------------------------

// F2fsIostatLatencyFtraceEvent

// optional uint32 d_rd_avg = 1;
inline bool F2fsIostatLatencyFtraceEvent::has_d_rd_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_rd_avg() {
  _impl_.d_rd_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_rd_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_rd_avg)
  return _internal_d_rd_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_rd_avg(::uint32_t value) {
  _internal_set_d_rd_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_rd_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_rd_avg() const {
  return _impl_.d_rd_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_rd_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.d_rd_avg_ = value;
}

// optional uint32 d_rd_cnt = 2;
inline bool F2fsIostatLatencyFtraceEvent::has_d_rd_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_rd_cnt() {
  _impl_.d_rd_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_rd_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_rd_cnt)
  return _internal_d_rd_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_rd_cnt(::uint32_t value) {
  _internal_set_d_rd_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_rd_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_rd_cnt() const {
  return _impl_.d_rd_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_rd_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.d_rd_cnt_ = value;
}

// optional uint32 d_rd_peak = 3;
inline bool F2fsIostatLatencyFtraceEvent::has_d_rd_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_rd_peak() {
  _impl_.d_rd_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_rd_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_rd_peak)
  return _internal_d_rd_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_rd_peak(::uint32_t value) {
  _internal_set_d_rd_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_rd_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_rd_peak() const {
  return _impl_.d_rd_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_rd_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.d_rd_peak_ = value;
}

// optional uint32 d_wr_as_avg = 4;
inline bool F2fsIostatLatencyFtraceEvent::has_d_wr_as_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_wr_as_avg() {
  _impl_.d_wr_as_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_wr_as_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_as_avg)
  return _internal_d_wr_as_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_wr_as_avg(::uint32_t value) {
  _internal_set_d_wr_as_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_as_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_wr_as_avg() const {
  return _impl_.d_wr_as_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_wr_as_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.d_wr_as_avg_ = value;
}

// optional uint32 d_wr_as_cnt = 5;
inline bool F2fsIostatLatencyFtraceEvent::has_d_wr_as_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_wr_as_cnt() {
  _impl_.d_wr_as_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_wr_as_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_as_cnt)
  return _internal_d_wr_as_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_wr_as_cnt(::uint32_t value) {
  _internal_set_d_wr_as_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_as_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_wr_as_cnt() const {
  return _impl_.d_wr_as_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_wr_as_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.d_wr_as_cnt_ = value;
}

// optional uint32 d_wr_as_peak = 6;
inline bool F2fsIostatLatencyFtraceEvent::has_d_wr_as_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_wr_as_peak() {
  _impl_.d_wr_as_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_wr_as_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_as_peak)
  return _internal_d_wr_as_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_wr_as_peak(::uint32_t value) {
  _internal_set_d_wr_as_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_as_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_wr_as_peak() const {
  return _impl_.d_wr_as_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_wr_as_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.d_wr_as_peak_ = value;
}

// optional uint32 d_wr_s_avg = 7;
inline bool F2fsIostatLatencyFtraceEvent::has_d_wr_s_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_wr_s_avg() {
  _impl_.d_wr_s_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_wr_s_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_s_avg)
  return _internal_d_wr_s_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_wr_s_avg(::uint32_t value) {
  _internal_set_d_wr_s_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_s_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_wr_s_avg() const {
  return _impl_.d_wr_s_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_wr_s_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.d_wr_s_avg_ = value;
}

// optional uint32 d_wr_s_cnt = 8;
inline bool F2fsIostatLatencyFtraceEvent::has_d_wr_s_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_wr_s_cnt() {
  _impl_.d_wr_s_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_wr_s_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_s_cnt)
  return _internal_d_wr_s_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_wr_s_cnt(::uint32_t value) {
  _internal_set_d_wr_s_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_s_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_wr_s_cnt() const {
  return _impl_.d_wr_s_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_wr_s_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.d_wr_s_cnt_ = value;
}

// optional uint32 d_wr_s_peak = 9;
inline bool F2fsIostatLatencyFtraceEvent::has_d_wr_s_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_d_wr_s_peak() {
  _impl_.d_wr_s_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::d_wr_s_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_s_peak)
  return _internal_d_wr_s_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_d_wr_s_peak(::uint32_t value) {
  _internal_set_d_wr_s_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.d_wr_s_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_d_wr_s_peak() const {
  return _impl_.d_wr_s_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_d_wr_s_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.d_wr_s_peak_ = value;
}

// optional uint64 dev = 10;
inline bool F2fsIostatLatencyFtraceEvent::has_dev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_dev() {
  _impl_.dev_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t F2fsIostatLatencyFtraceEvent::dev() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.dev)
  return _internal_dev();
}
inline void F2fsIostatLatencyFtraceEvent::set_dev(::uint64_t value) {
  _internal_set_dev(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.dev)
}
inline ::uint64_t F2fsIostatLatencyFtraceEvent::_internal_dev() const {
  return _impl_.dev_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_dev(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.dev_ = value;
}

// optional uint32 m_rd_avg = 11;
inline bool F2fsIostatLatencyFtraceEvent::has_m_rd_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_rd_avg() {
  _impl_.m_rd_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_rd_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_rd_avg)
  return _internal_m_rd_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_rd_avg(::uint32_t value) {
  _internal_set_m_rd_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_rd_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_rd_avg() const {
  return _impl_.m_rd_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_rd_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.m_rd_avg_ = value;
}

// optional uint32 m_rd_cnt = 12;
inline bool F2fsIostatLatencyFtraceEvent::has_m_rd_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_rd_cnt() {
  _impl_.m_rd_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_rd_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_rd_cnt)
  return _internal_m_rd_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_rd_cnt(::uint32_t value) {
  _internal_set_m_rd_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_rd_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_rd_cnt() const {
  return _impl_.m_rd_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_rd_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.m_rd_cnt_ = value;
}

// optional uint32 m_rd_peak = 13;
inline bool F2fsIostatLatencyFtraceEvent::has_m_rd_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_rd_peak() {
  _impl_.m_rd_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_rd_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_rd_peak)
  return _internal_m_rd_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_rd_peak(::uint32_t value) {
  _internal_set_m_rd_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_rd_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_rd_peak() const {
  return _impl_.m_rd_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_rd_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.m_rd_peak_ = value;
}

// optional uint32 m_wr_as_avg = 14;
inline bool F2fsIostatLatencyFtraceEvent::has_m_wr_as_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_wr_as_avg() {
  _impl_.m_wr_as_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_wr_as_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_as_avg)
  return _internal_m_wr_as_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_wr_as_avg(::uint32_t value) {
  _internal_set_m_wr_as_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_as_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_wr_as_avg() const {
  return _impl_.m_wr_as_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_wr_as_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.m_wr_as_avg_ = value;
}

// optional uint32 m_wr_as_cnt = 15;
inline bool F2fsIostatLatencyFtraceEvent::has_m_wr_as_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_wr_as_cnt() {
  _impl_.m_wr_as_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_wr_as_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_as_cnt)
  return _internal_m_wr_as_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_wr_as_cnt(::uint32_t value) {
  _internal_set_m_wr_as_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_as_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_wr_as_cnt() const {
  return _impl_.m_wr_as_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_wr_as_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.m_wr_as_cnt_ = value;
}

// optional uint32 m_wr_as_peak = 16;
inline bool F2fsIostatLatencyFtraceEvent::has_m_wr_as_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_wr_as_peak() {
  _impl_.m_wr_as_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_wr_as_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_as_peak)
  return _internal_m_wr_as_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_wr_as_peak(::uint32_t value) {
  _internal_set_m_wr_as_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_as_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_wr_as_peak() const {
  return _impl_.m_wr_as_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_wr_as_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.m_wr_as_peak_ = value;
}

// optional uint32 m_wr_s_avg = 17;
inline bool F2fsIostatLatencyFtraceEvent::has_m_wr_s_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_wr_s_avg() {
  _impl_.m_wr_s_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_wr_s_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_s_avg)
  return _internal_m_wr_s_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_wr_s_avg(::uint32_t value) {
  _internal_set_m_wr_s_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_s_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_wr_s_avg() const {
  return _impl_.m_wr_s_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_wr_s_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.m_wr_s_avg_ = value;
}

// optional uint32 m_wr_s_cnt = 18;
inline bool F2fsIostatLatencyFtraceEvent::has_m_wr_s_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_wr_s_cnt() {
  _impl_.m_wr_s_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_wr_s_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_s_cnt)
  return _internal_m_wr_s_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_wr_s_cnt(::uint32_t value) {
  _internal_set_m_wr_s_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_s_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_wr_s_cnt() const {
  return _impl_.m_wr_s_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_wr_s_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.m_wr_s_cnt_ = value;
}

// optional uint32 m_wr_s_peak = 19;
inline bool F2fsIostatLatencyFtraceEvent::has_m_wr_s_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_m_wr_s_peak() {
  _impl_.m_wr_s_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::m_wr_s_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_s_peak)
  return _internal_m_wr_s_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_m_wr_s_peak(::uint32_t value) {
  _internal_set_m_wr_s_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.m_wr_s_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_m_wr_s_peak() const {
  return _impl_.m_wr_s_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_m_wr_s_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.m_wr_s_peak_ = value;
}

// optional uint32 n_rd_avg = 20;
inline bool F2fsIostatLatencyFtraceEvent::has_n_rd_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_rd_avg() {
  _impl_.n_rd_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_rd_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_rd_avg)
  return _internal_n_rd_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_rd_avg(::uint32_t value) {
  _internal_set_n_rd_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_rd_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_rd_avg() const {
  return _impl_.n_rd_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_rd_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.n_rd_avg_ = value;
}

// optional uint32 n_rd_cnt = 21;
inline bool F2fsIostatLatencyFtraceEvent::has_n_rd_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_rd_cnt() {
  _impl_.n_rd_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_rd_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_rd_cnt)
  return _internal_n_rd_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_rd_cnt(::uint32_t value) {
  _internal_set_n_rd_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_rd_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_rd_cnt() const {
  return _impl_.n_rd_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_rd_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.n_rd_cnt_ = value;
}

// optional uint32 n_rd_peak = 22;
inline bool F2fsIostatLatencyFtraceEvent::has_n_rd_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_rd_peak() {
  _impl_.n_rd_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_rd_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_rd_peak)
  return _internal_n_rd_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_rd_peak(::uint32_t value) {
  _internal_set_n_rd_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_rd_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_rd_peak() const {
  return _impl_.n_rd_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_rd_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.n_rd_peak_ = value;
}

// optional uint32 n_wr_as_avg = 23;
inline bool F2fsIostatLatencyFtraceEvent::has_n_wr_as_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_wr_as_avg() {
  _impl_.n_wr_as_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_wr_as_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_as_avg)
  return _internal_n_wr_as_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_wr_as_avg(::uint32_t value) {
  _internal_set_n_wr_as_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_as_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_wr_as_avg() const {
  return _impl_.n_wr_as_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_wr_as_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.n_wr_as_avg_ = value;
}

// optional uint32 n_wr_as_cnt = 24;
inline bool F2fsIostatLatencyFtraceEvent::has_n_wr_as_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_wr_as_cnt() {
  _impl_.n_wr_as_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_wr_as_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_as_cnt)
  return _internal_n_wr_as_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_wr_as_cnt(::uint32_t value) {
  _internal_set_n_wr_as_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_as_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_wr_as_cnt() const {
  return _impl_.n_wr_as_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_wr_as_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.n_wr_as_cnt_ = value;
}

// optional uint32 n_wr_as_peak = 25;
inline bool F2fsIostatLatencyFtraceEvent::has_n_wr_as_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_wr_as_peak() {
  _impl_.n_wr_as_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_wr_as_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_as_peak)
  return _internal_n_wr_as_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_wr_as_peak(::uint32_t value) {
  _internal_set_n_wr_as_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_as_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_wr_as_peak() const {
  return _impl_.n_wr_as_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_wr_as_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.n_wr_as_peak_ = value;
}

// optional uint32 n_wr_s_avg = 26;
inline bool F2fsIostatLatencyFtraceEvent::has_n_wr_s_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_wr_s_avg() {
  _impl_.n_wr_s_avg_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_wr_s_avg() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_s_avg)
  return _internal_n_wr_s_avg();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_wr_s_avg(::uint32_t value) {
  _internal_set_n_wr_s_avg(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_s_avg)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_wr_s_avg() const {
  return _impl_.n_wr_s_avg_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_wr_s_avg(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.n_wr_s_avg_ = value;
}

// optional uint32 n_wr_s_cnt = 27;
inline bool F2fsIostatLatencyFtraceEvent::has_n_wr_s_cnt() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_wr_s_cnt() {
  _impl_.n_wr_s_cnt_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_wr_s_cnt() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_s_cnt)
  return _internal_n_wr_s_cnt();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_wr_s_cnt(::uint32_t value) {
  _internal_set_n_wr_s_cnt(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_s_cnt)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_wr_s_cnt() const {
  return _impl_.n_wr_s_cnt_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_wr_s_cnt(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.n_wr_s_cnt_ = value;
}

// optional uint32 n_wr_s_peak = 28;
inline bool F2fsIostatLatencyFtraceEvent::has_n_wr_s_peak() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void F2fsIostatLatencyFtraceEvent::clear_n_wr_s_peak() {
  _impl_.n_wr_s_peak_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::n_wr_s_peak() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_s_peak)
  return _internal_n_wr_s_peak();
}
inline void F2fsIostatLatencyFtraceEvent::set_n_wr_s_peak(::uint32_t value) {
  _internal_set_n_wr_s_peak(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.F2fsIostatLatencyFtraceEvent.n_wr_s_peak)
}
inline ::uint32_t F2fsIostatLatencyFtraceEvent::_internal_n_wr_s_peak() const {
  return _impl_.n_wr_s_peak_;
}
inline void F2fsIostatLatencyFtraceEvent::_internal_set_n_wr_s_peak(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.n_wr_s_peak_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ff2fs_2eproto_2epb_2eh
