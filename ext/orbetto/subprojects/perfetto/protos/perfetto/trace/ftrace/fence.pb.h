// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/fence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
namespace perfetto {
namespace protos {
class FenceDestroyFtraceEvent;
struct FenceDestroyFtraceEventDefaultTypeInternal;
extern FenceDestroyFtraceEventDefaultTypeInternal _FenceDestroyFtraceEvent_default_instance_;
class FenceEnableSignalFtraceEvent;
struct FenceEnableSignalFtraceEventDefaultTypeInternal;
extern FenceEnableSignalFtraceEventDefaultTypeInternal _FenceEnableSignalFtraceEvent_default_instance_;
class FenceInitFtraceEvent;
struct FenceInitFtraceEventDefaultTypeInternal;
extern FenceInitFtraceEventDefaultTypeInternal _FenceInitFtraceEvent_default_instance_;
class FenceSignaledFtraceEvent;
struct FenceSignaledFtraceEventDefaultTypeInternal;
extern FenceSignaledFtraceEventDefaultTypeInternal _FenceSignaledFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::FenceDestroyFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceDestroyFtraceEvent>(Arena*);
template <>
::perfetto::protos::FenceEnableSignalFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceEnableSignalFtraceEvent>(Arena*);
template <>
::perfetto::protos::FenceInitFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceInitFtraceEvent>(Arena*);
template <>
::perfetto::protos::FenceSignaledFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::FenceSignaledFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class FenceInitFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceInitFtraceEvent) */ {
 public:
  inline FenceInitFtraceEvent() : FenceInitFtraceEvent(nullptr) {}
  ~FenceInitFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FenceInitFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FenceInitFtraceEvent(const FenceInitFtraceEvent& from);
  FenceInitFtraceEvent(FenceInitFtraceEvent&& from) noexcept
    : FenceInitFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceInitFtraceEvent& operator=(const FenceInitFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceInitFtraceEvent& operator=(FenceInitFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FenceInitFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FenceInitFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceInitFtraceEvent*>(
               &_FenceInitFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FenceInitFtraceEvent& a, FenceInitFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceInitFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FenceInitFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FenceInitFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FenceInitFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FenceInitFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FenceInitFtraceEvent& from) {
    FenceInitFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FenceInitFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FenceInitFtraceEvent";
  }
  protected:
  explicit FenceInitFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceInitFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};// -------------------------------------------------------------------

class FenceDestroyFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceDestroyFtraceEvent) */ {
 public:
  inline FenceDestroyFtraceEvent() : FenceDestroyFtraceEvent(nullptr) {}
  ~FenceDestroyFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FenceDestroyFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FenceDestroyFtraceEvent(const FenceDestroyFtraceEvent& from);
  FenceDestroyFtraceEvent(FenceDestroyFtraceEvent&& from) noexcept
    : FenceDestroyFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceDestroyFtraceEvent& operator=(const FenceDestroyFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceDestroyFtraceEvent& operator=(FenceDestroyFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FenceDestroyFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FenceDestroyFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceDestroyFtraceEvent*>(
               &_FenceDestroyFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FenceDestroyFtraceEvent& a, FenceDestroyFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceDestroyFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FenceDestroyFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FenceDestroyFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FenceDestroyFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FenceDestroyFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FenceDestroyFtraceEvent& from) {
    FenceDestroyFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FenceDestroyFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FenceDestroyFtraceEvent";
  }
  protected:
  explicit FenceDestroyFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceDestroyFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};// -------------------------------------------------------------------

class FenceEnableSignalFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceEnableSignalFtraceEvent) */ {
 public:
  inline FenceEnableSignalFtraceEvent() : FenceEnableSignalFtraceEvent(nullptr) {}
  ~FenceEnableSignalFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FenceEnableSignalFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FenceEnableSignalFtraceEvent(const FenceEnableSignalFtraceEvent& from);
  FenceEnableSignalFtraceEvent(FenceEnableSignalFtraceEvent&& from) noexcept
    : FenceEnableSignalFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceEnableSignalFtraceEvent& operator=(const FenceEnableSignalFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceEnableSignalFtraceEvent& operator=(FenceEnableSignalFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FenceEnableSignalFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FenceEnableSignalFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceEnableSignalFtraceEvent*>(
               &_FenceEnableSignalFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FenceEnableSignalFtraceEvent& a, FenceEnableSignalFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceEnableSignalFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FenceEnableSignalFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FenceEnableSignalFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FenceEnableSignalFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FenceEnableSignalFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FenceEnableSignalFtraceEvent& from) {
    FenceEnableSignalFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FenceEnableSignalFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FenceEnableSignalFtraceEvent";
  }
  protected:
  explicit FenceEnableSignalFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceEnableSignalFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};// -------------------------------------------------------------------

class FenceSignaledFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.FenceSignaledFtraceEvent) */ {
 public:
  inline FenceSignaledFtraceEvent() : FenceSignaledFtraceEvent(nullptr) {}
  ~FenceSignaledFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FenceSignaledFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FenceSignaledFtraceEvent(const FenceSignaledFtraceEvent& from);
  FenceSignaledFtraceEvent(FenceSignaledFtraceEvent&& from) noexcept
    : FenceSignaledFtraceEvent() {
    *this = ::std::move(from);
  }

  inline FenceSignaledFtraceEvent& operator=(const FenceSignaledFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FenceSignaledFtraceEvent& operator=(FenceSignaledFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FenceSignaledFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FenceSignaledFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const FenceSignaledFtraceEvent*>(
               &_FenceSignaledFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FenceSignaledFtraceEvent& a, FenceSignaledFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(FenceSignaledFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FenceSignaledFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FenceSignaledFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FenceSignaledFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FenceSignaledFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FenceSignaledFtraceEvent& from) {
    FenceSignaledFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FenceSignaledFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.FenceSignaledFtraceEvent";
  }
  protected:
  explicit FenceSignaledFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriverFieldNumber = 2,
    kTimelineFieldNumber = 4,
    kContextFieldNumber = 1,
    kSeqnoFieldNumber = 3,
  };
  // optional string driver = 2;
  bool has_driver() const;
  void clear_driver() ;
  const std::string& driver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_driver(Arg_&& arg, Args_... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* ptr);

  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(
      const std::string& value);
  std::string* _internal_mutable_driver();

  public:
  // optional string timeline = 4;
  bool has_timeline() const;
  void clear_timeline() ;
  const std::string& timeline() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeline(Arg_&& arg, Args_... args);
  std::string* mutable_timeline();
  PROTOBUF_NODISCARD std::string* release_timeline();
  void set_allocated_timeline(std::string* ptr);

  private:
  const std::string& _internal_timeline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeline(
      const std::string& value);
  std::string* _internal_mutable_timeline();

  public:
  // optional uint32 context = 1;
  bool has_context() const;
  void clear_context() ;
  ::uint32_t context() const;
  void set_context(::uint32_t value);

  private:
  ::uint32_t _internal_context() const;
  void _internal_set_context(::uint32_t value);

  public:
  // optional uint32 seqno = 3;
  bool has_seqno() const;
  void clear_seqno() ;
  ::uint32_t seqno() const;
  void set_seqno(::uint32_t value);

  private:
  ::uint32_t _internal_seqno() const;
  void _internal_set_seqno(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.FenceSignaledFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeline_;
    ::uint32_t context_;
    ::uint32_t seqno_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FenceInitFtraceEvent

// optional uint32 context = 1;
inline bool FenceInitFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FenceInitFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FenceInitFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.context)
  return _internal_context();
}
inline void FenceInitFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.context)
}
inline ::uint32_t FenceInitFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void FenceInitFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool FenceInitFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FenceInitFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceInitFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceInitFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.driver)
}
inline std::string* FenceInitFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceInitFtraceEvent.driver)
  return _s;
}
inline const std::string& FenceInitFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void FenceInitFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceInitFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceInitFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceInitFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceInitFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceInitFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceInitFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FenceInitFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FenceInitFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.seqno)
  return _internal_seqno();
}
inline void FenceInitFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.seqno)
}
inline ::uint32_t FenceInitFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void FenceInitFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool FenceInitFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FenceInitFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceInitFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceInitFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceInitFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceInitFtraceEvent.timeline)
}
inline std::string* FenceInitFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceInitFtraceEvent.timeline)
  return _s;
}
inline const std::string& FenceInitFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void FenceInitFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceInitFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceInitFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceInitFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceInitFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceInitFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// FenceDestroyFtraceEvent

// optional uint32 context = 1;
inline bool FenceDestroyFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FenceDestroyFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FenceDestroyFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.context)
  return _internal_context();
}
inline void FenceDestroyFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.context)
}
inline ::uint32_t FenceDestroyFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void FenceDestroyFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool FenceDestroyFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FenceDestroyFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceDestroyFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceDestroyFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.driver)
}
inline std::string* FenceDestroyFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceDestroyFtraceEvent.driver)
  return _s;
}
inline const std::string& FenceDestroyFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void FenceDestroyFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceDestroyFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceDestroyFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceDestroyFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceDestroyFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceDestroyFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceDestroyFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FenceDestroyFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FenceDestroyFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.seqno)
  return _internal_seqno();
}
inline void FenceDestroyFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.seqno)
}
inline ::uint32_t FenceDestroyFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void FenceDestroyFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool FenceDestroyFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FenceDestroyFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceDestroyFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceDestroyFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceDestroyFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}
inline std::string* FenceDestroyFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceDestroyFtraceEvent.timeline)
  return _s;
}
inline const std::string& FenceDestroyFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void FenceDestroyFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceDestroyFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceDestroyFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceDestroyFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceDestroyFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceDestroyFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// FenceEnableSignalFtraceEvent

// optional uint32 context = 1;
inline bool FenceEnableSignalFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FenceEnableSignalFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FenceEnableSignalFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.context)
  return _internal_context();
}
inline void FenceEnableSignalFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.context)
}
inline ::uint32_t FenceEnableSignalFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void FenceEnableSignalFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool FenceEnableSignalFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FenceEnableSignalFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceEnableSignalFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceEnableSignalFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}
inline std::string* FenceEnableSignalFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
  return _s;
}
inline const std::string& FenceEnableSignalFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void FenceEnableSignalFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceEnableSignalFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceEnableSignalFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceEnableSignalFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceEnableSignalFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceEnableSignalFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FenceEnableSignalFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FenceEnableSignalFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.seqno)
  return _internal_seqno();
}
inline void FenceEnableSignalFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.seqno)
}
inline ::uint32_t FenceEnableSignalFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void FenceEnableSignalFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool FenceEnableSignalFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FenceEnableSignalFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceEnableSignalFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceEnableSignalFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}
inline std::string* FenceEnableSignalFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
  return _s;
}
inline const std::string& FenceEnableSignalFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void FenceEnableSignalFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceEnableSignalFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceEnableSignalFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceEnableSignalFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceEnableSignalFtraceEvent.timeline)
}

// -------------------------------------------------------------------

// FenceSignaledFtraceEvent

// optional uint32 context = 1;
inline bool FenceSignaledFtraceEvent::has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FenceSignaledFtraceEvent::clear_context() {
  _impl_.context_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t FenceSignaledFtraceEvent::context() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.context)
  return _internal_context();
}
inline void FenceSignaledFtraceEvent::set_context(::uint32_t value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.context)
}
inline ::uint32_t FenceSignaledFtraceEvent::_internal_context() const {
  return _impl_.context_;
}
inline void FenceSignaledFtraceEvent::_internal_set_context(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.context_ = value;
}

// optional string driver = 2;
inline bool FenceSignaledFtraceEvent::has_driver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FenceSignaledFtraceEvent::clear_driver() {
  _impl_.driver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FenceSignaledFtraceEvent::driver() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.driver)
  return _internal_driver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceSignaledFtraceEvent::set_driver(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.driver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.driver)
}
inline std::string* FenceSignaledFtraceEvent::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceSignaledFtraceEvent.driver)
  return _s;
}
inline const std::string& FenceSignaledFtraceEvent::_internal_driver() const {
  return _impl_.driver_.Get();
}
inline void FenceSignaledFtraceEvent::_internal_set_driver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.driver_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceSignaledFtraceEvent::_internal_mutable_driver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.driver_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceSignaledFtraceEvent::release_driver() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceSignaledFtraceEvent.driver)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.driver_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceSignaledFtraceEvent::set_allocated_driver(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.driver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.driver_.IsDefault()) {
          _impl_.driver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceSignaledFtraceEvent.driver)
}

// optional uint32 seqno = 3;
inline bool FenceSignaledFtraceEvent::has_seqno() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FenceSignaledFtraceEvent::clear_seqno() {
  _impl_.seqno_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FenceSignaledFtraceEvent::seqno() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.seqno)
  return _internal_seqno();
}
inline void FenceSignaledFtraceEvent::set_seqno(::uint32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.seqno)
}
inline ::uint32_t FenceSignaledFtraceEvent::_internal_seqno() const {
  return _impl_.seqno_;
}
inline void FenceSignaledFtraceEvent::_internal_set_seqno(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seqno_ = value;
}

// optional string timeline = 4;
inline bool FenceSignaledFtraceEvent::has_timeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FenceSignaledFtraceEvent::clear_timeline() {
  _impl_.timeline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FenceSignaledFtraceEvent::timeline() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.FenceSignaledFtraceEvent.timeline)
  return _internal_timeline();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FenceSignaledFtraceEvent::set_timeline(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timeline_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}
inline std::string* FenceSignaledFtraceEvent::mutable_timeline() {
  std::string* _s = _internal_mutable_timeline();
  // @@protoc_insertion_point(field_mutable:perfetto.protos.FenceSignaledFtraceEvent.timeline)
  return _s;
}
inline const std::string& FenceSignaledFtraceEvent::_internal_timeline() const {
  return _impl_.timeline_.Get();
}
inline void FenceSignaledFtraceEvent::_internal_set_timeline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.timeline_.Set(value, GetArenaForAllocation());
}
inline std::string* FenceSignaledFtraceEvent::_internal_mutable_timeline() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.timeline_.Mutable( GetArenaForAllocation());
}
inline std::string* FenceSignaledFtraceEvent::release_timeline() {
  // @@protoc_insertion_point(field_release:perfetto.protos.FenceSignaledFtraceEvent.timeline)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.timeline_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeline_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void FenceSignaledFtraceEvent::set_allocated_timeline(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeline_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timeline_.IsDefault()) {
          _impl_.timeline_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.FenceSignaledFtraceEvent.timeline)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2ffence_2eproto_2epb_2eh
