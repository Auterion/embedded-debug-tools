// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/ftrace/skb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto;
namespace perfetto {
namespace protos {
class KfreeSkbFtraceEvent;
struct KfreeSkbFtraceEventDefaultTypeInternal;
extern KfreeSkbFtraceEventDefaultTypeInternal _KfreeSkbFtraceEvent_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template <>
::perfetto::protos::KfreeSkbFtraceEvent* Arena::CreateMaybeMessage<::perfetto::protos::KfreeSkbFtraceEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace perfetto {
namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class KfreeSkbFtraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfetto.protos.KfreeSkbFtraceEvent) */ {
 public:
  inline KfreeSkbFtraceEvent() : KfreeSkbFtraceEvent(nullptr) {}
  ~KfreeSkbFtraceEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KfreeSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KfreeSkbFtraceEvent(const KfreeSkbFtraceEvent& from);
  KfreeSkbFtraceEvent(KfreeSkbFtraceEvent&& from) noexcept
    : KfreeSkbFtraceEvent() {
    *this = ::std::move(from);
  }

  inline KfreeSkbFtraceEvent& operator=(const KfreeSkbFtraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline KfreeSkbFtraceEvent& operator=(KfreeSkbFtraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KfreeSkbFtraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const KfreeSkbFtraceEvent* internal_default_instance() {
    return reinterpret_cast<const KfreeSkbFtraceEvent*>(
               &_KfreeSkbFtraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KfreeSkbFtraceEvent& a, KfreeSkbFtraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(KfreeSkbFtraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KfreeSkbFtraceEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KfreeSkbFtraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KfreeSkbFtraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KfreeSkbFtraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KfreeSkbFtraceEvent& from) {
    KfreeSkbFtraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KfreeSkbFtraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "perfetto.protos.KfreeSkbFtraceEvent";
  }
  protected:
  explicit KfreeSkbFtraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kSkbaddrFieldNumber = 3,
    kProtocolFieldNumber = 2,
  };
  // optional uint64 location = 1;
  bool has_location() const;
  void clear_location() ;
  ::uint64_t location() const;
  void set_location(::uint64_t value);

  private:
  ::uint64_t _internal_location() const;
  void _internal_set_location(::uint64_t value);

  public:
  // optional uint64 skbaddr = 3;
  bool has_skbaddr() const;
  void clear_skbaddr() ;
  ::uint64_t skbaddr() const;
  void set_skbaddr(::uint64_t value);

  private:
  ::uint64_t _internal_skbaddr() const;
  void _internal_set_skbaddr(::uint64_t value);

  public:
  // optional uint32 protocol = 2;
  bool has_protocol() const;
  void clear_protocol() ;
  ::uint32_t protocol() const;
  void set_protocol(::uint32_t value);

  private:
  ::uint32_t _internal_protocol() const;
  void _internal_set_protocol(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:perfetto.protos.KfreeSkbFtraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t location_;
    ::uint64_t skbaddr_;
    ::uint32_t protocol_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KfreeSkbFtraceEvent

// optional uint64 location = 1;
inline bool KfreeSkbFtraceEvent::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void KfreeSkbFtraceEvent::clear_location() {
  _impl_.location_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t KfreeSkbFtraceEvent::location() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KfreeSkbFtraceEvent.location)
  return _internal_location();
}
inline void KfreeSkbFtraceEvent::set_location(::uint64_t value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KfreeSkbFtraceEvent.location)
}
inline ::uint64_t KfreeSkbFtraceEvent::_internal_location() const {
  return _impl_.location_;
}
inline void KfreeSkbFtraceEvent::_internal_set_location(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.location_ = value;
}

// optional uint32 protocol = 2;
inline bool KfreeSkbFtraceEvent::has_protocol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void KfreeSkbFtraceEvent::clear_protocol() {
  _impl_.protocol_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t KfreeSkbFtraceEvent::protocol() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KfreeSkbFtraceEvent.protocol)
  return _internal_protocol();
}
inline void KfreeSkbFtraceEvent::set_protocol(::uint32_t value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KfreeSkbFtraceEvent.protocol)
}
inline ::uint32_t KfreeSkbFtraceEvent::_internal_protocol() const {
  return _impl_.protocol_;
}
inline void KfreeSkbFtraceEvent::_internal_set_protocol(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.protocol_ = value;
}

// optional uint64 skbaddr = 3;
inline bool KfreeSkbFtraceEvent::has_skbaddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void KfreeSkbFtraceEvent::clear_skbaddr() {
  _impl_.skbaddr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t KfreeSkbFtraceEvent::skbaddr() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.KfreeSkbFtraceEvent.skbaddr)
  return _internal_skbaddr();
}
inline void KfreeSkbFtraceEvent::set_skbaddr(::uint64_t value) {
  _internal_set_skbaddr(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.KfreeSkbFtraceEvent.skbaddr)
}
inline ::uint64_t KfreeSkbFtraceEvent::_internal_skbaddr() const {
  return _impl_.skbaddr_;
}
inline void KfreeSkbFtraceEvent::_internal_set_skbaddr(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.skbaddr_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fftrace_2fskb_2eproto_2epb_2eh
